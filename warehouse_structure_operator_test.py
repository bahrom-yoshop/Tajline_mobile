#!/usr/bin/env python3
"""
üéØ –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –°–ö–õ–ê–î–ê –ß–ï–†–ï–ó –û–ü–ï–†–ê–¢–û–†–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Å–∫–ª–∞–¥–∞–º —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É 
–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ —è—á–µ–π–∫–∏ "–ë2-–ü1-–Ø1" –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
"""

import requests
import json
import os
from datetime import datetime
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class WarehouseStructureOperatorTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.warehouse_data = None
        self.test_results = []
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        self.log(f"{status} {test_name}: {details}")

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            operator_creds = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=operator_creds,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_warehouse_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥
                    self.warehouse_id = warehouse.get("id")
                    self.warehouse_data = warehouse
                    
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ",
                        True,
                        f"–°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    
                    # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ
                    self.log(f"üìã –î–µ—Ç–∞–ª–∏ —Å–∫–ª–∞–¥–∞:")
                    self.log(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {warehouse.get('name')}")
                    self.log(f"  –ê–¥—Ä–µ—Å: {warehouse.get('address', warehouse.get('location'))}")
                    self.log(f"  –ë–ª–æ–∫–æ–≤: {warehouse.get('blocks_count', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    self.log(f"  –ü–æ–ª–æ–∫ –Ω–∞ –±–ª–æ–∫: {warehouse.get('shelves_per_block', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    self.log(f"  –Ø—á–µ–µ–∫ –Ω–∞ –ø–æ–ª–∫—É: {warehouse.get('cells_per_shelf', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    self.log(f"  –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {warehouse.get('total_capacity', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def check_warehouse_structure_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            endpoints = [
                f"/warehouses/{self.warehouse_id}",
                f"/operator/warehouses/{self.warehouse_id}",
                f"/warehouses/{self.warehouse_id}/structure"
            ]
            
            for endpoint in endpoints:
                self.log(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint: {endpoint}")
                
                response = self.session.get(f"{API_BASE}{endpoint}", timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
                    structure_fields = ['layout', 'structure', 'blocks', 'warehouse_layout']
                    structure_data = None
                    
                    for field in structure_fields:
                        if field in data and data[field]:
                            structure_data = data[field]
                            break
                    
                    if structure_data:
                        if isinstance(structure_data, dict) and 'blocks' in structure_data:
                            blocks = structure_data['blocks']
                        elif isinstance(structure_data, list):
                            blocks = structure_data
                        else:
                            blocks = []
                        
                        if blocks:
                            self.log_test(
                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                                True,
                                f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å {len(blocks)} –±–ª–æ–∫–∞–º–∏"
                            )
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                            self.log("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                            for block in blocks:
                                block_num = block.get('number', block.get('block_number', '?'))
                                shelves = block.get('shelves', [])
                                self.log(f"  –ë–ª–æ–∫ {block_num}: {len(shelves)} –ø–æ–ª–æ–∫")
                                
                                for shelf in shelves:
                                    shelf_num = shelf.get('number', shelf.get('shelf_number', '?'))
                                    cells = shelf.get('cells', [])
                                    self.log(f"    –ü–æ–ª–∫–∞ {shelf_num}: {len(cells)} —è—á–µ–µ–∫")
                            
                            return True
                        else:
                            self.log("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –±–ª–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    else:
                        self.log(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç {endpoint}")
                else:
                    self.log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç {endpoint}: {response.status_code}")
            
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                False,
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ"
            )
            return False
            
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_cell_qr_verification_current_state(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏"""
        try:
            self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ '–ë2-–ü1-–Ø1'...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π QR –∫–æ–¥ –∏–∑ –∑–∞–¥–∞—á–∏
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": "–ë2-–ü1-–Ø1"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    cell_info = data.get("cell_info", {})
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ '–ë2-–ü1-–Ø1' (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)",
                        True,
                        f"QR –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç! –Ø—á–µ–π–∫–∞: {cell_info.get('cell_address', '–ë2-–ü1-–Ø1')}"
                    )
                    return True
                else:
                    error = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ '–ë2-–ü1-–Ø1' (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)",
                        False,
                        f"–û—à–∏–±–∫–∞: {error}"
                    )
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    if "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error.lower():
                        self.log("üîß –î–∏–∞–≥–Ω–æ–∑: –Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –Ω—É–∂–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞")
                    elif "—Å–∫–ª–∞–¥" in error.lower():
                        self.log("üîß –î–∏–∞–≥–Ω–æ–∑: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–∞")
                    else:
                        self.log(f"üîß –î–∏–∞–≥–Ω–æ–∑: –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - {error}")
                    
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ '–ë2-–ü1-–Ø1' (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_different_qr_formats(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫"""
        try:
            self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫...")
            
            # –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            qr_formats = [
                "–ë2-–ü1-–Ø1",  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∑–∞–¥–∞—á–∏
                "001-02-01-001",  # –§–æ—Ä–º–∞—Ç —Å ID –Ω–æ–º–µ—Ä–∞–º–∏ (—Å–∫–ª–∞–¥-–±–ª–æ–∫-–ø–æ–ª–∫–∞-—è—á–µ–π–∫–∞)
                "002-02-01-001",  # –î—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞
                "–ë1-–ü1-–Ø1",  # –ë–ª–æ–∫ 1
                "–ë3-–ü2-–Ø5",  # –ë–ª–æ–∫ 3, –ø–æ–ª–∫–∞ 2
                "B2-S1-C1",  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                "2-1-1"       # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            ]
            
            results = []
            
            for qr_code in qr_formats:
                self.log(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥: {qr_code}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cell",
                    json={"qr_code": qr_code},
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        cell_info = data.get("cell_info", {})
                        result = f"‚úÖ {qr_code} ‚Üí {cell_info.get('cell_address', qr_code)}"
                        results.append(("success", qr_code, cell_info.get('cell_address', qr_code)))
                    else:
                        error = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        result = f"‚ùå {qr_code} ‚Üí {error}"
                        results.append(("error", qr_code, error))
                else:
                    result = f"‚ùå {qr_code} ‚Üí HTTP {response.status_code}"
                    results.append(("http_error", qr_code, f"HTTP {response.status_code}"))
                
                self.log(f"  {result}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = len([r for r in results if r[0] == "success"])
            total_count = len(results)
            
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤",
                success_count > 0,
                f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count} —Ñ–æ—Ä–º–∞—Ç–æ–≤"
            )
            
            return success_count > 0
            
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def analyze_warehouse_configuration(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            self.log("üî¨ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞...")
            
            if not self.warehouse_data:
                self.log_test("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞", False, "–î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            blocks_count = self.warehouse_data.get('blocks_count', 0)
            shelves_per_block = self.warehouse_data.get('shelves_per_block', 0)
            cells_per_shelf = self.warehouse_data.get('cells_per_shelf', 0)
            total_capacity = self.warehouse_data.get('total_capacity', 0)
            
            self.log("üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞:")
            self.log(f"  –ë–ª–æ–∫–æ–≤: {blocks_count}")
            self.log(f"  –ü–æ–ª–æ–∫ –Ω–∞ –±–ª–æ–∫: {shelves_per_block}")
            self.log(f"  –Ø—á–µ–µ–∫ –Ω–∞ –ø–æ–ª–∫—É: {cells_per_shelf}")
            self.log(f"  –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {total_capacity}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —è—á–µ–π–∫–∏ –ë2-–ü1-–Ø1
            required_blocks = 2  # –ù—É–∂–µ–Ω –±–ª–æ–∫ 2
            required_shelves = 1  # –ù—É–∂–Ω–∞ –ø–æ–ª–∫–∞ 1
            required_cells = 1   # –ù—É–∂–Ω–∞ —è—á–µ–π–∫–∞ 1
            
            config_sufficient = (
                blocks_count >= required_blocks and
                shelves_per_block >= required_shelves and
                cells_per_shelf >= required_cells
            )
            
            if config_sufficient:
                self.log_test(
                    "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è —è—á–µ–π–∫–∏ –ë2-–ü1-–Ø1 (–±–ª–æ–∫–æ–≤: {blocks_count}, –ø–æ–ª–æ–∫: {shelves_per_block}, —è—á–µ–µ–∫: {cells_per_shelf})"
                )
                
                # –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∞ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                self.log("üí° –í—ã–≤–æ–¥: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç layout —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
                return True
            else:
                self.log_test(
                    "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞: –Ω—É–∂–Ω–æ –±–ª–æ–∫–æ–≤‚â•{required_blocks}, –ø–æ–ª–æ–∫‚â•{required_shelves}, —è—á–µ–µ–∫‚â•{required_cells}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def attempt_structure_creation_via_api(self):
        """–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API"""
        try:
            self.log("üèóÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ API...")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–¥–∞—á–∏
            warehouse_layout = {
                "layout": {
                    "blocks": [
                        {
                            "number": 1,
                            "shelves": [
                                {
                                    "number": 1,
                                    "cells": [{"number": i, "is_occupied": False} for i in range(1, 11)]
                                }
                            ]
                        },
                        {
                            "number": 2,
                            "shelves": [
                                {
                                    "number": 1,
                                    "cells": [{"number": i, "is_occupied": False} for i in range(1, 11)]
                                }
                            ]
                        },
                        {
                            "number": 3,
                            "shelves": [
                                {
                                    "number": j,
                                    "cells": [{"number": i, "is_occupied": False} for i in range(1, 11)]
                                }
                                for j in range(1, 4)
                            ]
                        }
                    ]
                }
            }
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –∏ –º–µ—Ç–æ–¥—ã
            endpoints_methods = [
                (f"/warehouses/{self.warehouse_id}/structure", "PUT"),
                (f"/warehouses/{self.warehouse_id}/structure", "POST"),
                (f"/warehouses/{self.warehouse_id}", "PATCH"),
                (f"/operator/warehouses/{self.warehouse_id}/structure", "PUT"),
                (f"/operator/warehouses/{self.warehouse_id}", "PATCH")
            ]
            
            for endpoint, method in endpoints_methods:
                self.log(f"–ü—Ä–æ–±—É–µ–º {method} {endpoint}")
                
                try:
                    if method == "PUT":
                        response = self.session.put(f"{API_BASE}{endpoint}", json=warehouse_layout, timeout=30)
                    elif method == "POST":
                        response = self.session.post(f"{API_BASE}{endpoint}", json=warehouse_layout, timeout=30)
                    else:  # PATCH
                        response = self.session.patch(f"{API_BASE}{endpoint}", json=warehouse_layout, timeout=30)
                    
                    if response.status_code in [200, 201, 204]:
                        self.log_test(
                            "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ API",
                            True,
                            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ {method} {endpoint}"
                        )
                        return True
                    else:
                        self.log(f"  ‚ùå {method} {endpoint}: {response.status_code} - {response.text[:100]}")
                
                except Exception as e:
                    self.log(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {method} {endpoint}: {str(e)}")
            
            self.log_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ API",
                False,
                "–ù–∏ –æ–¥–∏–Ω –∏–∑ API endpoints –Ω–µ –ø–æ–∑–≤–æ–ª–∏–ª —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
            )
            return False
            
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ API", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def provide_recommendations(self):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            self.log("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–®–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú–´:")
            
            recommendations = [
                "1. üîß –ü–†–Ø–ú–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:",
                "   - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB –Ω–∞–ø—Ä—è–º—É—é",
                "   - –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å–∫–ª–∞–¥–∞, –¥–æ–±–∞–≤–∏–≤ –ø–æ–ª–µ 'layout' —Å –±–ª–æ–∫–∞–º–∏/–ø–æ–ª–∫–∞–º–∏/—è—á–µ–π–∫–∞–º–∏",
                "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –∫–æ–¥–∞ –≤—ã—à–µ",
                "",
                "2. üõ†Ô∏è –°–û–ó–î–ê–ù–ò–ï API ENDPOINT –î–õ–Ø –°–¢–†–£–ö–¢–£–†–´:",
                "   - –î–æ–±–∞–≤–∏—Ç—å –≤ backend endpoint PUT /api/admin/warehouses/{id}/structure",
                "   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤/–ø–æ–ª–æ–∫/—è—á–µ–µ–∫ –≤ –ë–î",
                "   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ endpoint",
                "",
                "3. üîç –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –Ø–ß–ï–ï–ö:",
                "   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –≤ POST /api/operator/placement/verify-cell",
                "   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–∏—Å–∫ —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å layout —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
                "   - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫",
                "",
                "4. üìã –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï:",
                "   - –°–æ–∑–¥–∞—Ç—å —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API endpoints",
                "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ warehouse_blocks, warehouse_shelves, warehouse_cells",
                "   - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ID –Ω–æ–º–µ—Ä–∞ –¥–ª—è —è—á–µ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            ]
            
            for rec in recommendations:
                self.log(rec)
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            return False

    def run_comprehensive_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å QR –∫–æ–¥–∞–º–∏ —è—á–µ–µ–∫"""
        self.log("üéØ –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å QR –∫–æ–¥–∞–º–∏ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞")
        self.log("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
        if not self.get_warehouse_info():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ")
            return False
        
        # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        has_structure = self.check_warehouse_structure_exists()
        
        # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è QR –∫–æ–¥–∞
        qr_works_now = self.test_cell_qr_verification_current_state()
        
        # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤
        self.test_different_qr_formats()
        
        # –≠—Ç–∞–ø 6: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞
        config_ok = self.analyze_warehouse_configuration()
        
        # –≠—Ç–∞–ø 7: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if not has_structure and not qr_works_now:
            structure_created = self.attempt_structure_creation_via_api()
            
            if structure_created:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                self.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
                time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                qr_works_after = self.test_cell_qr_verification_current_state()
                
                if qr_works_after:
                    self.log("üéâ –£–°–ü–ï–•: QR –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã!")
                else:
                    self.log("‚ö†Ô∏è QR –∫–æ–¥ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        # –≠—Ç–∞–ø 8: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.provide_recommendations()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.log("=" * 80)
        self.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        
        passed_tests = sum(1 for result in self.test_results if result["success"])
        total_tests = len(self.test_results)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            self.log(f"  {status} {result['test']}: {result['details']}")
        
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        self.log(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        if qr_works_now:
            self.log("üéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: QR –∫–æ–¥ —è—á–µ–π–∫–∏ '–ë2-–ü1-–Ø1' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            self.log("üîß –ü–†–û–ë–õ–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –†–ï–®–ï–ù–ò–Ø: QR –∫–æ–¥ —è—á–µ–π–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.log("üìã –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseStructureOperatorTester()
    success = tester.run_comprehensive_analysis()
    
    if success:
        print("\nüéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù: –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
        return 0
    else:
        print("\nüîß –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        return 1

if __name__ == "__main__":
    exit(main())