#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ TAJLINE.TJ

–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –î–û–ë–ê–í–õ–ï–ù–ê:
1. ‚úÖ Backend: –£–ª—É—á—à–µ–Ω endpoint /api/auth/login –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. ‚úÖ Backend: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –æ—à–∏–±–∫–∞ HTTP 403 —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º/—É–¥–∞–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
3. ‚úÖ Frontend: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ userStatusModal –∏ userStatusData –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
4. ‚úÖ Frontend: –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handleLogin –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
5. ‚úÖ Frontend: –°–æ–∑–¥–∞–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –°–¢–ê–¢–£–°–ê:
- status_message: –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
- status_details: –¥–µ—Ç–∞–ª–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- user_role: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞, –ö—É—Ä—å–µ—Ä, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)  
- user_name: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- user_phone: —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- is_deleted: true –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω, false –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (is_active: false)
3. –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HTTP 403 —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π (admin, operator, courier, user)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ/—É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –æ—à–∏–±–∫–∏.
"""

import requests
import json
import os
from datetime import datetime
import uuid

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
if not BACKEND_URL.endswith('/api'):
    BACKEND_URL = f"{BACKEND_URL}/api"

print(f"üîß Backend URL: {BACKEND_URL}")

class UserStatusModalTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_results = []
        self.test_users = []  # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if not success:
            print(f"   üìã Details: {details}")
    
    def test_admin_login(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'Unknown')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')}, —Ä–æ–ª—å: {user_info.get('role', 'N/A')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                )
                return True
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def test_active_user_login(self):
        """–¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                user_info = data.get("user", {})
                
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    True,
                    f"–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_info.get('full_name', 'Unknown')}' —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω, —Ä–æ–ª—å: {user_info.get('role', 'N/A')}"
                )
                return True
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def create_test_blocked_user(self, role="user"):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            unique_id = str(uuid.uuid4())[:8]
            test_phone = f"+7999{unique_id[:7]}"
            
            user_data = {
                "full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {role.title()} {unique_id}",
                "phone": test_phone,
                "password": "test123",
                "role": role
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            response = self.session.post(f"{BACKEND_URL}/auth/register", json=user_data)
            
            if response.status_code in [200, 201]:  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –∏–ª–∏ 201
                created_user = response.json()
                user_info = created_user.get("user", {})
                user_id = user_info.get("id")
                
                if not user_id:
                    self.log_result(
                        f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({role})",
                        False,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {created_user}"
                    )
                    return None
                
                # –¢–µ–ø–µ—Ä—å –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ MongoDB
                import pymongo
                from pymongo import MongoClient
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
                mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
                db_name = os.environ.get('DB_NAME', 'test_database')
                client = MongoClient(mongo_url)
                db = client[db_name]
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = db.users.update_one(
                    {"id": user_id},
                    {"$set": {"is_active": False}}
                )
                
                if result.modified_count > 0:
                    self.test_users.append({
                        "id": user_id,
                        "phone": test_phone,
                        "password": "test123",
                        "role": role,
                        "full_name": user_data["full_name"]
                    })
                    
                    self.log_result(
                        f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({role})",
                        True,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_data['full_name']}' —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (is_active: false), —Ç–µ–ª–µ—Ñ–æ–Ω: {test_phone}"
                    )
                    return self.test_users[-1]
                else:
                    self.log_result(
                        f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({role})",
                        False,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )
                    return None
            else:
                self.log_result(
                    f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({role})",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: HTTP {response.status_code}: {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_result(
                f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({role})",
                False,
                f"Exception: {str(e)}"
            )
            return None
    
    def test_blocked_user_login(self, blocked_user):
        """–¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            if not blocked_user:
                self.log_result(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                    False,
                    "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω"
                )
                return False
            
            login_data = {
                "phone": blocked_user["phone"],
                "password": blocked_user["password"]
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 403:
                # –û–∂–∏–¥–∞–µ–º HTTP 403 —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
                try:
                    error_data = response.json()
                    detail = error_data.get("detail", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
                    required_fields = ["status_message", "status_details", "user_role", "user_name", "user_phone", "is_deleted"]
                    missing_fields = []
                    
                    for field in required_fields:
                        if field not in detail:
                            missing_fields.append(field)
                    
                    if not missing_fields:
                        self.log_result(
                            "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                            True,
                            f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - HTTP 403 —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ! –°—Ç–∞—Ç—É—Å: '{detail.get('status_message', 'N/A')}', –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '{detail.get('user_name', 'N/A')}', –†–æ–ª—å: '{detail.get('user_role', 'N/A')}', –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {not detail.get('is_deleted', True)}"
                        )
                        return True
                    else:
                        self.log_result(
                            "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                            False,
                            f"HTTP 403 –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞: {missing_fields}. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {detail}"
                        )
                        return False
                        
                except json.JSONDecodeError:
                    self.log_result(
                        "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                        False,
                        f"HTTP 403 –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {response.text}"
                    )
                    return False
            else:
                self.log_result(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 403, –ø–æ–ª—É—á–µ–Ω HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def test_different_roles_blocked(self):
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        roles_to_test = ["admin", "warehouse_operator", "courier", "user"]
        success_count = 0
        
        for role in roles_to_test:
            blocked_user = self.create_test_blocked_user(role)
            if blocked_user and self.test_blocked_user_login(blocked_user):
                success_count += 1
        
        self.log_result(
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            success_count == len(roles_to_test),
            f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count}/{len(roles_to_test)} —Ä–æ–ª–µ–π: {roles_to_test}"
        )
        
        return success_count == len(roles_to_test)
    
    def create_test_deleted_user(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            unique_id = str(uuid.uuid4())[:8]
            test_phone = f"+7998{unique_id[:7]}"
            
            user_data = {
                "full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –£–¥–∞–ª–µ–Ω–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unique_id}",
                "phone": test_phone,
                "password": "test123",
                "role": "user"
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            response = self.session.post(f"{BACKEND_URL}/auth/register", json=user_data)
            
            if response.status_code in [200, 201]:  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 –∏–ª–∏ 201
                created_user = response.json()
                user_info = created_user.get("user", {})
                user_id = user_info.get("id")
                
                if not user_id:
                    self.log_result(
                        "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        False,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {created_user}"
                    )
                    return None
                
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ MongoDB
                import pymongo
                from pymongo import MongoClient
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
                mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
                db_name = os.environ.get('DB_NAME', 'test_database')
                client = MongoClient(mongo_url)
                db = client[db_name]
                
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
                result = db.users.update_one(
                    {"id": user_id},
                    {"$set": {
                        "is_active": False,
                        "deleted_at": datetime.now().isoformat()
                    }}
                )
                
                if result.modified_count > 0:
                    deleted_user = {
                        "id": user_id,
                        "phone": test_phone,
                        "password": "test123",
                        "role": "user",
                        "full_name": user_data["full_name"],
                        "is_deleted": True
                    }
                    self.test_users.append(deleted_user)
                    
                    self.log_result(
                        "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        True,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_data['full_name']}' —Å–æ–∑–¥–∞–Ω –∏ —É–¥–∞–ª–µ–Ω, —Ç–µ–ª–µ—Ñ–æ–Ω: {test_phone}"
                    )
                    return deleted_user
                else:
                    self.log_result(
                        "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        False,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )
                    return None
            else:
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: HTTP {response.status_code}: {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                False,
                f"Exception: {str(e)}"
            )
            return None
    
    def test_deleted_user_login(self):
        """–¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        deleted_user = self.create_test_deleted_user()
        
        if not deleted_user:
            self.log_result(
                "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                False,
                "–¢–µ—Å—Ç–æ–≤—ã–π —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω"
            )
            return False
        
        try:
            login_data = {
                "phone": deleted_user["phone"],
                "password": deleted_user["password"]
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 403:
                try:
                    error_data = response.json()
                    detail = error_data.get("detail", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ is_deleted = true –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    is_deleted = detail.get("is_deleted", False)
                    
                    if is_deleted:
                        self.log_result(
                            "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                            True,
                            f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - HTTP 403 –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –°—Ç–∞—Ç—É—Å: '{detail.get('status_message', 'N/A')}', is_deleted: {is_deleted}"
                        )
                        return True
                    else:
                        self.log_result(
                            "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                            False,
                            f"HTTP 403 –ø–æ–ª—É—á–µ–Ω, –Ω–æ is_deleted = {is_deleted} (–æ–∂–∏–¥–∞–ª—Å—è true). –î–∞–Ω–Ω—ã–µ: {detail}"
                        )
                        return False
                        
                except json.JSONDecodeError:
                    self.log_result(
                        "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                        False,
                        f"HTTP 403 –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {response.text}"
                    )
                    return False
            else:
                self.log_result(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 403, –ø–æ–ª—É—á–µ–Ω HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def cleanup_test_users(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.test_users:
            return
        
        try:
            import pymongo
            from pymongo import MongoClient
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
            mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
            db_name = os.environ.get('DB_NAME', 'test_database')
            client = MongoClient(mongo_url)
            db = client[db_name]
            
            cleaned_count = 0
            for user in self.test_users:
                try:
                    result = db.users.delete_one({"id": user['id']})
                    if result.deleted_count > 0:
                        cleaned_count += 1
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
            
            if cleaned_count > 0:
                print(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ TAJLINE.TJ")
        print("=" * 100)
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.test_admin_login():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return
        
        # –¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.test_active_user_login()
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        blocked_user = self.create_test_blocked_user("user")
        if blocked_user:
            self.test_blocked_user_login(blocked_user)
        
        # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        self.test_different_roles_blocked()
        
        # –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.test_deleted_user_login()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.cleanup_test_users()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print("\n" + "=" * 100)
        print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –°–¢–ê–¢–£–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        else:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï –°–¢–ê–¢–£–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(f"{result['status']}: {result['test']}")
            if not result['success']:
                print(f"   üìã {result['details']}")

if __name__ == "__main__":
    tester = UserStatusModalTester()
    tester.run_all_tests()