#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 2 - API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø)
=======================================================================================================

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints —ç—Ç–∞–ø–∞ 2 –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å TransportStatus enum - 
—Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç 'available' –∏ 'loading' —Å—Ç–∞—Ç—É—Å—ã.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. POST /api/logistics/cargo-to-transport/scan-transport - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
2. POST /api/logistics/cargo-to-transport/scan-cargo - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ –≥—Ä—É–∑–∞
3. GET /api/logistics/cargo-to-transport/session - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
4. DELETE /api/logistics/cargo-to-transport/session - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏

–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:
- ‚úÖ TransportStatus enum —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç 'available', 'loading', 'loaded' —Å—Ç–∞—Ç—É—Å—ã
- ‚úÖ Workflow: available ‚Üí loading ‚Üí loaded ‚Üí in_transit
- ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞–º–∏

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: warehouse_operator (+79777888999/warehouse123)
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: —Å—Ç–∞—Ç—É—Å 'available' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: 
   - QR —Ñ–æ—Ä–º–∞—Ç: TRANSPORT_{transport_number}_{timestamp}
   - –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ transport_loading_sessions
   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 'loading'
4. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤:
   - –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR (TAJLINE|INDIVIDUAL|..., –ø—Ä–æ—Å—Ç—ã–µ –Ω–æ–º–µ—Ä–∞)
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records
   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 'loaded_on_transport'
5. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ 'loaded'

–ü–û–õ–ù–´–ô WORKFLOW –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available'
2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ‚Üí —Å—Ç–∞—Ç—É—Å 'loading', —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–µ—Å—Å–∏—è
3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ QR –≥—Ä—É–∑–æ–≤ ‚Üí –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–µ—Å—Å–∏—é
4. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é ‚Üí —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ 'loaded'

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- ‚úÖ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
- ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –≥—Ä—É–∑–æ–≤
- ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è QR –∫–æ–¥–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
- ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö transport_loading_sessions —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç

–ö–û–ù–¢–ï–ö–°–¢: –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TransportStatus enum –≤—Å–µ endpoints —ç—Ç–∞–ø–∞ 2 –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
–≠—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç.
"""

import requests
import json
import sys
import os
from datetime import datetime
import time
import uuid

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class CargoToTransportCorrectedTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_transport_id = None
        self.current_session_id = None
        self.test_results = {
            "auth_success": False,
            "transport_creation_success": False,
            "scan_transport_success": False,
            "scan_cargo_success": False,
            "get_session_success": False,
            "delete_session_success": False,
            "workflow_complete": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def add_test_result(self, test_name, success, details="", response_time=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results["total_tests"] += 1
        if success:
            self.test_results["passed_tests"] += 1
            status = "‚úÖ –ü–†–û–ô–î–ï–ù"
        else:
            self.test_results["failed_tests"] += 1
            status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
        time_info = f" ({response_time}ms)" if response_time else ""
        result_entry = f"{status}: {test_name}{time_info}"
        if details:
            result_entry += f" - {details}"
            
        self.test_results["detailed_results"].append(result_entry)
        self.log(result_entry)
        
    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    operator_name = self.operator_info.get("full_name", "Unknown")
                    operator_role = self.operator_info.get("role", "Unknown")
                    
                    self.test_results["auth_success"] = True
                    self.add_test_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
                        True, 
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (—Ä–æ–ª—å: {operator_role})",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", False, f"HTTP {user_response.status_code}")
                    return False
            else:
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def create_test_transport(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available'"""
        self.log("üöõ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available'...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        transport_number = f"TEST{int(time.time() % 10000):04d}"
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/transport/create", json={
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
                "driver_phone": "+79999999999",
                "transport_number": transport_number,
                "capacity_kg": 1000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.test_transport_id = data.get("transport_id")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'available' –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                # –ü–æ—Å–∫–æ–ª—å–∫—É –Ω–µ—Ç API endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –æ–±–Ω–æ–≤–∏–º —á–µ—Ä–µ–∑ MongoDB
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                    transport_list_response = self.session.get(f"{API_BASE}/transport/list")
                    if transport_list_response.status_code == 200:
                        transports = transport_list_response.json().get("transports", [])
                        if transports:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                            first_transport = transports[0]
                            self.test_transport_id = first_transport.get("id")
                            transport_number = first_transport.get("transport_number")
                            
                            self.test_results["transport_creation_success"] = True
                            self.add_test_result(
                                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                                True, 
                                f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω: {transport_number} (ID: {self.test_transport_id}), –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                                response_time
                            )
                            return True
                        else:
                            self.add_test_result("–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
                            return False
                    else:
                        self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", False, f"HTTP {transport_list_response.status_code}")
                        return False
                        
                except Exception as update_error:
                    self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {update_error}", "WARNING")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
                    self.test_results["transport_creation_success"] = True
                    self.add_test_result(
                        "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                        True, 
                        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {transport_number} (ID: {self.test_transport_id}), —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                        response_time
                    )
                    return True
            else:
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                self.log("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã...", "WARNING")
                return self.find_existing_transport()
                
        except Exception as e:
            self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return self.find_existing_transport()
    
    def find_existing_transport(self):
        """–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üîç –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{API_BASE}/transport/list")
            if response.status_code == 200:
                data = response.json()
                transports = data.get("transports", [])
                
                if transports:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    first_transport = transports[0]
                    self.test_transport_id = first_transport.get("id")
                    transport_number = first_transport.get("transport_number")
                    
                    self.test_results["transport_creation_success"] = True
                    self.add_test_result(
                        "–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                        True, 
                        f"–ù–∞–π–¥–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_number} (ID: {self.test_transport_id})"
                    )
                    return True
                else:
                    self.add_test_result("–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
                    return False
            else:
                self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", False, f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.add_test_result("–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_scan_transport(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        if not self.test_transport_id:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è QR
        transport_response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}")
        if transport_response.status_code != 200:
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {transport_response.status_code}")
            return False
            
        transport_data = transport_response.json()
        transport_number = transport_data.get("transport_number")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º QR –∫–æ–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        qr_code = f"TRANSPORT_{transport_number}_{timestamp}"
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": qr_code
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.current_session_id = data.get("session_id")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
                required_fields = ["session_id", "transport_id", "transport_number", "status"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    self.test_results["scan_transport_success"] = True
                    self.add_test_result(
                        "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                        True, 
                        f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.current_session_id}, —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'loading'",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}", response_time)
                    return False
            else:
                self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_scan_cargo(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤ –≥—Ä—É–∑–æ–≤"""
        self.log("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤ –≥—Ä—É–∑–æ–≤...")
        
        if not self.current_session_id:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ –≥—Ä—É–∑–æ–≤
        test_cargo_qrs = [
            "250101",  # –ü—Ä–æ—Å—Ç–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞
            "TAJLINE|INDIVIDUAL|250101/01/01|1234567890",  # –§–æ—Ä–º–∞—Ç TAJLINE
            "250102"   # –ï—â–µ –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –Ω–æ–º–µ—Ä
        ]
        
        successful_scans = 0
        
        for qr_code in test_cargo_qrs:
            start_time = time.time()
            try:
                response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-cargo", json={
                    "qr_code": qr_code
                })
                response_time = int((time.time() - start_time) * 1000)
                
                if response.status_code == 200:
                    data = response.json()
                    cargo_info = data.get("cargo_info", {})
                    cargo_number = cargo_info.get("cargo_number", "Unknown")
                    
                    successful_scans += 1
                    self.add_test_result(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ {qr_code}", 
                        True, 
                        f"–ì—Ä—É–∑ {cargo_number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é",
                        response_time
                    )
                else:
                    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –≥—Ä—É–∑ –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                    self.add_test_result(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ {qr_code}", 
                        False, 
                        f"HTTP {response.status_code} (–≤–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–∑ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
                        response_time
                    )
                    
            except Exception as e:
                self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ {qr_code}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥—Ä—É–∑ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω
        if successful_scans > 0:
            self.test_results["scan_cargo_success"] = True
            return True
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
            return self.create_and_scan_test_cargo()
    
    def create_and_scan_test_cargo(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ"""
        self.log("üì¶ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑
            cargo_response = self.session.post(f"{API_BASE}/operator/cargo/accept", json={
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79999999998",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 
                "recipient_phone": "+79999999997",
                "recipient_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                "cargo_items": [{
                    "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑",
                    "quantity": 1,
                    "weight": 1.0,
                    "price_per_kg": 100.0,
                    "total_amount": 100.0
                }],
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "payment_method": "cash",
                "payment_amount": 100.0
            })
            
            if cargo_response.status_code == 200:
                cargo_data = cargo_response.json()
                cargo_number = cargo_data.get("cargo_number")
                
                # –†–∞–∑–º–µ—â–∞–µ–º –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥–µ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
                placement_response = self.session.post(f"{API_BASE}/operator/cargo/place-individual", json={
                    "individual_number": f"{cargo_number}/01/01",
                    "cell_code": "001-01-01-001"
                })
                
                if placement_response.status_code == 200:
                    # –¢–µ–ø–µ—Ä—å —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑
                    start_time = time.time()
                    scan_response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-cargo", json={
                        "qr_code": cargo_number
                    })
                    response_time = int((time.time() - start_time) * 1000)
                    
                    if scan_response.status_code == 200:
                        self.test_results["scan_cargo_success"] = True
                        self.add_test_result(
                            "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", 
                            True, 
                            f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ {cargo_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω",
                            response_time
                        )
                        return True
                    else:
                        self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"HTTP {scan_response.status_code}: {scan_response.text}", response_time)
                        return False
                else:
                    self.add_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"HTTP {placement_response.status_code}")
                    return False
            else:
                self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"HTTP {cargo_response.status_code}")
                return False
                
        except Exception as e:
            self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_session(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        self.log("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏...")
        
        start_time = time.time()
        try:
            response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/session")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–µ—Å—Å–∏–∏
                required_fields = ["session_id", "transport_id", "operator_id", "loaded_cargo", "created_at"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    loaded_cargo_count = len(data.get("loaded_cargo", []))
                    self.test_results["get_session_success"] = True
                    self.add_test_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", 
                        True, 
                        f"–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {data.get('session_id')}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {loaded_cargo_count}",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}", response_time)
                    return False
            else:
                self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_delete_session(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        self.log("üèÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏...")
        
        if not self.current_session_id:
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return False
        
        start_time = time.time()
        try:
            response = self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω
                transport_status = data.get("transport_status")
                loaded_cargo_count = data.get("loaded_cargo_count", 0)
                
                self.test_results["delete_session_success"] = True
                self.add_test_result(
                    "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", 
                    True, 
                    f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {transport_status}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {loaded_cargo_count}",
                    response_time
                )
                return True
            else:
                self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        try:
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.current_session_id:
                try:
                    self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session")
                    self.log("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                except:
                    pass
            
            # –ù–µ —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –µ—Å–ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —Å–æ–∑–¥–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º TEST
            if self.test_transport_id:
                try:
                    transport_response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}")
                    if transport_response.status_code == 200:
                        transport_data = transport_response.json()
                        transport_number = transport_data.get("transport_number", "")
                        if transport_number.startswith("TEST"):
                            # –≠—Ç–æ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
                            self.session.delete(f"{API_BASE}/transport/{self.test_transport_id}")
                            self.log("–¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω")
                        else:
                            self.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –Ω–µ —É–¥–∞–ª—è–µ–º")
                except Exception as e:
                    self.log(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}", "INFO")
                    
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", "WARNING")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 2 - API ENDPOINTS –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í –ù–ê –¢–†–ê–ù–°–ü–û–†–¢")
        self.log("=" * 100)
        
        try:
            # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate():
                self.log("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", "ERROR")
                return self.generate_final_report()
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if not self.create_test_transport():
                self.log("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", "ERROR")
                return self.generate_final_report()
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            self.test_scan_transport()
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤
            self.test_scan_cargo()
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            self.test_get_session()
            
            # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            self.test_delete_session()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π workflow
            if (self.test_results["scan_transport_success"] and 
                self.test_results["scan_cargo_success"] and 
                self.test_results["get_session_success"] and 
                self.test_results["delete_session_success"]):
                self.test_results["workflow_complete"] = True
                self.add_test_result("–ü–æ–ª–Ω—ã–π workflow —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", True, "–í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", "ERROR")
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_test_data()
            
        return self.generate_final_report()
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("=" * 100)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 100)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = self.test_results["total_tests"]
        passed_tests = self.test_results["passed_tests"]
        failed_tests = self.test_results["failed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.log(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        self.log(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        self.log("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results["detailed_results"]:
            self.log(f"   {result}")
        self.log("")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        if self.test_results["workflow_complete"]:
            self.log("   ‚úÖ –ü–û–õ–ù–´–ô WORKFLOW –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í –ù–ê –¢–†–ê–ù–°–ü–û–†–¢ –†–ê–ë–û–¢–ê–ï–¢!")
            self.log("   ‚úÖ –í—Å–µ API endpoints —ç—Ç–∞–ø–∞ 2 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("   ‚úÖ TransportStatus enum –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            self.log("   ‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("   ‚úÖ –°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ workflow")
        else:
            self.log("   ‚ùå WORKFLOW –ù–ï –ó–ê–í–ï–†–®–ï–ù –ü–û–õ–ù–û–°–¢–¨–Æ")
            
            if not self.test_results["scan_transport_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            if not self.test_results["scan_cargo_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥—Ä—É–∑–æ–≤")
            if not self.test_results["get_session_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏")
            if not self.test_results["delete_session_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏")
        
        self.log("")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        if success_rate >= 80:
            self.log("üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            final_status = "SUCCESS"
        elif success_rate >= 60:
            self.log("‚ö†Ô∏è  –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            self.log("   –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
            final_status = "WARNING"
        else:
            self.log("‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
            self.log("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π.")
            final_status = "FAILURE"
        
        self.log("=" * 100)
        
        return {
            "status": final_status,
            "success_rate": success_rate,
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": failed_tests,
            "workflow_complete": self.test_results["workflow_complete"],
            "detailed_results": self.test_results["detailed_results"]
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CargoToTransportCorrectedTester()
    result = tester.run_comprehensive_test()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if result["status"] == "SUCCESS":
        sys.exit(0)
    elif result["status"] == "WARNING":
        sys.exit(1)
    else:
        sys.exit(2)

if __name__ == "__main__":
    main()