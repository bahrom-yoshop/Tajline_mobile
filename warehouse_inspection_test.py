#!/usr/bin/env python3
"""
üîç –ò–ù–°–ü–ï–ö–¶–ò–Ø –°–ö–õ–ê–î–û–í –ò –Ø–ß–ï–ï–ö –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò QR –ö–û–î–û–í

–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å–∫–ª–∞–¥—ã –∏ —è—á–µ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤
"""

import requests
import json
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://tajline-cargo-8.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class WarehouseInspector:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        
    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        response = self.session.post(f"{API_BASE}/auth/login", json=WAREHOUSE_OPERATOR_CREDENTIALS)
        
        if response.status_code == 200:
            data = response.json()
            self.auth_token = data.get("access_token")
            self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            return False
    
    def inspect_warehouses(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–æ–≤"""
        print("\nüè¢ –ò–ù–°–ü–ï–ö–¶–ò–Ø –°–ö–õ–ê–î–û–í:")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
        response = self.session.get(f"{API_BASE}/admin/warehouses")
        
        if response.status_code == 200:
            warehouses = response.json()
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
            
            for warehouse in warehouses:
                print(f"\nüì¶ –°–∫–ª–∞–¥: {warehouse.get('name')}")
                print(f"   üÜî ID: {warehouse.get('id')}")
                print(f"   üî¢ –ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞: {warehouse.get('warehouse_id_number', '–ù–ï–¢')}")
                print(f"   üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse.get('location')}")
                print(f"   üèóÔ∏è –ë–ª–æ–∫–æ–≤: {warehouse.get('blocks_count')}")
                print(f"   üìö –ü–æ–ª–æ–∫ –Ω–∞ –±–ª–æ–∫: {warehouse.get('shelves_per_block')}")
                print(f"   üì¶ –Ø—á–µ–µ–∫ –Ω–∞ –ø–æ–ª–∫—É: {warehouse.get('cells_per_shelf')}")
                print(f"   üìà –û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {warehouse.get('total_capacity')}")
                print(f"   ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {warehouse.get('is_active')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                self.inspect_warehouse_cells(warehouse.get('id'), warehouse.get('warehouse_id_number'))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
    
    def inspect_warehouse_cells(self, warehouse_id, warehouse_id_number):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞"""
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ {warehouse_id_number}:")
        
        # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞
        response = self.session.get(f"{API_BASE}/admin/warehouses/{warehouse_id}/cells")
        
        if response.status_code == 200:
            cells = response.json()
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {len(cells)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —è—á–µ–µ–∫ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã
            for i, cell in enumerate(cells[:5]):
                print(f"   üì¶ –Ø—á–µ–π–∫–∞ {i+1}: {cell.get('location_code')} (ID –∫–æ–¥: {cell.get('id_based_code', '–ù–ï–¢')})")
                print(f"      –ë–ª–æ–∫: {cell.get('block_number')}, –ü–æ–ª–∫–∞: {cell.get('shelf_number')}, –Ø—á–µ–π–∫–∞: {cell.get('cell_number')}")
                print(f"      –ó–∞–Ω—è—Ç–∞: {cell.get('is_occupied', False)}")
            
            if len(cells) > 5:
                print(f"   ... –∏ –µ—â–µ {len(cells) - 5} —è—á–µ–µ–∫")
                
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cells = ["001-01-01-003", "002-02-02-001", "003-03-03-005"]
            for test_cell in test_cells:
                found_cell = None
                for cell in cells:
                    if cell.get('id_based_code') == test_cell:
                        found_cell = cell
                        break
                
                if found_cell:
                    print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —è—á–µ–π–∫–∞ {test_cell} –Ω–∞–π–¥–µ–Ω–∞: {found_cell.get('location_code')}")
                else:
                    print(f"   ‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —è—á–µ–π–∫–∞ {test_cell} –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è—á–µ–µ–∫: {response.status_code}")
    
    def test_specific_qr_codes(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö QR –∫–æ–¥–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —è—á–µ–π–∫–∞–º–∏"""
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• QR –ö–û–î–û–í:")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —è—á–µ–µ–∫
        response = self.session.get(f"{API_BASE}/admin/warehouses")
        
        if response.status_code == 200:
            warehouses = response.json()
            
            for warehouse in warehouses:
                warehouse_id = warehouse.get('id')
                warehouse_id_number = warehouse.get('warehouse_id_number')
                
                if not warehouse_id_number:
                    continue
                
                print(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–ª–∞–¥ {warehouse_id_number} ({warehouse.get('name')})")
                
                # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                cells_response = self.session.get(f"{API_BASE}/admin/warehouses/{warehouse_id}/cells")
                
                if cells_response.status_code == 200:
                    cells = cells_response.json()
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —è—á–µ–π–∫–∏
                    for i, cell in enumerate(cells[:3]):
                        id_based_code = cell.get('id_based_code')
                        if id_based_code:
                            print(f"   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥: {id_based_code}")
                            
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º verify-cell endpoint
                            verify_response = self.session.post(
                                f"{API_BASE}/operator/placement/verify-cell",
                                json={"qr_code": id_based_code}
                            )
                            
                            if verify_response.status_code == 200:
                                verify_data = verify_response.json()
                                if verify_data.get("success"):
                                    cell_info = verify_data.get("cell_info", {})
                                    warehouse_info = verify_data.get("warehouse_info", {})
                                    print(f"   ‚úÖ QR –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç: –°–∫–ª–∞–¥ {warehouse_info.get('warehouse_id_number')}, –Ø—á–µ–π–∫–∞ {cell_info.get('cell_address')}")
                                else:
                                    print(f"   ‚ùå QR –∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {verify_data.get('error')}")
                            else:
                                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {verify_response.status_code}")
                        else:
                            print(f"   ‚ö†Ô∏è –Ø—á–µ–π–∫–∞ –±–µ–∑ id_based_code: {cell.get('location_code')}")
    
    def run_inspection(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–∏"""
        print("üîç –ò–ù–°–ü–ï–ö–¶–ò–Ø –°–ö–õ–ê–î–û–í –ò –Ø–ß–ï–ï–ö –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò QR –ö–û–î–û–í")
        print("=" * 70)
        
        if not self.authenticate():
            return False
        
        self.inspect_warehouses()
        self.test_specific_qr_codes()
        
        print("\n" + "=" * 70)
        print("üìã –ò–ù–°–ü–ï–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 70)
        
        return True

def main():
    inspector = WarehouseInspector()
    inspector.run_inspection()

if __name__ == "__main__":
    main()