#!/usr/bin/env python3
"""
–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –í–°–ï–• –î–ê–ù–ù–´–• –°–í–Ø–ó–ê–ù–ù–´–• –° –û–ü–ï–†–ê–¢–û–†–û–ú USR648425
==============================================================

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –í–°–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è USR648425 –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏ –ø–æ–ª—è—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–ò–°–ö–ê:
1. –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º MongoDB
2. –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–ª—è–º —Å "USR648425"
3. –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ 25082298, 250101, 25082235 –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
4. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≥–¥–µ –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è placement_records
5. –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º –∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
"""

import requests
import json
import sys
import os
from datetime import datetime
from pymongo import MongoClient
import re

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_OPERATOR = "USR648425"
TARGET_APPLICATIONS = ["25082298", "250101", "25082235"]

class ComprehensiveUSR648425Search:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.mongo_client = None
        self.db = None
        self.search_results = {
            "collections_searched": 0,
            "operator_mentions": {},
            "application_mentions": {},
            "placement_data_found": [],
            "potential_matches": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def connect_to_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            MONGO_URL = "mongodb://localhost:27017"
            DB_NAME = "cargo_transport"
            
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            collections = self.db.list_collection_names()
            self.log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            self.search_results["collections_searched"] = len(collections)
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}", "ERROR")
            return False
    
    def search_all_collections_for_operator(self):
        """–ü–æ–∏—Å–∫ USR648425 –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö"""
        self.log(f"üîç –ü–û–ò–°–ö {TARGET_OPERATOR} –í–û –í–°–ï–• –ö–û–õ–õ–ï–ö–¶–ò–Ø–•...")
        self.log("=" * 60)
        
        try:
            collections = self.db.list_collection_names()
            
            for collection_name in collections:
                self.log(f"\nüìÇ –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_name}")
                collection = self.db[collection_name]
                
                # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                search_patterns = [
                    {"$text": {"$search": TARGET_OPERATOR}},  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
                    {"$or": [
                        {field: TARGET_OPERATOR} for field in [
                            "placed_by_operator", "placed_by", "operator_id", 
                            "placed_by_operator_id", "created_by", "updated_by",
                            "user_id", "operator", "placed_by_user", "accepting_operator"
                        ]
                    ]},
                    {"$or": [
                        {field: {"$regex": TARGET_OPERATOR, "$options": "i"}} for field in [
                            "placed_by_operator", "placed_by", "operator_id", 
                            "placed_by_operator_id", "created_by", "updated_by",
                            "user_id", "operator", "placed_by_user", "accepting_operator"
                        ]
                    ]}
                ]
                
                total_found = 0
                
                for i, pattern in enumerate(search_patterns):
                    try:
                        if i == 0:  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞
                            try:
                                results = list(collection.find(pattern).limit(10))
                            except:
                                continue
                        else:
                            results = list(collection.find(pattern).limit(10))
                        
                        if results:
                            total_found += len(results)
                            self.log(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π (–ø–∞—Ç—Ç–µ—Ä–Ω {i+1})")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                            for result in results[:3]:
                                self.search_results["operator_mentions"][collection_name] = self.search_results["operator_mentions"].get(collection_name, [])
                                self.search_results["operator_mentions"][collection_name].append({
                                    "pattern": i+1,
                                    "sample_data": {k: v for k, v in result.items() if k != "_id"}
                                })
                    except Exception as e:
                        continue
                
                if total_found == 0:
                    self.log(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å {TARGET_OPERATOR}")
                else:
                    self.log(f"  üéØ –í–°–ï–ì–û –Ω–∞–π–¥–µ–Ω–æ: {total_found} –∑–∞–ø–∏—Å–µ–π")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º: {e}", "ERROR")
    
    def search_applications_in_all_collections(self):
        """–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö"""
        self.log(f"\nüîç –ü–û–ò–°–ö –ó–ê–Ø–í–û–ö –í–û –í–°–ï–• –ö–û–õ–õ–ï–ö–¶–ò–Ø–•...")
        self.log("=" * 60)
        
        try:
            collections = self.db.list_collection_names()
            
            for app_number in TARGET_APPLICATIONS:
                self.log(f"\nüìã –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {app_number}:")
                
                for collection_name in collections:
                    collection = self.db[collection_name]
                    
                    # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
                    search_patterns = [
                        {"cargo_number": app_number},
                        {"application_number": app_number},
                        {"request_number": app_number},
                        {"number": app_number},
                        {"id": app_number}
                    ]
                    
                    found_in_collection = False
                    
                    for pattern in search_patterns:
                        try:
                            results = list(collection.find(pattern).limit(5))
                            if results:
                                found_in_collection = True
                                self.log(f"  ‚úÖ {collection_name}: {len(results)} –∑–∞–ø–∏—Å–µ–π")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                                self.search_results["application_mentions"][app_number] = self.search_results["application_mentions"].get(app_number, {})
                                self.search_results["application_mentions"][app_number][collection_name] = {
                                    "count": len(results),
                                    "sample": results[0] if results else None
                                }
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≤ —ç—Ç–∏—Ö –∑–∞–ø–∏—Å—è—Ö
                                for result in results:
                                    placement_fields = [
                                        "placement_records", "individual_items", "placed_items",
                                        "is_placed", "placement_info", "placed_by_operator"
                                    ]
                                    
                                    for field in placement_fields:
                                        if field in result and result[field]:
                                            self.search_results["placement_data_found"].append({
                                                "application": app_number,
                                                "collection": collection_name,
                                                "field": field,
                                                "data": result[field]
                                            })
                                break
                        except Exception as e:
                            continue
                    
                    if not found_in_collection:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ regex –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                        try:
                            regex_results = list(collection.find({
                                "$or": [
                                    {"cargo_number": {"$regex": app_number}},
                                    {"application_number": {"$regex": app_number}},
                                    {"request_number": {"$regex": app_number}}
                                ]
                            }).limit(3))
                            
                            if regex_results:
                                self.log(f"  üîç {collection_name}: {len(regex_results)} —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                        except:
                            pass
                            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}", "ERROR")
    
    def analyze_placement_data_structure(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log(f"\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –†–ê–ó–ú–ï–©–ï–ù–ò–Ø...")
        self.log("=" * 60)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            placement_collections = [
                "placement_records", "operator_cargo", "cargo", 
                "warehouse_cells", "individual_items", "cargo_placement"
            ]
            
            for collection_name in placement_collections:
                if collection_name in self.db.list_collection_names():
                    collection = self.db[collection_name]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    sample_records = list(collection.find().limit(3))
                    total_count = collection.count_documents({})
                    
                    self.log(f"\nüìÇ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name}:")
                    self.log(f"  üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count}")
                    
                    if sample_records:
                        self.log(f"  üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
                        sample = sample_records[0]
                        for key, value in sample.items():
                            if key != "_id":
                                value_type = type(value).__name__
                                if isinstance(value, list) and value:
                                    value_preview = f"[{len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–≤—ã–π: {type(value[0]).__name__}]"
                                elif isinstance(value, dict):
                                    value_preview = f"{{dict —Å {len(value)} –∫–ª—é—á–∞–º–∏}}"
                                else:
                                    value_preview = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)
                                
                                self.log(f"    {key}: {value_type} = {value_preview}")
                        
                        # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
                        operator_fields = []
                        for key in sample.keys():
                            if any(op_word in key.lower() for op_word in ["operator", "placed", "user", "by"]):
                                operator_fields.append(key)
                        
                        if operator_fields:
                            self.log(f"  üéØ –ü–æ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {operator_fields}")
                    else:
                        self.log(f"  ‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è")
                else:
                    self.log(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}", "ERROR")
    
    def search_for_similar_operators(self):
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        self.log(f"\nüîç –ü–û–ò–°–ö –ü–û–•–û–ñ–ò–• –û–ü–ï–†–ê–¢–û–†–û–í...")
        self.log("=" * 60)
        
        try:
            # –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            collections_to_search = ["users", "placement_records", "operator_cargo", "cargo"]
            
            for collection_name in collections_to_search:
                if collection_name in self.db.list_collection_names():
                    collection = self.db[collection_name]
                    
                    # –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å USR
                    usr_operators = list(collection.find({
                        "$or": [
                            {"user_number": {"$regex": "^USR"}},
                            {"operator_id": {"$regex": "^USR"}},
                            {"placed_by_operator": {"$regex": "^USR"}},
                            {"placed_by": {"$regex": "^USR"}}
                        ]
                    }).limit(10))
                    
                    if usr_operators:
                        self.log(f"\nüìÇ {collection_name}: –Ω–∞–π–¥–µ–Ω–æ {len(usr_operators)} USR –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
                        
                        unique_operators = set()
                        for record in usr_operators:
                            for field in ["user_number", "operator_id", "placed_by_operator", "placed_by"]:
                                if field in record and record[field] and record[field].startswith("USR"):
                                    unique_operators.add(record[field])
                        
                        self.log(f"  üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ USR –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: {sorted(unique_operators)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–ª–∏–∑–∫–∏–µ –∫ USR648425
                        for operator in unique_operators:
                            if "648" in operator or operator.endswith("425"):
                                self.log(f"  ‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: {operator}")
                                self.search_results["potential_matches"].append({
                                    "collection": collection_name,
                                    "operator": operator,
                                    "reason": "–°–æ–¥–µ—Ä–∂–∏—Ç 648 –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 425"
                                })
                                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}", "ERROR")
    
    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –î–ê–ù–ù–´–• –û–ü–ï–†–ê–¢–û–†–ê {TARGET_OPERATOR}")
        self.log(f"üìÖ –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        self.log(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê:")
        self.log(f"  –ö–æ–ª–ª–µ–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {self.search_results['collections_searched']}")
        self.log(f"  –£–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω–æ: {len(self.search_results['operator_mentions'])}")
        self.log(f"  –ó–∞—è–≤–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(self.search_results['application_mentions'])}")
        self.log(f"  –î–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ: {len(self.search_results['placement_data_found'])}")
        self.log(f"  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(self.search_results['potential_matches'])}")
        
        # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if self.search_results["operator_mentions"]:
            self.log(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –£–ü–û–ú–ò–ù–ê–ù–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê {TARGET_OPERATOR}:")
            for collection, mentions in self.search_results["operator_mentions"].items():
                self.log(f"  üìÇ {collection}: {len(mentions)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                for mention in mentions[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    self.log(f"    - –ü–∞—Ç—Ç–µ—Ä–Ω {mention['pattern']}: {list(mention['sample_data'].keys())}")
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        if self.search_results["application_mentions"]:
            self.log(f"\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò:")
            for app_number, collections in self.search_results["application_mentions"].items():
                self.log(f"  üìã –ó–∞—è–≤–∫–∞ {app_number}:")
                for collection, data in collections.items():
                    self.log(f"    üìÇ {collection}: {data['count']} –∑–∞–ø–∏—Å–µ–π")
        
        # –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if self.search_results["placement_data_found"]:
            self.log(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
            for placement in self.search_results["placement_data_found"]:
                self.log(f"  üìã –ó–∞—è–≤–∫–∞ {placement['application']} –≤ {placement['collection']}")
                self.log(f"    –ü–æ–ª–µ: {placement['field']}")
                if isinstance(placement['data'], list):
                    self.log(f"    –î–∞–Ω–Ω—ã–µ: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(placement['data'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                else:
                    self.log(f"    –î–∞–Ω–Ω—ã–µ: {str(placement['data'])[:100]}...")
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if self.search_results["potential_matches"]:
            self.log(f"\n‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø:")
            for match in self.search_results["potential_matches"]:
                self.log(f"  üîç {match['operator']} –≤ {match['collection']}")
                self.log(f"    –ü—Ä–∏—á–∏–Ω–∞: {match['reason']}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´:")
        
        if self.search_results["operator_mentions"]:
            self.log("‚úÖ –ù–ê–ô–î–ï–ù–´ –£–ü–û–ú–ò–ù–ê–ù–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê USR648425!")
            self.log("üîç –î–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
        elif self.search_results["potential_matches"]:
            self.log("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–û–•–û–ñ–ò–ï –û–ü–ï–†–ê–¢–û–†–´!")
            self.log("üîç –í–æ–∑–º–æ–∂–Ω–æ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å–∞–Ω —Å –æ—à–∏–±–∫–æ–π")
        else:
            self.log("‚ùå –û–ü–ï–†–ê–¢–û–† USR648425 –ù–ï –ù–ê–ô–î–ï–ù –ù–ò–ì–î–ï!")
            self.log("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
            self.log("   2. –ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å–∞–Ω –ø–æ-–¥—Ä—É–≥–æ–º—É")
            self.log("   3. –î–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            self.log("   4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—à–∏–±—Å—è –≤ –Ω–æ–º–µ—Ä–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        
        if self.search_results["application_mentions"]:
            self.log(f"\n‚úÖ –ó–ê–Ø–í–ö–ò –ù–ê–ô–î–ï–ù–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
            self.log("üîç –ó–∞—è–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å USR648425")
        else:
            self.log(f"\n‚ùå –ó–ê–Ø–í–ö–ò –ù–ï –ù–ê–ô–î–ï–ù–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
            self.log("üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        
        return len(self.search_results["operator_mentions"]) > 0 or len(self.search_results["potential_matches"]) > 0
    
    def run_comprehensive_search(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê USR648425")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ü–û–ò–°–ö –ü–†–ï–†–í–ê–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        if not self.connect_to_mongodb():
            self.log("‚ùå –ü–û–ò–°–ö –ü–†–ï–†–í–ê–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB", "ERROR")
            return False
        
        # 3. –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
        self.search_all_collections_for_operator()
        
        # 4. –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
        self.search_applications_in_all_collections()
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        self.analyze_placement_data_structure()
        
        # 6. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        self.search_for_similar_operators()
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        success = self.generate_comprehensive_report()
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    search = ComprehensiveUSR648425Search()
    
    try:
        success = search.run_comprehensive_search()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù!")
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å USR648425 –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
            print("üìä –°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤—ã—à–µ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –ù–ï –î–ê–õ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í!")
            print("üîç –û–ø–µ—Ä–∞—Ç–æ—Ä USR648425 –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()