#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —É–¥–∞–ª—è–µ—Ç —Å–∫–ª–∞–¥—ã, 
–Ω–æ –ø–∏—à–µ—Ç "—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤ (0)".

–ü–õ–ê–ù –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)
2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ (GET /api/admin/warehouses, GET /api/warehouses)
3) –ü–æ–∏—Å–∫ endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
4) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
6) –ê–Ω–∞–ª–∏–∑ backend –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://freight-qr-system.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class WarehouseBulkDeletionTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.admin_user_info = None
        self.warehouses = []
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def test_admin_authorization(self):
        """1. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.log("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": ADMIN_PHONE,
                "password": ADMIN_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_user_info = data.get("user")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                user_name = self.admin_user_info.get("full_name", "Unknown")
                user_number = self.admin_user_info.get("user_number", "Unknown")
                user_role = self.admin_user_info.get("role", "Unknown")
                
                self.log(f"‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ '{user_name}' (–Ω–æ–º–µ—Ä: {user_number}), —Ä–æ–ª—å: {user_role}")
                return True
            else:
                self.log(f"‚ùå –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –°—Ç–∞—Ç—É—Å: {response.status_code}")
                self.log(f"–û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_get_warehouses_list(self):
        """2. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤"""
        self.log("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
        endpoints_to_test = [
            "/admin/warehouses",
            "/warehouses",
            "/operator/warehouses"
        ]
        
        successful_endpoint = None
        
        for endpoint in endpoints_to_test:
            try:
                self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint: GET {endpoint}")
                response = self.session.get(f"{BACKEND_URL}{endpoint}")
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if isinstance(data, list):
                        warehouses = data
                    elif isinstance(data, dict) and "items" in data:
                        warehouses = data["items"]
                    elif isinstance(data, dict) and "warehouses" in data:
                        warehouses = data["warehouses"]
                    else:
                        warehouses = []
                    
                    if warehouses:
                        self.warehouses = warehouses
                        successful_endpoint = endpoint
                        self.log(f"‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ {endpoint}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        for i, warehouse in enumerate(warehouses[:3]):
                            warehouse_id = warehouse.get("id", "Unknown")
                            warehouse_name = warehouse.get("name", "Unknown")
                            warehouse_location = warehouse.get("location", "Unknown")
                            self.log(f"   –°–∫–ª–∞–¥ {i+1}: ID={warehouse_id}, –ù–∞–∑–≤–∞–Ω–∏–µ='{warehouse_name}', –õ–æ–∫–∞—Ü–∏—è='{warehouse_location}'")
                        
                        break
                    else:
                        self.log(f"‚ö†Ô∏è Endpoint {endpoint} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                else:
                    self.log(f"‚ùå Endpoint {endpoint} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
            except Exception as e:
                self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint}: {e}")
        
        if successful_endpoint:
            self.log(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ {successful_endpoint}")
            return True
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω endpoint")
            return False
    
    def test_bulk_deletion_endpoints(self):
        """3. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–∏—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤"""
        self.log("üóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–∏—Å–∫ endpoints –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
        
        if not self.warehouses:
            self.log("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        # Endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        bulk_deletion_endpoints = [
            "/admin/warehouses/bulk",
            "/warehouses/bulk",
            "/admin/warehouses/bulk-delete",
            "/warehouses/bulk-delete"
        ]
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 —Å–∫–ª–∞–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        test_warehouse_ids = [w.get("id") for w in self.warehouses[:2] if w.get("id")]
        
        if not test_warehouse_ids:
            self.log("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ —Å ID: {test_warehouse_ids}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        test_data_structures = [
            {"ids": test_warehouse_ids},
            {"warehouse_ids": test_warehouse_ids},
            test_warehouse_ids,  # –ü—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫
            {"warehouses": test_warehouse_ids}
        ]
        
        found_working_endpoint = False
        
        for endpoint in bulk_deletion_endpoints:
            self.log(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: DELETE {endpoint}")
            
            for i, test_data in enumerate(test_data_structures):
                try:
                    self.log(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö {i+1}: {json.dumps(test_data, indent=2)}")
                    
                    response = self.session.delete(f"{BACKEND_URL}{endpoint}", json=test_data)
                    
                    self.log(f"   üìä –û—Ç–≤–µ—Ç: –°—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    if response.status_code == 200:
                        response_data = response.json()
                        self.log(f"   ‚úÖ –£–°–ü–ï–•: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
                        found_working_endpoint = True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —É–¥–∞–ª–∏–ª–∏—Å—å —Å–∫–ª–∞–¥—ã
                        deleted_count = response_data.get("deleted_count", 0)
                        if deleted_count > 0:
                            self.log(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–∫–ª–∞–¥–æ–≤!")
                        else:
                            self.log(f"   üö® –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ deleted_count = {deleted_count}")
                        
                    elif response.status_code == 404:
                        self.log(f"   ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    elif response.status_code == 422:
                        self.log(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (422): {response.text}")
                    else:
                        self.log(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                        
                except Exception as e:
                    self.log(f"   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        if not found_working_endpoint:
            self.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        return True
    
    def test_individual_deletion(self):
        """4. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤"""
        self.log("üóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤")
        
        if not self.warehouses:
            self.log("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        # Endpoints –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        individual_deletion_endpoints = [
            "/admin/warehouses/{id}",
            "/warehouses/{id}"
        ]
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–ª–∞–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        test_warehouse = self.warehouses[-1]
        test_warehouse_id = test_warehouse.get("id")
        test_warehouse_name = test_warehouse.get("name", "Unknown")
        
        if not test_warehouse_id:
            self.log("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–∫–ª–∞–¥–∞ –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞: ID={test_warehouse_id}, –ù–∞–∑–≤–∞–Ω–∏–µ='{test_warehouse_name}'")
        
        found_working_endpoint = False
        
        for endpoint_template in individual_deletion_endpoints:
            endpoint = endpoint_template.format(id=test_warehouse_id)
            self.log(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint: DELETE {endpoint}")
            
            try:
                response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                
                self.log(f"üìä –û—Ç–≤–µ—Ç: –°—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code == 200:
                    response_data = response.json()
                    self.log(f"‚úÖ –£–°–ü–ï–•: {json.dumps(response_data, indent=2, ensure_ascii=False)}")
                    found_working_endpoint = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
                    if "deleted" in str(response_data).lower() or "success" in str(response_data).lower():
                        self.log(f"üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                    else:
                        self.log(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –ù–µ—è—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è")
                        
                elif response.status_code == 404:
                    self.log(f"‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (404)")
                elif response.status_code == 403:
                    self.log(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (403)")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                    
            except Exception as e:
                self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        if found_working_endpoint:
            self.log("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
            return True
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
            return False
    
    def analyze_backend_code_structure(self):
        """5. –ê–ù–ê–õ–ò–ó: –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –≤ backend –∫–æ–¥–µ"""
        self.log("üîç –ê–ù–ê–õ–ò–ó: –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ backend –∫–æ–¥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ endpoints –≤ –∫–æ–¥–µ
        try:
            with open("/app/backend/server.py", "r", encoding="utf-8") as f:
                backend_code = f.read()
            
            # –ò—â–µ–º endpoints —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–ª–∞–¥–∞–º–∏
            warehouse_endpoints = []
            
            # –ü–æ–∏—Å–∫ DELETE endpoints –¥–ª—è —Å–∫–ª–∞–¥–æ–≤
            import re
            delete_patterns = [
                r'@app\.delete\(["\'].*warehouses.*["\'].*\)',
                r'async def.*delete.*warehouse.*\(',
                r'def.*delete.*warehouse.*\('
            ]
            
            for pattern in delete_patterns:
                matches = re.findall(pattern, backend_code, re.IGNORECASE)
                warehouse_endpoints.extend(matches)
            
            if warehouse_endpoints:
                self.log("‚úÖ –ù–ê–ô–î–ï–ù–´ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ backend –∫–æ–¥–µ:")
                for endpoint in warehouse_endpoints:
                    self.log(f"   üìù {endpoint}")
            else:
                self.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ï –ù–ê–ô–î–ï–ù–´ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ backend –∫–æ–¥–µ!")
                self.log("   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, –ø–æ—á–µ–º—É –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ò—â–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            bulk_delete_patterns = [
                r'class.*BulkDelete.*Request.*\(',
                r'class.*Warehouse.*Delete.*\(',
                r'warehouse_ids.*List\[str\]'
            ]
            
            bulk_models = []
            for pattern in bulk_delete_patterns:
                matches = re.findall(pattern, backend_code, re.IGNORECASE)
                bulk_models.extend(matches)
            
            if bulk_models:
                self.log("‚úÖ –ù–ê–ô–î–ï–ù–´ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:")
                for model in bulk_models:
                    self.log(f"   üìù {model}")
            else:
                self.log("‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–´ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ backend –∫–æ–¥–∞: {e}")
            return False
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ")
        self.log("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.test_admin_authorization():
            self.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        self.log("-" * 80)
        
        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        if not self.test_get_warehouses_list():
            self.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        self.log("-" * 80)
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        bulk_deletion_works = self.test_bulk_deletion_endpoints()
        
        self.log("-" * 80)
        
        # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        individual_deletion_works = self.test_individual_deletion()
        
        self.log("-" * 80)
        
        # –≠—Ç–∞–ø 5: –ê–Ω–∞–ª–∏–∑ backend –∫–æ–¥–∞
        self.analyze_backend_code_structure()
        
        self.log("=" * 80)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.log("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        
        if bulk_deletion_works:
            self.log("‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            self.log("‚ùå –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        
        if individual_deletion_works:
            self.log("‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            self.log("‚ùå –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É
        if not bulk_deletion_works and not individual_deletion_works:
            self.log("üö® –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ backend")
        elif not bulk_deletion_works and individual_deletion_works:
            self.log("üö® –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
        elif bulk_deletion_works:
            self.log("‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ –≤ frontend –∏–ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞")
        
        self.log("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üè• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ")
    print("=" * 80)
    
    tester = WarehouseBulkDeletionTester()
    
    try:
        success = tester.run_comprehensive_diagnosis()
        
        if success:
            print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
            return 0
        else:
            print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        return 1
    except Exception as e:
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())