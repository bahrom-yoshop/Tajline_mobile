#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" –≤ TAJLINE.TJ

–ù–ê–ô–î–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:
- –†–∞–∑–¥–µ–ª "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç GET /api/cargo/all (2058 –≥—Ä—É–∑–æ–≤)
- –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: DELETE /api/admin/cargo/{id}
- –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: DELETE /api/admin/cargo/bulk
- –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
- Endpoint –æ–∂–∏–¥–∞–µ—Ç: {"ids": [list_of_ids]}
- –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: {"cargo_ids": [list_of_ids]}

–§–ò–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (GET /api/cargo/all)
3) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
4) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫
5) –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-system.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class CargoListMassDeleteFinalTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.admin_info = None
        self.cargo_list = []
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìù –î–µ—Ç–∞–ª–∏: {details}")
        if error_msg:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}")
        print()

    def test_admin_authorization(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)"""
        try:
            auth_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_info = data.get("user")
                
                admin_name = self.admin_info.get("full_name", "Unknown")
                admin_role = self.admin_info.get("role", "Unknown")
                user_number = self.admin_info.get("user_number", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{admin_name}' (–Ω–æ–º–µ—Ä: {user_number}), —Ä–æ–ª—å: {admin_role}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                False,
                "",
                str(e)
            )
            return False

    def test_get_cargo_list(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (GET /api/cargo/all)"""
        try:
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/cargo/all", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    self.cargo_list = data
                elif "items" in data:
                    self.cargo_list = data["items"]
                else:
                    self.cargo_list = [data] if data else []
                
                cargo_count = len(self.cargo_list)
                
                if cargo_count > 0:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–æ–≤
                    statuses = {}
                    for cargo in self.cargo_list:
                        status = cargo.get("status", "unknown")
                        statuses[status] = statuses.get(status, 0) + 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
                    sample_cargo = self.cargo_list[0]
                    required_fields = ["id", "cargo_number"]
                    missing_fields = [field for field in required_fields if field not in sample_cargo]
                    
                    if not missing_fields:
                        self.log_test(
                            '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (GET /api/cargo/all)',
                            True,
                            f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤. –°—Ç–∞—Ç—É—Å—ã: {statuses}. –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                        )
                        return True
                    else:
                        self.log_test(
                            '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (GET /api/cargo/all)',
                            False,
                            f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}",
                            "–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞"
                        )
                        return False
                else:
                    self.log_test(
                        '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (GET /api/cargo/all)',
                        False,
                        "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç",
                        "–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                    )
                    return False
            else:
                self.log_test(
                    '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (GET /api/cargo/all)',
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (GET /api/cargo/all)',
                False,
                "",
                str(e)
            )
            return False

    def test_mass_deletion_wrong_format(self):
        """–¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ –ø—Ä–æ–±–ª–µ–º–µ)"""
        try:
            if len(self.cargo_list) < 3:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    "",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º 2 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo_ids = [cargo["id"] for cargo in self.cargo_list[:2]]
            test_cargo_numbers = [cargo["cargo_number"] for cargo in self.cargo_list[:2]]
            
            # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ –ø—Ä–æ–±–ª–µ–º–µ)
            wrong_bulk_delete_data = {
                "cargo_ids": test_cargo_ids  # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç cargo_ids
            }
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.delete(f"{API_BASE}/admin/cargo/bulk", json=wrong_bulk_delete_data, headers=headers)
            
            if response.status_code == 400:
                data = response.json()
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"–ü–†–û–ë–õ–ï–ú–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö {{\"cargo_ids\": [...]}} –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É 400. –û—Ç–≤–µ—Ç: {data}",
                    "–≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' –∏ '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'"
                )
                return True
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}",
                    f"–û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                False,
                "",
                str(e)
            )
            return False

    def test_mass_deletion_correct_format(self):
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)"""
        try:
            if len(self.cargo_list) < 5:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    "",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 3 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo_ids = [cargo["id"] for cargo in self.cargo_list[2:5]]
            test_cargo_numbers = [cargo["cargo_number"] for cargo in self.cargo_list[2:5]]
            
            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
            correct_bulk_delete_data = {
                "ids": test_cargo_ids  # Backend –æ–∂–∏–¥–∞–µ—Ç ids
            }
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.delete(f"{API_BASE}/admin/cargo/bulk", json=correct_bulk_delete_data, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                deleted_count = data.get("deleted_count", 0)
                total_requested = data.get("total_requested", 0)
                
                if deleted_count > 0 and total_requested == len(test_cargo_ids):
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                        True,
                        f"–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö {{\"ids\": [...]}} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—è–µ—Ç –≥—Ä—É–∑—ã! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} –≥—Ä—É–∑–æ–≤. –ù–æ–º–µ—Ä–∞: {test_cargo_numbers}. –û—Ç–≤–µ—Ç: {data}"
                    )
                    return True
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ: deleted_count={deleted_count}, total_requested={total_requested}",
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                False,
                "",
                str(e)
            )
            return False

    def test_empty_ids_validation(self):
        """–¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ ID"""
        try:
            # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ID
            empty_bulk_delete_data = {
                "ids": []
            }
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.delete(f"{API_BASE}/admin/cargo/bulk", json=empty_bulk_delete_data, headers=headers)
            
            if response.status_code == 400:
                data = response.json()
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ ID",
                    True,
                    f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: HTTP 400. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ ID",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}",
                    f"–û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ ID",
                False,
                "",
                str(e)
            )
            return False

    def test_nonexistent_ids_handling(self):
        """–¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID"""
        try:
            # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID
            fake_ids = ["fake-id-1", "fake-id-2", "fake-id-3"]
            fake_bulk_delete_data = {
                "ids": fake_ids
            }
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.delete(f"{API_BASE}/admin/cargo/bulk", json=fake_bulk_delete_data, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                deleted_count = data.get("deleted_count", 0)
                total_requested = data.get("total_requested", 0)
                
                if deleted_count == 0 and total_requested == len(fake_ids):
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID",
                        True,
                        f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} (–æ–∂–∏–¥–∞–µ–º–æ 0). –û—Ç–≤–µ—Ç: {data}"
                    )
                    return True
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: deleted_count={deleted_count}, total_requested={total_requested}",
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID",
                False,
                "",
                str(e)
            )
            return False

    def test_verify_cargo_list_update(self):
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/cargo/all", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    updated_cargo_list = data
                elif "items" in data:
                    updated_cargo_list = data["items"]
                else:
                    updated_cargo_list = [data] if data else []
                
                updated_count = len(updated_cargo_list)
                original_count = len(self.cargo_list)
                
                # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å (–±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –≥—Ä—É–∑—ã –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö)
                if updated_count < original_count:
                    deleted_in_tests = original_count - updated_count
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
                        True,
                        f"–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –æ–±–Ω–æ–≤–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –±—ã–ª–æ {original_count} –≥—Ä—É–∑–æ–≤, —Å—Ç–∞–ª–æ {updated_count} –≥—Ä—É–∑–æ–≤. –£–¥–∞–ª–µ–Ω–æ –≤ —Ç–µ—Å—Ç–∞—Ö: {deleted_in_tests} –≥—Ä—É–∑–æ–≤"
                    )
                    return True
                elif updated_count == original_count:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
                        True,
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {updated_count} –≥—Ä—É–∑–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –±—ã–ª–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
                        False,
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å: –±—ã–ª–æ {original_count}, —Å—Ç–∞–ª–æ {updated_count}",
                        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–∑–æ–≤"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
                False,
                "",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' –≤ TAJLINE.TJ")
        print("=" * 120)
        print()
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_admin_authorization,
            self.test_get_cargo_list,
            self.test_mass_deletion_wrong_format,
            self.test_mass_deletion_correct_format,
            self.test_empty_ids_validation,
            self.test_nonexistent_ids_handling,
            self.test_verify_cargo_list_update
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            if test():
                passed_tests += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            import time
            time.sleep(1)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 120)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        if success_rate >= 85:
            print("üéâ –ü–†–û–ë–õ–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –î–ò–ê–ì–ù–û–°–¢–ò–†–û–í–ê–ù–ê –ò –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–æ–∫ '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' –∏ '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'")
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            print("‚úÖ Backend –æ–∂–∏–¥–∞–µ—Ç: {\"ids\": [list_of_ids]}")
            print("‚úÖ Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: {\"cargo_ids\": [list_of_ids]}")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print()
            print("üîß –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("1. –ò–∑–º–µ–Ω–∏—Ç—å frontend –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {\"ids\": [list_of_ids]} –≤–º–µ—Å—Ç–æ {\"cargo_ids\": [list_of_ids]}")
            print("2. –ò–õ–ò –∏–∑–º–µ–Ω–∏—Ç—å backend –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è {\"cargo_ids\": [list_of_ids]}")
            print("3. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å frontend –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É API")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API endpoints –∏–ª–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        
        print()
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("-" * 80)
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
            if result["error"]:
                print(f"   ‚ö†Ô∏è {result['error']}")
        
        return success_rate >= 85

if __name__ == "__main__":
    tester = CargoListMassDeleteFinalTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—Å—Å–æ–≤—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üîß –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ")
    else:
        print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")