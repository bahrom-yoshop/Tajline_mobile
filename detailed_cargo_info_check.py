#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã cargo_info
"""

import requests
import json
import os

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE = "d0a8362d-b4d3-4947-b335-28c94658a021"

def main():
    session = requests.Session()
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
    response = session.post(f"{API_BASE}/auth/login", json={
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    })
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return
    
    data = response.json()
    auth_token = data.get("access_token")
    
    session.headers.update({
        "Authorization": f"Bearer {auth_token}"
    })
    
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º layout-with-cargo
    print(f"\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE}...")
    response = session.get(f"{API_BASE}/warehouses/{TARGET_WAREHOUSE}/layout-with-cargo")
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        return
    
    data = response.json()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
    for key, value in data.items():
        if key == "cargo_info":
            print(f"  {key}: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"  {key}: {type(value).__name__} = {value}")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo_info
    cargo_info = data.get("cargo_info", [])
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó cargo_info ({len(cargo_info)} –µ–¥–∏–Ω–∏—Ü):")
    
    for i, unit in enumerate(cargo_info):
        print(f"\nüì¶ –ï–î–ò–ù–ò–¶–ê #{i + 1}:")
        print(f"  –í—Å–µ –ø–æ–ª—è: {list(unit.keys())}")
        
        for key, value in unit.items():
            print(f"    {key}: {value} ({type(value).__name__})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
    if cargo_info:
        all_fields = set()
        for unit in cargo_info:
            all_fields.update(unit.keys())
        
        print(f"\nüìä –°–í–û–î–ö–ê –ü–û –ü–û–õ–Ø–ú:")
        print(f"  –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {len(all_fields)}")
        print(f"  –ü–æ–ª—è: {sorted(all_fields)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å –≤–æ –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
        common_fields = set(cargo_info[0].keys())
        for unit in cargo_info[1:]:
            common_fields &= set(unit.keys())
        
        print(f"  –ü–æ–ª—è –≤–æ –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö: {sorted(common_fields)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
        missing_in_some = all_fields - common_fields
        if missing_in_some:
            print(f"  –ü–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö: {sorted(missing_in_some)}")

if __name__ == "__main__":
    main()