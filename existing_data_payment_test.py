#!/usr/bin/env python3
"""
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´ –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –î–ê–ù–ù–´–ú–ò TAJLINE.TJ

–ü–æ—Å–∫–æ–ª—å–∫—É —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞
3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã
4. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (+79991234567/courier123)
5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞
6. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã –≤ –∑–∞—è–≤–∫–∞—Ö –∫—É—Ä—å–µ—Ä–∞
7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/operator/pickup-requests/{id} –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
8. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–π—Ç–∏ –≥–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class ExistingDataPaymentTester:
    def __init__(self, base_url="https://tajline-tracker.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.users = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üîç TAJLINE.TJ EXISTING DATA PAYMENT STATUS TESTING")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_existing_payment_data(self):
        """Test existing payment data in the system"""
        print("\nüéØ –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–• –û –°–¢–ê–¢–£–°–ï –û–ü–õ–ê–¢–´")
        print("   üìã –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
        
        analysis_results = {}
        
        # –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê
        print("\n   üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Operator Authentication",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        
        if not success or 'access_token' not in login_response:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            return False
        
        operator_token = login_response['access_token']
        operator_user = login_response.get('user', {})
        
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {operator_user.get('full_name')}")
        print(f"   üëë –†–æ–ª—å: {operator_user.get('role')}")
        print(f"   üÜî –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {operator_user.get('user_number')}")
        
        self.tokens['operator'] = operator_token
        self.users['operator'] = operator_user
        analysis_results['operator_auth'] = True
        
        # –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê
        print("\n   üì¨ –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê...")
        
        success, notifications_response = self.run_test(
            "Get All Warehouse Notifications",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token
        )
        
        if not success:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return False
        
        notifications = notifications_response if isinstance(notifications_response, list) else []
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞")
        
        # –≠–¢–ê–ü 3: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ù–ê –ü–†–ï–î–ú–ï–¢ –ü–û–õ–ï–ô –û–ü–õ–ê–¢–´
        print("\n   üîç –≠–¢–ê–ü 3: –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô...")
        
        pickup_notifications = []
        payment_fields_in_notifications = {}
        
        for i, notification in enumerate(notifications):
            print(f"\n   üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i+1}:")
            print(f"      ID: {notification.get('id')}")
            print(f"      –¢–∏–ø: {notification.get('type', 'unknown')}")
            print(f"      –°—Ç–∞—Ç—É—Å: {notification.get('status')}")
            print(f"      –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.get('message', '')[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ pickup_request_id
            pickup_request_id = notification.get('pickup_request_id')
            if pickup_request_id:
                print(f"      ‚úÖ pickup_request_id: {pickup_request_id}")
                pickup_notifications.append(notification)
            
            # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã
            notification_payment_fields = {}
            for key, value in notification.items():
                if 'payment' in key.lower() or 'pay' in key.lower():
                    notification_payment_fields[key] = value
                    print(f"      üí∞ {key}: {value}")
            
            if notification_payment_fields:
                payment_fields_in_notifications[notification.get('id')] = notification_payment_fields
        
        print(f"\n   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:")
        print(f"      –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
        print(f"      –° pickup_request_id: {len(pickup_notifications)}")
        print(f"      –° –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã: {len(payment_fields_in_notifications)}")
        
        analysis_results['notifications'] = {
            'total': len(notifications),
            'with_pickup_request_id': len(pickup_notifications),
            'with_payment_fields': len(payment_fields_in_notifications),
            'pickup_notifications': pickup_notifications,
            'payment_fields': payment_fields_in_notifications
        }
        
        # –≠–¢–ê–ü 4: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê
        print("\n   üöö –≠–¢–ê–ü 4: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê (+79991234567/courier123)...")
        
        courier_login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        success, courier_login_response = self.run_test(
            "Courier Authentication",
            "POST",
            "/api/auth/login",
            200,
            courier_login_data
        )
        
        if not success or 'access_token' not in courier_login_response:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä")
            return False
        
        courier_token = courier_login_response['access_token']
        courier_user = courier_login_response.get('user', {})
        
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞: {courier_user.get('full_name')}")
        print(f"   üëë –†–æ–ª—å: {courier_user.get('role')}")
        print(f"   üÜî –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {courier_user.get('user_number')}")
        
        self.tokens['courier'] = courier_token
        self.users['courier'] = courier_user
        analysis_results['courier_auth'] = True
        
        # –≠–¢–ê–ü 5: –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ó–ê–Ø–í–û–ö –ö–£–†–¨–ï–†–ê
        print("\n   üìã –≠–¢–ê–ü 5: –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ó–ê–Ø–í–û–ö –ö–£–†–¨–ï–†–ê...")
        
        success, courier_history = self.run_test(
            "Get Courier Request History",
            "GET",
            "/api/courier/requests/history",
            200,
            token=courier_token
        )
        
        if not success:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞")
            analysis_results['courier_history_available'] = False
        else:
            history_items = courier_history.get('items', []) if isinstance(courier_history, dict) else courier_history if isinstance(courier_history, list) else []
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(history_items)} –∑–∞—è–≤–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
            analysis_results['courier_history_available'] = True
            
            # –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –û–ü–õ–ê–¢–´ –í –ó–ê–Ø–í–ö–ê–• –ö–£–†–¨–ï–†–ê
            print("\n   üîç –≠–¢–ê–ü 6: –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –û–ü–õ–ê–¢–´ –í –ó–ê–Ø–í–ö–ê–• –ö–£–†–¨–ï–†–ê...")
            
            courier_payment_analysis = []
            
            for i, request in enumerate(history_items):
                print(f"\n   üìã –ó–∞—è–≤–∫–∞ –∫—É—Ä—å–µ—Ä–∞ {i+1}:")
                print(f"      ID: {request.get('id')}")
                print(f"      –¢–∏–ø: {request.get('request_type', 'unknown')}")
                print(f"      –°—Ç–∞—Ç—É—Å: {request.get('status', 'unknown')}")
                
                # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã –≤ –∑–∞—è–≤–∫–µ –∫—É—Ä—å–µ—Ä–∞
                request_payment_fields = {}
                for key, value in request.items():
                    if 'payment' in key.lower() or 'pay' in key.lower():
                        request_payment_fields[key] = value
                        print(f"      üí∞ {key}: {value}")
                
                courier_payment_analysis.append({
                    'request_id': request.get('id'),
                    'request_type': request.get('request_type', 'unknown'),
                    'status': request.get('status', 'unknown'),
                    'payment_fields': request_payment_fields
                })
            
            analysis_results['courier_payment_analysis'] = courier_payment_analysis
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞—è–≤–æ–∫ —Å –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã
            requests_with_payment = len([r for r in courier_payment_analysis if r['payment_fields']])
            print(f"\n   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ó–ê–Ø–í–û–ö –ö–£–†–¨–ï–†–ê:")
            print(f"      –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(courier_payment_analysis)}")
            print(f"      –° –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã: {requests_with_payment}")
        
        # –≠–¢–ê–ü 7: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT /api/operator/pickup-requests/{id}
        print("\n   üéØ –≠–¢–ê–ü 7: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT /api/operator/pickup-requests/{id}...")
        
        pickup_request_tests = []
        
        if pickup_notifications:
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(pickup_notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            for notification in pickup_notifications[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
                pickup_request_id = notification.get('pickup_request_id')
                print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pickup_request_id: {pickup_request_id}")
                
                success, pickup_request_details = self.run_test(
                    f"Get Pickup Request Details ({pickup_request_id})",
                    "GET",
                    f"/api/operator/pickup-requests/{pickup_request_id}",
                    200,
                    token=operator_token
                )
                
                if success:
                    print("   ‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –û–ü–õ–ê–¢–´
                    print("   üîç –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –û–ü–õ–ê–¢–´ –í –û–¢–í–ï–¢–ï:")
                    
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –æ–ø–ª–∞—Ç—ã
                    payment_status = pickup_request_details.get('payment_status')
                    payment_method = pickup_request_details.get('payment_method')
                    payment_info = pickup_request_details.get('payment_info')
                    modal_data = pickup_request_details.get('modal_data', {})
                    
                    print(f"      ‚ùì payment_status: {payment_status}")
                    print(f"      ‚ùì payment_method: {payment_method}")
                    print(f"      ‚ùì payment_info: {payment_info}")
                    print(f"      ‚ùì modal_data –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {bool(modal_data)}")
                    
                    if modal_data:
                        modal_payment_info = modal_data.get('payment_info')
                        print(f"      ‚ùì modal_data.payment_info: {modal_payment_info}")
                        
                        if isinstance(modal_payment_info, dict):
                            modal_payment_status = modal_payment_info.get('payment_status')
                            print(f"      ‚ùì modal_data.payment_info.payment_status: {modal_payment_status}")
                    
                    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π
                    all_payment_fields = {}
                    for key, value in pickup_request_details.items():
                        if 'payment' in key.lower() or 'pay' in key.lower():
                            all_payment_fields[key] = value
                            print(f"      üí∞ {key}: {value}")
                    
                    pickup_request_test = {
                        'pickup_request_id': pickup_request_id,
                        'endpoint_works': True,
                        'has_payment_status': payment_status is not None,
                        'payment_status_value': payment_status,
                        'has_payment_method': payment_method is not None,
                        'payment_method_value': payment_method,
                        'has_payment_info': payment_info is not None,
                        'has_modal_data': bool(modal_data),
                        'has_modal_payment_info': modal_data.get('payment_info') is not None if modal_data else False,
                        'all_payment_fields': all_payment_fields,
                        'total_payment_fields': len(all_payment_fields)
                    }
                    
                    pickup_request_tests.append(pickup_request_test)
                    
                else:
                    print("   ‚ùå Endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    pickup_request_tests.append({
                        'pickup_request_id': pickup_request_id,
                        'endpoint_works': False
                    })
        else:
            print("   ‚ö†Ô∏è  –ù–µ—Ç pickup_request_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint")
        
        analysis_results['pickup_request_tests'] = pickup_request_tests
        
        return analysis_results

    def diagnose_payment_status_issue(self, results):
        """Diagnose payment status issue based on analysis results"""
        print("\n" + "="*80)
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–û –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´")
        print("="*80)
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_data = results.get('notifications', {})
        total_notifications = notifications_data.get('total', 0)
        pickup_notifications = notifications_data.get('with_pickup_request_id', 0)
        notifications_with_payment = notifications_data.get('with_payment_fields', 0)
        
        print(f"\nüì¨ –ê–ù–ê–õ–ò–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:")
        print(f"   –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_notifications}")
        print(f"   –° pickup_request_id: {pickup_notifications}")
        print(f"   –° –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã: {notifications_with_payment}")
        
        if pickup_notifications == 0:
            print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id")
            print("   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("      - –ö—É—Ä—å–µ—Ä—ã –Ω–µ —Å–¥–∞—é—Ç –≥—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥")
            print("      - Workflow —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("      - –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        if notifications_with_payment == 0 and pickup_notifications > 0:
            print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ")
            print("   üí° –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é")
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞
        if results.get('courier_history_available', False):
            courier_analysis = results.get('courier_payment_analysis', [])
            courier_requests_total = len(courier_analysis)
            courier_requests_with_payment = len([r for r in courier_analysis if r['payment_fields']])
            
            print(f"\nüöö –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–û–ö –ö–£–†–¨–ï–†–ê:")
            print(f"   –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {courier_requests_total}")
            print(f"   –° –ø–æ–ª—è–º–∏ –æ–ø–ª–∞—Ç—ã: {courier_requests_with_payment}")
            
            if courier_requests_with_payment == 0:
                print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ")
                print("   üí° –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—å–µ—Ä–æ–º")
            else:
                print("   ‚úÖ –ó–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ")
                
                # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã
                for request in courier_analysis:
                    if request['payment_fields']:
                        print(f"   üìã –ü—Ä–∏–º–µ—Ä –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã –≤ –∑–∞—è–≤–∫–µ {request['request_id']}:")
                        for field, value in request['payment_fields'].items():
                            print(f"      üí∞ {field}: {value}")
                        break
        
        # –ê–Ω–∞–ª–∏–∑ endpoint pickup-requests
        pickup_tests = results.get('pickup_request_tests', [])
        working_endpoints = len([t for t in pickup_tests if t.get('endpoint_works', False)])
        endpoints_with_payment_status = len([t for t in pickup_tests if t.get('has_payment_status', False)])
        endpoints_with_payment_method = len([t for t in pickup_tests if t.get('has_payment_method', False)])
        endpoints_with_modal_payment_info = len([t for t in pickup_tests if t.get('has_modal_payment_info', False)])
        
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó ENDPOINT /api/operator/pickup-requests/{{id}}:")
        print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ endpoints: {len(pickup_tests)}")
        print(f"   –†–∞–±–æ—Ç–∞—é—â–∏—Ö endpoints: {working_endpoints}")
        print(f"   –° –ø–æ–ª–µ–º payment_status: {endpoints_with_payment_status}")
        print(f"   –° –ø–æ–ª–µ–º payment_method: {endpoints_with_payment_method}")
        print(f"   –° modal_data.payment_info: {endpoints_with_modal_payment_info}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        problems = []
        
        if pickup_notifications == 0:
            problems.append("–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        if working_endpoints == 0 and pickup_notifications > 0:
            problems.append("Endpoint /api/operator/pickup-requests/{id} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if endpoints_with_payment_status == 0 and working_endpoints > 0:
            problems.append("Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ payment_status")
        
        if endpoints_with_payment_method == 0 and working_endpoints > 0:
            problems.append("Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ payment_method")
        
        if endpoints_with_modal_payment_info == 0 and working_endpoints > 0:
            problems.append("Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç modal_data.payment_info")
        
        if notifications_with_payment == 0 and pickup_notifications > 0:
            problems.append("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ")
        
        # –í—ã–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º
        print(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(problems)}):")
        if problems:
            for i, problem in enumerate(problems, 1):
                print(f"   {i}. ‚ùå {problem}")
        else:
            print("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        
        recommendations = []
        
        if "Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ payment_status" in problems:
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ payment_status –≤ endpoint /api/operator/pickup-requests/{id}")
        
        if "Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ payment_method" in problems:
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ payment_method –≤ endpoint /api/operator/pickup-requests/{id}")
        
        if "Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç modal_data.payment_info" in problems:
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å payment_info –≤ modal_data –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        
        if "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ" in problems:
            recommendations.append("–û–±–µ—Å–ø–µ—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
        
        if "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞" in problems:
            recommendations.append("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å workflow —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ payment_status –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º")
        recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
        
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        
        if len(problems) == 0:
            print("   üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            print("   ‚úÖ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return True
        elif len(problems) <= 2:
            print("   ‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ú–ò–ù–û–†–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
            print("   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
            return True
        else:
            print("   ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("   üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã")
            return False

    def run_existing_data_analysis(self):
        """Run analysis of existing data for payment status"""
        print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–• –û –°–¢–ê–¢–£–°–ï –û–ü–õ–ê–¢–´")
        
        try:
            results = self.test_existing_payment_data()
            
            if results:
                success = self.diagnose_payment_status_issue(results)
                
                print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
                print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
                print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.tests_passed}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.tests_passed/self.tests_run*100):.1f}%" if self.tests_run > 0 else "0%")
                
                return success
            else:
                print("‚ùå –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            return False

if __name__ == "__main__":
    tester = ExistingDataPaymentTester()
    success = tester.run_existing_data_analysis()
    
    if success:
        print("\nüéâ –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    else:
        print("\n‚ùå –ê–ù–ê–õ–ò–ó –í–´–Ø–í–ò–õ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–û –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
    
    sys.exit(0 if success else 1)