#!/usr/bin/env python3
"""
üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò QR –ö–û–î–ê 25082198/01/01 - BACKEND –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ë–õ–ï–ú–´:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ `25082198/01/01` –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫—É:
"‚ùå –ï–¥–∏–Ω–∏—Ü–∞ 01 –≥—Ä—É–∑–∞ —Ç–∏–ø–∞ 01 –∏–∑ –∑–∞—è–≤–∫–∏ 25082198 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

–ó–ê–î–ê–ß–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ 25082198 –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö cargo –∏ operator_cargo
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_items –∏ individual_items
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoint available-for-placement
4. –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
5. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ QR –∫–æ–¥ 25082198/01/01 –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω
"""

import requests
import json
import sys
import time
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-sync.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

ADMIN_CREDENTIALS = {
    "phone": "+79999888777", 
    "password": "admin123"
}

class QRCodeErrorDiagnosticTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.admin_token = None
        self.test_results = []
        self.warehouse_id = None
        self.target_cargo_number = "25082198"
        self.target_qr_code = "25082198/01/01"
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def get_operator_warehouse(self):
        """Get operator's warehouse"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    self.warehouse_id = warehouses[0]["id"]
                    warehouse_name = warehouses[0]["name"]
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥ '{warehouse_name}' (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=str(e))
            return False

    def check_cargo_exists_in_available_for_placement(self):
        """Check if cargo 25082198 exists in available-for-placement endpoint"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # Handle both list and dict responses
                if isinstance(data, dict):
                    cargo_list = data.get("items", []) or data.get("cargo_list", []) or []
                elif isinstance(data, list):
                    cargo_list = data
                else:
                    cargo_list = []
                
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ available-for-placement",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                )
                
                # Search for our target cargo
                target_cargo = None
                for cargo in cargo_list:
                    if isinstance(cargo, dict) and cargo.get("cargo_number") == self.target_cargo_number:
                        target_cargo = cargo
                        break
                
                if target_cargo:
                    self.log_test(
                        f"–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {self.target_cargo_number} –≤ available-for-placement",
                        True,
                        f"–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! ID: {target_cargo.get('id')}, —Å—Ç–∞—Ç—É—Å: {target_cargo.get('status', 'unknown')}"
                    )
                    
                    # Check cargo_items structure
                    cargo_items = target_cargo.get("cargo_items", [])
                    if cargo_items:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã cargo_items",
                            True,
                            f"–ù–∞–π–¥–µ–Ω–æ {len(cargo_items)} —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–∞: {[item.get('cargo_name', 'unknown') for item in cargo_items]}"
                        )
                        
                        # Check for type_number = "01"
                        type_01_found = False
                        for i, item in enumerate(cargo_items):
                            type_number = f"{i+1:02d}"  # Generate type_number as 01, 02, etc.
                            if type_number == "01":
                                type_01_found = True
                                
                                # Check individual_items
                                individual_items = item.get("individual_items", [])
                                if individual_items:
                                    unit_01_found = False
                                    for unit in individual_items:
                                        if unit.get("unit_index") == "01":
                                            unit_01_found = True
                                            break
                                    
                                    if unit_01_found:
                                        self.log_test(
                                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã 01 –≤ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ 01",
                                            True,
                                            f"–ï–¥–∏–Ω–∏—Ü–∞ 01 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ 01! –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {len(individual_items)}"
                                        )
                                    else:
                                        self.log_test(
                                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã 01 –≤ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ 01",
                                            False,
                                            f"–ï–¥–∏–Ω–∏—Ü–∞ 01 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ 01. –î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: {[u.get('unit_index') for u in individual_items]}"
                                        )
                                else:
                                    self.log_test(
                                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ individual_items –≤ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ 01",
                                        False,
                                        "individual_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –≤ —Ç–∏–ø–µ –≥—Ä—É–∑–∞ 01"
                                    )
                                break
                        
                        if not type_01_found:
                            self.log_test(
                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –≥—Ä—É–∑–∞ 01",
                                False,
                                f"–¢–∏–ø –≥—Ä—É–∑–∞ 01 –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {list(range(1, len(cargo_items)+1))}"
                            )
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã cargo_items",
                            False,
                            "cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç"
                        )
                    
                    return target_cargo
                else:
                    self.log_test(
                        f"–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {self.target_cargo_number} –≤ available-for-placement",
                        False,
                        f"–ó–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {len(cargo_list)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"
                    )
                    
                    # Show available cargo numbers for debugging
                    available_numbers = [c.get("cargo_number") for c in cargo_list[:10] if isinstance(c, dict)]  # First 10
                    self.log_test(
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤ (–ø–µ—Ä–≤—ã–µ 10)",
                        True,
                        f"–ù–æ–º–µ—Ä–∞: {available_numbers}"
                    )
                    return None
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ available-for-placement",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ available-for-placement", False, error=str(e))
            return None

    def create_test_cargo_25082198(self):
        """Create test cargo with number 25082198 if it doesn't exist"""
        try:
            # First, try to create with the specific number
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR",
                "sender_phone": "+79111222333",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR",
                "recipient_phone": "+79444555666",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º 25",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ QR –∫–æ–¥–∞ 25082198/01/01",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "delivery_method": "pickup",
                "preferred_cargo_number": self.target_cargo_number,  # Force specific number
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,  # This will create individual items 01 and 02
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG", 
                        "quantity": 3,  # This will create individual items 01, 02, 03
                        "weight": 8.0,
                        "price_per_kg": 80.0,
                        "total_amount": 640.0
                    }
                ]
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data
            )
            
            if response.status_code == 200:
                result = response.json()
                cargo_id = result.get("cargo_id")
                cargo_number = result.get("cargo_number")
                
                self.log_test(
                    f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ {self.target_cargo_number}",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id}). –ì—Ä—É–∑—ã: 2 —Ç–∏–ø–∞ (2+3=5 –µ–¥–∏–Ω–∏—Ü)"
                )
                
                # Verify the structure was created correctly
                time.sleep(1)  # Wait for data to be processed
                return self.verify_created_cargo_structure(cargo_id)
            else:
                error_text = response.text
                
                # If cargo already exists, that's actually good for our diagnosis
                if "already exists" in error_text:
                    self.log_test(
                        f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ {self.target_cargo_number}",
                        True,
                        f"–ó–∞—è–≤–∫–∞ {self.target_cargo_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ - —ç—Ç–æ —Ö–æ—Ä–æ—à–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!"
                    )
                    return True  # Continue with existing cargo
                else:
                    self.log_test(
                        f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ {self.target_cargo_number}",
                        False,
                        error=f"HTTP {response.status_code}: {error_text}"
                    )
                    return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, error=str(e))
            return False

    def verify_created_cargo_structure(self, cargo_id):
        """Verify that created cargo has correct structure for QR code 25082198/01/01"""
        try:
            # Check if cargo appears in available-for-placement
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                cargo_list = response.json()
                
                # Find our created cargo
                created_cargo = None
                for cargo in cargo_list:
                    if cargo.get("id") == cargo_id:
                        created_cargo = cargo
                        break
                
                if created_cargo:
                    cargo_items = created_cargo.get("cargo_items", [])
                    
                    # Check if first cargo type has individual_items with unit_index "01"
                    if cargo_items and len(cargo_items) > 0:
                        first_cargo_type = cargo_items[0]
                        individual_items = first_cargo_type.get("individual_items", [])
                        
                        if individual_items:
                            # Look for unit with unit_index "01"
                            unit_01_exists = any(
                                item.get("unit_index") == "01" 
                                for item in individual_items
                            )
                            
                            if unit_01_exists:
                                self.log_test(
                                    "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                                    True,
                                    f"QR –∫–æ–¥ {self.target_qr_code} –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."
                                )
                                return True
                            else:
                                unit_indices = [item.get("unit_index") for item in individual_items]
                                self.log_test(
                                    "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                                    False,
                                    f"–ï–¥–∏–Ω–∏—Ü–∞ 01 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ unit_index: {unit_indices}"
                                )
                                return False
                        else:
                            self.log_test(
                                "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                                False,
                                "individual_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–≤–æ–º —Ç–∏–ø–µ –≥—Ä—É–∑–∞"
                            )
                            return False
                    else:
                        self.log_test(
                            "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                            False,
                            "cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç"
                        )
                        return False
                else:
                    self.log_test(
                        "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                        False,
                        "–°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ available-for-placement"
                    )
                    return False
            else:
                self.log_test(
                    "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                    False,
                    error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è available-for-placement: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", False, error=str(e))
            return False

    def test_qr_code_placement(self, cargo_data):
        """Test actual QR code placement for 25082198/01/01"""
        try:
            if not cargo_data:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞",
                    False,
                    error="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            cargo_id = cargo_data.get("id")
            
            # Try to place the individual unit 25082198/01/01
            placement_data = {
                "individual_number": self.target_qr_code,
                "warehouse_id": self.warehouse_id,  # Add required warehouse_id
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place-individual",
                json=placement_data
            )
            
            if response.status_code == 200:
                result = response.json()
                self.log_test(
                    f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ {self.target_qr_code}",
                    True,
                    f"–ï–¥–∏–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ {result.get('location_code', 'unknown')}"
                )
                return True
            else:
                error_text = response.text
                self.log_test(
                    f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ {self.target_qr_code}",
                    False,
                    error=f"HTTP {response.status_code}: {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞", False, error=str(e))
            return False

    def run_comprehensive_diagnosis(self):
        """Run comprehensive QR code error diagnosis"""
        print("üéØ –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –û–®–ò–ë–ö–ò QR –ö–û–î–ê 25082198/01/01")
        print("=" * 80)
        
        # Step 1: Authenticate
        if not self.authenticate_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return False
        
        # Step 2: Get warehouse
        if not self.get_operator_warehouse():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return False
        
        # Step 3: Check if cargo exists
        existing_cargo = self.check_cargo_exists_in_available_for_placement()
        
        # Step 4: Create cargo if it doesn't exist or has wrong structure
        if not existing_cargo:
            print(f"\nüîß –ó–∞—è–≤–∫–∞ {self.target_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É...")
            if not self.create_test_cargo_25082198():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É.")
                return False
            
            # Re-check after creation
            existing_cargo = self.check_cargo_exists_in_available_for_placement()
        
        # Step 5: Test QR code placement
        if existing_cargo:
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ {self.target_qr_code}...")
            self.test_qr_code_placement(existing_cargo)
        
        # Summary
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        
        success_count = sum(1 for result in self.test_results if result["success"])
        total_count = len(self.test_results)
        success_rate = (success_count / total_count * 100) if total_count > 0 else 0
        
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_count} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            print("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ QR –∫–æ–¥ {self.target_qr_code} –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        return success_rate >= 80

def main():
    """Main function"""
    tester = QRCodeErrorDiagnosticTester()
    
    try:
        success = tester.run_comprehensive_diagnosis()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()