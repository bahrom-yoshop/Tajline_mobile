#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–û –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´ –í –ó–ê–Ø–í–ö–ï –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê TAJLINE.TJ

–ü–û–õ–ù–´–ô WORKFLOW –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (+79991234567/courier123)
4. –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
5. –ó–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
6. –°–¥–∞—á–∞ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥ –∫—É—Ä—å–µ—Ä–æ–º (—Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
7. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
8. –ê–Ω–∞–ª–∏–∑ endpoint /api/operator/pickup-requests/{pickup_request_id}
9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment_status –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
10. –ê–Ω–∞–ª–∏–∑ modal_data.payment_info

–¶–ï–õ–¨: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å –≥–¥–µ —Ç–µ—Ä—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã
"""

import requests
import sys
import json
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

class ComprehensivePaymentStatusTester:
    def __init__(self, base_url="https://tajline-cargo-7.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.users = {}
        self.test_data = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üîç TAJLINE.TJ COMPREHENSIVE PAYMENT STATUS TESTING")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_full_payment_status_workflow(self):
        """Test full payment status workflow from creation to operator modal"""
        print("\nüéØ –ü–û–õ–ù–´–ô WORKFLOW –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´")
        print("   üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã")
        
        workflow_results = {}
        
        # –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê
        print("\n   üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Operator Authentication",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        
        if not success or 'access_token' not in login_response:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            return False
        
        operator_token = login_response['access_token']
        operator_user = login_response.get('user', {})
        
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {operator_user.get('full_name')}")
        print(f"   üëë –†–æ–ª—å: {operator_user.get('role')}")
        
        self.tokens['operator'] = operator_token
        self.users['operator'] = operator_user
        workflow_results['operator_auth'] = True
        
        # –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –û–ü–ï–†–ê–¢–û–†–û–ú
        print("\n   üìù –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –û–ü–ï–†–ê–¢–û–†–û–ú...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        timestamp = datetime.now().strftime("%H%M%S")
        pickup_date = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        
        pickup_request_data = {
            "sender_full_name": f"–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã {timestamp}",
            "sender_phone": f"+7999{timestamp}",
            "pickup_address": f"–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã, {timestamp}",
            "pickup_date": pickup_date,
            "pickup_time_from": "10:00",
            "pickup_time_to": "18:00",
            "route": "moscow_to_tajikistan",
            "courier_fee": 500.0,
            "destination": "–î—É—à–∞–Ω–±–µ, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è, 1",
            "cargo_description": f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã {timestamp}",
            "estimated_weight": 5.0
        }
        
        success, pickup_response = self.run_test(
            "Create Pickup Request by Operator",
            "POST",
            "/api/admin/courier/pickup-request",
            200,
            pickup_request_data,
            operator_token
        )
        
        if not success or 'id' not in pickup_response:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞")
            return False
        
        pickup_request_id = pickup_response['id']
        pickup_request_number = pickup_response.get('request_number', pickup_request_id)
        
        print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —Å–æ–∑–¥–∞–Ω–∞: {pickup_request_number}")
        print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {pickup_request_id}")
        
        self.test_data['pickup_request_id'] = pickup_request_id
        self.test_data['pickup_request_number'] = pickup_request_number
        workflow_results['pickup_request_created'] = True
        
        # –≠–¢–ê–ü 3: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê
        print("\n   üöö –≠–¢–ê–ü 3: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê (+79991234567/courier123)...")
        
        courier_login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        success, courier_login_response = self.run_test(
            "Courier Authentication",
            "POST",
            "/api/auth/login",
            200,
            courier_login_data
        )
        
        if not success or 'access_token' not in courier_login_response:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä")
            return False
        
        courier_token = courier_login_response['access_token']
        courier_user = courier_login_response.get('user', {})
        
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞: {courier_user.get('full_name')}")
        print(f"   üëë –†–æ–ª—å: {courier_user.get('role')}")
        
        self.tokens['courier'] = courier_token
        self.users['courier'] = courier_user
        workflow_results['courier_auth'] = True
        
        # –≠–¢–ê–ü 4: –ü–†–ò–ù–Ø–¢–ò–ï –ó–ê–Ø–í–ö–ò –ö–£–†–¨–ï–†–û–ú
        print("\n   ‚úÖ –≠–¢–ê–ü 4: –ü–†–ò–ù–Ø–¢–ò–ï –ó–ê–Ø–í–ö–ò –ö–£–†–¨–ï–†–û–ú...")
        
        success, accept_response = self.run_test(
            "Accept Pickup Request by Courier",
            "POST",
            f"/api/courier/requests/{pickup_request_id}/accept",
            200,
            token=courier_token
        )
        
        if not success:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö—É—Ä—å–µ—Ä –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É")
            return False
        
        print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–º: {accept_response.get('message', 'Success')}")
        workflow_results['request_accepted'] = True
        
        # –≠–¢–ê–ü 5: –ó–ê–ë–û–† –ì–†–£–ó–ê –ö–£–†–¨–ï–†–û–ú –° –£–°–¢–ê–ù–û–í–ö–û–ô –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´
        print("\n   üí∞ –≠–¢–ê–ü 5: –ó–ê–ë–û–† –ì–†–£–ó–ê –ö–£–†–¨–ï–†–û–ú –° –£–°–¢–ê–ù–û–í–ö–û–ô –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´...")
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏–º pickup
        success, pickup_cargo_response = self.run_test(
            "Pickup Cargo by Courier",
            "POST",
            f"/api/courier/requests/{pickup_request_id}/pickup",
            200,
            token=courier_token
        )
        
        if not success:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö—É—Ä—å–µ—Ä –Ω–µ —Å–º–æ–≥ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑")
            return False
        
        print(f"   ‚úÖ –ì—Ä—É–∑ –∑–∞–±—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–æ–º: {pickup_cargo_response.get('message', 'Success')}")
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ
        payment_update_data = {
            "cargo_items": [
                {
                    "name": f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã {timestamp}",
                    "weight": "5.0",
                    "total_price": "2500"
                }
            ],
            "recipient_full_name": f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç {timestamp}",
            "recipient_phone": f"+992999{timestamp}",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è, 1",
            "delivery_method": "pickup",
            "payment_method": "cash",
            "payment_status": "paid",  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
            "payment_amount": 2500.0,
            "courier_notes": f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ {timestamp}"
        }
        
        success, update_response = self.run_test(
            "Update Request with Payment Status by Courier",
            "PUT",
            f"/api/courier/requests/{pickup_request_id}/update",
            200,
            payment_update_data,
            courier_token
        )
        
        if success:
            print("   ‚úÖ –ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫—É—Ä—å–µ—Ä–æ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ")
            print(f"   üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: paid")
            print(f"   üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: cash")
            print(f"   üíµ –°—É–º–º–∞: 2500.0")
            workflow_results['payment_status_set'] = True
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ")
            workflow_results['payment_status_set'] = False
        
        # –≠–¢–ê–ü 6: –°–î–ê–ß–ê –ì–†–£–ó–ê –ù–ê –°–ö–õ–ê–î –ö–£–†–¨–ï–†–û–ú (–°–û–ó–î–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø)
        print("\n   üè≠ –≠–¢–ê–ü 6: –°–î–ê–ß–ê –ì–†–£–ó–ê –ù–ê –°–ö–õ–ê–î –ö–£–†–¨–ï–†–û–ú...")
        
        success, deliver_response = self.run_test(
            "Deliver Cargo to Warehouse by Courier",
            "POST",
            f"/api/courier/requests/{pickup_request_id}/deliver-to-warehouse",
            200,
            token=courier_token
        )
        
        if not success:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ö—É—Ä—å–µ—Ä –Ω–µ —Å–º–æ–≥ —Å–¥–∞—Ç—å –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥")
            return False
        
        print(f"   ‚úÖ –ì—Ä—É–∑ —Å–¥–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥: {deliver_response.get('message', 'Success')}")
        
        # –ü–æ–ª—É—á–∞–µ–º notification_id –∏–∑ –æ—Ç–≤–µ—Ç–∞
        notification_id = deliver_response.get('notification_id')
        if notification_id:
            print(f"   üì¨ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_id}")
            self.test_data['notification_id'] = notification_id
        
        workflow_results['cargo_delivered'] = True
        
        # –≠–¢–ê–ü 7: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û–ü–ï–†–ê–¢–û–†–û–ú
        print("\n   üì¨ –≠–¢–ê–ü 7: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û–ü–ï–†–ê–¢–û–†–û–ú...")
        
        success, notifications_response = self.run_test(
            "Get Warehouse Notifications by Operator",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token
        )
        
        if not success:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return False
        
        notifications = notifications_response if isinstance(notifications_response, list) else []
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ù–∞–π–¥–µ–º –Ω–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        our_notification = None
        for notification in notifications:
            if notification.get('pickup_request_id') == pickup_request_id:
                our_notification = notification
                break
        
        if our_notification:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {our_notification.get('id')}")
            print(f"   üìã –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {our_notification.get('status')}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            payment_fields_in_notification = {}
            for key, value in our_notification.items():
                if 'payment' in key.lower() or 'pay' in key.lower():
                    payment_fields_in_notification[key] = value
                    print(f"   üí∞ {key}: {value}")
            
            if payment_fields_in_notification:
                print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
                workflow_results['payment_in_notification'] = True
            else:
                print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
                workflow_results['payment_in_notification'] = False
            
            self.test_data['notification'] = our_notification
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            workflow_results['notification_found'] = False
            return False
        
        workflow_results['notification_found'] = True
        
        # –≠–¢–ê–ü 8: –ê–ù–ê–õ–ò–ó ENDPOINT /api/operator/pickup-requests/{pickup_request_id}
        print("\n   üéØ –≠–¢–ê–ü 8: –ê–ù–ê–õ–ò–ó ENDPOINT /api/operator/pickup-requests/{pickup_request_id}...")
        
        success, pickup_request_details = self.run_test(
            f"Get Pickup Request Details ({pickup_request_id})",
            "GET",
            f"/api/operator/pickup-requests/{pickup_request_id}",
            200,
            token=operator_token
        )
        
        if success:
            print("   ‚úÖ Endpoint /api/operator/pickup-requests/{pickup_request_id} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –û–ü–õ–ê–¢–´
            print("\n   üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –û–ü–õ–ê–¢–´:")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ payment_status
            payment_status = pickup_request_details.get('payment_status')
            print(f"   ‚ùì –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_status? {payment_status is not None}")
            if payment_status is not None:
                print(f"   üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ payment_status: {payment_status}")
                if payment_status == 'paid':
                    print("   ‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (paid)")
                    workflow_results['correct_payment_status'] = True
                else:
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {payment_status}")
                    workflow_results['correct_payment_status'] = False
            else:
                print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ payment_status –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                workflow_results['has_payment_status'] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ payment_method
            payment_method = pickup_request_details.get('payment_method')
            print(f"   ‚ùì –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_method? {payment_method is not None}")
            if payment_method is not None:
                print(f"   üí≥ –ó–Ω–∞—á–µ–Ω–∏–µ payment_method: {payment_method}")
                if payment_method == 'cash':
                    print("   ‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (cash)")
                    workflow_results['correct_payment_method'] = True
                else:
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}")
                    workflow_results['correct_payment_method'] = False
            else:
                print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ payment_method –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                workflow_results['has_payment_method'] = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ modal_data
            modal_data = pickup_request_details.get('modal_data', {})
            print(f"   ‚ùì –ï—Å—Ç—å –ª–∏ modal_data? {bool(modal_data)}")
            if modal_data:
                print(f"   üìã –ö–ª—é—á–∏ modal_data: {list(modal_data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ payment_info –≤ modal_data
                payment_info = modal_data.get('payment_info')
                print(f"   ‚ùì –ï—Å—Ç—å –ª–∏ modal_data.payment_info? {payment_info is not None}")
                if payment_info:
                    print(f"   üìä modal_data.payment_info: {payment_info}")
                    
                    if isinstance(payment_info, dict) and 'payment_status' in payment_info:
                        modal_payment_status = payment_info['payment_status']
                        print(f"   ‚úÖ modal_data.payment_info.payment_status: {modal_payment_status}")
                        workflow_results['modal_payment_status'] = True
                    else:
                        print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: modal_data.payment_info –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç payment_status")
                        workflow_results['modal_payment_status'] = False
                else:
                    print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: modal_data.payment_info –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    workflow_results['has_modal_payment_info'] = False
            else:
                print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: modal_data –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                workflow_results['has_modal_data'] = False
            
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π
            print("\n   üîç –í–°–ï –ü–û–õ–Ø –°–í–Ø–ó–ê–ù–ù–´–ï –° –û–ü–õ–ê–¢–û–ô:")
            payment_related_fields = {}
            for key, value in pickup_request_details.items():
                if 'payment' in key.lower() or 'pay' in key.lower():
                    payment_related_fields[key] = value
                    print(f"   üí∞ {key}: {value}")
            
            if not payment_related_fields:
                print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π")
                workflow_results['has_any_payment_fields'] = False
            else:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(payment_related_fields)} –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–ø–ª–∞—Ç–æ–π")
                workflow_results['has_any_payment_fields'] = True
            
            workflow_results['pickup_request_analysis'] = {
                'endpoint_works': True,
                'payment_fields_found': payment_related_fields,
                'has_payment_status': payment_status is not None,
                'payment_status_value': payment_status,
                'has_payment_method': payment_method is not None,
                'payment_method_value': payment_method,
                'has_modal_data': bool(modal_data),
                'has_modal_payment_info': payment_info is not None if modal_data else False
            }
            
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Endpoint /api/operator/pickup-requests/{pickup_request_id} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            workflow_results['pickup_request_analysis'] = {'endpoint_works': False}
            return False
        
        # –≠–¢–ê–ü 9: –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–ê–ó–ï –î–ê–ù–ù–´–• (—á–µ—Ä–µ–∑ API)
        print("\n   üíæ –≠–¢–ê–ü 9: –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–ê–ó–ï –î–ê–ù–ù–´–•...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ API –∫—É—Ä—å–µ—Ä–∞ - —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        success, courier_history = self.run_test(
            "Check Courier Request History for Payment Info",
            "GET",
            "/api/courier/requests/history",
            200,
            token=courier_token
        )
        
        if success:
            history_items = courier_history.get('items', []) if isinstance(courier_history, dict) else courier_history if isinstance(courier_history, list) else []
            
            # –ù–∞–π–¥–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
            our_request_in_history = None
            for item in history_items:
                if item.get('id') == pickup_request_id:
                    our_request_in_history = item
                    break
            
            if our_request_in_history:
                print("   ‚úÖ –ù–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
                history_payment_fields = {}
                for key, value in our_request_in_history.items():
                    if 'payment' in key.lower() or 'pay' in key.lower():
                        history_payment_fields[key] = value
                        print(f"   üí∞ –ò—Å—Ç–æ—Ä–∏—è - {key}: {value}")
                
                if history_payment_fields:
                    print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
                    workflow_results['payment_saved_in_db'] = True
                else:
                    print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
                    workflow_results['payment_saved_in_db'] = False
            else:
                print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞—à–∞ –∑–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
                workflow_results['request_in_history'] = False
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫—É—Ä—å–µ—Ä–∞")
        
        return workflow_results

    def analyze_workflow_results(self, results):
        """Analyze workflow results and provide detailed diagnosis"""
        print("\n" + "="*80)
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í WORKFLOW")
        print("="*80)
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
        successful_stages = 0
        total_stages = 0
        
        stages = [
            ('operator_auth', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'),
            ('pickup_request_created', '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞'),
            ('courier_auth', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞'),
            ('request_accepted', '–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º'),
            ('payment_status_set', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∫—É—Ä—å–µ—Ä–æ–º'),
            ('cargo_delivered', '–°–¥–∞—á–∞ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥'),
            ('notification_found', '–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É'),
            ('payment_in_notification', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏'),
        ]
        
        print("\nüîç –ê–ù–ê–õ–ò–ó –≠–¢–ê–ü–û–í WORKFLOW:")
        for stage_key, stage_name in stages:
            total_stages += 1
            if results.get(stage_key, False):
                successful_stages += 1
                print(f"   ‚úÖ {stage_name}")
            else:
                print(f"   ‚ùå {stage_name}")
        
        workflow_success_rate = (successful_stages / total_stages * 100) if total_stages > 0 else 0
        print(f"\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å workflow: {successful_stages}/{total_stages} ({workflow_success_rate:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        
        problems_found = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∞–Ω–∞–ª–∏–∑–∞
        pickup_analysis = results.get('pickup_request_analysis', {})
        if pickup_analysis.get('endpoint_works', False):
            print("   ‚úÖ Endpoint /api/operator/pickup-requests/{id} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            if not pickup_analysis.get('has_payment_status', False):
                problems_found.append("‚ùå –ü–æ–ª–µ payment_status –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ endpoint")
            
            if not pickup_analysis.get('has_payment_method', False):
                problems_found.append("‚ùå –ü–æ–ª–µ payment_method –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ endpoint")
            
            if not pickup_analysis.get('has_modal_data', False):
                problems_found.append("‚ùå modal_data –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ endpoint")
            
            if not pickup_analysis.get('has_modal_payment_info', False):
                problems_found.append("‚ùå modal_data.payment_info –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ endpoint")
        else:
            problems_found.append("‚ùå Endpoint /api/operator/pickup-requests/{id} –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not results.get('payment_status_set', False):
            problems_found.append("‚ùå –ö—É—Ä—å–µ—Ä –ù–ï –°–ú–û–ì —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã")
        
        if not results.get('payment_in_notification', False):
            problems_found.append("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        if not results.get('payment_saved_in_db', False):
            problems_found.append("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        # –í—ã–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º
        if problems_found:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(problems_found)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º:")
            for i, problem in enumerate(problems_found, 1):
                print(f"   {i}. {problem}")
        else:
            print("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        
        recommendations = []
        
        if not pickup_analysis.get('has_payment_status', False):
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ payment_status –≤ endpoint /api/operator/pickup-requests/{id}")
        
        if not pickup_analysis.get('has_payment_method', False):
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ payment_method –≤ endpoint /api/operator/pickup-requests/{id}")
        
        if not pickup_analysis.get('has_modal_payment_info', False):
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å payment_info –≤ modal_data –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        
        if not results.get('payment_in_notification', False):
            recommendations.append("–û–±–µ—Å–ø–µ—á–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
        
        if not results.get('payment_saved_in_db', False):
            recommendations.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å workflow –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
        recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment_status –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º")
        
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec}")
        else:
            print("   ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
        
        if workflow_success_rate >= 80 and len(problems_found) == 0:
            print("   üéâ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return True
        elif workflow_success_rate >= 60 and len(problems_found) <= 2:
            print("   ‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            return True
        else:
            print("   ‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã")
            print("   üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
            return False

    def run_comprehensive_test(self):
        """Run comprehensive payment status test"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´")
        
        try:
            results = self.test_full_payment_status_workflow()
            
            if results:
                success = self.analyze_workflow_results(results)
                
                print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
                print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
                print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.tests_passed}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.tests_passed/self.tests_run*100):.1f}%" if self.tests_run > 0 else "0%")
                
                return success
            else:
                print("‚ùå –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return False

if __name__ == "__main__":
    tester = ComprehensivePaymentStatusTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã")
    else:
        print("\n‚ùå –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
    
    sys.exit(0 if success else 1)