#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –¥–≤–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:
1) –ù–ï –£–î–ê–õ–Ø–Æ–¢–°–Ø –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ü–†–ò –ú–ê–°–°–û–í–û–ú –£–î–ê–õ–ï–ù–ò–ò
2) –ì–†–£–ó–´ –í –†–ê–ó–ú–ï–©–ï–ù–ò–ò –¢–û–õ–¨–ö–û –ú–ï–ù–Ø–Æ–¢–°–Ø –ú–ï–°–¢–ê–ú–ò (100008/01 ‚Üî 100008/02)
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://logistics-dash-6.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class TajlineDeletionDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.admin_user_info = None
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê...")
        
        login_data = {
            "phone": ADMIN_PHONE,
            "password": ADMIN_PASSWORD
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_user_info = data.get("user")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}",
                    "Content-Type": "application/json"
                })
                
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.admin_user_info.get('full_name')} ({self.admin_user_info.get('user_number')})")
                print(f"   üìã –†–æ–ª—å: {self.admin_user_info.get('role')}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def analyze_pickup_requests_state(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ operator endpoint
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests")
            print(f"   GET /api/operator/pickup-requests - Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                pickup_requests = data.get("pickup_requests", [])
                total_count = data.get("total_count", 0)
                
                print(f"   üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {total_count}")
                print(f"   üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(pickup_requests)}")
                
                if pickup_requests:
                    print("   üìã –ü–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏:")
                    for i, req in enumerate(pickup_requests[:3]):
                        print(f"      {i+1}. ID: {req.get('id')}, –ù–æ–º–µ—Ä: {req.get('request_number')}, –°—Ç–∞—Ç—É—Å: {req.get('status')}")
                
                return pickup_requests, total_count
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {response.text}")
                return [], 0
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {e}")
            return [], 0
    
    def analyze_cargo_requests_state(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
            print(f"   GET /api/admin/cargo-requests - Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    cargo_requests = data
                else:
                    cargo_requests = data.get("items", data.get("cargo_requests", []))
                
                print(f"   üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑: {len(cargo_requests)}")
                
                if cargo_requests:
                    print("   üìã –ü–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏:")
                    for i, req in enumerate(cargo_requests[:3]):
                        print(f"      {i+1}. ID: {req.get('id')}, –ù–æ–º–µ—Ä: {req.get('request_number')}, –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {req.get('sender_full_name')}")
                
                return cargo_requests
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑: {response.text}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑: {e}")
            return []
    
    def search_specific_cargo(self, cargo_numbers):
        """–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ 100008/01 –∏ 100008/02"""
        print(f"\nüîç –ü–û–ò–°–ö –ö–û–ù–ö–†–ï–¢–ù–´–• –ì–†–£–ó–û–í: {cargo_numbers}")
        
        found_cargo = {}
        
        # –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            print(f"   GET /api/operator/cargo/available-for-placement - Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                print(f"   üìã –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {len(items)}")
                
                for cargo_number in cargo_numbers:
                    for item in items:
                        if item.get("cargo_number") == cargo_number:
                            found_cargo[cargo_number] = {
                                "location": "placement",
                                "data": item,
                                "id": item.get("id"),
                                "status": item.get("processing_status"),
                                "payment_status": item.get("payment_status")
                            }
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–∑ {cargo_number} –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏:")
                            print(f"      ID: {item.get('id')}")
                            print(f"      –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {item.get('sender_full_name')}")
                            print(f"      –°—Ç–∞—Ç—É—Å: {item.get('processing_status')}")
                            print(f"      –û–ø–ª–∞—Ç–∞: {item.get('payment_status')}")
                            break
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")
        
        # –ü–æ–∏—Å–∫ –≤ –æ–±—â–∏—Ö –≥—Ä—É–∑–∞—Ö
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/cargo")
            print(f"   GET /api/admin/cargo - Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                for cargo_number in cargo_numbers:
                    if cargo_number not in found_cargo:
                        for item in items:
                            if item.get("cargo_number") == cargo_number:
                                found_cargo[cargo_number] = {
                                    "location": "general",
                                    "data": item,
                                    "id": item.get("id"),
                                    "status": item.get("status"),
                                    "payment_status": item.get("payment_status", "unknown")
                                }
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–∑ {cargo_number} –≤ –æ–±—â–∏—Ö –≥—Ä—É–∑–∞—Ö:")
                                print(f"      ID: {item.get('id')}")
                                print(f"      –°—Ç–∞—Ç—É—Å: {item.get('status')}")
                                break
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –æ–±—â–∏—Ö –≥—Ä—É–∑–∞—Ö: {e}")
        
        # –û—Ç—á–µ—Ç –æ –ø–æ–∏—Å–∫–µ
        for cargo_number in cargo_numbers:
            if cargo_number not in found_cargo:
                print(f"   ‚ùå –ì—Ä—É–∑ {cargo_number} –ù–ï –ù–ê–ô–î–ï–ù –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        return found_cargo
    
    def test_bulk_pickup_deletion(self, pickup_requests):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print(f"\nüóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†...")
        
        if not pickup_requests:
            print("   ‚ö†Ô∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_requests = pickup_requests[:3]
        print(f"   üìã –í—ã–±—Ä–∞–Ω–æ {len(test_requests)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        deletion_results = []
        
        for i, request in enumerate(test_requests):
            request_id = request.get("id")
            request_number = request.get("request_number", "unknown")
            
            print(f"\n   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {i+1}: {request_number} (ID: {request_id})")
            
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                endpoints_to_try = [
                    f"/admin/cargo-applications/{request_id}",
                    f"/operator/pickup-requests/{request_id}",
                    f"/admin/pickup-requests/{request_id}"
                ]
                
                deleted = False
                for endpoint in endpoints_to_try:
                    try:
                        response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                        print(f"      DELETE {endpoint} - Status: {response.status_code}")
                        
                        if response.status_code in [200, 204]:
                            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {endpoint}")
                            deletion_results.append({
                                "request_id": request_id,
                                "request_number": request_number,
                                "deleted": True,
                                "endpoint": endpoint,
                                "response": response.text
                            })
                            deleted = True
                            break
                        else:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
                            
                    except Exception as e:
                        print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ {endpoint}: {e}")
                
                if not deleted:
                    deletion_results.append({
                        "request_id": request_id,
                        "request_number": request_number,
                        "deleted": False,
                        "endpoint": None,
                        "error": "–í—Å–µ endpoints –≤–µ—Ä–Ω—É–ª–∏ –æ—à–∏–±–∫—É"
                    })
                
            except Exception as e:
                print(f"      ‚ùå –û–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
                deletion_results.append({
                    "request_id": request_id,
                    "request_number": request_number,
                    "deleted": False,
                    "endpoint": None,
                    "error": str(e)
                })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è
        print(f"\n   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø:")
        successful_deletions = sum(1 for r in deletion_results if r["deleted"])
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {successful_deletions}/{len(deletion_results)}")
        
        if successful_deletions > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–∏–ª–∏—Å—å
            print(f"\n   üîç –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø...")
            pickup_requests_after, total_after = self.analyze_pickup_requests_state()
            
            print(f"   üìä –ó–∞—è–≤–æ–∫ –±—ã–ª–æ: {len(pickup_requests)}")
            print(f"   üìä –ó–∞—è–≤–æ–∫ —Å—Ç–∞–ª–æ: {total_after}")
            print(f"   üìä –†–∞–∑–Ω–∏—Ü–∞: {len(pickup_requests) - total_after}")
            
            if len(pickup_requests) - total_after == successful_deletions:
                print(f"   ‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
                return True
            else:
                print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                return False
        else:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ò –û–î–ù–ê –ó–ê–Ø–í–ö–ê –ù–ï –ë–´–õ–ê –£–î–ê–õ–ï–ù–ê!")
            return False
    
    def test_cargo_deletion_swapping(self, found_cargo):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–º–µ–Ω—ã –º–µ—Å—Ç –≥—Ä—É–∑–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"""
        print(f"\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–ú–ï–ù–´ –ú–ï–°–¢ –ì–†–£–ó–û–í...")
        
        if not found_cargo:
            print("   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã 100008/01 –∏ 100008/02 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_state = {}
        for cargo_number, cargo_info in found_cargo.items():
            initial_state[cargo_number] = {
                "id": cargo_info["id"],
                "location": cargo_info["location"],
                "status": cargo_info["status"]
            }
            print(f"   üìã –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {cargo_number}:")
            print(f"      ID: {cargo_info['id']}")
            print(f"      –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {cargo_info['location']}")
            print(f"      –°—Ç–∞—Ç—É—Å: {cargo_info['status']}")
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑
        test_cargo_numbers = list(found_cargo.keys())
        if len(test_cargo_numbers) >= 1:
            first_cargo = test_cargo_numbers[0]
            first_cargo_info = found_cargo[first_cargo]
            
            print(f"\n   üóëÔ∏è –ü–û–ü–´–¢–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê: {first_cargo}")
            print(f"      ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {first_cargo_info['id']}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞
            deletion_endpoints = [
                f"/operator/cargo/{first_cargo_info['id']}/remove-from-placement",
                f"/admin/cargo/{first_cargo_info['id']}",
                f"/operator/cargo/bulk-remove-from-placement"
            ]
            
            deletion_attempted = False
            
            for endpoint in deletion_endpoints:
                try:
                    if "bulk-remove" in endpoint:
                        # –î–ª—è bulk —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º POST —Å JSON
                        payload = {"cargo_ids": [first_cargo_info['id']]}
                        response = self.session.delete(f"{BACKEND_URL}{endpoint}", json=payload)
                    else:
                        response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                    
                    print(f"      DELETE {endpoint} - Status: {response.status_code}")
                    
                    if response.status_code in [200, 204]:
                        print(f"      ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ {endpoint}")
                        print(f"      üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                        deletion_attempted = True
                        break
                    else:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
                        
                except Exception as e:
                    print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ {endpoint}: {e}")
            
            if deletion_attempted:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                print(f"\n   üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø...")
                updated_cargo = self.search_specific_cargo(test_cargo_numbers)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                print(f"\n   üìä –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:")
                
                for cargo_number in test_cargo_numbers:
                    print(f"\n   üìã –ì—Ä—É–∑ {cargo_number}:")
                    
                    if cargo_number in initial_state and cargo_number in updated_cargo:
                        initial_id = initial_state[cargo_number]["id"]
                        updated_id = updated_cargo[cargo_number]["id"]
                        
                        print(f"      –ë—ã–ª–æ ID: {initial_id}")
                        print(f"      –°—Ç–∞–ª–æ ID: {updated_id}")
                        
                        if initial_id != updated_id:
                            print(f"      ‚ö†Ô∏è ID –ò–ó–ú–ï–ù–ò–õ–°–Ø! –í–æ–∑–º–æ–∂–Ω–∞ —Å–º–µ–Ω–∞ –º–µ—Å—Ç")
                        else:
                            print(f"      ‚úÖ ID –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
                    
                    elif cargo_number in initial_state and cargo_number not in updated_cargo:
                        print(f"      ‚úÖ –ì—Ä—É–∑ –£–î–ê–õ–ï–ù –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)")
                    
                    elif cargo_number not in initial_state and cargo_number in updated_cargo:
                        print(f"      ‚ö†Ô∏è –ì—Ä—É–∑ –ü–û–Ø–í–ò–õ–°–Ø –≤ —Å–∏—Å—Ç–µ–º–µ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
                    
                    else:
                        print(f"      ‚ùì –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª–∏ —Å–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤
                if len(test_cargo_numbers) >= 2:
                    cargo1, cargo2 = test_cargo_numbers[0], test_cargo_numbers[1]
                    
                    if (cargo1 in initial_state and cargo2 in updated_cargo and 
                        cargo2 in initial_state and cargo1 in updated_cargo):
                        
                        if (initial_state[cargo1]["id"] == updated_cargo[cargo2]["id"] and
                            initial_state[cargo2]["id"] == updated_cargo[cargo1]["id"]):
                            
                            print(f"\n   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
                            print(f"   üîÑ –ì—Ä—É–∑—ã {cargo1} –∏ {cargo2} –ü–û–ú–ï–ù–Ø–õ–ò–°–¨ –ú–ï–°–¢–ê–ú–ò!")
                            print(f"   ‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ù–ï –ü–†–û–ò–ó–û–®–õ–û!")
                            return False
                
                return True
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω endpoint")
                return False
        
        return False
    
    def check_backend_logs(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ backend –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"""
        print(f"\nüìã –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í BACKEND...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints
        log_endpoints = [
            "/admin/system/logs",
            "/admin/logs",
            "/system/logs"
        ]
        
        for endpoint in log_endpoints:
            try:
                response = self.session.get(f"{BACKEND_URL}{endpoint}")
                print(f"   GET {endpoint} - Status: {response.status_code}")
                
                if response.status_code == 200:
                    logs = response.json()
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–≥–∏ —á–µ—Ä–µ–∑ {endpoint}")
                    
                    # –ò—â–µ–º –æ—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
                    deletion_errors = []
                    if isinstance(logs, list):
                        for log_entry in logs:
                            if isinstance(log_entry, dict):
                                message = log_entry.get("message", "").lower()
                                if any(keyword in message for keyword in ["delete", "remove", "error", "exception"]):
                                    deletion_errors.append(log_entry)
                    
                    if deletion_errors:
                        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(deletion_errors)} –∑–∞–ø–∏—Å–µ–π —Å –æ—à–∏–±–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è:")
                        for i, error in enumerate(deletion_errors[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            print(f"      {i+1}. {error.get('timestamp', 'unknown')}: {error.get('message', 'no message')}")
                    else:
                        print(f"   ‚úÖ –û—à–∏–±–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    return True
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ {endpoint}: {e}")
        
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ backend —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints")
        return False
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º"""
        print("=" * 80)
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –£–î–ê–õ–ï–ù–ò–ï–ú –í TAJLINE.TJ")
        print("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        pickup_requests, pickup_total = self.analyze_pickup_requests_state()
        
        # 3. –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑
        cargo_requests = self.analyze_cargo_requests_state()
        
        # 4. –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ 100008/01 –∏ 100008/02
        target_cargo = ["100008/01", "100008/02"]
        found_cargo = self.search_specific_cargo(target_cargo)
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        print("\n" + "=" * 60)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 1: –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†")
        print("=" * 60)
        
        bulk_deletion_works = self.test_bulk_pickup_deletion(pickup_requests)
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–º–µ–Ω—ã –º–µ—Å—Ç –≥—Ä—É–∑–æ–≤
        print("\n" + "=" * 60)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 2: –°–ú–ï–ù–ê –ú–ï–°–¢ –ì–†–£–ó–û–í –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò")
        print("=" * 60)
        
        cargo_swapping_issue = not self.test_cargo_deletion_swapping(found_cargo)
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ backend
        self.check_backend_logs()
        
        # 8. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 80)
        
        print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ‚úÖ –£—Å–ø–µ—à–Ω–æ")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_total}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑: {len(cargo_requests)}")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤: {len(found_cargo)}/{len(target_cargo)}")
        
        print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ê 1 - –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä:")
        if bulk_deletion_works:
            print(f"   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        else:
            print(f"   ‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê - –∑–∞—è–≤–∫–∏ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏")
        
        print(f"\nüö® –ü–†–û–ë–õ–ï–ú–ê 2 - –°–º–µ–Ω–∞ –º–µ—Å—Ç –≥—Ä—É–∑–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:")
        if cargo_swapping_issue:
            print(f"   ‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê - –≥—Ä—É–∑—ã –º–µ–Ω—è—é—Ç—Å—è –º–µ—Å—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not bulk_deletion_works:
            print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint /api/admin/cargo-applications/{{id}} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫")
            print(f"   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ frontend –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç API —É–¥–∞–ª–µ–Ω–∏—è")
            print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞—è–≤–æ–∫")
        
        if cargo_swapping_issue:
            print(f"   4. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            print(f"   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö MongoDB")
            print(f"   6. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ ID –≥—Ä—É–∑–æ–≤ –Ω–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnostic = TajlineDeletionDiagnostic()
    
    try:
        success = diagnostic.run_comprehensive_diagnosis()
        
        if success:
            print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print(f"\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()