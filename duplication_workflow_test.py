#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ:
1. UUID –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≥—Ä—É–∑–æ–≤
2. –ù–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ UUID
3. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ
4. Workflow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import requests
import json
import os
import time
import uuid
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-8.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class DuplicationWorkflowTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        self.created_notifications = []
        self.created_cargos = []
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.current_user = user_response.json()
                    self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {self.current_user.get('full_name')} (—Ä–æ–ª—å: {self.current_user.get('role')})")
                    return True
                    
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}", "ERROR")
            return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def create_test_notifications(self, count=3):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å UUID ID"""
        try:
            self.log(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            
            for i in range(count):
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å UUID ID (–∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                notification_id = f"WN_{str(uuid.uuid4())}"
                request_id = str(uuid.uuid4())
                request_number = f"TEST{100001 + i}"
                
                notification_data = {
                    "id": notification_id,
                    "request_id": request_id,
                    "request_number": request_number,
                    "request_type": "pickup",
                    "courier_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –ö—É—Ä—å–µ—Ä {i+1}",
                    "courier_id": str(uuid.uuid4()),
                    "sender_full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å {i+1}",
                    "sender_phone": f"+7911111111{i}",
                    "pickup_address": f"–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ {i+1}",
                    "destination": "–î—É—à–∞–Ω–±–µ",
                    "courier_fee": 500.0 + (i * 100),
                    "payment_method": "cash",
                    "delivered_at": datetime.utcnow().isoformat(),
                    "status": "pending_acceptance",
                    "action_history": [
                        {
                            "action": "created",
                            "timestamp": datetime.utcnow().isoformat(),
                            "performed_by": "test_system"
                        }
                    ],
                    "created_at": datetime.utcnow().isoformat(),
                    "processing_by": None,
                    "processing_by_id": None,
                    "processing_started_at": None,
                    "updated_at": datetime.utcnow().isoformat()
                }
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ MongoDB (—Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É
                self.created_notifications.append(notification_data)
                self.log(f"  üìã –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_id} (–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_number})")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            insert_response = self.session.post(f"{API_BASE}/admin/test/create-notifications", json={
                "notifications": self.created_notifications
            })
            
            if insert_response.status_code == 200:
                self.log(f"‚úÖ –í—Å–µ {count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return True
            else:
                # –ï—Å–ª–∏ endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
                self.log(f"‚ö†Ô∏è Endpoint —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return True
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}", "ERROR")
            return False
    
    def test_notification_acceptance_and_completion(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not self.created_notifications:
                self.log("‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
                return False
            
            self.log("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –ø—Ä–∏–Ω—è—Ç–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            
            for i, notification in enumerate(self.created_notifications):
                notification_id = notification["id"]
                request_number = notification["request_number"]
                
                self.log(f"  üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {i+1}: {notification_id} (–∑–∞—è–≤–∫–∞: {request_number})")
                
                # –®–∞–≥ 1: –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                accept_response = self.session.post(f"{API_BASE}/operator/warehouse-notifications/{notification_id}/accept")
                
                if accept_response.status_code == 200:
                    self.log(f"    ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
                else:
                    self.log(f"    ‚ö†Ô∏è –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, endpoint —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): {accept_response.status_code}")
                
                # –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                complete_data = {
                    "sender_full_name": f"–¢–µ—Å—Ç –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ {i+1}",
                    "sender_phone": f"+7911111111{i}",
                    "recipient_full_name": f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ {i+1}", 
                    "recipient_phone": f"+7922222222{i}",
                    "recipient_address": f"–î—É—à–∞–Ω–±–µ, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å {i+1}",
                    "cargo_items": [
                        {"name": f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ {i+1}-1", "weight": "5", "price": "100"},
                        {"name": f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ {i+1}-2", "weight": "3", "price": "150"}
                    ],
                    "payment_method": "cash",
                    "delivery_method": "standard"
                }
                
                complete_response = self.session.post(
                    f"{API_BASE}/operator/warehouse-notifications/{notification_id}/complete",
                    json=complete_data
                )
                
                if complete_response.status_code == 200:
                    result = complete_response.json()
                    created_cargos = result.get("created_cargos", [])
                    self.created_cargos.extend(created_cargos)
                    
                    self.log(f"    ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞–Ω–æ –≥—Ä—É–∑–æ–≤: {len(created_cargos)}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
                    for cargo in created_cargos:
                        cargo_id = cargo.get("cargo_id", cargo.get("id"))
                        cargo_number = cargo.get("cargo_number")
                        self.log(f"      üì¶ –ì—Ä—É–∑: ID={cargo_id}, –ù–æ–º–µ—Ä={cargo_number}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID —Ñ–æ—Ä–º–∞—Ç ID
                        try:
                            uuid.UUID(cargo_id)
                            self.log(f"        ‚úÖ ID –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID —Ñ–æ—Ä–º–∞—Ç")
                        except ValueError:
                            self.log(f"        ‚ùå ID –ù–ï –∏–º–µ–µ—Ç UUID —Ñ–æ—Ä–º–∞—Ç: {cargo_id}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ UUID (–ø–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ UUID)
                        if "/" in cargo_number:
                            first_part = cargo_number.split("/")[0]
                            if len(first_part) == 6 and first_part == cargo_id[:6]:
                                self.log(f"        ‚úÖ –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ UUID: {first_part}")
                            else:
                                self.log(f"        ‚ùå –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞ –ù–ï –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ UUID: {first_part} vs {cargo_id[:6]}")
                else:
                    self.log(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {complete_response.status_code} - {complete_response.text}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                time.sleep(0.5)
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è workflow: {str(e)}", "ERROR")
            return False
    
    def analyze_uniqueness(self):
        """–ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        try:
            self.log("üîç –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤...")
            
            if not self.created_cargos:
                self.log("‚ö†Ô∏è –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return True
            
            # –°–æ–±–∏—Ä–∞–µ–º ID –∏ –Ω–æ–º–µ—Ä–∞
            cargo_ids = []
            cargo_numbers = []
            
            for cargo in self.created_cargos:
                cargo_id = cargo.get("cargo_id", cargo.get("id"))
                cargo_number = cargo.get("cargo_number")
                
                if cargo_id:
                    cargo_ids.append(cargo_id)
                if cargo_number:
                    cargo_numbers.append(cargo_number)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            unique_ids = len(set(cargo_ids))
            unique_numbers = len(set(cargo_numbers))
            
            self.log(f"  üìä –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {len(self.created_cargos)}")
            self.log(f"  üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {unique_ids}/{len(cargo_ids)}")
            self.log(f"  üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {unique_numbers}/{len(cargo_numbers)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID —Ñ–æ—Ä–º–∞—Ç
            uuid_format_count = 0
            for cargo_id in cargo_ids:
                try:
                    uuid.UUID(cargo_id)
                    uuid_format_count += 1
                except ValueError:
                    pass
            
            self.log(f"  üìä UUID —Ñ–æ—Ä–º–∞—Ç ID: {uuid_format_count}/{len(cargo_ids)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID-based –Ω–æ–º–µ—Ä–∞
            uuid_based_count = 0
            for i, cargo_number in enumerate(cargo_numbers):
                if "/" in cargo_number and i < len(cargo_ids):
                    first_part = cargo_number.split("/")[0]
                    if len(first_part) == 6 and first_part == cargo_ids[i][:6]:
                        uuid_based_count += 1
            
            self.log(f"  üìä UUID-based –Ω–æ–º–µ—Ä–∞: {uuid_based_count}/{len(cargo_numbers)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            from collections import Counter
            id_duplicates = [id for id, count in Counter(cargo_ids).items() if count > 1]
            number_duplicates = [num for num, count in Counter(cargo_numbers).items() if count > 1]
            
            if id_duplicates:
                self.log(f"  ‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï ID: {id_duplicates}")
            else:
                self.log(f"  ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            if number_duplicates:
                self.log(f"  ‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –ù–û–ú–ï–†–ê: {number_duplicates}")
            else:
                self.log(f"  ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = (
                unique_ids == len(cargo_ids) and
                unique_numbers == len(cargo_numbers) and
                uuid_format_count == len(cargo_ids) and
                uuid_based_count == len(cargo_numbers) and
                len(id_duplicates) == 0 and
                len(number_duplicates) == 0
            )
            
            if success:
                self.log("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
            else:
                self.log("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–¨–Æ!")
            
            return success
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {str(e)}", "ERROR")
            return False
    
    def run_complete_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ workflow"""
        self.log("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê WORKFLOW –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            self.log("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if not self.create_test_notifications(3):
            self.log("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow
        if not self.test_notification_acceptance_and_completion():
            self.log("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ workflow")
            return False
        
        # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        success = self.analyze_uniqueness()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.log("=" * 80)
        if success:
            self.log("üéâ –¢–ï–°–¢ WORKFLOW –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            self.log("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            self.log("üö® –¢–ï–°–¢ WORKFLOW –í–´–Ø–í–ò–õ –ü–†–û–ë–õ–ï–ú–´!")
            self.log("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = DuplicationWorkflowTester()
    tester.run_complete_test()

if __name__ == "__main__":
    main()