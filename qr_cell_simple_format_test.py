#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–õ–Ø –û–®–ò–ë–ö–ò QR –ö–û–î–ê –Ø–ß–ï–ô–ö–ò –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
- –í —Ñ—É–Ω–∫—Ü–∏–∏ parseCellQRCode –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–ë1-–ü1-–Ø3) —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π warehouse_id –∏–∑ operatorWarehouses
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
- –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è performAutoPlacement –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ 'simple'
- cell_code —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ "WAREHOUSE_ID-–ë1-–ü1-–Ø3" –¥–ª—è backend

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ /api/operator/warehouses - –≤–∞–∂–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
3. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å QR –∫–æ–¥—ã —è—á–µ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ë1-–ü1-–Ø3" –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è warehouse_id.
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRCellSimpleFormatTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_warehouses = []
        self.available_cargo = []
        self.test_results = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    user_info = data.get("user", {})
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})",
                        {
                            "user_info": user_info,
                            "token_received": bool(self.operator_token)
                        }
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è warehouse_id"""
        print("\nüè≠ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                self.operator_warehouses = warehouses
                
                if warehouses:
                    warehouse_count = len(warehouses)
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –∫–∞–∫ —Å–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_warehouse = warehouses[0]
                    default_warehouse_id = default_warehouse.get("id")
                    default_warehouse_name = default_warehouse.get("name")
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤. –°–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_warehouse_name}",
                        {
                            "warehouse_count": warehouse_count,
                            "default_warehouse_id": default_warehouse_id,
                            "default_warehouse_name": default_warehouse_name,
                            "all_warehouses": [
                                {
                                    "id": w.get("id"),
                                    "name": w.get("name"),
                                    "location": w.get("location")
                                } for w in warehouses
                            ]
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        False,
                        "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤",
                        {"warehouses": warehouses}
                    )
                    return False
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_available_cargo_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                self.available_cargo = items
                
                if items:
                    cargo_count = len(items)
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    test_cargo = items[0]
                    test_cargo_id = test_cargo.get("id")
                    test_cargo_number = test_cargo.get("cargo_number")
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {test_cargo_number}",
                        {
                            "cargo_count": cargo_count,
                            "test_cargo_id": test_cargo_id,
                            "test_cargo_number": test_cargo_number,
                            "test_cargo_details": test_cargo
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {"response_data": data}
                    )
                    return False
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_simple_qr_cell_format_logic(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏"""
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏...")
        
        if not self.operator_warehouses or not self.available_cargo:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞",
                False,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∫–ª–∞–¥—ã –∏–ª–∏ –≥—Ä—É–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)"
            )
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        default_warehouse = self.operator_warehouses[0]
        default_warehouse_id = default_warehouse.get("id")
        test_cargo = self.available_cargo[0]
        test_cargo_number = test_cargo.get("cargo_number")
        
        print(f"   üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   üì¶ –ì—Ä—É–∑: {test_cargo_number}")
        print(f"   üè≠ –°–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_warehouse.get('name')}")
        print(f"   üÜî Warehouse ID: {default_warehouse_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫
        test_cases = [
            {
                "name": "ID-based —Ñ–æ—Ä–º–∞—Ç 001-01-01-001 (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)",
                "cell_code": "001-01-01-001",
                "expected_format": "id_based",
                "should_work": True
            },
            {
                "name": "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –ë1-–ü1-–Ø3 (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å)",
                "cell_code": "–ë1-–ü1-–Ø3",
                "expected_format": "simple",
                "should_work": False,  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –±–µ–∑ warehouse_id
                "expected_error": "Invalid cell code format"
            },
            {
                "name": "–ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å UUID (–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–∞—Ä—Å–∏–Ω–≥–∞)",
                "cell_code": f"{default_warehouse_id}-–ë1-–ü1-–Ø1",
                "expected_format": "full_with_uuid",
                "should_work": False,  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID
                "expected_error": "invalid literal for int()"
            }
        ]
        
        all_tests_passed = True
        critical_issues_found = []
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n   üß™ –¢–µ—Å—Ç {i}: {test_case['name']}")
            print(f"   üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –∫–æ–¥: '{test_case['cell_code']}'")
            
            placement_data = {
                "cargo_number": test_cargo_number,
                "cell_code": test_case["cell_code"]
            }
            
            try:
                response = self.session.post(
                    f"{BACKEND_URL}/cargo/place-in-cell",
                    json=placement_data,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result_data = response.json()
                    success_message = result_data.get("message", "")
                    
                    if test_case["should_work"]:
                        self.log_result(
                            f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                            True,
                            f"‚úÖ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {success_message}",
                            {
                                "cell_code": test_case["cell_code"],
                                "response": result_data
                            }
                        )
                        print(f"   ‚úÖ –£–°–ü–ï–•: –§–æ—Ä–º–∞—Ç '{test_case['cell_code']}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        self.log_result(
                            f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                            False,
                            f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å",
                            {
                                "cell_code": test_case["cell_code"],
                                "response": result_data
                            }
                        )
                        all_tests_passed = False
                        
                elif response.status_code == 400:
                    error_data = response.json()
                    error_detail = error_data.get("detail", "")
                    
                    if not test_case["should_work"]:
                        expected_error = test_case.get("expected_error", "")
                        if expected_error.lower() in error_detail.lower():
                            self.log_result(
                                f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                                True,
                                f"‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {error_detail}",
                                {
                                    "cell_code": test_case["cell_code"],
                                    "error_detail": error_detail
                                }
                            )
                            print(f"   ‚úÖ –û–ñ–ò–î–ê–ï–ú–û: –§–æ—Ä–º–∞—Ç '{test_case['cell_code']}' –≤—ã–∑–≤–∞–ª –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É")
                        else:
                            self.log_result(
                                f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                                False,
                                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_detail}",
                                {
                                    "cell_code": test_case["cell_code"],
                                    "expected_error": expected_error,
                                    "actual_error": error_detail
                                }
                            )
                            all_tests_passed = False
                    else:
                        self.log_result(
                            f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                            False,
                            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {error_detail}",
                            {
                                "cell_code": test_case["cell_code"],
                                "error_detail": error_detail
                            }
                        )
                        all_tests_passed = False
                        
                elif response.status_code == 500:
                    error_data = response.json()
                    error_detail = error_data.get("detail", "")
                    
                    if "invalid literal for int()" in error_detail:
                        critical_issues_found.append({
                            "issue": "UUID parsing error in backend",
                            "cell_code": test_case["cell_code"],
                            "error": error_detail
                        })
                        
                        self.log_result(
                            f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                            False,
                            f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê UUID: {error_detail}",
                            {
                                "cell_code": test_case["cell_code"],
                                "error_detail": error_detail,
                                "issue_type": "uuid_parsing_error"
                            }
                        )
                        print(f"   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Backend –Ω–µ –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å UUID –≤ cell_code")
                        all_tests_passed = False
                    else:
                        self.log_result(
                            f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                            False,
                            f"‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {error_detail}",
                            {
                                "cell_code": test_case["cell_code"],
                                "error_detail": error_detail
                            }
                        )
                        all_tests_passed = False
                else:
                    self.log_result(
                        f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                        False,
                        f"‚ùå HTTP {response.status_code}: {response.text}",
                        {"cell_code": test_case["cell_code"]}
                    )
                    all_tests_passed = False
                    
            except Exception as e:
                self.log_result(
                    f"–¢–µ—Å—Ç QR —Ñ–æ—Ä–º–∞—Ç–∞: {test_case['name']}",
                    False,
                    f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                    {"cell_code": test_case["cell_code"]}
                )
                all_tests_passed = False
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        if critical_issues_found:
            print(f"\n   üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in critical_issues_found:
                print(f"   ‚ùå {issue['issue']}: {issue['cell_code']} -> {issue['error']}")
            print(f"   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: Backend –∫–æ–¥ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID –≤ cell_code")
        
        return all_tests_passed
    
    def test_warehouse_id_default_logic(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        print("\nüèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        if not self.operator_warehouses:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                False,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å —Å–∫–ª–∞–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        warehouse_count = len(self.operator_warehouses)
        default_warehouse = self.operator_warehouses[0]
        default_warehouse_id = default_warehouse.get("id")
        default_warehouse_name = default_warehouse.get("name")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
        has_required_fields = all([
            default_warehouse.get("id"),
            default_warehouse.get("name"),
            "blocks_count" in default_warehouse,
            "shelves_per_block" in default_warehouse,
            "cells_per_shelf" in default_warehouse
        ])
        
        if has_required_fields:
            blocks_count = default_warehouse.get("blocks_count", 0)
            shelves_per_block = default_warehouse.get("shelves_per_block", 0)
            cells_per_shelf = default_warehouse.get("cells_per_shelf", 0)
            total_cells = blocks_count * shelves_per_block * cells_per_shelf
            
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                True,
                f"–°–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–æ—Ç–æ–≤ –¥–ª—è QR –∫–æ–¥–æ–≤: {default_warehouse_name} ({total_cells} —è—á–µ–µ–∫)",
                {
                    "warehouse_count": warehouse_count,
                    "default_warehouse_id": default_warehouse_id,
                    "default_warehouse_name": default_warehouse_name,
                    "structure": {
                        "blocks_count": blocks_count,
                        "shelves_per_block": shelves_per_block,
                        "cells_per_shelf": cells_per_shelf,
                        "total_cells": total_cells
                    },
                    "ready_for_simple_qr": True
                }
            )
            return True
        else:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                False,
                f"–°–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                {
                    "default_warehouse": default_warehouse,
                    "missing_fields": [
                        field for field in ["id", "name", "blocks_count", "shelves_per_block", "cells_per_shelf"]
                        if field not in default_warehouse
                    ]
                }
            )
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–õ–Ø –û–®–ò–ë–ö–ò QR –ö–û–î–ê –Ø–ß–ï–ô–ö–ò –í TAJLINE.TJ")
        print("=" * 100)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û)
        if not self.get_operator_warehouses():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if not self.get_available_cargo_for_placement():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        warehouse_id_logic_ok = self.test_warehouse_id_default_logic()
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏
        simple_qr_logic_ok = self.test_simple_qr_cell_format_logic()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"   {status} {result['test']}: {result['message']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        if warehouse_id_logic_ok and simple_qr_logic_ok:
            print("   ‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
            print("   ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∫–ª–∞–¥–∞–º —á–µ—Ä–µ–∑ /api/operator/warehouses")
            print("   ‚úÖ –ï—Å—Ç—å —Å–∫–ª–∞–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            print("   ‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç QR –∫–æ–¥—ã —è—á–µ–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ë1-–ü1-–Ø3'")
            print("   ‚úÖ –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è warehouse_id –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–∫–∏ 'Invalid cell code format' —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã")
        else:
            print("   ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
            
            if not warehouse_id_logic_ok:
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ª–æ–≥–∏–∫–æ–π warehouse_id –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                print("   ‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫–ª–∞–¥–∞–º –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–ø–æ–ª–Ω–∞—è")
            
            if not simple_qr_logic_ok:
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏")
                print("   ‚ùå Backend –º–æ–∂–µ—Ç –≤—Å–µ –µ—â–µ –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É 'Invalid cell code format'")
                print("   ‚ùå –õ–æ–≥–∏–∫–∞ parseCellQRCode –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        return success_rate >= 80.0

if __name__ == "__main__":
    tester = QRCellSimpleFormatTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–∫–∏ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        sys.exit(1)