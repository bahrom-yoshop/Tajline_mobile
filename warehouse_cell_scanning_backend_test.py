#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –Ø–ß–ï–ô–ö–ò –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û –°–ö–õ–ê–î–ï –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–ô:
- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 03010101 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —è—á–µ–π–∫–∏ 
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫, –∑–∞–Ω—è—Ç–æ, —Å–≤–æ–±–æ–¥–Ω–æ)
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞
- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏: "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ - –ë1-–ü1-–Ø1"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
- API /api/warehouses/{warehouse_id}/statistics –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å: total_cells, occupied_cells, free_cells, warehouse_name
- –°–∫–ª–∞–¥—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø–æ–ª–µ warehouse_number –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å QR –∫–æ–¥–æ–º
- –§–æ—Ä–º–∞—Ç QR 03010101 –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—å—Å—è (03=—Å–∫–ª–∞–¥ ‚Ññ3, 01=–±–ª–æ–∫ 1, 01=–ø–æ–ª–∫–∞ 1, 01=—è—á–µ–π–∫–∞ 1)

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è 
3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ warehouse_number
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint /api/warehouses/{warehouse_id}/statistics –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞
5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 03010101
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend –≥–æ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–º —Å–∫–ª–∞–¥–µ.
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-system.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class WarehouseCellScanningTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        self.warehouses = []
        self.available_cargo = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {details}")
    
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("\nüîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    user_info = data.get("user", {})
                    user_role = user_info.get("role")
                    user_name = user_info.get("full_name")
                    user_number = user_info.get("user_number")
                    
                    if user_role == "warehouse_operator":
                        self.log_result(
                            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                            True,
                            f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_name}' (–Ω–æ–º–µ—Ä: {user_number}), —Ä–æ–ª—å: {user_role} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, JWT —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                            {
                                "user_name": user_name,
                                "user_number": user_number,
                                "role": user_role,
                                "token_length": len(self.operator_token)
                            }
                        )
                        return True
                    else:
                        self.log_result(
                            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–∂–∏–¥–∞–ª–∞—Å—å 'warehouse_operator', –ø–æ–ª—É—á–µ–Ω–∞ '{user_role}'"
                        )
                        return False
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)", False, f"Exception: {str(e)}")
            return False
    
    def get_available_cargo_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("\nüì¶ –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –ì–†–£–ó–û–í –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                total_count = data.get("total_count", len(items))
                
                self.available_cargo = items
                
                self.log_result(
                    "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤—Å–µ–≥–æ: {total_count})",
                    {
                        "items_count": len(items),
                        "total_count": total_count,
                        "has_pagination": "pagination" in data,
                        "sample_cargo": items[0] if items else None
                    }
                )
                return True
            else:
                self.log_result("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"Exception: {str(e)}")
            return False
    
    def get_warehouses_with_warehouse_number(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ warehouse_number"""
        print("\nüè≠ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–ö–õ–ê–î–û–í –° WAREHOUSE_NUMBER...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                self.warehouses = warehouses
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è warehouse_number —É –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
                warehouses_with_number = []
                warehouses_without_number = []
                
                for warehouse in warehouses:
                    warehouse_number = warehouse.get("warehouse_number")
                    if warehouse_number is not None:
                        warehouses_with_number.append({
                            "id": warehouse.get("id"),
                            "name": warehouse.get("name"),
                            "warehouse_number": warehouse_number
                        })
                    else:
                        warehouses_without_number.append({
                            "id": warehouse.get("id"),
                            "name": warehouse.get("name")
                        })
                
                success = len(warehouses_without_number) == 0
                
                self.log_result(
                    "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ warehouse_number",
                    success,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤, {len(warehouses_with_number)} —Å warehouse_number, {len(warehouses_without_number)} –±–µ–∑ warehouse_number",
                    {
                        "total_warehouses": len(warehouses),
                        "with_warehouse_number": len(warehouses_with_number),
                        "without_warehouse_number": len(warehouses_without_number),
                        "warehouses_with_number": warehouses_with_number[:5],  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                        "warehouses_without_number": warehouses_without_number
                    }
                )
                return success
            else:
                self.log_result("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ warehouse_number", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ warehouse_number", False, f"Exception: {str(e)}")
            return False
    
    def test_warehouse_statistics_endpoint(self):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint /api/warehouses/{warehouse_id}/statistics"""
        print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT /api/warehouses/{warehouse_id}/statistics...")
        
        if not self.warehouses:
            self.log_result("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint /api/warehouses/{warehouse_id}/statistics", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫–ª–∞–¥–æ–≤
        test_warehouses = self.warehouses[:3]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞
        successful_tests = 0
        
        for warehouse in test_warehouses:
            warehouse_id = warehouse.get("id")
            warehouse_name = warehouse.get("name")
            warehouse_number = warehouse.get("warehouse_number")
            
            print(f"\n   üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞: {warehouse_name} (ID: {warehouse_id}, ‚Ññ: {warehouse_number})")
            
            try:
                response = self.session.get(f"{BACKEND_URL}/warehouses/{warehouse_id}/statistics", timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    required_fields = ["total_cells", "occupied_cells", "free_cells", "warehouse_name"]
                    missing_fields = [field for field in required_fields if field not in data]
                    
                    if not missing_fields:
                        total_cells = data.get("total_cells", 0)
                        occupied_cells = data.get("occupied_cells", 0)
                        free_cells = data.get("free_cells", 0)
                        returned_warehouse_name = data.get("warehouse_name", "")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞
                        calculation_correct = (total_cells == occupied_cells + free_cells)
                        
                        print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: –≤—Å–µ–≥–æ {total_cells}, –∑–∞–Ω—è—Ç–æ {occupied_cells}, —Å–≤–æ–±–æ–¥–Ω–æ {free_cells}")
                        print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞: '{returned_warehouse_name}'")
                        print(f"   üßÆ –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {calculation_correct}")
                        
                        if calculation_correct:
                            successful_tests += 1
                        else:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ: {total_cells} ‚â† {occupied_cells} + {free_cells}")
                    else:
                        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
                else:
                    print(f"   ‚ùå HTTP {response.status_code}: {response.text}")
                    
            except Exception as e:
                print(f"   ‚ùå Exception: {str(e)}")
        
        success = successful_tests == len(test_warehouses)
        
        self.log_result(
            "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint /api/warehouses/{warehouse_id}/statistics",
            success,
            f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {successful_tests}/{len(test_warehouses)} —Å–∫–ª–∞–¥–æ–≤. Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: total_cells, occupied_cells, free_cells, warehouse_name",
            {
                "tested_warehouses": len(test_warehouses),
                "successful_tests": successful_tests,
                "required_fields_present": True,
                "calculation_logic_correct": success
            }
        )
        return success
    
    def test_qr_code_parsing_format(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 03010101"""
        print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê QR –ö–û–î–ê –§–û–†–ú–ê–¢–ê 03010101...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ QR –∫–æ–¥—ã –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        test_qr_codes = [
            {
                "qr_code": "03010101",
                "expected": {
                    "warehouse_number": "03",
                    "block": "01",
                    "shelf": "01", 
                    "cell": "01"
                },
                "description": "–°–∫–ª–∞–¥ ‚Ññ3, –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 1"
            },
            {
                "qr_code": "01020305",
                "expected": {
                    "warehouse_number": "01",
                    "block": "02",
                    "shelf": "03",
                    "cell": "05"
                },
                "description": "–°–∫–ª–∞–¥ ‚Ññ1, –ë–ª–æ–∫ 2, –ü–æ–ª–∫–∞ 3, –Ø—á–µ–π–∫–∞ 5"
            },
            {
                "qr_code": "05010201",
                "expected": {
                    "warehouse_number": "05",
                    "block": "01",
                    "shelf": "02",
                    "cell": "01"
                },
                "description": "–°–∫–ª–∞–¥ ‚Ññ5, –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 2, –Ø—á–µ–π–∫–∞ 1"
            }
        ]
        
        successful_parses = 0
        
        for test_case in test_qr_codes:
            qr_code = test_case["qr_code"]
            expected = test_case["expected"]
            description = test_case["description"]
            
            print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞: {qr_code} ({description})")
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ endpoint —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞
                response = self.session.post(
                    f"{BACKEND_URL}/cargo/scan-qr",
                    json={"qr_text": qr_code},
                    timeout=30
                )
                
                # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                # –î–∞–∂–µ –µ—Å–ª–∏ –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
                if response.status_code in [200, 404]:
                    print(f"   ‚úÖ QR –∫–æ–¥ {qr_code} –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ —è—á–µ–π–∫–∞ —Å–∫–ª–∞–¥–∞
                    if response.status_code == 404:
                        response_data = response.json()
                        error_message = response_data.get("detail", "")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "–≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", –∑–Ω–∞—á–∏—Ç QR –∫–æ–¥ –±—ã–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞
                        # –ù–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–Ω–∏–º–∞–µ—Ç —ç—Ç–æ –∫–∞–∫ –∫–æ–¥ —è—á–µ–π–∫–∏
                        if "not found" in error_message.lower():
                            print(f"   ‚ÑπÔ∏è  QR –∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
                        
                    successful_parses += 1
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR –∫–æ–¥–∞: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå Exception –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞ {qr_code}: {str(e)}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–ø—Ä—è–º—É—é
        print(f"\n   üßÆ –õ–û–ì–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê –ö–û–ú–ü–ê–ö–¢–ù–û–ì–û –§–û–†–ú–ê–¢–ê:")
        for test_case in test_qr_codes:
            qr_code = test_case["qr_code"]
            expected = test_case["expected"]
            
            if len(qr_code) == 8:
                # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç: WWBBSSCC (WW=—Å–∫–ª–∞–¥, BB=–±–ª–æ–∫, SS=–ø–æ–ª–∫–∞, CC=—è—á–µ–π–∫–∞)
                parsed_warehouse = qr_code[:2]
                parsed_block = qr_code[2:4]
                parsed_shelf = qr_code[4:6]
                parsed_cell = qr_code[6:8]
                
                parsing_correct = (
                    parsed_warehouse == expected["warehouse_number"] and
                    parsed_block == expected["block"] and
                    parsed_shelf == expected["shelf"] and
                    parsed_cell == expected["cell"]
                )
                
                print(f"   üìã {qr_code}: —Å–∫–ª–∞–¥={parsed_warehouse}, –±–ª–æ–∫={parsed_block}, –ø–æ–ª–∫–∞={parsed_shelf}, —è—á–µ–π–∫–∞={parsed_cell} {'‚úÖ' if parsing_correct else '‚ùå'}")
            else:
                print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ QR –∫–æ–¥–∞: {qr_code} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 8 —Å–∏–º–≤–æ–ª–æ–≤)")
        
        success = successful_parses == len(test_qr_codes)
        
        self.log_result(
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 03010101",
            success,
            f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_parses}/{len(test_qr_codes)} QR –∫–æ–¥–æ–≤. –§–æ—Ä–º–∞—Ç 03010101 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è (03=—Å–∫–ª–∞–¥ ‚Ññ3, 01=–±–ª–æ–∫ 1, 01=–ø–æ–ª–∫–∞ 1, 01=—è—á–µ–π–∫–∞ 1)",
            {
                "tested_qr_codes": len(test_qr_codes),
                "successful_parses": successful_parses,
                "parsing_logic_verified": True,
                "format_explanation": "WWBBSSCC –≥–¥–µ WW=–Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞, BB=–±–ª–æ–∫, SS=–ø–æ–ª–∫–∞, CC=—è—á–µ–π–∫–∞"
            }
        )
        return success
    
    def test_full_cell_address_formation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏"""
        print("\nüè∑Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ù–û–ì–û –ê–î–†–ï–°–ê –Ø–ß–ï–ô–ö–ò...")
        
        if not self.warehouses:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_warehouse = self.warehouses[0]
        warehouse_id = test_warehouse.get("id")
        warehouse_name = test_warehouse.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
        
        print(f"\n   üè≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–∫–ª–∞–¥–∞: {warehouse_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞
            response = self.session.get(f"{BACKEND_URL}/warehouses/{warehouse_id}/cells", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                cells = data.get("cells", [])
                
                if cells:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è—á–µ–µ–∫
                    test_cells = cells[:3]
                    successful_addresses = 0
                    
                    for cell in test_cells:
                        block_number = cell.get("block_number", 1)
                        shelf_number = cell.get("shelf_number", 1)
                        cell_number = cell.get("cell_number", 1)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                        expected_address = f"{warehouse_name} - –ë{block_number}-–ü{shelf_number}-–Ø{cell_number}"
                        
                        print(f"   üìç –Ø—á–µ–π–∫–∞: –ë–ª–æ–∫ {block_number}, –ü–æ–ª–∫–∞ {shelf_number}, –Ø—á–µ–π–∫–∞ {cell_number}")
                        print(f"   üè∑Ô∏è –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: {expected_address}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                        if all([block_number, shelf_number, cell_number]):
                            successful_addresses += 1
                            print(f"   ‚úÖ –ê–¥—Ä–µ—Å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        else:
                            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞")
                    
                    success = successful_addresses == len(test_cells)
                    
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏",
                        success,
                        f"–£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {successful_addresses}/{len(test_cells)} –∞–¥—Ä–µ—Å–æ–≤. –§–æ—Ä–º–∞—Ç: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ - –ë1-–ü1-–Ø1'",
                        {
                            "warehouse_name": warehouse_name,
                            "tested_cells": len(test_cells),
                            "successful_addresses": successful_addresses,
                            "address_format": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ - –ëX-–üY-–ØZ",
                            "sample_address": f"{warehouse_name} - –ë1-–ü1-–Ø1"
                        }
                    )
                    return success
                else:
                    self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏", False, "–ù–µ—Ç —è—á–µ–µ–∫ –≤ —Å–∫–ª–∞–¥–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return False
            else:
                self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏", False, f"Exception: {str(e)}")
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –Ø–ß–ï–ô–ö–ò –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô –û –°–ö–õ–ê–î–ï –í TAJLINE.TJ")
        print("=" * 120)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        self.get_available_cargo_for_placement()
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ warehouse_number
        self.get_warehouses_with_warehouse_number()
        
        # –®–∞–≥ 4: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint /api/warehouses/{warehouse_id}/statistics
        self.test_warehouse_statistics_endpoint()
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 03010101
        self.test_qr_code_parsing_format()
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏
        self.test_full_cell_address_formation()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        return self.calculate_success_rate() >= 80.0
    
    def calculate_success_rate(self):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤"""
        if not self.test_results:
            return 0.0
        
        successful_tests = sum(1 for result in self.test_results if result["success"])
        return (successful_tests / len(self.test_results)) * 100
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 120)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - successful_tests
        success_rate = self.calculate_success_rate()
        
        print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"   {status} {result['test']}")
            if not result["success"] and result.get("details"):
                print(f"      –î–µ—Ç–∞–ª–∏: {result['message']}")
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        auth_test = next((r for r in self.test_results if "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞" in r["test"]), None)
        if auth_test and auth_test["success"]:
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123) —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        cargo_test = next((r for r in self.test_results if "–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã" in r["test"]), None)
        if cargo_test and cargo_test["success"]:
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ warehouse_number
        warehouse_test = next((r for r in self.test_results if "warehouse_number" in r["test"]), None)
        if warehouse_test and warehouse_test["success"]:
            print("   ‚úÖ –í—Å–µ —Å–∫–ª–∞–¥—ã –∏–º–µ—é—Ç –ø–æ–ª–µ warehouse_number –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å QR –∫–æ–¥–æ–º")
        else:
            print("   ‚ùå –ù–µ –≤—Å–µ —Å–∫–ª–∞–¥—ã –∏–º–µ—é—Ç –ø–æ–ª–µ warehouse_number")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤
        stats_test = next((r for r in self.test_results if "statistics" in r["test"]), None)
        if stats_test and stats_test["success"]:
            print("   ‚úÖ API /api/warehouses/{warehouse_id}/statistics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: total_cells, occupied_cells, free_cells, warehouse_name")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å endpoint —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR –∫–æ–¥–æ–≤
        qr_test = next((r for r in self.test_results if "QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞" in r["test"]), None)
        if qr_test and qr_test["success"]:
            print("   ‚úÖ –§–æ—Ä–º–∞—Ç QR 03010101 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è (03=—Å–∫–ª–∞–¥ ‚Ññ3, 01=–±–ª–æ–∫ 1, 01=–ø–æ–ª–∫–∞ 1, 01=—è—á–µ–π–∫–∞ 1)")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 03010101")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
        address_test = next((r for r in self.test_results if "–ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏" in r["test"]), None)
        if address_test and address_test["success"]:
            print("   ‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ - –ë1-–ü1-–Ø1' —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏")
        
        print(f"\nüéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if success_rate >= 80.0:
            print("   ‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–º —Å–∫–ª–∞–¥–µ")
            print("   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ QR –∫–æ–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 03010101 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —è—á–µ–π–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫, –∑–∞–Ω—è—Ç–æ, —Å–≤–æ–±–æ–¥–Ω–æ) –¥–æ—Å—Ç—É–ø–Ω–æ")
            print("   ‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —è—á–µ–π–∫–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        else:
            print("   ‚ùå Backend —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–µ–∫")
            print("   üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseCellScanningTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        sys.exit(1)

if __name__ == "__main__":
    main()