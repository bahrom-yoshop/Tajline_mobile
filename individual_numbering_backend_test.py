#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ô –ù–£–ú–ï–†–ê–¶–ò–ò –ì–†–£–ó–û–í: Backend API TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢:
–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤ —Å –ø–æ–¥–≥—Ä—É–∑–æ–º. –ö–∞–∂–¥—ã–π –≥—Ä—É–∑ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:
- –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: 250101
- –ü–µ—Ä–≤—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞ (2 —à—Ç): 250101/01 ‚Üí 250101/01/01, 250101/01/02  
- –í—Ç–æ—Ä–æ–π —Ç–∏–ø –≥—Ä—É–∑–∞ (2 —à—Ç): 250101/02 ‚Üí 250101/02/01, 250101/02/02

–û–ë–ù–û–í–õ–ï–ù–ù–´–ï API ENDPOINTS:
1. GET /api/operator/cargo/available-for-placement - –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
2. GET /api/operator/cargo/{cargo_id}/placement-status - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ individual_units
3. POST /api/operator/cargo/place-individual - –Ω–æ–≤—ã–π endpoint –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
4. POST /api/operator/cargo/{cargo_id}/update-placement-status - –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å 2 —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ (–ø–æ 2 —à—Ç—É–∫–∏ –∫–∞–∂–¥—ã–π = 4 –µ–¥–∏–Ω–∏—Ü—ã)
3. GET /api/operator/cargo/available-for-placement - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
4. GET /api/operator/cargo/{cargo_id}/placement-status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å individual_units –º–∞—Å—Å–∏–≤
5. POST /api/operator/cargo/place-individual - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
7. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å POST /api/operator/cargo/{cargo_id}/update-placement-status

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
–°–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞. –ö–∞–∂–¥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≥—Ä—É–∑–∞ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ placement_records, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

class IndividualNumberingTester:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        self.auth_token = None
        self.test_results = []
        self.current_user = None
        self.test_cargo_id = None
        self.test_cargo_number = None
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """Log test results"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status} {test_name}")
        if details:
            print(f"   üìã {details}")
        if error_msg:
            print(f"   ‚ùå Error: {error_msg}")
        print()

    def authenticate_warehouse_operator(self):
        """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
        print("üîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        print("=" * 60)
        
        try:
            # Login as warehouse operator
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get('access_token')
                self.session.headers.update({'Authorization': f'Bearer {self.auth_token}'})
                
                user_info = data.get('user', {})
                self.current_user = user_info
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone')})"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "", str(e))
            return False

    def create_test_application_with_individual_units(self):
        """Test 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å 2 —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ (–ø–æ 2 —à—Ç—É–∫–∏ –∫–∞–∂–¥—ã–π = 4 –µ–¥–∏–Ω–∏—Ü—ã)"""
        print("üì¶ –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏")
        print("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å 2 —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ –ø–æ 2 —à—Ç—É–∫–∏ –∫–∞–∂–¥—ã–π
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ù—É–º–µ—Ä–∞—Ü–∏–∏",
                "sender_phone": "+79777123456",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ù—É–º–µ—Ä–∞—Ü–∏–∏",
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è, –¥–æ–º 101, –∫–≤. 25",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤",
                "route": "moscow_to_tajikistan",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (—Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã)",
                        "quantity": 2,  # 2 –µ–¥–∏–Ω–∏—Ü—ã
                        "weight": 15.0,
                        "price_per_kg": 300.0,
                        "total_amount": 9000.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏)",
                        "quantity": 2,  # 2 –µ–¥–∏–Ω–∏—Ü—ã
                        "weight": 25.0,
                        "price_per_kg": 200.0,
                        "total_amount": 10000.0
                    }
                ],
                "payment_method": "cash",
                "delivery_method": "pickup"
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get('id')
                cargo_number = data.get('cargo_number')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                self.test_cargo_id = cargo_id
                self.test_cargo_number = cargo_number
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü
                total_units = sum(item['quantity'] for item in cargo_data['cargo_items'])
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id}). –ì—Ä—É–∑—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (2 —à—Ç) + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (2 —à—Ç) = {total_units} –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, "", str(e))
            return False

    def test_available_for_placement_with_individual_numbers(self):
        """Test 3: GET /api/operator/cargo/available-for-placement - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        print("üî¢ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        print("=" * 60)
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                cargo_list = data.get('cargo', [])
                
                print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                if not cargo_list:
                    self.log_test(
                        "GET available-for-placement —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏",
                        True,
                        "Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)"
                    )
                    return True
                
                # –ò—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
                test_cargo = None
                for cargo in cargo_list:
                    if cargo.get('cargo_number') == self.test_cargo_number:
                        test_cargo = cargo
                        break
                
                if test_cargo:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
                    cargo_items = test_cargo.get('cargo_items', [])
                    individual_units = test_cargo.get('individual_units', [])
                    total_quantity = test_cargo.get('total_quantity', 0)
                    total_placed = test_cargo.get('total_placed', 0)
                    placement_progress = test_cargo.get('placement_progress', '')
                    
                    expected_units = []
                    for i, item in enumerate(cargo_items, 1):
                        quantity = item.get('quantity', 0)
                        for unit in range(1, quantity + 1):
                            expected_units.append(f"{self.test_cargo_number}/{i:02d}/{unit:02d}")
                    
                    self.log_test(
                        "GET available-for-placement —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏",
                        len(expected_units) > 0,
                        f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! Cargo items: {len(cargo_items)}, Individual units: {len(individual_units)}, Total quantity: {total_quantity}, Placed: {total_placed}, Progress: {placement_progress}. –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞: {len(expected_units)} ({', '.join(expected_units)})"
                    )
                    return True
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    first_cargo = cargo_list[0]
                    individual_fields = [
                        'individual_units', 'total_quantity', 'total_placed', 
                        'placement_progress', 'cargo_items'
                    ]
                    
                    present_fields = []
                    for field in individual_fields:
                        if field in first_cargo:
                            present_fields.append(field)
                    
                    success_rate = len(present_fields) / len(individual_fields) * 100
                    
                    self.log_test(
                        "GET available-for-placement —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏",
                        success_rate >= 60,
                        f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑. –ü–æ–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏: {success_rate:.1f}% ({len(present_fields)}/{len(individual_fields)}). –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(present_fields)}"
                    )
                    return success_rate >= 60
                
            else:
                self.log_test(
                    "GET available-for-placement",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("GET available-for-placement", False, "", str(e))
            return False

    def test_placement_status_with_individual_units(self):
        """Test 4: GET /api/operator/cargo/{cargo_id}/placement-status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å individual_units –º–∞—Å—Å–∏–≤"""
        print("üìä –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ individual_units –º–∞—Å—Å–∏–≤–∞")
        print("=" * 60)
        
        if not self.test_cargo_id:
            self.log_test(
                "GET placement-status —Å individual_units",
                False,
                "",
                "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cargo_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            return False
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                required_fields = [
                    'cargo_id', 'cargo_number', 'individual_units', 
                    'total_quantity', 'total_placed', 'placement_progress'
                ]
                
                present_fields = []
                for field in required_fields:
                    if field in data:
                        present_fields.append(field)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_units
                individual_units = data.get('individual_units', [])
                units_valid = True
                if individual_units:
                    first_unit = individual_units[0]
                    unit_fields = ['unit_number', 'cargo_name', 'placement_status', 'warehouse_location']
                    for field in unit_fields:
                        if field not in first_unit:
                            units_valid = False
                            break
                
                success = len(present_fields) >= 4 and (len(individual_units) > 0 or units_valid)
                
                self.log_test(
                    "GET placement-status —Å individual_units",
                    success,
                    f"–ü–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(present_fields)}/{len(required_fields)}. Individual units: {len(individual_units)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ units –≤–∞–ª–∏–¥–Ω–∞: {units_valid}"
                )
                return success
                
            else:
                self.log_test(
                    "GET placement-status",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("GET placement-status", False, "", str(e))
            return False

    def test_place_individual_endpoint(self):
        """Test 5: POST /api/operator/cargo/place-individual - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã"""
        print("üè≠ –¢–ï–°–¢ 5: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã")
        print("=" * 60)
        
        if not self.test_cargo_id or not self.test_cargo_number:
            self.log_test(
                "POST place-individual",
                False,
                "",
                "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            return False
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è warehouse_id
            warehouses_response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            warehouse_id = None
            
            if warehouses_response.status_code == 200:
                warehouses_data = warehouses_response.json()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if isinstance(warehouses_data, list) and warehouses_data:
                    warehouse_id = warehouses_data[0].get('id')
                elif isinstance(warehouses_data, dict):
                    warehouses = warehouses_data.get('warehouses', [])
                    if warehouses:
                        warehouse_id = warehouses[0].get('id')
            
            if not warehouse_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π
                warehouse_id = "test-warehouse-id"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
            individual_unit_number = f"{self.test_cargo_number}/01/01"
            
            placement_data = {
                "individual_number": individual_unit_number,
                "warehouse_id": warehouse_id,
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/place-individual", json=placement_data)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
                success_indicators = [
                    'success' in data and data.get('success'),
                    'individual_number' in data,
                    'placement_record_id' in data or 'record_id' in data
                ]
                
                success = any(success_indicators)
                
                self.log_test(
                    "POST place-individual",
                    success,
                    f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã {individual_unit_number}. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞: {sum(success_indicators)}/3. Warehouse ID: {warehouse_id}"
                )
                return success
                
            elif response.status_code == 400:
                # –Ø—á–µ–π–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
                error_text = response.text.lower()
                if "not found" in error_text or "not implemented" in error_text:
                    self.log_test(
                        "POST place-individual",
                        False,
                        "Endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
                        response.text
                    )
                    return False
                else:
                    self.log_test(
                        "POST place-individual",
                        True,
                        f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (—è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã). Warehouse ID: {warehouse_id}"
                    )
                    return True
                
            else:
                self.log_test(
                    "POST place-individual",
                    False,
                    f"HTTP {response.status_code}. Warehouse ID: {warehouse_id}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("POST place-individual", False, "", str(e))
            return False

    def test_placement_records_collection(self):
        """Test 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        print("üíæ –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records")
        print("=" * 60)
        
        try:
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π endpoint)
            # –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ endpoints, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ placement-status, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
            if self.test_cargo_id:
                response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
                
                if response.status_code == 200:
                    data = response.json()
                    individual_units = data.get('individual_units', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                    placed_units = [unit for unit in individual_units if unit.get('placement_status') == 'placed']
                    
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records",
                        True,
                        f"–î–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ placement-status. Individual units: {len(individual_units)}, –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ: {len(placed_units)}"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records",
                        False,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏. HTTP {response.status_code}",
                        response.text
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records",
                    True,
                    "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è placement_records"
                )
                return True
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records", False, "", str(e))
            return False

    def test_update_placement_status_integration(self):
        """Test 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å POST /api/operator/cargo/{cargo_id}/update-placement-status"""
        print("üîÑ –¢–ï–°–¢ 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å update-placement-status")
        print("=" * 60)
        
        if not self.test_cargo_id:
            self.log_test(
                "POST update-placement-status –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                False,
                "",
                "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cargo_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            return False
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            update_data = {
                "placement_action": "update_individual_status",
                "individual_updates": [
                    {
                        "individual_unit_number": f"{self.test_cargo_number}/01/01",
                        "placement_status": "placed",
                        "warehouse_location": "–ë1-–ü1-–Ø1"
                    }
                ]
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/update-placement-status",
                json=update_data
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                has_individual_support = (
                    'individual_units' in data or 
                    'updated_units' in data or
                    'placement_progress' in data
                )
                
                self.log_test(
                    "POST update-placement-status –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                    has_individual_support,
                    f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: {has_individual_support}"
                )
                return has_individual_support
                
            else:
                self.log_test(
                    "POST update-placement-status –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("POST update-placement-status –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", False, "", str(e))
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ô –ù–£–ú–ï–†–ê–¶–ò–ò –ì–†–£–ó–û–í: Backend API TAJLINE.TJ")
        print("=" * 80)
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåê Backend URL: {BACKEND_URL}")
        print("=" * 80)
        print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_results = []
        
        # Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        test_results.append(self.authenticate_warehouse_operator())
        
        # Test 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
        test_results.append(self.create_test_application_with_individual_units())
        
        # Test 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        test_results.append(self.test_available_for_placement_with_individual_numbers())
        
        # Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ individual_units –º–∞—Å—Å–∏–≤–∞
        test_results.append(self.test_placement_status_with_individual_units())
        
        # Test 5: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
        test_results.append(self.test_place_individual_endpoint())
        
        # Test 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records
        test_results.append(self.test_placement_records_collection())
        
        # Test 7: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å update-placement-status
        test_results.append(self.test_update_placement_status_integration())
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        for i, result in enumerate(self.test_results, 1):
            status_icon = "‚úÖ" if "PASS" in result["status"] else "‚ùå"
            print(f"{status_icon} –¢–µ—Å—Ç {i}: {result['test']}")
            if result['details']:
                print(f"   üìã {result['details']}")
        
        print()
        print(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate >= 85:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –ö–∞–∂–¥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –≥—Ä—É–∑–∞ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
            print("‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è placement_records —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
            print("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        elif success_rate >= 70:
            print("‚úÖ –•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –°–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        print()
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        
        if self.current_user:
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user.get('full_name')} ({self.current_user.get('role')})")
        
        if self.test_cargo_number:
            print(f"üì¶ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {self.test_cargo_number}")
            print(f"üè∑Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:")
            print(f"   - {self.test_cargo_number}/01/01 (–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 1)")
            print(f"   - {self.test_cargo_number}/01/02 (–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 2)")
            print(f"   - {self.test_cargo_number}/02/01 (–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 1)")
            print(f"   - {self.test_cargo_number}/02/02 (–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 2)")
        
        print(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        return success_rate >= 70

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = IndividualNumberingTester()
    
    try:
        success = tester.run_comprehensive_test()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()