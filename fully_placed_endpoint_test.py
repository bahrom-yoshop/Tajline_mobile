#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤—ã–π API endpoint /api/operator/cargo/fully-placed –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ endpoint
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π (admin, warehouse_operator)
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ

Endpoint: GET /api/operator/cargo/fully-placed
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: page, per_page
–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: JSON —Å –ø–æ–ª—è–º–∏ items –∏ pagination
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-7.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
TEST_USERS = {
    "admin": {
        "phone": "+79999999999",
        "password": "admin123"
    },
    "warehouse_operator": {
        "phone": "+79777888999", 
        "password": "warehouse123"
    }
}

class FullyPlacedCargoTester:
    def __init__(self):
        self.session = requests.Session()
        self.test_results = []
        self.tokens = {}
        
    def log_test(self, test_name: str, success: bool, details: str = "", response_data: dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat(),
            "response_data": response_data
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        if not success and response_data:
            print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
        print()

    def authenticate_user(self, user_type: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = TEST_USERS[user_type]
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=user_data)
            
            if response.status_code == 200:
                data = response.json()
                token = data.get("access_token")
                user_info = data.get("user", {})
                
                if token:
                    self.tokens[user_type] = token
                    self.log_test(
                        f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}' (—Ä–æ–ª—å: {user_info.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')})"
                    )
                    return True
                else:
                    self.log_test(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_test(
                    f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    response.json() if response.headers.get('content-type', '').startswith('application/json') else None
                )
                return False
                
        except Exception as e:
            self.log_test(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_endpoint_access(self, user_type: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ endpoint –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        try:
            if user_type not in self.tokens:
                self.log_test(f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})", False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})",
                    True,
                    f"Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–æ–ª–∏ {user_type}, –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('items', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                )
                return True
            elif response.status_code == 403:
                self.log_test(
                    f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})",
                    False,
                    f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (HTTP 403) - –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π"
                )
                return False
            else:
                self.log_test(
                    f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    response.json() if response.headers.get('content-type', '').startswith('application/json') else None
                )
                return False
                
        except Exception as e:
            self.log_test(f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_response_structure(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ endpoint"""
        try:
            if user_type not in self.tokens:
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code != 200:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["items", "pagination", "summary"]
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                    data
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É pagination
            pagination = data.get("pagination", {})
            pagination_fields = ["current_page", "per_page", "total_items", "total_pages", "has_next", "has_prev"]
            missing_pagination_fields = [field for field in pagination_fields if field not in pagination]
            
            if missing_pagination_fields:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {missing_pagination_fields}",
                    data
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary
            summary = data.get("summary", {})
            summary_fields = ["fully_placed_requests", "total_units_placed"]
            missing_summary_fields = [field for field in summary_fields if field not in summary]
            
            if missing_summary_fields:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è summary: {missing_summary_fields}",
                    data
                )
                return False
            
            self.log_test(
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                True,
                f"–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data['items'])}, –°—Ç—Ä–∞–Ω–∏—Ü: {pagination['total_pages']}"
            )
            return True
            
        except Exception as e:
            self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_item_fields(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞"""
        try:
            if user_type not in self.tokens:
                self.log_test("–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code != 200:
                self.log_test(
                    "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
            data = response.json()
            items = data.get("items", [])
            
            if not items:
                self.log_test(
                    "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    True,
                    "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫)"
                )
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            item = items[0]
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            required_item_fields = [
                "sender_full_name", "sender_phone", "sender_address",
                "recipient_full_name", "recipient_phone", "recipient_address",
                "individual_units", "progress_text"
            ]
            
            missing_item_fields = [field for field in required_item_fields if field not in item]
            
            if missing_item_fields:
                self.log_test(
                    "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ: {missing_item_fields}",
                    item
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units
            individual_units = item.get("individual_units", [])
            if individual_units:
                unit = individual_units[0]
                required_unit_fields = ["individual_number", "is_placed", "placement_info"]
                missing_unit_fields = [field for field in required_unit_fields if field not in unit]
                
                if missing_unit_fields:
                    self.log_test(
                        "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ individual_units: {missing_unit_fields}",
                        unit
                    )
                    return False
            
            self.log_test(
                "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                True,
                f"–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö. –ü—Ä–æ–≤–µ—Ä–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å {len(individual_units)} individual_units"
            )
            return True
            
        except Exception as e:
            self.log_test("–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_pagination(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            if user_type not in self.tokens:
                self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            
            # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å per_page=5
            response1 = self.session.get(
                f"{BACKEND_URL}/operator/cargo/fully-placed?page=1&per_page=5",
                headers=headers
            )
            
            if response1.status_code != 200:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"HTTP {response1.status_code}: {response1.text}"
                )
                return False
            
            data1 = response1.json()
            pagination1 = data1.get("pagination", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if pagination1.get("current_page") != 1:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 1, –ø–æ–ª—É—á–µ–Ω–æ {pagination1.get('current_page')}"
                )
                return False
            
            if pagination1.get("per_page") != 5:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: –æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ {pagination1.get('per_page')}"
                )
                return False
            
            # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã)
            total_items = pagination1.get("total_items", 0)
            if total_items > 5:
                response2 = self.session.get(
                    f"{BACKEND_URL}/operator/cargo/fully-placed?page=2&per_page=5",
                    headers=headers
                )
                
                if response2.status_code == 200:
                    data2 = response2.json()
                    pagination2 = data2.get("pagination", {})
                    
                    if pagination2.get("current_page") != 2:
                        self.log_test(
                            "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å 2, –ø–æ–ª—É—á–µ–Ω–æ {pagination2.get('current_page')}"
                        )
                        return False
            
            self.log_test(
                "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                True,
                f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items}, —Å—Ç—Ä–∞–Ω–∏—Ü: {pagination1.get('total_pages', 0)}"
            )
            return True
            
        except Exception as e:
            self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_data_consistency(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if user_type not in self.tokens:
                self.log_test("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code != 200:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
            data = response.json()
            items = data.get("items", [])
            
            if not items:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
                )
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            inconsistencies = []
            
            for i, item in enumerate(items):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ progress_text —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º
                total_units = item.get("total_units", 0)
                placed_units = item.get("placed_units", 0)
                progress_text = item.get("progress_text", "")
                expected_progress = f"–†–∞–∑–º–µ—â–µ–Ω–æ: {placed_units}/{total_units}"
                
                if progress_text != expected_progress:
                    inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}: progress_text '{progress_text}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É '{expected_progress}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_fully_placed = True
                if not item.get("is_fully_placed", False):
                    inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}: is_fully_placed –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç total_units
                individual_units = item.get("individual_units", [])
                if len(individual_units) != total_units:
                    inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units ({len(individual_units)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç total_units ({total_units})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ individual_units —Ä–∞–∑–º–µ—â–µ–Ω—ã
                for j, unit in enumerate(individual_units):
                    if not unit.get("is_placed", False):
                        inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}, –µ–¥–∏–Ω–∏—Ü–∞ {j}: is_placed –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True")
                    
                    if not unit.get("placement_info"):
                        inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}, –µ–¥–∏–Ω–∏—Ü–∞ {j}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç placement_info")
            
            if inconsistencies:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {'; '.join(inconsistencies)}"
                )
                return False
            
            self.log_test(
                "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                True,
                f"–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            )
            return True
            
        except Exception as e:
            self.log_test("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoint /api/operator/cargo/fully-placed")
        print("=" * 80)
        print()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üìã –≠–¢–ê–ü 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("-" * 50)
        admin_auth = self.authenticate_user("admin")
        operator_auth = self.authenticate_user("warehouse_operator")
        print()
        
        if not (admin_auth or operator_auth):
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        print("üìã –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ê –î–õ–Ø –†–ê–ó–ù–´–• –†–û–õ–ï–ô")
        print("-" * 50)
        access_results = []
        if admin_auth:
            access_results.append(self.test_endpoint_access("admin"))
        if operator_auth:
            access_results.append(self.test_endpoint_access("warehouse_operator"))
        print()
        
        if not any(access_results):
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π —Ä–æ–ª–∏!")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        test_user = "warehouse_operator" if operator_auth else "admin"
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        print("üìã –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê")
        print("-" * 50)
        structure_test = self.test_response_structure(test_user)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("üìã –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ï–ô –≠–õ–ï–ú–ï–ù–¢–û–í")
        print("-" * 50)
        fields_test = self.test_item_fields(test_user)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        print("üìã –≠–¢–ê–ü 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò")
        print("-" * 50)
        pagination_test = self.test_pagination(test_user)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        print("üìã –≠–¢–ê–ü 6: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        print("-" * 50)
        consistency_test = self.test_data_consistency(test_user)
        print()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        critical_tests = [structure_test, fields_test, pagination_test, consistency_test]
        success_rate = sum(1 for test in critical_tests if test) / len(critical_tests) * 100
        
        return success_rate >= 75  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ 75%+ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        successful_tests = [r for r in self.test_results if r["success"]]
        failed_tests = [r for r in self.test_results if not r["success"]]
        
        total_tests = len(self.test_results)
        success_count = len(successful_tests)
        success_rate = (success_count / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_tests)}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if failed_tests:
            print("‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for test in failed_tests:
                print(f"   ‚Ä¢ {test['test']}: {test['details']}")
            print()
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
        elif success_rate >= 75:
            print("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FullyPlacedCargoTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint /api/operator/cargo/fully-placed –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("üö® –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoint!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()