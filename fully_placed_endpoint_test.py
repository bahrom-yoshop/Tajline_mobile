#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoint /api/operator/cargo/fully-placed –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥ –≤ API endpoint /api/operator/cargo/fully-placed:
- –ó–∞—è–≤–∫–∞ 250109 –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ (5/5 –µ–¥–∏–Ω–∏—Ü), –Ω–æ –Ω–µ –ø–æ—è–≤–ª—è–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ individual_items –≤–º–µ—Å—Ç–æ placement_records
- –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç API

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ë–õ–ê–°–¢–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ó–∞—è–≤–∫–∞ 250109 —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
3. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ individual_items –≤–º–µ—Å—Ç–æ placement_records
4. –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints individual-units-for-placement –∏ fully-placed
5. –í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ (sender, recipient, individual_units, progress_text)

–ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø: warehouse_operator –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-7.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class FullyPlacedEndpointTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_results = []
        self.application_250109_data = None
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_endpoint_access_and_structure(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ endpoint –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞"""
        try:
            print("üéØ –¢–ï–°–¢ 1: –î–û–°–¢–£–ü –ö ENDPOINT –ò –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                required_fields = ["items", "pagination", "summary"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É pagination
                    pagination = data.get("pagination", {})
                    pagination_fields = ["current_page", "per_page", "total_items", "total_pages", "has_next", "has_prev"]
                    missing_pagination = [field for field in pagination_fields if field not in pagination]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary
                    summary = data.get("summary", {})
                    summary_fields = ["fully_placed_requests", "total_units_placed"]
                    missing_summary = [field for field in summary_fields if field not in summary]
                    
                    if not missing_pagination and not missing_summary:
                        self.log_test(
                            "–î–æ—Å—Ç—É–ø –∫ endpoint",
                            True,
                            f"Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–æ–ª–∏ warehouse_operator, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—è–º–∏ {required_fields}"
                        )
                        
                        self.log_test(
                            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                            True,
                            f"–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (items, pagination —Å {len(pagination_fields)} –ø–æ–ª—è–º–∏, summary —Å {len(summary_fields)} –ø–æ–ª—è–º–∏)"
                        )
                        return True
                    else:
                        missing_all = missing_pagination + missing_summary
                        self.log_test(
                            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ pagination/summary: {missing_all}",
                            f"pagination: {pagination_fields}, summary: {summary_fields}",
                            f"pagination: {list(pagination.keys())}, summary: {list(summary.keys())}"
                        )
                        return False
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "–î–æ—Å—Ç—É–ø –∫ endpoint",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–î–æ—Å—Ç—É–ø –∫ endpoint", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_pagination_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            print("üéØ –¢–ï–°–¢ 2: –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –ü–ê–ì–ò–ù–ê–¶–ò–ò")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            test_params = [
                {"page": 1, "per_page": 10},
                {"page": 1, "per_page": 25},
                {"page": 2, "per_page": 5}
            ]
            
            success_count = 0
            
            for params in test_params:
                response = self.session.get(
                    f"{API_BASE}/operator/cargo/fully-placed",
                    params=params,
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    pagination = data.get("pagination", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    if (pagination.get("current_page") == params["page"] and 
                        pagination.get("per_page") == params["per_page"]):
                        success_count += 1
                        print(f"    ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è page={params['page']}, per_page={params['per_page']}")
                    else:
                        print(f"    ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è {params}")
                else:
                    print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {params}")
            
            if success_count == len(test_params):
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    True,
                    f"–†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ page –∏ per_page, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"
                )
                return True
            else:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ {success_count}/{len(test_params)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤",
                    f"{len(test_params)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤",
                    f"{success_count} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_access_control(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞"""
        try:
            print("üéØ –¢–ï–°–¢ 3: –ö–û–ù–¢–†–û–õ–¨ –î–û–°–¢–£–ü–ê")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
            current_token = self.session.headers.get("Authorization")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.session.headers.pop("Authorization", None)
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
            if current_token:
                self.session.headers["Authorization"] = current_token
            
            if response.status_code == 403:
                self.log_test(
                    "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞",
                    True,
                    "–î–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (HTTP 403), —Ä–æ–ª–∏ admin –∏ warehouse_operator –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø"
                )
                return True
            else:
                self.log_test(
                    "–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}",
                    "403",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def analyze_application_250109(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ 250109 –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–ö–ò 250109")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            individual_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if individual_response.status_code == 200:
                individual_data = individual_response.json()
                items = individual_data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250109
                application_250109 = None
                for item in items:
                    if item.get("application_number") == "250109":
                        application_250109 = item
                        break
                
                if application_250109:
                    units = application_250109.get("units", [])
                    total_units = len(units)
                    placed_units = sum(1 for unit in units if unit.get("is_placed", False))
                    
                    print(f"    üìä –ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ individual-units-for-placement:")
                    print(f"    üìä –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}")
                    print(f"    üìä –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {placed_units}")
                    print(f"    üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {placed_units}/{total_units}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã
                    for unit in units:
                        individual_number = unit.get("individual_number", "N/A")
                        is_placed = unit.get("is_placed", False)
                        placement_info = unit.get("placement_info", {})
                        status_icon = "‚úÖ" if is_placed else "üü°"
                        status_text = "–†–∞–∑–º–µ—â–µ–Ω" if is_placed else "–û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                        
                        if is_placed and placement_info:
                            location = placement_info.get("location", "N/A")
                            print(f"    üìç {individual_number}: {status_icon} {status_text} (üìç {location})")
                        else:
                            print(f"    üìç {individual_number}: {status_icon} {status_text}")
                    
                    self.application_250109_data = {
                        "found_in_individual_units": True,
                        "total_units": total_units,
                        "placed_units": placed_units,
                        "is_fully_placed": placed_units == total_units,
                        "units_details": units
                    }
                else:
                    print(f"    ‚ùå –ó–∞—è–≤–∫–∞ 250109 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ individual-units-for-placement")
                    self.application_250109_data = {
                        "found_in_individual_units": False,
                        "total_units": 0,
                        "placed_units": 0,
                        "is_fully_placed": False,
                        "units_details": []
                    }
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual units: {individual_response.status_code}")
                self.application_250109_data = {
                    "found_in_individual_units": False,
                    "total_units": 0,
                    "placed_units": 0,
                    "is_fully_placed": False,
                    "units_details": []
                }
            
            return True
                
        except Exception as e:
            print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞—è–≤–∫–∏ 250109: {str(e)}")
            return False

    def test_application_250109_in_fully_placed(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250109 –≤ fully-placed endpoint"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ó–ê–Ø–í–ö–ê 250109 –í FULLY-PLACED ENDPOINT")
            
            # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É 250109
            if not self.analyze_application_250109():
                self.log_test("–ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ 250109", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É 250109")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250109 –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
                application_250109_in_fully_placed = None
                for item in items:
                    if item.get("application_number") == "250109":
                        application_250109_in_fully_placed = item
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
                if self.application_250109_data and self.application_250109_data.get("is_fully_placed", False):
                    # –ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ fully-placed
                    if application_250109_in_fully_placed:
                        self.log_test(
                            "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê: –ó–∞—è–≤–∫–∞ 250109 –≤ fully-placed",
                            True,
                            f"–ó–∞—è–≤–∫–∞ 250109 —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫! –†–∞–∑–º–µ—â–µ–Ω–æ: {self.application_250109_data.get('placed_units')}/{self.application_250109_data.get('total_units')}"
                        )
                        return True
                    else:
                        self.log_test(
                            "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ 250109 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed",
                            False,
                            f"–ó–∞—è–≤–∫–∞ 250109 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({self.application_250109_data.get('placed_units')}/{self.application_250109_data.get('total_units')}), –Ω–æ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed endpoint!",
                            "–ó–∞—è–≤–∫–∞ 250109 –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö",
                            "–ó–∞—è–≤–∫–∞ 250109 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
                        )
                        return False
                else:
                    # –ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    if application_250109_in_fully_placed:
                        self.log_test(
                            "–õ–æ–≥–∏–∫–∞ fully-placed endpoint",
                            False,
                            f"–ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed, –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({self.application_250109_data.get('placed_units', 0)}/{self.application_250109_data.get('total_units', 0)})",
                            "–¢–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ fully-placed",
                            "–ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –≤ fully-placed"
                        )
                        return False
                    else:
                        self.log_test(
                            "–õ–æ–≥–∏–∫–∞ fully-placed endpoint",
                            True,
                            f"–ó–∞—è–≤–∫–∞ 250109 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed (—Ä–∞–∑–º–µ—â–µ–Ω–æ: {self.application_250109_data.get('placed_units', 0)}/{self.application_250109_data.get('total_units', 0)})"
                        )
                        return True
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ fully-placed –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞—è–≤–∫–∏ 250109", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_required_fields_in_response(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ"""
        try:
            print("üéØ –¢–ï–°–¢ 4: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –í –û–¢–í–ï–¢–ï")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                if items:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    first_item = items[0]
                    
                    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
                    required_fields = [
                        "sender_full_name", "sender_phone", "sender_address",
                        "recipient_full_name", "recipient_phone", "recipient_address",
                        "individual_units", "progress_text"
                    ]
                    
                    missing_fields = []
                    present_fields = []
                    
                    for field in required_fields:
                        if field in first_item:
                            present_fields.append(field)
                        else:
                            missing_fields.append(field)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units –Ω–∞ –Ω–∞–ª–∏—á–∏–µ placement_info
                    individual_units = first_item.get("individual_units", [])
                    placement_info_present = False
                    
                    if individual_units:
                        for unit in individual_units:
                            if "placement_info" in unit:
                                placement_info_present = True
                                break
                    
                    if not missing_fields and placement_info_present:
                        self.log_test(
                            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã",
                            True,
                            f"–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: ‚úÖ {', '.join(present_fields)}, ‚úÖ individual_units —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —è—á–µ–π–∫–∞—Ö (placement_info)"
                        )
                        return True
                    else:
                        issues = []
                        if missing_fields:
                            issues.append(f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                        if not placement_info_present:
                            issues.append("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç placement_info –≤ individual_units")
                        
                        self.log_test(
                            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
                            False,
                            f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—è–º–∏: {'; '.join(issues)}",
                            f"–í—Å–µ –ø–æ–ª—è: {required_fields} + placement_info",
                            f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present_fields}, placement_info: {placement_info_present}"
                        )
                        return False
                else:
                    self.log_test(
                        "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
                        True,
                        "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π (—Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç)"
                    )
                    return True
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_data_consistency_between_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints"""
        try:
            print("üéØ –¢–ï–°–¢ 5: –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨ –î–ê–ù–ù–´–• –ú–ï–ñ–î–£ ENDPOINTS")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ individual-units-for-placement
            individual_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fully-placed
            fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if individual_response.status_code == 200 and fully_placed_response.status_code == 200:
                individual_data = individual_response.json()
                fully_placed_data = fully_placed_response.json()
                
                individual_items = individual_data.get("items", [])
                fully_placed_items = fully_placed_data.get("items", [])
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_applications_for_placement = len(individual_items)
                fully_placed_applications = len(fully_placed_items)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ individual-units
                fully_placed_in_individual = 0
                for item in individual_items:
                    units = item.get("units", [])
                    if units:
                        total_units = len(units)
                        placed_units = sum(1 for unit in units if unit.get("is_placed", False))
                        if placed_units == total_units and total_units > 0:
                            fully_placed_in_individual += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
                consistency_issues = []
                
                # –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞—è–≤–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±—ã—Ç—å –≤ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–∞—Ö
                # (–µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞, –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
                
                print(f"    üìä Individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_applications_for_placement} –∑–∞—è–≤–æ–∫")
                print(f"    üìä –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {fully_placed_applications} –∑–∞—è–≤–æ–∫")
                print(f"    üìä –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤ individual units: {fully_placed_in_individual} –∑–∞—è–≤–æ–∫")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ individual units, –Ω–æ –∏—Ö –Ω–µ—Ç –≤ fully-placed - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
                if fully_placed_in_individual > 0 and fully_placed_applications == 0:
                    consistency_issues.append(f"–ù–∞–π–¥–µ–Ω–æ {fully_placed_in_individual} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ individual-units, –Ω–æ 0 –≤ fully-placed")
                
                if not consistency_issues:
                    self.log_test(
                        "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints",
                        True,
                        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints individual-units-for-placement –∏ fully-placed. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_applications_for_placement} –∑–∞—è–≤–æ–∫, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ: {fully_placed_applications} –∑–∞—è–≤–æ–∫"
                    )
                    return True
                else:
                    self.log_test(
                        "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints",
                        False,
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {'; '.join(consistency_issues)}",
                        "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É endpoints",
                        f"–ü—Ä–æ–±–ª–µ–º—ã: {consistency_issues}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏",
                    False,
                    f"–û—à–∏–±–∫–∏ HTTP: individual-units={individual_response.status_code}, fully-placed={fully_placed_response.status_code}",
                    "200 –¥–ª—è –æ–±–æ–∏—Ö endpoints",
                    f"individual-units={individual_response.status_code}, fully-placed={fully_placed_response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ fully-placed endpoint"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoint /api/operator/cargo/fully-placed")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ warehouse_operator")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append(("–î–æ—Å—Ç—É–ø –∫ endpoint –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞", self.test_endpoint_access_and_structure()))
        test_results.append(("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", self.test_pagination_functionality()))
        test_results.append(("–ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞", self.test_access_control()))
        test_results.append(("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: –ó–∞—è–≤–∫–∞ 250109 –≤ fully-placed", self.test_application_250109_in_fully_placed()))
        test_results.append(("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ", self.test_required_fields_in_response()))
        test_results.append(("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints", self.test_data_consistency_between_endpoints()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API ENDPOINT /api/operator/cargo/fully-placed:")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞—è–≤–∫–∏ 250109
        critical_test_passed = test_results[3][1]  # –ò–Ω–¥–µ–∫—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        if success_rate == 100 and critical_test_passed:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –° –ó–ê–Ø–í–ö–û–ô 250109 –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
            print("‚úÖ Endpoint —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ó–∞—è–≤–∫–∞ 250109 —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            print("‚úÖ –õ–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ individual_items —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints –æ–±–µ—Å–ø–µ—á–µ–Ω–∞")
        elif critical_test_passed:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê! –ó–∞—è–≤–∫–∞ 250109 —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê! –ó–∞—è–≤–∫–∞ 250109 –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ª–æ–≥–∏–∫–∏ –≤ /api/operator/cargo/fully-placed")
        
        return success_rate >= 66.7 and critical_test_passed  # –ú–∏–Ω–∏–º—É–º 66.7% + –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FullyPlacedEndpointTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API endpoint /api/operator/cargo/fully-placed —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ endpoint /api/operator/cargo/fully-placed")
        return 1

if __name__ == "__main__":
    exit(main())
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤—ã–π API endpoint /api/operator/cargo/fully-placed –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ endpoint
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π (admin, warehouse_operator)
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ

Endpoint: GET /api/operator/cargo/fully-placed
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: page, per_page
–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: JSON —Å –ø–æ–ª—è–º–∏ items –∏ pagination
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-7.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
TEST_USERS = {
    "admin": {
        "phone": "+79999999999",
        "password": "admin123"
    },
    "warehouse_operator": {
        "phone": "+79777888999", 
        "password": "warehouse123"
    }
}

class FullyPlacedCargoTester:
    def __init__(self):
        self.session = requests.Session()
        self.test_results = []
        self.tokens = {}
        
    def log_test(self, test_name: str, success: bool, details: str = "", response_data: dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat(),
            "response_data": response_data
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        if not success and response_data:
            print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
        print()

    def authenticate_user(self, user_type: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = TEST_USERS[user_type]
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=user_data)
            
            if response.status_code == 200:
                data = response.json()
                token = data.get("access_token")
                user_info = data.get("user", {})
                
                if token:
                    self.tokens[user_type] = token
                    self.log_test(
                        f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}' (—Ä–æ–ª—å: {user_info.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')})"
                    )
                    return True
                else:
                    self.log_test(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_test(
                    f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    response.json() if response.headers.get('content-type', '').startswith('application/json') else None
                )
                return False
                
        except Exception as e:
            self.log_test(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_endpoint_access(self, user_type: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ endpoint –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        try:
            if user_type not in self.tokens:
                self.log_test(f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})", False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})",
                    True,
                    f"Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–æ–ª–∏ {user_type}, –ø–æ–ª—É—á–µ–Ω–æ {len(data.get('items', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                )
                return True
            elif response.status_code == 403:
                self.log_test(
                    f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})",
                    False,
                    f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (HTTP 403) - –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π"
                )
                return False
            else:
                self.log_test(
                    f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    response.json() if response.headers.get('content-type', '').startswith('application/json') else None
                )
                return False
                
        except Exception as e:
            self.log_test(f"–î–æ—Å—Ç—É–ø –∫ endpoint ({user_type})", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_response_structure(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ endpoint"""
        try:
            if user_type not in self.tokens:
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code != 200:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["items", "pagination", "summary"]
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                    data
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É pagination
            pagination = data.get("pagination", {})
            pagination_fields = ["current_page", "per_page", "total_items", "total_pages", "has_next", "has_prev"]
            missing_pagination_fields = [field for field in pagination_fields if field not in pagination]
            
            if missing_pagination_fields:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {missing_pagination_fields}",
                    data
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary
            summary = data.get("summary", {})
            summary_fields = ["fully_placed_requests", "total_units_placed"]
            missing_summary_fields = [field for field in summary_fields if field not in summary]
            
            if missing_summary_fields:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è summary: {missing_summary_fields}",
                    data
                )
                return False
            
            self.log_test(
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                True,
                f"–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data['items'])}, –°—Ç—Ä–∞–Ω–∏—Ü: {pagination['total_pages']}"
            )
            return True
            
        except Exception as e:
            self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_item_fields(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞"""
        try:
            if user_type not in self.tokens:
                self.log_test("–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code != 200:
                self.log_test(
                    "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
            data = response.json()
            items = data.get("items", [])
            
            if not items:
                self.log_test(
                    "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    True,
                    "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫)"
                )
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            item = items[0]
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            required_item_fields = [
                "sender_full_name", "sender_phone", "sender_address",
                "recipient_full_name", "recipient_phone", "recipient_address",
                "individual_units", "progress_text"
            ]
            
            missing_item_fields = [field for field in required_item_fields if field not in item]
            
            if missing_item_fields:
                self.log_test(
                    "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ: {missing_item_fields}",
                    item
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units
            individual_units = item.get("individual_units", [])
            if individual_units:
                unit = individual_units[0]
                required_unit_fields = ["individual_number", "is_placed", "placement_info"]
                missing_unit_fields = [field for field in required_unit_fields if field not in unit]
                
                if missing_unit_fields:
                    self.log_test(
                        "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ individual_units: {missing_unit_fields}",
                        unit
                    )
                    return False
            
            self.log_test(
                "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                True,
                f"–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö. –ü—Ä–æ–≤–µ—Ä–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å {len(individual_units)} individual_units"
            )
            return True
            
        except Exception as e:
            self.log_test("–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_pagination(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            if user_type not in self.tokens:
                self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            
            # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å per_page=5
            response1 = self.session.get(
                f"{BACKEND_URL}/operator/cargo/fully-placed?page=1&per_page=5",
                headers=headers
            )
            
            if response1.status_code != 200:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"HTTP {response1.status_code}: {response1.text}"
                )
                return False
            
            data1 = response1.json()
            pagination1 = data1.get("pagination", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            if pagination1.get("current_page") != 1:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 1, –ø–æ–ª—É—á–µ–Ω–æ {pagination1.get('current_page')}"
                )
                return False
            
            if pagination1.get("per_page") != 5:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: –æ–∂–∏–¥–∞–ª–æ—Å—å 5, –ø–æ–ª—É—á–µ–Ω–æ {pagination1.get('per_page')}"
                )
                return False
            
            # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã)
            total_items = pagination1.get("total_items", 0)
            if total_items > 5:
                response2 = self.session.get(
                    f"{BACKEND_URL}/operator/cargo/fully-placed?page=2&per_page=5",
                    headers=headers
                )
                
                if response2.status_code == 200:
                    data2 = response2.json()
                    pagination2 = data2.get("pagination", {})
                    
                    if pagination2.get("current_page") != 2:
                        self.log_test(
                            "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å 2, –ø–æ–ª—É—á–µ–Ω–æ {pagination2.get('current_page')}"
                        )
                        return False
            
            self.log_test(
                "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                True,
                f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items}, —Å—Ç—Ä–∞–Ω–∏—Ü: {pagination1.get('total_pages', 0)}"
            )
            return True
            
        except Exception as e:
            self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_data_consistency(self, user_type: str = "warehouse_operator") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if user_type not in self.tokens:
                self.log_test("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code != 200:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
            data = response.json()
            items = data.get("items", [])
            
            if not items:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
                )
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            inconsistencies = []
            
            for i, item in enumerate(items):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ progress_text —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º
                total_units = item.get("total_units", 0)
                placed_units = item.get("placed_units", 0)
                progress_text = item.get("progress_text", "")
                expected_progress = f"–†–∞–∑–º–µ—â–µ–Ω–æ: {placed_units}/{total_units}"
                
                if progress_text != expected_progress:
                    inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}: progress_text '{progress_text}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É '{expected_progress}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ is_fully_placed = True
                if not item.get("is_fully_placed", False):
                    inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}: is_fully_placed –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç total_units
                individual_units = item.get("individual_units", [])
                if len(individual_units) != total_units:
                    inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units ({len(individual_units)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç total_units ({total_units})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ individual_units —Ä–∞–∑–º–µ—â–µ–Ω—ã
                for j, unit in enumerate(individual_units):
                    if not unit.get("is_placed", False):
                        inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}, –µ–¥–∏–Ω–∏—Ü–∞ {j}: is_placed –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True")
                    
                    if not unit.get("placement_info"):
                        inconsistencies.append(f"–≠–ª–µ–º–µ–Ω—Ç {i}, –µ–¥–∏–Ω–∏—Ü–∞ {j}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç placement_info")
            
            if inconsistencies:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {'; '.join(inconsistencies)}"
                )
                return False
            
            self.log_test(
                "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö",
                True,
                f"–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            )
            return True
            
        except Exception as e:
            self.log_test("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoint /api/operator/cargo/fully-placed")
        print("=" * 80)
        print()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üìã –≠–¢–ê–ü 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("-" * 50)
        admin_auth = self.authenticate_user("admin")
        operator_auth = self.authenticate_user("warehouse_operator")
        print()
        
        if not (admin_auth or operator_auth):
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        print("üìã –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ê –î–õ–Ø –†–ê–ó–ù–´–• –†–û–õ–ï–ô")
        print("-" * 50)
        access_results = []
        if admin_auth:
            access_results.append(self.test_endpoint_access("admin"))
        if operator_auth:
            access_results.append(self.test_endpoint_access("warehouse_operator"))
        print()
        
        if not any(access_results):
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π —Ä–æ–ª–∏!")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        test_user = "warehouse_operator" if operator_auth else "admin"
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        print("üìã –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê")
        print("-" * 50)
        structure_test = self.test_response_structure(test_user)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("üìã –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ï–ô –≠–õ–ï–ú–ï–ù–¢–û–í")
        print("-" * 50)
        fields_test = self.test_item_fields(test_user)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        print("üìã –≠–¢–ê–ü 5: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò")
        print("-" * 50)
        pagination_test = self.test_pagination(test_user)
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        print("üìã –≠–¢–ê–ü 6: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        print("-" * 50)
        consistency_test = self.test_data_consistency(test_user)
        print()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        critical_tests = [structure_test, fields_test, pagination_test, consistency_test]
        success_rate = sum(1 for test in critical_tests if test) / len(critical_tests) * 100
        
        return success_rate >= 75  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ 75%+ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        successful_tests = [r for r in self.test_results if r["success"]]
        failed_tests = [r for r in self.test_results if not r["success"]]
        
        total_tests = len(self.test_results)
        success_count = len(successful_tests)
        success_rate = (success_count / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_tests)}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if failed_tests:
            print("‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for test in failed_tests:
                print(f"   ‚Ä¢ {test['test']}: {test['details']}")
            print()
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
        elif success_rate >= 75:
            print("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FullyPlacedCargoTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint /api/operator/cargo/fully-placed –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("üö® –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoint!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()