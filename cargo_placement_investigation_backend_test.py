#!/usr/bin/env python3
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ì—Ä—É–∑ 250101/01/02 –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–ü–†–û–ë–õ–ï–ú–ê:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏–ª –≥—Ä—É–∑ 250101/01/02 –∏–∑ –∑–∞—è–≤–∫–∏ 250101 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ë1-–ü2-–Ø5 –Ω–∞ —Å–∫–ª–∞–¥–µ 003 –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1, 
–Ω–æ –≥—Ä—É–∑ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —è—á–µ–µ–∫.

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –¥–ª—è –≥—Ä—É–∑–∞ 250101/01/02
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞ (is_placed=true, placement_info —Å–æ–¥–µ—Ä–∂–∏—Ç "–ë1-–ü2-–Ø5")
4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 003
5. –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä—É–∑–∞ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- placement_record –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è 250101/01/02 –Ω–∞ –ë1-–ü2-–Ø5
- operator_cargo –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å is_placed=true
- layout-with-cargo –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≥—Ä—É–∑ –≤ —è—á–µ–π–∫–µ –ë1-–ü2-–Ø5

–ö–†–ò–¢–ò–ß–ù–û: –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –¶–µ–ª–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
TARGET_CARGO = "250101/01/02"
TARGET_APPLICATION = "250101"
TARGET_POSITION = "–ë1-–ü2-–Ø5"
TARGET_WAREHOUSE_NAME = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
TARGET_WAREHOUSE_NUMBER = "003"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    print(f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: {WAREHOUSE_OPERATOR_PHONE}")
    print(f"   üîë –ü–∞—Ä–æ–ª—å: {WAREHOUSE_OPERATOR_PASSWORD}")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            print(f"   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {auth_token[:20]}...")
            print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('full_name')}")
            print(f"   üè∑Ô∏è –†–æ–ª—å: {user_info.get('role')}")
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def find_warehouse_id():
    """–ù–∞–π—Ç–∏ ID —Å–∫–ª–∞–¥–∞ 003 '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
    global warehouse_id
    
    print(f"\nüè¢ –ü–û–ò–°–ö –°–ö–õ–ê–î–ê: {TARGET_WAREHOUSE_NAME} (–Ω–æ–º–µ—Ä {TARGET_WAREHOUSE_NUMBER})")
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response or response.status_code != 200:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
        return False
    
    warehouses = response.json()
    print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
    
    for warehouse in warehouses:
        print(f"   üè¢ –°–∫–ª–∞–¥: {warehouse.get('name')} (ID: {warehouse.get('id')}, –Ω–æ–º–µ—Ä: {warehouse.get('warehouse_id_number')})")
        
        # –ò—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å–∫–ª–∞–¥–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        if (warehouse.get('warehouse_id_number') == TARGET_WAREHOUSE_NUMBER or 
            TARGET_WAREHOUSE_NAME in warehouse.get('name', '')):
            warehouse_id = warehouse.get('id')
            print(f"   ‚úÖ –ù–ê–ô–î–ï–ù –¶–ï–õ–ï–í–û–ô –°–ö–õ–ê–î: {warehouse.get('name')}")
            print(f"      - ID: {warehouse_id}")
            print(f"      - –ù–æ–º–µ—Ä: {warehouse.get('warehouse_id_number')}")
            print(f"      - –ê–¥—Ä–µ—Å: {warehouse.get('location')}")
            return True
    
    print(f"   ‚ùå –°–∫–ª–∞–¥ {TARGET_WAREHOUSE_NAME} (–Ω–æ–º–µ—Ä {TARGET_WAREHOUSE_NUMBER}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return False

def test_placement_records_check():
    """–≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –¥–ª—è –≥—Ä—É–∑–∞ 250101/01/02"""
    
    print(f"\nüìã –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –¥–ª—è –≥—Ä—É–∑–∞ {TARGET_CARGO}")
    print(f"   üéØ –ò—â–µ–º placement_record –¥–ª—è individual_number: {TARGET_CARGO}")
    print(f"   üìç –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è: {TARGET_POSITION}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö placement records (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π endpoint)
    # –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ layout-with-cargo API
    
    if not warehouse_id:
        if not find_warehouse_id():
            return log_test("–ü–æ–∏—Å–∫ placement_records", False, "–ù–µ –Ω–∞–π–¥–µ–Ω warehouse_id")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ layout-with-cargo API
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ layout", response_time)
    
    if response.status_code != 200:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records", False, f"HTTP {response.status_code}: {error_detail}", response_time)
    
    layout_data = response.json()
    print(f"   üìä –ü–æ–ª—É—á–µ–Ω layout —Å–∫–ª–∞–¥–∞ —Å {len(layout_data.get('blocks', []))} –±–ª–æ–∫–∞–º–∏")
    
    # –ò—â–µ–º –≥—Ä—É–∑ –≤ layout
    found_cargo = False
    cargo_location = None
    
    for block in layout_data.get('blocks', []):
        block_num = block.get('block_number')
        for shelf in block.get('shelves', []):
            shelf_num = shelf.get('shelf_number')
            for cell in shelf.get('cells', []):
                cell_num = cell.get('cell_number')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–∑—ã –≤ —è—á–µ–π–∫–µ
                for cargo in cell.get('cargo', []):
                    individual_number = cargo.get('individual_number')
                    if individual_number == TARGET_CARGO:
                        found_cargo = True
                        cargo_location = f"–ë{block_num}-–ü{shelf_num}-–Ø{cell_num}"
                        
                        print(f"   ‚úÖ –ì–†–£–ó –ù–ê–ô–î–ï–ù –í LAYOUT!")
                        print(f"      - Individual number: {individual_number}")
                        print(f"      - –ü–æ–∑–∏—Ü–∏—è: {cargo_location}")
                        print(f"      - Cargo name: {cargo.get('cargo_name', 'N/A')}")
                        print(f"      - Sender: {cargo.get('sender_full_name', 'N/A')}")
                        print(f"      - Placed by: {cargo.get('placed_by_operator', 'N/A')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏
                        if cargo_location == TARGET_POSITION:
                            details = f"–ì—Ä—É–∑ {TARGET_CARGO} –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ {cargo_location}"
                            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records", True, details, response_time)
                        else:
                            details = f"–ì—Ä—É–∑ {TARGET_CARGO} –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ {cargo_location}, –Ω–æ –æ–∂–∏–¥–∞–ª—Å—è –≤ {TARGET_POSITION}"
                            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records", False, details, response_time)
    
    if not found_cargo:
        print(f"   ‚ùå –ì–†–£–ó {TARGET_CARGO} –ù–ï –ù–ê–ô–î–ï–ù –í LAYOUT!")
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≥—Ä—É–∑—ã –≤ layout –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–∑—ã
        total_cargo = 0
        for block in layout_data.get('blocks', []):
            for shelf in block.get('shelves', []):
                for cell in shelf.get('cells', []):
                    cargo_count = len(cell.get('cargo', []))
                    if cargo_count > 0:
                        total_cargo += cargo_count
                        print(f"      - –ë{block.get('block_number')}-–ü{shelf.get('shelf_number')}-–Ø{cell.get('cell_number')}: {cargo_count} –≥—Ä—É–∑–æ–≤")
                        for cargo in cell.get('cargo', []):
                            print(f"        * {cargo.get('individual_number', 'N/A')} - {cargo.get('cargo_name', 'N/A')}")
        
        print(f"   üìä –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ layout: {total_cargo}")
        details = f"–ì—Ä—É–∑ {TARGET_CARGO} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ layout. –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ: {total_cargo}"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records", False, details, response_time)

def test_operator_cargo_status():
    """–≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞"""
    
    print(f"\nüîç –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≥—Ä—É–∑–∞ {TARGET_CARGO}")
    print(f"   üéØ –ò—â–µ–º is_placed=true –∏ placement_info —Å–æ–¥–µ—Ä–∂–∏—Ç '{TARGET_POSITION}'")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—à–µ–≥–æ –≥—Ä—É–∑–∞
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement")
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code != 200:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)
    
    data = response.json()
    cargo_list = data.get('items', [])
    
    print(f"   üìã –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(cargo_list)}")
    
    # –ò—â–µ–º –Ω–∞—à –≥—Ä—É–∑ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    found_in_available = False
    for cargo in cargo_list:
        cargo_number = cargo.get('cargo_number')
        if cargo_number == TARGET_APPLICATION:  # –ò—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
            found_in_available = True
            print(f"   ‚ö†Ô∏è –ó–ê–Ø–í–ö–ê {TARGET_APPLICATION} –ù–ê–ô–î–ï–ù–ê –í –°–ü–ò–°–ö–ï –î–û–°–¢–£–ü–ù–´–• –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø!")
            print(f"      - –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≥—Ä—É–∑ –ù–ï –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_items
            individual_items = cargo.get('individual_items', [])
            for item in individual_items:
                if item.get('individual_number') == TARGET_CARGO:
                    is_placed = item.get('is_placed', False)
                    placement_info = item.get('placement_info', '')
                    
                    print(f"      - Individual number: {TARGET_CARGO}")
                    print(f"      - is_placed: {is_placed}")
                    print(f"      - placement_info: {placement_info}")
                    
                    if is_placed and TARGET_POSITION in placement_info:
                        details = f"–ì—Ä—É–∑ {TARGET_CARGO} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≤ {placement_info}"
                        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", True, details, response_time)
                    elif is_placed:
                        details = f"–ì—Ä—É–∑ {TARGET_CARGO} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π, –Ω–æ placement_info='{placement_info}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '{TARGET_POSITION}'"
                        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", False, details, response_time)
                    else:
                        details = f"–ì—Ä—É–∑ {TARGET_CARGO} –ù–ï –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π (is_placed={is_placed})"
                        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", False, details, response_time)
            break
    
    if not found_in_available:
        print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        print(f"   üîç –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
        response2, response_time2 = make_request("GET", "/operator/cargo/fully-placed")
        
        if response2 and response2.status_code == 200:
            fully_placed_data = response2.json()
            fully_placed_list = fully_placed_data.get('items', [])
            
            print(f"   üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {len(fully_placed_list)}")
            
            for cargo in fully_placed_list:
                cargo_number = cargo.get('cargo_number')
                if cargo_number == TARGET_APPLICATION:
                    print(f"   ‚úÖ –ó–ê–Ø–í–ö–ê {TARGET_APPLICATION} –ù–ê–ô–î–ï–ù–ê –í –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–´–•!")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units
                    individual_units = cargo.get('individual_units', [])
                    for unit in individual_units:
                        if unit.get('individual_number') == TARGET_CARGO:
                            status = unit.get('status')
                            placement_info = unit.get('placement_info', '')
                            
                            print(f"      - Individual number: {TARGET_CARGO}")
                            print(f"      - status: {status}")
                            print(f"      - placement_info: {placement_info}")
                            
                            if status == 'placed' and TARGET_POSITION in placement_info:
                                details = f"–ì—Ä—É–∑ {TARGET_CARGO} –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –ø–æ–∑–∏—Ü–∏–µ–π {placement_info}"
                                return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", True, details, response_time + response_time2)
                            else:
                                details = f"–ì—Ä—É–∑ {TARGET_CARGO} –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, –Ω–æ status='{status}', placement_info='{placement_info}'"
                                return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", False, details, response_time + response_time2)
                    break
        
        details = f"–ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –Ω–∏ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å—Ç–∞—Ç—É—Å–∞", False, details, response_time)

def test_layout_with_cargo_api():
    """–≠–¢–ê–ü 4: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API layout-with-cargo"""
    
    print(f"\nüó∫Ô∏è –≠–¢–ê–ü 4: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_NUMBER}")
    print(f"   üéØ –ò—â–µ–º –≥—Ä—É–∑ {TARGET_CARGO} –≤ —è—á–µ–π–∫–µ {TARGET_POSITION}")
    
    if not warehouse_id:
        if not find_warehouse_id():
            return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo", False, "–ù–µ –Ω–∞–π–¥–µ–Ω warehouse_id")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code != 200:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo", False, f"HTTP {response.status_code}: {error_detail}", response_time)
    
    layout_data = response.json()
    
    print(f"   üìä –ê–ù–ê–õ–ò–ó LAYOUT API:")
    print(f"      - –ë–ª–æ–∫–æ–≤: {len(layout_data.get('blocks', []))}")
    
    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É –ë1-–ü2-–Ø5
    target_block = 1
    target_shelf = 2  
    target_cell = 5
    
    found_target_cell = False
    target_cell_cargo = []
    
    for block in layout_data.get('blocks', []):
        if block.get('block_number') == target_block:
            print(f"      - –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –ë{target_block}")
            
            for shelf in block.get('shelves', []):
                if shelf.get('shelf_number') == target_shelf:
                    print(f"      - –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª–∫–∞ –ü{target_shelf}")
                    
                    for cell in shelf.get('cells', []):
                        if cell.get('cell_number') == target_cell:
                            found_target_cell = True
                            target_cell_cargo = cell.get('cargo', [])
                            
                            print(f"      - –ù–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ –Ø{target_cell}")
                            print(f"      - –ì—Ä—É–∑–æ–≤ –≤ —è—á–µ–π–∫–µ: {len(target_cell_cargo)}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≥—Ä—É–∑ –≤ —è—á–µ–π–∫–µ
                            for i, cargo in enumerate(target_cell_cargo):
                                individual_number = cargo.get('individual_number')
                                cargo_name = cargo.get('cargo_name', 'N/A')
                                sender = cargo.get('sender_full_name', 'N/A')
                                
                                print(f"         {i+1}. {individual_number} - {cargo_name} (–æ—Ç {sender})")
                                
                                if individual_number == TARGET_CARGO:
                                    print(f"         ‚úÖ –ù–ê–ô–î–ï–ù –¶–ï–õ–ï–í–û–ô –ì–†–£–ó {TARGET_CARGO}!")
                                    details = f"–ì—Ä—É–∑ {TARGET_CARGO} –Ω–∞–π–¥–µ–Ω –≤ —è—á–µ–π–∫–µ {TARGET_POSITION} —á–µ—Ä–µ–∑ layout-with-cargo API"
                                    return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo", True, details, response_time)
                            
                            break
                    break
            break
    
    if not found_target_cell:
        print(f"   ‚ùå –Ø—á–µ–π–∫–∞ {TARGET_POSITION} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ layout")
        details = f"–Ø—á–µ–π–∫–∞ {TARGET_POSITION} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∫–ª–∞–¥–∞"
        return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo", False, details, response_time)
    
    if len(target_cell_cargo) == 0:
        print(f"   ‚ö†Ô∏è –Ø—á–µ–π–∫–∞ {TARGET_POSITION} –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø—É—Å—Ç–∞")
        details = f"–Ø—á–µ–π–∫–∞ {TARGET_POSITION} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑–æ–≤"
        return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo", False, details, response_time)
    
    print(f"   ‚ùå –ì—Ä—É–∑ {TARGET_CARGO} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —è—á–µ–π–∫–µ {TARGET_POSITION}")
    cargo_list = [cargo.get('individual_number', 'N/A') for cargo in target_cell_cargo]
    details = f"–Ø—á–µ–π–∫–∞ {TARGET_POSITION} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–∏–µ –≥—Ä—É–∑—ã: {', '.join(cargo_list)}"
    return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo", False, details, response_time)

def test_root_cause_analysis():
    """–≠–¢–ê–ü 5: –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã"""
    
    print(f"\nüîç –≠–¢–ê–ü 5: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
    print(f"   üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—á–µ–º—É –≥—Ä—É–∑ {TARGET_CARGO} –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    placement_test = next((r for r in test_results if "placement_records" in r["test"]), None)
    operator_cargo_test = next((r for r in test_results if "operator_cargo" in r["test"]), None)
    layout_test = next((r for r in test_results if "layout-with-cargo" in r["test"]), None)
    
    issues_found = []
    recommendations = []
    
    print(f"   üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    if placement_test:
        print(f"      - Placement records: {'‚úÖ OK' if placement_test['success'] else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
        if not placement_test['success']:
            issues_found.append("–ì—Ä—É–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ placement_records –∏–ª–∏ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ placement_record –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≥—Ä—É–∑–∞")
    
    if operator_cargo_test:
        print(f"      - Operator cargo status: {'‚úÖ OK' if operator_cargo_test['success'] else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
        if not operator_cargo_test['success']:
            issues_found.append("–°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –≤ operator_cargo –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–º—É")
            recommendations.append("–û–±–Ω–æ–≤–∏—Ç—å is_placed=true –∏ placement_info –≤ operator_cargo")
    
    if layout_test:
        print(f"      - Layout API: {'‚úÖ OK' if layout_test['success'] else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
        if not layout_test['success']:
            issues_found.append("API layout-with-cargo –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–∑ –≤ –æ–∂–∏–¥–∞–µ–º–æ–π —è—á–µ–π–∫–µ")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É placement_records –∏ layout API")
    
    print(f"\n   üö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(issues_found)}):")
    for i, issue in enumerate(issues_found, 1):
        print(f"      {i}. {issue}")
    
    print(f"\n   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ ({len(recommendations)}):")
    for i, rec in enumerate(recommendations, 1):
        print(f"      {i}. {rec}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É
    if len(issues_found) == 0:
        details = "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≥—Ä—É–∑ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ"
        return log_test("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã", True, details)
    elif len(issues_found) == 1:
        details = f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: {issues_found[0]}"
        return log_test("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã", False, details)
    else:
        details = f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {len(issues_found)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        return log_test("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã", False, details)

def print_investigation_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*100)
    print("üö® –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
    print("="*100)
    
    print(f"üéØ –¶–ï–õ–¨ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
    print(f"   –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É –≥—Ä—É–∑ {TARGET_CARGO} –∏–∑ –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}")
    print(f"   –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {TARGET_POSITION}")
    print(f"   –≤ —Å–∫–ª–∞–¥–µ {TARGET_WAREHOUSE_NUMBER} '{TARGET_WAREHOUSE_NAME}'")
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
    print(f"   - –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {total_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
    print(f"   - –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–¢–ê–ü–û–í:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      üìù {result['details']}")
    
    print(f"\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    auth_success = any(r["success"] for r in test_results if "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in r["test"])
    placement_success = any(r["success"] for r in test_results if "placement_records" in r["test"])
    operator_cargo_success = any(r["success"] for r in test_results if "operator_cargo" in r["test"])
    layout_success = any(r["success"] for r in test_results if "layout-with-cargo" in r["test"])
    
    if auth_success:
        print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    if placement_success:
        print(f"   ‚úÖ –ì—Ä—É–∑ {TARGET_CARGO} –Ω–∞–π–¥–µ–Ω –≤ placement_records –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
    else:
        print(f"   ‚ùå –ì—Ä—É–∑ {TARGET_CARGO} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ placement_records –∏–ª–∏ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
    
    if operator_cargo_success:
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –≤ operator_cargo –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (is_placed=true)")
    else:
        print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≥—Ä—É–∑–∞ –≤ operator_cargo")
    
    if layout_success:
        print(f"   ‚úÖ API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–∑ –≤ —è—á–µ–π–∫–µ {TARGET_POSITION}")
    else:
        print(f"   ‚ùå API layout-with-cargo –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–∑ –≤ –æ–∂–∏–¥–∞–µ–º–æ–π —è—á–µ–π–∫–µ")
    
    print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
    if success_rate >= 80:
        print("   üéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!")
        print(f"   üìç –ì—Ä—É–∑ {TARGET_CARGO} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ")
        print("   üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤—Å–µ –µ—â–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ frontend –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    elif success_rate >= 50:
        print("   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê")
        print("   üìç –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥—Ä—É–≥–∏—Ö")
        print("   üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
    else:
        print("   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
        print(f"   üìç –ì—Ä—É–∑ {TARGET_CARGO} –ù–ï —Ä–∞–∑–º–µ—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ")
        print("   üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    print(f"\nüõ†Ô∏è –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    if failed_tests > 0:
        print("   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ backend —Å–∏—Å—Ç–µ–º–µ")
        print("   2. –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É placement_records –∏ operator_cargo")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API layout-with-cargo")
        print("   4. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    else:
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ì—Ä—É–∑ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    print(f"üì¶ –¶–µ–ª–µ–≤–æ–π –≥—Ä—É–∑: {TARGET_CARGO} –∏–∑ –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}")
    print(f"üìç –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è: {TARGET_POSITION}")
    print(f"üè¢ –°–∫–ª–∞–¥: {TARGET_WAREHOUSE_NUMBER} '{TARGET_WAREHOUSE_NAME}'")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    investigation_steps = [
        test_warehouse_operator_auth,
        test_placement_records_check,
        test_operator_cargo_status,
        test_layout_with_cargo_api,
        test_root_cause_analysis
    ]
    
    for step_func in investigation_steps:
        try:
            step_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {step_func.__name__}: {e}")
            log_test(step_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    print_investigation_summary()

if __name__ == "__main__":
    main()