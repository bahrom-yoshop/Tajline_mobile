#!/usr/bin/env python3
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å –≥—Ä—É–∑":
1. –ó–∞—è–≤–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
2. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º 100012/01 
3. –í —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏
4. –ù–æ–º–µ—Ä —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –≥—Ä—É–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä—É –ø—Ä–∏–Ω—è—Ç–æ–π –∑–∞—è–≤–∫–∏

–¶–ï–õ–¨: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é complete_cargo_processing –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import json
import os
from datetime import datetime
import time

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-system.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class CargoDuplicationTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.user_info = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": "+79999888777",
                "password": "admin123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.user_info = user_response.json()
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.user_info.get('full_name')} (—Ä–æ–ª—å: {self.user_info.get('role')})")
                    return True
                    
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}", "ERROR")
            return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def get_notifications(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            self.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
            
            if response.status_code == 200:
                data = response.json()
                notifications = data.get('notifications', [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ID
                id_counts = {}
                for notif in notifications:
                    notif_id = notif.get('id')
                    if notif_id in id_counts:
                        id_counts[notif_id] += 1
                    else:
                        id_counts[notif_id] = 1
                
                duplicated_ids = {k: v for k, v in id_counts.items() if v > 1}
                if duplicated_ids:
                    self.log(f"üö® –ù–ê–ô–î–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï ID –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:")
                    for notif_id, count in duplicated_ids.items():
                        self.log(f"   - ID {notif_id}: {count} –∫–æ–ø–∏–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if notifications and len(notifications) > 0:
                    first_notif = notifications[0]
                    self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {list(first_notif.keys())}")
                    self.log(f"üéØ –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ID={first_notif.get('id')}, —Å—Ç–∞—Ç—É—Å={first_notif.get('status')}, –Ω–æ–º–µ—Ä={first_notif.get('request_number')}")
                
                return notifications
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code} - {response.text}", "ERROR")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}", "ERROR")
            return []
    
    def test_complete_endpoint_duplication(self, notification_id):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ /complete endpoint"""
        try:
            self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /complete –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –î–û –≤—ã–∑–æ–≤–∞ complete
            before_count = self.get_total_cargo_count()
            self.log(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –î–û /complete: {before_count}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è complete
            complete_data = {
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
                        "weight": 10.0,
                        "price_per_kg": 100.0
                    }
                ],
                "description": "–¢–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤",
                "payment_method": "cash",
                "payment_amount": 1000.0
            }
            
            self.log(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ /complete...")
            
            # –í—ã–∑—ã–≤–∞–µ–º complete endpoint
            response = self.session.post(
                f"{API_BASE}/operator/warehouse-notifications/{notification_id}/complete",
                json=complete_data
            )
            
            if response.status_code == 200:
                result = response.json()
                self.log(f"‚úÖ Complete endpoint –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –ü–û–°–õ–ï –≤—ã–∑–æ–≤–∞ complete
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                after_count = self.get_total_cargo_count()
                self.log(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –ü–û–°–õ–ï /complete: {after_count}")
                
                created_count = after_count - before_count
                self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–∑–æ–≤ –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ /complete: {created_count}")
                
                if created_count > 1:
                    self.log(f"üö® –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ù–ê–ô–î–ï–ù–û! –°–æ–∑–¥–∞–Ω–æ {created_count} –≥—Ä—É–∑–æ–≤ –≤–º–µ—Å—Ç–æ 1!", "ERROR")
                    return False, created_count
                elif created_count == 1:
                    self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: —Å–æ–∑–¥–∞–Ω 1 –≥—Ä—É–∑")
                    return True, created_count
                else:
                    self.log("‚ö†Ô∏è –ì—Ä—É–∑—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã", "WARNING")
                    return True, created_count
                    
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ complete endpoint: {response.status_code} - {response.text}", "ERROR")
                return False, 0
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ complete: {str(e)}", "ERROR")
            return False, 0
    
    def get_total_cargo_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏—é
            response = self.session.get(f"{API_BASE}/operator/cargo/list?per_page=1")
            if response.status_code == 200:
                data = response.json()
                return data.get('pagination', {}).get('total_count', 0)
            return 0
        except:
            return 0
    
    def check_placement_list_duplicates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', [])
                
                self.log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º –≥—Ä—É–∑–æ–≤
                cargo_numbers = {}
                for item in items:
                    cargo_number = item.get('cargo_number', 'N/A')
                    if cargo_number in cargo_numbers:
                        cargo_numbers[cargo_number] += 1
                    else:
                        cargo_numbers[cargo_number] = 1
                
                # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                duplicates = {k: v for k, v in cargo_numbers.items() if v > 1}
                
                if duplicates:
                    self.log(f"üö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ –í –°–ü–ò–°–ö–ï –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
                    for number, count in duplicates.items():
                        self.log(f"   - –ù–æ–º–µ—Ä {number}: {count} –∫–æ–ø–∏–π")
                    return False, duplicates
                else:
                    self.log("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return True, {}
                    
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {response.status_code}", "ERROR")
                return False, {}
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}", "ERROR")
            return False, {}
    
    def analyze_cargo_numbers(self):
        """–ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.log("üîç –ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤...")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/list?per_page=20&sort_by=created_at&sort_order=desc")
            if response.status_code == 200:
                data = response.json()
                recent_cargos = data.get('items', [])
                
                self.log(f"üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_cargos)} –≥—Ä—É–∑–æ–≤:")
                
                cargo_numbers = []
                for cargo in recent_cargos:
                    cargo_number = cargo.get('cargo_number', 'N/A')
                    created_at = cargo.get('created_at', 'N/A')
                    cargo_numbers.append(cargo_number)
                    self.log(f"   - {cargo_number} (—Å–æ–∑–¥–∞–Ω: {created_at})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                duplicates = {}
                for number in cargo_numbers:
                    if number in duplicates:
                        duplicates[number] += 1
                    else:
                        duplicates[number] = 1
                
                duplicate_numbers = {k: v for k, v in duplicates.items() if v > 1}
                if duplicate_numbers:
                    self.log(f"üö® –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –ù–û–ú–ï–†–ê –ì–†–£–ó–û–í:")
                    for number, count in duplicate_numbers.items():
                        self.log(f"   - {number}: {count} –∫–æ–ø–∏–π")
                    return False, duplicate_numbers
                else:
                    self.log("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return True, {}
                    
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤: {response.status_code}", "ERROR")
                return False, {}
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–º–µ—Ä–æ–≤: {str(e)}", "ERROR")
            return False, {}
    
    def run_full_duplication_test(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.log("üöÄ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø")
            self.log("=" * 80)
            
            # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate_admin():
                return False
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = self.get_notifications()
            if not notifications:
                self.log("‚ùå –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
                return False
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            self.log("\nüìä –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–£–ë–õ–ò–ö–ê–¢–û–í:")
            placement_ok, placement_dups = self.check_placement_list_duplicates()
            cargo_ok, cargo_dups = self.analyze_cargo_numbers()
            
            # 4. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_notification = None
            for notif in notifications:
                if isinstance(notif, dict) and notif.get('status') == 'pending_acceptance':
                    test_notification = notif
                    break
            
            if not test_notification:
                # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
                for notif in notifications:
                    if isinstance(notif, dict):
                        test_notification = notif
                        break
            
            if not test_notification:
                self.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
                return False
            
            notification_id = test_notification.get('id')
            notification_status = test_notification.get('status')
            request_number = test_notification.get('request_number', 'N/A')
            
            self.log(f"\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:")
            self.log(f"   - ID: {notification_id}")
            self.log(f"   - –°—Ç–∞—Ç—É—Å: {notification_status}")
            self.log(f"   - –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_number}")
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ complete endpoint (–µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å—Ç–∞—Ç—É—Å–µ)
            if notification_status in ['in_processing', 'pending_acceptance']:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å pending_acceptance, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º
                if notification_status == 'pending_acceptance':
                    self.log(f"\n‚úã –ü—Ä–∏–Ω–∏–º–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
                    accept_response = self.session.post(f"{API_BASE}/operator/warehouse-notifications/{notification_id}/accept")
                    if accept_response.status_code == 200:
                        self.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
                        time.sleep(1)
                    else:
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è: {accept_response.status_code}", "ERROR")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º complete
                self.log(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ COMPLETE:")
                complete_ok, created_count = self.test_complete_endpoint_duplication(notification_id)
                
                if not complete_ok:
                    self.log(f"üö® –ü–†–û–ë–õ–ï–ú–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê! –°–æ–∑–¥–∞–Ω–æ {created_count} –≥—Ä—É–∑–æ–≤", "ERROR")
                
            else:
                self.log(f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–µ {notification_status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç complete", "WARNING")
            
            # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            self.log(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í:")
            final_placement_ok, final_placement_dups = self.check_placement_list_duplicates()
            final_cargo_ok, final_cargo_dups = self.analyze_cargo_numbers()
            
            self.log("=" * 80)
            self.log("üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø")
            
            if not placement_ok or not cargo_ok or not final_placement_ok or not final_cargo_ok:
                self.log("üö® –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û!", "ERROR")
                return False
            else:
                self.log("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                return True
                
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ: {str(e)}", "ERROR")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ó–ê–Ø–í–û–ö –í TAJLINE.TJ")
    print("=" * 80)
    print("–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–Ω—è—Ç—å –≥—Ä—É–∑' —Å–æ–∑–¥–∞—é—Ç—Å—è –¥—É–±–ª–∏–∫–∞—Ç—ã")
    print("–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ complete_cargo_processing")
    print("=" * 80)
    
    tester = CargoDuplicationTester()
    
    try:
        success = tester.run_full_duplication_test()
        
        print("\n" + "=" * 80)
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 80)
        
        if success:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print("üö® –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()