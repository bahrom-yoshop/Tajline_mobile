#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö placement_records –∏ operator_cargo

**–¶–ï–õ–¨:** –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä—É–∑–æ–≤

**–¢–ï–°–¢–´:**
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ operator_cargo –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
4. –ê–Ω–∞–ª–∏–∑ individual_items –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": WAREHOUSE_OPERATOR_PHONE,
    "password": WAREHOUSE_OPERATOR_PASSWORD
}

# Global variables
warehouse_operator_token = None
test_results = []
warehouse_id = None

def log_test_result(test_name, success, details, response_time_ms=None):
    """Log test result with details"""
    status = "‚úÖ PASSED" if success else "‚ùå FAILED"
    result = {
        "test": test_name,
        "status": status,
        "success": success,
        "details": details,
        "timestamp": datetime.now().isoformat(),
        "response_time_ms": response_time_ms
    }
    test_results.append(result)
    
    time_info = f" ({response_time_ms}ms)" if response_time_ms else ""
    print(f"{status}: {test_name}{time_info}")
    print(f"   Details: {details}")
    print()

def make_request(method, endpoint, data=None, headers=None, token=None):
    """Make HTTP request with error handling and timing"""
    url = f"{BACKEND_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if token:
        headers["Authorization"] = f"Bearer {token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        
        return response, response_time_ms
    
    except requests.exceptions.RequestException as e:
        response_time_ms = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time_ms

def test_warehouse_operator_authentication():
    """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global warehouse_operator_token
    
    response, response_time = make_request("POST", "/auth/login", WAREHOUSE_OPERATOR_CREDENTIALS)
    
    if not response:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
            False, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            warehouse_operator_token = data.get("access_token")
            user_info = data.get("user", {})
            
            if warehouse_operator_token and user_info.get("role") == "warehouse_operator":
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('role')}",
                    response_time
                )
                return False
        except Exception as e:
            log_test_result(
                "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_get_warehouse_id():
    """Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id"""
    global warehouse_id
    
    response, response_time = make_request("GET", "/operator/warehouses", token=warehouse_operator_token)
    
    if not response:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            warehouses = response.json()
            
            if warehouses:
                moscow_warehouse = None
                for warehouse in warehouses:
                    if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                        moscow_warehouse = warehouse
                        warehouse_id = warehouse.get("id")
                        break
                
                if moscow_warehouse:
                    log_test_result(
                        "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                        True,
                        f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '{moscow_warehouse.get('name')}' (ID: {warehouse_id})",
                        response_time
                    )
                    return True
                else:
                    log_test_result(
                        "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                        False,
                        f"–°–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        response_time
                    )
                    return False
            else:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_check_fully_placed_cargo():
    """Test 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ 25082235"""
    
    response, response_time = make_request("GET", "/operator/cargo/fully-placed?page=1&per_page=50", token=warehouse_operator_token)
    
    if not response:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            items = data.get("items", [])
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 25082235
            target_cargo = None
            for item in items:
                if item.get("cargo_number", "").startswith("25082235"):
                    target_cargo = item
                    break
            
            if target_cargo:
                individual_units = target_cargo.get("individual_units", [])
                placed_units = [unit for unit in individual_units if unit.get("status") == "placed"]
                
                placed_details = []
                for unit in placed_units:
                    individual_number = unit.get("individual_number", "")
                    placement_info = unit.get("placement_info", "")
                    placed_details.append(f"{individual_number} -> {placement_info}")
                
                log_test_result(
                    "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API",
                    True,
                    f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ {target_cargo.get('cargo_number')} —Å {len(placed_units)} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏: {placed_details}",
                    response_time
                )
                return True, target_cargo
            else:
                cargo_numbers = [item.get("cargo_number", "") for item in items[:5]]
                log_test_result(
                    "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API",
                    False,
                    f"–ó–∞—è–≤–∫–∞ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {len(items)} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ü—Ä–∏–º–µ—Ä—ã: {cargo_numbers}",
                    response_time
                )
                return False, None
                
        except Exception as e:
            log_test_result(
                "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False, None
    else:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False, None

def test_check_individual_units_for_placement():
    """Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ individual-units-for-placement API"""
    
    response, response_time = make_request("GET", "/operator/cargo/individual-units-for-placement?page=1&per_page=50", token=warehouse_operator_token)
    
    if not response:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ individual-units-for-placement API",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            items = data.get("items", [])
            
            # –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∑–∞—è–≤–∫–∏ 25082235
            target_units = []
            for item in items:
                individual_number = item.get("individual_number", "")
                if individual_number.startswith("25082235"):
                    target_units.append({
                        "individual_number": individual_number,
                        "status": item.get("status", ""),
                        "is_placed": item.get("is_placed", False),
                        "placement_info": item.get("placement_info", "")
                    })
            
            if target_units:
                log_test_result(
                    "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ individual-units-for-placement API",
                    True,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(target_units)} –µ–¥–∏–Ω–∏—Ü –∑–∞—è–≤–∫–∏ 25082235: {target_units}",
                    response_time
                )
                return True
            else:
                sample_units = [item.get("individual_number", "") for item in items[:5]]
                log_test_result(
                    "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ individual-units-for-placement API",
                    False,
                    f"–ï–¥–∏–Ω–∏—Ü—ã –∑–∞—è–≤–∫–∏ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ {len(items)} –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä—ã: {sample_units}",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ individual-units-for-placement API",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ individual-units-for-placement API",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_layout_with_cargo_diagnosis():
    """Test 5: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo API"""
    
    if not warehouse_id:
        log_test_result(
            "5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo API",
            False,
            "warehouse_id –Ω–µ –ø–æ–ª—É—á–µ–Ω",
            0
        )
        return False
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo", token=warehouse_operator_token)
    
    if not response:
        log_test_result(
            "5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo API",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            layout_data = response.json()
            
            total_cells = layout_data.get("total_cells", 0)
            occupied_cells = layout_data.get("occupied_cells", 0)
            total_cargo = layout_data.get("total_cargo", 0)
            
            # –ò—â–µ–º –ª—é–±—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
            found_cargo = []
            warehouse_info = layout_data.get("warehouse", {})
            layout = warehouse_info.get("layout", {})
            blocks = layout.get("blocks", [])
            
            for block in blocks:
                shelves = block.get("shelves", [])
                for shelf in shelves:
                    cells = shelf.get("cells", [])
                    for cell in cells:
                        if cell.get("is_occupied", False):
                            cargo_list = cell.get("cargo", [])
                            location_code = cell.get("location_code", "")
                            for cargo_info in cargo_list:
                                individual_number = cargo_info.get("individual_number", "")
                                found_cargo.append(f"{individual_number}@{location_code}")
            
            log_test_result(
                "5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo API",
                True,
                f"API —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}. –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã: {found_cargo[:10]}{'...' if len(found_cargo) > 10 else ''}",
                response_time
            )
            return True
                
        except Exception as e:
            log_test_result(
                "5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo API",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo API",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def print_test_summary():
    """Print comprehensive test summary"""
    print("\n" + "="*80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö placement_records - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = len([r for r in test_results if r["success"]])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   Success Rate: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status_icon = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time_ms']}ms)" if result.get('response_time_ms') else ""
        print(f"   {i}. {status_icon} {result['test']}{time_info}")
        print(f"      {result['details']}")
    
    print("="*80)

def main():
    """Main test execution"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö placement_records")
    print("="*80)
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä—É–∑–æ–≤...")
    print()
    
    # Test 1: Authentication
    if not test_warehouse_operator_authentication():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        print_test_summary()
        return
    
    # Test 2: Get warehouse ID
    if not test_get_warehouse_id():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å warehouse_id.")
        print_test_summary()
        return
    
    # Test 3: Check fully-placed cargo
    fully_placed_success, target_cargo = test_check_fully_placed_cargo()
    
    # Test 4: Check individual-units-for-placement
    test_check_individual_units_for_placement()
    
    # Test 5: Diagnose layout-with-cargo
    test_layout_with_cargo_diagnosis()
    
    # Print final summary
    print_test_summary()

if __name__ == "__main__":
    main()