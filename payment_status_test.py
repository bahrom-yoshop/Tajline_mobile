#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï TAJLINE.TJ
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å–æ–≥–ª–∞—Å–Ω–æ review request
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class PaymentStatusTester:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ frontend/.env
        self.base_url = "https://cargo-qr-system.preview.emergentagent.com/api"
        self.tokens = {}
        self.test_data = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï TAJLINE.TJ")
        print(f"üì° Backend URL: {self.base_url}")
        print("=" * 80)

    def log_test(self, name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        self.tests_run += 1
        if success:
            self.tests_passed += 1
            print(f"‚úÖ –¢–ï–°–¢ {self.tests_run}: {name}")
        else:
            print(f"‚ùå –¢–ï–°–¢ {self.tests_run}: {name}")
        
        if details:
            print(f"   üìù {details}")

    def make_request(self, method: str, endpoint: str, data: Optional[Dict] = None, 
                    token: Optional[str] = None, params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers)
            else:
                return False, {"error": f"Unsupported method: {method}"}

            try:
                response_data = response.json()
            except:
                response_data = {"text": response.text, "status_code": response.status_code}

            return response.status_code < 400, response_data

        except Exception as e:
            return False, {"error": str(e)}

    def test_courier_authentication(self) -> bool:
        """–≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (+79991234567/courier123)"""
        print("\nüîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê")
        
        login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        success, response = self.make_request('POST', '/auth/login', login_data)
        
        if success and 'access_token' in response:
            self.tokens['courier'] = response['access_token']
            self.test_data['courier_info'] = response.get('user', {})
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞", True, 
                         f"–ö—É—Ä—å–µ—Ä: {response.get('user', {}).get('full_name', 'Unknown')}")
            return True
        else:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {response}")
            return False

    def test_find_active_request(self) -> bool:
        """–≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞"""
        print("\nüîç –≠–¢–ê–ü 2: –ü–û–ò–°–ö –ê–ö–¢–ò–í–ù–û–ô –ó–ê–Ø–í–ö–ò")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞
        success, response = self.make_request('GET', '/courier/requests/accepted', 
                                            token=self.tokens['courier'])
        
        if success and 'accepted_requests' in response:
            accepted_requests = response['accepted_requests']
            if accepted_requests:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
                active_request = accepted_requests[0]
                self.test_data['request_id'] = active_request['id']
                self.log_test("–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏", True, 
                             f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ID: {active_request['id']}")
                return True
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∏ –ø—Ä–∏–Ω—è—Ç—å –æ–¥–Ω—É
                success_new, response_new = self.make_request('GET', '/courier/requests/new', 
                                                            token=self.tokens['courier'])
                if success_new and 'new_requests' in response_new:
                    new_requests = response_new['new_requests']
                    if new_requests:
                        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
                        request_to_accept = new_requests[0]
                        accept_success, accept_response = self.make_request(
                            'POST', f'/courier/requests/{request_to_accept["id"]}/accept',
                            token=self.tokens['courier']
                        )
                        if accept_success:
                            self.test_data['request_id'] = request_to_accept['id']
                            self.log_test("–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏", True, 
                                         f"–ü—Ä–∏–Ω—è—Ç–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ID: {request_to_accept['id']}")
                            return True
                
                self.log_test("–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                return False
        else:
            self.log_test("–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏", False, f"–û—à–∏–±–∫–∞: {response}")
            return False

    def test_update_request_with_payment_status(self) -> bool:
        """–≠–¢–ê–ü 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã"""
        print("\nüí∞ –≠–¢–ê–ü 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò –° –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´")
        
        if 'request_id' not in self.test_data:
            self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏")
            return False
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ review request
        update_data = {
            "cargo_items": [
                {"name": "–î–æ–∫—É–º–µ–Ω—Ç—ã", "weight": "1.5", "total_price": "800"}
            ],
            "recipient_full_name": "–¢–µ—Å—Ç –°—Ç–∞—Ç—É—Å –û–ø–ª–∞—Ç—ã",
            "recipient_phone": "+992900777888",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –û–ø–ª–∞—Ç–∞, 5",
            "payment_method": "cash",
            "payment_status": "paid"  # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–õ–ï
        }
        
        success, response = self.make_request(
            'PUT', f'/courier/requests/{self.test_data["request_id"]}/update',
            update_data, token=self.tokens['courier']
        )
        
        if success:
            self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã", True, 
                         "–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å payment_status: 'paid'")
            return True
        else:
            self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã", False, f"–û—à–∏–±–∫–∞: {response}")
            return False

    def test_deliver_to_warehouse(self) -> bool:
        """–≠–¢–ê–ü 4: –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥"""
        print("\nüè≠ –≠–¢–ê–ü 4: –î–û–°–¢–ê–í–ö–ê –ù–ê –°–ö–õ–ê–î")
        
        if 'request_id' not in self.test_data:
            self.log_test("–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏")
            return False
        
        success, response = self.make_request(
            'POST', f'/courier/requests/{self.test_data["request_id"]}/deliver-to-warehouse',
            token=self.tokens['courier']
        )
        
        if success:
            self.log_test("–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥", True, "–ì—Ä—É–∑ —Å–¥–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥")
            return True
        else:
            self.log_test("–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥", False, f"–û—à–∏–±–∫–∞: {response}")
            return False

    def test_operator_authentication(self) -> bool:
        """–≠–¢–ê–ü 5: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)"""
        print("\nüîê –≠–¢–ê–ü 5: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê")
        
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, response = self.make_request('POST', '/auth/login', login_data)
        
        if success and 'access_token' in response:
            self.tokens['operator'] = response['access_token']
            self.test_data['operator_info'] = response.get('user', {})
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", True, 
                         f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {response.get('user', {}).get('full_name', 'Unknown')}")
            return True
        else:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {response}")
            return False

    def test_get_warehouse_notifications(self) -> bool:
        """–≠–¢–ê–ü 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞"""
        print("\nüì¨ –≠–¢–ê–ü 6: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê")
        
        success, response = self.make_request('GET', '/operator/warehouse-notifications',
                                            token=self.tokens['operator'])
        
        if success and 'notifications' in response:
            notifications = response['notifications']
            # –ò—â–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å pickup_request_id
            for notification in notifications:
                if notification.get('pickup_request_id') == self.test_data.get('request_id'):
                    self.test_data['notification_id'] = notification['id']
                    self.test_data['pickup_request_id'] = notification['pickup_request_id']
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞", True, 
                                 f"–ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å pickup_request_id: {notification['pickup_request_id']}")
                    return True
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            if notifications:
                first_notification = notifications[0]
                self.test_data['notification_id'] = first_notification['id']
                self.test_data['pickup_request_id'] = first_notification.get('pickup_request_id', 'unknown')
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞", True, 
                             f"–ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ID: {first_notification['id']}")
                return True
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
        else:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {response}")
            return False

    def test_pickup_request_endpoint(self) -> bool:
        """–≠–¢–ê–ü 7: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/operator/pickup-requests/{pickup_request_id}"""
        print("\nüéØ –≠–¢–ê–ü 7: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê ENDPOINT PICKUP REQUESTS")
        
        if 'pickup_request_id' not in self.test_data:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pickup-requests endpoint", False, "–ù–µ—Ç pickup_request_id")
            return False
        
        pickup_request_id = self.test_data['pickup_request_id']
        success, response = self.make_request(
            'GET', f'/operator/pickup-requests/{pickup_request_id}',
            token=self.tokens['operator']
        )
        
        if success:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pickup-requests endpoint", True, 
                         f"Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è pickup_request_id: {pickup_request_id}")
            self.test_data['pickup_request_data'] = response
            return True
        else:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pickup-requests endpoint", False, f"–û—à–∏–±–∫–∞: {response}")
            return False

    def test_payment_status_verification(self) -> bool:
        """–≠–¢–ê–ü 8: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –ü—Ä–æ–≤–µ—Ä–∫–∞ payment_info.payment_status = "paid" """
        print("\nüí≥ –≠–¢–ê–ü 8: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´")
        
        if 'pickup_request_data' not in self.test_data:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö pickup request")
            return False
        
        pickup_data = self.test_data['pickup_request_data']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ payment_info
        if 'payment_info' in pickup_data:
            payment_info = pickup_data['payment_info']
            payment_status = payment_info.get('payment_status')
            
            if payment_status == 'paid':
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", True, 
                             f"‚úÖ –£–°–ü–ï–•! payment_info.payment_status = '{payment_status}'")
                return True
            else:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", False, 
                             f"‚ùå –û–®–ò–ë–ö–ê! payment_info.payment_status = '{payment_status}' (–æ–∂–∏–¥–∞–ª—Å—è 'paid')")
                return False
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
            payment_status = pickup_data.get('payment_status')
            payment_method = pickup_data.get('payment_method')
            
            print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {list(pickup_data.keys())}")
            
            if payment_status:
                if payment_status == 'paid':
                    self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", True, 
                                 f"‚úÖ –£–°–ü–ï–•! payment_status = '{payment_status}'")
                    return True
                else:
                    self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", False, 
                                 f"‚ùå –û–®–ò–ë–ö–ê! payment_status = '{payment_status}' (–æ–∂–∏–¥–∞–ª—Å—è 'paid')")
                    return False
            else:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", False, 
                             "‚ùå –û–®–ò–ë–ö–ê! –ü–æ–ª–µ payment_info –∏–ª–∏ payment_status –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´")
        print("=" * 80)
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ review request
        test_steps = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞", self.test_courier_authentication),
            ("–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏", self.test_find_active_request),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã", self.test_update_request_with_payment_status),
            ("–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥", self.test_deliver_to_warehouse),
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", self.test_operator_authentication),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞", self.test_get_warehouse_notifications),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pickup-requests endpoint", self.test_pickup_request_endpoint),
            ("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã", self.test_payment_status_verification)
        ]
        
        all_passed = True
        
        for step_name, test_func in test_steps:
            try:
                result = test_func()
                if not result:
                    all_passed = False
                    print(f"‚ö†Ô∏è  –¢–µ—Å—Ç '{step_name}' –Ω–µ –ø—Ä–æ—à–µ–ª, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{step_name}': {e}")
                all_passed = False
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        success_rate = (self.tests_passed / self.tests_run * 100) if self.tests_run > 0 else 0
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.tests_passed}")
        print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {self.tests_run - self.tests_passed}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if all_passed and success_rate >= 87.5:  # 7/8 —Ç–µ—Å—Ç–æ–≤
            print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
            print("   - Backend —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç payment_status –æ—Ç –∫—É—Ä—å–µ—Ä–∞")
            print("   - Endpoint /api/operator/pickup-requests/{pickup_request_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç payment_info —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º")
            print("   - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç—É—Å 'paid' –≤–º–µ—Å—Ç–æ 'not_paid'")
        else:
            print("\n‚ö†Ô∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        return all_passed

if __name__ == "__main__":
    tester = PaymentStatusTester()
    tester.run_comprehensive_test()