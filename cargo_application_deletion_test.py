#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä" –≤ TAJLINE.TJ

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1) –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É" —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DELETE /api/admin/cargo-applications/{request.id}
2) –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–∏–∫–ª DELETE /api/admin/cargo-applications/{requestId}
3) –£–±—Ä–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã handleDeleteCargoCompletely –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
4) –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ window.confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
5) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ fetchAllPickupRequests –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123) - –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ admin –¥–ª—è DELETE /api/admin/cargo-applications
2) –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ —á–µ—Ä–µ–∑ GET /api/admin/cargo-requests
3) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}
4) –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
5) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑ –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—Ç—å—Å—è –∫–∞–∫ –ø–æ –æ–¥–Ω–æ–π, —Ç–∞–∫ –∏ –º–∞—Å—Å–æ–≤–æ
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-tracker-33.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class CargoApplicationDeletionTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.admin_info = None
        self.cargo_requests = []
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìã {details}")
        if error_msg:
            print(f"   ‚ùå {error_msg}")
        print()

    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.admin_info = data.get("user")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                admin_role = self.admin_info.get("role")
                admin_name = self.admin_info.get("full_name")
                admin_number = self.admin_info.get("user_number")
                
                if admin_role == "admin":
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ '{admin_name}' (–Ω–æ–º–µ—Ä: {admin_number}), —Ä–æ–ª—å: {admin_role} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ DELETE /api/admin/cargo-applications"
                    )
                    return True
                else:
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                        False,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Ä–æ–ª—å '{admin_role}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è admin"
                    )
                    return False
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    False,
                    f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                False,
                "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                str(e)
            )
            return False

    def get_cargo_requests(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ —á–µ—Ä–µ–∑ GET /api/admin/cargo-requests"""
        try:
            response = self.session.get(f"{API_BASE}/admin/cargo-requests")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, list):
                    self.cargo_requests = data
                elif isinstance(data, dict) and "items" in data:
                    self.cargo_requests = data["items"]
                else:
                    self.cargo_requests = data
                
                requests_count = len(self.cargo_requests)
                
                if requests_count > 0:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞—è–≤–æ–∫
                    sample_requests = []
                    for i, req in enumerate(self.cargo_requests[:3]):
                        req_id = req.get("id", "N/A")
                        req_number = req.get("request_number", "N/A")
                        sender_name = req.get("sender_full_name", "N/A")
                        cargo_name = req.get("cargo_name", "N/A")
                        status = req.get("status", "N/A")
                        sample_requests.append(f"ID: {req_id}, –ù–æ–º–µ—Ä: {req_number}, –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}, –ì—Ä—É–∑: {cargo_name}, –°—Ç–∞—Ç—É—Å: {status}")
                    
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ —á–µ—Ä–µ–∑ GET /api/admin/cargo-requests",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {requests_count} –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑. –ü—Ä–∏–º–µ—Ä—ã: {'; '.join(sample_requests)}"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ —á–µ—Ä–µ–∑ GET /api/admin/cargo-requests",
                        True,
                        "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (0 –∑–∞—è–≤–æ–∫)"
                    )
                    return True
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ —á–µ—Ä–µ–∑ GET /api/admin/cargo-requests",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ —á–µ—Ä–µ–∑ GET /api/admin/cargo-requests",
                False,
                "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫",
                str(e)
            )
            return False

    def test_single_deletion(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}"""
        if not self.cargo_requests:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
                False,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"
            )
            return False
            
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_request = self.cargo_requests[0]
            request_id = test_request.get("id")
            request_number = test_request.get("request_number", "N/A")
            sender_name = test_request.get("sender_full_name", "N/A")
            
            if not request_id:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
                    False,
                    "–£ –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'id' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å
            response = self.session.delete(f"{API_BASE}/admin/cargo-applications/{request_id}")
            
            if response.status_code == 200:
                try:
                    response_data = response.json()
                    message = response_data.get("message", "–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
                    deleted_id = response_data.get("deleted_id", request_id)
                    
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}",
                        True,
                        f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! ID: {deleted_id}, –ù–æ–º–µ—Ä: {request_number}, –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {message}"
                    )
                    return True
                except:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –Ω–æ —Å—Ç–∞—Ç—É—Å 200
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}",
                        True,
                        f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! ID: {request_id}, –ù–æ–º–µ—Ä: {request_number}, –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}. HTTP 200 –ø–æ–ª—É—á–µ–Ω"
                    )
                    return True
            elif response.status_code == 404:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}",
                    False,
                    f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ID {request_id}",
                    f"HTTP 404: {response.text}"
                )
                return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}",
                    False,
                    f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}",
                False,
                "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏",
                str(e)
            )
            return False

    def verify_deletion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            response = self.session.get(f"{API_BASE}/admin/cargo-requests")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, list):
                    updated_requests = data
                elif isinstance(data, dict) and "items" in data:
                    updated_requests = data["items"]
                else:
                    updated_requests = data
                
                original_count = len(self.cargo_requests)
                updated_count = len(updated_requests)
                
                if updated_count < original_count:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                        True,
                        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ! –ë—ã–ª–æ –∑–∞—è–≤–æ–∫: {original_count}, —Å—Ç–∞–ª–æ: {updated_count}. –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                    self.cargo_requests = updated_requests
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                        False,
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: –±—ã–ª–æ {original_count}, —Å—Ç–∞–ª–æ {updated_count}. –í–æ–∑–º–æ–∂–Ω–æ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                False,
                "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–¥–∞–ª–µ–Ω–∏—è",
                str(e)
            )
            return False

    def test_bulk_deletion(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏)"""
        if len(self.cargo_requests) < 2:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫",
                False,
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {len(self.cargo_requests)}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)"
            )
            return False
            
        try:
            # –ë–µ—Ä–µ–º –¥–æ 3 –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            requests_to_delete = self.cargo_requests[:min(3, len(self.cargo_requests))]
            deletion_results = []
            successful_deletions = 0
            
            for i, request in enumerate(requests_to_delete):
                request_id = request.get("id")
                request_number = request.get("request_number", "N/A")
                sender_name = request.get("sender_full_name", "N/A")
                
                if not request_id:
                    deletion_results.append(f"–ó–∞—è–≤–∫–∞ {i+1}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID")
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å
                response = self.session.delete(f"{API_BASE}/admin/cargo-applications/{request_id}")
                
                if response.status_code == 200:
                    successful_deletions += 1
                    deletion_results.append(f"–ó–∞—è–≤–∫–∞ {i+1}: –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ (ID: {request_id}, –ù–æ–º–µ—Ä: {request_number})")
                else:
                    deletion_results.append(f"–ó–∞—è–≤–∫–∞ {i+1}: –û—à–∏–±–∫–∞ HTTP {response.status_code} (ID: {request_id})")
            
            total_attempts = len(requests_to_delete)
            success_rate = (successful_deletions / total_attempts) * 100 if total_attempts > 0 else 0
            
            if successful_deletions > 0:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏)",
                    True,
                    f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {successful_deletions}/{total_attempts} –∑–∞—è–≤–æ–∫ ({success_rate:.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏). –î–µ—Ç–∞–ª–∏: {'; '.join(deletion_results)}"
                )
                return True
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏)",
                    False,
                    f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å! –£–¥–∞–ª–µ–Ω–æ: {successful_deletions}/{total_attempts} –∑–∞—è–≤–æ–∫. –î–µ—Ç–∞–ª–∏: {'; '.join(deletion_results)}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏)",
                False,
                "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏",
                str(e)
            )
            return False

    def verify_bulk_deletion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
            response = self.session.get(f"{API_BASE}/admin/cargo-requests")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, list):
                    final_requests = data
                elif isinstance(data, dict) and "items" in data:
                    final_requests = data["items"]
                else:
                    final_requests = data
                
                final_count = len(final_requests)
                
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è",
                    True,
                    f"–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {final_count}. –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                )
                return True
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è",
                False,
                "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä' –≤ TAJLINE.TJ")
        print("=" * 120)
        print()
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑
        if not self.get_cargo_requests():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑")
            return False
        
        # –¢–µ—Å—Ç 3: –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        single_deletion_success = self.test_single_deletion()
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        if single_deletion_success:
            self.verify_deletion()
        
        # –¢–µ—Å—Ç 5: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        bulk_deletion_success = self.test_bulk_deletion()
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if bulk_deletion_success:
            self.verify_bulk_deletion()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results if result["success"])
        success_rate = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        
        print("=" * 120)
        print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        print()
        
        if success_rate >= 80:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ DELETE /api/admin/cargo-applications/{id} —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            print("‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª DELETE –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ó–∞—è–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
            return True
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            return False

if __name__ == "__main__":
    tester = CargoApplicationDeletionTester()
    tester.run_all_tests()