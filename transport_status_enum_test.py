#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TransportStatus enum
=====================================================================

–¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ TransportStatus enum —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã 'available', 'loading', 'loaded'
–∏ —á—Ç–æ API endpoints cargo-to-transport —Ä–∞–±–æ—Ç–∞—é—Ç —Å —ç—Ç–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏.

–ü–†–û–ë–õ–ï–ú–ê –ò–ó REVIEW REQUEST:
- –†–∞–Ω–µ–µ TransportStatus enum —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ: 'empty', 'filled', 'in_transit', 'arrived', 'completed'
- Endpoint /api/logistics/cargo-to-transport/scan-transport –ø—Ä–æ–≤–µ—Ä—è–ª —Å—Ç–∞—Ç—É—Å 'available'
- –≠—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫—É 400: "Transport is not available for loading. Current status: empty"

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
- ‚úÖ TransportStatus enum —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å 'available', 'loading', 'loaded'
- ‚úÖ Workflow: available ‚Üí loading ‚Üí loaded ‚Üí in_transit

–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ TransportStatus enum —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã
2. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –≤—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å 'available' –≤ –ë–î
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å scan-transport endpoint
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–∞ 'loading'
5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ endpoints
"""

import requests
import json
import sys
import os
from datetime import datetime
import time
import uuid
from pymongo import MongoClient

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'cargo_transport')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class TransportStatusEnumTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_transport_id = None
        self.current_session_id = None
        self.mongo_client = None
        self.db = None
        self.test_results = {
            "auth_success": False,
            "transport_creation_success": False,
            "status_update_success": False,
            "scan_transport_success": False,
            "scan_cargo_success": False,
            "get_session_success": False,
            "delete_session_success": False,
            "enum_fixed": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def add_test_result(self, test_name, success, details="", response_time=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results["total_tests"] += 1
        if success:
            self.test_results["passed_tests"] += 1
            status = "‚úÖ –ü–†–û–ô–î–ï–ù"
        else:
            self.test_results["failed_tests"] += 1
            status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
        time_info = f" ({response_time}ms)" if response_time else ""
        result_entry = f"{status}: {test_name}{time_info}"
        if details:
            result_entry += f" - {details}"
            
        self.test_results["detailed_results"].append(result_entry)
        self.log(result_entry)
        
    def connect_to_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.db.admin.command('ping')
            self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {str(e)}", "ERROR")
            return False
        
    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    operator_name = self.operator_info.get("full_name", "Unknown")
                    operator_role = self.operator_info.get("role", "Unknown")
                    
                    self.test_results["auth_success"] = True
                    self.add_test_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
                        True, 
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (—Ä–æ–ª—å: {operator_role})",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", False, f"HTTP {user_response.status_code}")
                    return False
            else:
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def create_and_setup_transport(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å 'available' —á–µ—Ä–µ–∑ MongoDB"""
        self.log("üöõ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'available'...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        transport_number = f"TEST{int(time.time() % 10000):04d}"
        
        start_time = time.time()
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ API
            response = self.session.post(f"{API_BASE}/transport/create", json={
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
                "driver_phone": "+79999999999",
                "transport_number": transport_number,
                "capacity_kg": 1000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.test_transport_id = data.get("transport_id")
                
                self.test_results["transport_creation_success"] = True
                self.add_test_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                    True, 
                    f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {transport_number} (ID: {self.test_transport_id})",
                    response_time
                )
                
                # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'available' —á–µ—Ä–µ–∑ MongoDB
                return self.update_transport_status_to_available()
            else:
                self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def update_transport_status_to_available(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ 'available' —á–µ—Ä–µ–∑ MongoDB"""
        self.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ 'available' —á–µ—Ä–µ–∑ MongoDB...")
        
        if not self.db or not self.test_transport_id:
            self.add_test_result("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–ª–∏ ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            return False
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ MongoDB
            result = self.db.transports.update_one(
                {"id": self.test_transport_id},
                {"$set": {
                    "status": "available",
                    "updated_at": datetime.utcnow()
                }}
            )
            
            if result.modified_count > 0:
                self.test_results["status_update_success"] = True
                self.add_test_result(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                    True, 
                    "–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'available'"
                )
                return True
            else:
                self.add_test_result("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")
                return False
                
        except Exception as e:
            self.add_test_result("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞ MongoDB: {str(e)}")
            return False
    
    def test_scan_transport(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        if not self.test_transport_id:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è QR
        transport_response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}")
        if transport_response.status_code != 200:
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {transport_response.status_code}")
            return False
            
        transport_data = transport_response.json()
        transport_number = transport_data.get("transport_number")
        current_status = transport_data.get("status")
        
        self.log(f"üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {current_status}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º QR –∫–æ–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        qr_code = f"TRANSPORT_{transport_number}_{timestamp}"
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": qr_code
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.current_session_id = data.get("session_id")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
                required_fields = ["session_id", "transport_id", "transport_number", "status"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    self.test_results["scan_transport_success"] = True
                    self.test_results["enum_fixed"] = True  # –ï—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ, –∑–Ω–∞—á–∏—Ç enum –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
                    self.add_test_result(
                        "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                        True, 
                        f"‚úÖ ENUM –ò–°–ü–†–ê–í–õ–ï–ù! –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.current_session_id}, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'loading'",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}", response_time)
                    return False
            else:
                error_detail = response.json().get("detail", "Unknown error") if response.headers.get("content-type", "").startswith("application/json") else response.text
                
                if "Transport is not available for loading" in error_detail:
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"‚ùå ENUM –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù! {error_detail}", response_time)
                else:
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_remaining_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö endpoints –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ"""
        if not self.current_session_id:
            self.log("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö endpoints - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            return
        
        self.log("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ cargo-to-transport endpoints...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        try:
            response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/session")
            if response.status_code == 200:
                data = response.json()
                if "session_id" in data:
                    self.test_results["get_session_success"] = True
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", True, f"–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {data.get('session_id')}")
                else:
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç session_id –≤ –æ—Ç–≤–µ—Ç–µ")
            else:
                self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, f"HTTP {response.status_code}")
        except Exception as e:
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ (–º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≥—Ä—É–∑–æ–≤, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º endpoint)
        try:
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-cargo", json={
                "qr_code": "TEST_CARGO_QR"
            })
            if response.status_code in [200, 404]:  # 404 –æ–∂–∏–¥–∞–µ–º –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞
                self.test_results["scan_cargo_success"] = True
                self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ (endpoint)", True, f"Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code})")
            else:
                self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ (endpoint)", False, f"HTTP {response.status_code}")
        except Exception as e:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ (endpoint)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        try:
            response = self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session")
            if response.status_code == 200:
                self.test_results["delete_session_success"] = True
                self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", True, "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            else:
                self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, f"HTTP {response.status_code}")
        except Exception as e:
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.current_session_id:
                try:
                    self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session")
                    self.log("–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                except:
                    pass
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            if self.test_transport_id:
                try:
                    self.session.delete(f"{API_BASE}/transport/{self.test_transport_id}")
                    self.log("–¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω")
                except Exception as e:
                    self.log(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç - {str(e)}", "INFO")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if self.mongo_client:
                self.mongo_client.close()
                self.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∑–∞–∫—Ä—ã—Ç–æ")
                    
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", "WARNING")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø TRANSPORTSTATUS ENUM")
        self.log("=" * 80)
        
        try:
            # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if not self.connect_to_mongodb():
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", "ERROR")
                return self.generate_final_report()
            
            # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate():
                self.log("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", "ERROR")
                return self.generate_final_report()
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if not self.create_and_setup_transport():
                self.log("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.", "ERROR")
                return self.generate_final_report()
            
            # 4. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            self.test_scan_transport()
            
            # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—à–µ–ª
            self.test_remaining_endpoints()
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", "ERROR")
        
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_test_data()
            
        return self.generate_final_report()
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("=" * 80)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 80)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = self.test_results["total_tests"]
        passed_tests = self.test_results["passed_tests"]
        failed_tests = self.test_results["failed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.log(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        self.log(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        self.log("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results["detailed_results"]:
            self.log(f"   {result}")
        self.log("")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        if self.test_results["enum_fixed"]:
            self.log("   ‚úÖ TRANSPORTSTATUS ENUM –ò–°–ü–†–ê–í–õ–ï–ù!")
            self.log("   ‚úÖ –°—Ç–∞—Ç—É—Å 'available' —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            self.log("   ‚úÖ API endpoint scan-transport —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("   ‚úÖ Workflow available ‚Üí loading —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        else:
            self.log("   ‚ùå TRANSPORTSTATUS ENUM –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù!")
            self.log("   ‚ùå –°—Ç–∞—Ç—É—Å 'available' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            self.log("   ‚ùå API endpoint scan-transport –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.test_results["get_session_success"]:
            self.log("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        if self.test_results["scan_cargo_success"]:
            self.log("   ‚úÖ Endpoint —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω")
        if self.test_results["delete_session_success"]:
            self.log("   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        self.log("")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        if self.test_results["enum_fixed"]:
            self.log("üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TRANSPORTSTATUS ENUM –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û!")
            self.log("   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            final_status = "SUCCESS"
        else:
            self.log("‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: TRANSPORTSTATUS ENUM –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù!")
            self.log("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ enum –∏–ª–∏ –ª–æ–≥–∏–∫–æ–π endpoints.")
            final_status = "FAILURE"
        
        self.log("=" * 80)
        
        return {
            "status": final_status,
            "enum_fixed": self.test_results["enum_fixed"],
            "success_rate": success_rate,
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": failed_tests,
            "detailed_results": self.test_results["detailed_results"]
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TransportStatusEnumTester()
    result = tester.run_comprehensive_test()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if result["enum_fixed"]:
        sys.exit(0)  # –£—Å–ø–µ—Ö - enum –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    else:
        sys.exit(2)  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - enum –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω

if __name__ == "__main__":
    main()