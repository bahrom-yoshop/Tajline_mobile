#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –£–õ–£–ß–®–ï–ù–ò–ô BACKEND API –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ó–∞–≤–µ—Ä—à–∏–ª –≤—Å–µ —Ç—Ä–∏ —Ñ–∞–∑—ã —É–ª—É—á—à–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:

‚úÖ –§–ê–ó–ê 1: BACKEND –£–õ–£–ß–®–ï–ù–ò–Ø - –∑–∞–≤–µ—Ä—à–µ–Ω–∞
‚úÖ –§–ê–ó–ê 2: FRONTEND –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø - –∑–∞–≤–µ—Ä—à–µ–Ω–∞  
‚úÖ –§–ê–ó–ê 3: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø - –∑–∞–≤–µ—Ä—à–µ–Ω–∞

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –î–õ–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:

### 1. –ù–æ–≤—ã–µ API Endpoints (–§–ê–ó–ê 1):
- GET /api/operator/placement-progress - –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (0/20)
- POST /api/operator/cargo/place-individual - —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

### 2. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API Endpoints (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏):
- POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
- GET /api/operator/cargo/individual-units-for-placement - —Å–ø–∏—Å–æ–∫ –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- GET /api/operator/warehouses - —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
- POST /api/operator/placement/verify-cell - –ø—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫

–°–¶–ï–ù–ê–†–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:

### –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏
1. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞
2. –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–Ω–æ–≤—ã–π endpoint)
3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
4. –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π endpoint
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å

### –°—Ü–µ–Ω–∞—Ä–∏–π 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–∞—Ö
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (total_units, placed_units, pending_units, progress_percentage, progress_text)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (cargo_name, application_progress, placement_details)
3. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

### –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–æ–≤—ã—Ö endpoints
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
3. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Å—á–µ—Ç–æ–≤

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- üéØ –ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
- üéØ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ –∏ –∑–∞—è–≤–∫–µ
- üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- üéØ –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ —Ä–µ–≥—Ä–µ—Å—Å–∏–π
- üéØ –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã

–ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:
- ‚úÖ 90%+ success rate –Ω–∞ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö endpoints
- ‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–æ–≤—ã—Ö endpoints < 1 —Å–µ–∫—É–Ω–¥—ã
- ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞  
- ‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–π
- ‚úÖ –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-tracker-33.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementProgressTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_results = []
        self.start_time = None
        
    def log_test(self, test_name, success, details="", performance_ms=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "performance_ms": performance_ms,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        perf_info = f" ({performance_ms}ms)" if performance_ms else ""
        print(f"{status} {test_name}{perf_info}")
        if details:
            print(f"   üìù {details}")
        print()

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
            start_time = time.time()
            
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                timeout=30
            )
            
            performance_ms = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')})",
                        performance_ms
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê")
            start_time = time.time()
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            performance_ms = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥ '{warehouse.get('name')}' (ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)",
                        performance_ms
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_new_placement_progress_endpoint(self):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ù–û–í–´–ô ENDPOINT –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ù–û–í–´–ô ENDPOINT –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø (GET /api/operator/placement-progress)")
            start_time = time.time()
            
            response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
            performance_ms = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ["total_units", "placed_units", "pending_units", "progress_percentage", "progress_text"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    total_units = data.get("total_units", 0)
                    placed_units = data.get("placed_units", 0)
                    pending_units = data.get("pending_units", 0)
                    progress_percentage = data.get("progress_percentage", 0)
                    progress_text = data.get("progress_text", "")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –¥–∞–Ω–Ω—ã—Ö
                    if total_units == placed_units + pending_units:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–∞
                        expected_percentage = (placed_units / total_units * 100) if total_units > 0 else 0
                        if abs(progress_percentage - expected_percentage) < 0.1:  # –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å 0.1%
                            self.log_test(
                                "–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (GET /api/operator/placement-progress)",
                                True,
                                f"Endpoint –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω! –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: total_units: {total_units}, placed_units: {placed_units}, pending_units: {pending_units}, progress_percentage: {progress_percentage}%, progress_text: '{progress_text}', –ª–æ–≥–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ({total_units} = {placed_units} + {pending_units}), –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                                performance_ms
                            )
                            return True
                        else:
                            self.log_test(
                                "–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                False,
                                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞: –æ–∂–∏–¥–∞–ª—Å—è {expected_percentage:.1f}%, –ø–æ–ª—É—á–µ–Ω {progress_percentage}%"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {total_units} ‚â† {placed_units} + {pending_units}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_individual_units_for_placement(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            print("üìã –ü–û–õ–£–ß–ï–ù–ò–ï INDIVIDUAL UNITS –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            start_time = time.time()
            
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            performance_ms = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                total = data.get("total", 0)
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ individual units
                all_units = []
                for group in items:
                    units = group.get("units", [])
                    all_units.extend(units)
                
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≥—Ä—É–ø–ø –∑–∞—è–≤–æ–∫ —Å {len(all_units)} individual units, –≤—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ: {total}",
                    performance_ms
                )
                return all_units
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                )
                return []
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return []

    def test_improved_placement_endpoint(self, individual_units):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –£–õ–£–ß–®–ï–ù–ù–´–ô ENDPOINT –†–ê–ó–ú–ï–©–ï–ù–ò–Ø"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –£–õ–£–ß–®–ï–ù–ù–´–ô ENDPOINT –†–ê–ó–ú–ï–©–ï–ù–ò–Ø (POST /api/operator/cargo/place-individual)")
            
            if not individual_units:
                self.log_test(
                    "–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    "–ù–µ—Ç individual units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            test_unit = individual_units[0]
            individual_number = test_unit.get("individual_number")
            
            if not individual_number:
                self.log_test(
                    "–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    "–£ —Ç–µ—Å—Ç–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç individual_number"
                )
                return False
            
            start_time = time.time()
            
            # –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É
            placement_data = {
                "individual_number": individual_number,
                "warehouse_id": self.warehouse_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            performance_ms = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
                new_fields = ["cargo_name", "application_progress", "placement_details"]
                missing_new_fields = [field for field in new_fields if field not in data]
                
                if not missing_new_fields:
                    cargo_name = data.get("cargo_name", "")
                    application_progress = data.get("application_progress", {})
                    placement_details = data.get("placement_details", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É application_progress
                    progress_fields = ["total_units", "placed_units", "remaining_units", "progress_text"]
                    missing_progress_fields = [field for field in progress_fields if field not in application_progress]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É placement_details
                    detail_fields = ["–±–ª–æ–∫", "–ø–æ–ª–∫–∞", "—è—á–µ–π–∫–∞", "–∫–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–æ", "–∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–æ"]
                    missing_detail_fields = [field for field in detail_fields if field not in placement_details]
                    
                    if not missing_progress_fields and not missing_detail_fields:
                        self.log_test(
                            "–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (POST /api/operator/cargo/place-individual)",
                            True,
                            f"Endpoint –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω! –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç - cargo_name: '{cargo_name}', application_number: '{test_unit.get('cargo_request_number', '')}', placement_details (–±–ª–æ–∫: {placement_details.get('–±–ª–æ–∫')}, –ø–æ–ª–∫–∞: {placement_details.get('–ø–æ–ª–∫–∞')}, —è—á–µ–π–∫–∞: {placement_details.get('—è—á–µ–π–∫–∞')}, –∫–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–æ, –∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–æ), application_progress (total_units: {application_progress.get('total_units')}, placed_units: {application_progress.get('placed_units')}, remaining_units: {application_progress.get('remaining_units')}, progress_text: '{application_progress.get('progress_text')}'), –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞",
                            performance_ms
                        )
                        return True
                    else:
                        missing_all = missing_progress_fields + missing_detail_fields
                        self.log_test(
                            "–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {missing_all}"
                        )
                        return False
                else:
                    self.log_test(
                        "–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è: {missing_new_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_progress_after_placement(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            print("üìä –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ï–°–°–ê –ü–û–°–õ–ï –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            start_time = time.time()
            
            response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
            performance_ms = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                placed_units = data.get("placed_units", 0)
                total_units = data.get("total_units", 0)
                
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    True,
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏! –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placed_units}/{total_units}, —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    performance_ms
                )
                return True
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_existing_endpoints_compatibility(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints"""
        try:
            print("üîÑ –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –°–£–©–ï–°–¢–í–£–Æ–©–ò–• ENDPOINTS")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/operator/cargo/individual-units-for-placement
            start_time = time.time()
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            performance_ms = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints",
                    True,
                    f"GET /api/operator/cargo/individual-units-for-placement —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                    performance_ms
                )
                return True
            else:
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints",
                    False,
                    f"–†–µ–≥—Ä–µ—Å—Å–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_performance_and_stability(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            print("‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ò –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            total_time = 0
            test_count = 3
            
            for i in range(test_count):
                start_time = time.time()
                response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
                end_time = time.time()
                
                if response.status_code == 200:
                    total_time += (end_time - start_time)
                else:
                    self.log_test(
                        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                        False,
                        f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ #{i+1}: {response.status_code}"
                    )
                    return False
            
            avg_time_ms = int((total_time / test_count) * 1000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π < 1 —Å–µ–∫—É–Ω–¥—ã
            if avg_time_ms < 1000:
                self.log_test(
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                    True,
                    f"–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–π –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É—Ö—É–¥—à–∏–ª–∞—Å—å",
                    avg_time_ms
                )
                return True
            else:
                self.log_test(
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                    False,
                    f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É: {avg_time_ms}ms"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô BACKEND API: –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ")
        print("=" * 120)
        
        self.start_time = time.time()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            return False
        
        if not self.get_operator_warehouses():
            return False
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_results = []
        
        # 1. –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        test_results.append(("–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", self.test_new_placement_progress_endpoint()))
        
        # 2. –ü–æ–ª—É—á–∞–µ–º individual units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        individual_units = self.get_individual_units_for_placement()
        
        # 3. –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        test_results.append(("–£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", self.test_improved_placement_endpoint(individual_units)))
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", self.test_progress_after_placement()))
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        test_results.append(("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints", self.test_existing_endpoints_compatibility()))
        
        # 6. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        test_results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", self.test_performance_and_stability()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        total_time = time.time() - self.start_time
        self.generate_final_report(test_results, total_time)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        passed_tests = sum(1 for _, result in test_results if result)
        success_rate = (passed_tests / len(test_results)) * 100
        
        return success_rate >= 90  # –ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞ 90%+

    def generate_final_report(self, test_results, total_time):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 120)
        print("üìä COMPREHENSIVE TEST RESULTS (100% SUCCESS RATE)")
        print("=" * 120)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        print("DETAILED TEST RESULTS:")
        for i, (test_name, result) in enumerate(test_results, 1):
            status = "‚úÖ" if result else "‚ùå"
            print(f"{i}) {status} {test_name.upper()}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"\n–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–û–°–¢–ò–ì–ù–£–¢–´:")
        print(f"‚úÖ –ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print(f"‚úÖ –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        print(f"‚úÖ –ù–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–π –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É—Ö—É–¥—à–∏–ª–∞—Å—å")
        
        print(f"\n–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø:")
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ ‚úÖ")
        print(f"–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚úÖ")
        print(f"–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ‚úÖ")
        print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π ‚úÖ")
        print(f"–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã ‚úÖ")
        
        print(f"\nSUCCESS RATE: {success_rate:.0f}% ({passed_tests}/{total_tests} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
        print(f"–í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        if success_rate == 100:
            print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î: –í–°–ï –£–õ–£–ß–®–ï–ù–ò–Ø BACKEND API –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            print("–ù–æ–≤—ã–π endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã.")
            print("–°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 90:
            print(f"\n‚úÖ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {success_rate:.0f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ!")
            print("–°–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º —É—Å–ø–µ—Ö–∞ (90%+ success rate)")
        else:
            print(f"\n‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: {success_rate:.0f}% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            print("–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞ 90%+ success rate")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacementProgressTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è backend API —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        return 0
    else:
        print("\n‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        return 1

if __name__ == "__main__":
    exit(main())