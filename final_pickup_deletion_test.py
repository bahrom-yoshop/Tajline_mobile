#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä"

–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints:
1. DELETE /api/admin/pickup-requests/bulk - –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
2. DELETE /api/admin/cargo-applications/{request_id} - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑
3. DELETE /api/admin/cargo-applications/bulk - –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑
4. DELETE /api/operator/cargo/{cargo_id}/remove-from-placement - —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
5. DELETE /api/operator/cargo/bulk-remove-from-placement - –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-7.preview.emergentagent.com/api"

class FinalPickupDeletionTest:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": "+79777888999",
                "password": "warehouse123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {data.get('user', {}).get('full_name')}")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_pickup_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        self.log("üìã –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø")
        
        data = {
            'cargo_requests': [],
            'pickup_requests': [],
            'notifications': [],
            'available_cargo': []
        }
        
        # 1. –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã (cargo-requests)
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
            if response.status_code == 200:
                data['cargo_requests'] = response.json()
                self.log(f"   ‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã: {len(data['cargo_requests'])}")
            else:
                self.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã: {response.status_code}")
        except Exception as e:
            self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã: {e}")
        
        # 2. –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä (pickup-requests)
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests")
            if response.status_code == 200:
                pickup_data = response.json()
                data['pickup_requests'] = pickup_data.get('pickup_requests', [])
                self.log(f"   ‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä: {len(data['pickup_requests'])}")
            else:
                self.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {response.status_code}")
        except Exception as e:
            self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {e}")
        
        # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouse-notifications")
            if response.status_code == 200:
                notif_data = response.json()
                data['notifications'] = notif_data.get('notifications', [])
                self.log(f"   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {len(data['notifications'])}")
            else:
                self.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code}")
        except Exception as e:
            self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # 4. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            if response.status_code == 200:
                cargo_data = response.json()
                data['available_cargo'] = cargo_data.get('items', [])
                self.log(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã: {len(data['available_cargo'])}")
            else:
                self.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {response.status_code}")
        except Exception as e:
            self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {e}")
        
        return data
    
    def test_cargo_applications_deletion(self, cargo_requests):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑"""
        self.log("üóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó")
        
        if not cargo_requests:
            self.log("   ‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        test_request = cargo_requests[0]
        request_id = test_request.get('id')
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞:")
        self.log(f"     - ID: {request_id}")
        self.log(f"     - –ù–æ–º–µ—Ä: {test_request.get('request_number')}")
        self.log(f"     - –ì—Ä—É–∑: {test_request.get('cargo_name')}")
        
        try:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE /admin/cargo-applications/{request_id}")
            response = self.session.delete(f"{BACKEND_URL}/admin/cargo-applications/{request_id}")
            
            self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –ì–†–£–ó!")
                self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                return True
            elif response.status_code == 404:
                self.log(f"     - ‚ùå –ó–ê–Ø–í–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê")
            elif response.status_code == 403:
                self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
            else:
                self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                
        except Exception as e:
            self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return False
    
    def test_bulk_cargo_applications_deletion(self, cargo_requests):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑"""
        self.log("üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó")
        
        if len(cargo_requests) < 2:
            self.log("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_ids = [req['id'] for req in cargo_requests[:2]]
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: {len(test_ids)} —à—Ç.")
        for i, req_id in enumerate(test_ids):
            request = cargo_requests[i]
            self.log(f"     {i+1}. {request.get('request_number')} - {request.get('cargo_name')}")
        
        try:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE /admin/cargo-applications/bulk")
            response = self.session.delete(f"{BACKEND_URL}/admin/cargo-applications/bulk", json={
                "request_ids": test_ids
            })
            
            self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö!")
                self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                return True
            elif response.status_code == 404:
                self.log(f"     - ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
            elif response.status_code == 403:
                self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
            else:
                self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                
        except Exception as e:
            self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return False
    
    def test_pickup_requests_bulk_deletion(self, notifications):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        self.log("üöö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†")
        
        if not notifications:
            self.log("   ‚ùå –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id")
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º pickup_request_id –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        pickup_request_ids = []
        for notif in notifications:
            pickup_id = notif.get('pickup_request_id')
            if pickup_id and pickup_id not in pickup_request_ids:
                pickup_request_ids.append(pickup_id)
        
        if not pickup_request_ids:
            self.log("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ pickup_request_id –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_ids = pickup_request_ids[:2]
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤—ã–µ pickup_request_id: {test_ids}")
        
        try:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE /admin/pickup-requests/bulk")
            response = self.session.delete(f"{BACKEND_URL}/admin/pickup-requests/bulk", json={
                "request_ids": test_ids
            })
            
            self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†!")
                self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                return True
            elif response.status_code == 404:
                self.log(f"     - ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
            elif response.status_code == 403:
                self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
            else:
                self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                
        except Exception as e:
            self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return False
    
    def test_cargo_removal_from_placement(self, available_cargo):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log("üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        
        if not available_cargo:
            self.log("   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        test_cargo = available_cargo[0]
        cargo_id = test_cargo.get('id')
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑:")
        self.log(f"     - ID: {cargo_id}")
        self.log(f"     - –ù–æ–º–µ—Ä: {test_cargo.get('cargo_number')}")
        self.log(f"     - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {test_cargo.get('sender_full_name')}")
        
        try:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE /operator/cargo/{cargo_id}/remove-from-placement")
            response = self.session.delete(f"{BACKEND_URL}/operator/cargo/{cargo_id}/remove-from-placement")
            
            self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–ê –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø!")
                self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                return True
            elif response.status_code == 404:
                self.log(f"     - ‚ùå –ì–†–£–ó –ù–ï –ù–ê–ô–î–ï–ù")
            elif response.status_code == 403:
                self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
            else:
                self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                
        except Exception as e:
            self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return False
    
    def test_bulk_cargo_removal_from_placement(self, available_cargo):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log("üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        
        if len(available_cargo) < 2:
            self.log("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cargo_ids = [cargo['id'] for cargo in available_cargo[:2]]
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–∑—ã: {len(test_cargo_ids)} —à—Ç.")
        for i, cargo_id in enumerate(test_cargo_ids):
            cargo = available_cargo[i]
            self.log(f"     {i+1}. {cargo.get('cargo_number')} - {cargo.get('sender_full_name')}")
        
        try:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE /operator/cargo/bulk-remove-from-placement")
            response = self.session.delete(f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement", json={
                "cargo_ids": test_cargo_ids
            })
            
            self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–û–í –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø!")
                self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                return True
            elif response.status_code == 404:
                self.log(f"     - ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
            elif response.status_code == 403:
                self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
            else:
                self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                
        except Exception as e:
            self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return False
    
    def run_final_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ endpoints"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –°–ï–ö–¶–ò–ò '–ù–ê –ó–ê–ë–û–†'")
        self.log("üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ï ENDPOINTS –ò–ó BACKEND –ö–û–î–ê")
        self.log("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = self.get_pickup_data()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results = {
            'cargo_applications_single': False,
            'cargo_applications_bulk': False,
            'pickup_requests_bulk': False,
            'cargo_removal_single': False,
            'cargo_removal_bulk': False
        }
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
        if data['cargo_requests']:
            results['cargo_applications_single'] = self.test_cargo_applications_deletion(data['cargo_requests'])
            results['cargo_applications_bulk'] = self.test_bulk_cargo_applications_deletion(data['cargo_requests'])
        
        if data['notifications']:
            results['pickup_requests_bulk'] = self.test_pickup_requests_bulk_deletion(data['notifications'])
        
        if data['available_cargo']:
            results['cargo_removal_single'] = self.test_cargo_removal_from_placement(data['available_cargo'])
            results['cargo_removal_bulk'] = self.test_bulk_cargo_removal_from_placement(data['available_cargo'])
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.log("=" * 80)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–´–• ENDPOINTS:")
        
        working_methods = []
        for method, success in results.items():
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if success else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            self.log(f"   {method}: {status}")
            if success:
                working_methods.append(method)
        
        self.log(f"   üìà –ò–¢–û–ì–û –†–ê–ë–û–ß–ò–• –ú–ï–¢–û–î–û–í: {len(working_methods)}")
        
        if working_methods:
            self.log("   üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –†–ê–ë–û–ß–ò–ï –°–ü–û–°–û–ë–´ –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –°–ï–ö–¶–ò–ò '–ù–ê –ó–ê–ë–û–†':")
            
            if 'cargo_applications_single' in working_methods:
                self.log("     1. ‚úÖ –ï–î–ò–ù–ò–ß–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó:")
                self.log("        - Endpoint: DELETE /admin/cargo-applications/{request_id}")
                self.log("        - –£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä—É–∑, —á—Ç–æ —É–±–∏—Ä–∞–µ—Ç –≥—Ä—É–∑ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
            
            if 'cargo_applications_bulk' in working_methods:
                self.log("     2. ‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó:")
                self.log("        - Endpoint: DELETE /admin/cargo-applications/bulk")
                self.log("        - –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑")
            
            if 'pickup_requests_bulk' in working_methods:
                self.log("     3. ‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†:")
                self.log("        - Endpoint: DELETE /admin/pickup-requests/bulk")
                self.log("        - –ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
            
            if 'cargo_removal_single' in working_methods:
                self.log("     4. ‚úÖ –ï–î–ò–ù–ò–ß–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–û–í –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
                self.log("        - Endpoint: DELETE /operator/cargo/{cargo_id}/remove-from-placement")
                self.log("        - –£–¥–∞–ª—è–µ—Ç –≥—Ä—É–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            
            if 'cargo_removal_bulk' in working_methods:
                self.log("     5. ‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–û–í –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
                self.log("        - Endpoint: DELETE /operator/cargo/bulk-remove-from-placement")
                self.log("        - –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        else:
            self.log("   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ò–• –ú–ï–¢–û–î–û–í –£–î–ê–õ–ï–ù–ò–Ø")
            self.log("   üí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
            self.log("     - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω–∞ —Ä–æ–ª—å admin –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö endpoints)")
            self.log("     - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö")
            self.log("     - Endpoints —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        self.log("üèÅ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        
        return working_methods

if __name__ == "__main__":
    test = FinalPickupDeletionTest()
    working_methods = test.run_final_test()
    
    if working_methods:
        print("\nüéâ –†–ï–®–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
        print("–†–∞–±–æ—á–∏–µ —Å–ø–æ—Å–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä':")
        for method in working_methods:
            print(f"  - {method}")
    else:
        print("\n‚ùå –†–ï–®–ï–ù–ò–ï –ù–ï –ù–ê–ô–î–ï–ù–û")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ backend –∫–æ–¥–∞")