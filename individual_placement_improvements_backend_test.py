#!/usr/bin/env python3
"""
üéØ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: –£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint POST /api/operator/cargo/place-individual —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º warehouse_id –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π endpoint POST /api/operator/cargo/place-individual:
1. ‚úÖ warehouse_id —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
2. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω upsert=True –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —è—á–µ–µ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
3. ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
1. POST /api/operator/cargo/place-individual –ë–ï–ó warehouse_id
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å Individual Units
3. GET /api/operator/placement-progress
4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- 100% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Individual Units –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è warehouse_id
- –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö (cargo_name, application_progress, placement_details)
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è frontend –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class IndividualPlacementImprovementsTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_cargo_id = None
        self.test_individual_numbers = []
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def create_test_cargo_with_individual_units(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å Individual Units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å Individual Units...")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Individual Units
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79999999999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79888888888",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è Individual Units",
                "route": "moscow_to_tajikistan",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 1000.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG",
                        "quantity": 3,
                        "weight": 8.0,
                        "price_per_kg": 80.0,
                        "total_amount": 1920.0
                    }
                ],
                "payment_method": "cash_on_delivery"
            }
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/accept",
                json=cargo_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.test_cargo_id = data.get("cargo_id")
                cargo_number = data.get("cargo_number")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ individual_numbers
                if cargo_number:
                    # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: 250XXX/01/01, 250XXX/01/02, 250XXX/02/01, 250XXX/02/02, 250XXX/02/03
                    self.test_individual_numbers = [
                        f"{cargo_number}/01/01",
                        f"{cargo_number}/01/02",
                        f"{cargo_number}/02/01",
                        f"{cargo_number}/02/02",
                        f"{cargo_number}/02/03"
                    ]
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å Individual Units",
                    True,
                    f"–ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {cargo_number} (ID: {self.test_cargo_id}), –æ–∂–∏–¥–∞–µ–º—ã–µ Individual Units: {len(self.test_individual_numbers)} –µ–¥–∏–Ω–∏—Ü"
                )
                return True
            else:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_place_individual_without_warehouse_id(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: POST /api/operator/cargo/place-individual –ë–ï–ó warehouse_id"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –†–ê–ó–ú–ï–©–ï–ù–ò–ï INDIVIDUAL UNIT –ë–ï–ó –£–ö–ê–ó–ê–ù–ò–Ø warehouse_id")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ Individual Units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {units_response.status_code}")
                return False
            
            units_data = units_response.json()
            items = units_data.get("items", [])
            
            if not items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ Individual Units", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Individual Units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            # –ò—â–µ–º –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–ª–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            test_unit = None
            for group in items:
                units = group.get("units", [])
                for unit in units:
                    if not unit.get("is_placed", False):  # –ë–µ—Ä–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
                        test_unit = unit
                        break
                if test_unit:
                    break
            
            if not test_unit:
                self.log_test("–ü–æ–∏—Å–∫ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π Individual Unit", False, "–í—Å–µ Individual Units —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
                return False
            
            individual_number = test_unit.get("individual_number")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ë–ï–ó warehouse_id (–¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            placement_data = {
                "individual_number": individual_number,
                # warehouse_id –ù–ï –£–ö–ê–ó–´–í–ê–ï–ú - –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            print(f"   üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit: {individual_number}")
            print(f"   üîß –ë–ï–ó warehouse_id - –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                if data.get("success", False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
                    required_fields = ["cargo_name", "application_progress", "placement_details"]
                    present_fields = [field for field in required_fields if field in data]
                    
                    details_info = []
                    if "cargo_name" in data:
                        details_info.append(f"cargo_name: '{data.get('cargo_name')}'")
                    
                    if "application_progress" in data:
                        app_progress = data.get("application_progress", {})
                        details_info.append(f"application_progress: {app_progress}")
                    
                    if "placement_details" in data:
                        placement_details = data.get("placement_details", {})
                        details_info.append(f"placement_details: {placement_details}")
                    
                    if len(present_fields) >= 2:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 2 –∏–∑ 3 –ø–æ–ª–µ–π
                        self.log_test(
                            "–†–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit –ë–ï–ó warehouse_id",
                            True,
                            f"–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢! warehouse_id –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {', '.join(details_info)}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏",
                            False,
                            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {present_fields}",
                            f"–ú–∏–Ω–∏–º—É–º 2 –∏–∑ {required_fields}",
                            str(present_fields)
                        )
                        return False
                else:
                    error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.log_test(
                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit –ë–ï–ó warehouse_id",
                        False,
                        f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {error_message}",
                        "–£—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º warehouse_id",
                        f"–û—à–∏–±–∫–∞: {error_message}"
                    )
                    return False
            elif response.status_code == 422:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è warehouse_id (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞)
                try:
                    error_data = response.json()
                    error_detail = error_data.get("detail", "")
                    if "warehouse_id" in str(error_detail).lower():
                        self.log_test(
                            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è warehouse_id",
                            False,
                            f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: warehouse_id –≤—Å–µ –µ—â–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è! –û—à–∏–±–∫–∞: {error_detail}",
                            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ warehouse_id",
                            f"HTTP 422: {error_detail}"
                        )
                        return False
                    else:
                        self.log_test(
                            "–†–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit",
                            False,
                            f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å warehouse_id): {error_detail}",
                            "–£—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ",
                            f"HTTP 422: {error_detail}"
                        )
                        return False
                except:
                    self.log_test(
                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit",
                        False,
                        f"HTTP 422 –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                        "–£—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ",
                        "HTTP 422"
                    )
                    return False
            else:
                self.log_test(
                    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit –ë–ï–ó warehouse_id",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}",
                    "HTTP 200",
                    f"HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–†–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit –ë–ï–ó warehouse_id", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_progress_update(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            print("üéØ –¢–ï–°–¢: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –î–û —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response_before = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
            
            if response_before.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–¥–æ)", False, f"–û—à–∏–±–∫–∞: {response_before.status_code}")
                return False
            
            progress_before = response_before.json()
            placed_before = progress_before.get("placed_units", 0)
            total_before = progress_before.get("total_units", 0)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –µ—â–µ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ)
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code == 200:
                units_data = units_response.json()
                items = units_data.get("items", [])
                
                # –ò—â–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
                test_unit = None
                for group in items:
                    units = group.get("units", [])
                    for unit in units:
                        if not unit.get("is_placed", False):
                            test_unit = unit
                            break
                    if test_unit:
                        break
                
                if test_unit:
                    individual_number = test_unit.get("individual_number")
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É
                    placement_data = {
                        "individual_number": individual_number,
                        "block_number": 1,
                        "shelf_number": 1,
                        "cell_number": 2  # –î—Ä—É–≥–∞—è —è—á–µ–π–∫–∞
                    }
                    
                    placement_response = self.session.post(
                        f"{API_BASE}/operator/cargo/place-individual",
                        json=placement_data,
                        timeout=30
                    )
                    
                    if placement_response.status_code == 200:
                        placement_data = placement_response.json()
                        if placement_data.get("success", False):
                            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ü–û–°–õ–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                            response_after = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
                            
                            if response_after.status_code == 200:
                                progress_after = response_after.json()
                                placed_after = progress_after.get("placed_units", 0)
                                total_after = progress_after.get("total_units", 0)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
                                if placed_after > placed_before:
                                    self.log_test(
                                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                        True,
                                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –î–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placed_before}/{total_before}, –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placed_after}/{total_after}"
                                    )
                                    return True
                                else:
                                    self.log_test(
                                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                        False,
                                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è",
                                        f"placed_units > {placed_before}",
                                        f"placed_units = {placed_after}"
                                    )
                                    return False
                            else:
                                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø–æ—Å–ª–µ)", False, f"–û—à–∏–±–∫–∞: {response_after.status_code}")
                                return False
                        else:
                            self.log_test("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", False, "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                            return False
                    else:
                        self.log_test("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", False, f"HTTP –æ—à–∏–±–∫–∞: {placement_response.status_code}")
                        return False
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü, —Å—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º
                    self.log_test(
                        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã. –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {placed_before}/{total_before}"
                    )
                    return True
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ Individual Units –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", False, f"–û—à–∏–±–∫–∞: {units_response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_improved_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            print("üéØ –¢–ï–°–¢: –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö")
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
            error_test_cases = [
                {
                    "name": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Individual Number",
                    "data": {
                        "individual_number": "999999/99/99",
                        "block_number": 1,
                        "shelf_number": 1,
                        "cell_number": 1
                    },
                    "expected_keywords": ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "individual", "–µ–¥–∏–Ω–∏—Ü–∞"]
                },
                {
                    "name": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Individual Number",
                    "data": {
                        "individual_number": "invalid_format",
                        "block_number": 1,
                        "shelf_number": 1,
                        "cell_number": 1
                    },
                    "expected_keywords": ["—Ñ–æ—Ä–º–∞—Ç", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", "individual"]
                },
                {
                    "name": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏",
                    "data": {
                        "individual_number": "250001/01/01",  # –ú–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                        "block_number": 999,
                        "shelf_number": 999,
                        "cell_number": 999
                    },
                    "expected_keywords": ["—è—á–µ–π–∫–∞", "–±–ª–æ–∫", "–ø–æ–ª–∫–∞"]
                }
            ]
            
            success_count = 0
            total_tests = len(error_test_cases)
            
            for test_case in error_test_cases:
                print(f"  üìã –¢–µ—Å—Ç: {test_case['name']}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/cargo/place-individual",
                    json=test_case["data"],
                    timeout=30
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                if response.status_code in [200, 400, 404, 422]:
                    try:
                        data = response.json()
                        error_message = data.get("message", "") or data.get("error", "") or data.get("detail", "")
                        
                        if error_message:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                            message_lower = error_message.lower()
                            found_keywords = [kw for kw in test_case["expected_keywords"] if kw in message_lower]
                            
                            if found_keywords:
                                print(f"    ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_message}")
                                success_count += 1
                            else:
                                print(f"    ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ: {error_message}")
                                success_count += 0.5  # –ß–∞—Å—Ç–∏—á–Ω—ã–π –∑–∞—á–µ—Ç
                        else:
                            print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
                    except json.JSONDecodeError:
                        print(f"    ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç")
                else:
                    print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥: {response.status_code}")
            
            success_rate = (success_count / total_tests) * 100
            
            if success_rate >= 75:
                self.log_test(
                    "–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
                    True,
                    f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —É–ª—É—á—à–µ–Ω–∞! {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ({success_rate:.1f}%)"
                )
                return True
            else:
                self.log_test(
                    "–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
                    False,
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö: {success_count}/{total_tests} ({success_rate:.1f}%)",
                    "–ú–∏–Ω–∏–º—É–º 75%",
                    f"{success_rate:.1f}%"
                )
                return False
                
        except Exception as e:
            self.log_test("–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üéØ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: –£–ª—É—á—à–µ–Ω–Ω—ã–π endpoint POST /api/operator/cargo/place-individual")
        print("=" * 100)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è Individual Units
        if not self.create_test_cargo_with_individual_units():
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        test_results = []
        
        test_results.append(("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: –†–∞–∑–º–µ—â–µ–Ω–∏–µ Individual Unit –ë–ï–ó warehouse_id", self.test_place_individual_without_warehouse_id()))
        test_results.append(("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", self.test_placement_progress_update()))
        test_results.append(("–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_improved_error_handling()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 100)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–í–¢–û–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        print("=" * 100)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            print("‚úÖ warehouse_id –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö")
            print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
            print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 75:
            print("üéØ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.")
        
        return success_rate >= 75

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IndividualPlacementImprovementsTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è endpoint POST /api/operator/cargo/place-individual —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\n‚ùå –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        return 1

if __name__ == "__main__":
    exit(main())