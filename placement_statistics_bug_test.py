#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ì–ê –° placementStatistics –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ë–õ–ï–ú–´:
- –í frontend –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è placementStatistics —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç {location_code, cargo_name, cargo_number, placed_at, warehouse_name}
- –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç React –æ—à–∏–±–∫—É "Objects are not valid as a React child"
- –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ {today_placements, session_placements, recent_placements}

–ü–û–î–û–ó–†–ï–ù–ò–Ø:
- API /api/operator/placement-statistics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
- –ò–ª–∏ –≥–¥–µ-—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å placementStatistics —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞
- –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API /api/operator/placement-statistics
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è today_placements, session_placements, recent_placements
4. –ù–ï –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è location_code, cargo_name, cargo_number, placed_at, warehouse_name

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∞ –Ω–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞.
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-ops.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementStatisticsBugTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    user_info = data.get("user", {})
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})"
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_placement_statistics_api_structure(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API /api/operator/placement-statistics"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/placement-statistics", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤
                if not isinstance(data, dict):
                    self.log_result(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API placement-statistics",
                        False,
                        f"API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {type(data).__name__} –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞",
                        {"response_type": type(data).__name__, "response_data": data}
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ü–†–ê–í–ò–õ–¨–ù–´–• –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                expected_fields = ["today_placements", "session_placements", "recent_placements"]
                present_expected_fields = [field for field in expected_fields if field in data]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –ø–æ–ª–µ–π –≥—Ä—É–∑–∞
                wrong_fields = ["location_code", "cargo_name", "cargo_number", "placed_at", "warehouse_name"]
                present_wrong_fields = [field for field in wrong_fields if field in data]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                has_correct_structure = len(present_expected_fields) > 0
                has_wrong_structure = len(present_wrong_fields) > 0
                
                if has_correct_structure and not has_wrong_structure:
                    self.log_result(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API placement-statistics",
                        True,
                        f"API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–æ–ª—è–º–∏: {present_expected_fields}",
                        {
                            "correct_fields_present": present_expected_fields,
                            "wrong_fields_absent": True,
                            "full_response": data
                        }
                    )
                    return True
                elif has_wrong_structure:
                    self.log_result(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API placement-statistics",
                        False,
                        f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ü–û–î–¢–í–ï–†–ñ–î–ï–ù: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è –≥—Ä—É–∑–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {present_wrong_fields}",
                        {
                            "wrong_fields_present": present_wrong_fields,
                            "expected_fields_present": present_expected_fields,
                            "full_response": data,
                            "bug_confirmed": True,
                            "react_error_cause": "Objects are not valid as a React child - API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≥—Ä—É–∑–∞"
                        }
                    )
                    return False
                else:
                    self.log_result(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API placement-statistics",
                        False,
                        f"API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                        {
                            "expected_fields_missing": [field for field in expected_fields if field not in data],
                            "actual_fields": list(data.keys()),
                            "full_response": data
                        }
                    )
                    return False
            else:
                self.log_result(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API placement-statistics",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API placement-statistics", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_placement_statistics_data_types(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ placement-statistics"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/placement-statistics", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
                type_checks = []
                
                if "today_placements" in data:
                    today_type = type(data["today_placements"]).__name__
                    is_numeric = isinstance(data["today_placements"], (int, float))
                    type_checks.append({
                        "field": "today_placements",
                        "type": today_type,
                        "value": data["today_placements"],
                        "is_numeric": is_numeric
                    })
                
                if "session_placements" in data:
                    session_type = type(data["session_placements"]).__name__
                    is_numeric = isinstance(data["session_placements"], (int, float))
                    type_checks.append({
                        "field": "session_placements",
                        "type": session_type,
                        "value": data["session_placements"],
                        "is_numeric": is_numeric
                    })
                
                if "recent_placements" in data:
                    recent_type = type(data["recent_placements"]).__name__
                    is_list = isinstance(data["recent_placements"], list)
                    type_checks.append({
                        "field": "recent_placements",
                        "type": recent_type,
                        "value": data["recent_placements"],
                        "is_list": is_list
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                all_types_correct = True
                for check in type_checks:
                    if check["field"] in ["today_placements", "session_placements"]:
                        if not check["is_numeric"]:
                            all_types_correct = False
                    elif check["field"] == "recent_placements":
                        if not check["is_list"]:
                            all_types_correct = False
                
                if all_types_correct and type_checks:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö placement-statistics",
                        True,
                        f"–í—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π",
                        {"type_checks": type_checks}
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö placement-statistics",
                        False,
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—è—Ö",
                        {"type_checks": type_checks, "all_correct": all_types_correct}
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö placement-statistics",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö placement-statistics", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_placement_statistics_values(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ placement-statistics"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/placement-statistics", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                value_checks = []
                
                if "today_placements" in data:
                    today_val = data["today_placements"]
                    is_valid = isinstance(today_val, (int, float)) and today_val >= 0
                    value_checks.append({
                        "field": "today_placements",
                        "value": today_val,
                        "is_valid": is_valid,
                        "reason": "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                    })
                
                if "session_placements" in data:
                    session_val = data["session_placements"]
                    is_valid = isinstance(session_val, (int, float)) and session_val >= 0
                    value_checks.append({
                        "field": "session_placements",
                        "value": session_val,
                        "is_valid": is_valid,
                        "reason": "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                    })
                
                if "recent_placements" in data:
                    recent_val = data["recent_placements"]
                    is_valid = isinstance(recent_val, list)
                    value_checks.append({
                        "field": "recent_placements",
                        "value": f"–º–∞—Å—Å–∏–≤ –∏–∑ {len(recent_val)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤" if is_valid else recent_val,
                        "is_valid": is_valid,
                        "reason": "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º"
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
                all_values_valid = all(check["is_valid"] for check in value_checks)
                
                if all_values_valid and value_checks:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π placement-statistics",
                        True,
                        f"–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã",
                        {"value_checks": value_checks}
                    )
                    return True
                else:
                    invalid_checks = [check for check in value_checks if not check["is_valid"]]
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π placement-statistics",
                        False,
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {len(invalid_checks)} –ø–æ–ª–µ–π",
                        {"invalid_checks": invalid_checks, "all_checks": value_checks}
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π placement-statistics",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π placement-statistics", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –±–∞–≥–∞ placementStatistics"""
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ì–ê –° placementStatistics –í TAJLINE.TJ")
        print("=" * 80)
        print("üéØ –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É API /api/operator/placement-statistics")
        print("üîç –ü–†–û–ë–õ–ï–ú–ê: React –æ—à–∏–±–∫–∞ 'Objects are not valid as a React child'")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
            return False
        
        # –®–∞–≥ 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
        api_structure_correct = self.test_placement_statistics_api_structure()
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è)
        if api_structure_correct:
            self.test_placement_statistics_data_types()
            self.test_placement_statistics_values()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–ê–ì–ê")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        critical_test = next((r for r in self.test_results if "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê" in r["test"]), None)
        
        print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ì–ê:")
        
        if critical_test:
            if critical_test["success"]:
                print("   ‚úÖ API /api/operator/placement-statistics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                print("   ‚úÖ –ü–æ–ª—è today_placements, session_placements, recent_placements –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                print("   ‚úÖ –ü–æ–ª—è –≥—Ä—É–∑–∞ (location_code, cargo_name, etc.) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                print("   ‚úÖ React –æ—à–∏–±–∫–∞ –ù–ï –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–Ω–∏–∫–∞—Ç—å –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ API")
                print("\nü§î –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ frontend –∫–æ–¥–µ, –≥–¥–µ placementStatistics")
                print("   –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                details = critical_test.get("details", {})
                if details.get("bug_confirmed"):
                    print("   üö® –ë–ê–ì –ü–û–î–¢–í–ï–†–ñ–î–ï–ù: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ì–†–£–ó–ê –≤–º–µ—Å—Ç–æ –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
                    print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –≥—Ä—É–∑–∞: {details.get('wrong_fields_present', [])}")
                    print("   ‚ùå –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç React –æ—à–∏–±–∫—É 'Objects are not valid as a React child'")
                    print("\nüîß –†–ï–®–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–∏—Ç—å API /api/operator/placement-statistics")
                    print("   —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∞ –Ω–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞")
                else:
                    print("   ‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                    print("   üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if critical_test and not critical_test["success"]:
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å backend –∫–æ–¥ endpoint /api/operator/placement-statistics")
            print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∞ –Ω–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞")
            print("   3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API")
        else:
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∫–æ–¥ –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placementStatistics")
            print("   2. –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –≥–¥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞")
            print("   3. –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        return success_rate >= 75.0

if __name__ == "__main__":
    tester = PlacementStatisticsBugTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        sys.exit(1)