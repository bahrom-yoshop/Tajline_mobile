#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í –í API placement-status
=======================================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∑–∞—è–≤–∫–∏:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å source_warehouse_name - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞ (–ú–æ—Å–∫–≤–∞)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å target_warehouse_name - –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å delivery_warehouse - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–ª–∞–¥–æ–º –≤ –≥–æ—Ä–æ–¥–µ –¥–æ—Å—Ç–∞–≤–∫–∏, –ù–ï —Å–∫–ª–∞–¥–æ–º –ø—Ä–∏—ë–º–∞
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –µ—Å–ª–∏ delivery_city = "–Ø–≤–∞–Ω", —Ç–æ target_warehouse_name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1"
3. –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ä–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Å–∫–ª–∞–¥—ã –≤—ã–¥–∞—á–∏

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è get_warehouse_by_city() –¥–ª—è —É–º–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
- –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–∞–¥–∂–∏–∫—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ã
- Fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- –°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞: "–ú–æ—Å–∫–≤–∞ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π" (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
- –°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1" –¥–ª—è –≥–æ—Ä–æ–¥–∞ –Ø–≤–∞–Ω)
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class WarehouseLogicTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "api_accessible": False,
            "applications_found": False,
            "warehouse_logic_correct": False,
            "total_tests": 0,
            "passed_tests": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_available_applications(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data if isinstance(data, list) else data.get("items", [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                self.test_results["api_accessible"] = True
                self.test_results["applications_found"] = len(items) > 0
                return items
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} - {response.text}", "ERROR")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}", "ERROR")
            return []
    
    def test_placement_status_api(self, cargo_id, cargo_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/{cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API placement-status –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}")
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-status: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ placement-status: {e}", "ERROR")
            return None
    
    def analyze_warehouse_logic(self, placement_data, cargo_number):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤"""
        self.log(f"\nüèóÔ∏è –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò –°–ö–õ–ê–î–û–í –î–õ–Ø –ó–ê–Ø–í–ö–ò {cargo_number}:")
        self.log("=" * 60)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
        delivery_city = placement_data.get('delivery_city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        pickup_city = placement_data.get('pickup_city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        source_warehouse_name = placement_data.get('source_warehouse_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
        target_warehouse_name = placement_data.get('target_warehouse_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
        delivery_warehouse = placement_data.get('delivery_warehouse', '–ù–µ —É–∫–∞–∑–∞–Ω')
        accepting_warehouse = placement_data.get('accepting_warehouse', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        self.log(f"üìç –ì–æ—Ä–æ–¥ –∑–∞–±–æ—Ä–∞ (pickup_city): '{pickup_city}'")
        self.log(f"üìç –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (delivery_city): '{delivery_city}'")
        self.log(f"üè¢ –°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞ (source_warehouse_name): '{source_warehouse_name}'")
        self.log(f"üè¢ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥ (target_warehouse_name): '{target_warehouse_name}'")
        self.log(f"üè¢ –°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏ (delivery_warehouse): '{delivery_warehouse}'")
        self.log(f"üè¢ –ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å–∫–ª–∞–¥ (accepting_warehouse): '{accepting_warehouse}'")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_results = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏—ë–º–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ú–æ—Å–∫–≤–∞)
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê 1: –°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–∏–º")
        moscow_keywords = ['–º–æ—Å–∫–≤–∞', 'moscow', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π']
        is_moscow_warehouse = any(keyword.lower() in source_warehouse_name.lower() for keyword in moscow_keywords)
        
        if is_moscow_warehouse:
            self.log(f"‚úÖ –°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: '{source_warehouse_name}' (—Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ—Å–∫–æ–≤—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)")
            test_results.append(("source_warehouse_moscow", True, f"–°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞: {source_warehouse_name}"))
        else:
            self.log(f"‚ùå –°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: '{source_warehouse_name}' (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ—Å–∫–æ–≤—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)")
            test_results.append(("source_warehouse_moscow", False, f"–°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞: {source_warehouse_name}"))
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∫–ª–∞–¥–∞ –≤—ã–¥–∞—á–∏ –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê 2: –°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏")
        if delivery_city != '–ù–µ —É–∫–∞–∑–∞–Ω' and target_warehouse_name != '–ù–µ —É–∫–∞–∑–∞–Ω':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
            city_in_warehouse = delivery_city.lower() in target_warehouse_name.lower()
            
            if city_in_warehouse:
                self.log(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –≥–æ—Ä–æ–¥ '{delivery_city}' —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–∫–ª–∞–¥–µ '{target_warehouse_name}'")
                test_results.append(("warehouse_city_match", True, f"–ì–æ—Ä–æ–¥: {delivery_city} ‚Üí –°–∫–ª–∞–¥: {target_warehouse_name}"))
            else:
                self.log(f"‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –≥–æ—Ä–æ–¥ '{delivery_city}' –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–∫–ª–∞–¥–µ '{target_warehouse_name}'")
                test_results.append(("warehouse_city_match", False, f"–ì–æ—Ä–æ–¥: {delivery_city} ‚Üí –°–∫–ª–∞–¥: {target_warehouse_name}"))
        else:
            self.log(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –≥–æ—Ä–æ–¥='{delivery_city}', —Å–∫–ª–∞–¥='{target_warehouse_name}'")
            test_results.append(("warehouse_city_match", False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"))
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ delivery_warehouse –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–∫–ª–∞–¥–æ–º –ø—Ä–∏—ë–º–∞
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê 3: delivery_warehouse –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–ª–∞–¥–æ–º –ø—Ä–∏—ë–º–∞")
        if delivery_warehouse != '–ù–µ —É–∫–∞–∑–∞–Ω' and source_warehouse_name != '–ù–µ —É–∫–∞–∑–∞–Ω':
            is_same_warehouse = delivery_warehouse.lower() == source_warehouse_name.lower()
            
            if not is_same_warehouse:
                self.log(f"‚úÖ –°–∫–ª–∞–¥—ã —Ä–∞–∑–ª–∏—á–Ω—ã: delivery_warehouse='{delivery_warehouse}' ‚â† source_warehouse='{source_warehouse_name}'")
                test_results.append(("different_warehouses", True, f"–í—ã–¥–∞—á–∞: {delivery_warehouse} ‚â† –ü—Ä–∏—ë–º: {source_warehouse_name}"))
            else:
                self.log(f"‚ùå –°–∫–ª–∞–¥—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã: delivery_warehouse='{delivery_warehouse}' = source_warehouse='{source_warehouse_name}'")
                test_results.append(("different_warehouses", False, f"–í—ã–¥–∞—á–∞: {delivery_warehouse} = –ü—Ä–∏—ë–º: {source_warehouse_name}"))
        else:
            self.log(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏–µ —Å–∫–ª–∞–¥–æ–≤: delivery='{delivery_warehouse}', source='{source_warehouse_name}'")
            test_results.append(("different_warehouses", False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"))
        
        # 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ "–Ø–≤–∞–Ω"
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê 4: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '–Ø–≤–∞–Ω'")
        if '—è–≤–∞–Ω' in delivery_city.lower():
            expected_warehouse = "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1"
            yavan_match = expected_warehouse.lower() in target_warehouse_name.lower()
            
            if yavan_match:
                self.log(f"‚úÖ –Ø–≤–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: '{target_warehouse_name}' —Å–æ–¥–µ—Ä–∂–∏—Ç '{expected_warehouse}'")
                test_results.append(("yavan_specific", True, f"–Ø–≤–∞–Ω ‚Üí {target_warehouse_name}"))
            else:
                self.log(f"‚ùå –Ø–≤–∞–Ω –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: '{target_warehouse_name}' –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç '{expected_warehouse}'")
                test_results.append(("yavan_specific", False, f"–Ø–≤–∞–Ω ‚Üí {target_warehouse_name} (–æ–∂–∏–¥–∞–ª—Å—è: {expected_warehouse})"))
        else:
            self.log(f"‚ÑπÔ∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ø–≤–∞–Ω ('{delivery_city}'), —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            test_results.append(("yavan_specific", True, f"–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {delivery_city}"))
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–ù–µ —É–∫–∞–∑–∞–Ω")
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê 5: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ '–ù–µ —É–∫–∞–∑–∞–Ω')")
        critical_fields = {
            'delivery_city': delivery_city,
            'source_warehouse_name': source_warehouse_name,
            'target_warehouse_name': target_warehouse_name,
            'delivery_warehouse': delivery_warehouse
        }
        
        empty_fields = [field for field, value in critical_fields.items() if value == '–ù–µ —É–∫–∞–∑–∞–Ω']
        
        if not empty_fields:
            self.log(f"‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            test_results.append(("data_quality", True, "–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"))
        else:
            self.log(f"‚ùå –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã: {', '.join(empty_fields)}")
            test_results.append(("data_quality", False, f"–ü—É—Å—Ç—ã–µ –ø–æ–ª—è: {', '.join(empty_fields)}"))
        
        return test_results
    
    def test_multiple_applications(self, applications):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞—è–≤–æ–∫"""
        self.log(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –°–ö–õ–ê–î–û–í –î–õ–Ø {len(applications)} –ó–ê–Ø–í–û–ö")
        self.log("=" * 80)
        
        all_test_results = []
        
        for i, app in enumerate(applications[:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∑–∞—è–≤–∫–∏
            cargo_id = app.get('id') or app.get('cargo_id')
            cargo_number = app.get('cargo_number', f'Unknown_{i+1}')
            
            if not cargo_id:
                self.log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞—è–≤–∫–∏ {cargo_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID")
                continue
            
            self.log(f"\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò #{i+1}: {cargo_number}")
            self.log("-" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ placement-status
            placement_data = self.test_placement_status_api(cargo_id, cargo_number)
            
            if placement_data:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–∫–ª–∞–¥–æ–≤
                test_results = self.analyze_warehouse_logic(placement_data, cargo_number)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                app_result = {
                    "cargo_number": cargo_number,
                    "cargo_id": cargo_id,
                    "placement_data": placement_data,
                    "test_results": test_results,
                    "passed_tests": sum(1 for _, passed, _ in test_results if passed),
                    "total_tests": len(test_results)
                }
                all_test_results.append(app_result)
                
                self.test_results["total_tests"] += len(test_results)
                self.test_results["passed_tests"] += app_result["passed_tests"]
            else:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}")
        
        self.test_results["detailed_results"] = all_test_results
        self.test_results["warehouse_logic_correct"] = (
            self.test_results["passed_tests"] == self.test_results["total_tests"] 
            and self.test_results["total_tests"] > 0
        )
        
        return len(all_test_results) > 0
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–ö–ò –°–ö–õ–ê–î–û–í:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API available-for-placement: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –ù–∞–ª–∏—á–∏–µ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['applications_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        self.log(f"  4. üéØ –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {'‚úÖ –ö–û–†–†–ï–ö–¢–ù–ê' if self.test_results['warehouse_logic_correct'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´'}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = self.test_results["total_tests"]
        passed_tests = self.test_results["passed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        self.log(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"  –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}")
        self.log(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞—è–≤–∫–∞–º
        if self.test_results["detailed_results"]:
            self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ó–ê–Ø–í–ö–ê–ú:")
            for i, result in enumerate(self.test_results["detailed_results"], 1):
                cargo_number = result["cargo_number"]
                app_success_rate = (result["passed_tests"] / result["total_tests"] * 100) if result["total_tests"] > 0 else 0
                
                self.log(f"\n  üì¶ –ó–ê–Ø–í–ö–ê #{i}: {cargo_number}")
                self.log(f"    –£—Å–ø–µ—Ö: {result['passed_tests']}/{result['total_tests']} ({app_success_rate:.1f}%)")
                
                # –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                placement_data = result["placement_data"]
                self.log(f"    –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {placement_data.get('delivery_city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                self.log(f"    –°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞: {placement_data.get('source_warehouse_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                self.log(f"    –°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏: {placement_data.get('target_warehouse_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
                for test_name, passed, description in result["test_results"]:
                    status = "‚úÖ" if passed else "‚ùå"
                    self.log(f"    {status} {test_name}: {description}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if self.test_results["warehouse_logic_correct"] and success_rate >= 90:
            self.log("‚úÖ –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            self.log("üéâ –°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏")
            self.log("üìä –§—É–Ω–∫—Ü–∏—è get_warehouse_by_city() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è")
            self.log("üèóÔ∏è –ú–∞–ø–ø–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –õ–û–ì–ò–ö–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í!")
            self.log(f"üîç –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}% (—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚â•90%)")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_warehouse_by_city()")
        
        return self.test_results["warehouse_logic_correct"] and success_rate >= 90
    
    def run_warehouse_logic_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ª–æ–≥–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        applications = self.get_available_applications()
        if not applications:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫
        if not self.test_multiple_applications(applications):
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏", "ERROR")
            return False
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseLogicTester()
    
    try:
        success = tester.run_warehouse_logic_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –°–ö–õ–ê–î–û–í –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üèóÔ∏è –§—É–Ω–∫—Ü–∏—è get_warehouse_by_city() —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("üìä –°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –°–ö–õ–ê–î–û–í –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_warehouse_by_city()")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()