#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 4 Backend - API endpoints –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
===============================================================================================

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints —ç—Ç–∞–ø–∞ 4 —Å–∏—Å—Ç–µ–º—ã "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" - 
–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º, –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **GET /api/cargo/list-by-status** - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
2. **GET /api/cargo/{cargo_number}/full-history** - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≥—Ä—É–∑–æ–º
3. **GET /api/cargo/statistics** - –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–∑–æ–≤

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å warehouse_operator (+79777888999/warehouse123)
2. **–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º**:
   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º: all, loaded_on_transport, in_transit, arrived_destination, completed, placed_in_warehouse
   - –ü–æ–∏—Å–∫ –ø–æ cargo_number, sender_full_name, recipient_full_name, cargo_name
   - –ü–∞–≥–∏–Ω–∞—Ü–∏—è (page, per_page, total_count, total_pages)
   - –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ transport_info –∏ warehouse_info
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ display_status –∏ display_status_name
3. **–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≥—Ä—É–∑–∞**:
   - –°–æ–±—ã—Ç–∏—è: created, placed_in_warehouse, loaded_on_transport, loading_session, status_updated
   - –î–µ—Ç–∞–ª–∏ –¥–ª—è cada —Å–æ–±—ã—Ç–∏—è: timestamp, description, details, performed_by
   - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ cargo_info
4. **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–∑–æ–≤**:
   - cargo_overview: total_cargo, operator_cargo, user_requests, placed_in_warehouse, loaded_on_transport
   - status_breakdown: by_status, placed_ratio, transport_ratio
   - transport_overview: total_transports, active_transports, active_loading_sessions
   - warehouse_overview: total_warehouses, placed_cargo_count
   - weight_and_value: total_weight_kg, total_value_rub, average_weight_kg, average_value_rub

–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:
**–°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤**
**–°—Ü–µ–Ω–∞—Ä–∏–π 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É**
**–°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–∑–∞**
**–°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–∞–≥–∏–Ω–∞—Ü–∏—è**
**–°—Ü–µ–Ω–∞—Ä–∏–π 5: –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–∑–∞**
**–°—Ü–µ–Ω–∞—Ä–∏–π 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–∑–æ–≤**

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- ‚úÖ –í—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- ‚úÖ –ü–æ–∏—Å–∫ –Ω–∞—Ö–æ–¥–∏—Ç –≥—Ä—É–∑—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
- ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
- ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- ‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ transport_info –∏ warehouse_info
- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (404, 400 –∫–æ–¥—ã)
"""

import requests
import json
import sys
import os
from datetime import datetime
from typing import Dict, List, Any, Optional

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class Stage4CargoListTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "list_by_status_tests": {},
            "full_history_tests": {},
            "statistics_tests": {},
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "detailed_results": []
        }
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def test_cargo_list_by_status_no_filters(self) -> bool:
        """–°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.log("\nüìã –°–¶–ï–ù–ê–†–ò–ô 1: –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤")
        self.log("-" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/cargo/list-by-status")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["cargo_list", "pagination", "filters"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}", "ERROR")
                    return False
                
                cargo_list = data.get("cargo_list", [])
                pagination = data.get("pagination", {})
                
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤")
                self.log(f"‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {pagination}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞
                if cargo_list:
                    first_cargo = cargo_list[0]
                    cargo_fields = ["cargo_number", "display_status", "display_status_name"]
                    
                    for field in cargo_fields:
                        if field in first_cargo:
                            self.log(f"‚úÖ –ü–æ–ª–µ {field} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {first_cargo.get(field)}")
                        else:
                            self.log(f"‚ö†Ô∏è –ü–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", "WARNING")
                
                self.test_results["list_by_status_tests"]["no_filters"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}", "ERROR")
                self.test_results["list_by_status_tests"]["no_filters"] = False
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", "ERROR")
            self.test_results["list_by_status_tests"]["no_filters"] = False
            return False
    
    def test_cargo_list_by_status_filter(self) -> bool:
        """–°—Ü–µ–Ω–∞—Ä–∏–π 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        self.log("\nüîç –°–¶–ï–ù–ê–†–ò–ô 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É")
        self.log("-" * 60)
        
        test_statuses = ["loaded_on_transport", "placed_in_warehouse", "in_transit"]
        all_passed = True
        
        for status in test_statuses:
            self.log(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {status}")
            
            try:
                response = self.session.get(f"{API_BASE}/cargo/list-by-status", params={
                    "status": status
                })
                
                if response.status_code == 200:
                    data = response.json()
                    cargo_list = data.get("cargo_list", [])
                    
                    self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    if cargo_list:
                        for cargo in cargo_list[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥—Ä—É–∑–∞
                            cargo_status = cargo.get("display_status", "")
                            if status in cargo_status or cargo_status == status:
                                self.log(f"‚úÖ –ì—Ä—É–∑ {cargo.get('cargo_number')} –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {cargo_status}")
                            else:
                                self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ {cargo.get('cargo_number')} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {cargo_status}", "WARNING")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ transport_info –¥–ª—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
                    if status == "loaded_on_transport" and cargo_list:
                        for cargo in cargo_list[:2]:
                            if "transport_info" in cargo:
                                self.log(f"‚úÖ –ì—Ä—É–∑ {cargo.get('cargo_number')} —Å–æ–¥–µ—Ä–∂–∏—Ç transport_info")
                            else:
                                self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ {cargo.get('cargo_number')} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç transport_info", "WARNING")
                    
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É {status}: {response.status_code}", "ERROR")
                    all_passed = False
                    
            except Exception as e:
                self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ {status}: {e}", "ERROR")
                all_passed = False
        
        self.test_results["list_by_status_tests"]["status_filter"] = all_passed
        return all_passed
    
    def test_cargo_list_search(self) -> bool:
        """–°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–∑–∞"""
        self.log("\nüîç –°–¶–ï–ù–ê–†–ò–ô 3: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–∑–∞")
        self.log("-" * 60)
        
        search_terms = ["250101", "2501"]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        all_passed = True
        
        for search_term in search_terms:
            self.log(f"üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω—É: '{search_term}'")
            
            try:
                response = self.session.get(f"{API_BASE}/cargo/list-by-status", params={
                    "search": search_term
                })
                
                if response.status_code == 200:
                    data = response.json()
                    cargo_list = data.get("cargo_list", [])
                    
                    self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É '{search_term}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∏—Å–∫–æ–º—ã–π —Ç–µ—Ä–º–∏–Ω
                    if cargo_list:
                        for cargo in cargo_list[:3]:
                            cargo_number = cargo.get("cargo_number", "")
                            sender_name = cargo.get("sender_full_name", "")
                            recipient_name = cargo.get("recipient_full_name", "")
                            cargo_name = cargo.get("cargo_name", "")
                            
                            if (search_term.lower() in cargo_number.lower() or 
                                search_term.lower() in sender_name.lower() or
                                search_term.lower() in recipient_name.lower() or
                                search_term.lower() in cargo_name.lower()):
                                self.log(f"‚úÖ –ì—Ä—É–∑ {cargo_number} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∏—Å–∫—É")
                            else:
                                self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ {cargo_number} –º–æ–∂–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫—É", "WARNING")
                    
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ '{search_term}': {response.status_code}", "ERROR")
                    all_passed = False
                    
            except Exception as e:
                self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ '{search_term}': {e}", "ERROR")
                all_passed = False
        
        self.test_results["list_by_status_tests"]["search"] = all_passed
        return all_passed
    
    def test_cargo_list_pagination(self) -> bool:
        """–°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–∞–≥–∏–Ω–∞—Ü–∏—è"""
        self.log("\nüìÑ –°–¶–ï–ù–ê–†–ò–ô 4: –ü–∞–≥–∏–Ω–∞—Ü–∏—è")
        self.log("-" * 60)
        
        try:
            # –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = self.session.get(f"{API_BASE}/cargo/list-by-status", params={
                "page": 1,
                "per_page": 5
            })
            
            if response.status_code == 200:
                data = response.json()
                pagination = data.get("pagination", {})
                cargo_list = data.get("cargo_list", [])
                
                self.log(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –ø–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                pagination_fields = ["total_count", "page", "per_page", "total_pages", "has_next", "has_prev"]
                for field in pagination_fields:
                    if field in pagination:
                        self.log(f"‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è {field}: {pagination[field]}")
                    else:
                        self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {field}", "ERROR")
                        return False
                
                # –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                if pagination.get("has_next", False):
                    response2 = self.session.get(f"{API_BASE}/cargo/list-by-status", params={
                        "page": 2,
                        "per_page": 5
                    })
                    
                    if response2.status_code == 200:
                        data2 = response2.json()
                        cargo_list2 = data2.get("cargo_list", [])
                        self.log(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –ø–æ–ª—É—á–µ–Ω–æ {len(cargo_list2)} –≥—Ä—É–∑–æ–≤")
                    else:
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã 2: {response2.status_code}", "ERROR")
                        return False
                
                self.test_results["list_by_status_tests"]["pagination"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {response.status_code}", "ERROR")
                self.test_results["list_by_status_tests"]["pagination"] = False
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}", "ERROR")
            self.test_results["list_by_status_tests"]["pagination"] = False
            return False
    
    def test_cargo_full_history(self) -> bool:
        """–°—Ü–µ–Ω–∞—Ä–∏–π 5: –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–∑–∞"""
        self.log("\nüìö –°–¶–ï–ù–ê–†–ò–ô 5: –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–∑–∞")
        self.log("-" * 60)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ —á—Ç–æ–±—ã –≤–∑—è—Ç—å cargo_number
        try:
            response = self.session.get(f"{API_BASE}/cargo/list-by-status", params={"per_page": 5})
            
            if response.status_code != 200:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤: {response.status_code}", "ERROR")
                return False
            
            data = response.json()
            cargo_list = data.get("cargo_list", [])
            
            if not cargo_list:
                self.log("‚ùå –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç", "ERROR")
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            test_cargo = cargo_list[0]
            cargo_number = test_cargo.get("cargo_number")
            
            if not cargo_number:
                self.log("‚ùå –£ –≥—Ä—É–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç cargo_number", "ERROR")
                return False
            
            self.log(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–∑–∞: {cargo_number}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–∑–∞
            history_response = self.session.get(f"{API_BASE}/cargo/{cargo_number}/full-history")
            
            if history_response.status_code == 200:
                history_data = history_response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["cargo_info", "history", "total_events"]
                missing_fields = [field for field in required_fields if field not in history_data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏—Å—Ç–æ—Ä–∏–∏: {missing_fields}", "ERROR")
                    return False
                
                cargo_info = history_data.get("cargo_info", {})
                history = history_data.get("history", [])
                total_events = history_data.get("total_events", 0)
                
                self.log(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ: {cargo_info.get('cargo_number', 'N/A')}")
                self.log(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {total_events}")
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(history)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏–π
                if history:
                    first_event = history[0]
                    event_fields = ["timestamp", "event_type", "description", "details", "performed_by"]
                    
                    for field in event_fields:
                        if field in first_event:
                            self.log(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {field}: {first_event.get(field)}")
                        else:
                            self.log(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {field}", "WARNING")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                    if len(history) > 1:
                        first_time = history[0].get("timestamp", "")
                        second_time = history[1].get("timestamp", "")
                        if first_time >= second_time:
                            self.log("‚úÖ –°–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)")
                        else:
                            self.log("‚ö†Ô∏è –°–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã", "WARNING")
                
                self.test_results["full_history_tests"]["basic"] = True
                return True
            
            elif history_response.status_code == 404:
                self.log(f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–∑–∞ {cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)", "WARNING")
                self.test_results["full_history_tests"]["basic"] = True  # 404 —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {history_response.status_code} - {history_response.text}", "ERROR")
                self.test_results["full_history_tests"]["basic"] = False
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", "ERROR")
            self.test_results["full_history_tests"]["basic"] = False
            return False
    
    def test_cargo_statistics(self) -> bool:
        """–°—Ü–µ–Ω–∞—Ä–∏–π 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–∑–æ–≤"""
        self.log("\nüìä –°–¶–ï–ù–ê–†–ò–ô 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–∑–æ–≤")
        self.log("-" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/cargo/statistics")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç statistics
                if "statistics" not in data:
                    self.log("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'statistics'", "ERROR")
                    self.test_results["statistics_tests"]["basic"] = False
                    return False
                
                statistics_data = data["statistics"]
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {data.get('message', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                required_sections = [
                    "cargo_overview", 
                    "status_breakdown", 
                    "transport_overview", 
                    "warehouse_overview", 
                    "weight_and_value"
                ]
                
                all_sections_present = True
                
                for section in required_sections:
                    if section in data:
                        section_data = data[section]
                        self.log(f"‚úÖ –†–∞–∑–¥–µ–ª {section}: {section_data}")
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                        if section == "cargo_overview":
                            overview_fields = ["total_cargo", "operator_cargo", "user_requests", "placed_in_warehouse", "loaded_on_transport"]
                            for field in overview_fields:
                                if field in section_data:
                                    self.log(f"  ‚úÖ {field}: {section_data[field]}")
                                else:
                                    self.log(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}", "WARNING")
                        
                        elif section == "status_breakdown":
                            breakdown_fields = ["by_status", "placed_ratio", "transport_ratio"]
                            for field in breakdown_fields:
                                if field in section_data:
                                    self.log(f"  ‚úÖ {field}: {section_data[field]}")
                                else:
                                    self.log(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}", "WARNING")
                        
                        elif section == "transport_overview":
                            transport_fields = ["total_transports", "active_transports", "active_loading_sessions"]
                            for field in transport_fields:
                                if field in section_data:
                                    self.log(f"  ‚úÖ {field}: {section_data[field]}")
                                else:
                                    self.log(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}", "WARNING")
                        
                        elif section == "warehouse_overview":
                            warehouse_fields = ["total_warehouses", "placed_cargo_count"]
                            for field in warehouse_fields:
                                if field in section_data:
                                    self.log(f"  ‚úÖ {field}: {section_data[field]}")
                                else:
                                    self.log(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}", "WARNING")
                        
                        elif section == "weight_and_value":
                            weight_fields = ["total_weight_kg", "total_value_rub", "average_weight_kg", "average_value_rub"]
                            for field in weight_fields:
                                if field in section_data:
                                    self.log(f"  ‚úÖ {field}: {section_data[field]}")
                                else:
                                    self.log(f"  ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}", "WARNING")
                    else:
                        self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {section}", "ERROR")
                        all_sections_present = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                cargo_overview = data.get("cargo_overview", {})
                total_cargo = cargo_overview.get("total_cargo", 0)
                placed_in_warehouse = cargo_overview.get("placed_in_warehouse", 0)
                loaded_on_transport = cargo_overview.get("loaded_on_transport", 0)
                
                if isinstance(total_cargo, (int, float)) and total_cargo >= 0:
                    self.log(f"‚úÖ total_cargo –ª–æ–≥–∏—á–Ω–æ: {total_cargo}")
                else:
                    self.log(f"‚ö†Ô∏è total_cargo –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º: {total_cargo}", "WARNING")
                
                if isinstance(placed_in_warehouse, (int, float)) and placed_in_warehouse >= 0:
                    self.log(f"‚úÖ placed_in_warehouse –ª–æ–≥–∏—á–Ω–æ: {placed_in_warehouse}")
                else:
                    self.log(f"‚ö†Ô∏è placed_in_warehouse –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º: {placed_in_warehouse}", "WARNING")
                
                self.test_results["statistics_tests"]["basic"] = all_sections_present
                return all_sections_present
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code} - {response.text}", "ERROR")
                self.test_results["statistics_tests"]["basic"] = False
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", "ERROR")
            self.test_results["statistics_tests"]["basic"] = False
            return False
    
    def generate_final_report(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–¢–ê–ü–ê 4:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 4 Backend - API endpoints –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {self.operator_info.get('full_name') if self.operator_info else 'N/A'}")
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = 0
        passed_tests = 0
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        total_tests += 1
        if self.test_results["auth_success"]:
            passed_tests += 1
        
        # –¢–µ—Å—Ç—ã list-by-status
        for test_name, result in self.test_results["list_by_status_tests"].items():
            total_tests += 1
            if result:
                passed_tests += 1
        
        # –¢–µ—Å—Ç—ã full-history
        for test_name, result in self.test_results["full_history_tests"].items():
            total_tests += 1
            if result:
                passed_tests += 1
        
        # –¢–µ—Å—Ç—ã statistics
        for test_name, result in self.test_results["statistics_tests"].items():
            total_tests += 1
            if result:
                passed_tests += 1
        
        self.test_results["total_tests"] = total_tests
        self.test_results["passed_tests"] = passed_tests
        self.test_results["failed_tests"] = total_tests - passed_tests
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ list-by-status
        self.log(f"  2. üìã –¢–µ—Å—Ç—ã GET /api/cargo/list-by-status:")
        for test_name, result in self.test_results["list_by_status_tests"].items():
            status_icon = "‚úÖ" if result else "‚ùå"
            self.log(f"     {status_icon} {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ù–ï –ü–†–û–ô–î–ï–ù'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ full-history
        self.log(f"  3. üìö –¢–µ—Å—Ç—ã GET /api/cargo/{{cargo_number}}/full-history:")
        for test_name, result in self.test_results["full_history_tests"].items():
            status_icon = "‚úÖ" if result else "‚ùå"
            self.log(f"     {status_icon} {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ù–ï –ü–†–û–ô–î–ï–ù'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ statistics
        self.log(f"  4. üìä –¢–µ—Å—Ç—ã GET /api/cargo/statistics:")
        for test_name, result in self.test_results["statistics_tests"].items():
            status_icon = "‚úÖ" if result else "‚ùå"
            self.log(f"     {status_icon} {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ù–ï –ü–†–û–ô–î–ï–ù'}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        self.log(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.log(f"  –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_tests - passed_tests}")
        self.log(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if success_rate >= 90:
            self.log("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 4 –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º, –ø–æ–∏—Å–∫, –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            self.log("üîç –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–∑–æ–≤ –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ transport_info/warehouse_info —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        elif success_rate >= 70:
            self.log("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 4 –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            self.log(f"üìä –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å {total_tests - passed_tests} –ø—Ä–æ–±–ª–µ–º")
            self.log("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            return False
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 4 –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            self.log(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_tests - passed_tests} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API endpoints")
            return False
    
    def run_stage4_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞ 4"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–¢–ê–ü–ê 4: Backend API –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/cargo/list-by-status
        self.log("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT: GET /api/cargo/list-by-status")
        self.log("=" * 60)
        
        self.test_cargo_list_by_status_no_filters()
        self.test_cargo_list_by_status_filter()
        self.test_cargo_list_search()
        self.test_cargo_list_pagination()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/cargo/{cargo_number}/full-history
        self.log("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT: GET /api/cargo/{cargo_number}/full-history")
        self.log("=" * 60)
        
        self.test_cargo_full_history()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/cargo/statistics
        self.log("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT: GET /api/cargo/statistics")
        self.log("=" * 60)
        
        self.test_cargo_statistics()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = Stage4CargoListTester()
    
    try:
        success = tester.run_stage4_tests()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 4 –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ API endpoints –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∏—Å–∫, –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –∏—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–∞–ø–∞ 4")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 4 –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ API endpoints –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()