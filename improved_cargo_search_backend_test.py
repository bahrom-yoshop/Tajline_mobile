#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –ì–†–£–ó–û–í - –≠–¢–ê–ü 2

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê: –°–∏—Å—Ç–µ–º–∞ TAJLINE.TJ - –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞–º–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ú–æ—Å–∫–≤–∞-–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω.

–ö–û–ù–¢–ï–ö–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø: –¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –¥–ª—è —Ç—Ä–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:

**–°–¶–ï–ù–ê–†–ò–ô 1: –ü–†–û–°–¢–û–ô –ì–†–£–ó**
- QR —Ñ–æ—Ä–º–∞—Ç: `123456` (1-10 —Ü–∏—Ñ—Ä)
- –õ–æ–≥–∏–∫–∞: `availableCargoForPlacement.find(cargo => cargo.cargo_number === qrCode)`
- –£–ª—É—á—à–µ–Ω–∏—è: –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ cargo_items, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

**–°–¶–ï–ù–ê–†–ò–ô 2: –ì–†–£–ó –í –ó–ê–Ø–í–ö–ï**  
- QR —Ñ–æ—Ä–º–∞—Ç: `010101.01` –∏–ª–∏ `010101/01`
- –õ–æ–≥–∏–∫–∞: 1) –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –Ω–æ–º–µ—Ä—É ‚Üí 2) –ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥—Ä—É–∑ –ø–æ —Ç–∏–ø—É –≤–Ω—É—Ç—Ä–∏ –∑–∞—è–≤–∫–∏
- –£–ª—É—á—à–µ–Ω–∏—è: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ padStart –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü, –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

**–°–¶–ï–ù–ê–†–ò–ô 3: –ï–î–ò–ù–ò–¶–ê –í –¢–ò–ü–ï –ì–†–£–ó–ê**
- QR —Ñ–æ—Ä–º–∞—Ç: `010101.01.01` –∏–ª–∏ `010101/01/01`  
- –õ–æ–≥–∏–∫–∞: 1) –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É ‚Üí 2) –ù–∞–π—Ç–∏ —Ç–∏–ø –≥—Ä—É–∑–∞ ‚Üí 3) –ù–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É –≤–Ω—É—Ç—Ä–∏ —Ç–∏–ø–∞
- –£–ª—É—á—à–µ–Ω–∏—è: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è unit_index, –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫

–ó–ê–î–ê–ß–ê –î–õ–Ø BACKEND –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ** —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
2. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞**
3. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å backend –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å**
"""

import requests
import json
import sys
import time
from datetime import datetime

# Configuration
BACKEND_URL = "https://logistics-dash-6.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

ADMIN_CREDENTIALS = {
    "phone": "+79999888777", 
    "password": "admin123"
}

class ImprovedCargoSearchTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.admin_token = None
        self.test_results = []
        self.warehouse_id = None
        self.test_cargo_ids = []
        self.test_scenarios = {}
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def get_operator_warehouse(self):
        """Get operator's warehouse"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    self.warehouse_id = warehouses[0]["id"]
                    warehouse_name = warehouses[0]["name"]
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥: {warehouse_name} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=str(e))
            return False

    def create_test_data_scenario_1(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 1: –ü–†–û–°–¢–û–ô –ì–†–£–ó"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≥—Ä—É–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ 123456 –∏ 789012
            simple_cargos = [
                {
                    "sender_full_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                    "sender_phone": "+79111111111",
                    "recipient_full_name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                    "recipient_phone": "+79222222222",
                    "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 10",
                    "cargo_items": [
                        {
                            "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
                            "quantity": 1,
                            "weight": 5.0,
                            "price_per_kg": 100.0,
                            "total_amount": 500.0
                        }
                    ],
                    "description": "–ü—Ä–æ—Å—Ç–æ–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è 1",
                    "route": "moscow_to_tajikistan"
                },
                {
                    "sender_full_name": "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤",
                    "sender_phone": "+79333333333",
                    "recipient_full_name": "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
                    "recipient_phone": "+79444444444",
                    "recipient_address": "–≥. –•—É–¥–∂–∞–Ω–¥, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 25",
                    "cargo_items": [
                        {
                            "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
                            "quantity": 1,
                            "weight": 8.0,
                            "price_per_kg": 75.0,
                            "total_amount": 600.0
                        }
                    ],
                    "description": "–ü—Ä–æ—Å—Ç–æ–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è 1",
                    "route": "moscow_to_tajikistan"
                }
            ]
            
            created_cargos = []
            for i, cargo_data in enumerate(simple_cargos):
                response = self.session.post(
                    f"{BACKEND_URL}/operator/cargo/accept",
                    json=cargo_data
                )
                
                if response.status_code == 200:
                    result = response.json()
                    cargo_id = result.get("cargo_id")
                    cargo_number = result.get("cargo_number")
                    created_cargos.append({
                        "id": cargo_id,
                        "number": cargo_number,
                        "type": "simple"
                    })
                    self.test_cargo_ids.append(cargo_id)
                else:
                    self.log_test(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä—É–∑–∞ {i+1}", False, error=f"HTTP {response.status_code}")
                    return False
            
            self.test_scenarios["scenario_1"] = created_cargos
            self.log_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 1",
                True,
                f"–°–æ–∑–¥–∞–Ω–æ {len(created_cargos)} –ø—Ä–æ—Å—Ç—ã—Ö –≥—Ä—É–∑–æ–≤: {[c['number'] for c in created_cargos]}"
            )
            return True
            
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 1", False, error=str(e))
            return False

    def create_test_data_scenario_2(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 2: –ì–†–£–ó –í –ó–ê–Ø–í–ö–ï"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–æ–≤ (250148 —Å —Ç–∏–ø–∞–º–∏ 01, 02)
            cargo_data = {
                "sender_full_name": "–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤",
                "sender_phone": "+79555555555",
                "recipient_full_name": "–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞",
                "recipient_phone": "+79666666666",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –§–∏—Ä–¥–∞–≤—Å–∏, –¥–æ–º 15",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,
                        "weight": 6.0,
                        "price_per_kg": 120.0,
                        "total_amount": 720.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG",
                        "quantity": 3,
                        "weight": 12.0,
                        "price_per_kg": 80.0,
                        "total_amount": 960.0
                    }
                ],
                "description": "–ó–∞—è–≤–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è 2",
                "route": "moscow_to_tajikistan"
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data
            )
            
            if response.status_code == 200:
                result = response.json()
                cargo_id = result.get("cargo_id")
                cargo_number = result.get("cargo_number")
                
                self.test_scenarios["scenario_2"] = {
                    "id": cargo_id,
                    "number": cargo_number,
                    "type": "request_with_types",
                    "expected_qr_formats": [
                        f"{cargo_number}.01",
                        f"{cargo_number}/01",
                        f"{cargo_number}.02", 
                        f"{cargo_number}/02"
                    ]
                }
                self.test_cargo_ids.append(cargo_id)
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 2",
                    True,
                    f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ {cargo_number} —Å 2 —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–æ–≤ (–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung: 2—à—Ç + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG: 3—à—Ç = 5 –µ–¥–∏–Ω–∏—Ü)"
                )
                return True
            else:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 2", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 2", False, error=str(e))
            return False

    def create_test_data_scenario_3(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 3: –ï–î–ò–ù–ò–¶–ê –í –¢–ò–ü–ï –ì–†–£–ó–ê"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (250148/01/01, 250148/01/02, 250148/02/01)
            cargo_data = {
                "sender_full_name": "–°–µ—Ä–≥–µ–π –ù–∏–∫–æ–ª–∞–µ–≤",
                "sender_phone": "+79777777777",
                "recipient_full_name": "–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞",
                "recipient_phone": "+79888888888",
                "recipient_address": "–≥. –•—É–¥–∂–∞–Ω–¥, —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, –¥–æ–º 30",
                "cargo_items": [
                    {
                        "cargo_name": "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
                        "quantity": 2,
                        "weight": 8.0,
                        "price_per_kg": 150.0,
                        "total_amount": 1200.0
                    },
                    {
                        "cargo_name": "–ú–µ–±–µ–ª—å –æ—Ñ–∏—Å–Ω–∞—è",
                        "quantity": 1,
                        "weight": 25.0,
                        "price_per_kg": 40.0,
                        "total_amount": 1000.0
                    }
                ],
                "description": "–ó–∞—è–≤–∫–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è 3",
                "route": "moscow_to_tajikistan"
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data
            )
            
            if response.status_code == 200:
                result = response.json()
                cargo_id = result.get("cargo_id")
                cargo_number = result.get("cargo_number")
                
                self.test_scenarios["scenario_3"] = {
                    "id": cargo_id,
                    "number": cargo_number,
                    "type": "individual_units",
                    "expected_qr_formats": [
                        f"{cargo_number}.01.01",
                        f"{cargo_number}/01/01",
                        f"{cargo_number}.01.02",
                        f"{cargo_number}/01/02",
                        f"{cargo_number}.02.01",
                        f"{cargo_number}/02/01"
                    ]
                }
                self.test_cargo_ids.append(cargo_id)
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 3",
                    True,
                    f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ {cargo_number} —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞: 2—à—Ç + –ú–µ–±–µ–ª—å –æ—Ñ–∏—Å–Ω–∞—è: 1—à—Ç = 3 –µ–¥–∏–Ω–∏—Ü—ã)"
                )
                return True
            else:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 3", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¶–ï–ù–ê–†–ò–Ø 3", False, error=str(e))
            return False

    def test_available_for_placement_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                cargo_list = data.get("items", []) if isinstance(data, dict) else data
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
                found_cargos = []
                test_numbers = []
                
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤
                if "scenario_1" in self.test_scenarios:
                    test_numbers.extend([cargo["number"] for cargo in self.test_scenarios["scenario_1"]])
                if "scenario_2" in self.test_scenarios:
                    test_numbers.append(self.test_scenarios["scenario_2"]["number"])
                if "scenario_3" in self.test_scenarios:
                    test_numbers.append(self.test_scenarios["scenario_3"]["number"])
                
                for cargo in cargo_list:
                    if cargo.get("cargo_number") in test_numbers:
                        found_cargos.append({
                            "id": cargo.get("id"),
                            "number": cargo.get("cargo_number"),
                            "cargo_items": cargo.get("cargo_items", []),
                            "has_individual_items": any(
                                item.get("individual_items") for item in cargo.get("cargo_items", [])
                            )
                        })
                
                self.log_test(
                    "API available-for-placement —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –Ω–∞–π–¥–µ–Ω–æ {len(found_cargos)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ —Å cargo_items –∏ individual_items"
                )
                return True
            else:
                self.log_test("API available-for-placement", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("API available-for-placement", False, error=str(e))
            return False

    def test_placement_status_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π individual_units"""
        try:
            success_count = 0
            total_tests = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ ID —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            if response.status_code != 200:
                self.log_test("API placement-status", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤")
                return False
            
            data = response.json()
            cargo_list = data.get("items", []) if isinstance(data, dict) else data
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤
            test_numbers = []
            if "scenario_1" in self.test_scenarios:
                test_numbers.extend([cargo["number"] for cargo in self.test_scenarios["scenario_1"]])
            if "scenario_2" in self.test_scenarios:
                test_numbers.append(self.test_scenarios["scenario_2"]["number"])
            if "scenario_3" in self.test_scenarios:
                test_numbers.append(self.test_scenarios["scenario_3"]["number"])
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º placement-status –¥–ª—è –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤
            for cargo in cargo_list:
                if cargo.get("cargo_number") in test_numbers:
                    total_tests += 1
                    cargo_id = cargo.get("id")
                    
                    response = self.session.get(f"{BACKEND_URL}/operator/cargo/{cargo_id}/placement-status")
                    
                    if response.status_code == 200:
                        status_data = response.json()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞
                        required_fields = ["cargo_id", "cargo_number", "total_quantity", "total_placed", "placement_progress"]
                        has_all_fields = all(field in status_data for field in required_fields)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_types –∏ individual_units –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
                        has_cargo_types = "cargo_types" in status_data
                        has_individual_units = "individual_units" in status_data
                        
                        if has_all_fields and (has_cargo_types or has_individual_units):
                            success_count += 1
            
            success_rate = (success_count / total_tests) * 100 if total_tests > 0 else 0
            
            self.log_test(
                "API placement-status —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π individual_units",
                success_count == total_tests,
                f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count}/{total_tests} –≥—Ä—É–∑–æ–≤ ({success_rate:.1f}% success rate) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cargo_types –∏ individual_units"
            )
            return success_count == total_tests
            
        except Exception as e:
            self.log_test("API placement-status", False, error=str(e))
            return False

    def test_individual_placement_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è 3
            if "scenario_3" not in self.test_scenarios:
                self.log_test("API individual placement", False, error="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è 3")
                return False
            
            scenario_3 = self.test_scenarios["scenario_3"]
            cargo_number = scenario_3["number"]
            individual_number = f"{cargo_number}/01/01"  # –ü–µ—Ä–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞
            
            placement_data = {
                "individual_number": individual_number,
                "warehouse_id": self.warehouse_id,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place-individual",
                json=placement_data
            )
            
            if response.status_code == 200:
                result = response.json()
                location_code = result.get("location_code", "")
                
                self.log_test(
                    "API place-individual —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ {individual_number} –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ {location_code}"
                )
                return True
            else:
                self.log_test("API place-individual", False, error=f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("API place-individual", False, error=str(e))
            return False

    def test_search_scenarios(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–∏—Å–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code != 200:
                self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤")
                return False
            
            data = response.json()
            available_cargos = data.get("items", []) if isinstance(data, dict) else data
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –°–¶–ï–ù–ê–†–ò–ô 1: –ü–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä—É–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
            scenario_1_success = 0
            if "scenario_1" in self.test_scenarios:
                for simple_cargo in self.test_scenarios["scenario_1"]:
                    cargo_number = simple_cargo["number"]
                    found = any(cargo.get("cargo_number") == cargo_number for cargo in available_cargos)
                    if found:
                        scenario_1_success += 1
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –≤ –∑–∞—è–≤–∫–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É XXX.YY
            scenario_2_success = 0
            if "scenario_2" in self.test_scenarios:
                scenario_2 = self.test_scenarios["scenario_2"]
                base_number = scenario_2["number"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –∏–º–µ–µ—Ç cargo_items
                found_cargo = next((cargo for cargo in available_cargos if cargo.get("cargo_number") == base_number), None)
                if found_cargo and found_cargo.get("cargo_items"):
                    scenario_2_success = 1
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –°–¶–ï–ù–ê–†–ò–ô 3: –ü–æ–∏—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç—É XXX.YY.ZZ
            scenario_3_success = 0
            if "scenario_3" in self.test_scenarios:
                scenario_3 = self.test_scenarios["scenario_3"]
                base_number = scenario_3["number"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –∏–º–µ–µ—Ç individual_items
                found_cargo = next((cargo for cargo in available_cargos if cargo.get("cargo_number") == base_number), None)
                if found_cargo and found_cargo.get("cargo_items"):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ individual_items –≤–Ω—É—Ç—Ä–∏ cargo_items
                    has_individual_items = any(
                        item.get("individual_items") for item in found_cargo.get("cargo_items", [])
                    )
                    if has_individual_items:
                        scenario_3_success = 1
            
            total_scenarios = 3
            successful_scenarios = (1 if scenario_1_success > 0 else 0) + scenario_2_success + scenario_3_success
            
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞",
                successful_scenarios == total_scenarios,
                f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {successful_scenarios}/{total_scenarios} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: "
                f"–°—Ü–µ–Ω–∞—Ä–∏–π 1 (–ø—Ä–æ—Å—Ç—ã–µ –≥—Ä—É–∑—ã): {scenario_1_success} –Ω–∞–π–¥–µ–Ω–æ, "
                f"–°—Ü–µ–Ω–∞—Ä–∏–π 2 (–≥—Ä—É–∑ –≤ –∑–∞—è–≤–∫–µ): {'‚úÖ' if scenario_2_success else '‚ùå'}, "
                f"–°—Ü–µ–Ω–∞—Ä–∏–π 3 (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã): {'‚úÖ' if scenario_3_success else '‚ùå'}"
            )
            return successful_scenarios == total_scenarios
            
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞", False, error=str(e))
            return False

    def test_backend_compatibility(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å backend —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints
            endpoints_to_test = [
                "/operator/cargo/available-for-placement",
                "/operator/warehouses",
                "/warehouses/all-cities"
            ]
            
            successful_endpoints = 0
            for endpoint in endpoints_to_test:
                response = self.session.get(f"{BACKEND_URL}{endpoint}")
                if response.status_code == 200:
                    successful_endpoints += 1
            
            compatibility_rate = (successful_endpoints / len(endpoints_to_test)) * 100
            
            self.log_test(
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å backend —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞",
                successful_endpoints == len(endpoints_to_test),
                f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {successful_endpoints}/{len(endpoints_to_test)} endpoints ({compatibility_rate:.1f}% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"
            )
            return successful_endpoints == len(endpoints_to_test)
            
        except Exception as e:
            self.log_test("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å backend", False, error=str(e))
            return False

    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.log_test(
                "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                True,
                f"–°–æ–∑–¥–∞–Ω–æ {len(self.test_cargo_ids)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞"
            )
            return True
            
        except Exception as e:
            self.log_test("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", False, error=str(e))
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤"""
        print("üéØ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –ì–†–£–ó–û–í - –≠–¢–ê–ü 2")
        print("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            return False
        
        if not self.get_operator_warehouse():
            return False
        
        # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        print("\nüìã –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –î–õ–Ø –í–°–ï–• –¢–†–ï–• –°–¶–ï–ù–ê–†–ò–ï–í")
        print("-" * 60)
        
        if not self.create_test_data_scenario_1():
            return False
        
        if not self.create_test_data_scenario_2():
            return False
        
        if not self.create_test_data_scenario_3():
            return False
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
        print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS –° –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô –ü–û–ò–°–ö–ê")
        print("-" * 60)
        
        if not self.test_available_for_placement_api():
            return False
        
        if not self.test_placement_status_api():
            return False
        
        if not self.test_individual_placement_api():
            return False
        
        # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –¢–†–ï–• –°–¶–ï–ù–ê–†–ò–ï–í –ü–û–ò–°–ö–ê")
        print("-" * 60)
        
        if not self.test_search_scenarios():
            return False
        
        # –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ backend
        print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò BACKEND")
        print("-" * 60)
        
        if not self.test_backend_compatibility():
            return False
        
        # –≠—Ç–∞–ø 6: –û—á–∏—Å—Ç–∫–∞
        self.cleanup_test_data()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –ì–†–£–ó–û–í –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        
        successful_tests = sum(1 for result in self.test_results if result["success"])
        total_tests = len(self.test_results)
        success_rate = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã ({success_rate:.1f}% success rate)")
        
        print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
        print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞")
        print("‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã API endpoints —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π cargo_items –∏ individual_items")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–∏—Å–∫–∞")
        print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π")
        
        return success_rate >= 85.0

def main():
    tester = ImprovedCargoSearchTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(1)

if __name__ == "__main__":
    main()