#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–∏–Ω–∏-–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–∏–Ω–∏-–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GET /api/operator/cargo/available-for-placement 
3) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ DELETE /api/operator/cargo/{cargo_id}/remove-from-placement
4) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —á–µ—Ä–µ–∑ DELETE /api/operator/cargo/bulk-remove-from-placement

–î–ï–¢–ê–õ–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend –¥–æ–ª–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
    print("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê...")
    
    auth_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=auth_data)
    print(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        token = data.get('access_token')
        user_info = data.get('user')
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
        print(f"–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('user_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–ª—å warehouse_operator –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
        if user_info.get('role') == 'warehouse_operator':
            print("‚úÖ –†–æ–ª—å warehouse_operator –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω")
            return token
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: {user_info.get('role')}, –æ–∂–∏–¥–∞–ª–∞—Å—å warehouse_operator")
            return None
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        return None

def test_available_cargo_for_placement(operator_token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    print("\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –î–û–°–¢–£–ü–ù–´–• –ì–†–£–ó–û–í –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{API_BASE}/operator/cargo/available-for-placement", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        items = data.get('items', [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(items)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if items:
            sample_cargo = items[0]
            required_fields = ['id', 'cargo_number', 'sender_full_name', 'recipient_full_name', 'weight']
            missing_fields = [field for field in required_fields if field not in sample_cargo]
            
            if not missing_fields:
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            else:
                print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞: {missing_fields}")
            
            print(f"üìã –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–∑–∞:")
            print(f"   - ID: {sample_cargo.get('id')}")
            print(f"   - –ù–æ–º–µ—Ä: {sample_cargo.get('cargo_number')}")
            print(f"   - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sample_cargo.get('sender_full_name')}")
            print(f"   - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {sample_cargo.get('recipient_full_name')}")
            print(f"   - –í–µ—Å: {sample_cargo.get('weight')} –∫–≥")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        cargo_ids = [cargo.get('id') for cargo in items if cargo.get('id')]
        return cargo_ids[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.text}")
        return []

def test_single_cargo_removal(operator_token, cargo_id):
    """–¢–µ—Å—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ DELETE /api/operator/cargo/{cargo_id}/remove-from-placement"""
    print(f"\nüóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–ò–ß–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê {cargo_id}...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.delete(f"{API_BASE}/operator/cargo/{cargo_id}/remove-from-placement", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        expected_fields = ['success', 'message', 'cargo_number']
        present_fields = [field for field in expected_fields if field in data]
        
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:")
        print(f"   - success: {data.get('success', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   - message: {data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"   - cargo_number: {data.get('cargo_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        if len(present_fields) >= 2:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
        else:
            print("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
        return False

def test_bulk_cargo_removal(operator_token, cargo_ids):
    """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —á–µ—Ä–µ–∑ DELETE /api/operator/cargo/bulk-remove-from-placement"""
    print(f"\nüóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø {len(cargo_ids)} –ì–†–£–ó–û–í...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å 2-3 –≥—Ä—É–∑–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    test_cargo_ids = cargo_ids[:3] if len(cargo_ids) >= 3 else cargo_ids
    
    bulk_data = {
        "cargo_ids": test_cargo_ids
    }
    
    response = requests.delete(f"{API_BASE}/operator/cargo/bulk-remove-from-placement", 
                             headers=headers, json=bulk_data)
    print(f"–°—Ç–∞—Ç—É—Å –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        deleted_count = data.get('deleted_count', 0)
        total_requested = data.get('total_requested', 0)
        deleted_numbers = data.get('deleted_cargo_numbers', [])
        
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:")
        print(f"   - deleted_count: {deleted_count}")
        print(f"   - total_requested: {total_requested}")
        print(f"   - deleted_cargo_numbers: {len(deleted_numbers)} –Ω–æ–º–µ—Ä–æ–≤")
        
        if deleted_numbers:
            print(f"   - –ù–æ–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {', '.join(deleted_numbers[:3])}{'...' if len(deleted_numbers) > 3 else ''}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        required_fields = ['deleted_count', 'total_requested']
        if all(field in data for field in required_fields):
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        else:
            print("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        
        return True, deleted_numbers
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
        return False, []

def test_cargo_removal_validation(operator_token):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–• –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    # –¢–µ—Å—Ç 1: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)
    print("–¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ cargo_ids")
    response = requests.delete(f"{API_BASE}/operator/cargo/bulk-remove-from-placement", 
                             headers=headers, json={"cargo_ids": []})
    
    if response.status_code == 422:
        print("‚úÖ –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (HTTP 422)")
    else:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 2: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥—Ä—É–∑–æ–≤ (>100)
    print("–¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (>100 –≥—Ä—É–∑–æ–≤)")
    large_list = [f"fake-id-{i}" for i in range(101)]
    response = requests.delete(f"{API_BASE}/operator/cargo/bulk-remove-from-placement", 
                             headers=headers, json={"cargo_ids": large_list})
    
    if response.status_code == 422:
        print("‚úÖ –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (HTTP 422)")
    else:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {response.status_code}")
    
    # –¢–µ—Å—Ç 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID (–¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫)
    print("–¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_ids")
    fake_ids = ["fake-id-1", "fake-id-2"]
    response = requests.delete(f"{API_BASE}/operator/cargo/bulk-remove-from-placement", 
                             headers=headers, json={"cargo_ids": fake_ids})
    
    if response.status_code == 200:
        data = response.json()
        deleted_count = data.get('deleted_count', 0)
        print(f"‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {len(fake_ids)}")
    else:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID: {response.status_code}")
    
    return True

def test_cargo_list_after_deletion(operator_token, deleted_cargo_numbers):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ß–¢–û –£–î–ê–õ–ï–ù–ù–´–ï –ì–†–£–ó–´ –ù–ï –ü–û–Ø–í–õ–Ø–Æ–¢–°–Ø –í –°–ü–ò–°–ö–ï –†–ê–ó–ú–ï–©–ï–ù–ò–Ø...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{API_BASE}/operator/cargo/available-for-placement", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        items = data.get('items', [])
        current_cargo_numbers = [item.get('cargo_number') for item in items]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        still_present = []
        for deleted_number in deleted_cargo_numbers:
            if deleted_number in current_cargo_numbers:
                still_present.append(deleted_number)
        
        if not still_present:
            print(f"‚úÖ –í—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã ({len(deleted_cargo_numbers)}) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return True
        else:
            print(f"‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {still_present}")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
        return False

def test_placement_statistics_update(operator_token):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    print(f"\nüìä –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{API_BASE}/operator/placement-statistics", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        today_placements = data.get('today_placements', 0)
        session_placements = data.get('session_placements', 0)
        recent_placements = data.get('recent_placements', [])
        
        print(f"üìã –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
        print(f"   - –†–∞–∑–º–µ—â–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {today_placements}")
        print(f"   - –†–∞–∑–º–µ—â–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏: {session_placements}")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(recent_placements)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if isinstance(today_placements, int) and isinstance(session_placements, int):
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
            return True
        else:
            print("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏-–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–∏–Ω–∏-–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ")
    print("=" * 100)
    
    test_results = []
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
    operator_token = test_warehouse_operator_auth()
    if not operator_token:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return
    test_results.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è")
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    available_cargo_ids = test_available_cargo_for_placement(operator_token)
    if not available_cargo_ids:
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        test_results.append("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        test_results.append(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ ({len(available_cargo_ids)} –≥—Ä—É–∑–æ–≤)")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        validation_success = test_cargo_removal_validation(operator_token)
        if validation_success:
            test_results.append("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞
        if len(available_cargo_ids) > 0:
            single_removal_success = test_single_cargo_removal(operator_token, available_cargo_ids[0])
            if single_removal_success:
                test_results.append("‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                test_results.append("‚ùå –û—à–∏–±–∫–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞")
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
        if len(available_cargo_ids) > 1:
            bulk_removal_success, deleted_numbers = test_bulk_cargo_removal(operator_token, available_cargo_ids[1:])
            if bulk_removal_success:
                test_results.append("‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ
                if deleted_numbers:
                    list_check_success = test_cargo_list_after_deletion(operator_token, deleted_numbers)
                    if list_check_success:
                        test_results.append("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                    else:
                        test_results.append("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ")
            else:
                test_results.append("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤")
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    statistics_success = test_placement_statistics_update(operator_token)
    if statistics_success:
        test_results.append("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        test_results.append("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 100)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ò–ù–ò-–ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø")
    print("=" * 100)
    
    success_count = len([r for r in test_results if r.startswith("‚úÖ")])
    warning_count = len([r for r in test_results if r.startswith("‚ö†Ô∏è")])
    error_count = len([r for r in test_results if r.startswith("‚ùå")])
    total_count = len(test_results)
    
    for result in test_results:
        print(result)
    
    success_rate = (success_count / total_count) * 100 if total_count > 0 else 0
    print(f"\nüìà SUCCESS RATE: {success_rate:.1f}% ({success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if success_rate >= 85:
        print("\nüéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢!")
        print("‚úÖ Backend –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print("   - GET /api/operator/cargo/available-for-placement")
        print("   - DELETE /api/operator/cargo/{cargo_id}/remove-from-placement")
        print("   - DELETE /api/operator/cargo/bulk-remove-from-placement")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif success_rate >= 70:
        print("\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
        print("Backend –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –Ω–æ –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´")
        print("Backend –ù–ï –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    print("\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–í–ï–†–ö–ò –ó–ê–í–ï–†–®–ï–ù–´:")
    print("1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
    print("2. ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    print("3. ‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞")
    print("4. ‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤")
    print("5. ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("6. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
    print("7. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")

if __name__ == "__main__":
    main()