#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö endpoint pickup-requests
"""

import requests
import json
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://03054c56-0cb9-443b-a828-f3e224602a32.preview.emergentagent.com/api"

ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

OPERATOR_CREDENTIALS = {
    "phone": "+79777888999", 
    "password": "warehouse123"
}

def authenticate(credentials):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    response = requests.post(
        f"{BACKEND_URL}/auth/login",
        json=credentials,
        headers={"Content-Type": "application/json"}
    )
    
    if response.status_code == 200:
        data = response.json()
        return data["access_token"]
    return None

def main():
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    admin_token = authenticate(ADMIN_CREDENTIALS)
    operator_token = authenticate(OPERATOR_CREDENTIALS)
    
    if not admin_token or not operator_token:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
    pickup_data = {
        "sender_full_name": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
        "sender_phone": "+79111222333",
        "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è, –¥. 123",
        "pickup_date": "2025-01-20",
        "pickup_time_from": "10:00",
        "pickup_time_to": "12:00",
        "destination": "–î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥. 100",
        "cargo_name": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä—É–∑",
        "weight": 5.5,
        "total_value": 2500.0,
        "declared_value": 2500.0,
        "payment_method": "cash",
        "courier_fee": 500.0,
        "delivery_method": "pickup",
        "description": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—è–≤–∫–∞"
    }
    
    response = requests.post(
        f"{BACKEND_URL}/admin/courier/pickup-request",
        json=pickup_data,
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
        return
    
    request_data = response.json()
    request_id = request_data.get("request_id")
    print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {request_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ endpoint
    response = requests.get(
        f"{BACKEND_URL}/operator/pickup-requests/{request_id}",
        headers={"Authorization": f"Bearer {operator_token}"}
    )
    
    if response.status_code == 200:
        data = response.json()
        print("\nüìä –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• ENDPOINT:")
        print("=" * 60)
        print(json.dumps(data, indent=2, ensure_ascii=False))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:")
        print("=" * 60)
        
        sections = ["sender_data", "payment_info", "cargo_info", "request_info", "courier_info", "recipient_data"]
        for section in sections:
            if section in data:
                print(f"‚úÖ {section}: {list(data[section].keys())}")
            else:
                print(f"‚ùå {section}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è
        print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ü–û–õ–ï–ô:")
        print("=" * 60)
        
        sender_data = data.get("sender_data", {})
        payment_info = data.get("payment_info", {})
        cargo_info = data.get("cargo_info", {})
        
        key_fields = [
            ("pickup_date", sender_data.get("pickup_date")),
            ("pickup_time_from", sender_data.get("pickup_time_from")),
            ("pickup_time_to", sender_data.get("pickup_time_to")),
            ("payment_method", payment_info.get("payment_method")),
            ("total_value", cargo_info.get("total_value")),
            ("declared_value", cargo_info.get("declared_value"))
        ]
        
        for field_name, field_value in key_fields:
            status = "‚úÖ" if field_value is not None else "‚ùå"
            print(f"{status} {field_name}: {field_value}")
    
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}")
    
    # –û—á–∏—Å—Ç–∫–∞
    requests.delete(
        f"{BACKEND_URL}/admin/pickup-requests/{request_id}",
        headers={"Authorization": f"Bearer {admin_token}"}
    )
    print(f"\n‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {request_id} —É–¥–∞–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()