#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 2 - API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
===================================================================================

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints —ç—Ç–∞–ø–∞ 2 —Å–∏—Å—Ç–µ–º—ã "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" - 
—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. POST /api/logistics/cargo-to-transport/scan-transport - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
2. POST /api/logistics/cargo-to-transport/scan-cargo - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç  
3. GET /api/logistics/cargo-to-transport/session - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
4. DELETE /api/logistics/cargo-to-transport/session - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å warehouse_operator (+79777888999/warehouse123)
2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: 
   - –ü—Ä–∏–Ω–∏–º–∞—Ç—å QR –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ TRANSPORT_{transport_number}_{timestamp}
   - –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ—Å—Å–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ transport_loading_sessions
   - –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ "loading"
   - –í–æ–∑–≤—Ä–∞—â–∞—Ç—å session_id –∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤:
   - –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –≥—Ä—É–∑–æ–≤ (TAJLINE|INDIVIDUAL|..., –ø—Ä–æ—Å—Ç—ã–µ –Ω–æ–º–µ—Ä–∞)
   - –ü—Ä–æ–≤–µ—Ä—è—Ç—å —á—Ç–æ –≥—Ä—É–∑ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ (placement_records)
   - –î–æ–±–∞–≤–ª—è—Ç—å –≥—Ä—É–∑ –≤ —Å–µ—Å—Å–∏—é (loaded_cargo –º–∞—Å—Å–∏–≤)
   - –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –Ω–∞ "loaded_on_transport"
4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏:
   - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ operator_id –∏–ª–∏ session_id
   - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤

–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:
–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª–Ω—ã–π workflow —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
–°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
–°—Ü–µ–Ω–∞—Ä–∏–π 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- ‚úÖ –í—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- ‚úÖ –°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –∏ –≥—Ä—É–∑–æ–≤ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö transport_loading_sessions —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç
- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (404, 400 –∫–æ–¥—ã)
- ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏—è—Ö –∏ –≥—Ä—É–∑–∞—Ö
"""

import requests
import json
import sys
import os
from datetime import datetime
import time
import uuid

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_TRANSPORT_NUMBER = "001–ê–ê01"
TEST_CARGO_NUMBERS = ["250101", "TAJLINE|INDIVIDUAL|250101/01/01|1234567890"]
INVALID_TRANSPORT_QR = "INVALID_QR_CODE"
INVALID_CARGO_QR = "NONEXISTENT_CARGO"

class CargoToTransportStage2Tester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.current_session_id = None
        self.test_results = {
            "auth_success": False,
            "scan_transport_success": False,
            "scan_cargo_success": False,
            "get_session_success": False,
            "delete_session_success": False,
            "error_handling_success": False,
            "session_management_success": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def add_test_result(self, test_name, success, details="", response_time=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results["total_tests"] += 1
        if success:
            self.test_results["passed_tests"] += 1
            status = "‚úÖ –ü–†–û–ô–î–ï–ù"
        else:
            self.test_results["failed_tests"] += 1
            status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
        result = {
            "test_name": test_name,
            "status": status,
            "success": success,
            "details": details,
            "response_time": f"{response_time}ms" if response_time else "N/A"
        }
        self.test_results["detailed_results"].append(result)
        
        self.log(f"{status}: {test_name} ({result['response_time']}) - {details}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            start_time = time.time()
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_info.get('full_name')}' (—Ä–æ–ª—å: {self.operator_info.get('role')})"
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
                self.test_results["auth_success"] = True
                return True
            else:
                details = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}"
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}"
            self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, details)
            return False
    
    def test_scan_transport_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/logistics/cargo-to-transport/scan-transport"""
        self.log("\nüöõ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        timestamp = int(time.time())
        transport_qr = f"TRANSPORT_{TEST_TRANSPORT_NUMBER}_{timestamp}"
        
        try:
            start_time = time.time()
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": transport_qr
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
                required_fields = ["session_id", "transport_id", "transport_number", "status"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    self.current_session_id = data.get("session_id")
                    details = f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.current_session_id}, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data.get('transport_number')}, —Å—Ç–∞—Ç—É—Å: {data.get('status')}"
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", True, details, response_time)
                    self.test_results["scan_transport_success"] = True
                    return True
                else:
                    details = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", False, details, response_time)
                    return False
            else:
                details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", False, details)
            return False
    
    def test_scan_cargo_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/logistics/cargo-to-transport/scan-cargo"""
        self.log("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤...")
        
        if not self.current_session_id:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        success_count = 0
        total_cargo_tests = len(TEST_CARGO_NUMBERS)
        
        for i, cargo_qr in enumerate(TEST_CARGO_NUMBERS):
            self.log(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ {i+1}/{total_cargo_tests}: {cargo_qr}")
            
            try:
                start_time = time.time()
                response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-cargo", json={
                    "qr_code": cargo_qr,
                    "session_id": self.current_session_id
                })
                response_time = int((time.time() - start_time) * 1000)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    required_fields = ["success", "cargo_info", "session_info"]
                    missing_fields = [field for field in required_fields if field not in data]
                    
                    if not missing_fields and data.get("success"):
                        cargo_info = data.get("cargo_info", {})
                        session_info = data.get("session_info", {})
                        
                        details = f"–ì—Ä—É–∑ –¥–æ–±–∞–≤–ª–µ–Ω: {cargo_info.get('cargo_number', 'N/A')}, —Å—Ç–∞—Ç—É—Å: {cargo_info.get('status', 'N/A')}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é: {session_info.get('loaded_cargo_count', 0)}"
                        self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", True, details, response_time)
                        success_count += 1
                    else:
                        details = f"–ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}"
                        self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", False, details, response_time)
                else:
                    details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                    self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", False, details, response_time)
                    
            except Exception as e:
                details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", False, details)
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤
        if success_count > 0:
            self.test_results["scan_cargo_success"] = True
            return True
        else:
            return False
    
    def test_get_session_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/logistics/cargo-to-transport/session"""
        self.log("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏...")
        
        try:
            start_time = time.time()
            response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/session")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["session_id", "transport_info", "loaded_cargo", "session_status"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    transport_info = data.get("transport_info", {})
                    loaded_cargo = data.get("loaded_cargo", [])
                    
                    details = f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {data.get('session_id')}, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info.get('transport_number', 'N/A')}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {len(loaded_cargo)}, —Å—Ç–∞—Ç—É—Å: {data.get('session_status')}"
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", True, details, response_time)
                    self.test_results["get_session_success"] = True
                    return True
                else:
                    details = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, details, response_time)
                    return False
            else:
                details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, details)
            return False
    
    def test_delete_session_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/logistics/cargo-to-transport/session"""
        self.log("\nüîö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
        
        if not self.current_session_id:
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return False
        
        try:
            start_time = time.time()
            response = self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session", json={
                "session_id": self.current_session_id
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if data.get("success"):
                    session_summary = data.get("session_summary", {})
                    details = f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.current_session_id}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {session_summary.get('total_loaded_cargo', 0)}, —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {session_summary.get('transport_status', 'N/A')}"
                    self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", True, details, response_time)
                    self.test_results["delete_session_success"] = True
                    self.current_session_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–µ—Å—Å–∏–∏
                    return True
                else:
                    details = f"–ù–µ—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, details, response_time)
                    return False
            else:
                details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, details)
            return False
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.log("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        error_tests = [
            {
                "name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                "endpoint": f"{API_BASE}/logistics/cargo-to-transport/scan-transport",
                "method": "POST",
                "data": {"qr_code": INVALID_TRANSPORT_QR},
                "expected_status": [400, 404]
            },
            {
                "name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏",
                "endpoint": f"{API_BASE}/logistics/cargo-to-transport/scan-cargo",
                "method": "POST", 
                "data": {"qr_code": "250101", "session_id": "nonexistent_session"},
                "expected_status": [400, 404]
            },
            {
                "name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞",
                "endpoint": f"{API_BASE}/logistics/cargo-to-transport/scan-cargo",
                "method": "POST",
                "data": {"qr_code": INVALID_CARGO_QR, "session_id": str(uuid.uuid4())},
                "expected_status": [400, 404]
            }
        ]
        
        error_success_count = 0
        
        for test in error_tests:
            try:
                start_time = time.time()
                
                if test["method"] == "POST":
                    response = self.session.post(test["endpoint"], json=test["data"])
                elif test["method"] == "GET":
                    response = self.session.get(test["endpoint"])
                elif test["method"] == "DELETE":
                    response = self.session.delete(test["endpoint"], json=test["data"])
                    
                response_time = int((time.time() - start_time) * 1000)
                
                if response.status_code in test["expected_status"]:
                    details = f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: HTTP {response.status_code}"
                    self.add_test_result(test["name"], True, details, response_time)
                    error_success_count += 1
                else:
                    details = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: HTTP {response.status_code} (–æ–∂–∏–¥–∞–ª—Å—è {test['expected_status']})"
                    self.add_test_result(test["name"], False, details, response_time)
                    
            except Exception as e:
                details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                self.add_test_result(test["name"], False, details)
        
        if error_success_count >= len(error_tests) * 0.7:  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            self.test_results["error_handling_success"] = True
            return True
        else:
            return False
    
    def test_session_management(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏"""
        self.log("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏...")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
        self.log("üìã –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")
        
        timestamp = int(time.time())
        transport_qr = f"TRANSPORT_{TEST_TRANSPORT_NUMBER}_{timestamp}"
        
        try:
            # –ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è
            response1 = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": transport_qr
            })
            
            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
            response2 = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": transport_qr
            })
            
            if response1.status_code == 200 and response2.status_code == 200:
                data1 = response1.json()
                data2 = response2.json()
                
                session_id1 = data1.get("session_id")
                session_id2 = data2.get("session_id")
                
                if session_id1 == session_id2:
                    details = f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è: {session_id1}"
                    self.add_test_result("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏", True, details)
                    self.current_session_id = session_id1
                    session_mgmt_success = True
                else:
                    details = f"–°–æ–∑–¥–∞–Ω—ã —Ä–∞–∑–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {session_id1} vs {session_id2}"
                    self.add_test_result("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏", False, details)
                    session_mgmt_success = False
            else:
                details = f"–û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–π: {response1.status_code}, {response2.status_code}"
                self.add_test_result("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏", False, details)
                session_mgmt_success = False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏", False, details)
            session_mgmt_success = False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID
        if self.current_session_id:
            try:
                response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/session", params={
                    "session_id": self.current_session_id
                })
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("session_id") == self.current_session_id:
                        details = f"–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID: {self.current_session_id}"
                        self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID", True, details)
                    else:
                        details = f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: {data.get('session_id')}"
                        self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID", False, details)
                        session_mgmt_success = False
                else:
                    details = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: HTTP {response.status_code}"
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID", False, details)
                    session_mgmt_success = False
                    
            except Exception as e:
                details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID", False, details)
                session_mgmt_success = False
        
        if session_mgmt_success:
            self.test_results["session_management_success"] = True
            return True
        else:
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 2 - API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        self.log("=" * 100)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", "ERROR")
            return False
        
        # –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
        self.log("\nüî• –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• ENDPOINTS")
        self.log("-" * 60)
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª–Ω—ã–π workflow —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        self.log("\nüìã –°–¶–ï–ù–ê–†–ò–ô 1: –ü–û–õ–ù–´–ô WORKFLOW –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        self.test_scan_transport_endpoint()
        self.test_scan_cargo_endpoint()
        self.test_get_session_endpoint()
        self.test_delete_session_endpoint()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.log("\nüìã –°–¶–ï–ù–ê–†–ò–ô 2: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö")
        self.test_error_handling()
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
        self.log("\nüìã –°–¶–ï–ù–ê–†–ò–ô 3: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò")
        self.test_session_management()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª—é–±—ã—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–µ—Å—Å–∏–π)
        if self.current_session_id:
            self.test_delete_session_endpoint()
        
        return True
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 100)
        self.log("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 100)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = self.test_results["total_tests"]
        passed_tests = self.test_results["passed_tests"]
        failed_tests = self.test_results["failed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        self.log(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.log(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        self.log(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –°—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.log(f"\nüéØ –°–¢–ê–¢–£–° –û–°–ù–û–í–ù–´–• –§–£–ù–ö–¶–ò–ô:")
        functions = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", self.test_results["auth_success"]),
            ("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", self.test_results["scan_transport_success"]),
            ("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤", self.test_results["scan_cargo_success"]),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", self.test_results["get_session_success"]),
            ("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", self.test_results["delete_session_success"]),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_results["error_handling_success"]),
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏", self.test_results["session_management_success"])
        ]
        
        for func_name, success in functions:
            status = "‚úÖ" if success else "‚ùå"
            self.log(f"   {status} {func_name}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        for result in self.test_results["detailed_results"]:
            self.log(f"   {result['status']}: {result['test_name']} ({result['response_time']})")
            if result['details']:
                self.log(f"      ‚îî‚îÄ {result['details']}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        self.log(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:")
        if success_rate >= 90:
            self.log("‚úÖ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            self.log("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 70:
            self.log("‚ö†Ô∏è –•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.")
            self.log("üîß –¢–†–ï–ë–£–Æ–¢–°–Ø –ù–ï–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø.")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            self.log("üö® –¢–†–ï–ë–£–ï–¢–°–Ø –°–ï–†–¨–ï–ó–ù–ê–Ø –î–û–†–ê–ë–û–¢–ö–ê!")
        
        self.log("=" * 100)
        
        return success_rate >= 70

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 2 - API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    print("–î–∞—Ç–∞:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("Backend URL:", BACKEND_URL)
    print()
    
    tester = CargoToTransportStage2Tester()
    
    try:
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        success = tester.run_comprehensive_test()
        
        if success:
            # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            overall_success = tester.print_final_report()
            
            # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
            sys.exit(0 if overall_success else 1)
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()