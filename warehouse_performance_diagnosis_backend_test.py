#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–∫–ª–∞–¥—ã" –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–°–∫–ª–∞–¥—ã" –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ–ª–≥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)
2) –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–æ–≤:
   - GET /api/warehouses - –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
   - GET /api/admin/warehouses - –µ—Å–ª–∏ —Ç–∞–∫–æ–π endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–ª–∞–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:
   - –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–ª–∞–¥–æ–≤
   - –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
4) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è:
   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ (–≥—Ä—É–∑—ã –Ω–∞ –∫–∞–∂–¥–æ–º —Å–∫–ª–∞–¥–µ)
   - –û–ø–µ—Ä–∞—Ç–æ—Ä—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Å–∫–ª–∞–¥–∞–º
   - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ (–±–ª–æ–∫–∏, —Å—Ç–µ–ª–ª–∞–∂–∏, —è—á–µ–π–∫–∏)
5) –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ endpoints:
   - GET /api/warehouses/{warehouse_id}/structure (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞?)
   - GET /api/warehouses/{warehouse_id}/cargo (–≥—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–µ?)
6) –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ N+1 –ø—Ä–æ–±–ª–µ–º—ã

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–∫–ª–∞–¥—ã" –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import requests
import json
import os
import time
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-logistics-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_token = None

def log_test_result(test_name, success, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {status} {test_name}")
    if details:
        print(f"    üìã {details}")
    print()

def measure_response_time(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        response_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        return result, response_time
    return wrapper

def get_response_size(response):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö"""
    if hasattr(response, 'content'):
        return len(response.content)
    return 0

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 1024:
        return f"{size_bytes} bytes"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.2f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.2f} MB"

def test_admin_authorization():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)"""
    global auth_token
    print("üîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)")
    
    try:
        login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        start_time = time.time()
        response = requests.post(f"{API_BASE}/auth/login", json=login_data)
        response_time = (time.time() - start_time) * 1000
        
        if response.status_code == 200:
            data = response.json()
            auth_token = data.get("access_token")
            user_info = data.get("user", {})
            
            log_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
                True, 
                f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'N/A')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')}), —Ä–æ–ª—å: {user_info.get('role', 'N/A')}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
            )
            return True
        else:
            log_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
                False, 
                f"HTTP {response.status_code}: {response.text}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
            )
            return False
            
    except Exception as e:
        log_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return False

@measure_response_time
def make_api_request(url, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
    return requests.get(url, headers=headers)

def test_warehouses_main_endpoint():
    """–¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint —Å–∫–ª–∞–¥–æ–≤"""
    print("üè≠ –¢–ï–°–¢ 2: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GET /api/warehouses")
    
    if not auth_token:
        log_test_result("–ê–Ω–∞–ª–∏–∑ /api/warehouses", False, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return None
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint
        response, response_time = make_api_request(f"{API_BASE}/warehouses", headers)
        response_size = get_response_size(response)
        
        if response.status_code == 200:
            data = response.json()
            warehouse_count = len(data) if isinstance(data, list) else len(data.get('items', []))
            
            log_test_result(
                "GET /api/warehouses", 
                True, 
                f"–ù–∞–π–¥–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {format_size(response_size)}"
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
            if isinstance(data, list) and data:
                sample_warehouse = data[0]
                fields_count = len(sample_warehouse.keys()) if isinstance(sample_warehouse, dict) else 0
                log_test_result(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞", 
                    True, 
                    f"–ö–∞–∂–¥—ã–π —Å–∫–ª–∞–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç {fields_count} –ø–æ–ª–µ–π: {list(sample_warehouse.keys()) if isinstance(sample_warehouse, dict) else 'N/A'}"
                )
            
            return data
        else:
            log_test_result(
                "GET /api/warehouses", 
                False, 
                f"HTTP {response.status_code}: {response.text}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
            )
            return None
            
    except Exception as e:
        log_test_result("GET /api/warehouses", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return None

def test_admin_warehouses_endpoint():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è admin endpoint –¥–ª—è —Å–∫–ª–∞–¥–æ–≤"""
    print("üîß –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ GET /api/admin/warehouses")
    
    if not auth_token:
        log_test_result("–ê–Ω–∞–ª–∏–∑ /api/admin/warehouses", False, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return None
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ admin endpoint
        response, response_time = make_api_request(f"{API_BASE}/admin/warehouses", headers)
        response_size = get_response_size(response)
        
        if response.status_code == 200:
            data = response.json()
            warehouse_count = len(data) if isinstance(data, list) else len(data.get('items', []))
            
            log_test_result(
                "GET /api/admin/warehouses", 
                True, 
                f"Admin endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ù–∞–π–¥–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {format_size(response_size)}"
            )
            return data
        elif response.status_code == 404:
            log_test_result(
                "GET /api/admin/warehouses", 
                True, 
                f"Admin endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (HTTP 404), –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            )
            return None
        else:
            log_test_result(
                "GET /api/admin/warehouses", 
                False, 
                f"HTTP {response.status_code}: {response.text}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
            )
            return None
            
    except Exception as e:
        log_test_result("GET /api/admin/warehouses", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return None

def test_warehouse_statistics_endpoints(warehouses):
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤"""
    print("üìä –¢–ï–°–¢ 4: –ê–Ω–∞–ª–∏–∑ endpoints —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤")
    
    if not warehouses or not auth_token:
        log_test_result("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    headers = {"Authorization": f"Bearer {auth_token}"}
    total_statistics_time = 0
    successful_requests = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_warehouses = warehouses[:5] if len(warehouses) > 5 else warehouses
    
    for i, warehouse in enumerate(test_warehouses):
        warehouse_id = warehouse.get('id')
        warehouse_name = warehouse.get('name', 'Unknown')
        
        if not warehouse_id:
            continue
            
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞
            response, response_time = make_api_request(
                f"{API_BASE}/warehouses/{warehouse_id}/statistics", 
                headers
            )
            total_statistics_time += response_time
            
            if response.status_code == 200:
                successful_requests += 1
                data = response.json()
                response_size = get_response_size(response)
                
                log_test_result(
                    f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", 
                    True, 
                    f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä: {format_size(response_size)}, –¥–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)[:100]}..."
                )
            else:
                log_test_result(
                    f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", 
                    False, 
                    f"HTTP {response.status_code}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
                )
                
        except Exception as e:
            log_test_result(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if successful_requests > 0:
        avg_time = total_statistics_time / successful_requests
        log_test_result(
            "–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
            True, 
            f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.0f}ms, —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{len(test_warehouses)}"
        )

def test_warehouse_structure_endpoints(warehouses):
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–æ–≤ (–±–ª–æ–∫–∏, –ø–æ–ª–∫–∏, —è—á–µ–π–∫–∏)"""
    print("üèóÔ∏è –¢–ï–°–¢ 5: –ê–Ω–∞–ª–∏–∑ endpoints —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–æ–≤")
    
    if not warehouses or not auth_token:
        log_test_result("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–æ–≤", False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    headers = {"Authorization": f"Bearer {auth_token}"}
    total_structure_time = 0
    successful_requests = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    test_warehouses = warehouses[:3] if len(warehouses) > 3 else warehouses
    
    for warehouse in test_warehouses:
        warehouse_id = warehouse.get('id')
        warehouse_name = warehouse.get('name', 'Unknown')
        
        if not warehouse_id:
            continue
            
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞
            response, response_time = make_api_request(
                f"{API_BASE}/warehouses/{warehouse_id}/structure", 
                headers
            )
            total_structure_time += response_time
            
            if response.status_code == 200:
                successful_requests += 1
                data = response.json()
                response_size = get_response_size(response)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                blocks_count = len(data.get('blocks', [])) if isinstance(data, dict) else 0
                cells_count = 0
                if isinstance(data, dict) and 'blocks' in data:
                    for block in data['blocks']:
                        if isinstance(block, dict) and 'shelves' in block:
                            for shelf in block['shelves']:
                                if isinstance(shelf, dict) and 'cells' in shelf:
                                    cells_count += len(shelf['cells'])
                
                log_test_result(
                    f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", 
                    True, 
                    f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä: {format_size(response_size)}, –±–ª–æ–∫–æ–≤: {blocks_count}, —è—á–µ–µ–∫: {cells_count}"
                )
            else:
                log_test_result(
                    f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", 
                    False, 
                    f"HTTP {response.status_code}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
                )
                
        except Exception as e:
            log_test_result(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if successful_requests > 0:
        avg_time = total_structure_time / successful_requests
        log_test_result(
            "–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", 
            True, 
            f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.0f}ms, —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{len(test_warehouses)}"
        )

def test_warehouse_cells_endpoints(warehouses):
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–æ–≤"""
    print("üì¶ –¢–ï–°–¢ 6: –ê–Ω–∞–ª–∏–∑ endpoints —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–æ–≤")
    
    if not warehouses or not auth_token:
        log_test_result("–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–æ–≤", False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    headers = {"Authorization": f"Bearer {auth_token}"}
    total_cells_time = 0
    successful_requests = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —è—á–µ–µ–∫
    test_warehouses = warehouses[:3] if len(warehouses) > 3 else warehouses
    
    for warehouse in test_warehouses:
        warehouse_id = warehouse.get('id')
        warehouse_name = warehouse.get('name', 'Unknown')
        
        if not warehouse_id:
            continue
            
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞
            response, response_time = make_api_request(
                f"{API_BASE}/warehouses/{warehouse_id}/cells", 
                headers
            )
            total_cells_time += response_time
            
            if response.status_code == 200:
                successful_requests += 1
                data = response.json()
                response_size = get_response_size(response)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —è—á–µ–µ–∫
                cells_count = len(data) if isinstance(data, list) else len(data.get('items', []))
                occupied_cells = 0
                if isinstance(data, list):
                    occupied_cells = sum(1 for cell in data if isinstance(cell, dict) and cell.get('is_occupied'))
                
                log_test_result(
                    f"–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", 
                    True, 
                    f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä: {format_size(response_size)}, –≤—Å–µ–≥–æ —è—á–µ–µ–∫: {cells_count}, –∑–∞–Ω—è—Ç–æ: {occupied_cells}"
                )
            else:
                log_test_result(
                    f"–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", 
                    False, 
                    f"HTTP {response.status_code}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
                )
                
        except Exception as e:
            log_test_result(f"–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞ '{warehouse_name}'", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—á–µ–µ–∫
    if successful_requests > 0:
        avg_time = total_cells_time / successful_requests
        log_test_result(
            "–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —è—á–µ–µ–∫", 
            True, 
            f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.0f}ms, —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{len(test_warehouses)}"
        )

def test_warehouse_cargo_endpoints(warehouses):
    """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints –≥—Ä—É–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"""
    print("üìã –¢–ï–°–¢ 7: –ê–Ω–∞–ª–∏–∑ endpoints –≥—Ä—É–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö")
    
    if not warehouses or not auth_token:
        log_test_result("–ì—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö", False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    headers = {"Authorization": f"Bearer {auth_token}"}
    total_cargo_time = 0
    successful_requests = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–∑–æ–≤
    test_warehouses = warehouses[:3] if len(warehouses) > 3 else warehouses
    
    for warehouse in test_warehouses:
        warehouse_id = warehouse.get('id')
        warehouse_name = warehouse.get('name', 'Unknown')
        
        if not warehouse_id:
            continue
            
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –≥—Ä—É–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
            response, response_time = make_api_request(
                f"{API_BASE}/warehouses/{warehouse_id}/cargo", 
                headers
            )
            total_cargo_time += response_time
            
            if response.status_code == 200:
                successful_requests += 1
                data = response.json()
                response_size = get_response_size(response)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤
                cargo_count = len(data) if isinstance(data, list) else len(data.get('items', []))
                
                log_test_result(
                    f"–ì—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–µ '{warehouse_name}'", 
                    True, 
                    f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä: {format_size(response_size)}, –≥—Ä—É–∑–æ–≤: {cargo_count}"
                )
            else:
                log_test_result(
                    f"–ì—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–µ '{warehouse_name}'", 
                    False, 
                    f"HTTP {response.status_code}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
                )
                
        except Exception as e:
            log_test_result(f"–ì—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–µ '{warehouse_name}'", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–∑–æ–≤
    if successful_requests > 0:
        avg_time = total_cargo_time / successful_requests
        log_test_result(
            "–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥—Ä—É–∑–æ–≤", 
            True, 
            f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.0f}ms, —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}/{len(test_warehouses)}"
        )

def test_operator_warehouse_bindings():
    """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Å–∫–ª–∞–¥–∞–º"""
    print("üë• –¢–ï–°–¢ 8: –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤—è–∑–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Å–∫–ª–∞–¥–∞–º")
    
    if not auth_token:
        log_test_result("–ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", False, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    try:
        headers = {"Authorization": f"Bearer {auth_token}"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –ø—Ä–∏–≤—è–∑–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        response, response_time = make_api_request(
            f"{API_BASE}/admin/operator-warehouse-bindings", 
            headers
        )
        response_size = get_response_size(response)
        
        if response.status_code == 200:
            data = response.json()
            bindings_count = len(data) if isinstance(data, list) else len(data.get('items', []))
            
            log_test_result(
                "–ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Å–∫–ª–∞–¥–∞–º", 
                True, 
                f"–ù–∞–π–¥–µ–Ω–æ {bindings_count} –ø—Ä–∏–≤—è–∑–æ–∫, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä: {format_size(response_size)}"
            )
        else:
            log_test_result(
                "–ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Å–∫–ª–∞–¥–∞–º", 
                False, 
                f"HTTP {response.status_code}, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms"
            )
            
    except Exception as e:
        log_test_result("–ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Å–∫–ª–∞–¥–∞–º", False, f"–û—à–∏–±–∫–∞: {str(e)}")

def analyze_performance_bottlenecks():
    """–¢–µ—Å—Ç 9: –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîç –¢–ï–°–¢ 9: –ê–Ω–∞–ª–∏–∑ —É–∑–∫–∏—Ö –º–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    print("üìà –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("1. –û—Å–Ω–æ–≤–Ω–æ–π endpoint /api/warehouses - –±–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤")
    print("2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ - –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ")
    print("3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–æ–≤ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∞—Ö/–ø–æ–ª–∫–∞—Ö/—è—á–µ–π–∫–∞—Ö")
    print("4. –Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–æ–≤ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —è—á–µ–µ–∫")
    print("5. –ì—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞")
    print("6. –ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–∞–∫–æ–º —Å–∫–ª–∞–¥–µ")
    print()
    
    print("üéØ –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ú–ï–î–õ–ï–ù–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò:")
    print("‚Ä¢ N+1 –ø—Ä–æ–±–ª–µ–º–∞: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –¥–µ–ª–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏/—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    print("‚Ä¢ –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: –º–Ω–æ–≥–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∫–ª–∞–¥–æ–≤")
    print("‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MongoDB")
    print("‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É (–≥—Ä—É–∑—ã, –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)")
    print("‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print()
    
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤")
    print("‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É/—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")
    print("‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ MongoDB (–∏–Ω–¥–µ–∫—Å—ã)")
    print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lazy loading –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–°–∫–ª–∞–¥—ã' –≤ TAJLINE.TJ")
    print("=" * 80)
    print()
    
    # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not test_admin_authorization():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç 2: –û—Å–Ω–æ–≤–Ω–æ–π endpoint —Å–∫–ª–∞–¥–æ–≤
    warehouses = test_warehouses_main_endpoint()
    
    # –¢–µ—Å—Ç 3: Admin endpoint —Å–∫–ª–∞–¥–æ–≤
    test_admin_warehouses_endpoint()
    
    if warehouses:
        # –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        test_warehouse_statistics_endpoints(warehouses)
        
        # –¢–µ—Å—Ç 5: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
        test_warehouse_structure_endpoints(warehouses)
        
        # –¢–µ—Å—Ç 6: –Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–æ–≤
        test_warehouse_cells_endpoints(warehouses)
        
        # –¢–µ—Å—Ç 7: –ì—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        test_warehouse_cargo_endpoints(warehouses)
    
    # –¢–µ—Å—Ç 8: –ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    test_operator_warehouse_bindings()
    
    # –¢–µ—Å—Ç 9: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    analyze_performance_bottlenecks()
    
    print("=" * 80)
    print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)

if __name__ == "__main__":
    main()