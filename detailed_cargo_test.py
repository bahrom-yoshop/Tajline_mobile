#!/usr/bin/env python3
"""
Detailed test to examine cargo data structure
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
auth_token = None

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        return response
    
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request failed: {e}")
        return None

def authenticate():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    global auth_token
    
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response = make_request("POST", "/auth/login", auth_data)
    
    if response and response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user_info.get('full_name')} ({user_info.get('role')})")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False

def examine_individual_units():
    """–î–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∞–µ–º individual units"""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ individual units...")
    
    response = make_request("GET", "/operator/cargo/individual-units-for-placement")
    
    if response and response.status_code == 200:
        data = response.json()
        print(f"üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
        print(json.dumps(data, indent=2, ensure_ascii=False))
        
        items = data.get("items", [])
        print(f"\nüì¶ –ù–∞–π–¥–µ–Ω–æ items: {len(items)}")
        
        for i, item in enumerate(items):
            print(f"\n   üìã Item {i+1}:")
            for key, value in item.items():
                print(f"      {key}: {value}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual units")

def examine_available_cargo():
    """–î–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∞–µ–º available cargo"""
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ available cargo...")
    
    response = make_request("GET", "/operator/cargo/available-for-placement")
    
    if response and response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ cargo items: {len(items)}")
        
        for i, cargo in enumerate(items[:1]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            print(f"\n   üìã Cargo {i+1}:")
            print(f"      cargo_number: {cargo.get('cargo_number')}")
            print(f"      cargo_name: {cargo.get('cargo_name')}")
            
            cargo_items = cargo.get("cargo_items", [])
            print(f"      cargo_items count: {len(cargo_items)}")
            
            for j, cargo_item in enumerate(cargo_items):
                print(f"\n         üì¶ Cargo Item {j+1}:")
                print(f"            name: {cargo_item.get('name')}")
                print(f"            cargo_name: {cargo_item.get('cargo_name')}")
                
                individual_items = cargo_item.get("individual_items", [])
                print(f"            individual_items count: {len(individual_items)}")
                
                for k, individual_item in enumerate(individual_items):
                    print(f"\n               üîπ Individual Item {k+1}:")
                    print(f"                  individual_number: {individual_item.get('individual_number')}")
                    print(f"                  is_placed: {individual_item.get('is_placed')}")
                    print(f"                  placement_info: {individual_item.get('placement_info')}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è available cargo")

def test_verify_cargo_with_known_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º verify-cargo —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º verify-cargo —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤ (–±–µ–∑ individual numbers)
    test_cases = [
        {"qr_code": "250101", "expected_name": "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π"},
        {"qr_code": "25082235", "expected_name": "–°–∞–º–æ–∫–∞—Ç –í–ò–í–û"}
    ]
    
    for test_case in test_cases:
        qr_code = test_case["qr_code"]
        expected_name = test_case["expected_name"]
        
        print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {qr_code} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_name})")
        
        response = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
        
        if response and response.status_code == 200:
            data = response.json()
            success = data.get("success", False)
            cargo_info = data.get("cargo_info", {})
            error = data.get("error", "")
            
            if success:
                cargo_name = cargo_info.get("cargo_name", "N/A")
                cargo_number = cargo_info.get("cargo_number", "N/A")
                individual_number = cargo_info.get("individual_number", "N/A")
                
                print(f"      ‚úÖ SUCCESS!")
                print(f"         - cargo_number: {cargo_number}")
                print(f"         - cargo_name: {cargo_name}")
                print(f"         - individual_number: {individual_number}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
                if expected_name in cargo_name:
                    print(f"         ‚úÖ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É!")
                else:
                    print(f"         ‚ö†Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}', –ø–æ–ª—É—á–µ–Ω–æ '{cargo_name}'")
            else:
                print(f"      ‚ùå FAIL: {error}")
        else:
            print(f"      ‚ùå HTTP error")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –î–ï–¢–ê–õ–¨–ù–û–ï –ò–ó–£–ß–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –ì–†–£–ó–û–í")
    print("="*60)
    
    if not authenticate():
        return
    
    # –ò–∑—É—á–∞–µ–º individual units
    examine_individual_units()
    
    # –ò–∑—É—á–∞–µ–º available cargo
    examine_available_cargo()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º verify-cargo
    test_verify_cargo_with_known_data()

if __name__ == "__main__":
    main()