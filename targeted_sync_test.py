#!/usr/bin/env python3
"""
üéØ –¶–ï–õ–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞—è–≤–∫–∏ 250109
"""

import requests
import json
import time
from datetime import datetime
import os
import random

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class TargetedSyncTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    print(f"‚úÖ –°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})")
                    return True
                else:
                    print("‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞: {str(e)}")
            return False

    def investigate_application_250109(self):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ 250109"""
        print("\nüîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò 250109")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ available-for-placement
        print("üìã –ü–æ–∏—Å–∫ –≤ available-for-placement...")
        available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
        
        found_in_available = False
        if available_response.status_code == 200:
            available_data = available_response.json()
            available_items = available_data.get("items", [])
            
            for item in available_items:
                if item.get("cargo_number") == "250109":
                    found_in_available = True
                    print(f"‚úÖ –ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ available-for-placement")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ individual_items
                    cargo_items = item.get("cargo_items", [])
                    print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–∞: {len(cargo_items)}")
                    
                    total_units = 0
                    placed_units = 0
                    
                    for i, cargo_item in enumerate(cargo_items):
                        individual_items = cargo_item.get("individual_items", [])
                        cargo_total = len(individual_items)
                        cargo_placed = sum(1 for unit in individual_items if unit.get("is_placed", False))
                        
                        total_units += cargo_total
                        placed_units += cargo_placed
                        
                        print(f"   üì¶ –¢–∏–ø –≥—Ä—É–∑–∞ {i+1}: {cargo_placed}/{cargo_total} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü
                        for j, unit in enumerate(individual_items[:3]):
                            individual_number = unit.get("individual_number", "N/A")
                            is_placed = unit.get("is_placed", False)
                            print(f"     üìã –ï–¥–∏–Ω–∏—Ü–∞ {j+1}: {individual_number} - —Ä–∞–∑–º–µ—â–µ–Ω–∞: {is_placed}")
                    
                    print(f"   üìä –ò–¢–û–ì–û: {placed_units}/{total_units} –µ–¥–∏–Ω–∏—Ü —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                    break
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è available-for-placement: {available_response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ fully-placed
        print("\nüìã –ü–æ–∏—Å–∫ –≤ fully-placed...")
        fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
        
        found_in_fully_placed = False
        if fully_placed_response.status_code == 200:
            fully_placed_data = fully_placed_response.json()
            fully_placed_items = fully_placed_data.get("items", [])
            
            for item in fully_placed_items:
                if item.get("cargo_number") == "250109":
                    found_in_fully_placed = True
                    print(f"‚úÖ –ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed")
                    break
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fully-placed: {fully_placed_response.status_code}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò 250109:")
        print(f"   Available-for-placement: {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if found_in_available else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        print(f"   Fully-placed: {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if found_in_fully_placed else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        
        if found_in_available and found_in_fully_placed:
            print("   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –û–ë–û–ò–• —Å–ø–∏—Å–∫–∞—Ö!")
        elif not found_in_available and not found_in_fully_placed:
            print("   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
        elif found_in_available:
            print("   ‚úÖ –ó–∞—è–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ available-for-placement")
        else:
            print("   ‚úÖ –ó–∞—è–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ fully-placed")

    def test_placement_with_random_cells(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏"""
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –° –°–õ–£–ß–ê–ô–ù–´–ú–ò –Ø–ß–ï–ô–ö–ê–ú–ò")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
        
        if available_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {available_response.status_code}")
            return False
        
        available_data = available_response.json()
        available_items = available_data.get("items", [])
        
        if not available_items:
            print("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
        first_cargo = available_items[0]
        cargo_number = first_cargo.get("cargo_number")
        print(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É: {cargo_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        cargo_items = first_cargo.get("cargo_items", [])
        if not cargo_items:
            print("‚ùå –ù–µ—Ç cargo_items")
            return False
        
        individual_items = cargo_items[0].get("individual_items", [])
        if not individual_items:
            print("‚ùå –ù–µ—Ç individual_items")
            return False
        
        # –ò—â–µ–º –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
        test_unit = None
        for unit in individual_items:
            if not unit.get("is_placed", False):
                test_unit = unit
                break
        
        if not test_unit:
            print("‚ùå –í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
            return False
        
        individual_number = test_unit.get("individual_number")
        print(f"üìã –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É: {individual_number}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —è—á–µ–π–∫–∏
        for attempt in range(10):
            block = random.randint(1, 4)
            shelf = random.randint(1, 4)
            cell = random.randint(1, 50)
            
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ë–ª–æ–∫ {block}, –ü–æ–ª–∫–∞ {shelf}, –Ø—á–µ–π–∫–∞ {cell}")
            
            placement_data = {
                "individual_number": individual_number,
                "block_number": block,
                "shelf_number": shelf,
                "cell_number": cell
            }
            
            place_response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            if place_response.status_code == 200:
                place_data = place_response.json()
                print(f"   ‚úÖ –£–°–ü–ï–®–ù–û! –ï–¥–∏–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {place_data.get('message', '–£—Å–ø–µ—à–Ω–æ')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
                time.sleep(2)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                updated_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
                
                if updated_response.status_code == 200:
                    updated_data = updated_response.json()
                    updated_items = updated_data.get("items", [])
                    
                    # –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                    updated_cargo = None
                    for item in updated_items:
                        if item.get("cargo_number") == cargo_number:
                            updated_cargo = item
                            break
                    
                    if updated_cargo:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        updated_cargo_items = updated_cargo.get("cargo_items", [])
                        if updated_cargo_items:
                            updated_individual_items = updated_cargo_items[0].get("individual_items", [])
                            
                            updated_unit = None
                            for unit in updated_individual_items:
                                if unit.get("individual_number") == individual_number:
                                    updated_unit = unit
                                    break
                            
                            if updated_unit:
                                is_placed_after = updated_unit.get("is_placed", False)
                                print(f"   üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: is_placed = {is_placed_after}")
                                
                                if is_placed_after:
                                    print("   ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢! individual_items.is_placed –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                                    return True
                                else:
                                    print("   ‚ùå –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢! individual_items.is_placed –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
                                    return False
                            else:
                                print("   ‚ùå –†–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç cargo_items –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print("   üìã –ó–∞—è–≤–∫–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ available-for-placement - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fully-placed
                        fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
                        if fully_placed_response.status_code == 200:
                            fully_placed_data = fully_placed_response.json()
                            fully_placed_items = fully_placed_data.get("items", [])
                            
                            found_in_fully_placed = False
                            for item in fully_placed_items:
                                if item.get("cargo_number") == cargo_number:
                                    found_in_fully_placed = True
                                    break
                            
                            if found_in_fully_placed:
                                print("   ‚úÖ –û–¢–õ–ò–ß–ù–û! –ó–∞—è–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed")
                                return True
                            else:
                                print("   ‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed")
                                return False
                        else:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fully-placed: {fully_placed_response.status_code}")
                            return False
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {updated_response.status_code}")
                    return False
                    
            elif place_response.status_code == 400:
                try:
                    error_data = place_response.json()
                    error_detail = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    print(f"   ‚ùå –Ø—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {error_detail}")
                except:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ 400: {place_response.text}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {place_response.status_code}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫")
        return False

    def check_placement_records_vs_individual_items(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É placement_records –∏ individual_items"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø PLACEMENT_RECORDS –ò INDIVIDUAL_ITEMS")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        progress_response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
        
        if progress_response.status_code == 200:
            progress_data = progress_response.json()
            total_units = progress_data.get("total_units", 0)
            placed_units = progress_data.get("placed_units", 0)
            pending_units = progress_data.get("pending_units", 0)
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
            print(f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}")
            print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_units}")
            print(f"   –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {pending_units}")
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_data.get('progress_percentage', 0):.1f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if total_units == placed_units + pending_units:
                print("   ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print(f"   ‚ùå –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {total_units} ‚â† {placed_units} + {pending_units}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {progress_response.status_code}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
        available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
        
        if available_response.status_code == 200:
            available_data = available_response.json()
            available_items = available_data.get("items", [])
            
            print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –≤ available-for-placement ({len(available_items)} –∑–∞—è–≤–æ–∫):")
            
            total_individual_units = 0
            total_placed_individual_units = 0
            
            for i, item in enumerate(available_items[:5]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞—è–≤–æ–∫
                cargo_number = item.get("cargo_number")
                cargo_items = item.get("cargo_items", [])
                
                cargo_total = 0
                cargo_placed = 0
                
                for cargo_item in cargo_items:
                    individual_items = cargo_item.get("individual_items", [])
                    cargo_total += len(individual_items)
                    cargo_placed += sum(1 for unit in individual_items if unit.get("is_placed", False))
                
                total_individual_units += cargo_total
                total_placed_individual_units += cargo_placed
                
                print(f"   {i+1}. {cargo_number}: {cargo_placed}/{cargo_total} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
            
            print(f"\nüìä –ò—Ç–æ–≥–æ –ø–æ individual_items –≤ available-for-placement:")
            print(f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_individual_units}")
            print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ: {total_placed_individual_units}")
            print(f"   –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {total_individual_units - total_placed_individual_units}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è available-for-placement: {available_response.status_code}")

    def run_investigation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        print("üîç –ù–ê–ß–ê–õ–û –¶–ï–õ–ï–í–û–ì–û –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
        print("=" * 70)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        self.investigate_application_250109()
        self.check_placement_records_vs_individual_items()
        placement_success = self.test_placement_with_random_cells()
        
        print("\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
        print("=" * 70)
        
        if placement_success:
            print("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("   –†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –æ–±–Ω–æ–≤–ª—è–µ—Ç individual_items.is_placed")
            print("   –ó–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô!")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        return placement_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TargetedSyncTester()
    success = tester.run_investigation()
    
    if success:
        print("\nüéØ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        return 0
    else:
        print("\n‚ùå –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´ –° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ï–ô!")
        return 1

if __name__ == "__main__":
    exit(main())