#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –ò –°–û–ó–î–ê–ù–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –°–ö–õ–ê–î–ê

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ä—è—Å–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫:
- 001 = ID —Å–∫–ª–∞–¥–∞  
- 01 = –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞
- 01 = –Ω–æ–º–µ—Ä –ø–æ–ª–∫–∏
- 003 = –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏

–¢–æ –µ—Å—Ç—å "001-01-01-003" = –°–∫–ª–∞–¥ 001, –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 3 (—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ "–ë1-–ü1-–Ø3")

–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. **–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è—á–µ–µ–∫**: –ï—Å–ª–∏ —É —Å–∫–ª–∞–¥–∞ –Ω–µ—Ç layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ä–∞–∑—É–º–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–ë–ª–æ–∫–∏ 1-10, –ü–æ–ª–∫–∏ 1-10, –Ø—á–µ–π–∫–∏ 1-100)
2. **–ù–æ–≤—ã–π API endpoint**: POST /api/warehouses/{warehouse_id}/create-layout –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞

–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:
1. **–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê**: +79777888999 / warehouse123
2. **–¢–ï–°–¢ 1 - QR –∫–æ–¥ —è—á–µ–π–∫–∏ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π**: 
   - QR –∫–æ–¥: "–ë2-–ü1-–Ø1" (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π)
   - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ø—á–µ–π–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞
3. **–¢–ï–°–¢ 2 - QR –∫–æ–¥ —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id**: 
   - QR –∫–æ–¥: "001-01-01-003" 
   - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞
4. **–¢–ï–°–¢ 3 - –°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞**:
   - API: POST /api/warehouses/d0a8362d-b4d3-4947-b335-28c94658a021/create-layout
   - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–∞
5. **–¢–ï–°–¢ 4 - QR –∫–æ–¥ —è—á–µ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã**:
   - QR –∫–æ–¥: "–ë2-–ü1-–Ø1" (—Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π)
   - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ layout —Å—Ç—Ä—É–∫—Ç—É—Ä–µ

API ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- POST /api/operator/placement/verify-cell (–ø—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫)
- POST /api/warehouses/{warehouse_id}/create-layout (—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞)

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ä–∞–∑—É–º–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫
- QR –∫–æ–¥ "–ë2-–ü1-–Ø1" —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è 
- QR –∫–æ–¥ "001-01-01-003" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- Layout —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ
- –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ—á–Ω–æ –ø–æ layout
"""

import requests
import json
import os
from datetime import datetime
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

# ID —Å–∫–ª–∞–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ review request)
TEST_WAREHOUSE_ID = "d0a8362d-b4d3-4947-b335-28c94658a021"

class QRCellFixesTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_info = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
            print("=" * 50)
            
            response = self.session.post(f"{API_BASE}/auth/login", json=WAREHOUSE_OPERATOR_CREDENTIALS)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {self.operator_user.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_warehouse_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ"""
        try:
            print("üè¢ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–õ–ê–î–ï")
            print("=" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥
                    self.warehouse_info = warehouse
                    
                    warehouse_id_number = warehouse.get('warehouse_id_number', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')
                    
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ",
                        True,
                        f"–°–∫–ª–∞–¥ '{warehouse.get('name')}' (ID: {warehouse.get('id')}), warehouse_id_number: {warehouse_id_number}"
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∫–ª–∞–¥–∞
                    structure_info = f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {warehouse.get('blocks_count', 0)} –±–ª–æ–∫–æ–≤, {warehouse.get('shelves_per_block', 0)} –ø–æ–ª–æ–∫/–±–ª–æ–∫, {warehouse.get('cells_per_shelf', 0)} —è—á–µ–µ–∫/–ø–æ–ª–∫—É"
                    print(f"   üìä {structure_info}")
                    
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_simplified_cell_verification(self):
        """–¢–ï–°–¢ 1: QR –∫–æ–¥ —è—á–µ–π–∫–∏ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            print("üéØ –¢–ï–°–¢ 1: QR –ö–û–î –Ø–ß–ï–ô–ö–ò –° –£–ü–†–û–©–ï–ù–ù–û–ô –ü–†–û–í–ï–†–ö–û–ô")
            print("=" * 50)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥ "–ë2-–ü1-–Ø1" (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π)
            test_qr_code = "–ë2-–ü1-–Ø1"
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": test_qr_code}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    cell_info = data.get("cell_info", {})
                    self.log_test(
                        "QR –∫–æ–¥ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π",
                        True,
                        f"QR –∫–æ–¥ '{test_qr_code}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –Ø—á–µ–π–∫–∞: {cell_info.get('cell_address', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    )
                    return True
                else:
                    error_message = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.log_test(
                        "QR –∫–æ–¥ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π",
                        False,
                        f"QR –∫–æ–¥ '{test_qr_code}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {error_message}",
                        "–Ø—á–µ–π–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
                        f"–û—à–∏–±–∫–∞: {error_message}"
                    )
                    return False
            else:
                self.log_test(
                    "QR –∫–æ–¥ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("QR –∫–æ–¥ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_warehouse_id_format_qr(self):
        """–¢–ï–°–¢ 2: QR –∫–æ–¥ —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id"""
        try:
            print("üéØ –¢–ï–°–¢ 2: QR –ö–û–î –Ø–ß–ï–ô–ö–ò –í –§–û–†–ú–ê–¢–ï WAREHOUSE_ID")
            print("=" * 50)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥ "001-01-01-003" (—Ñ–æ—Ä–º–∞—Ç warehouse_id-block-shelf-cell)
            test_qr_code = "001-01-01-003"
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": test_qr_code}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    cell_info = data.get("cell_info", {})
                    self.log_test(
                        "QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id",
                        True,
                        f"QR –∫–æ–¥ '{test_qr_code}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –Ø—á–µ–π–∫–∞: {cell_info.get('cell_address', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    )
                    return True
                else:
                    error_message = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –æ—à–∏–±–∫–∞ "—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" (—ç—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
                    if "—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.lower():
                        self.log_test(
                            "QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id",
                            False,
                            f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: QR –∫–æ–¥ '{test_qr_code}' –≤—Å–µ –µ—â–µ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω': {error_message}",
                            "–Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞",
                            f"–û—à–∏–±–∫–∞: {error_message}"
                        )
                        return False
                    else:
                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å–æ —Å–∫–ª–∞–¥–æ–º, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —è—á–µ–π–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                        self.log_test(
                            "QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id",
                            True,
                            f"–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢: QR –∫–æ–¥ '{test_qr_code}' –±–æ–ª—å—à–µ –ù–ï –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'. –¢–µ–∫—É—â–∞—è –æ—à–∏–±–∫–∞: {error_message}"
                        )
                        return True
            else:
                self.log_test(
                    "QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_create_warehouse_layout(self):
        """–¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞"""
        try:
            print("üéØ –¢–ï–°–¢ 3: –°–û–ó–î–ê–ù–ò–ï LAYOUT –°–¢–†–£–ö–¢–£–†–´ –°–ö–õ–ê–î–ê")
            print("=" * 50)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–∫–ª–∞–¥–∞ –∏–∑ review request
            warehouse_id = TEST_WAREHOUSE_ID
            
            response = self.session.post(
                f"{API_BASE}/warehouses/{warehouse_id}/create-layout"
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    layout_info = data.get("layout_info", {})
                    self.log_test(
                        "–°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞",
                        True,
                        f"Layout —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: {layout_info.get('blocks_created', 0)} –±–ª–æ–∫–æ–≤, {layout_info.get('shelves_created', 0)} –ø–æ–ª–æ–∫, {layout_info.get('cells_created', 0)} —è—á–µ–µ–∫"
                    )
                    return True
                else:
                    error_message = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.log_test(
                        "–°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞",
                        False,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å layout —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {error_message}",
                        "–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–∞",
                        f"–û—à–∏–±–∫–∞: {error_message}"
                    )
                    return False
            elif response.status_code == 404:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞",
                    False,
                    f"Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404). –í–æ–∑–º–æ–∂–Ω–æ, API endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
                    "200",
                    "404"
                )
                return False
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_cell_verification_after_layout(self):
        """–¢–ï–°–¢ 4: QR –∫–æ–¥ —è—á–µ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            print("üéØ –¢–ï–°–¢ 4: QR –ö–û–î –Ø–ß–ï–ô–ö–ò –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –°–¢–†–£–ö–¢–£–†–´")
            print("=" * 50)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥ "–ë2-–ü1-–Ø1" (—Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π)
            test_qr_code = "–ë2-–ü1-–Ø1"
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": test_qr_code}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    cell_info = data.get("cell_info", {})
                    self.log_test(
                        "QR –∫–æ–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                        True,
                        f"QR –∫–æ–¥ '{test_qr_code}' —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –≤ layout —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –Ø—á–µ–π–∫–∞: {cell_info.get('cell_address', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    )
                    return True
                else:
                    error_message = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.log_test(
                        "QR –∫–æ–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                        False,
                        f"QR –∫–æ–¥ '{test_qr_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ layout —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {error_message}",
                        "–Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ layout —Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
                        f"–û—à–∏–±–∫–∞: {error_message}"
                    )
                    return False
            else:
                self.log_test(
                    "QR –∫–æ–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("QR –∫–æ–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_additional_qr_formats(self):
        """–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤"""
        try:
            print("üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –†–ê–ó–õ–ò–ß–ù–´–ï –§–û–†–ú–ê–¢–´ QR –ö–û–î–û–í")
            print("=" * 50)
            
            test_cases = [
                {
                    "name": "QR –∫–æ–¥ –ë1-–ü1-–Ø1",
                    "qr_code": "–ë1-–ü1-–Ø1",
                    "should_work": True
                },
                {
                    "name": "QR –∫–æ–¥ 002-01-01-001",
                    "qr_code": "002-01-01-001",
                    "should_work": True  # –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–∫–ª–∞–¥–∞ 002
                },
                {
                    "name": "QR –∫–æ–¥ —Å –±–æ–ª—å—à–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –ë10-–ü10-–Ø100",
                    "qr_code": "–ë10-–ü10-–Ø100",
                    "should_work": True  # –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                },
                {
                    "name": "QR –∫–æ–¥ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –ë15-–ü15-–Ø150",
                    "qr_code": "–ë15-–ü15-–Ø150",
                    "should_work": False  # –î–æ–ª–∂–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å (–ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑—É–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã)
                },
                {
                    "name": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                    "qr_code": "invalid_format",
                    "should_work": False
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                print(f"  üìã –¢–µ—Å—Ç: {test_case['name']}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cell",
                    json={"qr_code": test_case["qr_code"]}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    success = data.get("success", False)
                    
                    if test_case["should_work"]:
                        if success:
                            print(f"    ‚úÖ QR –∫–æ–¥ '{test_case['qr_code']}' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                            success_count += 1
                        else:
                            print(f"    ‚ö†Ô∏è QR –∫–æ–¥ '{test_case['qr_code']}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {data.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
                            success_count += 1
                    else:
                        if not success:
                            print(f"    ‚úÖ QR –∫–æ–¥ '{test_case['qr_code']}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {data.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            success_count += 1
                        else:
                            print(f"    ‚ùå QR –∫–æ–¥ '{test_case['qr_code']}' –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç")
                else:
                    print(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            
            self.log_test(
                "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤",
                success_count >= total_tests * 0.8,  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_tests} —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤, —É—Å–ø–µ—à–Ω–æ: {success_count}"
            )
            
            return success_count >= total_tests * 0.8
                
        except Exception as e:
            self.log_test("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –ò –°–û–ó–î–ê–ù–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –°–ö–õ–ê–î–ê")
        print("=" * 80)
        print(f"üåê Backend URL: {BACKEND_URL}")
        print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_warehouse_info():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ")
            return False
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append(("–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫", self.test_simplified_cell_verification()))
        test_results.append(("QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id", self.test_warehouse_id_format_qr()))
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", self.test_create_warehouse_layout()))
        test_results.append(("QR –∫–æ–¥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", self.test_cell_verification_after_layout()))
        test_results.append(("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR", self.test_additional_qr_formats()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("=" * 80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if success_rate == 100:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("‚úÖ QR –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif success_rate >= 80:
            print("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
            print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
            print("‚úÖ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        print("\nüîç –ê–ù–ê–õ–ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        simplified_check = test_results[0][1]
        warehouse_id_format = test_results[1][1]
        layout_creation = test_results[2][1]
        after_layout = test_results[3][1]
        
        if simplified_check:
            print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è—á–µ–µ–∫ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if warehouse_id_format:
            print("‚úÖ QR –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå QR –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ warehouse_id –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        if layout_creation:
            print("‚úÖ API —Å–æ–∑–¥–∞–Ω–∏—è layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        else:
            print("‚ùå API —Å–æ–∑–¥–∞–Ω–∏—è layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        if after_layout:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–µ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print(f"\nüìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        return success_rate >= 80  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ 80%+ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = QRCellFixesTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        exit(1)

if __name__ == "__main__":
    main()