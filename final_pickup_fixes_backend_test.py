#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –í TAJLINE.TJ
Testing final fixes for cargo pickup request processing functionality in TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–≤–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. –ì–ï–ù–ï–†–ê–¶–ò–Ø QR –ö–û–î–û–í: —É–ª—É—á—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã –∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è
2. –û–¢–ü–†–ê–í–ö–ê –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï: –∏–∑–º–µ–Ω–µ–Ω processing_status —Å "pending" –Ω–∞ "paid" —á—Ç–æ–±—ã –≥—Ä—É–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ"

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "in_processing"
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º processing_status
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint /api/operator/cargo/available-for-placement
6. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥—Ä—É–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing_status: "paid"

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ì—Ä—É–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing_status: "paid" –∏ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ" (/api/operator/cargo/available-for-placement).
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class FinalPickupFixesTester:
    def __init__(self, base_url="https://tajline-ops.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.users = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –í TAJLINE.TJ")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    if isinstance(result, dict) and len(str(result)) < 300:
                        print(f"   üìÑ Response: {result}")
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_final_pickup_fixes(self):
        """Test final fixes for cargo pickup request processing functionality"""
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê")
        print("   üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ")
        
        all_success = True
        
        # –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)
        print("\n   üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        all_success &= success
        
        operator_token = None
        if success and 'access_token' in login_response:
            operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            operator_phone = operator_user.get('phone')
            operator_user_number = operator_user.get('user_number')
            
            print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {operator_name}")
            print(f"   üëë –†–æ–ª—å: {operator_role}")
            print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {operator_phone}")
            print(f"   üÜî –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {operator_user_number}")
            
            # Verify role is warehouse_operator
            if operator_role == 'warehouse_operator':
                print("   ‚úÖ –†–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ 'warehouse_operator'")
            else:
                print(f"   ‚ùå –†–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å 'warehouse_operator', –ø–æ–ª—É—á–µ–Ω–æ '{operator_role}'")
                all_success = False
            
            self.tokens['warehouse_operator'] = operator_token
            self.users['warehouse_operator'] = operator_user
        else:
            print("   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            all_success = False
            return False
        
        # –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–û –°–¢–ê–¢–£–°–û–ú "in_processing"
        print("\n   üì¨ –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–û –°–¢–ê–¢–£–°–û–ú 'in_processing'...")
        
        success, notifications_response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token
        )
        all_success &= success
        
        in_processing_notifications = []
        if success:
            notifications = notifications_response if isinstance(notifications_response, list) else []
            notification_count = len(notifications)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞")
            
            # Filter notifications with status "in_processing"
            in_processing_notifications = [n for n in notifications if n.get('status') == 'in_processing']
            in_processing_count = len(in_processing_notifications)
            
            print(f"   üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing': {in_processing_count}")
            
            if in_processing_count > 0:
                print("   ‚úÖ –ù–∞–π–¥–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                # Show sample notification
                sample_notification = in_processing_notifications[0]
                notification_id = sample_notification.get('id')
                request_number = sample_notification.get('request_number')
                sender_name = sample_notification.get('sender_full_name')
                print(f"   üìã –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ID={notification_id}, –ù–æ–º–µ—Ä={request_number}, –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å={sender_name}")
            else:
                print("   ‚ö†Ô∏è  –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                print("   ‚ÑπÔ∏è  –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞...")
                
                # Create a test pickup request to generate notification
                test_notification_created = self.create_test_pickup_request_notification(operator_token)
                if test_notification_created:
                    # Re-fetch notifications
                    success, notifications_response = self.run_test(
                        "–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                        "GET",
                        "/api/operator/warehouse-notifications",
                        200,
                        token=operator_token
                    )
                    
                    if success:
                        notifications = notifications_response if isinstance(notifications_response, list) else []
                        in_processing_notifications = [n for n in notifications if n.get('status') == 'in_processing']
                        in_processing_count = len(in_processing_notifications)
                        print(f"   üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing' –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {in_processing_count}")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
            all_success = False
        
        # –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï –° –ù–û–í–´–ú processing_status
        print("\n   üöö –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ü–†–ê–í–ö–ò –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï –° –ù–û–í–´–ú processing_status...")
        
        if in_processing_notifications:
            # Use the first in_processing notification for testing
            test_notification = in_processing_notifications[0]
            notification_id = test_notification.get('id')
            request_number = test_notification.get('request_number')
            
            print(f"   üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_id}")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_number}")
            
            success, send_to_placement_response = self.run_test(
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id})",
                "POST",
                f"/api/operator/warehouse-notifications/{notification_id}/send-to-placement",
                200,
                token=operator_token
            )
            all_success &= success
            
            if success:
                print("   ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # Check response for cargo creation details
                message = send_to_placement_response.get('message', '')
                cargo_number = send_to_placement_response.get('cargo_number')
                processing_status = send_to_placement_response.get('processing_status')
                
                print(f"   üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                if cargo_number:
                    print(f"   üì¶ –°–æ–∑–¥–∞–Ω –≥—Ä—É–∑: {cargo_number}")
                if processing_status:
                    print(f"   üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_status}")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: processing_status –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "paid"
                    if processing_status == "paid":
                        print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: processing_status = 'paid'")
                    else:
                        print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: processing_status = '{processing_status}', –æ–∂–∏–¥–∞–ª–æ—Å—å 'paid'")
                        all_success = False
                
                # Store cargo number for further testing
                if cargo_number:
                    self.test_cargo_number = cargo_number
            else:
                print("   ‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                all_success = False
        else:
            print("   ‚ö†Ô∏è  –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 'in_processing' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
            # Try to create a test scenario
            print("   ‚ÑπÔ∏è  –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π...")
            test_cargo_created = self.create_test_cargo_for_placement(operator_token)
            if test_cargo_created:
                print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑")
                all_success = False
        
        # –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –ü–û–Ø–í–õ–ï–ù–ò–Ø –ì–†–£–ó–ê –í –°–ü–ò–°–ö–ï –î–û–°–¢–£–ü–ù–´–• –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø
        print("\n   üìã –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –ü–û–Ø–í–õ–ï–ù–ò–Ø –ì–†–£–ó–ê –í –°–ü–ò–°–ö–ï –î–û–°–¢–£–ü–ù–´–• –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø...")
        
        success, available_cargo_response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            "GET",
            "/api/operator/cargo/available-for-placement",
            200,
            token=operator_token
        )
        all_success &= success
        
        if success:
            print("   ‚úÖ Endpoint /api/operator/cargo/available-for-placement —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # Check response structure
            if isinstance(available_cargo_response, dict):
                items = available_cargo_response.get('items', [])
                total_count = available_cargo_response.get('total_count', 0)
                pagination = available_cargo_response.get('pagination', {})
                
                print(f"   üìä –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_count}")
                print(f"   üìã –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {len(items)}")
                
                # Verify pagination structure
                if pagination:
                    page = pagination.get('page', 1)
                    per_page = pagination.get('per_page', 25)
                    total_pages = pagination.get('total_pages', 1)
                    print(f"   üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}, –ø–æ {per_page} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
                # Check if cargo items have correct processing_status
                if items:
                    paid_cargo_count = 0
                    for cargo in items:
                        cargo_number = cargo.get('cargo_number')
                        processing_status = cargo.get('processing_status')
                        
                        if processing_status == 'paid':
                            paid_cargo_count += 1
                        
                        # Check if this is our test cargo
                        if hasattr(self, 'test_cargo_number') and cargo_number == self.test_cargo_number:
                            print(f"   üéØ –ù–∞–π–¥–µ–Ω –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {cargo_number}")
                            print(f"   üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞: {processing_status}")
                            
                            if processing_status == 'paid':
                                print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'paid'")
                            else:
                                print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{processing_status}', –æ–∂–∏–¥–∞–ª–æ—Å—å 'paid'")
                                all_success = False
                    
                    print(f"   üìä –ì—Ä—É–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'paid': {paid_cargo_count}/{len(items)}")
                    
                    if paid_cargo_count == len(items):
                        print("   ‚úÖ –í—Å–µ –≥—Ä—É–∑—ã –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å 'paid'")
                    elif paid_cargo_count > 0:
                        print(f"   ‚ö†Ô∏è  –ù–µ –≤—Å–µ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å 'paid': {paid_cargo_count}/{len(items)}")
                    else:
                        print("   ‚ùå –ù–∏ –æ–¥–∏–Ω –≥—Ä—É–∑ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'paid'")
                        all_success = False
                else:
                    print("   ‚ö†Ô∏è  –ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            elif isinstance(available_cargo_response, list):
                cargo_count = len(available_cargo_response)
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–ø—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫)")
            else:
                print("   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
                all_success = False
        else:
            print("   ‚ùå Endpoint /api/operator/cargo/available-for-placement –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            all_success = False
        
        # –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê ENDPOINT /api/operator/cargo/available-for-placement
        print("\n   üîç –≠–¢–ê–ü 5: –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ENDPOINT /api/operator/cargo/available-for-placement...")
        
        # Test with different parameters
        test_params = [
            {"page": 1, "per_page": 10},
            {"page": 1, "per_page": 25},
        ]
        
        for params in test_params:
            success, paginated_response = self.run_test(
                f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (page={params['page']}, per_page={params['per_page']})",
                "GET",
                "/api/operator/cargo/available-for-placement",
                200,
                params=params,
                token=operator_token
            )
            
            if success:
                if isinstance(paginated_response, dict):
                    items = paginated_response.get('items', [])
                    pagination = paginated_response.get('pagination', {})
                    
                    actual_page = pagination.get('page', 1)
                    actual_per_page = pagination.get('per_page', 25)
                    
                    if actual_page == params['page'] and actual_per_page == params['per_page']:
                        print(f"   ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: page={actual_page}, per_page={actual_per_page}")
                    else:
                        print(f"   ‚ùå –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å page={params['page']}, per_page={params['per_page']}")
                        print(f"       –ø–æ–ª—É—á–µ–Ω–æ page={actual_page}, per_page={actual_per_page}")
                        all_success = False
            else:
                print(f"   ‚ùå –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ {params}")
                all_success = False
        
        # –≠–¢–ê–ü 6: –£–ë–ï–î–ò–¢–¨–°–Ø –ß–¢–û –ì–†–£–ó –°–û–ó–î–ê–ï–¢–°–Ø –°–û –°–¢–ê–¢–£–°–û–ú processing_status: "paid"
        print("\n   ‚úÖ –≠–¢–ê–ü 6: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –ì–†–£–ó –°–û–ó–î–ê–ï–¢–°–Ø –°–û –°–¢–ê–¢–£–°–û–ú processing_status: 'paid'...")
        
        # Create a new test cargo to verify the fix
        test_cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç –§–∏–Ω–∞–ª—å–Ω—ã–µ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "sender_phone": "+79991234567",
            "recipient_full_name": "–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            "recipient_phone": "+992987654321",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –§–∏–Ω–∞–ª—å–Ω—ã—Ö –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π, 1",
            "weight": 5.0,
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π",
            "declared_value": 2000.0,
            "description": "–¢–µ—Å—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞",
            "route": "moscow_dushanbe",
            "payment_method": "cash",
            "payment_amount": 2000.0
        }
        
        success, cargo_creation_response = self.run_test(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ processing_status",
            "POST",
            "/api/operator/cargo/accept",
            200,
            test_cargo_data,
            operator_token
        )
        
        if success:
            cargo_number = cargo_creation_response.get('cargo_number')
            processing_status = cargo_creation_response.get('processing_status')
            payment_method = cargo_creation_response.get('payment_method')
            
            print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {cargo_number}")
            print(f"   üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_status}")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: processing_status –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "paid" –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞
            if processing_status == "paid":
                print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ù–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing_status = 'paid'")
            else:
                print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing_status = '{processing_status}', –æ–∂–∏–¥–∞–ª–æ—Å—å 'paid'")
                all_success = False
            
            # Verify the cargo appears in available-for-placement
            print("   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –≥—Ä—É–∑ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
            
            success, final_check_response = self.run_test(
                "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "GET",
                "/api/operator/cargo/available-for-placement",
                200,
                token=operator_token
            )
            
            if success:
                items = final_check_response.get('items', []) if isinstance(final_check_response, dict) else final_check_response
                
                # Look for our test cargo
                test_cargo_found = False
                for cargo in items:
                    if cargo.get('cargo_number') == cargo_number:
                        test_cargo_found = True
                        cargo_processing_status = cargo.get('processing_status')
                        
                        print(f"   üéØ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {cargo_number}")
                        print(f"   üìä –°—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {cargo_processing_status}")
                        
                        if cargo_processing_status == 'paid':
                            print("   ‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –ì—Ä—É–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'paid' –ø–æ—è–≤–∏–ª—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ'")
                        else:
                            print(f"   ‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: –ì—Ä—É–∑ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ' –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{cargo_processing_status}', –æ–∂–∏–¥–∞–ª–æ—Å—å 'paid'")
                            all_success = False
                        break
                
                if not test_cargo_found:
                    print("   ‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                    all_success = False
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                all_success = False
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            all_success = False
        
        # –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê
        print("\n   üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        
        if all_success:
            print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û - –§–ò–ù–ê–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –†–ê–ë–û–¢–ê–Æ–¢!")
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123) —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing' —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –≥—Ä—É–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing_status = 'paid'")
            print("   ‚úÖ –ì—Ä—É–∑ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (/api/operator/cargo/available-for-placement)")
            print("   ‚úÖ Endpoint /api/operator/cargo/available-for-placement —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: –ì—Ä—É–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º processing_status: 'paid' –∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ'")
            print("   üéØ –ì–ï–ù–ï–†–ê–¶–ò–Ø QR –ö–û–î–û–í: –£–ª—É—á—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ frontend")
        else:
            print("   ‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´ - –§–ò–ù–ê–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
            print("   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")
        
        return all_success

    def create_test_pickup_request_notification(self, operator_token: str) -> bool:
        """Create a test pickup request to generate a notification"""
        print("   üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        
        # First, login as admin to create pickup request
        admin_login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        success, admin_login_response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
            "POST",
            "/api/auth/login",
            200,
            admin_login_data
        )
        
        if success and 'access_token' in admin_login_response:
            admin_token = admin_login_response['access_token']
            
            # Create pickup request
            pickup_request_data = {
                "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –§–∏–Ω–∞–ª—å–Ω—ã–µ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "sender_phone": "+79991234567",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –§–∏–Ω–∞–ª—å–Ω—ã–µ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, 1",
                "pickup_date": "2025-01-20",
                "pickup_time_from": "10:00",
                "pickup_time_to": "18:00",
                "route": "moscow_to_tajikistan",
                "courier_fee": 500.0
            }
            
            success, pickup_response = self.run_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞",
                "POST",
                "/api/admin/courier/pickup-request",
                200,
                pickup_request_data,
                admin_token
            )
            
            if success:
                request_id = pickup_response.get('id')
                request_number = pickup_response.get('request_number')
                print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä —Å–æ–∑–¥–∞–Ω–∞: ID={request_id}, –ù–æ–º–µ—Ä={request_number}")
                
                # Now simulate courier accepting and delivering the request
                # This should create a warehouse notification
                return True
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞")
                return False
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω")
            return False

    def create_test_cargo_for_placement(self, operator_token: str) -> bool:
        """Create a test cargo for placement testing"""
        print("   üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        test_cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏–µ",
            "sender_phone": "+79991234567",
            "recipient_full_name": "–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏–µ",
            "recipient_phone": "+992987654321",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –†–∞–∑–º–µ—â–µ–Ω–∏–µ, 1",
            "weight": 3.0,
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            "declared_value": 1500.0,
            "description": "–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            "route": "moscow_dushanbe",
            "payment_method": "cash",
            "payment_amount": 1500.0
        }
        
        success, cargo_response = self.run_test(
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            "POST",
            "/api/operator/cargo/accept",
            200,
            test_cargo_data,
            operator_token
        )
        
        if success:
            cargo_number = cargo_response.get('cargo_number')
            processing_status = cargo_response.get('processing_status')
            print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {cargo_number}, —Å—Ç–∞—Ç—É—Å: {processing_status}")
            self.test_cargo_number = cargo_number
            return True
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑")
            return False

    def run_all_tests(self):
        """Run all tests"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –§–ò–ù–ê–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô...")
        
        success = self.test_final_pickup_fixes()
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        print(f"   –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.tests_run - self.tests_passed}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.tests_passed / self.tests_run * 100):.1f}%")
        
        if success:
            print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –§–ò–ù–ê–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("   ‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø QR –ö–û–î–û–í: –£–ª—É—á—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
            print("   ‚úÖ –û–¢–ü–†–ê–í–ö–ê –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï: processing_status –∏–∑–º–µ–Ω–µ–Ω —Å 'pending' –Ω–∞ 'paid'")
            print("   ‚úÖ –ì—Ä—É–∑ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ' (/api/operator/cargo/available-for-placement)")
            print("   üéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢!")
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            print("   üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º")
        
        return success

if __name__ == "__main__":
    tester = FinalPickupFixesTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)