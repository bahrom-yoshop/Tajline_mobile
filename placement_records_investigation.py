#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ placement_records –¥–ª—è –∑–∞—è–≤–æ–∫ 25082235 –∏ 250101

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ placement_records –∫–æ–ª–ª–µ–∫—Ü–∏—é
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
auth_token = None

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def authenticate():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    global auth_token
    
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if response and response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user_info.get('full_name')} ({user_info.get('role')})")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code if response else 'Network error'}")
        return False

def investigate_placement_records():
    """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ placement_records"""
    print("\nüîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï PLACEMENT_RECORDS")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    print("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
    response, _ = make_request("GET", "/operator/placement-progress")
    
    if response and response.status_code == 200:
        data = response.json()
        print(f"   - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {data.get('total_units', 'N/A')}")
        print(f"   - –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {data.get('placed_units', 'N/A')}")
        print(f"   - –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {data.get('pending_units', 'N/A')}")
        print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {data.get('progress_percentage', 'N/A')}%")
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    print("\nüìã –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:")
    response, _ = make_request("GET", "/operator/cargo/fully-placed?page=1&per_page=10")
    
    if response and response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        print(f"   - –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(items)}")
        
        for item in items:
            cargo_number = item.get("cargo_number", "N/A")
            status = item.get("status", "N/A")
            print(f"      ‚Ä¢ {cargo_number} - —Å—Ç–∞—Ç—É—Å: {status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—è–≤–∫–∏
            if cargo_number in ["25082235", "250101"]:
                print(f"        üéØ –ù–ê–ô–î–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–Ø–í–ö–ê: {cargo_number}")
                print(f"           –î–µ—Ç–∞–ª–∏: {json.dumps(item, indent=10, ensure_ascii=False)}")
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    print("\nüîß Individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
    response, _ = make_request("GET", "/operator/cargo/individual-units-for-placement?page=1&per_page=50")
    
    if response and response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        print(f"   - –ù–∞–π–¥–µ–Ω–æ individual units: {len(items)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞—è–≤–∫–∞–º
        cargo_groups = {}
        for item in items:
            individual_number = item.get("individual_number", "")
            if "/" in individual_number:
                cargo_number = individual_number.split("/")[0]
                if cargo_number not in cargo_groups:
                    cargo_groups[cargo_number] = []
                cargo_groups[cargo_number].append(item)
        
        print(f"   - –ó–∞—è–≤–∫–∏ —Å individual units: {list(cargo_groups.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—è–≤–∫–∏
        for critical_cargo in ["25082235", "250101"]:
            if critical_cargo in cargo_groups:
                units = cargo_groups[critical_cargo]
                print(f"\n      üéØ –ó–ê–Ø–í–ö–ê {critical_cargo}:")
                print(f"         - Individual units: {len(units)}")
                for unit in units:
                    individual_number = unit.get("individual_number", "")
                    status = unit.get("status", "")
                    is_placed = unit.get("is_placed", False)
                    print(f"           ‚Ä¢ {individual_number}: status={status}, is_placed={is_placed}")
            else:
                print(f"\n      ‚úÖ –ó–ê–Ø–í–ö–ê {critical_cargo}: –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ individual units (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞)")
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å individual units")

def check_specific_cargo_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–Ø–í–û–ö")
    print("="*60)
    
    critical_cargos = ["25082235", "250101"]
    
    for cargo_number in critical_cargos:
        print(f"\nüì¶ –ó–ê–Ø–í–ö–ê {cargo_number}:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ verify-cargo API –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã
        test_units = [
            f"{cargo_number}/01/01",
            f"{cargo_number}/01/02", 
            f"{cargo_number}/02/01",
            f"{cargo_number}/02/02"
        ]
        
        placed_units = 0
        total_units = 0
        
        for unit in test_units:
            response, _ = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": unit})
            
            if response and response.status_code == 200:
                data = response.json()
                if data.get("success"):
                    total_units += 1
                    print(f"   ‚úÖ {unit}: –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω (–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)")
                else:
                    error = data.get("error", "")
                    if "—É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω" in error.lower():
                        placed_units += 1
                        total_units += 1
                        print(f"   üè† {unit}: –£–ñ–ï –†–ê–ó–ú–ï–©–ï–ù - {error}")
                    else:
                        print(f"   ‚ùì {unit}: {error}")
            elif response and response.status_code == 404:
                print(f"   ‚ùå {unit}: –ù–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"   ‚ùå {unit}: –û—à–∏–±–∫–∞ API")
        
        if total_units > 0:
            placement_percentage = (placed_units / total_units) * 100
            print(f"\n   üìä –ò–¢–û–ì –î–õ–Ø {cargo_number}:")
            print(f"      - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}")
            print(f"      - –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_units}")
            print(f"      - –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_percentage:.1f}%")
            
            if placement_percentage == 100:
                print(f"      üéØ –ó–ê–Ø–í–ö–ê {cargo_number} –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ê!")
            elif placement_percentage > 0:
                print(f"      ‚ö†Ô∏è –ó–ê–Ø–í–ö–ê {cargo_number} –ß–ê–°–¢–ò–ß–ù–û –†–ê–ó–ú–ï–©–ï–ù–ê")
            else:
                print(f"      üìã –ó–ê–Ø–í–ö–ê {cargo_number} –ù–ï –†–ê–ó–ú–ï–©–ï–ù–ê")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PLACEMENT_RECORDS")
    print("="*80)
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê URL: {BASE_URL}")
    
    if not authenticate():
        return
    
    investigate_placement_records()
    check_specific_cargo_status()
    
    print("\n" + "="*80)
    print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main()