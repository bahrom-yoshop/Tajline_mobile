#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–¶–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, 
–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:
1. –§—É–Ω–∫—Ü–∏—è generateAllCellsQR - –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ API, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (X –∏–∑ Y QR –∫–æ–¥–æ–≤)
3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤

–ó–∞–¥–∞—á–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ GET /api/warehouses/{id}/structure
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Å format: 'id' –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint'–∞ POST /api/warehouse/cell/generate-qr
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ XXX-BB-PP-CCC
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–∫–ª–∞–¥–∞–º–∏

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:
- –í—Å–µ —è—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—É—á–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR –∫–æ–¥—ã
- –ö–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞
- API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
- –ù–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–¥–æ–≤
"""

import requests
import json
import sys
import os
import time
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
API_BASE = f"{BACKEND_URL}/api"

class MassQRGenerationTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_warehouse = None
        self.generated_qr_codes = []
        self.test_results = {}
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": "+79999888777",
                "password": "admin123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}",
                    "Content-Type": "application/json"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ '{user_info.get('full_name')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number')}, —Ä–æ–ª—å: {user_info.get('role')})")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def get_test_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            self.log("üè≠ –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∫–ª–∞–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            response = self.session.get(f"{API_BASE}/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                self.log(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤")
                
                # –ò—â–µ–º —Å–∫–ª–∞–¥ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                for warehouse in warehouses:
                    blocks = warehouse.get('blocks_count', 0)
                    shelves = warehouse.get('shelves_per_block', 0)
                    cells = warehouse.get('cells_per_shelf', 0)
                    total_cells = blocks * shelves * cells
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —è—á–µ–µ–∫ (–¥–æ 20)
                    if 0 < total_cells <= 20 and warehouse.get('warehouse_id_number'):
                        self.test_warehouse = warehouse
                        self.log(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥: '{warehouse.get('name')}'")
                        self.log(f"   ID: {warehouse.get('id')}")
                        self.log(f"   –ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞: {warehouse.get('warehouse_id_number')}")
                        self.log(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {blocks} –±–ª–æ–∫–æ–≤ √ó {shelves} –ø–æ–ª–æ–∫ √ó {cells} —è—á–µ–µ–∫ = {total_cells} —è—á–µ–µ–∫")
                        return True
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                if warehouses:
                    self.test_warehouse = warehouses[0]
                    self.log(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∫–ª–∞–¥: '{warehouses[0].get('name')}'")
                    self.log(f"   ID: {warehouses[0].get('id')}")
                    self.log(f"   –ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞: {warehouses[0].get('warehouse_id_number')}")
                    blocks = warehouses[0].get('blocks_count', 0)
                    shelves = warehouses[0].get('shelves_per_block', 0)
                    cells = warehouses[0].get('cells_per_shelf', 0)
                    total_cells = blocks * shelves * cells
                    self.log(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {blocks} –±–ª–æ–∫–æ–≤ √ó {shelves} –ø–æ–ª–æ–∫ √ó {cells} —è—á–µ–µ–∫ = {total_cells} —è—á–µ–µ–∫")
                    return True
                
                self.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
                return False
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {str(e)}", "ERROR")
            return False
    
    def create_test_warehouse(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        try:
            self.log("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤...")
            
            warehouse_data = {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                "location": "–¢–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥",
                "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                "blocks_count": 2,
                "shelves_per_block": 2,
                "cells_per_shelf": 2
            }
            
            response = self.session.post(f"{API_BASE}/admin/warehouses", json=warehouse_data)
            
            if response.status_code == 200:
                warehouse = response.json()
                self.test_warehouse = warehouse
                self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥: '{warehouse.get('name')}'")
                self.log(f"   ID: {warehouse.get('id')}")
                self.log(f"   –ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞: {warehouse.get('warehouse_id_number')}")
                self.log(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 2 –±–ª–æ–∫–∞ √ó 2 –ø–æ–ª–∫–∏ √ó 2 —è—á–µ–π–∫–∏ = 8 —è—á–µ–µ–∫")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞: {str(e)}", "ERROR")
            return False
    
    def test_warehouse_structure_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞"""
        try:
            warehouse_id = self.test_warehouse.get('id')
            self.log(f"üèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/warehouses/{warehouse_id}/structure...")
            
            response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/structure")
            
            if response.status_code == 200:
                structure = response.json()
                self.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
                self.log(f"   –ë–ª–æ–∫–æ–≤: {structure.get('blocks_count')}")
                self.log(f"   –ü–æ–ª–æ–∫ –Ω–∞ –±–ª–æ–∫: {structure.get('shelves_per_block')}")
                self.log(f"   –Ø—á–µ–µ–∫ –Ω–∞ –ø–æ–ª–∫—É: {structure.get('cells_per_shelf')}")
                
                total_cells = structure.get('blocks_count', 0) * structure.get('shelves_per_block', 0) * structure.get('cells_per_shelf', 0)
                self.log(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫: {total_cells}")
                
                return structure
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞: {str(e)}", "ERROR")
            return None
    
    def test_single_qr_generation(self, block, shelf, cell):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏"""
        try:
            warehouse_id = self.test_warehouse.get('id')
            
            payload = {
                "warehouse_id": warehouse_id,
                "block": block,
                "shelf": shelf,
                "cell": cell,
                "format": "id"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º format: 'id' –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤
            }
            
            response = self.session.post(f"{API_BASE}/warehouse/cell/generate-qr", json=payload)
            
            if response.status_code == 200:
                data = response.json()
                qr_code = data.get('qr_code', '')
                cell_code = data.get('cell_code', '')
                readable_name = data.get('readable_name', '')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                self.generated_qr_codes.append({
                    'block': block,
                    'shelf': shelf,
                    'cell': cell,
                    'cell_code': cell_code,
                    'readable_name': readable_name,
                    'qr_code': qr_code,
                    'success': True
                })
                
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –¥–ª—è –ë{block}-–ü{shelf}-–Ø{cell}: {response.status_code} - {response.text}", "ERROR")
                self.generated_qr_codes.append({
                    'block': block,
                    'shelf': shelf,
                    'cell': cell,
                    'success': False,
                    'error': f"{response.status_code} - {response.text}"
                })
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –¥–ª—è –ë{block}-–ü{shelf}-–Ø{cell}: {str(e)}", "ERROR")
            self.generated_qr_codes.append({
                'block': block,
                'shelf': shelf,
                'cell': cell,
                'success': False,
                'error': str(e)
            })
            return None
    
    def test_mass_qr_generation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫"""
        try:
            self.log("üéØ –ù–ê–ß–ê–õ–û –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í")
            self.log("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
            structure = self.test_warehouse
            blocks_count = structure.get('blocks_count', 0)
            shelves_per_block = structure.get('shelves_per_block', 0)
            cells_per_shelf = structure.get('cells_per_shelf', 0)
            
            total_cells = blocks_count * shelves_per_block * cells_per_shelf
            self.log(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {total_cells}")
            
            current_count = 0
            success_count = 0
            error_count = 0
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
            for block in range(1, blocks_count + 1):
                for shelf in range(1, shelves_per_block + 1):
                    for cell in range(1, cells_per_shelf + 1):
                        current_count += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        progress_percent = (current_count / total_cells) * 100
                        self.log(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_count}/{total_cells} QR –∫–æ–¥–æ–≤ ({progress_percent:.1f}%)")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
                        result = self.test_single_qr_generation(block, shelf, cell)
                        
                        if result:
                            success_count += 1
                            self.log(f"‚úÖ QR –∫–æ–¥ –¥–ª—è –ë{block}-–ü{shelf}-–Ø{cell}: {result.get('cell_code')}")
                        else:
                            error_count += 1
                            self.log(f"‚ùå –û—à–∏–±–∫–∞ QR –∫–æ–¥–∞ –¥–ª—è –ë{block}-–ü{shelf}-–Ø{cell}", "ERROR")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                        time.sleep(0.1)
            
            self.log("=" * 60)
            self.log("üéâ –ú–ê–°–°–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø QR –ö–û–î–û–í –ó–ê–í–ï–†–®–ï–ù–ê")
            self.log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
            self.log(f"   –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}")
            self.log(f"   –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {success_count}")
            self.log(f"   –û—à–∏–±–æ–∫: {error_count}")
            self.log(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/total_cells)*100:.1f}%")
            
            return success_count, error_count, total_cells
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return 0, 0, 0
    
    def check_qr_format_and_uniqueness(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ XXX-BB-PP-CCC –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤"""
        try:
            self.log("üîç –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê –ò –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò QR –ö–û–î–û–í")
            self.log("=" * 60)
            
            if not self.generated_qr_codes:
                self.log("‚ùå –ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", "ERROR")
                return False
            
            warehouse_number = self.test_warehouse.get('warehouse_id_number', '000')
            successful_codes = [qr for qr in self.generated_qr_codes if qr.get('success')]
            
            self.log(f"üìã –ê–Ω–∞–ª–∏–∑ {len(successful_codes)} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            format_correct = 0
            format_incorrect = 0
            unique_codes = set()
            duplicate_codes = []
            
            for qr_data in successful_codes:
                cell_code = qr_data.get('cell_code', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç XXX-BB-PP-CCC
                import re
                expected_pattern = f"^{warehouse_number}-\\d{{2}}-\\d{{2}}-\\d{{3}}$"
                
                if re.match(expected_pattern, cell_code):
                    format_correct += 1
                    self.log(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {cell_code}")
                else:
                    format_incorrect += 1
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {cell_code} (–æ–∂–∏–¥–∞–ª—Å—è: {warehouse_number}-BB-PP-CCC)", "ERROR")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                if cell_code in unique_codes:
                    duplicate_codes.append(cell_code)
                    self.log(f"‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∫–æ–¥: {cell_code}", "ERROR")
                else:
                    unique_codes.add(cell_code)
            
            self.log("=" * 60)
            self.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –§–û–†–ú–ê–¢–ê –ò –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò:")
            self.log(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_correct}")
            self.log(f"   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_incorrect}")
            self.log(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {len(unique_codes)}")
            self.log(f"   –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–¥–æ–≤: {len(duplicate_codes)}")
            self.log(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {warehouse_number}-BB-PP-CCC")
            
            if duplicate_codes:
                self.log(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã: {duplicate_codes}", "WARNING")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
            self.log("üìã –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤:")
            for i, qr_data in enumerate(successful_codes[:5]):
                self.log(f"   {i+1}. –ë{qr_data.get('block')}-–ü{qr_data.get('shelf')}-–Ø{qr_data.get('cell')}: {qr_data.get('cell_code')}")
            
            return format_incorrect == 0 and len(duplicate_codes) == 0
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞: {str(e)}", "ERROR")
            return False
    
    def test_api_stability(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        try:
            self.log("üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò API")
            self.log("=" * 60)
            
            warehouse_id = self.test_warehouse.get('id')
            test_requests = 10
            success_count = 0
            response_times = []
            
            self.log(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {test_requests} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
            
            for i in range(test_requests):
                start_time = time.time()
                
                payload = {
                    "warehouse_id": warehouse_id,
                    "block": 1,
                    "shelf": 1,
                    "cell": (i % 5) + 1,  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è—á–µ–π–∫–∏ 1-5
                    "format": "id"
                }
                
                response = self.session.post(f"{API_BASE}/warehouse/cell/generate-qr", json=payload)
                
                end_time = time.time()
                response_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                response_times.append(response_time)
                
                if response.status_code == 200:
                    success_count += 1
                    self.log(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: —É—Å–ø–µ—à–Ω–æ ({response_time:.0f}ms)")
                else:
                    self.log(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –æ—à–∏–±–∫–∞ {response.status_code} ({response_time:.0f}ms)", "ERROR")
                
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            avg_response_time = sum(response_times) / len(response_times)
            success_rate = (success_count / test_requests) * 100
            
            self.log("=" * 60)
            self.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò API:")
            self.log(f"   –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}/{test_requests}")
            self.log(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
            self.log(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.0f}ms")
            self.log(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min(response_times):.0f}ms")
            self.log(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max(response_times):.0f}ms")
            
            return success_rate >= 80  # 80% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {str(e)}", "ERROR")
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤"""
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í –í –°–ò–°–¢–ï–ú–ï TAJLINE.TJ")
        self.log("=" * 80)
        
        test_results = {
            "admin_auth": False,
            "warehouse_setup": False,
            "structure_endpoint": False,
            "mass_qr_generation": False,
            "format_and_uniqueness": False,
            "api_stability": False
        }
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.log("\nüìã –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        self.log("-" * 50)
        test_results["admin_auth"] = self.authenticate_admin()
        
        if not test_results["admin_auth"]:
            self.log("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return self.generate_final_report(test_results)
        
        # –¢–µ—Å—Ç 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞
        self.log("\nüìã –¢–ï–°–¢ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞")
        self.log("-" * 50)
        test_results["warehouse_setup"] = self.get_test_warehouse()
        
        if not test_results["warehouse_setup"]:
            self.log("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥", "ERROR")
            return self.generate_final_report(test_results)
        
        # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞
        self.log("\nüìã –¢–ï–°–¢ 3: Endpoint –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞")
        self.log("-" * 50)
        structure = self.test_warehouse_structure_endpoint()
        test_results["structure_endpoint"] = structure is not None
        
        # –¢–µ—Å—Ç 4: –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤
        self.log("\nüìã –¢–ï–°–¢ 4: –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤")
        self.log("-" * 50)
        success_count, error_count, total_cells = self.test_mass_qr_generation()
        test_results["mass_qr_generation"] = success_count > 0 and (success_count / total_cells) >= 0.8
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        self.log("\nüìã –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤")
        self.log("-" * 50)
        test_results["format_and_uniqueness"] = self.check_qr_format_and_uniqueness()
        
        # –¢–µ—Å—Ç 6: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API
        self.log("\nüìã –¢–ï–°–¢ 6: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
        self.log("-" * 50)
        test_results["api_stability"] = self.test_api_stability()
        
        return self.generate_final_report(test_results)
    
    def generate_final_report(self, test_results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 80)
        self.log("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 80)
        
        passed_tests = sum(test_results.values())
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        self.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        for test_name, result in test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            readable_name = test_name.replace('_', ' ').upper()
            self.log(f"   {readable_name}: {status}")
        
        self.log(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            self.log("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("‚úÖ –í—Å–µ —è—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞ –ø–æ–ª—É—á–∞—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR –∫–æ–¥—ã")
            self.log("‚úÖ –ö–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-BB-PP-CCC")
            self.log("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
            self.log("‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–æ–¥–æ–≤")
        else:
            self.log("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤")
        
        return test_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = MassQRGenerationTester()
    results = tester.run_comprehensive_test()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    passed_tests = sum(results.values())
    total_tests = len(results)
    success_rate = (passed_tests / total_tests) * 100
    
    if success_rate >= 80:
        sys.exit(0)  # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    else:
        sys.exit(1)  # –û—à–∏–±–∫–∞

if __name__ == "__main__":
    main()