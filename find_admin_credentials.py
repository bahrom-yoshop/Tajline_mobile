#!/usr/bin/env python3
"""
üîç –ü–û–ò–°–ö –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–• –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –í –°–ò–°–¢–ï–ú–ï TAJLINE.TJ

–¶–µ–ª—å: –ù–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞
"""

import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def log(message):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")

def try_operator_as_admin():
    """–ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞"""
    log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
    
    session = requests.Session()
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä
    operator_creds = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    response = session.post(f"{API_BASE}/auth/login", json=operator_creds)
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_response = session.get(
            f"{API_BASE}/auth/me",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if user_response.status_code == 200:
            user_data = user_response.json()
            log(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user_data.get('full_name')} (—Ä–æ–ª—å: {user_data.get('role')})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
            admin_endpoints = [
                "/admin/warehouses",
                "/warehouses",
                "/admin/users"
            ]
            
            for endpoint in admin_endpoints:
                test_response = session.get(
                    f"{API_BASE}{endpoint}",
                    headers={"Authorization": f"Bearer {token}"}
                )
                
                log(f"–¢–µ—Å—Ç {endpoint}: {test_response.status_code}")
                
                if test_response.status_code == 200:
                    log(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ {endpoint} –µ—Å—Ç—å!")
                    return token, user_data
                else:
                    log(f"‚ùå –î–æ—Å—Ç—É–ø –∫ {endpoint} –∑–∞–ø—Ä–µ—â–µ–Ω")
            
            return token, user_data
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {response.status_code}")
    
    return None, None

def try_common_admin_credentials():
    """–ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    log("üîç –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    session = requests.Session()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    admin_credentials = [
        # –ò–∑ –∑–∞–¥–∞—á–∏
        {"phone": "admin@tajline.tj", "password": "admin123"},
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        {"phone": "admin", "password": "admin"},
        {"phone": "admin", "password": "password"},
        {"phone": "admin", "password": "123456"},
        {"phone": "administrator", "password": "admin123"},
        
        # –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        {"phone": "+992000000000", "password": "admin123"},
        {"phone": "+992000000001", "password": "admin123"},
        {"phone": "+992999999999", "password": "admin123"},
        {"phone": "+79999999999", "password": "admin123"},
        {"phone": "+79999999998", "password": "admin123"},
        
        # Email –≤–∞—Ä–∏–∞–Ω—Ç—ã
        {"phone": "admin@admin.com", "password": "admin123"},
        {"phone": "admin@tajline.com", "password": "admin123"},
        {"phone": "admin@cargo.tj", "password": "admin123"},
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        {"phone": "system", "password": "system123"},
        {"phone": "root", "password": "root123"},
        {"phone": "superuser", "password": "super123"},
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        {"phone": "USR648362", "password": "admin123"},  # –ò–∑ –ª–æ–≥–æ–≤
        {"phone": "+992987654321", "password": "admin123"},
    ]
    
    for i, creds in enumerate(admin_credentials):
        log(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: {creds['phone']}")
        
        try:
            response = session.post(f"{API_BASE}/auth/login", json=creds, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                token = data.get("access_token")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_response = session.get(
                    f"{API_BASE}/auth/me",
                    headers={"Authorization": f"Bearer {token}"},
                    timeout=10
                )
                
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    role = user_data.get('role')
                    name = user_data.get('full_name')
                    
                    log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {name} (—Ä–æ–ª—å: {role})")
                    
                    if role == 'admin':
                        log(f"üéâ –ù–ê–ô–î–ï–ù –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†: {creds['phone']} / {creds['password']}")
                        return token, user_data, creds
                    else:
                        log(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {role}")
                else:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
            else:
                log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        
        except Exception as e:
            log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
    
    return None, None, None

def check_warehouse_access_with_operator():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–∫–ª–∞–¥–∞–º —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    log("üè¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–∫–ª–∞–¥–∞–º —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
    
    session = requests.Session()
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä
    operator_creds = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    response = session.post(f"{API_BASE}/auth/login", json=operator_creds)
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã
        warehouse_endpoints = [
            "/operator/warehouses",
            "/warehouses",
            "/admin/warehouses"
        ]
        
        for endpoint in warehouse_endpoints:
            log(f"–ü—Ä–æ–±—É–µ–º {endpoint}...")
            
            warehouse_response = session.get(
                f"{API_BASE}{endpoint}",
                headers={"Authorization": f"Bearer {token}"}
            )
            
            if warehouse_response.status_code == 200:
                warehouses = warehouse_response.json()
                log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
                
                for warehouse in warehouses:
                    name = warehouse.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    warehouse_id = warehouse.get('id', '–ë–µ–∑ ID')
                    log(f"  - {name} (ID: {warehouse_id})")
                
                return token, warehouses
            else:
                log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {warehouse_response.status_code}")
    
    return None, None

def main():
    log("üîç –ü–û–ò–°–ö –£–ß–ï–¢–ù–´–• –î–ê–ù–ù–´–• –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
    log("=" * 60)
    
    # –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–æ–∏—Å–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_token, admin_user, admin_creds = try_common_admin_credentials()
    
    if admin_token and admin_user:
        log("üéâ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –ù–ê–ô–î–ï–ù!")
        log(f"üìã –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {admin_creds['phone']} / {admin_creds['password']}")
        log(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_user.get('full_name')} (—Ä–æ–ª—å: {admin_user.get('role')})")
        return True
    
    # –ü–æ–ø—ã—Ç–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    log("\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
    operator_token, operator_user = try_operator_as_admin()
    
    if operator_token and operator_user:
        log("‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        log(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {operator_user.get('full_name')} (—Ä–æ–ª—å: {operator_user.get('role')})")
    
    # –ü–æ–ø—ã—Ç–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫–ª–∞–¥–∞–º
    log("\nüè¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–∫–ª–∞–¥–∞–º...")
    warehouse_token, warehouses = check_warehouse_access_with_operator()
    
    if warehouse_token and warehouses:
        log("‚úÖ –î–æ—Å—Ç—É–ø –∫ —Å–∫–ª–∞–¥–∞–º —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å")
        log("üí° –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        return True
    
    log("\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –ü–û–î–•–û–î–Ø–©–ò–ï –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï")
    log("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    log("  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é")
    log("  2. –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    log("  3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    return False

if __name__ == "__main__":
    main()