#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
"""

import requests
import sys
import json
from datetime import datetime

class DataChecker:
    def __init__(self, base_url="https://cargo-tracker-33.preview.emergentagent.com"):
        self.base_url = base_url
        self.token = None
        
        print(f"üîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–• –í –°–ò–°–¢–ï–ú–ï")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 60)

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        response = requests.post(f"{self.base_url}/api/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.token = data["access_token"]
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            return False

    def check_operator_cargo(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo"""
        if not self.token:
            return
        
        headers = {'Authorization': f'Bearer {self.token}'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≥—Ä—É–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        response = requests.get(f"{self.base_url}/api/operator/cargo/list", headers=headers)
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            print(f"\nüì¶ –ì–†–£–ó–´ –í –°–ò–°–¢–ï–ú–ï (operator_cargo):")
            print(f"   –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {len(items)}")
            
            placement_ready_count = 0
            pickup_request_count = 0
            
            for i, cargo in enumerate(items[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                cargo_number = cargo.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                status = cargo.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                pickup_request_id = cargo.get("pickup_request_id")
                
                print(f"   {i+1}. {cargo_number} - –°—Ç–∞—Ç—É—Å: {status}")
                
                if status == "placement_ready":
                    placement_ready_count += 1
                    print(f"      ‚úÖ –ù–ê–ô–î–ï–ù –≥—Ä—É–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready'!")
                
                if pickup_request_id:
                    pickup_request_count += 1
                    print(f"      üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_id}")
            
            print(f"\n   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   üéØ –ì—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready': {placement_ready_count}")
            print(f"   üöö –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_count}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.status_code}")

    def check_available_for_placement(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        if not self.token:
            return
        
        headers = {'Authorization': f'Bearer {self.token}'}
        
        response = requests.get(f"{self.base_url}/api/operator/cargo/available-for-placement", headers=headers)
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            print(f"\nüéØ –ì–†–£–ó–´ –î–û–°–¢–£–ü–ù–´–ï –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
            print(f"   –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {len(items)}")
            
            for i, cargo in enumerate(items[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                cargo_number = cargo.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                status = cargo.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                processing_status = cargo.get("processing_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                pickup_request_id = cargo.get("pickup_request_id")
                
                print(f"   {i+1}. {cargo_number}")
                print(f"      üìä –°—Ç–∞—Ç—É—Å: {status}")
                print(f"      ‚öôÔ∏è –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_status}")
                
                if pickup_request_id:
                    print(f"      üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {response.status_code}")

    def create_test_pickup_request_cargo(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä"""
        if not self.token:
            return
        
        headers = {'Authorization': f'Bearer {self.token}'}
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞
        pickup_request_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ó–∞–±–æ—Ä",
            "sender_phone": "+79991234567",
            "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –¥–ª—è –∑–∞–±–æ—Ä–∞, 123",
            "pickup_date": "2025-01-15",
            "pickup_time_from": "10:00",
            "pickup_time_to": "18:00",
            "route": "moscow_to_tajikistan",
            "courier_fee": 500.0
        }
        
        print(f"\nüöö –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê:")
        response = requests.post(f"{self.base_url}/api/admin/courier/pickup-request", 
                               json=pickup_request_data, headers=headers)
        
        if response.status_code == 200:
            pickup_data = response.json()
            pickup_request_id = pickup_data.get("id")
            request_number = pickup_data.get("request_number")
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {pickup_request_id}, –Ω–æ–º–µ—Ä {request_number}")
            
            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–∑, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å: –∫—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –≥—Ä—É–∑ –∏ —Å–¥–∞–ª –Ω–∞ —Å–∫–ª–∞–¥
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ó–∞–±–æ—Ä",
                "sender_phone": "+79991234567",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79887776655",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è, 456",
                "weight": 5.5,
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
                "declared_value": 2500.0,
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö",
                "route": "moscow_to_tajikistan",
                "payment_method": "not_paid",
                "pickup_required": True,
                "pickup_request_id": pickup_request_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Å –∑–∞—è–≤–∫–æ–π
            }
            
            print(f"   üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä...")
            cargo_response = requests.post(f"{self.base_url}/api/operator/cargo/accept", 
                                         json=cargo_data, headers=headers)
            
            if cargo_response.status_code == 200:
                cargo_result = cargo_response.json()
                cargo_number = cargo_result.get("cargo_number")
                print(f"   ‚úÖ –ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {cargo_number}")
                
                # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –Ω–∞ placement_ready
                # –≠—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä —Å–¥–∞–µ—Ç –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥
                print(f"   ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ 'placement_ready'...")
                
                return cargo_number
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞: {cargo_response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        
        return None

    def run_check(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üöÄ –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–•")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if not self.authenticate_operator():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.check_operator_cargo()
        self.check_available_for_placement()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        print(f"\nüß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:")
        test_cargo = self.create_test_pickup_request_cargo()
        
        if test_cargo:
            print(f"\n‚úÖ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´")
            print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {test_cargo}")
            print(f"üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö")
        
        return True

if __name__ == "__main__":
    checker = DataChecker()
    checker.run_check()