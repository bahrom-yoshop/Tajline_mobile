#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º placement_records
========================================================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ placement_records —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Å–∫–ª–∞–¥–∞ 001

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–Ω—ã placement_records (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ warehouse_id, –Ω–æ–º–µ—Ä—É —Å–∫–ª–∞–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏—é
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   - –°—Ä–∞–≤–Ω–∏—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö API (statistics, placement-progress)
3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ warehouse_id: –í—ã—è–≤–∏—Ç—å –∫–∞–∫–∏–µ warehouse_id –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ placement_records
4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥–∏–±–∫–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ placement_records –ø–æ warehouse_id, –Ω–æ–º–µ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–∫–ª–∞–¥–∞
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ warehouse_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–∫–ª–∞–¥–∞ "001" –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤—Å–µ placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 001 –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE_NUMBER = "001"

class LayoutWithCargoTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.warehouse_001_info = None
        self.test_results = {
            "auth_success": False,
            "warehouse_found": False,
            "layout_api_accessible": False,
            "placement_records_found": False,
            "placement_records_count": 0,
            "occupied_cells_count": 0,
            "statistics_comparison": {},
            "warehouse_id_formats": [],
            "sync_issues": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def find_warehouse_001(self):
        """–ù–∞–π—Ç–∏ —Å–∫–ª–∞–¥ 001 '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
        self.log(f"üè¢ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_NUMBER}...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
            response = self.session.get(f"{API_BASE}/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                # –ò—â–µ–º —Å–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º 001
                for warehouse in warehouses:
                    warehouse_id_number = warehouse.get("warehouse_id_number")
                    name = warehouse.get("name", "")
                    
                    if warehouse_id_number == TARGET_WAREHOUSE_NUMBER:
                        self.warehouse_001_info = warehouse
                        self.log(f"‚úÖ –°–∫–ª–∞–¥ {TARGET_WAREHOUSE_NUMBER} –Ω–∞–π–¥–µ–Ω: {name}")
                        self.log(f"   ID: {warehouse.get('id')}")
                        self.log(f"   –ù–æ–º–µ—Ä: {warehouse_id_number}")
                        self.log(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse.get('location')}")
                        self.test_results["warehouse_found"] = True
                        return True
                
                self.log(f"‚ùå –°–∫–ª–∞–¥ {TARGET_WAREHOUSE_NUMBER} –ù–ï –Ω–∞–π–¥–µ–Ω", "ERROR")
                self.log(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã:")
                for w in warehouses[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    self.log(f"   - {w.get('warehouse_id_number', 'N/A')}: {w.get('name', 'N/A')}")
                return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–ª–∞–¥–∞: {e}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001"""
        if not self.warehouse_001_info:
            self.log("‚ùå –°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API", "ERROR")
            return False
            
        warehouse_id = self.warehouse_001_info.get("id")
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}...")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/layout-with-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log("‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["layout_api_accessible"] = True
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                self.log("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:")
                self.log(f"   –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ placement_records —á–µ—Ä–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                total_cargo = data.get("total_cargo", 0)
                occupied_cells = data.get("occupied_cells", 0)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç placement_records –Ω–∞–ø—Ä—è–º—É—é, –Ω–æ –º—ã –º–æ–∂–µ–º —Å—É–¥–∏—Ç—å –æ–± –∏—Ö –Ω–∞–ª–∏—á–∏–∏
                # –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –∏ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥—Ä—É–∑–æ–≤
                self.test_results["placement_records_count"] = total_cargo  # –ò—Å–ø–æ–ª—å–∑—É–µ–º total_cargo –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                
                if total_cargo > 0 and occupied_cells > 0:
                    self.log(f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ placement_records —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    self.log(f"   üì¶ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {total_cargo}")
                    self.log(f"   üè¢ –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏: {occupied_cells}")
                    self.test_results["placement_records_found"] = True
                    
                    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã layout –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö
                    layout = data.get("layout", {})
                    blocks = layout.get("blocks", [])
                    
                    self.log("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ layout:")
                    cargo_found = 0
                    for block in blocks[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –±–ª–æ–∫–∞
                        block_num = block.get("block_number")
                        shelves = block.get("shelves", [])
                        for shelf in shelves[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –ø–æ–ª–∫–∏
                            shelf_num = shelf.get("shelf_number")
                            cells = shelf.get("cells", [])
                            for cell in cells:
                                if cell.get("is_occupied", False):
                                    cargo_list = cell.get("cargo", [])
                                    if cargo_list:
                                        cargo_found += len(cargo_list)
                                        for cargo in cargo_list[:1]:  # –ü–µ—Ä–≤—ã–π –≥—Ä—É–∑ –≤ —è—á–µ–π–∫–µ
                                            self.log(f"   üì¶ –ë–ª–æ–∫ {block_num}, –ü–æ–ª–∫–∞ {shelf_num}, –Ø—á–µ–π–∫–∞ {cell.get('cell_number')}:")
                                            self.log(f"     - cargo_number: {cargo.get('cargo_number', 'N/A')}")
                                            self.log(f"     - individual_number: {cargo.get('individual_number', 'N/A')}")
                                            self.log(f"     - cargo_name: {cargo.get('cargo_name', 'N/A')}")
                                            self.log(f"     - placement_location: {cargo.get('placement_location', 'N/A')}")
                                            
                                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º warehouse_id –∏–∑ placement_location
                                            placement_location = cargo.get('placement_location', '')
                                            if placement_location and placement_location not in self.test_results["warehouse_id_formats"]:
                                                self.test_results["warehouse_id_formats"].append(placement_location)
                    
                    self.log(f"   ‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –≤ layout: {cargo_found}")
                else:
                    self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤!", "ERROR")
                    self.log(f"   üì¶ total_cargo: {total_cargo}")
                    self.log(f"   üè¢ occupied_cells: {occupied_cells}")
                    self.test_results["placement_records_found"] = False
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ occupied_cells
                occupied_cells = data.get("occupied_cells", 0)
                self.test_results["occupied_cells_count"] = occupied_cells
                self.log(f"üìä –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ layout-with-cargo: {occupied_cells}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ warehouse info
                warehouse_info = data.get("warehouse", {})
                if warehouse_info:
                    self.log(f"üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ –≤ –æ—Ç–≤–µ—Ç–µ:")
                    self.log(f"   - name: {warehouse_info.get('name', 'N/A')}")
                    self.log(f"   - warehouse_id_number: {warehouse_info.get('warehouse_id_number', 'N/A')}")
                    self.log(f"   - total_capacity: {warehouse_info.get('total_capacity', 'N/A')}")
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API layout-with-cargo: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}", "ERROR")
            return False
    
    def compare_with_statistics_api(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API statistics –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if not self.warehouse_001_info:
            return False
            
        warehouse_id = self.warehouse_001_info.get("id")
        self.log(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API statistics –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}...")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/statistics")
            
            if response.status_code == 200:
                stats = response.json()
                
                occupied_cells_stats = stats.get("occupied_cells", 0)
                total_cells_stats = stats.get("total_cells", 0)
                
                self.log(f"üìä Statistics API:")
                self.log(f"   - occupied_cells: {occupied_cells_stats}")
                self.log(f"   - total_cells: {total_cells_stats}")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo
                layout_occupied = self.test_results["occupied_cells_count"]
                
                self.log(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
                self.log(f"   - layout-with-cargo occupied_cells: {layout_occupied}")
                self.log(f"   - statistics occupied_cells: {occupied_cells_stats}")
                
                if layout_occupied == occupied_cells_stats:
                    self.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
                else:
                    self.log("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö", "WARNING")
                    self.test_results["sync_issues"].append(f"layout-with-cargo ({layout_occupied}) != statistics ({occupied_cells_stats})")
                
                self.test_results["statistics_comparison"] = {
                    "layout_occupied": layout_occupied,
                    "stats_occupied": occupied_cells_stats,
                    "stats_total": total_cells_stats,
                    "synchronized": layout_occupied == occupied_cells_stats
                }
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API statistics: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å–æ statistics: {e}", "ERROR")
            return False
    
    def compare_with_placement_progress_api(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API placement-progress"""
        self.log("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API placement-progress...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/placement-progress")
            
            if response.status_code == 200:
                progress = response.json()
                
                placed_units = progress.get("placed_units", 0)
                total_units = progress.get("total_units", 0)
                progress_percentage = progress.get("progress_percentage", 0)
                
                self.log(f"üìà Placement Progress API:")
                self.log(f"   - placed_units: {placed_units}")
                self.log(f"   - total_units: {total_units}")
                self.log(f"   - progress_percentage: {progress_percentage}%")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ placement_records
                placement_records_count = self.test_results["placement_records_count"]
                
                self.log(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å placement_records:")
                self.log(f"   - placement_records –Ω–∞–π–¥–µ–Ω–æ: {placement_records_count}")
                self.log(f"   - placement-progress placed_units: {placed_units}")
                
                if placement_records_count <= placed_units:
                    self.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã")
                else:
                    self.log("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö", "WARNING")
                    self.test_results["sync_issues"].append(f"placement_records ({placement_records_count}) > placed_units ({placed_units})")
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-progress: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å placement-progress: {e}", "ERROR")
            return False
    
    def diagnose_warehouse_id_formats(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ placement_location –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö"""
        self.log("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ placement_location...")
        
        warehouse_id_formats = self.test_results["warehouse_id_formats"]
        
        if not warehouse_id_formats:
            self.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö placement_location", "WARNING")
            return
        
        self.log(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã placement_location –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö:")
        for i, format_id in enumerate(warehouse_id_formats, 1):
            self.log(f"   {i}. {format_id}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞
            if '-' in format_id and len(format_id.split('-')) == 4:
                parts = format_id.split('-')
                if parts[0] == "001":
                    self.log(f"      ‚Üí QR —Ñ–æ—Ä–º–∞—Ç —Å–∫–ª–∞–¥–∞ 001: {format_id}")
                else:
                    self.log(f"      ‚Üí QR —Ñ–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–≥–æ —Å–∫–ª–∞–¥–∞: {format_id}")
            elif format_id.startswith('–ë'):
                self.log(f"      ‚Üí –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: {format_id}")
            elif format_id.startswith('B'):
                self.log(f"      ‚Üí –õ–∞—Ç–∏–Ω—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: {format_id}")
            else:
                self.log(f"      ‚Üí –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –Ω–∞—à–∏–º —Å–∫–ª–∞–¥–æ–º 001
        warehouse_001_id = self.warehouse_001_info.get("id") if self.warehouse_001_info else None
        warehouse_001_number = TARGET_WAREHOUSE_NUMBER
        
        self.log(f"üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∫–ª–∞–¥—É 001:")
        self.log(f"   - UUID —Å–∫–ª–∞–¥–∞ 001: {warehouse_001_id}")
        self.log(f"   - –ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞ 001: {warehouse_001_number}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ placement_location –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "001-"
        warehouse_001_locations = [loc for loc in warehouse_id_formats if loc.startswith("001-")]
        
        self.log(f"   - –ù–∞–π–¥–µ–Ω–æ placement_location –¥–ª—è —Å–∫–ª–∞–¥–∞ 001: {len(warehouse_001_locations)}")
        
        if warehouse_001_locations:
            self.log("‚úÖ –°–∫–ª–∞–¥ 001 –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö!")
            for loc in warehouse_001_locations:
                self.log(f"     - {loc}")
        else:
            self.log("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ placement_location —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤!", "WARNING")
            self.test_results["sync_issues"].append("–°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ placement_location —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –î–õ–Ø –°–ö–õ–ê–î–ê {TARGET_WAREHOUSE_NUMBER}")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_NUMBER}: {'‚úÖ –ù–ê–ô–î–ï–ù' if self.test_results['warehouse_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        self.log(f"  3. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API layout-with-cargo: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['layout_api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  4. üéØ –ü–æ–∏—Å–∫ placement_records: {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['placement_records_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        self.log(f"  üì¶ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {self.test_results['placement_records_count']}")
        self.log(f"  üè¢ –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏: {self.test_results['occupied_cells_count']}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ API
        if self.test_results["statistics_comparison"]:
            stats = self.test_results["statistics_comparison"]
            self.log(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° STATISTICS API:")
            self.log(f"  layout-with-cargo occupied_cells: {stats['layout_occupied']}")
            self.log(f"  statistics occupied_cells: {stats['stats_occupied']}")
            self.log(f"  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ –ö–û–†–†–ï–ö–¢–ù–ê' if stats['synchronized'] else '‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï'}")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ warehouse_id (—Ç–µ–ø–µ—Ä—å –∏–∑ placement_location)
        if self.test_results["warehouse_id_formats"]:
            self.log(f"\nüîç –§–û–†–ú–ê–¢–´ placement_location –í –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ì–†–£–ó–ê–•:")
            for format_id in self.test_results["warehouse_id_formats"]:
                self.log(f"  - {format_id}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if self.test_results["sync_issues"]:
            self.log(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
            for issue in self.test_results["sync_issues"]:
                self.log(f"  - {issue}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        
        success = (
            self.test_results["auth_success"] and
            self.test_results["warehouse_found"] and
            self.test_results["layout_api_accessible"] and
            self.test_results["placement_records_found"] and
            self.test_results["placement_records_count"] > 0
        )
        
        if success:
            self.log("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê placement_records –†–ê–ë–û–¢–ê–ï–¢!")
            self.log(f"üéâ –ù–∞–π–¥–µ–Ω–æ {self.test_results['placement_records_count']} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_NUMBER}")
            self.log("üìä –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            if not self.test_results["sync_issues"]:
                self.log("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –≤—Å–µ–º–∏ API")
            else:
                self.log(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è ({len(self.test_results['sync_issues'])} —à—Ç.)")
        else:
            self.log("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –£–°–ü–ï–®–ù–û!")
            if not self.test_results["placement_records_found"]:
                self.log("üîç –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞")
        
        return success
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API layout-with-cargo"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API layout-with-cargo –î–õ–Ø –°–ö–õ–ê–î–ê 001")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001
        if not self.find_warehouse_001():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
        if not self.test_layout_with_cargo_api():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: API layout-with-cargo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API statistics
        self.compare_with_statistics_api()
        
        # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API placement-progress
        self.compare_with_placement_progress_api()
        
        # 6. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ warehouse_id
        self.diagnose_warehouse_id_formats()
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LayoutWithCargoTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ placement_records —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üìä API layout-with-cargo —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Å–∫–ª–∞–¥–∞ 001")
            print("üéØ –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 001")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()