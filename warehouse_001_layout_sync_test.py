#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• –í API layout-with-cargo –î–õ–Ø –°–ö–õ–ê–î–ê 001
================================================================================

–¶–ï–õ–¨: –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ 001 –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001: –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ–ª—å–∫–æ placement_records –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ location –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞
   - –°—Ä–∞–≤–Ω–∏—Ç—å —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ warehouse_id:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤ placement_records –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω warehouse_id –¥–ª—è –ú–æ—Å–∫–≤—ã
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
5. –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ vs –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ

–ü–†–û–ë–õ–ï–ú–ê: –ù–∞ —Å–∫–ª–∞–¥–µ ID 001 "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" —Ä–∞–∑–º–µ—â–µ–Ω–æ –º–Ω–æ–≥–æ –≥—Ä—É–∑–æ–≤, –Ω–æ –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ 
–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ - –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ 
—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ú–æ—Å–∫–≤—ã
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE_NUMBER = "001"
TARGET_WAREHOUSE_NAME = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"

class WarehouseLayoutSyncTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.warehouse_001_id = None
        self.test_results = {
            "auth_success": False,
            "warehouse_found": False,
            "layout_api_accessible": False,
            "placement_records_found": 0,
            "sync_issues_found": [],
            "occupied_cells_count": 0,
            "expected_occupied_count": 0,
            "warehouse_id_issues": [],
            "location_parsing_issues": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def find_warehouse_001(self):
        """–ù–∞–π—Ç–∏ —Å–∫–ª–∞–¥ 001 '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
        self.log(f"üè¢ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_NUMBER} '{TARGET_WAREHOUSE_NAME}'...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                self.log(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                
                # –ò—â–µ–º —Å–∫–ª–∞–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                for warehouse in warehouses:
                    warehouse_id_number = warehouse.get("warehouse_id_number", "")
                    warehouse_name = warehouse.get("name", "")
                    warehouse_id = warehouse.get("id", "")
                    
                    self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥: ID={warehouse_id}, –Ω–æ–º–µ—Ä={warehouse_id_number}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{warehouse_name}'")
                    
                    if (warehouse_id_number == TARGET_WAREHOUSE_NUMBER or 
                        TARGET_WAREHOUSE_NAME in warehouse_name):
                        self.warehouse_001_id = warehouse_id
                        self.log(f"‚úÖ –°–∫–ª–∞–¥ 001 –Ω–∞–π–¥–µ–Ω! ID: {warehouse_id}, –Ω–æ–º–µ—Ä: {warehouse_id_number}, –Ω–∞–∑–≤–∞–Ω–∏–µ: '{warehouse_name}'")
                        self.test_results["warehouse_found"] = True
                        return True
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                self.log("‚ö†Ô∏è –°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫...")
                return self.find_warehouse_001_in_all_warehouses()
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {response.status_code}", "ERROR")
                return self.find_warehouse_001_in_all_warehouses()
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–ª–∞–¥–∞: {e}", "ERROR")
            return False
    
    def find_warehouse_001_in_all_warehouses(self):
        """–ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001 –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            response = self.session.get(f"{API_BASE}/warehouses/all-cities")
            
            if response.status_code == 200:
                data = response.json()
                warehouses = data.get("warehouses", [])
                self.log(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ")
                
                for warehouse in warehouses:
                    warehouse_id_number = warehouse.get("warehouse_id_number", "")
                    warehouse_name = warehouse.get("name", "")
                    warehouse_id = warehouse.get("id", "")
                    
                    if (warehouse_id_number == TARGET_WAREHOUSE_NUMBER or 
                        TARGET_WAREHOUSE_NAME in warehouse_name):
                        self.warehouse_001_id = warehouse_id
                        self.log(f"‚úÖ –°–∫–ª–∞–¥ 001 –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ! ID: {warehouse_id}, –Ω–æ–º–µ—Ä: {warehouse_id_number}")
                        self.test_results["warehouse_found"] = True
                        return True
                
                self.log(f"‚ùå –°–∫–ª–∞–¥ 001 '{TARGET_WAREHOUSE_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ", "ERROR")
                return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ: {e}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001"""
        if not self.warehouse_001_id:
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ warehouse_id –¥–ª—è —Å–∫–ª–∞–¥–∞ 001", "ERROR")
            return False
            
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001 (ID: {self.warehouse_001_id})...")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_001_id}/layout-with-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["layout_api_accessible"] = True
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                self.analyze_layout_response(data)
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API layout-with-cargo: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}", "ERROR")
            return False
    
    def analyze_layout_response(self, layout_data):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ API layout-with-cargo"""
        self.log("\nüîç –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê API layout-with-cargo:")
        self.log("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        warehouse_info = layout_data.get("warehouse_info", {})
        layout_structure = layout_data.get("layout_structure", [])
        placement_records = layout_data.get("placement_records", [])
        statistics = layout_data.get("statistics", {})
        
        self.log(f"üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ:")
        self.log(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {warehouse_info.get('name', 'N/A')}")
        self.log(f"   ID: {warehouse_info.get('id', 'N/A')}")
        self.log(f"   –ù–æ–º–µ—Ä: {warehouse_info.get('warehouse_id_number', 'N/A')}")
        
        self.log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        total_cells = statistics.get("total_cells", 0)
        occupied_cells = statistics.get("occupied_cells", 0)
        free_cells = statistics.get("free_cells", 0)
        occupancy_rate = statistics.get("occupancy_rate", 0)
        
        self.log(f"   –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}")
        self.log(f"   –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {occupied_cells}")
        self.log(f"   –°–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫: {free_cells}")
        self.log(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {occupancy_rate}%")
        
        self.test_results["occupied_cells_count"] = occupied_cells
        
        # –ê–Ω–∞–ª–∏–∑ placement_records
        self.log(f"\nüìã –ê–Ω–∞–ª–∏–∑ placement_records:")
        self.log(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(placement_records)}")
        self.test_results["placement_records_found"] = len(placement_records)
        
        if placement_records:
            self.analyze_placement_records(placement_records)
        else:
            self.log("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: placement_records –ø—É—Å—Ç–æ–π!", "WARNING")
            self.test_results["sync_issues_found"].append("placement_records –ø—É—Å—Ç–æ–π - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞
        self.log(f"\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞:")
        self.log(f"   –ë–ª–æ–∫–æ–≤: {len(layout_structure)}")
        
        actual_occupied_count = 0
        for block in layout_structure:
            block_number = block.get("block_number", "N/A")
            shelves = block.get("shelves", [])
            
            for shelf in shelves:
                shelf_number = shelf.get("shelf_number", "N/A")
                cells = shelf.get("cells", [])
                
                for cell in cells:
                    if cell.get("is_occupied", False):
                        actual_occupied_count += 1
        
        self.log(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {actual_occupied_count}")
        self.test_results["expected_occupied_count"] = actual_occupied_count
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if occupied_cells != actual_occupied_count:
            issue = f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: statistics.occupied_cells ({occupied_cells}) != —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–Ω—è—Ç—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ({actual_occupied_count})"
            self.test_results["sync_issues_found"].append(issue)
            self.log(f"‚ùå {issue}", "ERROR")
        else:
            self.log(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
    
    def analyze_placement_records(self, placement_records):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó PLACEMENT_RECORDS:")
        self.log("-" * 50)
        
        warehouse_id_issues = []
        location_parsing_issues = []
        
        for i, record in enumerate(placement_records[:10]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            individual_number = record.get("individual_number", "N/A")
            cargo_name = record.get("cargo_name", "N/A")
            warehouse_id = record.get("warehouse_id", "N/A")
            location = record.get("location", "N/A")
            placed_at = record.get("placed_at", "N/A")
            
            self.log(f"\nüì¶ –ó–∞–ø–∏—Å—å #{i+1}:")
            self.log(f"   Individual Number: {individual_number}")
            self.log(f"   Cargo Name: {cargo_name}")
            self.log(f"   Warehouse ID: {warehouse_id}")
            self.log(f"   Location: {location}")
            self.log(f"   Placed At: {placed_at}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ warehouse_id
            if warehouse_id != self.warehouse_001_id:
                issue = f"–ó–∞–ø–∏—Å—å {individual_number}: warehouse_id ({warehouse_id}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∫–ª–∞–¥—É 001 ({self.warehouse_001_id})"
                warehouse_id_issues.append(issue)
                self.log(f"   ‚ö†Ô∏è {issue}", "WARNING")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ location
            if location and location != "N/A":
                if not self.validate_location_format(location):
                    issue = f"–ó–∞–ø–∏—Å—å {individual_number}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç location ({location})"
                    location_parsing_issues.append(issue)
                    self.log(f"   ‚ö†Ô∏è {issue}", "WARNING")
            else:
                issue = f"–ó–∞–ø–∏—Å—å {individual_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç location"
                location_parsing_issues.append(issue)
                self.log(f"   ‚ö†Ô∏è {issue}", "WARNING")
        
        self.test_results["warehouse_id_issues"] = warehouse_id_issues
        self.test_results["location_parsing_issues"] = location_parsing_issues
        
        if len(placement_records) > 10:
            self.log(f"\nüìã ... –∏ –µ—â–µ {len(placement_records) - 10} –∑–∞–ø–∏—Å–µ–π")
    
    def validate_location_format(self, location):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ location"""
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "–ë1-–ü2-–Ø10", "001-01-02-015", etc.
        import re
        
        # –§–æ—Ä–º–∞—Ç —Å –±—É–∫–≤–∞–º–∏: –ë1-–ü2-–Ø10
        pattern1 = r'^–ë\d+-–ü\d+-–Ø\d+$'
        # –§–æ—Ä–º–∞—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏: 001-01-02-015
        pattern2 = r'^\d{3}-\d{2}-\d{2}-\d{3}$'
        
        return bool(re.match(pattern1, location) or re.match(pattern2, location))
    
    def check_database_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ (—á–µ—Ä–µ–∑ API)"""
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•:")
        self.log("-" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_001_id}/statistics")
            
            if response.status_code == 200:
                stats = response.json()
                self.log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ –∏–∑ API statistics:")
                self.log(f"   –í—Å–µ–≥–æ —è—á–µ–µ–∫: {stats.get('total_cells', 'N/A')}")
                self.log(f"   –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {stats.get('occupied_cells', 'N/A')}")
                self.log(f"   –°–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫: {stats.get('free_cells', 'N/A')}")
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ layout-with-cargo
                layout_occupied = self.test_results["occupied_cells_count"]
                stats_occupied = stats.get('occupied_cells', 0)
                
                if layout_occupied != stats_occupied:
                    issue = f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É API: layout-with-cargo ({layout_occupied}) vs statistics ({stats_occupied})"
                    self.test_results["sync_issues_found"].append(issue)
                    self.log(f"‚ùå {issue}", "ERROR")
                else:
                    self.log(f"‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É API —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞: {response.status_code}", "WARNING")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}", "ERROR")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• API layout-with-cargo")
        self.log(f"üè¢ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥: {TARGET_WAREHOUSE_NUMBER} '{TARGET_WAREHOUSE_NAME}'")
        self.log(f"üìÖ –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. üè¢ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001: {'‚úÖ –ù–ê–ô–î–ï–ù' if self.test_results['warehouse_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        self.log(f"  3. üéØ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API layout-with-cargo: {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.test_results['layout_api_accessible'] else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        self.log(f"  4. üìã –ù–∞–π–¥–µ–Ω–æ placement_records: {self.test_results['placement_records_found']}")
        self.log(f"  5. üìä –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞): {self.test_results['occupied_cells_count']}")
        self.log(f"  6. üèóÔ∏è –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞): {self.test_results['expected_occupied_count']}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_issues = self.test_results["sync_issues_found"]
        warehouse_id_issues = self.test_results["warehouse_id_issues"]
        location_issues = self.test_results["location_parsing_issues"]
        
        total_issues = len(sync_issues) + len(warehouse_id_issues) + len(location_issues)
        
        self.log(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({total_issues} —à—Ç.):")
        
        if sync_issues:
            self.log(f"  üîÑ –ü—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ({len(sync_issues)} —à—Ç.):")
            for i, issue in enumerate(sync_issues, 1):
                self.log(f"    {i}. {issue}")
        
        if warehouse_id_issues:
            self.log(f"  üè¢ –ü—Ä–æ–±–ª–µ–º—ã warehouse_id ({len(warehouse_id_issues)} —à—Ç.):")
            for i, issue in enumerate(warehouse_id_issues, 1):
                self.log(f"    {i}. {issue}")
        
        if location_issues:
            self.log(f"  üìç –ü—Ä–æ–±–ª–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ location ({len(location_issues)} —à—Ç.):")
            for i, issue in enumerate(location_issues, 1):
                self.log(f"    {i}. {issue}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if total_issues == 0:
            self.log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            self.log("üéâ API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∫–ª–∞–¥–∞ 001")
        else:
            self.log("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:")
            
            if warehouse_id_issues:
                self.log("  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å warehouse_id –≤ placement_records")
                self.log("  - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å–∫–ª–∞–¥—É")
            
            if location_issues:
                self.log("  - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ location –≤ placement_records")
                self.log("  - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç location (–ë1-–ü2-–Ø10 –∏–ª–∏ 001-01-02-015)")
            
            if sync_issues:
                self.log("  - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API endpoints")
                self.log("  - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –î–ò–ê–ì–ù–û–ó:")
        if total_issues == 0:
            self.log("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            self.log("üìä –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return True
        else:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•!")
            self.log(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_issues} –ø—Ä–æ–±–ª–µ–º, —Ç—Ä–µ–±—É—é—â–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            self.log("‚ö†Ô∏è –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
    
    def run_layout_sync_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ layout-with-cargo"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò API layout-with-cargo")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001
        if not self.find_warehouse_001():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
        if not self.test_layout_with_cargo_api():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: API layout-with-cargo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        self.check_database_consistency()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        diagnosis_success = self.generate_final_report()
        
        return diagnosis_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseLayoutSyncTester()
    
    try:
        success = tester.run_layout_sync_diagnosis()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üìä –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ 001 –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–Ø–í–ò–õ–ê –ü–†–û–ë–õ–ï–ú–´!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–ª–∞–¥–∞ 001")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()