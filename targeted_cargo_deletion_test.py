#!/usr/bin/env python3
"""
–¶–ï–õ–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ 100008/02 —Å ID 100004
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

def test_specific_cargo_deletion():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ 100008/02"""
    
    print("üéØ –¶–ï–õ–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ 100008/02 (ID: 100004)")
    print("=" * 70)
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    login_data = {
        "phone": "+79999888777",
        "password": "admin123"
    }
    
    response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        return False
        
    token = response.json().get("access_token")
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ 100008/02 –≤ —Å–∏—Å—Ç–µ–º–µ
    print("\n1Ô∏è‚É£ –ü–û–ò–°–ö –ì–†–£–ó–ê 100008/02 –í –°–ò–°–¢–ï–ú–ï")
    print("-" * 40)
    
    response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.text}")
        return False
    
    cargo_data = response.json()
    cargo_items = cargo_data.get("items", [])
    
    target_cargo = None
    for cargo in cargo_items:
        if cargo.get("cargo_number") == "100008/02":
            target_cargo = cargo
            break
    
    if target_cargo:
        print(f"‚úÖ –ì—Ä—É–∑ 100008/02 –Ω–∞–π–¥–µ–Ω")
        print(f"   ID: {target_cargo.get('id')}")
        print(f"   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {target_cargo.get('sender_full_name')}")
        cargo_id = target_cargo.get('id')
    else:
        print(f"‚ö†Ô∏è –ì—Ä—É–∑ 100008/02 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        print(f"   –í–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –≤—Å–µ –≥—Ä—É–∑—ã
        print("   –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≤—Å–µ –≥—Ä—É–∑—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        response = requests.get(f"{BACKEND_URL}/operator/cargo/list", headers=headers)
        if response.status_code == 200:
            all_cargo = response.json()
            for cargo in all_cargo.get("items", []):
                if cargo.get("cargo_number") == "100008/02":
                    target_cargo = cargo
                    cargo_id = cargo.get('id')
                    print(f"‚úÖ –ì—Ä—É–∑ 100008/02 –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ")
                    print(f"   ID: {cargo_id}")
                    print(f"   –°—Ç–∞—Ç—É—Å: {cargo.get('processing_status')}")
                    break
        
        if not target_cargo:
            print(f"‚ùå –ì—Ä—É–∑ 100008/02 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            return False
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞
    print(f"\n2Ô∏è‚É£ –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–ê –° ID: {cargo_id}")
    print("-" * 40)
    
    response = requests.delete(
        f"{BACKEND_URL}/operator/cargo/{cargo_id}/remove-from-placement", 
        headers=headers
    )
    
    print(f"–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
        print(f"   –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {result.get('cargo_number')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω—ã–π –≥—Ä—É–∑
        if result.get('cargo_number') == "100008/02":
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥—Ä—É–∑: 100008/02")
        else:
            print(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω –¥—Ä—É–≥–æ–π –≥—Ä—É–∑: {result.get('cargo_number')}")
            
    elif response.status_code == 404:
        print(f"‚ö†Ô∏è –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    print(f"\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–∑ –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
    if response.status_code == 200:
        cargo_data = response.json()
        cargo_items = cargo_data.get("items", [])
        
        found_cargo = False
        for cargo in cargo_items:
            if cargo.get("cargo_number") == "100008/02":
                found_cargo = True
                break
        
        if not found_cargo:
            print(f"‚úÖ –ì—Ä—É–∑ 100008/02 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        else:
            print(f"‚ö†Ô∏è –ì—Ä—É–∑ 100008/02 –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ REMOVED_FROM_PLACEMENT
    print(f"\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê REMOVED_FROM_PLACEMENT")
    print("-" * 40)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–∑ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    response = requests.get(f"{BACKEND_URL}/operator/cargo/list", headers=headers)
    if response.status_code == 200:
        all_cargo = response.json()
        for cargo in all_cargo.get("items", []):
            if cargo.get("cargo_number") == "100008/02":
                status = cargo.get('processing_status')
                print(f"‚úÖ –ì—Ä—É–∑ 100008/02 –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                print(f"   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}")
                
                if status == "removed_from_placement":
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: removed_from_placement")
                else:
                    print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ removed_from_placement")
                break
        else:
            print(f"‚ö†Ô∏è –ì—Ä—É–∑ 100008/02 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ")
    
    print(f"\n" + "=" * 70)
    print(f"üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å REMOVED_FROM_PLACEMENT –¥–æ–±–∞–≤–ª–µ–Ω –≤ enum")
    print(f"‚úÖ ValidationError –¥–ª—è 'removed_from_placement' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ Pydantic")
    
    return True

if __name__ == "__main__":
    test_specific_cargo_deletion()