#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ TAJLINE.TJ

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´:
1. ‚úÖ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –ó–∞–º–µ–Ω–µ–Ω timestamp –Ω–∞ UUID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID
2. ‚úÖ –ù–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤: –ò–∑–º–µ–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å request_number –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ cargo_id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
3. ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint: /api/admin/cleanup-duplicate-notifications –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

–õ–û–ì–ò–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
- notification_id = f"WN_{str(uuid.uuid4())}" –≤–º–µ—Å—Ç–æ timestamp
- cargo_number = f"{cargo_id[:6]}/{str(index + 1).zfill(2)}" –≤–º–µ—Å—Ç–æ request_number
- Endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–ù–£–ñ–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/admin/cleanup-duplicate-notifications
3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
4. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤
5. –ü–æ–ª–Ω—ã–π workflow: –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞–∂–¥—ã–π –≥—Ä—É–∑ –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ
- –ö–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
- –ö–∞–∂–¥—ã–π –≥—Ä—É–∑ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
- Workflow —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–ø–∏–π
"""

import requests
import json
import os
import time
import uuid
from datetime import datetime
from typing import List, Dict, Any

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-qr-system.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class DuplicatePreventionTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        self.test_results = []
        self.created_notifications = []
        self.created_cargos = []
        
    def log_result(self, test_name: str, success: bool, details: str, data: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "timestamp": timestamp,
            "test": test_name,
            "success": success,
            "details": details,
            "data": data or {}
        }
        self.test_results.append(result)
        print(f"[{timestamp}] {status} {test_name}")
        print(f"   {details}")
        if data and len(str(data)) < 200:
            print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
        print()
        
    def authenticate_admin(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ cleanup endpoint"""
        try:
            # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_credentials = [
                ("+79999888777", "admin123", "–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"),
                ("admin@emergent.com", "admin123", "Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"),
                ("+79777888999", "warehouse123", "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞ –∫–∞–∫ fallback")
            ]
            
            for phone, password, description in admin_credentials:
                login_data = {
                    "phone": phone,
                    "password": password
                }
                
                response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
                
                if response.status_code == 200:
                    data = response.json()
                    self.auth_token = data.get("access_token")
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.auth_token}",
                        "Content-Type": "application/json"
                    })
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_response = self.session.get(f"{API_BASE}/auth/me")
                    if user_response.status_code == 200:
                        self.current_user = user_response.json()
                        user_info = f"'{self.current_user.get('full_name')}' (–Ω–æ–º–µ—Ä: {self.current_user.get('user_number')}, —Ä–æ–ª—å: {self.current_user.get('role')})"
                        
                        self.log_result(
                            "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                            True,
                            f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {description}: {user_info}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω",
                            {"phone": phone, "role": self.current_user.get('role')}
                        )
                        return True
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {description}")
                else:
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {description} –Ω–µ—É–¥–∞—á–Ω–∞: HTTP {response.status_code}")
            
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                False,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            return False
                
        except Exception as e:
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return False
    
    def test_cleanup_duplicate_notifications_endpoint(self):
        """–¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/admin/cleanup-duplicate-notifications"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint
            response = self.session.post(f"{API_BASE}/admin/cleanup-duplicate-notifications")
            
            if response.status_code == 200:
                data = response.json()
                removed_count = data.get("removed_duplicates", 0)
                total_before = data.get("total_before_cleanup", 0)
                total_after = data.get("total_after_cleanup", 0)
                
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                    True,
                    f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {removed_count}, –ë—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_before}, –°—Ç–∞–ª–æ: {total_after}",
                    {
                        "removed_duplicates": removed_count,
                        "total_before": total_before,
                        "total_after": total_after,
                        "cleanup_successful": True
                    }
                )
                return True
            elif response.status_code == 403:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                    False,
                    f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (HTTP 403) - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.current_user.get('role')} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è cleanup –æ–ø–µ—Ä–∞—Ü–∏–π"
                )
                return False
            elif response.status_code == 404:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                    False,
                    "Endpoint /api/admin/cleanup-duplicate-notifications –Ω–µ –Ω–∞–π–¥–µ–Ω (HTTP 404) - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
                )
                return False
            else:
                error_text = response.text[:200] if response.text else "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏"
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ cleanup endpoint: HTTP {response.status_code}, {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ cleanup endpoint: {str(e)}"
            )
            return False
    
    def test_notification_id_uniqueness(self):
        """–¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ID
            response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
            
            existing_notifications = []
            if response.status_code == 200:
                data = response.json()
                existing_notifications = data.get("notifications", [])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            existing_ids = [n.get("id") for n in existing_notifications if n.get("id")]
            uuid_format_count = 0
            timestamp_format_count = 0
            wn_prefix_count = 0
            
            for notification_id in existing_ids:
                if notification_id.startswith("WN_"):
                    wn_prefix_count += 1
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å –ø–æ—Å–ª–µ WN_ –≤–∞–ª–∏–¥–Ω—ã–º UUID
                    uuid_part = notification_id[3:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å WN_
                    try:
                        uuid.UUID(uuid_part)
                        uuid_format_count += 1
                    except ValueError:
                        pass
                elif notification_id.isdigit() or (len(notification_id) == 13 and notification_id.isdigit()):
                    timestamp_format_count += 1
            
            total_notifications = len(existing_ids)
            unique_ids = len(set(existing_ids))
            duplicates_found = total_notifications - unique_ids
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID
            uuid_percentage = (uuid_format_count / total_notifications * 100) if total_notifications > 0 else 0
            wn_prefix_percentage = (wn_prefix_count / total_notifications * 100) if total_notifications > 0 else 0
            
            success = duplicates_found == 0 and uuid_percentage > 0
            
            details = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_notifications} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {unique_ids}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_found}. "
                f"UUID —Ñ–æ—Ä–º–∞—Ç (WN_xxx): {uuid_format_count} ({uuid_percentage:.1f}%), "
                f"–ü—Ä–µ—Ñ–∏–∫—Å WN_: {wn_prefix_count} ({wn_prefix_percentage:.1f}%), "
                f"Timestamp —Ñ–æ—Ä–º–∞—Ç: {timestamp_format_count}"
            )
            
            if duplicates_found == 0:
                details += ". ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
            else:
                details += f". üö® –ù–ê–ô–î–ï–ù–û {duplicates_found} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID!"
            
            if uuid_format_count > 0:
                details += " ‚úÖ –ù–æ–≤—ã–π UUID —Ñ–æ—Ä–º–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω!"
            
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –£–í–ï–î–û–ú–õ–ï–ù–ò–ô",
                success,
                details,
                {
                    "total_notifications": total_notifications,
                    "unique_ids": unique_ids,
                    "duplicates_found": duplicates_found,
                    "uuid_format_count": uuid_format_count,
                    "wn_prefix_count": wn_prefix_count,
                    "timestamp_format_count": timestamp_format_count,
                    "sample_ids": existing_ids[:5]
                }
            )
            return success
            
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –£–í–ï–î–û–ú–õ–ï–ù–ò–ô",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID: {str(e)}"
            )
            return False
    
    def test_cargo_number_uniqueness(self):
        """–¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–º–µ—Ä–æ–≤
            response = self.session.get(f"{API_BASE}/cargo/all?per_page=100")
            
            existing_cargos = []
            if response.status_code == 200:
                data = response.json()
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å items
                if isinstance(data, list):
                    existing_cargos = data
                else:
                    existing_cargos = data.get("items", [])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤
            existing_numbers = [c.get("cargo_number") for c in existing_cargos if c.get("cargo_number")]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
            uuid_based_count = 0  # –§–æ—Ä–º–∞—Ç —Å UUID: XXXXXX/01, XXXXXX/02
            request_based_count = 0  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: 100021/01, 100021/02
            new_format_count = 0  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: 2501XXXXXX
            
            cargo_id_pattern = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ cargo_id
            
            for cargo_number in existing_numbers:
                if "/" in cargo_number:
                    base_part = cargo_number.split("/")[0]
                    if len(base_part) == 6 and not base_part.startswith("100"):
                        uuid_based_count += 1
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é UUID
                        if base_part not in cargo_id_pattern:
                            cargo_id_pattern[base_part] = 0
                        cargo_id_pattern[base_part] += 1
                    elif base_part.startswith("100"):
                        request_based_count += 1
                elif cargo_number.startswith("2501"):
                    new_format_count += 1
            
            total_cargos = len(existing_numbers)
            unique_numbers = len(set(existing_numbers))
            duplicates_found = total_cargos - unique_numbers
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ cargo_id –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
            duplicate_cargo_ids = {k: v for k, v in cargo_id_pattern.items() if v > 1}
            
            uuid_percentage = (uuid_based_count / total_cargos * 100) if total_cargos > 0 else 0
            
            success = duplicates_found == 0 and uuid_based_count > 0
            
            details = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_cargos} –≥—Ä—É–∑–æ–≤. "
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {unique_numbers}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_found}. "
                f"UUID-based —Ñ–æ—Ä–º–∞—Ç: {uuid_based_count} ({uuid_percentage:.1f}%), "
                f"Request-based —Ñ–æ—Ä–º–∞—Ç: {request_based_count}, "
                f"–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (2501XXXXXX): {new_format_count}"
            )
            
            if duplicates_found == 0:
                details += ". ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
            else:
                details += f". üö® –ù–ê–ô–î–ï–ù–û {duplicates_found} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤!"
            
            if uuid_based_count > 0:
                details += " ‚úÖ –ù–æ–≤—ã–π UUID-based —Ñ–æ—Ä–º–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω!"
            
            if duplicate_cargo_ids:
                details += f" ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è cargo_id: {len(duplicate_cargo_ids)}"
            
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ù–û–ú–ï–†–û–í –ì–†–£–ó–û–í",
                success,
                details,
                {
                    "total_cargos": total_cargos,
                    "unique_numbers": unique_numbers,
                    "duplicates_found": duplicates_found,
                    "uuid_based_count": uuid_based_count,
                    "request_based_count": request_based_count,
                    "new_format_count": new_format_count,
                    "duplicate_cargo_ids": duplicate_cargo_ids,
                    "sample_numbers": existing_numbers[:10]
                }
            )
            return success
            
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ù–û–ú–ï–†–û–í –ì–†–£–ó–û–í",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤: {str(e)}"
            )
            return False
    
    def test_full_workflow_no_duplicates(self):
        """–¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π workflow - –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
            
            if response.status_code != 200:
                self.log_result(
                    "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: HTTP {response.status_code}"
                )
                return False
            
            data = response.json()
            notifications = data.get("notifications", [])
            
            if not notifications:
                self.log_result(
                    "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    True,
                    "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è workflow - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"
                )
                return True
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_notification = None
            for notification in notifications:
                if notification.get("status") == "pending_acceptance":
                    test_notification = notification
                    break
            
            if not test_notification:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å –ª—é–±—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
                test_notification = notifications[0]
            
            notification_id = test_notification.get("id")
            original_status = test_notification.get("status")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –î–û workflow
            cargo_response = self.session.get(f"{API_BASE}/cargo/all?per_page=1")
            initial_cargo_count = 0
            if cargo_response.status_code == 200:
                cargo_data = cargo_response.json()
                if isinstance(cargo_data, list):
                    initial_cargo_count = len(cargo_data)
                else:
                    initial_cargo_count = cargo_data.get("pagination", {}).get("total_count", 0)
            
            # –®–∞–≥ 1: –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if original_status == "pending_acceptance":
                accept_response = self.session.post(f"{API_BASE}/operator/warehouse-notifications/{notification_id}/accept")
                
                if accept_response.status_code != 200:
                    self.log_result(
                        "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í - –®–∞–≥ 1 (Accept)",
                        False,
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: HTTP {accept_response.status_code}"
                    )
                    return False
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                time.sleep(1)
            
            # –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
            complete_data = {
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
                        "weight": 12.5,
                        "price_per_kg": 150.0
                    }
                ],
                "description": f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {datetime.now().strftime('%H:%M:%S')}",
                "payment_method": "cash",
                "payment_amount": 1875.0
            }
            
            complete_response = self.session.post(
                f"{API_BASE}/operator/warehouse-notifications/{notification_id}/complete",
                json=complete_data
            )
            
            if complete_response.status_code != 200:
                error_text = complete_response.text[:200] if complete_response.text else "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π"
                self.log_result(
                    "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í - –®–∞–≥ 2 (Complete)",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: HTTP {complete_response.status_code}, {error_text}"
                )
                return False
            
            complete_result = complete_response.json()
            created_cargos = complete_result.get("created_cargos", [])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –ü–û–°–õ–ï workflow
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            final_cargo_response = self.session.get(f"{API_BASE}/cargo/all?per_page=1")
            final_cargo_count = 0
            if final_cargo_response.status_code == 200:
                final_cargo_data = final_cargo_response.json()
                if isinstance(final_cargo_data, list):
                    final_cargo_count = len(final_cargo_data)
                else:
                    final_cargo_count = final_cargo_data.get("pagination", {}).get("total_count", 0)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            cargos_created_by_api = len(created_cargos)
            cargos_created_total = final_cargo_count - initial_cargo_count
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö
            created_numbers = [c.get("cargo_number") for c in created_cargos]
            unique_created_numbers = len(set(created_numbers))
            duplicates_in_created = len(created_numbers) - unique_created_numbers
            
            success = (
                cargos_created_by_api == cargos_created_total and  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                duplicates_in_created == 0 and  # –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö
                cargos_created_by_api > 0  # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥—Ä—É–∑ —Å–æ–∑–¥–∞–Ω
            )
            
            details = (
                f"Workflow –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}. "
                f"–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–∑–æ–≤ –ø–æ API: {cargos_created_by_api}, "
                f"–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ: {cargos_created_total}, "
                f"–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö: {duplicates_in_created}. "
                f"–ù–æ–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {created_numbers}"
            )
            
            if success:
                details += " ‚úÖ Workflow —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤!"
            else:
                details += " üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –≤ workflow!"
            
            self.log_result(
                "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                success,
                details,
                {
                    "notification_id": notification_id,
                    "initial_cargo_count": initial_cargo_count,
                    "final_cargo_count": final_cargo_count,
                    "cargos_created_by_api": cargos_created_by_api,
                    "cargos_created_total": cargos_created_total,
                    "created_numbers": created_numbers,
                    "duplicates_in_created": duplicates_in_created
                }
            )
            return success
            
        except Exception as e:
            self.log_result(
                "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ workflow: {str(e)}"
            )
            return False
    
    def test_multiple_notifications_unique_ids(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
        try:
            # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
            
            if response.status_code != 200:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: HTTP {response.status_code}"
                )
                return False
            
            data = response.json()
            notifications = data.get("notifications", [])
            
            if len(notifications) < 2:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                    True,
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(notifications)}), –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞"
                )
                return True
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
            notification_ids = [n.get("id") for n in notifications if n.get("id")]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            unique_ids = set(notification_ids)
            duplicates_count = len(notification_ids) - len(unique_ids)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
            uuid_format_count = 0
            wn_prefix_count = 0
            
            for notification_id in notification_ids:
                if notification_id.startswith("WN_"):
                    wn_prefix_count += 1
                    uuid_part = notification_id[3:]
                    try:
                        uuid.UUID(uuid_part)
                        uuid_format_count += 1
                    except ValueError:
                        pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            creation_times = []
            for notification in notifications:
                created_at = notification.get("created_at")
                if created_at:
                    creation_times.append(created_at)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–µ–∫—É–Ω–¥—ã)
            time_groups = {}
            for time_str in creation_times:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ —Å–µ–∫—É–Ω–¥
                time_key = time_str[:19] if len(time_str) > 19 else time_str
                if time_key not in time_groups:
                    time_groups[time_key] = 0
                time_groups[time_key] += 1
            
            simultaneous_creations = sum(1 for count in time_groups.values() if count > 1)
            
            success = duplicates_count == 0 and uuid_format_count > 0
            
            details = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(notification_ids)} ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_ids)}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}. "
                f"UUID —Ñ–æ—Ä–º–∞—Ç (WN_xxx): {uuid_format_count}, "
                f"–ü—Ä–µ—Ñ–∏–∫—Å WN_: {wn_prefix_count}. "
                f"–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏—è: {simultaneous_creations}"
            )
            
            if duplicates_count == 0:
                details += " ‚úÖ –í—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã!"
            else:
                details += f" üö® –ù–∞–π–¥–µ–Ω–æ {duplicates_count} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID!"
            
            if uuid_format_count > 0:
                details += " ‚úÖ UUID —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!"
            
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                success,
                details,
                {
                    "total_ids": len(notification_ids),
                    "unique_ids": len(unique_ids),
                    "duplicates_count": duplicates_count,
                    "uuid_format_count": uuid_format_count,
                    "wn_prefix_count": wn_prefix_count,
                    "simultaneous_creations": simultaneous_creations,
                    "sample_ids": notification_ids[:5]
                }
            )
            return success
            
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID: {str(e)}"
            )
            return False
    
    def test_multiple_cargos_unique_numbers(self):
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞–∂–¥—ã–π –≥—Ä—É–∑ –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            response = self.session.get(f"{API_BASE}/cargo/all?per_page=50&sort_by=created_at&sort_order=desc")
            
            if response.status_code != 200:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ù–û–ú–ï–†–û–í –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: HTTP {response.status_code}"
                )
                return False
            
            data = response.json()
            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å items
            if isinstance(data, list):
                cargos = data
            else:
                cargos = data.get("items", [])
            
            if len(cargos) < 2:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ù–û–ú–ï–†–û–í –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                    True,
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(cargos)}), –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞"
                )
                return True
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤
            cargo_numbers = [c.get("cargo_number") for c in cargos if c.get("cargo_number")]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            unique_numbers = set(cargo_numbers)
            duplicates_count = len(cargo_numbers) - len(unique_numbers)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
            uuid_based_format = 0  # XXXXXX/01, XXXXXX/02 (–≥–¥–µ XXXXXX - —á–∞—Å—Ç—å UUID)
            request_based_format = 0  # 100021/01, 100021/02 (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
            new_sequential_format = 0  # 2501XXXXXX (–Ω–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–∑–æ–≤–æ–π —á–∞—Å—Ç–∏ (–¥–æ —Å–ª–µ—à–∞)
            base_parts = {}
            for cargo_number in cargo_numbers:
                if "/" in cargo_number:
                    base_part = cargo_number.split("/")[0]
                    if base_part not in base_parts:
                        base_parts[base_part] = []
                    base_parts[base_part].append(cargo_number)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                    if len(base_part) == 6 and not base_part.startswith("100"):
                        uuid_based_format += 1
                    elif base_part.startswith("100"):
                        request_based_format += 1
                elif cargo_number.startswith("2501"):
                    new_sequential_format += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö
            correct_numbering = True
            numbering_issues = []
            
            for base_part, numbers in base_parts.items():
                if len(numbers) > 1:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–ª–µ—à–∞
                    suffixes = []
                    for number in numbers:
                        if "/" in number:
                            suffix = number.split("/")[1]
                            try:
                                suffixes.append(int(suffix))
                            except ValueError:
                                pass
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    suffixes.sort()
                    expected_sequence = list(range(1, len(suffixes) + 1))
                    if suffixes != expected_sequence:
                        correct_numbering = False
                        numbering_issues.append(f"{base_part}: {suffixes} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_sequence})")
            
            success = duplicates_count == 0 and uuid_based_format > 0 and correct_numbering
            
            details = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(cargo_numbers)} –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤. "
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_numbers)}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}. "
                f"UUID-based: {uuid_based_format}, Request-based: {request_based_format}, "
                f"Sequential (2501XXX): {new_sequential_format}. "
                f"–ì—Ä—É–ø–ø —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏: {len([g for g in base_parts.values() if len(g) > 1])}"
            )
            
            if duplicates_count == 0:
                details += " ‚úÖ –í—Å–µ –Ω–æ–º–µ—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã!"
            else:
                details += f" üö® –ù–∞–π–¥–µ–Ω–æ {duplicates_count} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤!"
            
            if uuid_based_format > 0:
                details += " ‚úÖ UUID-based —Ñ–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!"
            
            if correct_numbering:
                details += " ‚úÖ –ù—É–º–µ—Ä–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!"
            else:
                details += f" ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π: {len(numbering_issues)}"
            
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ù–û–ú–ï–†–û–í –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                success,
                details,
                {
                    "total_numbers": len(cargo_numbers),
                    "unique_numbers": len(unique_numbers),
                    "duplicates_count": duplicates_count,
                    "uuid_based_format": uuid_based_format,
                    "request_based_format": request_based_format,
                    "new_sequential_format": new_sequential_format,
                    "correct_numbering": correct_numbering,
                    "numbering_issues": numbering_issues,
                    "sample_numbers": cargo_numbers[:10]
                }
            )
            return success
            
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ù–û–ú–ï–†–û–í –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤: {str(e)}"
            )
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ TAJLINE.TJ")
        print("=" * 80)
        print("–¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: UUID –¥–ª—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ cargo_id –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤, cleanup endpoint")
        print("=" * 80)
        print()
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ cleanup endpoint
        self.test_cleanup_duplicate_notifications_endpoint()
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.test_notification_id_uniqueness()
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤
        self.test_cargo_number_uniqueness()
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π workflow –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.test_full_workflow_no_duplicates()
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.test_multiple_notifications_unique_ids()
        
        # –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.test_multiple_cargos_unique_numbers()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_final_summary()
        
        return True
    
    def print_final_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - successful_tests
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status} {result['test']}")
            print(f"   {result['details']}")
            print()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        notification_tests = [r for r in self.test_results if '—É–≤–µ–¥–æ–º–ª–µ–Ω' in r['test'].lower()]
        cargo_tests = [r for r in self.test_results if '–≥—Ä—É–∑' in r['test'].lower() or '–Ω–æ–º–µ—Ä' in r['test'].lower()]
        cleanup_tests = [r for r in self.test_results if 'cleanup' in r['test'].lower()]
        workflow_tests = [r for r in self.test_results if 'workflow' in r['test'].lower()]
        
        if cleanup_tests and any(r['success'] for r in cleanup_tests):
            print("‚úÖ Cleanup endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif cleanup_tests:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Cleanup endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if notification_tests and all(r['success'] for r in notification_tests):
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif notification_tests:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        if cargo_tests and all(r['success'] for r in cargo_tests):
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif cargo_tests:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≥—Ä—É–∑–æ–≤")
        
        if workflow_tests and all(r['success'] for r in workflow_tests):
            print("‚úÖ –ü–æ–ª–Ω—ã–π workflow —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        elif workflow_tests:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Workflow —Å–æ–∑–¥–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã")
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 85:
            print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
        elif success_rate >= 70:
            print("\n‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–Æ–¢")
            print("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º —Ä–µ—à–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
        else:
            print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
        print("\n" + "=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = DuplicatePreventionTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

if __name__ == "__main__":
    main()