#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ì—Ä—É–∑—ã" –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (–ù–ï "–†–∞–∑–º–µ—â–µ–Ω–∏–µ") 
–ø–æ–ª—É—á–∞—é—Ç—Å—è –æ—à–∏–±–∫–∏ "–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" –∏ "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏".

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)
2) –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏:
   - GET /api/operator/cargo/available-for-placement (–¥–ª—è "–†–∞–∑–º–µ—â–µ–Ω–∏—è")
   - GET /api/admin/cargo (–¥–ª—è "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤")
   - GET /api/operator/cargo (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞)
3) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –≥—Ä—É–∑—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
4) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ endpoints –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤":
   - DELETE /api/admin/cargo/{id} (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
   - DELETE /api/operator/cargo/{id}/remove-from-placement (–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)
5) –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤":
   - DELETE /api/admin/cargo/bulk (–µ—Å–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª)
   - DELETE /api/operator/cargo/bulk-remove-from-placement (–µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π)
6) –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"

–î–ï–¢–ê–õ–ò –ê–ù–ê–õ–ò–ó–ê:
- –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ —Ä–∞–∑–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
- –ù–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –º–∞—Å—Å–æ–≤—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-tracker.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class CargoListMassDeleteDiagnoser:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_info = None
        self.operator_info = None
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        self.placement_cargo = []  # –ì—Ä—É–∑—ã –∏–∑ "–†–∞–∑–º–µ—â–µ–Ω–∏—è"
        self.admin_cargo = []      # –ì—Ä—É–∑—ã –∏–∑ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (–∞–¥–º–∏–Ω)
        self.operator_cargo = []   # –ì—Ä—É–∑—ã –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìù –î–µ—Ç–∞–ª–∏: {details}")
        if error_msg:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}")
        print()

    def test_admin_authorization(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)"""
        try:
            auth_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_info = data.get("user")
                
                admin_name = self.admin_info.get("full_name", "Unknown")
                admin_role = self.admin_info.get("role", "Unknown")
                user_number = self.admin_info.get("user_number", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{admin_name}' (–Ω–æ–º–µ—Ä: {user_number}), —Ä–æ–ª—å: {admin_role}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                False,
                "",
                str(e)
            )
            return False

    def test_operator_authorization(self):
        """–¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
        try:
            auth_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                operator_name = self.operator_info.get("full_name", "Unknown")
                operator_role = self.operator_info.get("role", "Unknown")
                user_number = self.operator_info.get("user_number", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (–Ω–æ–º–µ—Ä: {user_number}), —Ä–æ–ª—å: {operator_role}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                False,
                "",
                str(e)
            )
            return False

    def test_analyze_placement_section(self):
        """–¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏—è" - GET /api/operator/cargo/available-for-placement"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if "items" in data:
                    self.placement_cargo = data["items"]
                    cargo_count = len(self.placement_cargo)
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                    if cargo_count > 0:
                        sample_cargo = self.placement_cargo[0]
                        fields = list(sample_cargo.keys())
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–æ–≤
                        statuses = {}
                        processing_statuses = {}
                        for cargo in self.placement_cargo:
                            status = cargo.get("status", "unknown")
                            processing_status = cargo.get("processing_status", "unknown")
                            statuses[status] = statuses.get(status, 0) + 1
                            processing_statuses[processing_status] = processing_statuses.get(processing_status, 0) + 1
                        
                        self.log_test(
                            '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏—è" - GET /api/operator/cargo/available-for-placement',
                            True,
                            f"–ù–∞–π–¥–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å—ã: {statuses}. –°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_statuses}. –ü–æ–ª—è: {fields[:10]}..."
                        )
                        return True
                    else:
                        self.log_test(
                            '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏—è" - GET /api/operator/cargo/available-for-placement',
                            True,
                            "–†–∞–∑–¥–µ–ª '–†–∞–∑–º–µ—â–µ–Ω–∏—è' –ø—É—Å—Ç - –Ω–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                        )
                        return True
                else:
                    self.log_test(
                        '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏—è" - GET /api/operator/cargo/available-for-placement',
                        False,
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ",
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}"
                    )
                    return False
            else:
                self.log_test(
                    '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏—è" - GET /api/operator/cargo/available-for-placement',
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏—è" - GET /api/operator/cargo/available-for-placement',
                False,
                "",
                str(e)
            )
            return False

    def test_analyze_admin_cargo_list(self):
        """–¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (–∞–¥–º–∏–Ω) - GET /api/cargo/all"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/cargo/all", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if "items" in data:
                    self.admin_cargo = data["items"]
                elif isinstance(data, list):
                    self.admin_cargo = data
                else:
                    self.admin_cargo = [data] if data else []
                
                cargo_count = len(self.admin_cargo)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if cargo_count > 0:
                    sample_cargo = self.admin_cargo[0]
                    fields = list(sample_cargo.keys())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–æ–≤
                    statuses = {}
                    processing_statuses = {}
                    for cargo in self.admin_cargo:
                        status = cargo.get("status", "unknown")
                        processing_status = cargo.get("processing_status", "unknown")
                        statuses[status] = statuses.get(status, 0) + 1
                        processing_statuses[processing_status] = processing_statuses.get(processing_status, 0) + 1
                    
                    self.log_test(
                        '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (–∞–¥–º–∏–Ω) - GET /api/cargo/all',
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–ø–∏—Å–∫–µ. –°—Ç–∞—Ç—É—Å—ã: {statuses}. –°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_statuses}. –ü–æ–ª—è: {fields[:10]}..."
                    )
                    return True
                else:
                    self.log_test(
                        '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (–∞–¥–º–∏–Ω) - GET /api/admin/cargo',
                        True,
                        "–ê–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç"
                    )
                    return True
            else:
                self.log_test(
                    '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (–∞–¥–º–∏–Ω) - GET /api/admin/cargo',
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                '–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" (–∞–¥–º–∏–Ω) - GET /api/admin/cargo',
                False,
                "",
                str(e)
            )
            return False

    def test_analyze_operator_cargo_list(self):
        """–¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ - GET /api/operator/cargo"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{API_BASE}/operator/cargo", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if "items" in data:
                    self.operator_cargo = data["items"]
                elif isinstance(data, list):
                    self.operator_cargo = data
                else:
                    self.operator_cargo = [data] if data else []
                
                cargo_count = len(self.operator_cargo)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if cargo_count > 0:
                    sample_cargo = self.operator_cargo[0]
                    fields = list(sample_cargo.keys())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–æ–≤
                    statuses = {}
                    processing_statuses = {}
                    for cargo in self.operator_cargo:
                        status = cargo.get("status", "unknown")
                        processing_status = cargo.get("processing_status", "unknown")
                        statuses[status] = statuses.get(status, 0) + 1
                        processing_statuses[processing_status] = processing_statuses.get(processing_status, 0) + 1
                    
                    self.log_test(
                        '–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ - GET /api/operator/cargo',
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º —Å–ø–∏—Å–∫–µ. –°—Ç–∞—Ç—É—Å—ã: {statuses}. –°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_statuses}. –ü–æ–ª—è: {fields[:10]}..."
                    )
                    return True
                else:
                    self.log_test(
                        '–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ - GET /api/operator/cargo',
                        True,
                        "–û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç"
                    )
                    return True
            else:
                self.log_test(
                    '–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ - GET /api/operator/cargo',
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                '–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ - GET /api/operator/cargo',
                False,
                "",
                str(e)
            )
            return False

    def test_compare_cargo_sections(self):
        """–¢–µ—Å—Ç 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏"""
        try:
            placement_count = len(self.placement_cargo)
            admin_count = len(self.admin_cargo)
            operator_count = len(self.operator_cargo)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä–∞–º –≥—Ä—É–∑–æ–≤
            placement_numbers = set(cargo.get("cargo_number", "") for cargo in self.placement_cargo)
            admin_numbers = set(cargo.get("cargo_number", "") for cargo in self.admin_cargo)
            operator_numbers = set(cargo.get("cargo_number", "") for cargo in self.operator_cargo)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ —Ä–∞–∑–ª–∏—á–∏—è
            placement_admin_intersection = placement_numbers.intersection(admin_numbers)
            placement_operator_intersection = placement_numbers.intersection(operator_numbers)
            admin_operator_intersection = admin_numbers.intersection(operator_numbers)
            
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ
            placement_unique = placement_numbers - admin_numbers - operator_numbers
            admin_unique = admin_numbers - placement_numbers - operator_numbers
            operator_unique = operator_numbers - placement_numbers - admin_numbers
            
            details = f"""
–°–†–ê–í–ù–ï–ù–ò–ï –†–ê–ó–î–ï–õ–û–í:
- –†–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_count} –≥—Ä—É–∑–æ–≤
- –ê–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫: {admin_count} –≥—Ä—É–∑–æ–≤  
- –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Å–ø–∏—Å–æ–∫: {operator_count} –≥—Ä—É–∑–æ–≤

–ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø:
- –†–∞–∑–º–µ—â–µ–Ω–∏—è ‚à© –ê–¥–º–∏–Ω—Å–∫–∏–π: {len(placement_admin_intersection)} –≥—Ä—É–∑–æ–≤
- –†–∞–∑–º–µ—â–µ–Ω–∏—è ‚à© –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π: {len(placement_operator_intersection)} –≥—Ä—É–∑–æ–≤
- –ê–¥–º–∏–Ω—Å–∫–∏–π ‚à© –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π: {len(admin_operator_intersection)} –≥—Ä—É–∑–æ–≤

–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ì–†–£–ó–´:
- –¢–æ–ª—å–∫–æ –≤ –†–∞–∑–º–µ—â–µ–Ω–∏—è—Ö: {len(placement_unique)} –≥—Ä—É–∑–æ–≤
- –¢–æ–ª—å–∫–æ –≤ –ê–¥–º–∏–Ω—Å–∫–æ–º: {len(admin_unique)} –≥—Ä—É–∑–æ–≤
- –¢–æ–ª—å–∫–æ –≤ –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º: {len(operator_unique)} –≥—Ä—É–∑–æ–≤
            """.strip()
            
            self.log_test(
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏",
                True,
                details
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
            if admin_count > 0 and admin_unique:
                self.log_test(
                    '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"',
                    True,
                    f'–†–∞–∑–¥–µ–ª "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç GET /api/admin/cargo ({admin_count} –≥—Ä—É–∑–æ–≤, {len(admin_unique)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)'
                )
            elif operator_count > 0 and operator_unique:
                self.log_test(
                    '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"',
                    True,
                    f'–†–∞–∑–¥–µ–ª "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç GET /api/operator/cargo ({operator_count} –≥—Ä—É–∑–æ–≤, {len(operator_unique)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)'
                )
            else:
                self.log_test(
                    '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"',
                    False,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π API endpoint —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª—É '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'",
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"
                )
            
            return True
                
        except Exception as e:
            self.log_test(
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_single_deletion(self):
        """–¢–µ—Å—Ç 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API"""
        try:
            if not self.admin_cargo:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    False,
                    "",
                    "–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–ø–∏—Å–∫–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo = self.admin_cargo[0]
            cargo_id = test_cargo.get("id")
            cargo_number = test_cargo.get("cargo_number", "Unknown")
            
            if not cargo_id:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    False,
                    "",
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE /api/admin/cargo/{id}
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.delete(f"{API_BASE}/admin/cargo/{cargo_id}", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    True,
                    f"–ì—Ä—É–∑ {cargo_number} (ID: {cargo_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ DELETE /api/admin/cargo/{{id}}. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            elif response.status_code == 404:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    False,
                    f"–ì—Ä—É–∑ {cargo_number} (ID: {cargo_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    f"HTTP 404: {response.text}"
                )
                return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_bulk_deletion(self):
        """–¢–µ—Å—Ç 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API"""
        try:
            if len(self.admin_cargo) < 2:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    False,
                    "",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–ø–∏—Å–∫–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º 2-3 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo_ids = []
            test_cargo_numbers = []
            
            for cargo in self.admin_cargo[1:4]:  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2-3 –≥—Ä—É–∑–∞
                cargo_id = cargo.get("id")
                cargo_number = cargo.get("cargo_number", "Unknown")
                if cargo_id:
                    test_cargo_ids.append(cargo_id)
                    test_cargo_numbers.append(cargo_number)
            
            if not test_cargo_ids:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    False,
                    "",
                    "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö ID –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: DELETE /api/admin/cargo/bulk
            bulk_delete_data = {"cargo_ids": test_cargo_ids}
            response = self.session.delete(f"{API_BASE}/admin/cargo/bulk", json=bulk_delete_data, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    True,
                    f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ DELETE /api/admin/cargo/bulk. –ì—Ä—É–∑—ã: {test_cargo_numbers}. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            elif response.status_code == 404:
                # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π endpoint
                # –í–∞—Ä–∏–∞–Ω—Ç 2: POST /api/admin/cargo/bulk-delete
                response = self.session.post(f"{API_BASE}/admin/cargo/bulk-delete", json=bulk_delete_data, headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                        True,
                        f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ POST /api/admin/cargo/bulk-delete. –ì—Ä—É–∑—ã: {test_cargo_numbers}. –û—Ç–≤–µ—Ç: {data}"
                    )
                    return True
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                        False,
                        f"–û–±–∞ endpoint'–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. DELETE /api/admin/cargo/bulk: 404, POST /api/admin/cargo/bulk-delete: {response.status_code}",
                        response.text
                    )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API",
                False,
                "",
                str(e)
            )
            return False

    def test_operator_bulk_deletion_from_list(self):
        """–¢–µ—Å—Ç 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            if len(self.operator_cargo) < 2:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                    False,
                    "",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º —Å–ø–∏—Å–∫–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º 2-3 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo_ids = []
            test_cargo_numbers = []
            
            for cargo in self.operator_cargo[1:4]:  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2-3 –≥—Ä—É–∑–∞
                cargo_id = cargo.get("id")
                cargo_number = cargo.get("cargo_number", "Unknown")
                if cargo_id:
                    test_cargo_ids.append(cargo_id)
                    test_cargo_numbers.append(cargo_number)
            
            if not test_cargo_ids:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                    False,
                    "",
                    "–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö ID –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: DELETE /api/operator/cargo/bulk (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞)
            bulk_delete_data = {"cargo_ids": test_cargo_ids}
            response = self.session.delete(f"{API_BASE}/operator/cargo/bulk", json=bulk_delete_data, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                    True,
                    f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ DELETE /api/operator/cargo/bulk. –ì—Ä—É–∑—ã: {test_cargo_numbers}. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            elif response.status_code == 404:
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –£–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–π endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                response = self.session.delete(f"{API_BASE}/operator/cargo/bulk-remove-from-placement", json=bulk_delete_data, headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                        True,
                        f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ DELETE /api/operator/cargo/bulk-remove-from-placement. –ì—Ä—É–∑—ã: {test_cargo_numbers}. –û—Ç–≤–µ—Ç: {data}"
                    )
                    return True
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                        False,
                        f"–û–±–∞ endpoint'–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. DELETE /api/operator/cargo/bulk: 404, DELETE /api/operator/cargo/bulk-remove-from-placement: {response.status_code}",
                        response.text
                    )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_identify_correct_endpoints(self):
        """–¢–µ—Å—Ç 10: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö endpoints –¥–ª—è "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
            admin_cargo_count = len(self.admin_cargo)
            operator_cargo_count = len(self.operator_cargo)
            placement_cargo_count = len(self.placement_cargo)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
            cargo_list_section = None
            cargo_list_endpoint = None
            deletion_endpoint = None
            
            if admin_cargo_count > placement_cargo_count:
                cargo_list_section = "admin"
                cargo_list_endpoint = "GET /api/admin/cargo"
                deletion_endpoint = "DELETE /api/admin/cargo/{id} –∏–ª–∏ DELETE /api/admin/cargo/bulk"
            elif operator_cargo_count > placement_cargo_count:
                cargo_list_section = "operator"
                cargo_list_endpoint = "GET /api/operator/cargo"
                deletion_endpoint = "DELETE /api/operator/cargo/{id} –∏–ª–∏ DELETE /api/operator/cargo/bulk"
            else:
                cargo_list_section = "unknown"
                cargo_list_endpoint = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                deletion_endpoint = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–∑—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            placement_numbers = set(cargo.get("cargo_number", "") for cargo in self.placement_cargo)
            admin_numbers = set(cargo.get("cargo_number", "") for cargo in self.admin_cargo)
            operator_numbers = set(cargo.get("cargo_number", "") for cargo in self.operator_cargo)
            
            admin_unique = admin_numbers - placement_numbers
            operator_unique = operator_numbers - placement_numbers
            
            analysis_details = f"""
–ê–ù–ê–õ–ò–ó –†–ê–ó–î–ï–õ–û–í –î–õ–Ø "–°–ü–ò–°–û–ö –ì–†–£–ó–û–í":

–ö–û–õ–ò–ß–ï–°–¢–í–û –ì–†–£–ó–û–í:
- –†–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_cargo_count} –≥—Ä—É–∑–æ–≤
- –ê–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫: {admin_cargo_count} –≥—Ä—É–∑–æ–≤
- –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Å–ø–∏—Å–æ–∫: {operator_cargo_count} –≥—Ä—É–∑–æ–≤

–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ì–†–£–ó–´ (–Ω–µ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏):
- –ê–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫: {len(admin_unique)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
- –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Å–ø–∏—Å–æ–∫: {len(operator_unique)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤

–í–ï–†–û–Ø–¢–ù–´–ô –†–ê–ó–î–ï–õ "–°–ü–ò–°–û–ö –ì–†–£–ó–û–í":
- –†–∞–∑–¥–µ–ª: {cargo_list_section}
- Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {cargo_list_endpoint}
- Endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {deletion_endpoint}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
1. –ï—Å–ª–∏ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" = –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DELETE /api/admin/cargo/{{id}} –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
2. –ï—Å–ª–∏ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" = –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DELETE /api/operator/cargo/{{id}} –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
3. –î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π bulk endpoint
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            """.strip()
            
            self.log_test(
                '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö endpoints –¥–ª—è "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"',
                True,
                analysis_details
            )
            return True
                
        except Exception as e:
            self.log_test(
                '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö endpoints –¥–ª—è "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"',
                False,
                "",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' –≤ TAJLINE.TJ")
        print("=" * 120)
        print()
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_admin_authorization,
            self.test_operator_authorization,
            self.test_analyze_placement_section,
            self.test_analyze_admin_cargo_list,
            self.test_analyze_operator_cargo_list,
            self.test_compare_cargo_sections,
            self.test_admin_single_deletion,
            self.test_admin_bulk_deletion,
            self.test_operator_bulk_deletion_from_list,
            self.test_identify_correct_endpoints
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            if test():
                passed_tests += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            import time
            time.sleep(1)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 120)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        if success_rate >= 80:
            print("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—Å—Å–æ–≤—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
            print("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ API endpoints –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'")
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤")
            print("‚úÖ –í—ã—è–≤–ª–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API endpoints –∏–ª–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        
        print()
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print("-" * 80)
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
            if result["error"]:
                print(f"   ‚ö†Ô∏è {result['error']}")
        
        return success_rate >= 80

if __name__ == "__main__":
    diagnoser = CargoListMassDeleteDiagnoser()
    success = diagnoser.run_all_tests()
    
    if success:
        print("\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—Å—Å–æ–≤—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –≤ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üîß –ù–∞–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")