#!/usr/bin/env python3
"""
üéØ COMPREHENSIVE QR CODE TESTING: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π QR-–∫–æ–¥–æ–≤ –≤ TAJLINE.TJ

–¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-tracker-33.preview.emergentagent.com/api"

def test_comprehensive_qr_workflow():
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
    """
    print("üéØ COMPREHENSIVE QR CODE TESTING: –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π QR-–∫–æ–¥–æ–≤ –≤ TAJLINE.TJ")
    print("=" * 100)
    
    # Step 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        login_response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            login_result = login_response.json()
            token = login_result.get("access_token")
            user_info = login_result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: '{user_info.get('full_name', 'Unknown')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'Unknown')}, —Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Step 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º—ã
    print("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –§–û–†–ú–´")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        warehouses_response = requests.get(f"{BACKEND_URL}/operator/warehouses", headers=headers)
        print(f"   üì° GET /api/operator/warehouses - Status: {warehouses_response.status_code}")
        
        if warehouses_response.status_code == 200:
            warehouses = warehouses_response.json()
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {len(warehouses)}")
            if warehouses:
                warehouse = warehouses[0]
                print(f"   üè¢ –°–∫–ª–∞–¥: {warehouse.get('name', 'Unknown')} (ID: {warehouse.get('id', 'Unknown')})")
            else:
                print("   ‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {warehouses_response.status_code}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        cities_response = requests.get(f"{BACKEND_URL}/warehouses/all-cities", headers=headers)
        print(f"   üì° GET /api/warehouses/all-cities - Status: {cities_response.status_code}")
        
        if cities_response.status_code == 200:
            cities = cities_response.json()
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(cities)}")
        else:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤: {cities_response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # Step 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å cargo_items
    print("\n3Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - POST /api/operator/cargo/accept")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ review request
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR", 
        "recipient_phone": "+992900111222",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è QR, 123",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55\"",
                "quantity": 2,  # –ü–µ—Ä–≤—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 2
                "weight": 15.0,
                "price_per_kg": 100.0,
                "total_amount": 3000.0  # 2 * 15.0 * 100.0
            },
            {
                "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG", 
                "quantity": 3,  # –í—Ç–æ—Ä–æ–π —Ç–∏–ø –≥—Ä—É–∑–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 3
                "weight": 8.0,
                "price_per_kg": 80.0,
                "total_amount": 1920.0  # 3 * 8.0 * 80.0
            }
        ]
    }
    
    print(f"   üì¶ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"      –ì—Ä—É–∑ ‚Ññ1: {cargo_data['cargo_items'][0]['cargo_name']} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cargo_data['cargo_items'][0]['quantity']})")
    print(f"      –ì—Ä—É–∑ ‚Ññ2: {cargo_data['cargo_items'][1]['cargo_name']} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cargo_data['cargo_items'][1]['quantity']})")
    total_units = cargo_data['cargo_items'][0]['quantity'] + cargo_data['cargo_items'][1]['quantity']
    print(f"      üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {total_units} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {total_units} QR-–∫–æ–¥–æ–≤)")
    
    try:
        cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
        
        if cargo_response.status_code == 200:
            cargo_result = cargo_response.json()
            cargo_number = cargo_result.get("cargo_number")
            cargo_id = cargo_result.get("id")
            
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (cargo_number): {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
            print(f"\n   üìÑ –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê API:")
            print(f"      –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(cargo_result.keys())}")
            
            if "cargo_items" in cargo_result:
                print(f"      ‚úÖ cargo_items –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
                cargo_items = cargo_result["cargo_items"]
                for i, item in enumerate(cargo_items, 1):
                    print(f"         –ì—Ä—É–∑ #{i}: {item}")
            else:
                print(f"      ‚ùå cargo_items –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –≤ –æ—Ç–≤–µ—Ç–µ API")
                print(f"      ‚ö†Ô∏è –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ CargoWithLocation –º–æ–¥–µ–ª—å –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç cargo_items")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º QR –∫–æ–¥
            if "qr_code" in cargo_result:
                qr_code = cargo_result["qr_code"]
                print(f"      ‚úÖ QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(qr_code)} —Å–∏–º–≤–æ–ª–æ–≤")
                if qr_code.startswith("data:image/png;base64,"):
                    print(f"      ‚úÖ QR –∫–æ–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ base64")
                else:
                    print(f"      ‚ùå QR –∫–æ–¥ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            else:
                print(f"      ‚ùå QR –∫–æ–¥ –ù–ï —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {cargo_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False
    
    # Step 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cargo_items –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print(f"\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø CARGO_ITEMS –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints
    endpoints_to_check = [
        ("/operator/pickup-requests", "pickup requests"),
        ("/admin/cargo/all", "all cargo (admin)"),
        ("/cargo/all", "all cargo (public)"),
    ]
    
    cargo_found_in_db = False
    for endpoint, description in endpoints_to_check:
        try:
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {endpoint} ({description})")
            response = requests.get(f"{BACKEND_URL}{endpoint}", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                print(f"      ‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data) if isinstance(data, list) else 'dict'}")
                
                # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É
                items_to_search = []
                if isinstance(data, list):
                    items_to_search = data
                elif isinstance(data, dict) and "items" in data:
                    items_to_search = data["items"]
                elif isinstance(data, dict) and "data" in data:
                    items_to_search = data["data"]
                
                for item in items_to_search:
                    item_number = item.get("cargo_number") or item.get("request_number")
                    if item_number == cargo_number:
                        print(f"      üéâ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                        print(f"         –ù–æ–º–µ—Ä: {item_number}")
                        print(f"         –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {item.get('sender_full_name', 'Unknown')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_items
                        if "cargo_items" in item and item["cargo_items"]:
                            cargo_items = item["cargo_items"]
                            print(f"         ‚úÖ cargo_items —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ({len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                            
                            for i, db_item in enumerate(cargo_items, 1):
                                print(f"            –ì—Ä—É–∑ #{i}: {db_item.get('cargo_name', 'Unknown')}")
                                print(f"               quantity: {db_item.get('quantity', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                                print(f"               total_amount: {db_item.get('total_amount', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                                print(f"               weight: {db_item.get('weight', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                                print(f"               price_per_kg: {db_item.get('price_per_kg', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                        else:
                            print(f"         ‚ùå cargo_items –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                        
                        cargo_found_in_db = True
                        break
                
                if not cargo_found_in_db:
                    print(f"      ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ {endpoint}")
            else:
                print(f"      ‚ö†Ô∏è Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {endpoint}: {e}")
    
    # Step 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ cargo_number –¥–ª—è QR-–∫–æ–¥–æ–≤
    print(f"\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò CARGO_NUMBER –î–õ–Ø QR-–ö–û–î–û–í")
    
    if cargo_number:
        print(f"   ‚úÖ –ë–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {cargo_number}")
        print(f"   üè∑Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR-–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞:")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ review request
        expected_qr_codes = []
        
        # –ì—Ä—É–∑ ‚Ññ1: 2 –µ–¥–∏–Ω–∏—Ü—ã
        for unit in range(1, 3):  # 1, 2
            qr_id = f"{cargo_number}/01/{unit}"
            expected_qr_codes.append(qr_id)
            print(f"      - {qr_id} (–ì—Ä—É–∑ ‚Ññ1, –µ–¥–∏–Ω–∏—Ü–∞ {unit})")
        
        # –ì—Ä—É–∑ ‚Ññ2: 3 –µ–¥–∏–Ω–∏—Ü—ã
        for unit in range(1, 4):  # 1, 2, 3
            qr_id = f"{cargo_number}/02/{unit}"
            expected_qr_codes.append(qr_id)
            print(f"      - {qr_id} (–ì—Ä—É–∑ ‚Ññ2, –µ–¥–∏–Ω–∏—Ü–∞ {unit})")
        
        print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–æ–≤: {len(expected_qr_codes)}")
        print(f"   ‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {len(expected_qr_codes)} QR-–∫–æ–¥–æ–≤")
        
        return True
    else:
        print(f"   ‚ùå cargo_number –ù–ï —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥—ã")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    
    success = test_comprehensive_qr_workflow()
    
    print("\n" + "=" * 100)
    if success:
        print("üéâ COMPREHENSIVE QR CODE TESTING –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ API endpoint POST /api/operator/cargo/accept —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("‚úÖ Backend –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç cargo_number –¥–ª—è QR-–∫–æ–¥–æ–≤")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞")
        print()
        print("üîç –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        print("‚ö†Ô∏è CargoWithLocation –º–æ–¥–µ–ª—å –ù–ï –≤–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–µ cargo_items –≤ –æ—Ç–≤–µ—Ç–µ API")
        print("‚ö†Ô∏è Frontend –º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ quantity –∏ total_amount")
        print("‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π QR-–∫–æ–¥–æ–≤")
        print()
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ cargo_items –≤ CargoWithLocation –º–æ–¥–µ–ª—å")
        print("2. –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cargo_items")
        print("3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ frontend –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ quantity –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞")
    else:
        print("‚ùå COMPREHENSIVE QR CODE TESTING –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)