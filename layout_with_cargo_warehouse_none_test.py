#!/usr/bin/env python3
"""
–û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API layout-with-cargo –° –ü–û–î–î–ï–†–ñ–ö–û–ô warehouse_id=None
===============================================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ placement_records (4 –µ–¥–∏–Ω–∏—Ü—ã)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo —Å warehouse_id=None (7+ –µ–¥–∏–Ω–∏—Ü USR648425)  
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= 11 –µ–¥–∏–Ω–∏—Ü
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425:
   - –î–∞–Ω–Ω—ã–µ "–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á" –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
   - –ó–∞—è–≤–∫–∞ 25082298 —Å 7 –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞
4. –ö–∞—á–µ—Å—Ç–≤–æ cargo_info: –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å warehouse_id=None
- –î–ª—è —Å–∫–ª–∞–¥–∞ 001 –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å warehouse_id=None  
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É USR648425
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º 11 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≤–∫–ª—é—á–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE_ID = "001"  # –°–∫–ª–∞–¥ 001
TARGET_OPERATOR = "USR648425"  # –û–ø–µ—Ä–∞—Ç–æ—Ä –Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á
TARGET_APPLICATION = "25082298"  # –ó–∞—è–≤–∫–∞ —Å 7 –µ–¥–∏–Ω–∏—Ü–∞–º–∏
EXPECTED_OPERATOR_NAME = "–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á"
MINIMUM_EXPECTED_UNITS = 11  # –ú–∏–Ω–∏–º—É–º –æ–∂–∏–¥–∞–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü

class LayoutWithCargoWarehouseNoneTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "api_accessible": False,
            "placement_records_found": False,
            "operator_cargo_found": False,
            "usr648425_data_found": False,
            "application_25082298_found": False,
            "minimum_units_found": False,
            "cargo_info_quality": False,
            "total_units_found": 0,
            "placement_records_count": 0,
            "operator_cargo_count": 0,
            "usr648425_units": [],
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001"""
        self.log(f"üìã –ó–∞–ø—Ä–æ—Å –∫ /api/operator/warehouse/{TARGET_WAREHOUSE_ID}/layout-with-cargo...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º ID —Å–∫–ª–∞–¥–∞ 001
            warehouses_response = self.session.get(f"{API_BASE}/operator/warehouses")
            if warehouses_response.status_code != 200:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤: {warehouses_response.status_code}", "ERROR")
                return None
            
            warehouses = warehouses_response.json()
            warehouse_001 = None
            
            for warehouse in warehouses:
                if warehouse.get("warehouse_id_number") == TARGET_WAREHOUSE_ID:
                    warehouse_001 = warehouse
                    break
            
            if not warehouse_001:
                self.log(f"‚ùå –°–∫–ª–∞–¥ {TARGET_WAREHOUSE_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                return None
            
            warehouse_id = warehouse_001.get("id")
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ {TARGET_WAREHOUSE_ID}: {warehouse_001.get('name')} (ID: {warehouse_id})")
            
            # –ó–∞–ø—Ä–æ—Å –∫ layout-with-cargo API
            response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/layout-with-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["api_accessible"] = True
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö layout-with-cargo: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ layout-with-cargo: {e}", "ERROR")
            return None
    
    def analyze_layout_data(self, layout_data):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö layout-with-cargo"""
        self.log("\nüîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• LAYOUT-WITH-CARGO:")
        self.log("=" * 80)
        
        if not layout_data:
            self.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", "ERROR")
            return False
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(layout_data)}")
        
        if isinstance(layout_data, dict):
            self.log(f"üîë –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(layout_data.keys())}")
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö
            placed_units = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if "blocks" in layout_data:
                blocks = layout_data["blocks"]
                self.log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤: {len(blocks)}")
                
                for block in blocks:
                    if "shelves" in block:
                        for shelf in block["shelves"]:
                            if "cells" in shelf:
                                for cell in shelf["cells"]:
                                    if cell.get("is_occupied") and "cargo_info" in cell:
                                        placed_units.append(cell["cargo_info"])
            
            elif "cells" in layout_data:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫
                cells = layout_data["cells"]
                self.log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: {len(cells)}")
                
                for cell in cells:
                    if cell.get("is_occupied") and "cargo_info" in cell:
                        placed_units.append(cell["cargo_info"])
            
            elif "placed_units" in layout_data:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
                placed_units = layout_data["placed_units"]
            
            elif isinstance(layout_data, list):
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                placed_units = layout_data
            
            self.log(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {len(placed_units)}")
            self.test_results["total_units_found"] = len(placed_units)
            
            return self.analyze_placed_units(placed_units)
        
        return False
    
    def analyze_placed_units(self, placed_units):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü"""
        self.log(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó {len(placed_units)} –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ï–î–ò–ù–ò–¶:")
        self.log("=" * 80)
        
        if len(placed_units) == 0:
            self.log("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ï–î–ò–ù–ò–¶!", "ERROR")
            return False
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        placement_records_units = []
        operator_cargo_units = []
        usr648425_units = []
        application_25082298_units = []
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã
        for i, unit in enumerate(placed_units):
            self.log(f"\nüì¶ –ï–î–ò–ù–ò–¶–ê #{i+1}:")
            self.log("-" * 50)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cargo_number = unit.get("cargo_number", "N/A")
            individual_number = unit.get("individual_number", "N/A")
            sender_name = unit.get("sender_name", "N/A")
            operator_id = unit.get("operator_id", "N/A")
            warehouse_id = unit.get("warehouse_id", "N/A")
            
            self.log(f"üìã –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {cargo_number}")
            self.log(f"üî¢ Individual number: {individual_number}")
            self.log(f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}")
            self.log(f"üè¢ –û–ø–µ—Ä–∞—Ç–æ—Ä ID: {operator_id}")
            self.log(f"üè≠ Warehouse ID: {warehouse_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            if warehouse_id and warehouse_id != "None" and warehouse_id != "null":
                placement_records_units.append(unit)
                self.log("üìç –ò—Å—Ç–æ—á–Ω–∏–∫: placement_records (warehouse_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
            else:
                operator_cargo_units.append(unit)
                self.log("üìç –ò—Å—Ç–æ—á–Ω–∏–∫: operator_cargo (warehouse_id=None)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
            if operator_id == TARGET_OPERATOR or EXPECTED_OPERATOR_NAME in sender_name:
                usr648425_units.append(unit)
                self.log(f"‚úÖ –ù–ê–ô–î–ï–ù –û–ü–ï–†–ê–¢–û–† {TARGET_OPERATOR}!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É 25082298
            if cargo_number == TARGET_APPLICATION:
                application_25082298_units.append(unit)
                self.log(f"‚úÖ –ù–ê–ô–î–ï–ù–ê –ó–ê–Ø–í–ö–ê {TARGET_APPLICATION}!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ cargo_info
            required_fields = ["cargo_number", "individual_number", "sender_name"]
            missing_fields = [field for field in required_fields if not unit.get(field)]
            
            if missing_fields:
                self.log(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}", "WARNING")
            else:
                self.log("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.test_results["placement_records_count"] = len(placement_records_units)
        self.test_results["operator_cargo_count"] = len(operator_cargo_units)
        self.test_results["usr648425_units"] = usr648425_units
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        self.test_results["placement_records_found"] = len(placement_records_units) >= 4
        self.test_results["operator_cargo_found"] = len(operator_cargo_units) >= 7
        self.test_results["usr648425_data_found"] = len(usr648425_units) > 0
        self.test_results["application_25082298_found"] = len(application_25082298_units) > 0
        self.test_results["minimum_units_found"] = len(placed_units) >= MINIMUM_EXPECTED_UNITS
        self.test_results["cargo_info_quality"] = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–µ–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        self.log(f"  üìç –ï–¥–∏–Ω–∏—Ü—ã –∏–∑ placement_records: {len(placement_records_units)}")
        self.log(f"  üìç –ï–¥–∏–Ω–∏—Ü—ã –∏–∑ operator_cargo (warehouse_id=None): {len(operator_cargo_units)}")
        self.log(f"  üë§ –ï–¥–∏–Ω–∏—Ü—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}: {len(usr648425_units)}")
        self.log(f"  üìã –ï–¥–∏–Ω–∏—Ü—ã –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}: {len(application_25082298_units)}")
        self.log(f"  üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(placed_units)}")
        
        return True
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –° –ü–û–î–î–ï–†–ñ–ö–û–ô warehouse_id=None")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üè≠ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥: {TARGET_WAREHOUSE_ID}")
        self.log(f"üë§ –¶–µ–ª–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {TARGET_OPERATOR}")
        self.log(f"üìã –¶–µ–ª–µ–≤–∞—è –∑–∞—è–≤–∫–∞: {TARGET_APPLICATION}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API layout-with-cargo: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ placement_records (‚â•4): {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['placement_records_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        self.log(f"  4. ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo (‚â•7): {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['operator_cargo_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        self.log(f"  5. ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}: {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['usr648425_data_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        self.log(f"  6. ‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION}: {'‚úÖ –ù–ê–ô–î–ï–ù–ê' if self.test_results['application_25082298_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}")
        self.log(f"  7. ‚úÖ –ú–∏–Ω–∏–º—É–º {MINIMUM_EXPECTED_UNITS} –µ–¥–∏–Ω–∏—Ü: {'‚úÖ –ù–ê–ô–î–ï–ù–û' if self.test_results['minimum_units_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û'}")
        self.log(f"  8. ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ cargo_info: {'‚úÖ –•–û–†–û–®–ï–ï' if self.test_results['cargo_info_quality'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        self.log(f"  üìç –ï–¥–∏–Ω–∏—Ü—ã –∏–∑ placement_records: {self.test_results['placement_records_count']}")
        self.log(f"  üìç –ï–¥–∏–Ω–∏—Ü—ã –∏–∑ operator_cargo: {self.test_results['operator_cargo_count']}")
        self.log(f"  üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {self.test_results['total_units_found']}")
        self.log(f"  üë§ –ï–¥–∏–Ω–∏—Ü—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}: {len(self.test_results['usr648425_units'])}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ USR648425
        if self.test_results['usr648425_units']:
            self.log(f"\nüë§ –î–ï–¢–ê–õ–ò –û–ü–ï–†–ê–¢–û–†–ê {TARGET_OPERATOR}:")
            for i, unit in enumerate(self.test_results['usr648425_units']):
                cargo_number = unit.get("cargo_number", "N/A")
                sender_name = unit.get("sender_name", "N/A")
                individual_number = unit.get("individual_number", "N/A")
                self.log(f"  {i+1}. –ó–∞—è–≤–∫–∞: {cargo_number}, –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}, Individual: {individual_number}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        
        all_checks_passed = (
            self.test_results["auth_success"] and
            self.test_results["api_accessible"] and
            self.test_results["placement_records_found"] and
            self.test_results["operator_cargo_found"] and
            self.test_results["usr648425_data_found"] and
            self.test_results["application_25082298_found"] and
            self.test_results["minimum_units_found"] and
            self.test_results["cargo_info_quality"]
        )
        
        if all_checks_passed:
            self.log("‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            self.log("üéâ API layout-with-cargo –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç warehouse_id=None")
            self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ {self.test_results['total_units_found']} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (‚â•{MINIMUM_EXPECTED_UNITS})")
            self.log(f"üë§ –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            self.log(f"üìã –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞")
            self.log("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            failed_checks = []
            if not self.test_results["auth_success"]: failed_checks.append("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            if not self.test_results["api_accessible"]: failed_checks.append("–î–æ—Å—Ç—É–ø –∫ API")
            if not self.test_results["placement_records_found"]: failed_checks.append("–î–∞–Ω–Ω—ã–µ placement_records")
            if not self.test_results["operator_cargo_found"]: failed_checks.append("–î–∞–Ω–Ω—ã–µ operator_cargo")
            if not self.test_results["usr648425_data_found"]: failed_checks.append(f"–î–∞–Ω–Ω—ã–µ {TARGET_OPERATOR}")
            if not self.test_results["application_25082298_found"]: failed_checks.append(f"–ó–∞—è–≤–∫–∞ {TARGET_APPLICATION}")
            if not self.test_results["minimum_units_found"]: failed_checks.append(f"–ú–∏–Ω–∏–º—É–º {MINIMUM_EXPECTED_UNITS} –µ–¥–∏–Ω–∏—Ü")
            if not self.test_results["cargo_info_quality"]: failed_checks.append("–ö–∞—á–µ—Å—Ç–≤–æ cargo_info")
            
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–í–ï–†–ö–ê–•!")
            self.log(f"üîç –ù–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {', '.join(failed_checks)}")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API")
        
        return all_checks_passed
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API layout-with-cargo"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API layout-with-cargo")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
        layout_data = self.test_layout_with_cargo_api()
        if not layout_data:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API", "ERROR")
            return False
        
        # 3. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if not self.analyze_layout_data(layout_data):
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "ERROR")
            return False
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LayoutWithCargoWarehouseNoneTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ API layout-with-cargo –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç warehouse_id=None")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {tester.test_results['total_units_found']} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
            print(f"üë§ –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print(f"üìã –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞")
            print("üîß –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ API layout-with-cargo")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ warehouse_id=None")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()