#!/usr/bin/env python3
"""
üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ì—Ä—É–∑—ã" ‚Üí –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è "–ù–∞ –∑–∞–±–æ—Ä" –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

–ü–û–î–û–ó–†–ï–ù–ò–Ø:
1. Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∑–∞—è–≤–∫–∏ –Ω–∞ backend
2. Backend endpoint —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–∏—Å–∫–∞ (id vs request_id vs request_number)
4. –ó–∞—è–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ courier_pickup_requests, –Ω–æ endpoint –∏—â–µ—Ç –≤ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏

–ù–£–ñ–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º –Ω–∞ –∑–∞–±–æ—Ä
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ GET /api/admin/courier/pickup-requests
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–∫–∞–∫–∏–µ –ø–æ–ª—è ID –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)  
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π DELETE endpoint
5. –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π: id, request_id, request_number, pickup_request_id
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è pickup requests

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä.
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class PickupDeletionDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        self.test_results = []
        self.pickup_requests = []
        
    def log_result(self, test_name: str, success: bool, details: str, data=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = f"{status} {test_name}: {details}"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "data": data,
            "timestamp": datetime.now().isoformat()
        })
        print(result)
        if data and isinstance(data, dict) and len(str(data)) < 500:
            print(f"   üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False, indent=2)}")
        print()
        
    def authenticate_admin(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º –Ω–∞ –∑–∞–±–æ—Ä"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_credentials = [
                ("+79999888777", "admin123", "–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"),
                ("admin@emergent.com", "admin123", "Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"),
                ("+79888777666", "admin123", "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            ]
            
            for phone, password, description in admin_credentials:
                login_data = {
                    "phone": phone,
                    "password": password
                }
                
                response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
                
                if response.status_code == 200:
                    data = response.json()
                    self.auth_token = data.get("access_token")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.auth_token}",
                        "Content-Type": "application/json"
                    })
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_response = self.session.get(f"{API_BASE}/auth/me")
                    if user_response.status_code == 200:
                        self.current_user = user_response.json()
                        
                        user_info = f"'{self.current_user.get('full_name')}' (–Ω–æ–º–µ—Ä: {self.current_user.get('user_number')}, —Ä–æ–ª—å: {self.current_user.get('role')})"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        if self.current_user.get('role') == 'admin':
                            self.log_result(
                                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                                True,
                                f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {description}: {user_info}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω",
                                {"phone": phone, "role": self.current_user.get('role')}
                            )
                            return True
                        else:
                            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {description} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ä–æ–ª—å: {self.current_user.get('role')})")
                    else:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {description}: HTTP {user_response.status_code}")
                else:
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {description} –Ω–µ—É–¥–∞—á–Ω–∞: HTTP {response.status_code}")
            
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                False,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∏ —Å –æ–¥–Ω–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
            )
            return False
                
        except Exception as e:
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return False
    
    def get_pickup_requests_list(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
            endpoints_to_try = [
                "/api/admin/courier/pickup-requests",
                "/api/admin/pickup-requests", 
                "/api/courier/pickup-requests",
                "/api/admin/courier-requests",
                "/api/admin/requests/pickup",
                "/api/operator/pickup-requests"
            ]
            
            successful_endpoint = None
            pickup_requests = []
            
            for endpoint in endpoints_to_try:
                try:
                    response = self.session.get(f"{BACKEND_URL}{endpoint}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                        if isinstance(data, list):
                            pickup_requests = data
                        elif isinstance(data, dict):
                            pickup_requests = data.get('items', data.get('requests', data.get('pickup_requests', [])))
                        
                        if pickup_requests:
                            successful_endpoint = endpoint
                            self.pickup_requests = pickup_requests
                            break
                        else:
                            print(f"Endpoint {endpoint} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                    else:
                        print(f"Endpoint {endpoint}: HTTP {response.status_code}")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {endpoint}: {str(e)}")
            
            if successful_endpoint:
                total_requests = len(pickup_requests)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
                status_counts = {}
                for request in pickup_requests:
                    status = request.get('status', 'unknown')
                    status_counts[status] = status_counts.get(status, 0) + 1
                
                self.log_result(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                    True,
                    f"Endpoint {successful_endpoint} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ {total_requests} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä. –°—Ç–∞—Ç—É—Å—ã: {status_counts}",
                    {
                        "endpoint": successful_endpoint,
                        "total_requests": total_requests,
                        "status_counts": status_counts,
                        "sample_request": pickup_requests[0] if pickup_requests else None
                    }
                )
                return True
            else:
                self.log_result(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                    False,
                    f"–ù–∏ –æ–¥–∏–Ω –∏–∑ endpoints –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ endpoints: {', '.join(endpoints_to_try)}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {str(e)}"
            )
            return False
    
    def analyze_pickup_request_structure(self):
        """–¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        try:
            if not self.pickup_requests:
                self.log_result(
                    "–ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                    True,
                    "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"
                )
                return True
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è ID –≤ –∑–∞—è–≤–∫–∞—Ö
            id_fields_analysis = {
                'id': 0,
                'request_id': 0,
                'request_number': 0,
                'pickup_request_id': 0,
                'courier_request_id': 0
            }
            
            sample_request = self.pickup_requests[0]
            all_keys = list(sample_request.keys())
            
            for request in self.pickup_requests:
                for field in id_fields_analysis.keys():
                    if field in request and request[field]:
                        id_fields_analysis[field] += 1
            
            total_requests = len(self.pickup_requests)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            primary_id_candidates = []
            for field, count in id_fields_analysis.items():
                if count == total_requests:  # –ü–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –∑–∞—è–≤–∫–∞—Ö
                    primary_id_candidates.append(field)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è ID –ø–æ–ª–µ–π –≤ –æ–±—Ä–∞–∑—Ü–µ
            sample_id_values = {}
            for field in id_fields_analysis.keys():
                if field in sample_request:
                    sample_id_values[field] = sample_request[field]
            
            analysis_details = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_requests} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä. "
                f"–ü–æ–ª—è ID: {id_fields_analysis}. "
                f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏: {primary_id_candidates}. "
                f"–í—Å–µ –ø–æ–ª—è –≤ –æ–±—Ä–∞–∑—Ü–µ: {len(all_keys)} –ø–æ–ª–µ–π"
            )
            
            self.log_result(
                "–ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                True,
                analysis_details,
                {
                    "total_requests": total_requests,
                    "id_fields_analysis": id_fields_analysis,
                    "primary_id_candidates": primary_id_candidates,
                    "sample_id_values": sample_id_values,
                    "all_fields": all_keys,
                    "sample_request": sample_request
                }
            )
            return True
            
        except Exception as e:
            self.log_result(
                "–ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}"
            )
            return False
    
    def test_deletion_endpoints(self):
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        try:
            if not self.pickup_requests:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –£–î–ê–õ–ï–ù–ò–Ø",
                    True,
                    "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return True
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_request = self.pickup_requests[0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            possible_ids = {}
            id_fields = ['id', 'request_id', 'request_number', 'pickup_request_id', 'courier_request_id']
            
            for field in id_fields:
                if field in test_request and test_request[field]:
                    possible_ids[field] = test_request[field]
            
            if not possible_ids:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –£–î–ê–õ–ï–ù–ò–Ø",
                    False,
                    "–í —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            deletion_endpoints = [
                "/api/admin/courier/pickup-requests/{id}",
                "/api/admin/pickup-requests/{id}",
                "/api/admin/courier-requests/{id}",
                "/api/admin/requests/pickup/{id}",
                "/api/courier/pickup-requests/{id}"
            ]
            
            deletion_results = []
            
            for endpoint_template in deletion_endpoints:
                for id_field, id_value in possible_ids.items():
                    endpoint = endpoint_template.format(id=id_value)
                    
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ endpoint —á–µ—Ä–µ–∑ HEAD –∑–∞–ø—Ä–æ—Å
                        head_response = self.session.head(f"{BACKEND_URL}{endpoint}")
                        
                        if head_response.status_code == 404:
                            deletion_results.append({
                                "endpoint": endpoint,
                                "id_field": id_field,
                                "id_value": id_value,
                                "status": "endpoint_not_found",
                                "details": "Endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                            })
                            continue
                        
                        # –ï—Å–ª–∏ endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º DELETE –∑–∞–ø—Ä–æ—Å
                        delete_response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                        
                        deletion_results.append({
                            "endpoint": endpoint,
                            "id_field": id_field,
                            "id_value": id_value,
                            "status_code": delete_response.status_code,
                            "response": delete_response.text[:200],
                            "status": "tested"
                        })
                        
                        if delete_response.status_code == 200:
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {endpoint} —Å {id_field}={id_value}")
                        elif delete_response.status_code == 404:
                            print(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {endpoint} —Å {id_field}={id_value}")
                        else:
                            print(f"‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {endpoint} —Å {id_field}={id_value} - HTTP {delete_response.status_code}")
                            
                    except Exception as e:
                        deletion_results.append({
                            "endpoint": endpoint,
                            "id_field": id_field,
                            "id_value": id_value,
                            "status": "error",
                            "details": str(e)
                        })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_deletions = [r for r in deletion_results if r.get('status_code') == 200]
            not_found_errors = [r for r in deletion_results if r.get('status_code') == 404]
            endpoint_not_found = [r for r in deletion_results if r.get('status') == 'endpoint_not_found']
            
            analysis = (
                f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(deletion_results)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π endpoint/ID. "
                f"–£—Å–ø–µ—à–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏–π: {len(successful_deletions)}, "
                f"–û—à–∏–±–æ–∫ '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ': {len(not_found_errors)}, "
                f"–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints: {len(endpoint_not_found)}"
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
            test_success = len(successful_deletions) > 0 or len(not_found_errors) > 0  # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω endpoint –æ—Ç–≤–µ—á–∞–µ—Ç
            
            self.log_result(
                "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –£–î–ê–õ–ï–ù–ò–Ø",
                test_success,
                analysis,
                {
                    "test_request_ids": possible_ids,
                    "deletion_results": deletion_results,
                    "successful_deletions": len(successful_deletions),
                    "not_found_errors": len(not_found_errors),
                    "endpoint_not_found": len(endpoint_not_found)
                }
            )
            return test_success
            
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –£–î–ê–õ–ï–ù–ò–Ø",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"
            )
            return False
    
    def diagnose_root_cause(self):
        """–¢–µ—Å—Ç 5: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" """
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
            diagnosis = {
                "has_pickup_requests": len(self.pickup_requests) > 0,
                "pickup_requests_count": len(self.pickup_requests),
                "authentication_working": self.current_user is not None,
                "user_role": self.current_user.get('role') if self.current_user else None
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ID –ø–æ–ª–µ–π
            if self.pickup_requests:
                sample_request = self.pickup_requests[0]
                id_fields_present = []
                id_fields_missing = []
                
                expected_id_fields = ['id', 'request_id', 'request_number', 'pickup_request_id']
                for field in expected_id_fields:
                    if field in sample_request and sample_request[field]:
                        id_fields_present.append(field)
                    else:
                        id_fields_missing.append(field)
                
                diagnosis.update({
                    "id_fields_present": id_fields_present,
                    "id_fields_missing": id_fields_missing,
                    "sample_request_structure": list(sample_request.keys())
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ–∑
            root_cause_analysis = []
            
            if not diagnosis["has_pickup_requests"]:
                root_cause_analysis.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            if diagnosis["user_role"] != "admin":
                root_cause_analysis.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Ä–æ–ª—å: {diagnosis['user_role']})")
            
            if diagnosis.get("id_fields_missing"):
                root_cause_analysis.append(f"–í –∑–∞—è–≤–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è ID: {diagnosis['id_fields_missing']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
            deletion_test_results = [r for r in self.test_results if r["test"] == "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –£–î–ê–õ–ï–ù–ò–Ø"]
            if deletion_test_results and not deletion_test_results[0]["success"]:
                root_cause_analysis.append("Endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            if not root_cause_analysis:
                root_cause_analysis.append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ frontend –ª–æ–≥–∏–∫–µ")
            
            diagnosis_summary = f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏: {'; '.join(root_cause_analysis)}"
            
            self.log_result(
                "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´",
                True,
                diagnosis_summary,
                {
                    "diagnosis": diagnosis,
                    "root_cause_analysis": root_cause_analysis,
                    "recommendations": self.generate_recommendations(diagnosis, root_cause_analysis)
                }
            )
            return True
            
        except Exception as e:
            self.log_result(
                "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {str(e)}"
            )
            return False
    
    def generate_recommendations(self, diagnosis, root_cause_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã"""
        recommendations = []
        
        if "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä" in '; '.join(root_cause_analysis):
            recommendations.append("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        if "Endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç" in '; '.join(root_cause_analysis):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é DELETE endpoints –≤ backend –∫–æ–¥–µ")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ endpoints –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")
        
        if diagnosis.get("id_fields_missing"):
            recommendations.append(f"–î–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è ID –≤ –º–æ–¥–µ–ª—å –∑–∞—è–≤–æ–∫: {diagnosis['id_fields_missing']}")
        
        if "frontend –ª–æ–≥–∏–∫–µ" in '; '.join(root_cause_analysis):
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∏–µ ID –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç frontend –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ frontend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ backend –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
        recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫")
        
        return recommendations
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ TAJLINE.TJ")
        print("=" * 90)
        print()
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            return
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        self.get_pickup_requests_list()
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–æ–∫
        self.analyze_pickup_request_structure()
        
        # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints —É–¥–∞–ª–µ–Ω–∏—è
        self.test_deletion_endpoints()
        
        # –¢–µ—Å—Ç 5: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
        self.diagnose_root_cause()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_comprehensive_summary()
    
    def print_comprehensive_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("\n" + "=" * 90)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 90)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - successful_tests
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        for result in self.test_results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status} {result['test']}")
            print(f"   {result['details']}")
            print()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnosis_results = [r for r in self.test_results if r['test'] == "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´"]
        if diagnosis_results and diagnosis_results[0]['data']:
            recommendations = diagnosis_results[0]['data'].get('recommendations', [])
            root_causes = diagnosis_results[0]['data'].get('root_cause_analysis', [])
            
            print("üìã –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for cause in root_causes:
                print(f"   ‚Ä¢ {cause}")
            
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            for rec in recommendations:
                print(f"   ‚Ä¢ {rec}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        if self.pickup_requests:
            print(f"\n‚úÖ –í —Å–∏—Å—Ç–µ–º–µ –Ω–∞–π–¥–µ–Ω–æ {len(self.pickup_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        else:
            print("\n‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if self.current_user and self.current_user.get('role') == 'admin':
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        print("\n" + "=" * 90)
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 90)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnostic = PickupDeletionDiagnostic()
    diagnostic.run_comprehensive_diagnosis()

if __name__ == "__main__":
    main()