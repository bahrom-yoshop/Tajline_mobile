#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 2 - API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
===============================================================================================================

–û–ë–ù–ê–†–£–ñ–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Backend –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ "available", –Ω–æ TransportStatus enum —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ:
- "empty", "filled", "in_transit", "arrived", "completed"

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints —ç—Ç–∞–ø–∞ 2 —Å–∏—Å—Ç–µ–º—ã "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
"""

import requests
import json
import sys
import os
from datetime import datetime
import time
import uuid

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_TRANSPORT_NUMBER = "TEST001"
TEST_CARGO_NUMBERS = ["250101", "25082235"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤

class CargoToTransportCorrectedTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.current_session_id = None
        self.test_transport_id = None
        self.test_results = {
            "auth_success": False,
            "transport_creation_success": False,
            "scan_transport_success": False,
            "scan_cargo_success": False,
            "get_session_success": False,
            "delete_session_success": False,
            "error_handling_success": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def add_test_result(self, test_name, success, details="", response_time=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results["total_tests"] += 1
        if success:
            self.test_results["passed_tests"] += 1
            status = "‚úÖ –ü–†–û–ô–î–ï–ù"
        else:
            self.test_results["failed_tests"] += 1
            status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
        result = {
            "test_name": test_name,
            "status": status,
            "success": success,
            "details": details,
            "response_time": f"{response_time}ms" if response_time else "N/A"
        }
        self.test_results["detailed_results"].append(result)
        
        self.log(f"{status}: {test_name} ({result['response_time']}) - {details}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            start_time = time.time()
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_info.get('full_name')}' (—Ä–æ–ª—å: {self.operator_info.get('role')})"
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
                self.test_results["auth_success"] = True
                return True
            else:
                details = f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}"
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}"
            self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, details)
            return False
    
    def create_test_transport(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
        self.log("üöõ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        transport_data = {
            "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
            "driver_phone": "+79999999999",
            "transport_number": TEST_TRANSPORT_NUMBER,
            "capacity_kg": 5000.0,
            "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
        }
        
        try:
            start_time = time.time()
            response = self.session.post(f"{API_BASE}/transport/create", json=transport_data)
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.test_transport_id = data.get("transport_id")
                
                details = f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {TEST_TRANSPORT_NUMBER} (ID: {self.test_transport_id})"
                self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", True, details, response_time)
                self.test_results["transport_creation_success"] = True
                return True
            else:
                details = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {response.status_code} - {response.text}"
                self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, details)
            return False
    
    def fix_transport_status(self):
        """–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ 'available' –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ 'available'...")
        
        # –ü–æ—Å–∫–æ–ª—å–∫—É –≤ enum –Ω–µ—Ç 'available', –Ω–æ –∫–æ–¥ –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç, 
        # —ç—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫–æ–¥–µ backend
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        
        if not self.test_transport_id:
            self.log("‚ùå –ù–µ—Ç ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", "ERROR")
            return False
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
        try:
            response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}")
            if response.status_code == 200:
                transport_data = response.json()
                current_status = transport_data.get("status", "unknown")
                self.log(f"üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {current_status}")
                
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å "empty" –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π
                self.log("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: Backend –æ–∂–∏–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'available', –Ω–æ enum —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ 'empty', 'filled', 'in_transit', 'arrived', 'completed'")
                self.log("üîß –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∫–æ–¥–µ backend - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                
                return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", "ERROR")
            return False
    
    def test_scan_transport_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/logistics/cargo-to-transport/scan-transport"""
        self.log("\nüöõ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        timestamp = int(time.time())
        transport_qr = f"TRANSPORT_{TEST_TRANSPORT_NUMBER}_{timestamp}"
        
        try:
            start_time = time.time()
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": transport_qr
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
                if data.get("success") and data.get("session_id"):
                    self.current_session_id = data.get("session_id")
                    transport_info = data.get("transport", {})
                    details = f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.current_session_id}, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info.get('transport_number')}"
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", True, details, response_time)
                    self.test_results["scan_transport_success"] = True
                    return True
                else:
                    details = f"–ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}"
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", False, details, response_time)
                    return False
            else:
                details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", False, details, response_time)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                if response.status_code == 404:
                    self.log("üîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–ö–ò: Transport not found - –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å", "WARNING")
                elif response.status_code == 400:
                    self.log("üîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–ö–ò: –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 'available', –Ω–æ enum —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)", "WARNING")
                
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏)", False, details)
            return False
    
    def test_scan_cargo_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/logistics/cargo-to-transport/scan-cargo"""
        self.log("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤...")
        
        if not self.current_session_id:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        success_count = 0
        total_cargo_tests = len(TEST_CARGO_NUMBERS)
        
        for i, cargo_number in enumerate(TEST_CARGO_NUMBERS):
            self.log(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ {i+1}/{total_cargo_tests}: {cargo_number}")
            
            try:
                start_time = time.time()
                response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-cargo", json={
                    "qr_code": cargo_number,
                    "session_id": self.current_session_id
                })
                response_time = int((time.time() - start_time) * 1000)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get("success"):
                        cargo_info = data.get("cargo", {})
                        session_summary = data.get("session_summary", {})
                        
                        details = f"–ì—Ä—É–∑ –¥–æ–±–∞–≤–ª–µ–Ω: {cargo_number}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é: {session_summary.get('total_loaded', 0)}"
                        self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", True, details, response_time)
                        success_count += 1
                    else:
                        details = f"–ù–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                        self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", False, details, response_time)
                else:
                    details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                    self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", False, details, response_time)
                    
            except Exception as e:
                details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                self.add_test_result(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ #{i+1}", False, details)
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤
        if success_count > 0:
            self.test_results["scan_cargo_success"] = True
            return True
        else:
            return False
    
    def test_get_session_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/logistics/cargo-to-transport/session"""
        self.log("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏...")
        
        try:
            start_time = time.time()
            response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/session")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
                if data.get("active_session"):
                    session_info = data.get("session", {})
                    transport_info = data.get("transport", {})
                    
                    details = f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {session_info.get('session_id')}, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info.get('transport_number')}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {session_info.get('total_loaded', 0)}"
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", True, details, response_time)
                    self.test_results["get_session_success"] = True
                    return True
                else:
                    details = f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')}"
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, details, response_time)
                    return False
            else:
                details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, details)
            return False
    
    def test_delete_session_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/logistics/cargo-to-transport/session"""
        self.log("\nüîö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
        
        if not self.current_session_id:
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return False
        
        try:
            start_time = time.time()
            response = self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session", json={
                "session_id": self.current_session_id
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get("success"):
                    session_summary = data.get("session_summary", {})
                    details = f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.current_session_id}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {session_summary.get('total_loaded', 0)}"
                    self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", True, details, response_time)
                    self.test_results["delete_session_success"] = True
                    self.current_session_id = None
                    return True
                else:
                    details = f"–ù–µ—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, details, response_time)
                    return False
            else:
                details = f"–û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}"
                self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, details, response_time)
                return False
                
        except Exception as e:
            details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, details)
            return False
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.log("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        error_tests = [
            {
                "name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                "endpoint": f"{API_BASE}/logistics/cargo-to-transport/scan-transport",
                "method": "POST",
                "data": {"qr_code": "INVALID_QR_CODE"},
                "expected_status": [400, 404]
            },
            {
                "name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏",
                "endpoint": f"{API_BASE}/logistics/cargo-to-transport/scan-cargo",
                "method": "POST", 
                "data": {"qr_code": "250101", "session_id": "nonexistent_session"},
                "expected_status": [400, 404]
            },
            {
                "name": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞",
                "endpoint": f"{API_BASE}/logistics/cargo-to-transport/scan-cargo",
                "method": "POST",
                "data": {"qr_code": "NONEXISTENT999", "session_id": str(uuid.uuid4())},
                "expected_status": [400, 404]
            }
        ]
        
        error_success_count = 0
        
        for test in error_tests:
            try:
                start_time = time.time()
                
                if test["method"] == "POST":
                    response = self.session.post(test["endpoint"], json=test["data"])
                    
                response_time = int((time.time() - start_time) * 1000)
                
                if response.status_code in test["expected_status"]:
                    details = f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏: HTTP {response.status_code}"
                    self.add_test_result(test["name"], True, details, response_time)
                    error_success_count += 1
                else:
                    details = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: HTTP {response.status_code} (–æ–∂–∏–¥–∞–ª—Å—è {test['expected_status']})"
                    self.add_test_result(test["name"], False, details, response_time)
                    
            except Exception as e:
                details = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                self.add_test_result(test["name"], False, details)
        
        if error_success_count >= len(error_tests) * 0.7:  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            self.test_results["error_handling_success"] = True
            return True
        else:
            return False
    
    def cleanup_test_transport(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        if self.test_transport_id:
            self.log("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
            try:
                response = self.session.delete(f"{API_BASE}/transport/{self.test_transport_id}")
                if response.status_code == 200:
                    self.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω")
                else:
                    self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {response.status_code}")
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 2 - API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
        self.log("=" * 120)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", "ERROR")
            return False
        
        # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        if not self.create_test_transport():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", "ERROR")
            return False
        
        # –≠—Ç–∞–ø 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        if not self.fix_transport_status():
            self.log("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.", "WARNING")
        
        # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
        self.log("\nüî• –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• ENDPOINTS")
        self.log("-" * 60)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π workflow
        self.test_scan_transport_endpoint()
        self.test_scan_cargo_endpoint()
        self.test_get_session_endpoint()
        self.test_delete_session_endpoint()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        self.test_error_handling()
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup_test_transport()
        
        return True
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 120)
        self.log("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
        self.log("=" * 120)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = self.test_results["total_tests"]
        passed_tests = self.test_results["passed_tests"]
        failed_tests = self.test_results["failed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        self.log(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.log(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        self.log(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –°—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.log(f"\nüéØ –°–¢–ê–¢–£–° –û–°–ù–û–í–ù–´–• –§–£–ù–ö–¶–ò–ô:")
        functions = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", self.test_results["auth_success"]),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", self.test_results["transport_creation_success"]),
            ("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", self.test_results["scan_transport_success"]),
            ("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤", self.test_results["scan_cargo_success"]),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", self.test_results["get_session_success"]),
            ("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", self.test_results["delete_session_success"]),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_results["error_handling_success"])
        ]
        
        for func_name, success in functions:
            status = "‚úÖ" if success else "‚ùå"
            self.log(f"   {status} {func_name}")
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        self.log(f"\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        self.log("   ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –í –ö–û–î–ï BACKEND:")
        self.log("      - Endpoint /api/logistics/cargo-to-transport/scan-transport –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å 'available'")
        self.log("      - –ù–æ TransportStatus enum —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ: 'empty', 'filled', 'in_transit', 'arrived', 'completed'")
        self.log("      - –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–µ 400: Transport is not available for loading")
        self.log("   üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
        self.log("      - –õ–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å 'available' –≤ TransportStatus enum")
        self.log("      - –õ–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç–∞—Ç—É—Å 'empty' –≤ cargo-to-transport endpoints")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        for result in self.test_results["detailed_results"]:
            self.log(f"   {result['status']}: {result['test_name']} ({result['response_time']})")
            if result['details']:
                self.log(f"      ‚îî‚îÄ {result['details']}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        self.log(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢:")
        if success_rate >= 90:
            self.log("‚úÖ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            self.log("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 50:
            self.log("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢! –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.")
            self.log("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–• –ü–†–û–ë–õ–ï–ú.")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            self.log("üö® –¢–†–ï–ë–£–ï–¢–°–Ø –°–ï–†–¨–ï–ó–ù–ê–Ø –î–û–†–ê–ë–û–¢–ö–ê!")
        
        self.log("=" * 120)
        
        return success_rate >= 50

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 2 - API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("–î–∞—Ç–∞:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("Backend URL:", BACKEND_URL)
    print()
    
    tester = CargoToTransportCorrectedTester()
    
    try:
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        success = tester.run_comprehensive_test()
        
        if success:
            # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            overall_success = tester.print_final_report()
            
            # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
            sys.exit(0 if overall_success else 1)
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        tester.cleanup_test_transport()
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        tester.cleanup_test_transport()
        sys.exit(1)

if __name__ == "__main__":
    main()