#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND API –î–õ–Ø –ü–ï–ß–ê–¢–ò QR –ö–û–î–û–í –í TAJLINE.TJ

–ö–æ–Ω—Ç–µ–∫—Å—Ç: Backend API –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ 100% –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. 
–ù—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å 3 –Ω–æ–≤—ã—Ö API endpoint'–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ individual units.

API ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. POST /api/operator/qr/generate-individual - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞
2. POST /api/operator/qr/generate-batch - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –µ–¥–∏–Ω–∏—Ü  
3. GET /api/operator/qr/print-layout - –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏

–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:
1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê: +79777888999 / warehouse123
2. –¢–ï–°–¢ 1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ –¥–ª—è –æ–¥–Ω–æ–π individual unit
3. –¢–ï–°–¢ 2 - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö individual units 
4. –¢–ï–°–¢ 3 - –û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–∫–µ—Ç—ã (single, grid_2x2, grid_3x3, compact)
5. –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É QR –¥–∞–Ω–Ω—ã—Ö, base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
"""

import requests
import json
import base64
import re
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = "https://tajline-cargo-8.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRPrintingAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_cargo_id = None
        self.test_cargo_number = None
        self.test_individual_numbers = []
        self.test_results = []
        
    def log_result(self, test_name, success, details="", error_details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error_details": error_details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if error_details and not success:
            print(f"   ‚ö†Ô∏è {error_details}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print("=" * 50)
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(
                    f"{BACKEND_URL}/auth/me",
                    headers={"Authorization": f"Bearer {self.auth_token}"},
                    timeout=30
                )
                
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {self.operator_user.get('phone')})"
                    )
                    return True
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        False,
                        error_details=f"HTTP {user_response.status_code}: {user_response.text}"
                    )
                    return False
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    error_details=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                error_details=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def create_test_cargo_with_individual_units(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å individual units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤"""
        print("üì¶ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ì–†–£–ó–ê –° INDIVIDUAL UNITS")
        print("=" * 50)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤
            cargo_data = {
                "sender_full_name": "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á –°–º–∏—Ä–Ω–æ–≤",
                "sender_phone": "+79161234567",
                "recipient_full_name": "–§–∞—Ä—Ö–æ–¥ –†–∞—Ö–∏–º–æ–≤–∏—á –ù–∞–∑–∞—Ä–æ–≤",
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 125, –∫–≤. 45",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–æ–≤ Individual Units",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,
                        "weight": 5.5,
                        "price_per_kg": 150.0,
                        "total_amount": 825.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG",
                        "quantity": 3,
                        "weight": 8.2,
                        "price_per_kg": 120.0,
                        "total_amount": 984.0
                    }
                ]
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                self.test_cargo_id = result.get("cargo_id")
                self.test_cargo_number = result.get("cargo_number")
                
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞",
                    True,
                    f"–ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {self.test_cargo_number} (ID: {self.test_cargo_id}), –ì—Ä—É–∑—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung (2 —à—Ç) + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG (3 —à—Ç) = 5 –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º"
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ individual numbers
                self.generate_expected_individual_numbers()
                
                return True
            else:
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞",
                    False,
                    error_details=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞",
                False,
                error_details=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def generate_expected_individual_numbers(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö individual numbers –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞"""
        if not self.test_cargo_number:
            return
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ individual numbers –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞:
        # –ì—Ä—É–∑ #1 (–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung) - 2 –µ–¥–∏–Ω–∏—Ü—ã: /01/01, /01/02
        # –ì—Ä—É–∑ #2 (–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG) - 3 –µ–¥–∏–Ω–∏—Ü—ã: /02/01, /02/02, /02/03
        self.test_individual_numbers = [
            f"{self.test_cargo_number}/01/01",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung, –µ–¥–∏–Ω–∏—Ü–∞ 1
            f"{self.test_cargo_number}/01/02",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung, –µ–¥–∏–Ω–∏—Ü–∞ 2
            f"{self.test_cargo_number}/02/01",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 1
            f"{self.test_cargo_number}/02/02",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 2
            f"{self.test_cargo_number}/02/03",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 3
        ]
        
        print(f"üìã –û–∂–∏–¥–∞–µ–º—ã–µ individual numbers –¥–ª—è QR –∫–æ–¥–æ–≤:")
        for i, number in enumerate(self.test_individual_numbers, 1):
            print(f"   {i}. {number}")
        print()
    
    def test_generate_individual_qr(self):
        """–¢–ï–°–¢ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã"""
        print("üéØ –¢–ï–°–¢ 1: –û–î–ò–ù–û–ß–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø QR –ö–û–î–ê")
        print("=" * 50)
        
        if not self.test_individual_numbers:
            self.log_result(
                "–¢–ï–°–¢ 1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                False,
                error_details="–ù–µ—Ç individual numbers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        test_individual_number = self.test_individual_numbers[0]
        print(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –¥–ª—è: {test_individual_number}")
        
        try:
            request_data = {
                "individual_number": test_individual_number
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["success", "qr_info", "message"]
                missing_fields = [field for field in required_fields if field not in result]
                
                if missing_fields:
                    self.log_result(
                        "–¢–ï–°–¢ 1 - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        error_details=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
                
                qr_info = result.get("qr_info", {})
                required_qr_fields = ["individual_number", "cargo_number", "cargo_name", "sender_name", "recipient_name", "qr_data", "qr_base64"]
                missing_qr_fields = [field for field in required_qr_fields if field not in qr_info]
                
                if missing_qr_fields:
                    self.log_result(
                        "–¢–ï–°–¢ 1 - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ QR –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                        False,
                        error_details=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ qr_info: {missing_qr_fields}"
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö
                qr_data = qr_info.get("qr_data", "")
                expected_pattern = r"TAJLINE\|INDIVIDUAL\|.+\|\d+"
                
                if not re.match(expected_pattern, qr_data):
                    self.log_result(
                        "–¢–ï–°–¢ 1 - –§–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö",
                        False,
                        error_details=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö: {qr_data}, –æ–∂–∏–¥–∞–ª—Å—è: TAJLINE|INDIVIDUAL|{test_individual_number}|timestamp"
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                qr_base64 = qr_info.get("qr_base64", "")
                if not qr_base64:
                    self.log_result(
                        "–¢–ï–°–¢ 1 - QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        False,
                        error_details="QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    )
                    return False
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å base64
                    decoded_image = base64.b64decode(qr_base64)
                    image_size = len(decoded_image)
                    
                    if image_size < 500:
                        self.log_result(
                            "–¢–ï–°–¢ 1 - –†–∞–∑–º–µ—Ä QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                            False,
                            error_details=f"QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {image_size} –±–∞–π—Ç"
                        )
                        return False
                        
                except Exception as decode_error:
                    self.log_result(
                        "–¢–ï–°–¢ 1 - –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å base64",
                        False,
                        error_details=f"QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: {str(decode_error)}"
                    )
                    return False
                
                # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
                self.log_result(
                    "–¢–ï–°–¢ 1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                    True,
                    f"QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {test_individual_number}. QR –¥–∞–Ω–Ω—ã–µ: {qr_data}. –ì—Ä—É–∑: {qr_info.get('cargo_name')} (‚Ññ{qr_info.get('cargo_number')}). –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {qr_info.get('sender_name')}. –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {qr_info.get('recipient_name')}. –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_size} –±–∞–π—Ç"
                )
                
                return True
            else:
                self.log_result(
                    "–¢–ï–°–¢ 1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                    False,
                    error_details=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢ 1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                False,
                error_details=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def test_generate_batch_qr(self):
        """–¢–ï–°–¢ 2: –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤"""
        print("üéØ –¢–ï–°–¢ 2: –ú–ê–°–°–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø QR –ö–û–î–û–í")
        print("=" * 50)
        
        if len(self.test_individual_numbers) < 2:
            self.log_result(
                "–¢–ï–°–¢ 2 - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                False,
                error_details="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ individual numbers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
            )
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã)
        test_numbers = self.test_individual_numbers[:5]
        print(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è {len(test_numbers)} –µ–¥–∏–Ω–∏—Ü: {test_numbers}")
        
        try:
            request_data = {
                "individual_numbers": test_numbers
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-batch",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["success", "qr_batch", "failed_items", "total_generated", "total_failed"]
                missing_fields = [field for field in required_fields if field not in result]
                
                if missing_fields:
                    self.log_result(
                        "–¢–ï–°–¢ 2 - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        error_details=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
                
                qr_batch = result.get("qr_batch", [])
                failed_items = result.get("failed_items", [])
                total_generated = result.get("total_generated", 0)
                total_failed = result.get("total_failed", 0)
                
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_generated}")
                print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_failed}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QR –∫–æ–¥
                valid_qr_count = 0
                for qr_item in qr_batch:
                    required_qr_fields = ["individual_number", "cargo_number", "cargo_name", "qr_data", "qr_base64"]
                    missing_qr_fields = [field for field in required_qr_fields if field not in qr_item]
                    
                    if missing_qr_fields:
                        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_qr_fields} –≤ QR —ç–ª–µ–º–µ–Ω—Ç–µ {qr_item.get('individual_number')}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö
                    qr_data = qr_item.get("qr_data", "")
                    expected_pattern = r"TAJLINE\|INDIVIDUAL\|.+\|\d+"
                    
                    if not re.match(expected_pattern, qr_data):
                        print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö: {qr_data}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    qr_base64 = qr_item.get("qr_base64", "")
                    if not qr_base64:
                        print(f"   ‚ùå QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è {qr_item.get('individual_number')}")
                        continue
                    
                    try:
                        base64.b64decode(qr_base64)
                        valid_qr_count += 1
                    except:
                        print(f"   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {qr_item.get('individual_number')}")
                        continue
                
                # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ö–æ—Ç—è –±—ã 80% QR –∫–æ–¥–æ–≤
                success_rate = (valid_qr_count / len(test_numbers)) * 100 if test_numbers else 0
                
                if success_rate >= 80:
                    self.log_result(
                        "–¢–ï–°–¢ 2 - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                        True,
                        f"–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {valid_qr_count} –∏–∑ {len(test_numbers)} QR –∫–æ–¥–æ–≤ ({success_rate:.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏). –ü—Ä–∏–º–µ—Ä—ã: {[qr['individual_number'] for qr in qr_batch[:2]]}"
                    )
                    return True
                else:
                    self.log_result(
                        "–¢–ï–°–¢ 2 - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                        False,
                        error_details=f"–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {success_rate:.1f}% ({valid_qr_count}/{len(test_numbers)})"
                    )
                    return False
            else:
                self.log_result(
                    "–¢–ï–°–¢ 2 - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                    False,
                    error_details=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢ 2 - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                False,
                error_details=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def test_print_layout_options(self):
        """–¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏"""
        print("üéØ –¢–ï–°–¢ 3: –û–ü–¶–ò–ò –ú–ê–ö–ï–¢–û–í –ü–ï–ß–ê–¢–ò")
        print("=" * 50)
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/qr/print-layout",
                headers={"Authorization": f"Bearer {self.auth_token}"},
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["success", "layout_options", "default_layout"]
                missing_fields = [field for field in required_fields if field not in result]
                
                if missing_fields:
                    self.log_result(
                        "–¢–ï–°–¢ 3 - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        error_details=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
                
                layout_options = result.get("layout_options", {})
                expected_layouts = ["single", "grid_2x2", "grid_3x3", "compact"]
                missing_layouts = [layout for layout in expected_layouts if layout not in layout_options]
                
                if missing_layouts:
                    self.log_result(
                        "–¢–ï–°–¢ 3 - –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–∫–µ—Ç—ã",
                        False,
                        error_details=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞–∫–µ—Ç—ã: {missing_layouts}"
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ –º–∞–∫–µ—Ç–∞
                layout_details = []
                for layout_key, layout_info in layout_options.items():
                    required_layout_fields = ["name", "description", "qr_size", "per_page"]
                    missing_layout_fields = [field for field in required_layout_fields if field not in layout_info]
                    
                    if missing_layout_fields:
                        self.log_result(
                            f"–¢–ï–°–¢ 3 - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞–∫–µ—Ç–∞ {layout_key}",
                            False,
                            error_details=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_layout_fields} –≤ –º–∞–∫–µ—Ç–µ {layout_key}"
                        )
                        return False
                    
                    layout_details.append(f"{layout_key}: {layout_info.get('name')} ({layout_info.get('per_page')} QR/—Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Ä–∞–∑–º–µ—Ä: {layout_info.get('qr_size')})")
                
                default_layout = result.get("default_layout")
                
                self.log_result(
                    "–¢–ï–°–¢ 3 - –û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏",
                    True,
                    f"–í—Å–µ 4 –º–∞–∫–µ—Ç–∞ –ø–µ—á–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(expected_layouts)}. –ú–∞–∫–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_layout}. –î–µ—Ç–∞–ª–∏: {'; '.join(layout_details)}"
                )
                
                return True
            else:
                self.log_result(
                    "–¢–ï–°–¢ 3 - –û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏",
                    False,
                    error_details=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢ 3 - –û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏",
                False,
                error_details=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def test_error_handling(self):
        """–¢–ï–°–¢ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö individual_numbers"""
        print("üéØ –¢–ï–°–¢ 4: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö")
        print("=" * 50)
        
        tests_passed = 0
        total_tests = 3
        
        # –¢–µ—Å—Ç 4.1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π individual_number
        print("üîç –¢–µ—Å—Ç 4.1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π individual_number")
        try:
            request_data = {"individual_number": "NONEXISTENT/99/99"}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )
            
            if response.status_code == 404:
                print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ (404)")
                tests_passed += 1
            else:
                print(f"   ‚ùå –û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 4.2: –ü—É—Å—Ç–æ–π individual_number
        print("üîç –¢–µ—Å—Ç 4.2: –ü—É—Å—Ç–æ–π individual_number")
        try:
            request_data = {"individual_number": ""}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )
            
            if response.status_code == 400:
                print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (400)")
                tests_passed += 1
            else:
                print(f"   ‚ùå –û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 4.3: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("üîç –¢–µ—Å—Ç 4.3: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        try:
            request_data = {"individual_numbers": []}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-batch",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )
            
            if response.status_code == 400:
                print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ (400)")
                tests_passed += 1
            else:
                print(f"   ‚ùå –û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        success = tests_passed == total_tests
        self.log_result(
            "–¢–ï–°–¢ 4 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
            success,
            f"–ü—Ä–æ–π–¥–µ–Ω–æ {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫" if success else "",
            f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫" if not success else ""
        )
        
        return success
    
    def validate_qr_data_structure(self):
        """–¢–ï–°–¢ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –¥–∞–Ω–Ω—ã—Ö –∏ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        print("üéØ –¢–ï–°–¢ 5: –í–ê–õ–ò–î–ê–¶–ò–Ø QR –î–ê–ù–ù–´–• –ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        print("=" * 50)
        
        if not self.test_individual_numbers:
            self.log_result(
                "–¢–ï–°–¢ 5 - –í–∞–ª–∏–¥–∞—Ü–∏—è QR –¥–∞–Ω–Ω—ã—Ö",
                False,
                error_details="–ù–µ—Ç individual numbers –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
            )
            return False
        
        test_individual_number = self.test_individual_numbers[0]
        
        try:
            request_data = {"individual_number": test_individual_number}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                qr_info = result.get("qr_info", {})
                qr_data = qr_info.get("qr_data", "")
                qr_base64 = qr_info.get("qr_base64", "")
                
                validation_results = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç TAJLINE
                if qr_data.startswith("TAJLINE|INDIVIDUAL|"):
                    validation_results.append("‚úÖ –§–æ—Ä–º–∞—Ç TAJLINE –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                else:
                    validation_results.append(f"‚ùå QR –∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É TAJLINE: {qr_data}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                parts = qr_data.split("|")
                if len(parts) == 4:
                    validation_results.append("‚úÖ QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç 4 —á–∞—Å—Ç–∏ (TAJLINE|INDIVIDUAL|–Ω–æ–º–µ—Ä|timestamp)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º timestamp
                    try:
                        timestamp = int(parts[3])
                        current_time = int(time.time())
                        
                        if abs(current_time - timestamp) <= 60:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–∏–Ω—É—Ç—ã
                            validation_results.append(f"‚úÖ Timestamp –∞–∫—Ç—É–∞–ª–µ–Ω: {timestamp} ({datetime.fromtimestamp(timestamp)})")
                        else:
                            validation_results.append(f"‚ö†Ô∏è Timestamp —Å—Ç–∞—Ä—ã–π: {timestamp}")
                    except ValueError:
                        validation_results.append(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π timestamp: {parts[3]}")
                        return False
                else:
                    validation_results.append(f"‚ùå QR –∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 4 —á–∞—Å—Ç–∏: {qr_data}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                try:
                    decoded_image = base64.b64decode(qr_base64)
                    image_size = len(decoded_image)
                    
                    if 500 <= image_size <= 100000:  # –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                        validation_results.append(f"‚úÖ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: {image_size} –±–∞–π—Ç")
                    else:
                        validation_results.append(f"‚ö†Ô∏è QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: {image_size} –±–∞–π—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ PNG
                    if decoded_image.startswith(b'\x89PNG'):
                        validation_results.append("‚úÖ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG")
                    else:
                        validation_results.append("‚ö†Ô∏è QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG")
                        
                except Exception as decode_error:
                    validation_results.append(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {str(decode_error)}")
                    return False
                
                self.log_result(
                    "–¢–ï–°–¢ 5 - –í–∞–ª–∏–¥–∞—Ü–∏—è QR –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"QR –∫–æ–¥ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π. –§–æ—Ä–º–∞—Ç: {qr_data}. –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_size} –±–∞–π—Ç. –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {'; '.join(validation_results)}"
                )
                
                return True
            else:
                self.log_result(
                    "–¢–ï–°–¢ 5 - –í–∞–ª–∏–¥–∞—Ü–∏—è QR –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    error_details=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢ 5 - –í–∞–ª–∏–¥–∞—Ü–∏—è QR –¥–∞–Ω–Ω—ã—Ö",
                False,
                error_details=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        print("üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("=" * 50)
        print("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print()
    
    def run_comprehensive_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ QR –∫–æ–¥–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏ Individual Units"""
        print("üñ®Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND API –î–õ–Ø –ü–ï–ß–ê–¢–ò QR –ö–û–î–û–í –í TAJLINE.TJ")
        print("=" * 80)
        print("–ö–æ–Ω—Ç–µ–∫—Å—Ç: Backend API –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ 100% –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
        print("–¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å 3 –Ω–æ–≤—ã—Ö API endpoint'–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ individual units")
        print("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not self.create_test_cargo_with_individual_units():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å individual units")
            return False
        
        # –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API endpoints
        test_results = []
        
        test_results.append(("–¢–ï–°–¢ 1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR", self.test_generate_individual_qr()))
        test_results.append(("–¢–ï–°–¢ 2 - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR", self.test_generate_batch_qr()))
        test_results.append(("–¢–ï–°–¢ 3 - –û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏", self.test_print_layout_options()))
        test_results.append(("–¢–ï–°–¢ 4 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_error_handling()))
        test_results.append(("–¢–ï–°–¢ 5 - –í–∞–ª–∏–¥–∞—Ü–∏—è QR –¥–∞–Ω–Ω—ã—Ö", self.validate_qr_data_structure()))
        
        # –≠—Ç–∞–ø 4: –û—á–∏—Å—Ç–∫–∞
        self.cleanup_test_data()
        
        # –≠—Ç–∞–ø 5: –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("=" * 80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BACKEND API –î–õ–Ø –ü–ï–ß–ê–¢–ò QR –ö–û–î–û–í")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! (100% SUCCESS RATE)")
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123): –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã: QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ TAJLINE|INDIVIDUAL|{individual_number}|{timestamp}")
            print("‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤: Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è QR –∫–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print("‚úÖ –û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏: 4 –º–∞–∫–µ—Ç–∞ –ø–µ—á–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã (single, grid_2x2, grid_3x3, compact)")
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö individual_numbers")
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è QR –¥–∞–Ω–Ω—ã—Ö: Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã, —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É")
            print("\nüöÄ API –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 80:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –ú–Ω–æ–≥–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        
        return success_rate == 100

if __name__ == "__main__":
    tester = QRPrintingAPITester()
    success = tester.run_comprehensive_tests()
    
    if success:
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ 3 endpoint'–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é.")
        exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.")
        exit(1)