#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:
1) GET /api/warehouses - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —Å–∫–ª–∞–¥–æ–≤
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞ –µ—Å—Ç—å –ø–æ–ª—è: id, name, location
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON array –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º)

2) POST /api/admin/create-operator - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:
   - –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è warehouse_id
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ endpoint –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è: full_name, phone, address, password, warehouse_id
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö

3) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ backend –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

–¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:
- –ê–¥–º–∏–Ω: phone="+79999888777", password="admin123"

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
"""

import requests
import json
import os
from datetime import datetime
import uuid

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-7.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class OperatorRegistrationTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.admin_info = None
        self.test_results = []
        self.warehouses_data = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìã –î–µ—Ç–∞–ª–∏: {details}")
        if error_msg:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}")
        print()

    def test_admin_login(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_info = data.get("user", {})
                
                if self.admin_token and self.admin_info.get("role") == "admin":
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_info.get('full_name')}' (–Ω–æ–º–µ—Ä: {self.admin_info.get('user_number')}), —Ä–æ–ª—å: {self.admin_info.get('role')}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                    )
                    return True
                else:
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                        False,
                        "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ —Ä–æ–ª—å –Ω–µ admin",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                False,
                "",
                str(e)
            )
            return False

    def test_warehouses_endpoint(self):
        """–¢–µ—Å—Ç 2: GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/warehouses", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, list):
                    self.warehouses_data = data
                    warehouse_count = len(data)
                    
                    if warehouse_count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
                        required_fields = ["id", "name", "location"]
                        all_valid = True
                        missing_fields_summary = []
                        
                        for i, warehouse in enumerate(data[:5]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∫–ª–∞–¥–æ–≤
                            missing_fields = [field for field in required_fields if field not in warehouse]
                            if missing_fields:
                                all_valid = False
                                missing_fields_summary.append(f"–°–∫–ª–∞–¥ {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
                        
                        if all_valid:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∫–ª–∞–¥–æ–≤
                            examples = []
                            for warehouse in data[:3]:
                                examples.append(f"ID: {warehouse.get('id', 'N/A')[:8]}..., –ù–∞–∑–≤–∞–Ω–∏–µ: '{warehouse.get('name', 'N/A')}', –õ–æ–∫–∞—Ü–∏—è: '{warehouse.get('location', 'N/A')}'")
                            
                            self.log_test(
                                "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                                True,
                                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏ (id, name, location). –ü—Ä–∏–º–µ—Ä—ã: {'; '.join(examples)}"
                            )
                            return True
                        else:
                            self.log_test(
                                "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                                False,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤, –Ω–æ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
                                f"–ü—Ä–æ–±–ª–µ–º—ã: {'; '.join(missing_fields_summary)}"
                            )
                            return False
                    else:
                        self.log_test(
                            "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                            False,
                            "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç - –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º",
                            "–ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                        )
                        return False
                        
                elif isinstance(data, dict):
                    # –í–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {items: [...], pagination: {...}}
                    if "items" in data:
                        self.warehouses_data = data["items"]
                        warehouse_count = len(data["items"])
                        
                        if warehouse_count > 0:
                            self.log_test(
                                "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                                True,
                                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤ –≤ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
                            )
                            return True
                        else:
                            self.log_test(
                                "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                                False,
                                "–ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤",
                                "–ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                            )
                            return False
                    else:
                        self.log_test(
                            "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                            False,
                            "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ - –Ω–µ –º–∞—Å—Å–∏–≤ –∏ –Ω–µ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º 'items'",
                            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}"
                        )
                        return False
                else:
                    self.log_test(
                        "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                        False,
                        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}, –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {str(data)[:200]}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                False,
                "",
                str(e)
            )
            return False

    def test_create_operator_endpoint_structure(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint POST /api/admin/create-operator"""
        try:
            if not self.admin_token:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            if not self.warehouses_data:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                    False,
                    "",
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_warehouse = self.warehouses_data[0]
            warehouse_id = test_warehouse.get("id")
            
            if not warehouse_id:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                    False,
                    "",
                    "–£ –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'id'"
                )
                return False
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            test_operator_data = {
                "full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä {datetime.now().strftime('%H%M%S')}",
                "phone": f"+7999{datetime.now().strftime('%H%M%S')}",
                "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "password": "testpass123",
                "warehouse_id": warehouse_id
            }
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.post(f"{API_BASE}/admin/create-operator", json=test_operator_data, headers=headers)
            
            if response.status_code == 200 or response.status_code == 201:
                data = response.json()
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                    True,
                    f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –°–∫–ª–∞–¥: '{test_warehouse.get('name')}' (ID: {warehouse_id[:8]}...), –û—Ç–≤–µ—Ç: {data.get('message', '–£—Å–ø–µ—à–Ω–æ')}"
                )
                return True
                
            elif response.status_code == 400:
                # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏
                try:
                    error_data = response.json()
                    error_detail = error_data.get("detail", response.text)
                    
                    if "warehouse_id" in str(error_detail).lower():
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                            False,
                            f"‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° WAREHOUSE_ID! –°–∫–ª–∞–¥ ID: {warehouse_id[:8]}..., –ù–∞–∑–≤–∞–Ω–∏–µ: '{test_warehouse.get('name')}'",
                            f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ warehouse_id: {error_detail}"
                        )
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                            False,
                            f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å warehouse_id)",
                            f"HTTP 400: {error_detail}"
                        )
                except:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                        False,
                        f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                        f"HTTP 400: {response.text}"
                    )
                return False
                
            elif response.status_code == 422:
                # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic
                try:
                    error_data = response.json()
                    validation_errors = error_data.get("detail", [])
                    
                    warehouse_errors = []
                    other_errors = []
                    
                    if isinstance(validation_errors, list):
                        for error in validation_errors:
                            if isinstance(error, dict):
                                field = error.get("loc", ["unknown"])[-1] if error.get("loc") else "unknown"
                                msg = error.get("msg", "validation error")
                                
                                if "warehouse" in field.lower():
                                    warehouse_errors.append(f"{field}: {msg}")
                                else:
                                    other_errors.append(f"{field}: {msg}")
                    
                    if warehouse_errors:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                            False,
                            f"‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° –í–ê–õ–ò–î–ê–¶–ò–ï–ô WAREHOUSE_ID! –°–∫–ª–∞–¥: '{test_warehouse.get('name')}' (ID: {warehouse_id[:8]}...)",
                            f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ warehouse: {'; '.join(warehouse_errors)}"
                        )
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                            False,
                            f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π (–Ω–µ warehouse_id)",
                            f"HTTP 422: {'; '.join(other_errors) if other_errors else str(validation_errors)}"
                        )
                except:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                        False,
                        f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic",
                        f"HTTP 422: {response.text}"
                    )
                return False
                
            elif response.status_code == 404:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                    False,
                    "‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù! –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏–ª–∏ endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
                    f"HTTP 404: {response.text}"
                )
                return False
                
            elif response.status_code == 409:
                # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                    True,  # Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç
                    f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è), –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    f"HTTP 409: {response.text}"
                )
                return True
                
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator",
                False,
                "",
                str(e)
            )
            return False

    def test_create_operator_with_different_warehouses(self):
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏"""
        try:
            if not self.admin_token:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            if len(self.warehouses_data) < 2:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏",
                    True,  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –º–∞–ª–æ —Å–∫–ª–∞–¥–æ–≤
                    f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(self.warehouses_data)} —Å–∫–ª–∞–¥–æ–≤, —Ç–µ—Å—Ç —Å –æ–¥–Ω–∏–º —Å–∫–ª–∞–¥–æ–º",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return True
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            successful_tests = 0
            total_tests = min(3, len(self.warehouses_data))  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å–∫–ª–∞–¥–∞
            
            for i in range(total_tests):
                warehouse = self.warehouses_data[i]
                warehouse_id = warehouse.get("id")
                warehouse_name = warehouse.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
                
                if not warehouse_id:
                    continue
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
                test_operator_data = {
                    "full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä –°–∫–ª–∞–¥–∞ {i+1} {datetime.now().strftime('%H%M%S')}",
                    "phone": f"+7999{datetime.now().strftime('%H%M%S')}{i:02d}",
                    "address": f"–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å {i+1} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    "password": f"testpass{i+1}23",
                    "warehouse_id": warehouse_id
                }
                
                response = self.session.post(f"{API_BASE}/admin/create-operator", json=test_operator_data, headers=headers)
                
                if response.status_code in [200, 201, 409]:  # 409 = –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç
                    successful_tests += 1
                    print(f"   ‚úÖ –°–∫–ª–∞–¥ {i+1}: '{warehouse_name}' (ID: {warehouse_id[:8]}...) - OK")
                else:
                    print(f"   ‚ùå –°–∫–ª–∞–¥ {i+1}: '{warehouse_name}' (ID: {warehouse_id[:8]}...) - –û—à–∏–±–∫–∞ {response.status_code}")
            
            success_rate = (successful_tests / total_tests) * 100
            
            if success_rate >= 80:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏",
                    True,
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_tests}/{total_tests} —Å–∫–ª–∞–¥–æ–≤ ({success_rate:.1f}%), endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ warehouse_id"
                )
                return True
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏",
                    False,
                    f"‚ùå –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_tests}/{total_tests} —Å–∫–ª–∞–¥–æ–≤ ({success_rate:.1f}%)",
                    "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö warehouse_id"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–ª–∞–¥–∞–º–∏",
                False,
                "",
                str(e)
            )
            return False

    def test_invalid_warehouse_id(self):
        """–¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id"""
        try:
            if not self.admin_token:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º warehouse_id
            invalid_warehouse_id = str(uuid.uuid4())
            
            test_operator_data = {
                "full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π {datetime.now().strftime('%H%M%S')}",
                "phone": f"+7999{datetime.now().strftime('%H%M%S')}99",
                "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ warehouse_id",
                "password": "testpass123",
                "warehouse_id": invalid_warehouse_id
            }
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.post(f"{API_BASE}/admin/create-operator", json=test_operator_data, headers=headers)
            
            if response.status_code == 400:
                try:
                    error_data = response.json()
                    error_detail = str(error_data.get("detail", response.text))
                    
                    if "warehouse" in error_detail.lower() or "not found" in error_detail.lower():
                        self.log_test(
                            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                            True,
                            f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π warehouse_id",
                            f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {error_detail}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                            False,
                            f"–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å, –Ω–æ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å warehouse_id",
                            f"HTTP 400: {error_detail}"
                        )
                        return False
                except:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                        True,
                        f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π warehouse_id",
                        f"HTTP 400: {response.text}"
                    )
                    return True
                    
            elif response.status_code == 422:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                    True,
                    f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç warehouse_id (Pydantic validation)",
                    f"HTTP 422: {response.text}"
                )
                return True
                
            elif response.status_code in [200, 201]:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                    False,
                    f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π warehouse_id!",
                    f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID: {invalid_warehouse_id}, –Ω–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
                )
                return False
                
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π warehouse_id",
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º warehouse_id",
                False,
                "",
                str(e)
            )
            return False

    def test_missing_warehouse_id(self):
        """–¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id"""
        try:
            if not self.admin_token:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ warehouse_id
            test_operator_data = {
                "full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä –ë–µ–∑ –°–∫–ª–∞–¥–∞ {datetime.now().strftime('%H%M%S')}",
                "phone": f"+7999{datetime.now().strftime('%H%M%S')}88",
                "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ warehouse_id",
                "password": "testpass123"
                # warehouse_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            }
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.post(f"{API_BASE}/admin/create-operator", json=test_operator_data, headers=headers)
            
            if response.status_code == 422:
                try:
                    error_data = response.json()
                    validation_errors = error_data.get("detail", [])
                    
                    warehouse_required = False
                    if isinstance(validation_errors, list):
                        for error in validation_errors:
                            if isinstance(error, dict):
                                field = error.get("loc", ["unknown"])[-1] if error.get("loc") else "unknown"
                                if "warehouse" in field.lower():
                                    warehouse_required = True
                                    break
                    
                    if warehouse_required:
                        self.log_test(
                            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                            True,
                            f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ warehouse_id",
                            f"–í–∞–ª–∏–¥–∞—Ü–∏—è Pydantic: warehouse_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
                        )
                        return True
                    else:
                        self.log_test(
                            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                            False,
                            f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å warehouse_id",
                            f"HTTP 422: {validation_errors}"
                        )
                        return False
                except:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                        True,
                        f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
                        f"HTTP 422: {response.text}"
                    )
                    return True
                    
            elif response.status_code == 400:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                    True,
                    f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –±–µ–∑ warehouse_id",
                    f"HTTP 400: {response.text}"
                )
                return True
                
            elif response.status_code in [200, 201]:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                    False,
                    f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ warehouse_id!",
                    f"–ó–∞–ø—Ä–æ—Å –±–µ–∑ warehouse_id –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –ø—Ä–æ–±–ª–µ–º—ã"
                )
                return False
                
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –±–µ–∑ warehouse_id",
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ warehouse_id",
                False,
                "",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞")
        print("=" * 100)
        print("üéØ –§–æ–∫—É—Å: –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–∫–ª–∞–¥–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞")
        print("=" * 100)
        print()
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_admin_login,
            self.test_warehouses_endpoint,
            self.test_create_operator_endpoint_structure,
            self.test_create_operator_with_different_warehouses,
            self.test_invalid_warehouse_id,
            self.test_missing_warehouse_id
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            if test():
                passed_tests += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            import time
            time.sleep(0.5)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 100)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        warehouse_test_passed = any(result["test"] == "GET /api/warehouses - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤" and result["success"] for result in self.test_results)
        create_operator_test_passed = any(result["test"] == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã POST /api/admin/create-operator" and result["success"] for result in self.test_results)
        
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:")
        print("-" * 50)
        
        if not warehouse_test_passed:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: GET /api/warehouses –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   üîß –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            print("   üí° –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø—Ä–∞–≤–∏—Ç—å endpoint /api/warehouses")
        elif not create_operator_test_passed:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: POST /api/admin/create-operator –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   üîß –ü—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            print("   üí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é warehouse_id –≤ endpoint —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        elif success_rate >= 80:
            print("‚úÖ BACKEND API –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            print("   üîß –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ frontend –∫–æ–¥–µ")
            print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å JavaScript –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞")
        else:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´")
            print("   üîß –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            print("   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤")
        
        print()
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("-" * 50)
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
            if result["error"]:
                print(f"   ‚ö†Ô∏è {result['error']}")
        
        return success_rate >= 70

if __name__ == "__main__":
    tester = OperatorRegistrationTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("\nüîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –≤ backend API")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend endpoints –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")