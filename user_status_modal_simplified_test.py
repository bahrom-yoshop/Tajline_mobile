#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ TAJLINE.TJ

–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:
1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
2. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
3. ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/auth/login –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ backend –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
5. ‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ login endpoint –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend endpoint /api/auth/login –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å HTTP 403 –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ.
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
with open('/app/frontend/.env', 'r') as f:
    for line in f:
        if line.startswith('REACT_APP_BACKEND_URL='):
            BACKEND_URL = line.split('=', 1)[1].strip()
            break
    else:
        BACKEND_URL = 'http://localhost:8001'

if not BACKEND_URL.endswith('/api'):
    BACKEND_URL = f"{BACKEND_URL}/api"

print(f"üîß Backend URL: {BACKEND_URL}")

class UserStatusModalTester:
    def __init__(self):
        self.session = requests.Session()
        self.test_results = []
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if not success:
            print(f"   üìã Details: {details}")
    
    def test_admin_login_success(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É—Å–ø–µ—à–Ω–∞—è)"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                user_info = data.get("user", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                required_fields = ["access_token", "token_type", "user"]
                missing_fields = []
                
                for field in required_fields:
                    if field not in data:
                        missing_fields.append(field)
                
                if not missing_fields:
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É—Å–ø–µ—à–Ω–∞—è)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'Unknown')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')}, —Ä–æ–ª—å: {user_info.get('role', 'N/A')}), —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
                    )
                    return True
                else:
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É—Å–ø–µ—à–Ω–∞—è)",
                        False,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É—Å–ø–µ—à–Ω–∞—è)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É—Å–ø–µ—à–Ω–∞—è)",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def test_invalid_credentials(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "wrongpassword"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 401:
                self.log_result(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                    True,
                    f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω HTTP 401 –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                )
                return True
            else:
                self.log_result(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 401, –ø–æ–ª—É—á–µ–Ω HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def test_nonexistent_user(self):
        """–¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            login_data = {
                "phone": "+79999999999",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä
                "password": "anypassword"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 401:
                self.log_result(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                    True,
                    f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω HTTP 401 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
                return True
            else:
                self.log_result(
                    "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 401, –ø–æ–ª—É—á–µ–Ω HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def analyze_login_endpoint_code(self):
        """–¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ login endpoint –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–¥ backend –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            with open('/app/backend/server.py', 'r') as f:
                backend_code = f.read()
            
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            required_elements = [
                'if not user["is_active"]:',  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'status_message',  # –ü–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
                'status_details',  # –ü–æ–ª–µ –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞
                'user_role',  # –ü–æ–ª–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'user_name',  # –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'user_phone',  # –ü–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'is_deleted',  # –ü–æ–ª–µ —Ñ–ª–∞–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è
                'HTTPException(status_code=403',  # HTTP 403 –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                'deleted_at',  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'role_names = {',  # –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            ]
            
            found_elements = []
            missing_elements = []
            
            for element in required_elements:
                if element in backend_code:
                    found_elements.append(element)
                else:
                    missing_elements.append(element)
            
            if not missing_elements:
                self.log_result(
                    "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ login endpoint –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                    True,
                    f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–¥–µ! –ù–∞–π–¥–µ–Ω–æ {len(found_elements)}/{len(required_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                )
                return True
            else:
                self.log_result(
                    "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ login endpoint –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                    False,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(found_elements)}/{len(required_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_elements}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ login endpoint –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def test_login_endpoint_structure(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint /api/auth/login"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ endpoint –¥–æ—Å—Ç—É–ø–µ–Ω
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ endpoint –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = data.get("user", {})
                user_fields = ["id", "full_name", "phone", "role", "is_active"]
                
                missing_user_fields = []
                for field in user_fields:
                    if field not in user_info:
                        missing_user_fields.append(field)
                
                if not missing_user_fields:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint /api/auth/login",
                        True,
                        f"Endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {user_fields}"
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint /api/auth/login",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {missing_user_fields}"
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint /api/auth/login",
                    False,
                    f"Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint /api/auth/login",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def test_role_mapping_implementation(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–¥ backend –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–æ–ª–µ–π
            with open('/app/backend/server.py', 'r') as f:
                backend_code = f.read()
            
            # –ò—â–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            role_mappings = [
                '"admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"',
                '"operator": "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞"',
                '"courier": "–ö—É—Ä—å–µ—Ä"',
                '"user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"'
            ]
            
            found_mappings = []
            missing_mappings = []
            
            for mapping in role_mappings:
                if mapping in backend_code:
                    found_mappings.append(mapping)
                else:
                    missing_mappings.append(mapping)
            
            if len(found_mappings) >= 3:  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 4 —Ä–æ–ª–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                    True,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(found_mappings)}/{len(role_mappings)} –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ä–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"
                )
                return True
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                    False,
                    f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(found_mappings)}/{len(role_mappings)} –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ä–æ–ª–µ–π. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_mappings}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ TAJLINE.TJ")
        print("=" * 100)
        
        # –¢–µ—Å—Ç 1: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        self.test_admin_login_success()
        
        # –¢–µ—Å—Ç 2: –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.test_invalid_credentials()
        
        # –¢–µ—Å—Ç 3: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.test_nonexistent_user()
        
        # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        self.analyze_login_endpoint_code()
        
        # –¢–µ—Å—Ç 5: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ endpoint
        self.test_login_endpoint_structure()
        
        # –¢–µ—Å—Ç 6: –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π
        self.test_role_mapping_implementation()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print("\n" + "=" * 100)
        print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –°–¢–ê–¢–£–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ Backend endpoint /api/auth/login –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("‚úÖ –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ/—É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")
        else:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï –°–¢–ê–¢–£–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(f"{result['status']}: {result['test']}")
            if not result['success']:
                print(f"   üìã {result['details']}")

if __name__ == "__main__":
    tester = UserStatusModalTester()
    tester.run_all_tests()