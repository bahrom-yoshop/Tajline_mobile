#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: API layout-with-cargo - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
===================================================================

–¶–ï–õ–¨: –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4 –∏–∑ 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Å–∫–ª–∞–¥–∞ 001

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint /api/warehouses/{warehouse_id}/layout-with-cargo

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–¥–µ –Ω–∞ —Å–∫–ª–∞–¥–µ 001 —Ä–∞–∑–º–µ—â–µ–Ω–æ 13 –µ–¥–∏–Ω–∏—Ü –∏–∑ 3 –∑–∞—è–≤–æ–∫, 
–Ω–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4

–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ (–ª—é–±—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º)
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û API endpoint
4. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ placement_records –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (13 –µ–¥–∏–Ω–∏—Ü –∏–∑ 3 –∑–∞—è–≤–æ–∫)
6. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE = "001"
EXPECTED_APPLICATIONS = ["25082298", "250101", "25082235"]
EXPECTED_TOTAL_UNITS = 13
EXPECTED_UNITS_PER_APP = {"25082298": 7, "250101": 2, "25082235": 4}

class CorrectedLayoutWithCargoDiagnoser:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.warehouse_info = None
        self.test_results = {
            "auth_success": False,
            "warehouse_found": False,
            "api_accessible": False,
            "placement_records_found": 0,
            "expected_records": EXPECTED_TOTAL_UNITS,
            "missing_records": 0,
            "applications_analysis": {},
            "critical_issues": [],
            "warehouse_details": {},
            "api_response_structure": {}
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def find_warehouse(self):
        """–ù–∞–π—Ç–∏ —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.log("üè¢ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                self.log(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                
                if len(warehouses) > 0:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∫–ª–∞–¥
                    warehouse = warehouses[0]
                    self.warehouse_info = warehouse
                    
                    self.log(f"‚úÖ –°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω!")
                    self.log(f"   ID: {warehouse.get('id', 'N/A')}")
                    self.log(f"   –ù–æ–º–µ—Ä: {warehouse.get('warehouse_id_number', '–ù–ï–¢')}")
                    self.log(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {warehouse.get('name', 'N/A')}")
                    self.log(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse.get('location', 'N/A')}")
                    
                    self.test_results["warehouse_found"] = True
                    self.test_results["warehouse_details"] = {
                        "id": warehouse.get("id", "N/A"),
                        "warehouse_id_number": warehouse.get("warehouse_id_number", "–ù–ï–¢"),
                        "name": warehouse.get("name", "N/A"),
                        "location": warehouse.get("location", "N/A"),
                        "address": warehouse.get("address", "N/A")
                    }
                    return True
                else:
                    self.log("‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–ª–∞–¥–∞: {e}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û API layout-with-cargo"""
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API layout-with-cargo (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô ENDPOINT)")
        self.log("=" * 80)
        
        if not self.warehouse_info:
            self.log("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API", "ERROR")
            return False
        
        warehouse_id = self.warehouse_info["id"]
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô ENDPOINT: /api/warehouses/{warehouse_id}/layout-with-cargo
            self.log(f"üì° –ó–∞–ø—Ä–æ—Å –∫ –ü–†–ê–í–ò–õ–¨–ù–û–ú–£ endpoint: /api/warehouses/{warehouse_id}/layout-with-cargo")
            response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/layout-with-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log("‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint)")
                self.test_results["api_accessible"] = True
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                self.log("\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:")
                self.log(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                
                if isinstance(data, dict):
                    self.log(f"–ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    self.test_results["api_response_structure"] = {
                        "keys": list(data.keys()),
                        "data_type": str(type(data))
                    }
                    
                    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö
                    cargo_info = data.get("cargo_info", [])
                    occupied_cells = data.get("occupied_cells", 0)
                    layout_data = data.get("layout", {})
                    warehouse_info = data.get("warehouse_info", {})
                    
                    self.log(f"üì¶ cargo_info: {len(cargo_info)} –∑–∞–ø–∏—Å–µ–π")
                    self.log(f"üè† occupied_cells: {occupied_cells}")
                    self.log(f"üó∫Ô∏è layout –¥–∞–Ω–Ω—ã–µ: {type(layout_data)}")
                    self.log(f"üè¢ warehouse_info: {type(warehouse_info)}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ
                    if warehouse_info:
                        self.log(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ –∏–∑ API:")
                        self.log(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {warehouse_info.get('name', 'N/A')}")
                        self.log(f"   ID –Ω–æ–º–µ—Ä: {warehouse_info.get('warehouse_id_number', '–ù–ï–¢')}")
                        self.log(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse_info.get('location', 'N/A')}")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ê–Ω–∞–ª–∏–∑ cargo_info
                    self.analyze_cargo_info_detailed(cargo_info)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    self.test_results["placement_records_found"] = len(cargo_info)
                    self.test_results["missing_records"] = EXPECTED_TOTAL_UNITS - len(cargo_info)
                    
                    return True
                else:
                    self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(data)}", "WARNING")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}", "ERROR")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints
                self.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints...")
                return self.try_alternative_endpoints(warehouse_id)
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}", "ERROR")
            return False
    
    def try_alternative_endpoints(self, warehouse_id):
        """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints"""
        self.log("üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• ENDPOINTS:")
        
        alternative_endpoints = [
            f"/api/operator/warehouses/{warehouse_id}/layout-with-cargo",
            f"/api/admin/warehouses/{warehouse_id}/layout-with-cargo",
            f"/api/warehouses/{warehouse_id}/layout",
            f"/api/warehouses/{warehouse_id}/cargo",
            f"/api/operator/warehouses/{warehouse_id}/layout",
            f"/api/operator/warehouses/{warehouse_id}/cargo"
        ]
        
        for endpoint in alternative_endpoints:
            try:
                self.log(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {endpoint}")
                response = self.session.get(f"{API_BASE}{endpoint}")
                
                if response.status_code == 200:
                    self.log(f"‚úÖ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô ENDPOINT: {endpoint}")
                    data = response.json()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π endpoint
                    if isinstance(data, dict):
                        cargo_info = data.get("cargo_info", [])
                        if cargo_info:
                            self.log(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(cargo_info)} –∑–∞–ø–∏—Å–µ–π –≤ cargo_info")
                            self.analyze_cargo_info_detailed(cargo_info)
                            self.test_results["placement_records_found"] = len(cargo_info)
                            self.test_results["missing_records"] = EXPECTED_TOTAL_UNITS - len(cargo_info)
                            self.test_results["api_accessible"] = True
                            return True
                    
                elif response.status_code == 404:
                    self.log(f"‚ùå 404 Not Found: {endpoint}")
                elif response.status_code == 403:
                    self.log(f"‚ùå 403 Forbidden: {endpoint}")
                else:
                    self.log(f"‚ùå {response.status_code}: {endpoint}")
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        self.log("‚ùå –ù–∏ –æ–¥–∏–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")
        return False
    
    def analyze_cargo_info_detailed(self, cargo_info):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo_info –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        self.log("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO_INFO:")
        self.log("-" * 60)
        
        if not cargo_info:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: cargo_info –ø—É—Å—Ç–æ–π!", "ERROR")
            self.test_results["critical_issues"].append("cargo_info –ø—É—Å—Ç–æ–π - API –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º –∑–∞—è–≤–æ–∫
        applications_found = {}
        all_cargo_numbers = set()
        
        for i, cargo in enumerate(cargo_info):
            cargo_number = cargo.get("cargo_number", "N/A")
            individual_number = cargo.get("individual_number", "N/A")
            cargo_name = cargo.get("cargo_name", "N/A")
            placement_location = cargo.get("placement_location", "N/A")
            
            self.log(f"üì¶ –ì—Ä—É–∑ #{i+1}:")
            self.log(f"   –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            self.log(f"   Individual –Ω–æ–º–µ—Ä: {individual_number}")
            self.log(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo_name}")
            self.log(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {placement_location}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫
            all_cargo_numbers.add(cargo_number)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞—è–≤–∫–∞–º
            if cargo_number not in applications_found:
                applications_found[cargo_number] = []
            applications_found[cargo_number].append(cargo)
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        self.log(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û –ó–ê–Ø–í–ö–ê–ú:")
        self.log(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(applications_found)}")
        self.log(f"–í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫: {sorted(all_cargo_numbers)}")
        
        for app_number, cargos in applications_found.items():
            expected_count = EXPECTED_UNITS_PER_APP.get(app_number, 0)
            found_count = len(cargos)
            
            self.log(f"üìã –ó–∞—è–≤–∫–∞ {app_number}:")
            self.log(f"   –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {found_count}")
            self.log(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –µ–¥–∏–Ω–∏—Ü: {expected_count}")
            
            if expected_count > 0:
                if found_count == expected_count:
                    self.log(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                elif found_count < expected_count:
                    self.log(f"   ‚ùå –ù–ï–î–û–°–¢–ê–ï–¢: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {expected_count - found_count} –µ–¥–∏–Ω–∏—Ü")
                    self.test_results["critical_issues"].append(
                        f"–ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found_count} –∏–∑ {expected_count} –µ–¥–∏–Ω–∏—Ü (–Ω–µ–¥–æ—Å—Ç–∞–µ—Ç {expected_count - found_count})"
                    )
                else:
                    self.log(f"   ‚ö†Ô∏è –ò–ó–ë–´–¢–û–ö: –Ω–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å (+{found_count - expected_count})")
            else:
                self.log(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞—è–≤–æ–∫
        self.log(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–ï–ú–´–• –ó–ê–Ø–í–û–ö:")
        missing_applications = []
        
        for expected_app in EXPECTED_APPLICATIONS:
            if expected_app in applications_found:
                found_count = len(applications_found[expected_app])
                expected_count = EXPECTED_UNITS_PER_APP[expected_app]
                status = "‚úÖ" if found_count == expected_count else "‚ùå"
                self.log(f"{status} –ó–∞—è–≤–∫–∞ {expected_app}: –Ω–∞–π–¥–µ–Ω–∞ ({found_count}/{expected_count})")
            else:
                self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {expected_app}: –ù–ï –ù–ê–ô–î–ï–ù–ê!")
                missing_applications.append(expected_app)
                self.test_results["critical_issues"].append(f"–ó–∞—è–≤–∫–∞ {expected_app} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ API –æ—Ç–≤–µ—Ç–µ")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫
        if missing_applications:
            self.log(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ó–ê–Ø–í–û–ö:")
            for missing_app in missing_applications:
                expected_units = EXPECTED_UNITS_PER_APP[missing_app]
                self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {missing_app}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_units} –µ–¥–∏–Ω–∏—Ü, –Ω–∞–π–¥–µ–Ω–æ 0")
                self.log(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                self.log(f"   - –ó–∞—è–≤–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–∫–ª–∞–¥–µ")
                self.log(f"   - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ warehouse_id")
                self.log(f"   - –ó–∞—è–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ø–æ–¥ –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º")
                self.log(f"   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö placement_records")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        self.test_results["applications_analysis"] = {
            app: len(cargos) for app, cargos in applications_found.items()
        }
    
    def test_placement_progress_comparison(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API placement-progress"""
        self.log("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° API placement-progress")
        self.log("-" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/operator/placement-progress")
            
            if response.status_code == 200:
                data = response.json()
                
                total_units = data.get("total_units", 0)
                placed_units = data.get("placed_units", 0)
                pending_units = data.get("pending_units", 0)
                progress_percentage = data.get("progress_percentage", 0)
                
                self.log(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
                self.log(f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}")
                self.log(f"   –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {placed_units}")
                self.log(f"   –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {pending_units}")
                self.log(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage}%")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo
                layout_found = self.test_results["placement_records_found"]
                self.log(f"\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
                self.log(f"   placement-progress placed_units: {placed_units}")
                self.log(f"   layout-with-cargo –Ω–∞–π–¥–µ–Ω–æ: {layout_found}")
                self.log(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {EXPECTED_TOTAL_UNITS}")
                
                if placed_units == layout_found:
                    self.log(f"   ‚úÖ API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π")
                else:
                    self.log(f"   ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ú–ï–ñ–î–£ API: {abs(placed_units - layout_found)} –µ–¥–∏–Ω–∏—Ü")
                    self.test_results["critical_issues"].append(
                        f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É placement-progress ({placed_units}) –∏ layout-with-cargo ({layout_found})"
                    )
                
                if placed_units == EXPECTED_TOTAL_UNITS:
                    self.log(f"   ‚úÖ placement-progress —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    self.log(f"   ‚ùå placement-progress –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º: {abs(placed_units - EXPECTED_TOTAL_UNITS)} –µ–¥–∏–Ω–∏—Ü —Ä–∞–∑–Ω–∏—Ü–∞")
                
                if layout_found == EXPECTED_TOTAL_UNITS:
                    self.log(f"   ‚úÖ layout-with-cargo —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    self.log(f"   ‚ùå layout-with-cargo –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º: {abs(layout_found - EXPECTED_TOTAL_UNITS)} –µ–¥–∏–Ω–∏—Ü —Ä–∞–∑–Ω–∏—Ü–∞")
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-progress: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ placement-progress: {e}", "ERROR")
            return False
    
    def generate_final_diagnosis_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001")
        self.log(f"üìÖ –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üè¢ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥: {TARGET_WAREHOUSE}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞: {'‚úÖ –ù–ê–ô–î–ï–ù' if self.test_results['warehouse_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        self.log(f"  3. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API layout-with-cargo: {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.test_results['api_accessible'] else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        
        if self.test_results['warehouse_found'] and self.test_results['warehouse_details']:
            details = self.test_results['warehouse_details']
            self.log(f"     –°–∫–ª–∞–¥ ID: {details.get('id', 'N/A')}")
            self.log(f"     –°–∫–ª–∞–¥ –Ω–æ–º–µ—Ä: {details.get('warehouse_id_number', '–ù–ï–¢')}")
            self.log(f"     –°–∫–ª–∞–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ: {details.get('name', 'N/A')}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        found_records = self.test_results["placement_records_found"]
        expected_records = self.test_results["expected_records"]
        missing_records = self.test_results["missing_records"]
        
        self.log(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:")
        self.log(f"  –û–∂–∏–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é): {expected_records}")
        self.log(f"  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π (API layout-with-cargo): {found_records}")
        self.log(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å–µ–π: {missing_records}")
        
        if missing_records > 0:
            percentage_found = (found_records / expected_records) * 100
            self.log(f"  ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: API –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ {percentage_found:.1f}% –æ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π!")
            self.log(f"  üîç –ü—Ä–æ–ø—É—â–µ–Ω–æ {missing_records} –∏–∑ {expected_records} –∑–∞–ø–∏—Å–µ–π")
        elif missing_records == 0:
            self.log(f"  ‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            self.log(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å (+{abs(missing_records)})")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞—è–≤–∫–∞–º
        if self.test_results["applications_analysis"]:
            self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ó–ê–Ø–í–ö–ê–ú:")
            total_found = 0
            total_expected = 0
            
            for app_number, found_count in self.test_results["applications_analysis"].items():
                expected_count = EXPECTED_UNITS_PER_APP.get(app_number, 0)
                total_found += found_count
                
                if expected_count > 0:
                    total_expected += expected_count
                    status = "‚úÖ" if found_count == expected_count else "‚ùå"
                    self.log(f"  {status} –ó–∞—è–≤–∫–∞ {app_number}: {found_count}/{expected_count}")
                    
                    if found_count < expected_count:
                        self.log(f"      ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞–µ—Ç {expected_count - found_count} –µ–¥–∏–Ω–∏—Ü")
                else:
                    self.log(f"  ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ {app_number}: {found_count} (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫
            for expected_app in EXPECTED_APPLICATIONS:
                if expected_app not in self.test_results["applications_analysis"]:
                    expected_count = EXPECTED_UNITS_PER_APP[expected_app]
                    total_expected += expected_count
                    self.log(f"  ‚ùå –ó–∞—è–≤–∫–∞ {expected_app}: 0/{expected_count} (–ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–°–£–¢–°–¢–í–£–ï–¢)")
            
            self.log(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
            self.log(f"  –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {total_found}")
            self.log(f"  –û–∂–∏–¥–∞–ª–æ—Å—å –µ–¥–∏–Ω–∏—Ü: {total_expected}")
            self.log(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö: {(total_found/total_expected)*100:.1f}%")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.test_results["critical_issues"]:
            self.log(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.test_results['critical_issues'])} —à—Ç.):")
            for i, issue in enumerate(self.test_results["critical_issues"], 1):
                self.log(f"  {i}. {issue}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó:")
        if missing_records == 0 and not self.test_results["critical_issues"]:
            self.log("‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("üìä –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã")
            self.log("üéâ –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
            self.log(f"üîç API layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ {found_records} –∏–∑ {expected_records} –∑–∞–ø–∏—Å–µ–π")
            self.log(f"üìâ –ü–æ—Ç–µ—Ä—è–Ω–æ {missing_records} –∑–∞–ø–∏—Å–µ–π ({abs(missing_records/expected_records)*100:.1f}%)")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            self.log("  1. üîç –ü–†–û–í–ï–†–ò–¢–¨ –õ–û–ì–ò–ö–£ –ü–û–ò–°–ö–ê placement_records:")
            self.log("     - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º warehouse_id")
            self.log("     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ UUID, –Ω–æ–º–µ—Ä—É —Å–∫–ª–∞–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏—é")
            self.log("     - –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            self.log("  2. üóÑÔ∏è –ü–†–û–í–ï–†–ò–¢–¨ –ë–ê–ó–£ –î–ê–ù–ù–´–•:")
            self.log("     - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ placement_records —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            self.log("     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å warehouse_id –≤ –∑–∞–ø–∏—Å—è—Ö")
            self.log("     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞")
            
            self.log("  3. üîß –ò–°–ü–†–ê–í–ò–¢–¨ API ENDPOINT:")
            self.log("     - –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –≤ API")
            self.log("     - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å–∫–ª–∞–¥–∞ '001'")
            self.log("     - –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ warehouse_id")
            
            if not self.test_results["warehouse_found"]:
                self.log("  4. üè¢ –ö–†–ò–¢–ò–ß–ù–û: –ò–°–ü–†–ê–í–ò–¢–¨ –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Æ –°–ö–õ–ê–î–ê:")
                self.log("     - –î–æ–±–∞–≤–∏—Ç—å warehouse_id_number = '001' –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                self.log("     - –ò–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –≤ API")
        
        return missing_records == 0 and not self.test_results["critical_issues"]
    
    def run_corrected_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API layout-with-cargo")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞
        if not self.find_warehouse():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π endpoint)
        if not self.test_layout_with_cargo_api():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å placement-progress
        self.test_placement_progress_comparison()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        diagnosis_success = self.generate_final_diagnosis_report()
        
        return diagnosis_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnoser = CorrectedLayoutWithCargoDiagnoser()
    
    try:
        success = diagnoser.run_corrected_diagnosis()
        
        if success:
            print("\n" + "="*80)
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
            print("üìä API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üéØ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã")
            print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
            print("üîç API layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã")
            print("üìâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤ - API –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø–∏—Å–∏")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ placement_records")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()