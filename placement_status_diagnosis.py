#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø API placement-status
==========================================

–¶–µ–ª—å: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è API placement-status
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class PlacementStatusDiagnoser:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_warehouses_data(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–ª–∞–¥–∞—Ö"""
        self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤")
                
                for warehouse in warehouses:
                    self.log(f"  üì¶ –°–∫–ª–∞–¥: {warehouse.get('name')} (ID: {warehouse.get('id')})")
                    self.log(f"      - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse.get('location')}")
                    self.log(f"      - –ê–¥—Ä–µ—Å: {warehouse.get('address')}")
                    
                return warehouses
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}", "ERROR")
            return []
    
    def get_all_cities(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞"""
        self.log("üåç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/all-cities")
            
            if response.status_code == 200:
                cities = response.json()
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤: {cities}")
                return cities
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤: {e}", "ERROR")
            return []
    
    def analyze_cargo_data(self, cargo_id):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        self.log(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ {cargo_id}...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/{cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                
                self.log("üìã –ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –ó–ê–Ø–í–ö–ò:")
                self.log("=" * 50)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
                fields_to_analyze = [
                    'sender_full_name', 'sender_phone', 'sender_address',
                    'recipient_full_name', 'recipient_phone', 'recipient_address',
                    'pickup_city', 'delivery_city',
                    'source_warehouse_name', 'target_warehouse_name',
                    'accepting_warehouse', 'delivery_warehouse',
                    'operator_full_name', 'operator_phone'
                ]
                
                for field in fields_to_analyze:
                    value = data.get(field, '–û–¢–°–£–¢–°–¢–í–£–ï–¢')
                    status = "‚úÖ" if value not in ['–ù–µ —É–∫–∞–∑–∞–Ω', '–û–¢–°–£–¢–°–¢–í–£–ï–¢', None, ''] else "‚ùå"
                    self.log(f"  {status} {field}: {value}")
                
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞—è–≤–∫–∏: {e}", "ERROR")
            return None
    
    def suggest_improvements(self, cargo_data, warehouses, cities):
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è API"""
        self.log("\nüîß –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ API placement-status:")
        self.log("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥–æ–≤
        if cargo_data.get('pickup_city') == '–ù–µ —É–∫–∞–∑–∞–Ω':
            self.log("1. üåç –ì–û–†–û–î–ê:")
            self.log("   - pickup_city –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")
            self.log("   - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sender_address –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞")
            self.log("   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ:", cities[:5] if cities else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
        if cargo_data.get('source_warehouse_name') == '–ù–µ —É–∫–∞–∑–∞–Ω':
            self.log("2. üè¢ –°–ö–õ–ê–î–´:")
            self.log("   - source_warehouse_name –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")
            self.log("   - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            if warehouses:
                self.log(f"   - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {[w.get('name') for w in warehouses]}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if cargo_data.get('operator_full_name') == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä':
            self.log("3. üë§ –û–ü–ï–†–ê–¢–û–†–´:")
            self.log("   - operator_full_name –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("   - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            self.log(f"   - –¢–µ–∫—É—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {self.operator_info.get('full_name')} ({self.operator_info.get('phone')})")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        self.log("\nüí° –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:")
        self.log("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å warehouse_id —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è source_warehouse_name")
        self.log("2. –ü–∞—Ä—Å–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –∏–∑ sender_address –∏ recipient_address")
        self.log("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è operator_full_name –∏ operator_phone")
        self.log("4. –î–æ–±–∞–≤–∏—Ç—å fallback –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä—à—Ä—É—Ç–∞ (route)")
        self.log("5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lookup –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö users –∏ warehouses –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
    
    def run_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø placement-status API")
        self.log("=" * 70)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö
        warehouses = self.get_warehouses_data()
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
        cities = self.get_all_cities()
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            if response.status_code == 200:
                applications = response.json()
                items = applications if isinstance(applications, list) else applications.get("items", [])
                
                if items:
                    first_app = items[0]
                    cargo_id = first_app.get("id")
                    
                    # 5. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
                    cargo_data = self.analyze_cargo_data(cargo_id)
                    
                    if cargo_data:
                        # 6. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                        self.suggest_improvements(cargo_data, warehouses, cities)
                        
                        return True
                else:
                    self.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnoser = PlacementStatusDiagnoser()
    
    try:
        success = diagnoser.run_diagnosis()
        
        if success:
            print("\n" + "="*70)
            print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            print("\n" + "="*70)
            print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")

if __name__ == "__main__":
    main()