#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ "–†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã"

–ü–†–û–ë–õ–ï–ú–ê: –ì—Ä—É–∑—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã"

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. Frontend: –û–±–Ω–æ–≤–ª–µ–Ω fetchPlacedCargo - —Ç–µ–ø–µ—Ä—å –∏—â–µ—Ç —Å—Ç–∞—Ç—É—Å—ã 'placed,placement_ready'
2. Backend: –û–±–Ω–æ–≤–ª–µ–Ω endpoint /api/warehouses/placed-cargo - —Ç–µ–ø–µ—Ä—å –∏—â–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo 
   –∏ –≤–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã "placed_in_warehouse" –∏ "placement_ready"

–¢–ï–°–¢–´:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢: GET /api/warehouses/placed-cargo - –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "placement_ready"
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≥—Ä—É–∑—ã –∏–∑ operator_cargo —Å pickup_request_id –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≥—Ä—É–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ request_number/01, request_number/02
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class PlacedCargoTester:
    def __init__(self, base_url="https://tajline-cargo-8.preview.emergentagent.com"):
        self.base_url = base_url
        self.token = None
        self.user_data = None
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω API —Ç–µ—Å—Ç"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if self.token:
            headers['Authorization'] = f'Bearer {self.token}'

        self.tests_run += 1
        print(f"\nüîç –¢–µ—Å—Ç {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")

            print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞
            try:
                response_data = response.json()
            except:
                response_data = {"raw_response": response.text}

            success = response.status_code == expected_status
            if success:
                print(f"   ‚úÖ –£–°–ü–ï–•")
                self.tests_passed += 1
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å {expected_status}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                if response_data:
                    print(f"   üìÑ –û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False, indent=2)}")

            return success, response_data

        except Exception as e:
            print(f"   üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {str(e)}")
            return False, {"error": str(e)}

    def test_operator_authentication(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print(f"\n{'='*60}")
        print("üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print(f"{'='*60}")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            "POST", "/api/auth/login", 200, login_data
        )
        
        if success and "access_token" in response:
            self.token = response["access_token"]
            print(f"   üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.token[:50]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            success, user_response = self.run_test(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                "GET", "/api/auth/me", 200
            )
            
            if success:
                self.user_data = user_response
                print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_response.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   üè∑Ô∏è –†–æ–ª—å: {user_response.get('role', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_response.get('phone', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   üÜî ID: {user_response.get('user_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return True
        
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return False

    def test_placed_cargo_endpoint(self):
        """–¢–µ—Å—Ç 2: –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ - GET /api/warehouses/placed-cargo"""
        print(f"\n{'='*60}")
        print("üéØ –≠–¢–ê–ü 2: –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ - –ü–û–õ–£–ß–ï–ù–ò–ï –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ì–†–£–ó–û–í")
        print(f"{'='*60}")
        
        if not self.token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
        success, response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
            "GET", "/api/warehouses/placed-cargo", 200,
            params={"page": 1, "per_page": 25}
        )
        
        if not success:
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        print(f"\n   üìä –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê:")
        
        if "items" not in response:
            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ")
            return False
        
        if "pagination" not in response:
            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'pagination' –≤ –æ—Ç–≤–µ—Ç–µ")
            return False
        
        items = response["items"]
        pagination = response["pagination"]
        
        print(f"   üì¶ –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {pagination.get('total', 0)}")
        print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {pagination.get('page', 0)}")
        print(f"   üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(items)}")
        print(f"   üìö –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {pagination.get('pages', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º placement_ready
        placement_ready_count = 0
        pickup_request_count = 0
        request_format_count = 0
        
        print(f"\n   üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ì–†–£–ó–û–í:")
        
        for i, cargo in enumerate(items):
            cargo_number = cargo.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            status = cargo.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            pickup_request_id = cargo.get("pickup_request_id")
            
            print(f"   üì¶ –ì—Ä—É–∑ {i+1}: {cargo_number}")
            print(f"      üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            if status == "placement_ready":
                placement_ready_count += 1
                print(f"      ‚úÖ –°—Ç–∞—Ç—É—Å 'placement_ready' –Ω–∞–π–¥–µ–Ω")
            
            if pickup_request_id:
                pickup_request_count += 1
                print(f"      üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–∞ (request_number/01, request_number/02)
            if "/" in cargo_number:
                request_format_count += 1
                print(f"      üìã –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏: {cargo_number}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            warehouse_name = cargo.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            processing_status = cargo.get("processing_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            print(f"      üè≠ –°–∫–ª–∞–¥: {warehouse_name}")
            print(f"      ‚öôÔ∏è –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_status}")
        
        print(f"\n   üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –ì—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready': {placement_ready_count}")
        print(f"   üöö –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä (—Å pickup_request_id): {pickup_request_count}")
        print(f"   üìã –ì—Ä—É–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞—è–≤–∫–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç '/'): {request_format_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        success_criteria = []
        
        if placement_ready_count > 0:
            success_criteria.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready'")
        else:
            success_criteria.append("‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready'")
        
        if pickup_request_count > 0:
            success_criteria.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        else:
            success_criteria.append("‚ö†Ô∏è –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä (–≤–æ–∑–º–æ–∂–Ω–æ –∏—Ö –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ)")
        
        if request_format_count > 0:
            success_criteria.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞—è–≤–∫–∏")
        else:
            success_criteria.append("‚ö†Ô∏è –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞—è–≤–∫–∏")
        
        print(f"\n   üéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
        for criterion in success_criteria:
            print(f"   {criterion}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π - endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
        return True

    def test_pagination_and_filtering(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        print(f"\n{'='*60}")
        print("üìÑ –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
        print(f"{'='*60}")
        
        if not self.token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        test_params = [
            {"page": 1, "per_page": 10},
            {"page": 1, "per_page": 5},
            {"page": 2, "per_page": 10}
        ]
        
        for params in test_params:
            success, response = self.run_test(
                f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {params['page']}, –ø–æ {params['per_page']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                "GET", "/api/warehouses/placed-cargo", 200,
                params=params
            )
            
            if success:
                pagination = response.get("pagination", {})
                items_count = len(response.get("items", []))
                print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ {items_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.get('page')}/{pagination.get('pages')}")
                print(f"   üìà –í—Å–µ–≥–æ: {pagination.get('total')}")
        
        return True

    def test_additional_endpoints(self):
        """–¢–µ—Å—Ç 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ endpoints"""
        print(f"\n{'='*60}")
        print("üîó –≠–¢–ê–ü 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–í–Ø–ó–ê–ù–ù–´–ï ENDPOINTS")
        print(f"{'='*60}")
        
        if not self.token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ endpoints
        additional_tests = [
            ("–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "GET", "/api/operator/warehouses", 200),
            ("–ì—Ä—É–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "GET", "/api/operator/cargo/available-for-placement", 200),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "GET", "/api/operator/placement-statistics", 200)
        ]
        
        for name, method, endpoint, expected_status in additional_tests:
            success, response = self.run_test(name, method, endpoint, expected_status)
            
            if success and endpoint == "/api/operator/warehouses":
                warehouses = response if isinstance(response, list) else response.get("items", [])
                print(f"   üè≠ –ù–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
                for wh in warehouses[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"      üìç {wh.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {wh.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        return True

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print(f"üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†")
        print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.test_operator_authentication():
            print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –≠—Ç–∞–ø 2: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        if not self.test_placed_cargo_endpoint():
            print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Å–Ω–æ–≤–Ω–æ–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –≠—Ç–∞–ø 3: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        self.test_pagination_and_filtering()
        
        # –≠—Ç–∞–ø 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints
        self.test_additional_endpoints()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{'='*80}")
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"{'='*80}")
        print(f"üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.tests_passed}")
        print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {self.tests_run - self.tests_passed}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.tests_passed/self.tests_run*100):.1f}%")
        
        success_rate = self.tests_passed / self.tests_run if self.tests_run > 0 else 0
        
        if success_rate >= 0.8:
            print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        else:
            print(f"\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò")
            print(f"‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        
        print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return success_rate >= 0.8

if __name__ == "__main__":
    tester = PlacedCargoTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)