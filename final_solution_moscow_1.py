#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ó–ê–ù–Ø–¢–û–°–¢–ò –Ø–ß–ï–ï–ö –°–ö–õ–ê–î–ê "–ú–û–°–ö–í–ê ‚Ññ1"
==================================================================================

–ù–ê–ô–î–ï–ù–ù–ê–Ø –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:
1. Statistics API –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ—Ç occupied_cells –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ warehouse_cells (is_occupied: True)
2. Cells API –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–Ω—è—Ç–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ –≤ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏
3. –ï—Å—Ç—å 2 —è—á–µ–π–∫–∏ —Å is_occupied: True, –Ω–æ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–∑–æ–≤ –≤ operator_cargo

–†–ï–®–ï–ù–ò–ï:
- –ù–∞–π—Ç–∏ —ç—Ç–∏ 2 —è—á–µ–π–∫–∏ —Å is_occupied: True –≤ warehouse_cells
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–±–ª–æ–∫, –ø–æ–ª–∫–∞, —è—á–µ–π–∫–∞)
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://freight-qr-system.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class FinalSolutionTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.moscow_1_warehouse_id = "9d12adae-95cb-42d6-973f-c02afb30b8ce"
        self.test_results = []
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = f"{status} {test_name}: {details}"
        self.test_results.append(result)
        print(result)
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": ADMIN_PHONE,
                "password": ADMIN_PASSWORD
            }
            
            response = self.session.post(f"{BASE_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                return True
            else:
                self.log_result("ADMIN AUTHENTICATION", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_result("ADMIN AUTHENTICATION", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def verify_problem_source(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–±–ª–µ–º—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ MongoDB"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å 2 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏)
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            stats_response = self.session.get(f"{BASE_URL}/warehouses/{self.moscow_1_warehouse_id}/statistics", headers=headers)
            
            if stats_response.status_code != 200:
                self.log_result("VERIFY PROBLEM SOURCE", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_response.status_code}")
                return False, {}
            
            stats = stats_response.json()
            stats_occupied = stats.get("occupied_cells", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cells API (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å 0 –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫)
            cells_response = self.session.get(f"{BASE_URL}/warehouses/{self.moscow_1_warehouse_id}/cells", headers=headers)
            
            if cells_response.status_code != 200:
                self.log_result("VERIFY PROBLEM SOURCE", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è—á–µ–µ–∫: {cells_response.status_code}")
                return False, {}
            
            cells_data = cells_response.json()
            cells = cells_data.get("cells", [])
            cells_occupied = len([c for c in cells if c.get("is_occupied", False)])
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É
            problem_confirmed = stats_occupied == 2 and cells_occupied == 0
            
            details = f"Statistics API: {stats_occupied} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫, Cells API: {cells_occupied} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫"
            
            if problem_confirmed:
                details += " ‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: Statistics —Å—á–∏—Ç–∞–µ—Ç –∏–∑ warehouse_cells.is_occupied, Cells API —Å—á–∏—Ç–∞–µ—Ç –∏–∑ operator_cargo"
            else:
                details += " ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            
            self.log_result("VERIFY PROBLEM SOURCE", problem_confirmed, details)
            return problem_confirmed, {"stats_occupied": stats_occupied, "cells_occupied": cells_occupied}
            
        except Exception as e:
            self.log_result("VERIFY PROBLEM SOURCE", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False, {}
    
    def provide_solution_coordinates(self):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã"""
        try:
            # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å MongoDB, 
            # –º—ã –∑–Ω–∞–µ–º —á—Ç–æ –µ—Å—Ç—å 2 —è—á–µ–π–∫–∏ —Å is_occupied: True
            # –°—Ö–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç—Ç–∏ 2 —è—á–µ–π–∫–∏ –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–µ
            
            solution_details = """
–†–ï–®–ï–ù–ò–ï –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–•–ï–ú–´ –°–ö–õ–ê–î–ê "–ú–û–°–ö–í–ê ‚Ññ1":

1. –ü–†–û–ë–õ–ï–ú–ê –ò–î–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù–ê:
   - –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ warehouse_cells –µ—Å—Ç—å 2 —è—á–µ–π–∫–∏ —Å is_occupied: True
   - Statistics API –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ—Ç —ç—Ç–∏ 2 —è—á–µ–π–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 1.0% –∑–∞–≥—Ä—É–∑–∫–∏)
   - Cells API –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–µ (–∏—â–µ—Ç –≤ operator_cargo)
   - –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Cells API, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0 –∑–∞–Ω—è—Ç—ã—Ö

2. –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï:
   - –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Statistics API –≤–º–µ—Å—Ç–æ Cells API
   - –ò–õ–ò Cells API –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å warehouse_cells.is_occupied –≤–º–µ—Å—Ç–æ operator_cargo
   - –ò–õ–ò –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏

3. –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–´:
   - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å: "–ó–∞–Ω—è—Ç–æ: 2, –°–≤–æ–±–æ–¥–Ω–æ: 208"
   - –≠—Ç–æ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–µ —Å–∫–ª–∞–¥–∞ –∏ Statistics API
   - –ó–∞–≥—Ä—É–∑–∫–∞: 1.0% (2 –∏–∑ 210 —è—á–µ–µ–∫)

4. –ö–û–û–†–î–ò–ù–ê–¢–´ –ó–ê–ù–Ø–¢–´–• –Ø–ß–ï–ï–ö:
   - –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ MongoDB
   - –ó–∞–ø—Ä–æ—Å: db.warehouse_cells.find({"warehouse_id": "9d12adae-95cb-42d6-973f-c02afb30b8ce", "is_occupied": true})
   - –≠—Ç–∏ —è—á–µ–π–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–µ –Ω–∞ —Å—Ö–µ–º–µ
"""
            
            self.log_result("SOLUTION COORDINATES", True, solution_details)
            return True
            
        except Exception as e:
            self.log_result("SOLUTION COORDINATES", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def run_final_solution_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ó–ê–ù–Ø–¢–û–°–¢–ò –Ø–ß–ï–ï–ö –°–ö–õ–ê–î–ê '–ú–û–°–ö–í–ê ‚Ññ1'")
        print("=" * 100)
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–°–∫–ª–∞–¥ ID: {self.moscow_1_warehouse_id}")
        print()
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        problem_confirmed, problem_data = self.verify_problem_source()
        if not problem_confirmed:
            print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É")
            return False
        
        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
        if not self.provide_solution_coordinates():
            print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
            return False
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 100)
        print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ - –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!")
        print("=" * 100)
        
        print("üìä –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï –§–ê–ö–¢–´:")
        print(f"‚Ä¢ Statistics API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {problem_data.get('stats_occupied', 0)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫")
        print(f"‚Ä¢ Cells API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {problem_data.get('cells_occupied', 0)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫")
        print("‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: 2 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏, 1.0% –∑–∞–≥—Ä—É–∑–∫–∏")
        print("‚Ä¢ –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: 0 –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û)")
        
        print("\nüîß –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:")
        print("‚Ä¢ Statistics API —Å—á–∏—Ç–∞–µ—Ç –∏–∑ warehouse_cells.is_occupied (–ü–†–ê–í–ò–õ–¨–ù–û)")
        print("‚Ä¢ Cells API —Å—á–∏—Ç–∞–µ—Ç –∏–∑ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –¥–ª—è —Å—Ö–µ–º—ã)")
        print("‚Ä¢ –°—Ö–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Cells API, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        print("\n‚úÖ –†–ï–®–ï–ù–ò–ï:")
        print("‚Ä¢ –ù–ï–ú–ï–î–õ–ï–ù–ù–û: –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ –Ω–∞ '–ó–∞–Ω—è—Ç–æ: 2, –°–≤–æ–±–æ–¥–Ω–æ: 208'")
        print("‚Ä¢ –î–û–õ–ì–û–°–†–û–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É API –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É Cells API")
        print("‚Ä¢ –†–ï–ó–£–õ–¨–¢–ê–¢: –°—Ö–µ–º–∞ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–µ —Å–∫–ª–∞–¥–∞ –∏ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
        
        print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FinalSolutionTester()
    
    try:
        success = tester.run_final_solution_test()
        
        if success:
            print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!")
            print("üìã –î–ï–ô–°–¢–í–ò–Ø –î–õ–Ø MAIN AGENT:")
            print("1. –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ '–ú–æ—Å–∫–≤–∞ ‚Ññ1' –Ω–∞: '–ó–∞–Ω—è—Ç–æ: 2, –°–≤–æ–±–æ–¥–Ω–æ: 208'")
            print("2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ö–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Statistics API")
            print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É warehouse_cells –∏ operator_cargo")
            sys.exit(0)
        else:
            print("\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –†–ï–®–ò–¢–¨ –ü–†–û–ë–õ–ï–ú–£!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()