#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í–ï–°–û–í –ò –¶–ï–ù –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ì–†–£–ó–û–í –í TAJLINE.TJ

–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Å–æ–≤ –∏ —Ü–µ–Ω –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ:

–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: GET /api/operator/warehouse-notifications
3. –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å pickup_request_id
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GET /api/operator/pickup-requests/{pickup_request_id} –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:
   - –°—Ç—Ä—É–∫—Ç—É—Ä—É cargo_info
   - –ï—Å—Ç—å –ª–∏ –º–∞—Å—Å–∏–≤ cargo_items —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏?
   - –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞?
   - –ò–ª–∏ –≤—Å–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è –≤ cargo_name –∏ –æ–±—â–∏–µ weight/total_value?

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
5. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –≥–¥–µ –∫—É—Ä—å–µ—Ä –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ù–ï–°–ö–û–õ–¨–ö–û –≥—Ä—É–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏:
   - –ì—Ä—É–∑ 1: "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫" - 50 –∫–≥ - 15000 ‚ÇΩ
   - –ì—Ä—É–∑ 2: "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä" - 25 –∫–≥ - 10000 ‚ÇΩ
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç endpoint modal_data

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏ —Ü–µ–Ω—ã –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è/–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´:
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏ backend –æ—Ç–¥–µ–ª—å–Ω—ã–µ cargo_items –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö?
- –ö–∞–∫ –∫—É—Ä—å–µ—Ä –∑–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–∑–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏?
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É?
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-tracker-33.preview.emergentagent.com/api"

class MultipleCargoInvestigationTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.courier_token = None
        self.admin_token = None
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
        
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                user_info = data.get("user", {})
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')}")
                print(f"   –†–æ–ª—å: {user_info.get('role', 'Unknown')}")
                print(f"   –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('user_number', 'Unknown')}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def authenticate_courier(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞"""
        print("üîê –≠–¢–ê–ü 2: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê (+79991234567/courier123)")
        
        login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                self.courier_token = data.get("access_token")
                user_info = data.get("user", {})
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')}")
                print(f"   –†–æ–ª—å: {user_info.get('role', 'Unknown')}")
                print(f"   –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('user_number', 'Unknown')}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_warehouse_notifications(self):
        """–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞"""
        print("üìã –≠–¢–ê–ü 3: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê")
        
        if not self.operator_token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return []
        
        headers = {"Authorization": f"Bearer {self.operator_token}"}
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouse-notifications", headers=headers)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                notifications = data.get("notifications", [])
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
                
                # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å pickup_request_id
                pickup_notifications = []
                for notification in notifications:
                    if notification.get("pickup_request_id"):
                        pickup_notifications.append(notification)
                        print(f"   üì¶ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å pickup_request_id: {notification.get('pickup_request_id')}")
                        print(f"      ID: {notification.get('id')}")
                        print(f"      –°—Ç–∞—Ç—É—Å: {notification.get('status')}")
                        print(f"      –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.get('message', '')[:100]}...")
                
                return pickup_notifications
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.text}")
                return []
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    def investigate_pickup_request(self, pickup_request_id):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞"""
        print(f"üîç –≠–¢–ê–ü 4: –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê {pickup_request_id}")
        
        if not self.operator_token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return None
        
        headers = {"Authorization": f"Bearer {self.operator_token}"}
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests/{pickup_request_id}", headers=headers)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞:")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_info
                cargo_info = data.get("cargo_info", {})
                print(f"   üì¶ CARGO_INFO —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
                print(f"      –¢–∏–ø: {type(cargo_info)}")
                print(f"      –ö–ª—é—á–∏: {list(cargo_info.keys()) if isinstance(cargo_info, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_items
                cargo_items = cargo_info.get("cargo_items", []) if isinstance(cargo_info, dict) else []
                print(f"   üìã CARGO_ITEMS:")
                print(f"      –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(cargo_items)}")
                
                if cargo_items:
                    print("   üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO_ITEMS:")
                    for i, item in enumerate(cargo_items, 1):
                        print(f"      –ì—Ä—É–∑ {i}:")
                        print(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"         –í–µ—Å: {item.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"         –¶–µ–Ω–∞: {item.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"         –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {item.get('total_price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"         –í—Å–µ –ø–æ–ª—è: {list(item.keys())}")
                else:
                    print("   ‚ö†Ô∏è CARGO_ITEMS –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø–æ–ª—è
                    print("   üîç –ü–†–û–í–ï–†–ö–ê –û–ë–©–ò–• –ü–û–õ–ï–ô:")
                    print(f"      cargo_name: {cargo_info.get('cargo_name', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      weight: {cargo_info.get('weight', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      total_value: {cargo_info.get('total_value', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      declared_value: {cargo_info.get('declared_value', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                
                # –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
                print("   üìÑ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:")
                print(json.dumps(data, indent=2, ensure_ascii=False)[:2000] + "..." if len(str(data)) > 2000 else json.dumps(data, indent=2, ensure_ascii=False))
                
                return data
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.text}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    def create_test_pickup_request_with_multiple_cargo(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏"""
        print("üöö –≠–¢–ê–ü 5: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò")
        
        if not self.operator_token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return None
        
        headers = {"Authorization": f"Bearer {self.operator_token}"}
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
        pickup_request_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ì—Ä—É–∑–æ–≤",
            "sender_phone": "+79998887766",
            "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, 123",
            "pickup_date": "2025-01-20",
            "pickup_time_from": "10:00",
            "pickup_time_to": "18:00",
            "route": "moscow_to_tajikistan",
            "courier_fee": 500.0,
            "destination": "–î—É—à–∞–Ω–±–µ",
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
            "cargo_items": [
                {
                    "name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
                    "weight": 50.0,
                    "price": 15000.0,
                    "description": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ Samsung –¥–≤—É—Ö–∫–∞–º–µ—Ä–Ω—ã–π"
                },
                {
                    "name": "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", 
                    "weight": 25.0,
                    "price": 10000.0,
                    "description": "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä LG –Ω–∞—Å—Ç–µ–Ω–Ω—ã–π"
                }
            ],
            "total_weight": 75.0,
            "total_value": 25000.0,
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/admin/courier/pickup-request", json=pickup_request_data, headers=headers)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                request_id = data.get("request_id")
                request_number = data.get("request_number")
                print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
                print(f"      ID: {request_id}")
                print(f"      –ù–æ–º–µ—Ä: {request_number}")
                print(f"      –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã:")
                print(f"         1. –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ - 50 –∫–≥ - 15000 ‚ÇΩ")
                print(f"         2. –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä - 25 –∫–≥ - 10000 ‚ÇΩ")
                print(f"      –û–±—â–∏–π –≤–µ—Å: 75 –∫–≥")
                print(f"      –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 25000 ‚ÇΩ")
                
                return request_id
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.text}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    def simulate_courier_workflow_with_multiple_cargo(self, request_id):
        """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å workflow –∫—É—Ä—å–µ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏"""
        print(f"üë®‚Äçüíº –≠–¢–ê–ü 6: –°–ò–ú–£–õ–Ø–¶–ò–Ø WORKFLOW –ö–£–†–¨–ï–†–ê –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò")
        
        if not self.courier_token or not request_id:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∫—É—Ä—å–µ—Ä–∞ –∏–ª–∏ ID –∑–∞—è–≤–∫–∏")
            return False
        
        headers = {"Authorization": f"Bearer {self.courier_token}"}
        
        # 1. –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É
        print("   üìù –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º...")
        try:
            response = self.session.post(f"{BACKEND_URL}/courier/requests/{request_id}/accept", headers=headers)
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                print("      ‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–º")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {response.text}")
                return False
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False
        
        # 2. –ó–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑
        print("   üì¶ –ó–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º...")
        try:
            response = self.session.post(f"{BACKEND_URL}/courier/requests/{request_id}/pickup", headers=headers)
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                print("      ‚úÖ –ì—Ä—É–∑ –∑–∞–±—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–æ–º")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞: {response.text}")
                return False
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–±–æ—Ä–µ –≥—Ä—É–∑–∞: {e}")
            return False
        
        # 3. –°–¥–∞—Ç—å –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥
        print("   üè¢ –°–¥–∞—á–∞ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥...")
        try:
            response = self.session.post(f"{BACKEND_URL}/courier/requests/{request_id}/deliver-to-warehouse", headers=headers)
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                notification_id = data.get("notification_id")
                print(f"      ‚úÖ –ì—Ä—É–∑ —Å–¥–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥")
                print(f"      –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_id}")
                return notification_id
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–¥–∞—á–∏ –≥—Ä—É–∑–∞: {response.text}")
                return False
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–¥–∞—á–µ –≥—Ä—É–∑–∞: {e}")
            return False
    
    def investigate_notification_modal_data(self, notification_id):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        print(f"üîç –≠–¢–ê–ü 7: –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø {notification_id}")
        
        if not self.operator_token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return None
        
        headers = {"Authorization": f"Bearer {self.operator_token}"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouse-notifications", headers=headers)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                notifications = data.get("notifications", [])
                
                # –ò—â–µ–º –Ω–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                target_notification = None
                for notification in notifications:
                    if notification.get("id") == notification_id:
                        target_notification = notification
                        break
                
                if target_notification:
                    print("   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:")
                    print(f"      ID: {target_notification.get('id')}")
                    print(f"      –°—Ç–∞—Ç—É—Å: {target_notification.get('status')}")
                    print(f"      pickup_request_id: {target_notification.get('pickup_request_id')}")
                    
                    # –ò—Å—Å–ª–µ–¥—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_info –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                    cargo_info = target_notification.get("cargo_info", {})
                    print(f"   üì¶ CARGO_INFO –í –£–í–ï–î–û–ú–õ–ï–ù–ò–ò:")
                    print(f"      –¢–∏–ø: {type(cargo_info)}")
                    
                    if isinstance(cargo_info, dict):
                        print(f"      –ö–ª—é—á–∏: {list(cargo_info.keys())}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_items
                        cargo_items = cargo_info.get("cargo_items", [])
                        print(f"   üìã CARGO_ITEMS –í –£–í–ï–î–û–ú–õ–ï–ù–ò–ò:")
                        print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(cargo_items)}")
                        
                        if cargo_items:
                            print("   üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO_ITEMS –í –£–í–ï–î–û–ú–õ–ï–ù–ò–ò:")
                            for i, item in enumerate(cargo_items, 1):
                                print(f"      –ì—Ä—É–∑ {i}:")
                                print(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                                print(f"         –í–µ—Å: {item.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                                print(f"         –¶–µ–Ω–∞: {item.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                                print(f"         –í—Å–µ –ø–æ–ª—è: {list(item.keys())}")
                        else:
                            print("   ‚ö†Ô∏è CARGO_ITEMS –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø—É—Å—Ç")
                            print("   üîç –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–• –ü–û–õ–ï–ô:")
                            print(f"      cargo_name: {cargo_info.get('cargo_name', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                            print(f"      weight: {cargo_info.get('weight', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                            print(f"      total_value: {cargo_info.get('total_value', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    
                    # –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    print("   üìÑ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
                    print(json.dumps(target_notification, indent=2, ensure_ascii=False)[:1500] + "..." if len(str(target_notification)) > 1500 else json.dumps(target_notification, indent=2, ensure_ascii=False))
                    
                    return target_notification
                else:
                    print(f"   ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return None
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.text}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None
    
    def test_modal_acceptance_with_multiple_cargo(self, notification_id):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏"""
        print(f"‚úÖ –≠–¢–ê–ü 8: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ù–Ø–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò")
        
        if not self.operator_token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        headers = {"Authorization": f"Bearer {self.operator_token}"}
        
        # 1. –ü—Ä–∏–Ω—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        print("   üìù –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
        try:
            response = self.session.post(f"{BACKEND_URL}/operator/warehouse-notifications/{notification_id}/accept", headers=headers)
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                print("      ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.text}")
                return False
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
        
        # 2. –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
        print("   üìã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏...")
        
        completion_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ì—Ä—É–∑–æ–≤",
            "cargo_items": [
                {
                    "name": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
                    "weight": "50.0",
                    "price": "15000"
                },
                {
                    "name": "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä",
                    "weight": "25.0", 
                    "price": "10000"
                }
            ],
            "payment_method": "cash",
            "delivery_method": "pickup"
        }
        
        try:
            response = self.session.post(f"{BACKEND_URL}/operator/warehouse-notifications/{notification_id}/complete", 
                                       json=completion_data, headers=headers)
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                cargo_number = data.get("cargo_number")
                print(f"      ‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                print(f"      –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {cargo_number}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
                return cargo_number
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {response.text}")
                return False
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def investigate_final_cargo_structure(self, cargo_number):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞"""
        print(f"üîç –≠–¢–ê–ü 9: –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –ì–†–£–ó–ê {cargo_number}")
        
        if not self.operator_token:
            print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return None
        
        headers = {"Authorization": f"Bearer {self.operator_token}"}
        
        try:
            response = self.session.get(f"{BACKEND_URL}/cargo/track/{cargo_number}", headers=headers)
            print(f"   Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥—Ä—É–∑–∞:")
                print(f"      –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {data.get('cargo_number')}")
                print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞: {data.get('cargo_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"      –í–µ—Å: {data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"      –û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('declared_value', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_items –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –≥—Ä—É–∑–µ
                cargo_items = data.get("cargo_items", [])
                print(f"   üìã CARGO_ITEMS –í –§–ò–ù–ê–õ–¨–ù–û–ú –ì–†–£–ó–ï:")
                print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(cargo_items)}")
                
                if cargo_items:
                    print("   üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO_ITEMS –í –§–ò–ù–ê–õ–¨–ù–û–ú –ì–†–£–ó–ï:")
                    for i, item in enumerate(cargo_items, 1):
                        print(f"      –ì—Ä—É–∑ {i}:")
                        print(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"         –í–µ—Å: {item.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"         –¶–µ–Ω–∞: {item.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"         –í—Å–µ –ø–æ–ª—è: {list(item.keys())}")
                else:
                    print("   ‚ö†Ô∏è CARGO_ITEMS –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –≥—Ä—É–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    print("   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏ —Ü–µ–Ω—ã –≥—Ä—É–∑–æ–≤ –ù–ï –°–û–•–†–ê–ù–ò–õ–ò–°–¨!")
                
                # –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–∑–∞
                print("   üìÑ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –ì–†–£–ó–ê:")
                print(json.dumps(data, indent=2, ensure_ascii=False))
                
                return data
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–∞: {response.text}")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞: {e}")
            return None
    
    def run_comprehensive_investigation(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í–ï–°–û–í –ò –¶–ï–ù –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ì–†–£–ó–û–í –í TAJLINE.TJ")
        print("=" * 100)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            return False
        
        # –≠—Ç–∞–ø 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞
        if not self.authenticate_courier():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä")
            return False
        
        # –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        existing_notifications = self.get_warehouse_notifications()
        
        # –≠—Ç–∞–ø 4: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if existing_notifications:
            print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –° PICKUP_REQUEST_ID:")
            for notification in existing_notifications[:2]:  # –ò—Å—Å–ª–µ–¥—É–µ–º –ø–µ—Ä–≤—ã–µ 2
                pickup_request_id = notification.get("pickup_request_id")
                if pickup_request_id:
                    self.investigate_pickup_request(pickup_request_id)
        
        # –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
        test_request_id = self.create_test_pickup_request_with_multiple_cargo()
        if not test_request_id:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É")
            return False
        
        # –≠—Ç–∞–ø 6: –°–∏–º—É–ª—è—Ü–∏—è workflow –∫—É—Ä—å–µ—Ä–∞
        notification_id = self.simulate_courier_workflow_with_multiple_cargo(test_request_id)
        if not notification_id:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å workflow –∫—É—Ä—å–µ—Ä–∞")
            return False
        
        # –≠—Ç–∞–ø 7: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        notification_data = self.investigate_notification_modal_data(notification_id)
        if not notification_data:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return False
        
        # –≠—Ç–∞–ø 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        cargo_number = self.test_modal_acceptance_with_multiple_cargo(notification_id)
        if not cargo_number:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞")
            return False
        
        # –≠—Ç–∞–ø 9: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–∑–∞
        final_cargo_data = self.investigate_final_cargo_structure(cargo_number)
        if not final_cargo_data:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–∑–∞")
            return False
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.generate_final_analysis_report(final_cargo_data)
        
        return True
    
    def generate_final_analysis_report(self, final_cargo_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "=" * 100)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –ü–†–û–ë–õ–ï–ú–´ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ì–†–£–ó–û–í")
        print("=" * 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_items –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –≥—Ä—É–∑–µ
        cargo_items = final_cargo_data.get("cargo_items", [])
        
        if cargo_items and len(cargo_items) > 1:
            print("‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print("   –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏ —Ü–µ–Ω—ã –≥—Ä—É–∑–æ–≤ –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(cargo_items)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:")
            for i, item in enumerate(cargo_items, 1):
                print(f"      {i}. {item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {item.get('weight', '–ë–µ–∑ –≤–µ—Å–∞')} –∫–≥ - {item.get('price', '–ë–µ–∑ —Ü–µ–Ω—ã')} ‚ÇΩ")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê:")
            print("   –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏ —Ü–µ–Ω—ã –≥—Ä—É–∑–æ–≤ –ù–ï –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. Backend –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤ –æ–¥–∏–Ω cargo_name")
            print("   2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_items –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   3. –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
            print("\n   –ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:")
            print(f"      cargo_name: {final_cargo_data.get('cargo_name', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
            print(f"      weight: {final_cargo_data.get('weight', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
            print(f"      declared_value: {final_cargo_data.get('declared_value', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
        
        print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
        print("1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_items –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö workflow")
        print("2. –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–∞–∂–¥—ã–π –≥—Ä—É–∑ –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        print("3. Backend –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ cargo_items, –∞ –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –≤ –æ–±—â–∏–µ –ø–æ–ª—è")
        print("4. Frontend –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
        
        print("\n" + "=" * 100)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = MultipleCargoInvestigationTester()
    
    try:
        success = tester.run_comprehensive_investigation()
        
        if success:
            print("\nüéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            sys.exit(0)
        else:
            print("\n‚ùå –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()