#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–û–í ENDPOINTS –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –í TAJLINE.TJ

–¶–ï–õ–¨: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –≤ placementStatistics –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π frontend
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-tracker-33.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementResponseTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    user_info = data.get("user", {})
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})"
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_placement_with_different_cells(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", timeout=30)
            if response.status_code != 200:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, f"HTTP {response.status_code}")
                return False
            
            data = response.json()
            available_cargo = data.get("items", [])
            
            if not available_cargo:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
                return False
            
            # –ü–æ–ª—É—á–∏–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses", timeout=30)
            if response.status_code != 200:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤", False, f"HTTP {response.status_code}")
                return False
            
            warehouses = response.json()
            if not warehouses:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                return False
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            test_cargo = available_cargo[0]
            test_warehouse = warehouses[0]
            
            cargo_id = test_cargo.get("id")
            warehouse_id = test_warehouse.get("id")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–µ–∫
            cell_coordinates = [
                (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5),
                (1, 2, 1), (1, 2, 2), (1, 2, 3),
                (2, 1, 1), (2, 1, 2), (2, 2, 1)
            ]
            
            for block, shelf, cell in cell_coordinates:
                placement_data = {
                    "cargo_id": cargo_id,
                    "warehouse_id": warehouse_id,
                    "block_number": block,
                    "shelf_number": shelf,
                    "cell_number": cell
                }
                
                try:
                    response = self.session.post(
                        f"{BACKEND_URL}/operator/cargo/place",
                        json=placement_data,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                        cargo_fields = ["location_code", "cargo_name", "cargo_number", "placed_at", "warehouse_name"]
                        present_cargo_fields = [field for field in cargo_fields if field in data]
                        
                        self.log_result(
                            f"–£–°–ü–ï–®–ù–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï –≤ —è—á–µ–π–∫—É –ë{block}-–ü{shelf}-–Ø{cell}",
                            True,
                            f"üéâ –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´: Endpoint /api/operator/cargo/place –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è –≥—Ä—É–∑–∞: {present_cargo_fields}",
                            {
                                "placement_coordinates": f"–ë{block}-–ü{shelf}-–Ø{cell}",
                                "cargo_fields_in_response": present_cargo_fields,
                                "full_response": data,
                                "bug_explanation": "–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å placementStatistics –≤ frontend",
                                "react_error_source": "–ï—Å–ª–∏ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ placementStatistics, —Ç–æ React –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É 'Objects are not valid as a React child'"
                            }
                        )
                        return True
                    elif response.status_code == 400 and "occupied" in response.text:
                        # –Ø—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
                        continue
                    else:
                        print(f"   –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –ë{block}-–ü{shelf}-–Ø{cell}: {response.status_code} - {response.text}")
                        
                except Exception as e:
                    print(f"   –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≤ –ë{block}-–ü{shelf}-–Ø{cell}: {str(e)}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –≤ –æ–¥–Ω—É —è—á–µ–π–∫—É
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞",
                False,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞",
                {"tried_coordinates": cell_coordinates}
            )
            return False
            
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–û–í ENDPOINTS –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –í TAJLINE.TJ")
        print("=" * 80)
        print("üîç –¶–ï–õ–¨: –ù–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –≤ placementStatistics")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏
        self.test_placement_with_different_cells()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        
        # –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
        successful_placement = next((r for r in self.test_results if r["success"] and "–£–°–ü–ï–®–ù–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï" in r["test"]), None)
        
        if successful_placement:
            print(f"\nüö® –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù:")
            details = successful_placement.get("details", {})
            cargo_fields = details.get("cargo_fields_in_response", [])
            
            print(f"   ‚úÖ Endpoint: /api/operator/cargo/place")
            print(f"   ‚ùå –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è –≥—Ä—É–∑–∞: {cargo_fields}")
            print(f"   üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {details.get('full_response', {})}")
            
            print(f"\nüí° –û–ë–™–Ø–°–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("   1. API /api/operator/placement-statistics —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   2. API /api/operator/cargo/place –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            print("   3. Frontend –æ—à–∏–±–æ—á–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ placementStatistics")
            print("   4. React –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç –≥—Ä—É–∑–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É ‚Üí –æ—à–∏–±–∫–∞")
            
            print(f"\nüîß –†–ï–®–ï–ù–ò–ï:")
            print("   1. –í frontend —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
            print("      - placementStatistics (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)")
            print("      - placementResult (–¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)")
            print("   2. –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å placementStatistics —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        else:
            print(f"\nü§î –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´ –ù–ï –ù–ê–ô–î–ï–ù –í BACKEND:")
            print("   ‚úÖ API /api/operator/placement-statistics —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞")
            print("   üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ frontend –ª–æ–≥–∏–∫–µ")
        
        return True

if __name__ == "__main__":
    tester = PlacementResponseTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        sys.exit(0)
    else:
        print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê!")
        sys.exit(1)