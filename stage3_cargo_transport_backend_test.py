#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 3 Backend - API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
===========================================================================================================

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints —ç—Ç–∞–ø–∞ 3 —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ - 
–ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–µ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **GET /api/logistics/cargo-to-transport/placed-cargo** - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≥—Ä—É–∑–æ–≤
2. **GET /api/cargo/{cargo_number}/transport-details** - –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
3. **POST /api/cargo/return-from-transport** - –í–µ—Ä–Ω—É—Ç—å –≥—Ä—É–∑ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥
4. **PUT /api/cargo/update-status-to-transport** - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å warehouse_operator (+79777888999/warehouse123)
2. **–°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤**:
   - –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "loaded_on_transport" –≤ placement_records
   - –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ operator_cargo/cargo –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
   - –í–æ–∑–≤—Ä–∞—Ç enriched_cargo —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
3. **–î–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞**:
   - –ü–æ–ª—É—á–µ–Ω–∏–µ placement, cargo, transport –∏ operator –¥–∞–Ω–Ω—ã—Ö
   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥—Ä—É–∑–∞ (can_return: true)
4. **–í–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–∞ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞**:
   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ placement_records –Ω–∞ "placed"
   - –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ transport_loading_sessions
   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ cargo –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –Ω–∞ "placed_in_warehouse"
   - –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
5. **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞**:
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤: loaded_on_transport, in_transit, arrived_destination, delivered, returned_to_warehouse
   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ placement_records –∏ cargo –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
   - Mapping —Å—Ç–∞—Ç—É—Å–æ–≤ –º–µ–∂–¥—É –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏

–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:
**–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤**
1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å GET /api/logistics/cargo-to-transport/placed-cargo
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ (placed_cargo, total_count)
3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç transport_info

**–°—Ü–µ–Ω–∞—Ä–∏–π 2: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞**
1. –í–∑—è—Ç—å cargo_number –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
2. –ó–∞–ø—Ä–æ—Å–∏—Ç—å GET /api/cargo/{cargo_number}/transport-details
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cargo_info, transport_info, placement_info, session_details

**–°—Ü–µ–Ω–∞—Ä–∏–π 3: –í–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥**
1. –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–∑ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å POST /api/cargo/return-from-transport —Å –ø—Ä–∏—á–∏–Ω–æ–π
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö

**–°—Ü–µ–Ω–∞—Ä–∏–π 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞**
1. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –Ω–∞ "in_transit" 
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å PUT /api/cargo/update-status-to-transport
3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏–ª—Å—è

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- ‚úÖ –í—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- ‚úÖ –î–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞ –≤–∫–ª—é—á–∞—é—Ç transport_info –∏ placement_info
- ‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
- ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º mapping
- ‚úÖ –°–æ–∑–¥–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (404, 400 –∫–æ–¥—ã)

–ö–û–ù–¢–ï–ö–°–¢: –≠—Ç–∞–ø 3 —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ - –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
–≥—Ä—É–∑–∞–º–∏ –ø–æ—Å–ª–µ –∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –î–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ.
"""

import requests
import json
import sys
import os
from datetime import datetime
import time

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class Stage3CargoTransportTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "placed_cargo_list_success": False,
            "transport_details_success": False,
            "return_from_transport_success": False,
            "update_status_success": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "detailed_results": []
        }
        self.placed_cargo_list = []
        self.test_cargo_number = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                self.test_results["passed_tests"] += 1
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
            return False
    
    def test_placed_cargo_list(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 1: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ì–†–£–ó–û–í")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        try:
            response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/placed-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: GET /api/logistics/cargo-to-transport/placed-cargo")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, dict):
                    placed_cargo = data.get("placed_cargo", [])
                    total_count = data.get("total_count", 0)
                    
                    self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: placed_cargo ({len(placed_cargo)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤), total_count ({total_count})")
                    
                    if placed_cargo:
                        self.placed_cargo_list = placed_cargo
                        self.test_cargo_number = placed_cargo[0].get("cargo_number")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                        first_cargo = placed_cargo[0]
                        required_fields = ["cargo_number", "cargo_name", "transport_info", "placement_info", "status"]
                        
                        missing_fields = []
                        for field in required_fields:
                            if field not in first_cargo:
                                missing_fields.append(field)
                        
                        if not missing_fields:
                            self.log(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º transport_info
                            transport_info = first_cargo.get("transport_info", {})
                            if transport_info and isinstance(transport_info, dict):
                                self.log(f"‚úÖ transport_info –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {transport_info.get('transport_number', 'N/A')}")
                            else:
                                self.log(f"‚ö†Ô∏è transport_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", "WARNING")
                            
                            self.test_results["placed_cargo_list_success"] = True
                            self.test_results["passed_tests"] += 1
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞
                            self.log(f"üì¶ –ü–µ—Ä–≤—ã–π –≥—Ä—É–∑: {first_cargo.get('cargo_number')} - {first_cargo.get('cargo_name')}")
                            self.log(f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info.get('transport_number', 'N/A')}")
                            self.log(f"üìç –°—Ç–∞—Ç—É—Å: {first_cargo.get('status', 'N/A')}")
                            
                        else:
                            self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}", "ERROR")
                            self.test_results["failed_tests"] += 1
                    else:
                        self.log(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç", "WARNING")
                        self.test_results["passed_tests"] += 1  # –ù–µ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–∑–æ–≤
                        
                else:
                    self.log(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –æ–∂–∏–¥–∞–ª—Å—è dict, –ø–æ–ª—É—á–µ–Ω {type(data)}", "ERROR")
                    self.test_results["failed_tests"] += 1
                    
            elif response.status_code == 404:
                self.log(f"‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: {response.status_code}", "ERROR")
                self.test_results["failed_tests"] += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_transport_details(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 2: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 2: –î–ï–¢–ê–õ–ò –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ì–†–£–ó–ê")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        if not self.test_cargo_number:
            self.log("‚ö†Ô∏è –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç", "WARNING")
            return
        
        try:
            response = self.session.get(f"{API_BASE}/cargo/{self.test_cargo_number}/transport-details")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: GET /api/cargo/{self.test_cargo_number}/transport-details")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_sections = ["cargo_info", "transport_info", "placement_info", "session_details"]
                missing_sections = []
                
                for section in required_sections:
                    if section not in data:
                        missing_sections.append(section)
                
                if not missing_sections:
                    self.log(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {required_sections}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_info
                    cargo_info = data.get("cargo_info", {})
                    if cargo_info.get("cargo_number") == self.test_cargo_number:
                        self.log(f"‚úÖ cargo_info –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {cargo_info.get('cargo_name', 'N/A')}")
                    else:
                        self.log(f"‚ùå cargo_info –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: –æ–∂–∏–¥–∞–ª—Å—è {self.test_cargo_number}, –ø–æ–ª—É—á–µ–Ω {cargo_info.get('cargo_number')}", "ERROR")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º transport_info
                    transport_info = data.get("transport_info", {})
                    if transport_info and transport_info.get("transport_number"):
                        self.log(f"‚úÖ transport_info –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {transport_info.get('transport_number')}")
                    else:
                        self.log(f"‚ö†Ô∏è transport_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", "WARNING")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º placement_info
                    placement_info = data.get("placement_info", {})
                    if placement_info and placement_info.get("placed_at"):
                        self.log(f"‚úÖ placement_info –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: —Ä–∞–∑–º–µ—â–µ–Ω {placement_info.get('placed_at')}")
                    else:
                        self.log(f"‚ö†Ô∏è placement_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", "WARNING")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º can_return
                    can_return = data.get("can_return", False)
                    self.log(f"üîÑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞: {can_return}")
                    
                    self.test_results["transport_details_success"] = True
                    self.test_results["passed_tests"] += 1
                    
                else:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏: {missing_sections}", "ERROR")
                    self.test_results["failed_tests"] += 1
                    
            elif response.status_code == 404:
                self.log(f"‚ùå –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {response.status_code}", "ERROR")
                self.test_results["failed_tests"] += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_return_from_transport(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 3: –í–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 3: –í–û–ó–í–†–ê–¢ –ì–†–£–ó–ê –ù–ê –°–ö–õ–ê–î")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        if not self.test_cargo_number:
            self.log("‚ö†Ô∏è –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç", "WARNING")
            return
        
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥—Ä—É–∑–∞
            return_data = {
                "cargo_number": self.test_cargo_number,
                "reason": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"
            }
            
            response = self.session.post(f"{API_BASE}/cargo/return-from-transport", json=return_data)
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: POST /api/cargo/return-from-transport")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if data.get("success"):
                    self.log(f"‚úÖ –ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω: {data.get('message', 'N/A')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
                    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    
                    check_response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/placed-cargo")
                    if check_response.status_code == 200:
                        check_data = check_response.json()
                        placed_cargo = check_data.get("placed_cargo", [])
                        
                        # –ò—â–µ–º –Ω–∞—à –≥—Ä—É–∑ –≤ —Å–ø–∏—Å–∫–µ
                        found_cargo = False
                        for cargo in placed_cargo:
                            if cargo.get("cargo_number") == self.test_cargo_number:
                                found_cargo = True
                                break
                        
                        if not found_cargo:
                            self.log(f"‚úÖ –ì—Ä—É–∑ {self.test_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö")
                            self.test_results["return_from_transport_success"] = True
                            self.test_results["passed_tests"] += 1
                        else:
                            self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ {self.test_cargo_number} –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö", "WARNING")
                            self.test_results["passed_tests"] += 1  # –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                    else:
                        self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫", "WARNING")
                        self.test_results["passed_tests"] += 1
                        
                else:
                    self.log(f"‚ùå –í–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", "ERROR")
                    self.test_results["failed_tests"] += 1
                    
            elif response.status_code == 404:
                self.log(f"‚ùå –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: {response.status_code}", "ERROR")
                self.test_results["failed_tests"] += 1
            elif response.status_code == 400:
                self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω): {response.status_code}", "WARNING")
                self.test_results["passed_tests"] += 1  # –ù–µ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –≥—Ä—É–∑ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥—Ä—É–∑–∞: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≥—Ä—É–∑–∞: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_update_status(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ì–†–£–ó–ê")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
        test_cargo = self.test_cargo_number or "250101"  # Fallback –∫ –∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            test_statuses = [
                "in_transit",
                "arrived_destination", 
                "delivered",
                "returned_to_warehouse"
            ]
            
            successful_updates = 0
            
            for status in test_statuses:
                update_data = {
                    "cargo_number": test_cargo,
                    "status": status,
                    "notes": f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ {status}"
                }
                
                response = self.session.put(f"{API_BASE}/cargo/update-status-to-transport", json=update_data)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        self.log(f"‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}': {data.get('message', 'N/A')}")
                        successful_updates += 1
                    else:
                        self.log(f"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ '{status}' –Ω–µ —É–¥–∞–ª–æ—Å—å: {data.get('message', 'N/A')}", "WARNING")
                elif response.status_code == 404:
                    self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ '{status}': {response.status_code}", "WARNING")
                elif response.status_code == 400:
                    self.log(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å '{status}' –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ: {response.status_code}", "WARNING")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ '{status}': {response.status_code} - {response.text}", "ERROR")
                
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            if successful_updates > 0:
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: PUT /api/cargo/update-status-to-transport")
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {successful_updates}/{len(test_statuses)} —Å—Ç–∞—Ç—É—Å–æ–≤")
                self.test_results["update_status_success"] = True
                self.test_results["passed_tests"] += 1
            else:
                self.log(f"‚ùå –ù–∏ –æ–¥–∏–Ω —Å—Ç–∞—Ç—É—Å –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_error_handling(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.log("\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        self.log("=" * 80)
        
        # –¢–µ—Å—Ç 1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä—É–∑
        self.log("üîç –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞")
        try:
            response = self.session.get(f"{API_BASE}/cargo/NONEXISTENT999/transport-details")
            if response.status_code == 404:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞: {response.status_code}", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞: {e}", "ERROR")
        
        # –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        self.log("üîç –¢–µ—Å—Ç 2: –í–æ–∑–≤—Ä–∞—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        try:
            invalid_data = {"invalid_field": "invalid_value"}
            response = self.session.post(f"{API_BASE}/cargo/return-from-transport", json=invalid_data)
            if response.status_code in [400, 422]:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {response.status_code}", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
        
        # –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        self.log("üîç –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        try:
            invalid_status_data = {
                "cargo_number": "TEST123",
                "new_status": "invalid_status_xyz",
                "updated_by": "test"
            }
            response = self.session.put(f"{API_BASE}/cargo/update-status-to-transport", json=invalid_status_data)
            if response.status_code in [400, 422]:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}", "ERROR")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 100)
        self.log("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 Backend API")
        self.log("=" * 100)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (self.test_results["passed_tests"] / self.test_results["total_tests"] * 100) if self.test_results["total_tests"] > 0 else 0
        
        self.log(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests']}")
        self.log(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['passed_tests']}")
        self.log(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['failed_tests']}")
        self.log(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        self.log(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú ENDPOINTS:")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É endpoint
        endpoints_results = [
            ("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", self.test_results["auth_success"]),
            ("üìã GET /api/logistics/cargo-to-transport/placed-cargo", self.test_results["placed_cargo_list_success"]),
            ("üîç GET /api/cargo/{cargo_number}/transport-details", self.test_results["transport_details_success"]),
            ("üîÑ POST /api/cargo/return-from-transport", self.test_results["return_from_transport_success"]),
            ("üìù PUT /api/cargo/update-status-to-transport", self.test_results["update_status_success"])
        ]
        
        for endpoint_name, success in endpoints_results:
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if success else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            self.log(f"   ‚Ä¢ {endpoint_name}: {status}")
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        self.log(f"\nüèÅ –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        
        if success_rate >= 80:
            self.log("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            self.log("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        elif success_rate >= 60:
            self.log("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            self.log("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
            self.log("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            self.log("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –ù–ï –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            self.log("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        
        self.log("=" * 100)
        
        return success_rate >= 80
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–¢–ê–ü–ê 3 Backend API")
        self.log("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ")
        self.log("=" * 100)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", "ERROR")
            return False
        
        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
        self.test_placed_cargo_list()
        self.test_transport_details()
        self.test_return_from_transport()
        self.test_update_status()
        
        # –®–∞–≥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.test_error_handling()
        
        # –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        return self.generate_final_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 3 Backend - API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ")
    print("=" * 120)
    
    tester = Stage3CargoTransportTester()
    success = tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()