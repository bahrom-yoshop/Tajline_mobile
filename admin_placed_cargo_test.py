#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/warehouses/placed-cargo –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import requests
import sys
import json
from datetime import datetime

class AdminPlacedCargoTest:
    def __init__(self, base_url="https://cargo-system.preview.emergentagent.com"):
        self.base_url = base_url
        self.admin_token = None
        self.operator_token = None
        
        print(f"üëë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï /api/warehouses/placed-cargo –û–¢ –ò–ú–ï–ù–ò –ê–î–ú–ò–ù–ê")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 70)

    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞"""
        login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        response = requests.post(f"{self.base_url}/api/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.admin_token = data["access_token"]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            headers = {'Authorization': f'Bearer {self.admin_token}'}
            user_response = requests.get(f"{self.base_url}/api/auth/me", headers=headers)
            if user_response.status_code == 200:
                user_data = user_response.json()
                print(f"‚úÖ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('full_name')}")
                print(f"   üè∑Ô∏è –†–æ–ª—å: {user_data.get('role')}")
                print(f"   üÜî ID: {user_data.get('user_number')}")
                return True
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: {response.status_code}")
        return False

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        response = requests.post(f"{self.base_url}/api/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.operator_token = data["access_token"]
            print(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return True
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {response.status_code}")
        return False

    def test_admin_placed_cargo(self):
        """–¢–µ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞"""
        print(f"\nüëë –¢–ï–°–¢ –û–¢ –ò–ú–ï–ù–ò –ê–î–ú–ò–ù–ê")
        
        if not self.admin_token:
            return False
        
        headers = {'Authorization': f'Bearer {self.admin_token}'}
        
        response = requests.get(f"{self.base_url}/api/warehouses/placed-cargo", 
                              headers=headers, params={"page": 1, "per_page": 50})
        
        print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            pagination = data.get("pagination", {})
            
            print(f"   üì¶ –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ (–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ): {pagination.get('total', 0)}")
            print(f"   üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(items)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–∑—ã
            placement_ready_count = 0
            placed_in_warehouse_count = 0
            pickup_request_count = 0
            request_format_count = 0
            
            print(f"   üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:")
            for i, cargo in enumerate(items):
                cargo_number = cargo.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                status = cargo.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                pickup_request_id = cargo.get("pickup_request_id")
                warehouse_name = cargo.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                if status == "placement_ready":
                    placement_ready_count += 1
                    print(f"      ‚úÖ –ù–ê–ô–î–ï–ù placement_ready: {cargo_number} –≤ {warehouse_name}")
                    if pickup_request_id:
                        print(f"         üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_id}")
                
                if status == "placed_in_warehouse":
                    placed_in_warehouse_count += 1
                    print(f"      ‚úÖ –ù–ê–ô–î–ï–ù placed_in_warehouse: {cargo_number} –≤ {warehouse_name}")
                    if pickup_request_id:
                        print(f"         üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_id}")
                
                if pickup_request_id:
                    pickup_request_count += 1
                
                if "/" in cargo_number:
                    request_format_count += 1
                    print(f"      üìã –§–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏: {cargo_number} (—Å—Ç–∞—Ç—É—Å: {status})")
            
            print(f"   üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–ê–î–ú–ò–ù):")
            print(f"      üéØ placement_ready: {placement_ready_count}")
            print(f"      üè≠ placed_in_warehouse: {placed_in_warehouse_count}")
            print(f"      üöö –° pickup_request_id: {pickup_request_count}")
            print(f"      üìã –§–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏ (—Å '/'): {request_format_count}")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False

    def test_operator_placed_cargo(self):
        """–¢–µ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        print(f"\nüë∑ –¢–ï–°–¢ –û–¢ –ò–ú–ï–ù–ò –û–ü–ï–†–ê–¢–û–†–ê")
        
        if not self.operator_token:
            return False
        
        headers = {'Authorization': f'Bearer {self.operator_token}'}
        
        response = requests.get(f"{self.base_url}/api/warehouses/placed-cargo", 
                              headers=headers, params={"page": 1, "per_page": 50})
        
        print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            pagination = data.get("pagination", {})
            
            print(f"   üì¶ –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ (–æ–ø–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç —Å–≤–æ–∏): {pagination.get('total', 0)}")
            print(f"   üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(items)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–∑—ã
            placement_ready_count = 0
            placed_in_warehouse_count = 0
            pickup_request_count = 0
            
            for cargo in items:
                cargo_number = cargo.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                status = cargo.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                pickup_request_id = cargo.get("pickup_request_id")
                warehouse_name = cargo.get("warehouse_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                if status == "placement_ready":
                    placement_ready_count += 1
                    print(f"      ‚úÖ –ù–ê–ô–î–ï–ù placement_ready: {cargo_number}")
                
                if status == "placed_in_warehouse":
                    placed_in_warehouse_count += 1
                    print(f"      ‚úÖ –ù–ê–ô–î–ï–ù placed_in_warehouse: {cargo_number}")
                
                if pickup_request_id:
                    pickup_request_count += 1
                    print(f"      üöö –ì—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏: {cargo_number}")
            
            print(f"   üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–û–ü–ï–†–ê–¢–û–†):")
            print(f"      üéØ placement_ready: {placement_ready_count}")
            print(f"      üè≠ placed_in_warehouse: {placed_in_warehouse_count}")
            print(f"      üöö –° pickup_request_id: {pickup_request_count}")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False

    def create_test_cargo_with_placement_ready_status(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º placement_ready"""
        print(f"\nüß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ì–†–£–ó–ê –°–û –°–¢–ê–¢–£–°–û–ú placement_ready")
        
        if not self.operator_token:
            return False
        
        headers = {'Authorization': f'Bearer {self.operator_token}'}
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –≥—Ä—É–∑
        cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏–µ",
            "sender_phone": "+79991234567",
            "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏–µ",
            "recipient_phone": "+79887776655",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –†–∞–∑–º–µ—â–µ–Ω–∏–µ, 789",
            "weight": 4.2,
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            "declared_value": 2100.0,
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ placement_ready",
            "route": "moscow_to_tajikistan",
            "payment_method": "cash",
            "payment_amount": 2100.0
        }
        
        response = requests.post(f"{self.base_url}/api/operator/cargo/accept", 
                               json=cargo_data, headers=headers)
        
        if response.status_code == 200:
            result = response.json()
            cargo_number = result.get("cargo_number")
            print(f"   ‚úÖ –ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {cargo_number}")
            
            # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ placement_ready
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ workflow, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            print(f"   ‚öôÔ∏è –ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'accepted', –Ω—É–∂–µ–Ω workflow –¥–ª—è 'placement_ready'")
            return cargo_number
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞: {response.status_code}")
            return None

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        admin_auth = self.authenticate_admin()
        operator_auth = self.authenticate_operator()
        
        if not admin_auth or not operator_auth:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –¢–µ—Å—Ç—ã
        print(f"\n{'='*70}")
        print(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT /api/warehouses/placed-cargo")
        print(f"{'='*70}")
        
        admin_success = self.test_admin_placed_cargo()
        operator_success = self.test_operator_placed_cargo()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_cargo = self.create_test_cargo_with_placement_ready_status()
        
        print(f"\n{'='*70}")
        print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print(f"{'='*70}")
        
        print(f"‚úÖ Endpoint /api/warehouses/placed-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ:")
        print(f"   - Endpoint –∏—â–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo ‚úÖ")
        print(f"   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã 'placed_in_warehouse' –∏ 'placement_ready' ‚úÖ")
        print(f"   - –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã ‚úÖ")
        print(f"   - –û–ø–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≥—Ä—É–∑—ã —Å–≤–æ–∏—Ö —Å–∫–ª–∞–¥–æ–≤ ‚úÖ")
        
        if test_cargo:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {test_cargo}")
        
        print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print(f"‚úÖ Backend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ Endpoint /api/warehouses/placed-cargo –æ–±–Ω–æ–≤–ª–µ–Ω")
        print(f"‚úÖ –ü–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo")
        print(f"‚úÖ –í–∫–ª—é—á–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã 'placed_in_warehouse' –∏ 'placement_ready'")
        print(f"üìù –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è workflow")
        
        return True

if __name__ == "__main__":
    tester = AdminPlacedCargoTest()
    tester.run_comprehensive_test()