#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò BACKEND –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –°–ö–õ–ê–î–û–í –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ë–õ–ï–ú–´:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–ª–∞–¥—ã" 
- –ö–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ fetchWarehouses() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ useEffect –¥–ª—è —Ä–æ–ª–µ–π admin –∏ warehouse_operator (—Å—Ç—Ä–æ–∫–∏ 526, 547)
- –ù–æ —Å–∫–ª–∞–¥—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. GET /api/warehouses - –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
2. GET /api/warehouses/{warehouse_id}/statistics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ fetchWarehouses)

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è admin (+79999888777/admin123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/warehouses - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∫–ª–∞–¥–æ–≤  
4. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator (+79777888999/warehouse123)
5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö –∂–µ endpoints –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- Endpoint /api/warehouses –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å–∫–ª–∞–¥–æ–≤ —Å –ø–æ–ª—è–º–∏: id, name, location, is_active
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏, –∞ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞–º–∏
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-compass.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_USER = {
    "phone": "+79999888777",
    "password": "admin123"
}

WAREHOUSE_OPERATOR = {
    "phone": "+79777888999", 
    "password": "warehouse123"
}

def authenticate_user(phone, password, role_name):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {role_name} ({phone})...")
    
    response = requests.post(f"{BACKEND_URL}/auth/login", json={
        "phone": phone,
        "password": password
    })
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        user_info = data.get("user")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')}, –Ω–æ–º–µ—Ä: {user_info.get('user_number')})")
        return token, user_info
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
        return None, None

def test_warehouses_list_endpoint(token, role_name):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤"""
    print(f"\nüè≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/warehouses –¥–ª—è {role_name}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(f"{BACKEND_URL}/warehouses", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        
        if isinstance(data, list):
            warehouse_count = len(data)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤: {warehouse_count} —Å–∫–ª–∞–¥–æ–≤")
            
            if warehouse_count > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞
                sample_warehouse = data[0]
                required_fields = ['id', 'name', 'location', 'is_active']
                
                print(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞:")
                for field in required_fields:
                    if field in sample_warehouse:
                        value = sample_warehouse[field]
                        print(f"   ‚úÖ {field}: {value} ({type(value).__name__})")
                    else:
                        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
                        return False, 0
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤
                print(f"üì¶ –ü—Ä–∏–º–µ—Ä—ã —Å–∫–ª–∞–¥–æ–≤:")
                for i, warehouse in enumerate(data[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"   {i+1}. {warehouse.get('name')} - {warehouse.get('location')} (–∞–∫—Ç–∏–≤–µ–Ω: {warehouse.get('is_active')})")
                
                return True, warehouse_count
            else:
                print("‚ùå –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç")
                return False, 0
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(data)}")
            return False, 0
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}")
        return False, 0

def test_warehouse_statistics(token, warehouse_id, warehouse_name, role_name):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞"""
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/warehouses/{warehouse_id}/statistics –¥–ª—è {role_name}...")
    print(f"   –°–∫–ª–∞–¥: {warehouse_name}")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(f"{BACKEND_URL}/warehouses/{warehouse_id}/statistics", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        required_fields = [
            'total_cells', 'occupied_cells', 'free_cells', 
            'utilization_percent', 'total_cargo_count', 'total_weight'
        ]
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞:")
        all_fields_present = True
        
        for field in required_fields:
            if field in data:
                value = data[field]
                print(f"   ‚úÖ {field}: {value}")
            else:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
                all_fields_present = False
        
        if all_fields_present:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–æ–≤
            total_cells = data.get('total_cells', 0)
            occupied_cells = data.get('occupied_cells', 0)
            free_cells = data.get('free_cells', 0)
            utilization_percent = data.get('utilization_percent', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
            if total_cells == occupied_cells + free_cells:
                print(f"   ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {total_cells} = {occupied_cells} + {free_cells}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: {total_cells} ‚â† {occupied_cells} + {free_cells}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
            if total_cells > 0:
                expected_percent = round((occupied_cells / total_cells) * 100, 1)
                if abs(utilization_percent - expected_percent) < 0.1:
                    print(f"   ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {utilization_percent}%")
                else:
                    print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_percent}%, –ø–æ–ª—É—á–µ–Ω–æ {utilization_percent}%")
                    return False
            
            return True
        else:
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code} - {response.text}")
        return False

def test_multiple_warehouse_statistics(token, warehouses, role_name, max_tests=5):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∫–ª–∞–¥–æ–≤"""
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∫–ª–∞–¥–æ–≤ ({role_name})...")
    
    success_count = 0
    test_count = min(len(warehouses), max_tests)
    
    for i, warehouse in enumerate(warehouses[:test_count]):
        warehouse_id = warehouse.get('id')
        warehouse_name = warehouse.get('name')
        
        print(f"\n   üìä –¢–µ—Å—Ç {i+1}/{test_count}: {warehouse_name}")
        
        if test_warehouse_statistics(token, warehouse_id, warehouse_name, role_name):
            success_count += 1
            print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–∫–ª–∞–¥–∞")
    
    success_rate = (success_count / test_count) * 100 if test_count > 0 else 0
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {success_count}/{test_count} ({success_rate:.1f}%)")
    
    return success_count == test_count

def check_data_realism(warehouses):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–ª—É—à–µ–∫)"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
    suspicious_patterns = [
        "test", "—Ç–µ—Å—Ç", "example", "–ø—Ä–∏–º–µ—Ä", "sample", "–æ–±—Ä–∞–∑–µ—Ü",
        "dummy", "fake", "–∑–∞–≥–ª—É—à–∫–∞", "–≤—Ä–µ–º–µ–Ω–Ω—ã–π"
    ]
    
    realistic_count = 0
    total_count = len(warehouses)
    
    for warehouse in warehouses:
        name = warehouse.get('name', '').lower()
        location = warehouse.get('location', '').lower()
        
        is_suspicious = any(pattern in name or pattern in location for pattern in suspicious_patterns)
        
        if not is_suspicious:
            realistic_count += 1
        else:
            print(f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫–ª–∞–¥: {warehouse.get('name')} - {warehouse.get('location')}")
    
    realism_rate = (realistic_count / total_count) * 100 if total_count > 0 else 0
    
    if realism_rate >= 90:
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤—ã–≥–ª—è–¥—è—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ: {realistic_count}/{total_count} ({realism_rate:.1f}%)")
        return True
    else:
        print(f"‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–Ω–æ–≥–æ –∑–∞–≥–ª—É—à–µ–∫: {realistic_count}/{total_count} ({realism_rate:.1f}%)")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò BACKEND –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –°–ö–õ–ê–î–û–í –í TAJLINE.TJ")
    print("=" * 120)
    
    test_results = []
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print("\n" + "="*60)
    print("–≠–¢–ê–ü 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
    print("="*60)
    
    admin_token, admin_info = authenticate_user(
        ADMIN_USER["phone"], 
        ADMIN_USER["password"], 
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    )
    
    if not admin_token:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    
    test_results.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_warehouses_success, admin_warehouse_count = test_warehouses_list_endpoint(admin_token, "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    if admin_warehouses_success:
        test_results.append(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –∞–¥–º–∏–Ω–æ–º ({admin_warehouse_count} —Å–∫–ª–∞–¥–æ–≤)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        response = requests.get(f"{BACKEND_URL}/warehouses", headers={"Authorization": f"Bearer {admin_token}"})
        admin_warehouses = response.json() if response.status_code == 200 else []
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if admin_warehouses:
            admin_stats_success = test_multiple_warehouse_statistics(admin_token, admin_warehouses, "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            if admin_stats_success:
                test_results.append("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            else:
                test_results.append("‚ùå –û—à–∏–±–∫–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            data_realistic = check_data_realism(admin_warehouses)
            if data_realistic:
                test_results.append("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤ –≤—ã–≥–ª—è–¥—è—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ")
            else:
                test_results.append("‚ùå –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–≥–ª—É—à–∫–∏")
        else:
            test_results.append("‚ùå –ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    else:
        test_results.append("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –∞–¥–º–∏–Ω–æ–º")
    
    # 5. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n" + "="*60)
    print("–≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
    print("="*60)
    
    operator_token, operator_info = authenticate_user(
        WAREHOUSE_OPERATOR["phone"], 
        WAREHOUSE_OPERATOR["password"], 
        "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞"
    )
    
    if not operator_token:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        test_results.append("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    else:
        test_results.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_warehouses_success, operator_warehouse_count = test_warehouses_list_endpoint(operator_token, "–æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        
        if operator_warehouses_success:
            test_results.append(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ({operator_warehouse_count} —Å–∫–ª–∞–¥–æ–≤)")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            response = requests.get(f"{BACKEND_URL}/warehouses", headers={"Authorization": f"Bearer {operator_token}"})
            operator_warehouses = response.json() if response.status_code == 200 else []
            
            # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            if operator_warehouses:
                operator_stats_success = test_multiple_warehouse_statistics(operator_token, operator_warehouses, "–æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
                if operator_stats_success:
                    test_results.append("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                else:
                    test_results.append("‚ùå –û—à–∏–±–∫–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            else:
                test_results.append("‚ùå –ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        else:
            test_results.append("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 120)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 120)
    
    success_count = len([r for r in test_results if r.startswith("‚úÖ")])
    total_count = len(test_results)
    success_rate = (success_count / total_count) * 100
    
    for result in test_results:
        print(result)
    
    print(f"\nüìà SUCCESS RATE: {success_rate:.1f}% ({success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
    
    if success_rate >= 85:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
        print("   - Endpoint /api/warehouses –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
        print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   - –î–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–≥–ª—É—à–µ–∫")
        print("   - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è admin –∏ warehouse_operator")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: Backend —Å—Ç–∞–±–∏–ª–µ–Ω, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ frontend")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: {total_count - success_count} –∏–∑ {total_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
        
        failed_tests = [r for r in test_results if r.startswith("‚ùå")]
        for failed_test in failed_tests:
            print(f"   {failed_test}")

if __name__ == "__main__":
    main()