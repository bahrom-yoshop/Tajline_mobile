#!/usr/bin/env python3
"""
Test to find unplaced cargo units for testing verify-cargo API
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://cargo-sync.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
auth_token = None

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        return response
    
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request failed: {e}")
        return None

def authenticate():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    global auth_token
    
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response = make_request("POST", "/auth/login", auth_data)
    
    if response and response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user_info.get('full_name')} ({user_info.get('role')})")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False

def find_unplaced_units():
    """–ò—â–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–æ–≤"""
    print("\nüîç –ò—â–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–æ–≤...")
    
    response = make_request("GET", "/operator/cargo/individual-units-for-placement")
    
    if response and response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(items)}")
        
        unplaced_units = []
        
        for item in items:
            individual_number = item.get("individual_number", "N/A")
            cargo_name = item.get("cargo_name", "N/A")
            status = item.get("status", "N/A")
            is_placed = item.get("is_placed", False)
            
            if not is_placed:
                unplaced_units.append(individual_number)
                print(f"   ‚úÖ –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω: {individual_number} - {cargo_name} (—Å—Ç–∞—Ç—É—Å: {status})")
            else:
                print(f"   ‚ùå –†–∞–∑–º–µ—â–µ–Ω: {individual_number} - {cargo_name}")
        
        return unplaced_units
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual units")
        return []

def test_unplaced_units(unplaced_units):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(unplaced_units)} –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü...")
    
    for individual_number in unplaced_units[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {individual_number}")
        
        response = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": individual_number})
        
        if response and response.status_code == 200:
            data = response.json()
            success = data.get("success", False)
            cargo_info = data.get("cargo_info", {})
            error = data.get("error", "")
            
            if success:
                cargo_name = cargo_info.get("cargo_name", "N/A")
                cargo_number = cargo_info.get("cargo_number", "N/A")
                individual_num = cargo_info.get("individual_number", "N/A")
                print(f"      ‚úÖ SUCCESS!")
                print(f"         - cargo_number: {cargo_number}")
                print(f"         - cargo_name: {cargo_name}")
                print(f"         - individual_number: {individual_num}")
            else:
                print(f"      ‚ùå FAIL: {error}")
        else:
            print(f"      ‚ùå HTTP error")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–û–ò–°–ö –ù–ï–†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ì–†–£–ó–û–í –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    if not authenticate():
        return
    
    # –ò—â–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    unplaced_units = find_unplaced_units()
    
    if unplaced_units:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Ö
        test_unplaced_units(unplaced_units)
    else:
        print("\n‚ö†Ô∏è –í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–æ–≤ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã!")
        print("   –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API verify-cargo –Ω—É–∂–Ω—ã –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã.")

if __name__ == "__main__":
    main()