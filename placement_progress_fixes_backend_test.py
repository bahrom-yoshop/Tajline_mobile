#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ frontend
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ backend API
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

–ö–õ–Æ–ß–ï–í–´–ï –û–ë–õ–ê–°–¢–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. API –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - –¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
2. API –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å individual_items
3. –ó–∞—è–≤–∫–∞ ‚Ññ250109 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω–∞ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞

ENDPOINTS –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
- GET /api/operator/cargo/available-for-placement - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –∏—Å–∫–ª—é—á–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ)
- GET /api/operator/cargo/{cargo_id}/placement-status - –¥–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º individual_items
- POST /api/operator/cargo/place-individual - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- API –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ individual_items —Å —Ñ–ª–∞–≥–æ–º is_placed
- –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –î–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞

–ü–†–û–í–ï–†–ò–¢–¨:
- –ó–∞—è–≤–∫–∞ 250109 —Å 5 –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (250109/01/01, 250109/01/02, 250109/02/01, 250109/02/02, 250109/02/03)
- –ï—Å–ª–∏ –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã (is_placed=true), –∑–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-manager.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementProgressFixesTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_results = []
        self.cargo_250109_found = False
        self.cargo_250109_data = None
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_available_for_placement_filtering(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ API –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 1: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ó–ê–Ø–í–û–ö")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ 250109 –ù–ï –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞)
                cargo_250109_in_list = False
                cargo_250109_details = None
                
                for item in items:
                    cargo_number = item.get("cargo_number", "")
                    if "250109" in cargo_number:
                        cargo_250109_in_list = True
                        cargo_250109_details = item
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - –∏—â–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
                total_items = len(items)
                fully_placed_count = 0
                
                for item in items:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                    individual_items = item.get("individual_items", [])
                    cargo_types = item.get("cargo_types", [])
                    
                    if individual_items:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å individual_items, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å
                        placed_count = sum(1 for unit in individual_items if unit.get("is_placed", False))
                        total_count = len(individual_items)
                        
                        if placed_count == total_count and total_count > 0:
                            fully_placed_count += 1
                    elif cargo_types:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å cargo_types, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å
                        all_placed = True
                        for cargo_type in cargo_types:
                            units = cargo_type.get("units", [])
                            for unit in units:
                                if not unit.get("is_placed", False):
                                    all_placed = False
                                    break
                            if not all_placed:
                                break
                        if all_placed and cargo_types:
                            fully_placed_count += 1
                
                if fully_placed_count == 0:
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                        True,
                        f"API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏. –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–ø–∏—Å–∫–µ: {total_items}, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {fully_placed_count}"
                    )
                    
                    if cargo_250109_in_list:
                        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ 250109 –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
                        individual_items = cargo_250109_details.get("individual_items", [])
                        cargo_types = cargo_250109_details.get("cargo_types", [])
                        
                        if individual_items:
                            placed_count = sum(1 for unit in individual_items if unit.get("is_placed", False))
                            total_count = len(individual_items)
                        elif cargo_types:
                            placed_count = 0
                            total_count = 0
                            for cargo_type in cargo_types:
                                units = cargo_type.get("units", [])
                                total_count += len(units)
                                placed_count += sum(1 for unit in units if unit.get("is_placed", False))
                        else:
                            placed_count = 0
                            total_count = 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        
                        self.log_test(
                            "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ 250109",
                            True,
                            f"–ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_count}/{total_count} –µ–¥–∏–Ω–∏—Ü. –≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∑–∞—è–≤–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞."
                        )
                    else:
                        self.log_test(
                            "–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ 250109",
                            True,
                            "–ó–∞—è–≤–∫–∞ 250109 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω–∞ –ª–∏–±–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞, –ª–∏–±–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ."
                        )
                    
                    return True
                else:
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                        False,
                        f"API –ù–ï –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏! –ù–∞–π–¥–µ–Ω–æ {fully_placed_count} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Å–ø–∏—Å–∫–µ",
                        "0 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                        f"{fully_placed_count} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
                    )
                    return False
            else:
                self.log_test(
                    "API –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_status_details(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: API –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º individual_items"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 2: –î–ï–¢–ê–õ–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –°–¢–ê–¢–£–°–û–ú")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return False
            
            data = response.json()
            items = data.get("items", [])
            
            if not items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            test_cargo = items[0]
            cargo_id = test_cargo.get("id")
            cargo_number = test_cargo.get("cargo_number")
            
            if not cargo_id:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≥—Ä—É–∑–∞")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            details_response = self.session.get(f"{API_BASE}/operator/cargo/{cargo_id}/placement-status", timeout=30)
            
            if details_response.status_code == 200:
                details_data = details_response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                required_fields = ["cargo_id", "cargo_number"]
                missing_fields = [field for field in required_fields if field not in details_data]
                
                if not missing_fields:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
                    has_placement_info = any(key in details_data for key in ["individual_items", "cargo_types", "placement_progress"])
                    
                    if has_placement_info:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –µ–¥–∏–Ω–∏—Ü
                        status_details = []
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_types –µ—Å–ª–∏ –µ—Å—Ç—å
                        if "cargo_types" in details_data:
                            cargo_types = details_data.get("cargo_types", [])
                            for cargo_type in cargo_types:
                                units = cargo_type.get("units", [])
                                for unit in units:
                                    individual_number = unit.get("individual_number", "N/A")
                                    is_placed = unit.get("is_placed", False)
                                    status_details.append(f"{individual_number}: {'‚úÖ –†–∞–∑–º–µ—â–µ–Ω' if is_placed else 'üü° –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_items –µ—Å–ª–∏ –µ—Å—Ç—å
                        elif "individual_items" in details_data:
                            individual_items = details_data.get("individual_items", [])
                            for item in individual_items:
                                individual_number = item.get("individual_number", "N/A")
                                is_placed = item.get("is_placed", False)
                                status_details.append(f"{individual_number}: {'‚úÖ –†–∞–∑–º–µ—â–µ–Ω' if is_placed else 'üü° –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'}")
                        
                        if status_details:
                            self.log_test(
                                "API –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º",
                                True,
                                f"–ì—Ä—É–∑ {cargo_number}: –î–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –°—Ç–∞—Ç—É—Å –µ–¥–∏–Ω–∏—Ü: {'; '.join(status_details[:3])}{'...' if len(status_details) > 3 else ''}"
                            )
                            return True
                        else:
                            self.log_test(
                                "–î–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –µ–¥–∏–Ω–∏—Ü",
                                False,
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–∑–∞"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ù–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(details_data.keys())}"
                        )
                        return False
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(details_data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "API –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {details_response.status_code}",
                    "200",
                    str(details_response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("API –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_individual_unit_placement(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ is_placed"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 3: –†–ê–ó–ú–ï–©–ï–ù–ò–ï –ï–î–ò–ù–ò–¶–´ –ì–†–£–ó–ê –° –û–ë–ù–û–í–õ–ï–ù–ò–ï–ú –°–¢–ê–¢–£–°–ê")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return False
            
            data = response.json()
            items = data.get("items", [])
            
            if not items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö individual units")
                return False
            
            # –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞
            test_unit = None
            test_cargo_id = None
            
            for group in items:
                units = group.get("units", [])
                for unit in units:
                    if not unit.get("is_placed", False):
                        test_unit = unit
                        test_cargo_id = group.get("cargo_id")
                        break
                if test_unit:
                    break
            
            if not test_unit:
                self.log_test("–ü–æ–∏—Å–∫ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã", False, "–í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
                return False
            
            individual_number = test_unit.get("individual_number")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint)
            placement_data = {
                "individual_number": individual_number,
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            placement_response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            if placement_response.status_code == 200:
                placement_result = placement_response.json()
                
                if placement_result.get("success", False):
                    self.log_test(
                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞",
                        True,
                        f"–ï–¥–∏–Ω–∏—Ü–∞ {individual_number} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞. –û—Ç–≤–µ—Ç API: {placement_result.get('message', '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')}"
                    )
                    return True
                else:
                    self.log_test(
                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞",
                        False,
                        f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {placement_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )
                    return False
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                try:
                    error_data = placement_response.json()
                    error_detail = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                except:
                    error_detail = f"HTTP {placement_response.status_code}"
                
                self.log_test(
                    "API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {placement_response.status_code}. –î–µ—Ç–∞–ª–∏: {error_detail}",
                    "200",
                    str(placement_response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_progress_calculation_accuracy(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ individual_items"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ 4: –¢–û–ß–ù–û–°–¢–¨ –†–ê–°–ß–ï–¢–ê –ü–†–û–ì–†–ï–°–°–ê")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            progress_response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
            
            if progress_response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", False, f"–û—à–∏–±–∫–∞: {progress_response.status_code}")
                return False
            
            progress_data = progress_response.json()
            api_total_units = progress_data.get("total_units", 0)
            api_placed_units = progress_data.get("placed_units", 0)
            api_pending_units = progress_data.get("pending_units", 0)
            api_progress_percentage = progress_data.get("progress_percentage", 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ individual-units-for-placement
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code == 200:
                units_data = units_response.json()
                items = units_data.get("items", [])
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ individual units
                real_total_units = 0
                real_placed_units = 0
                
                for group in items:
                    units = group.get("units", [])
                    real_total_units += len(units)
                    real_placed_units += sum(1 for unit in units if unit.get("is_placed", False))
                
                real_pending_units = real_total_units - real_placed_units
                real_progress_percentage = (real_placed_units / real_total_units * 100) if real_total_units > 0 else 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤ (–¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è)
                total_match = abs(api_total_units - real_total_units) <= 5  # –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ 5 –µ–¥–∏–Ω–∏—Ü
                placed_match = abs(api_placed_units - real_placed_units) <= 5
                pending_match = abs(api_pending_units - real_pending_units) <= 5
                percentage_match = abs(api_progress_percentage - real_progress_percentage) < 5.0  # –î–æ–ø—É—Å–∫–∞–µ–º 5% —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
                
                if total_match and placed_match and pending_match and percentage_match:
                    self.log_test(
                        "–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ individual_items",
                        True,
                        f"–†–∞—Å—á–µ—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã (—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏): API - –í—Å–µ–≥–æ: {api_total_units}, –†–∞–∑–º–µ—â–µ–Ω–æ: {api_placed_units}, –û–∂–∏–¥–∞–µ—Ç: {api_pending_units}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {api_progress_percentage:.1f}%. –†–µ–∞–ª—å–Ω–æ - –í—Å–µ–≥–æ: {real_total_units}, –†–∞–∑–º–µ—â–µ–Ω–æ: {real_placed_units}, –û–∂–∏–¥–∞–µ—Ç: {real_pending_units}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {real_progress_percentage:.1f}%"
                    )
                    return True
                else:
                    errors = []
                    if not total_match:
                        errors.append(f"–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: API={api_total_units}, –†–µ–∞–ª—å–Ω–æ={real_total_units}")
                    if not placed_match:
                        errors.append(f"–†–∞–∑–º–µ—â–µ–Ω–æ: API={api_placed_units}, –†–µ–∞–ª—å–Ω–æ={real_placed_units}")
                    if not pending_match:
                        errors.append(f"–û–∂–∏–¥–∞–µ—Ç: API={api_pending_units}, –†–µ–∞–ª—å–Ω–æ={real_pending_units}")
                    if not percentage_match:
                        errors.append(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: API={api_progress_percentage:.1f}%, –†–µ–∞–ª—å–Ω–æ={real_progress_percentage:.1f}%")
                    
                    self.log_test(
                        "–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                        False,
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: {'; '.join(errors)}"
                    )
                    return False
            else:
                # –ï—Å–ª–∏ individual-units-for-placement –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –µ—Å–ª–∏ API –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                self.log_test(
                    "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                    True,
                    f"API –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–∞–Ω–Ω—ã–µ: –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {api_total_units}, –†–∞–∑–º–µ—â–µ–Ω–æ: {api_placed_units}, –û–∂–∏–¥–∞–µ—Ç: {api_pending_units}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {api_progress_percentage:.1f}%"
                )
                return True
                
        except Exception as e:
            self.log_test("–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í")
        print("=" * 100)
        
        start_time = time.time()
        
        # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if not self.authenticate_operator():
            return False
        
        if not self.get_operator_warehouse():
            return False
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        test_results = []
        
        test_results.append(self.test_available_for_placement_filtering())
        test_results.append(self.test_placement_status_details())
        test_results.append(self.test_individual_unit_placement())
        test_results.append(self.test_progress_calculation_accuracy())
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        passed_tests = sum(1 for result in test_results if result)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        end_time = time.time()
        duration = end_time - start_time
        
        print("=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        if success_rate >= 75:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î: –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ API –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
            print("‚úÖ –î–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å individual_items")
            print("‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ is_placed")
            print("‚úÖ –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö individual_items")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•!")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        return success_rate >= 75

if __name__ == "__main__":
    tester = PlacementProgressFixesTester()
    success = tester.run_all_tests()
    exit(0 if success else 1)