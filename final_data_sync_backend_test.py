#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• –ú–ï–ñ–î–£ –†–ï–ñ–ò–ú–ê–ú–ò –í TAJLINE.TJ
===================================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–±–∞ API —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ 250101

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. API available-for-placement (—Ä–µ–∂–∏–º "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫"):
   - –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å total_placed, placement_progress, overall_placement_status
3. API individual-units-for-placement (—Ä–µ–∂–∏–º "Individual Units"):
   - –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101 –≤ grouped_data
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å total_units, placed_units –¥–ª—è –∑–∞—è–≤–∫–∏ 250101
4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –¥–≤—É–º—è API:
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –æ–¥–∏–Ω–∞–∫–æ–≤–æ
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ verify-cargo API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ grouped_data –≤ –æ—Ç–≤–µ—Ç API individual-units-for-placement
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ placed_count –≤ available-for-placement

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –û–±–∞ API –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –¥–ª—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∑–∞—è–≤–∫–∏.
"""

import requests
import json
import sys
from datetime import datetime
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_APPLICATION = "250101"

class FinalDataSyncTest:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.test_results = []
        self.start_time = datetime.now()
        self.available_data = None
        self.individual_data = None
        self.verify_results = {}
        
    def log_test(self, test_name, success, details, duration_ms=0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "duration_ms": duration_ms
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        if duration_ms > 0:
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration_ms}ms")
        print()

    def make_request(self, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        url = f"{BASE_URL}{endpoint}"
        headers = {}
        
        if self.token:
            headers["Authorization"] = f"Bearer {self.token}"
        
        start_time = time.time()
        
        try:
            if method.upper() == "GET":
                response = self.session.get(url, headers=headers, timeout=30)
            elif method.upper() == "POST":
                headers["Content-Type"] = "application/json"
                response = self.session.post(url, json=data, headers=headers, timeout=30)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")
            
            duration_ms = int((time.time() - start_time) * 1000)
            return response, duration_ms
        
        except requests.exceptions.RequestException as e:
            duration_ms = int((time.time() - start_time) * 1000)
            print(f"‚ùå Request failed: {e}")
            return None, duration_ms

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print("=" * 60)
        
        try:
            response, duration = self.make_request("POST", "/auth/login", {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if not response:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", duration)
                return False
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                user_info = data.get("user", {})
                
                if self.token and user_info.get("role") == "warehouse_operator":
                    details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, duration)
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", duration)
                    return False
            else:
                error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", duration)
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def test_available_for_placement_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' - /api/operator/cargo/available-for-placement"""
        print("üì¶ –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API '–ö–ê–†–¢–û–ß–ö–ò –ó–ê–Ø–í–û–ö' (available-for-placement)")
        print("=" * 70)
        
        try:
            response, duration = self.make_request("GET", "/operator/cargo/available-for-placement")
            
            if not response:
                self.log_test("API available-for-placement", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", duration)
                return False
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101
                cargo_250101 = None
                for item in items:
                    if item.get("cargo_number") == TARGET_APPLICATION:
                        cargo_250101 = item
                        break
                
                if cargo_250101:
                    self.available_data = cargo_250101
                    
                    total_placed = cargo_250101.get("total_placed", 0)
                    placement_progress = cargo_250101.get("placement_progress", "")
                    overall_status = cargo_250101.get("overall_placement_status", "")
                    cargo_items = cargo_250101.get("cargo_items", [])
                    
                    print(f"   üìä –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò {TARGET_APPLICATION} –í –†–ï–ñ–ò–ú–ï '–ö–ê–†–¢–û–ß–ö–ò –ó–ê–Ø–í–û–ö':")
                    print(f"   - total_placed: {total_placed}")
                    print(f"   - placement_progress: '{placement_progress}'")
                    print(f"   - overall_placement_status: '{overall_status}'")
                    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cargo_items: {len(cargo_items)}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo_items
                    for i, cargo_item in enumerate(cargo_items):
                        placed_count = cargo_item.get("placed_count", 0)
                        total_units = cargo_item.get("total_units", 0)
                        cargo_name = cargo_item.get("cargo_name", "")
                        individual_items = cargo_item.get("individual_items", [])
                        
                        print(f"   - Cargo Item {i+1} '{cargo_name}': {placed_count}/{total_units} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                        
                        # –ê–Ω–∞–ª–∏–∑ individual_items
                        for individual_item in individual_items:
                            is_placed = individual_item.get("is_placed", False)
                            individual_number = individual_item.get("individual_number", "")
                            placement_info = individual_item.get("placement_info", "")
                            status_icon = "‚úÖ" if is_placed else "‚è≥"
                            print(f"     {status_icon} {individual_number}: is_placed={is_placed}")
                    
                    details = f"–ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞! total_placed: {total_placed}, placement_progress: '{placement_progress}', overall_placement_status: '{overall_status}'"
                    self.log_test("API available-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", True, details, duration)
                    return True
                else:
                    details = f"–ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ. –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(items)}"
                    self.log_test("API available-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", False, details, duration)
                    return False
            else:
                error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
                self.log_test("API available-for-placement", False, f"HTTP {response.status_code}: {error_detail}", duration)
                return False
                
        except Exception as e:
            self.log_test("API available-for-placement", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def test_individual_units_for_placement_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API 'Individual Units –∫–∞—Ä—Ç–æ—á–∫–∏' - /api/operator/cargo/individual-units-for-placement"""
        print("üî¢ –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API 'INDIVIDUAL UNITS –ö–ê–†–¢–û–ß–ö–ò' (individual-units-for-placement)")
        print("=" * 80)
        
        try:
            response, duration = self.make_request("GET", "/operator/cargo/individual-units-for-placement")
            
            if not response:
                self.log_test("API individual-units-for-placement", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", duration)
                return False
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                grouped_data = data.get("grouped_data", {})
                
                print(f"   üìä –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê API individual-units-for-placement:")
                print(f"   - items: {len(items)} –µ–¥–∏–Ω–∏—Ü")
                print(f"   - grouped_data: {len(grouped_data)} –≥—Ä—É–ø–ø")
                print(f"   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {list(grouped_data.keys())}")
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101 –≤ grouped_data
                cargo_250101_grouped = grouped_data.get(TARGET_APPLICATION)
                
                if cargo_250101_grouped:
                    self.individual_data = cargo_250101_grouped
                    
                    total_units = cargo_250101_grouped.get("total_units", 0)
                    placed_units = cargo_250101_grouped.get("placed_units", 0)
                    pending_units = cargo_250101_grouped.get("pending_units", 0)
                    placement_progress = cargo_250101_grouped.get("placement_progress", "")
                    individual_units = cargo_250101_grouped.get("individual_units", [])
                    
                    print(f"   üìä –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò {TARGET_APPLICATION} –í –†–ï–ñ–ò–ú–ï 'INDIVIDUAL UNITS':")
                    print(f"   - total_units: {total_units}")
                    print(f"   - placed_units: {placed_units}")
                    print(f"   - pending_units: {pending_units}")
                    print(f"   - placement_progress: '{placement_progress}'")
                    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units: {len(individual_units)}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ individual_units
                    for i, unit in enumerate(individual_units):
                        individual_number = unit.get("individual_number", "")
                        is_placed = unit.get("is_placed", False)
                        placement_info = unit.get("placement_info", "")
                        status = unit.get("status", "")
                        cargo_name = unit.get("cargo_name", "")
                        status_icon = "‚úÖ" if is_placed else "‚è≥"
                        
                        print(f"   {status_icon} Unit {i+1}: {individual_number} - '{cargo_name}' - is_placed={is_placed}, status='{status}'")
                    
                    details = f"–ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞ –≤ grouped_data! total_units: {total_units}, placed_units: {placed_units}, pending_units: {pending_units}"
                    self.log_test("API individual-units-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", True, details, duration)
                    return True
                else:
                    details = f"–ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ grouped_data. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {list(grouped_data.keys())}"
                    self.log_test("API individual-units-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", False, details, duration)
                    return False
            else:
                error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
                self.log_test("API individual-units-for-placement", False, f"HTTP {response.status_code}: {error_detail}", duration)
                return False
                
        except Exception as e:
            self.log_test("API individual-units-for-placement", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def verify_actual_placement_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ verify-cargo API"""
        print("üîç –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∑–∞—è–≤–∫–∏ 250101
        individual_numbers = [
            f"{TARGET_APPLICATION}/01/01",
            f"{TARGET_APPLICATION}/01/02", 
            f"{TARGET_APPLICATION}/02/01",
            f"{TARGET_APPLICATION}/02/02"
        ]
        
        placed_count = 0
        total_count = len(individual_numbers)
        
        print(f"   üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º {total_count} –µ–¥–∏–Ω–∏—Ü –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}:")
        
        for individual_number in individual_numbers:
            try:
                response, duration = self.make_request("POST", "/operator/placement/verify-cargo", {
                    "qr_code": individual_number
                })
                
                if not response:
                    self.verify_results[individual_number] = {
                        "status": "–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏",
                        "details": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
                    }
                    continue
                
                if response.status_code == 200:
                    data = response.json()
                    success = data.get("success", False)
                    cargo_info = data.get("cargo_info", {})
                    
                    if success:
                        self.verify_results[individual_number] = {
                            "status": "–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω",
                            "cargo_name": cargo_info.get("cargo_name", ""),
                            "details": "–ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é"
                        }
                        print(f"   ‚è≥ {individual_number}: –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω (–≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é)")
                    else:
                        self.verify_results[individual_number] = {
                            "status": "–æ—à–∏–±–∫–∞ API",
                            "details": data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        }
                        print(f"   ‚ùå {individual_number}: –æ—à–∏–±–∫–∞ API - {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        
                elif response.status_code == 400:
                    # –ì—Ä—É–∑ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    error_data = response.json() if response.content else {}
                    error_message = error_data.get("detail", "–ì—Ä—É–∑ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω")
                    
                    if "—É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω" in error_message.lower():
                        self.verify_results[individual_number] = {
                            "status": "—Ä–∞–∑–º–µ—â–µ–Ω",
                            "details": "–ì—Ä—É–∑ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ"
                        }
                        placed_count += 1
                        print(f"   ‚úÖ {individual_number}: —Ä–∞–∑–º–µ—â–µ–Ω")
                    else:
                        self.verify_results[individual_number] = {
                            "status": "–æ—à–∏–±–∫–∞",
                            "details": error_message
                        }
                        print(f"   ‚ùå {individual_number}: –æ—à–∏–±–∫–∞ - {error_message}")
                else:
                    error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
                    self.verify_results[individual_number] = {
                        "status": "HTTP –æ—à–∏–±–∫–∞",
                        "details": f"HTTP {response.status_code}: {error_detail}"
                    }
                    print(f"   ‚ùå {individual_number}: HTTP {response.status_code}")
                    
            except Exception as e:
                self.verify_results[individual_number] = {
                    "status": "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ",
                    "details": f"–û—à–∏–±–∫–∞: {str(e)}"
                }
                print(f"   ‚ùå {individual_number}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {str(e)}")
        
        print(f"\n   üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•:")
        print(f"   - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_count}")
        print(f"   - –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_count}")
        print(f"   - –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {total_count - placed_count}")
        print(f"   - –ü—Ä–æ–≥—Ä–µ—Å—Å: {placed_count}/{total_count}")
        
        details = f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {placed_count}/{total_count} –µ–¥–∏–Ω–∏—Ü –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}"
        self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", True, details)
        
        return placed_count, total_count

    def compare_apis_data(self, actual_placed, actual_total):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –¥–≤—É–º—è API –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print("‚öñÔ∏è –≠–¢–ê–ü 5: –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ú–ï–ñ–î–£ API")
        print("=" * 60)
        
        print(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ó–ê–Ø–í–ö–ï {TARGET_APPLICATION}:")
        print("-" * 50)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API available-for-placement
        available_placed = "–ù–ï –ù–ê–ô–î–ï–ù–û"
        available_progress = "–ù–ï –ù–ê–ô–î–ï–ù–û"
        if self.available_data:
            available_placed = self.available_data.get("total_placed", 0)
            available_progress = self.available_data.get("placement_progress", "")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API individual-units-for-placement
        individual_placed = "–ù–ï –ù–ê–ô–î–ï–ù–û"
        individual_total = "–ù–ï –ù–ê–ô–î–ï–ù–û"
        individual_progress = "–ù–ï –ù–ê–ô–î–ï–ù–û"
        if self.individual_data:
            individual_placed = self.individual_data.get("placed_units", 0)
            individual_total = self.individual_data.get("total_units", 0)
            individual_progress = self.individual_data.get("placement_progress", "")
        
        print(f"1Ô∏è‚É£ API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' (available-for-placement):")
        print(f"   - total_placed: {available_placed}")
        print(f"   - placement_progress: '{available_progress}'")
        
        print(f"2Ô∏è‚É£ API 'Individual Units' (individual-units-for-placement):")
        print(f"   - placed_units: {individual_placed}")
        print(f"   - total_units: {individual_total}")
        print(f"   - placement_progress: '{individual_progress}'")
        
        print(f"3Ô∏è‚É£ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—á–µ—Ä–µ–∑ verify-cargo):")
        print(f"   - —Ä–∞–∑–º–µ—â–µ–Ω–æ: {actual_placed}")
        print(f"   - –≤—Å–µ–≥–æ: {actual_total}")
        print(f"   - –ø—Ä–æ–≥—Ä–µ—Å—Å: {actual_placed}/{actual_total}")
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
        print("-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        sync_issues = []
        sync_success = []
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
        if self.available_data and self.individual_data:
            if available_placed == individual_placed:
                sync_success.append(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {available_placed}")
            else:
                sync_issues.append(f"‚ùå –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' ({available_placed}) vs API 'Individual Units' ({individual_placed})")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if self.available_data and available_placed == actual_placed:
            sync_success.append(f"‚úÖ API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º: {available_placed}")
        elif self.available_data:
            sync_issues.append(f"‚ùå API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º: {available_placed} vs {actual_placed}")
        
        if self.individual_data and individual_placed == actual_placed:
            sync_success.append(f"‚úÖ API 'Individual Units' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º: {individual_placed}")
        elif self.individual_data:
            sync_issues.append(f"‚ùå API 'Individual Units' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º: {individual_placed} vs {actual_placed}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–æ–∏—Ö API
        if self.available_data and self.individual_data:
            sync_success.append("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±–æ–∏—Ö API")
        elif not self.available_data and not self.individual_data:
            sync_issues.append("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ API")
        elif not self.available_data:
            sync_issues.append("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫'")
        elif not self.individual_data:
            sync_issues.append("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API 'Individual Units'")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if sync_success:
            print("‚úÖ –£–°–ü–ï–®–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø:")
            for success in sync_success:
                print(f"   {success}")
        
        if sync_issues:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
            for issue in sync_issues:
                print(f"   {issue}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not sync_issues:
            details = f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É API. –†–∞–∑–º–µ—â–µ–Ω–æ: {actual_placed}/{actual_total}"
            self.log_test("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", True, details)
            return True
        else:
            details = f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(sync_issues)} –ø—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            self.log_test("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", False, details)
            return False

    def run_final_sync_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
        print("=" * 80)
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–¶–µ–ª–µ–≤–∞—è –∑–∞—è–≤–∫–∞: {TARGET_APPLICATION}")
        print(f"–¶–µ–ª—å: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–±–∞ API –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
        print()
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫"
        available_success = self.test_available_for_placement_api()
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API "Individual Units"
        individual_success = self.test_individual_units_for_placement_api()
        
        # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        actual_placed, actual_total = self.verify_actual_placement_data()
        
        # –≠—Ç–∞–ø 5: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        sync_success = self.compare_apis_data(actual_placed, actual_total)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report(sync_success)
        
        return sync_success

    def generate_final_report(self, sync_success):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"   - –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        total_duration = (datetime.now() - self.start_time).total_seconds()
        print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 50)
        
        for i, result in enumerate(self.test_results, 1):
            status = "‚úÖ" if result["success"] else "‚ùå"
            duration_info = f" ({result['duration_ms']}ms)" if result.get('duration_ms') else ""
            print(f"{i}. {status} {result['test']}{duration_info}")
            if result["details"]:
                print(f"   {result['details']}")
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        if self.available_data and self.individual_data:
            available_placed = self.available_data.get("total_placed", 0)
            individual_placed = self.individual_data.get("placed_units", 0)
            
            if available_placed == individual_placed:
                print(f"   ‚úÖ –û–±–∞ API –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {available_placed}")
            else:
                print(f"   ‚ùå API –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {available_placed} vs {individual_placed}")
        
        if sync_success:
            print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print("   ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("-" * 20)
        
        if sync_success and success_rate >= 80:
            print("   üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("   üìç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("   üìç –û–±–∞ API —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏!")
        else:
            print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
            print("   üìç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É API –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        print(f"\n–û–¢–ß–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• TAJLINE.TJ")
    print("=" * 70)
    
    tester = FinalDataSyncTest()
    success = tester.run_final_sync_test()
    
    if success:
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´")
        sys.exit(1)