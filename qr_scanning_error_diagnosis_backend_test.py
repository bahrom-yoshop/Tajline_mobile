#!/usr/bin/env python3
"""
üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–ê: 25082026/01/02

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ë–õ–ï–ú–´:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞:
- –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: 25082026
- QR –∫–æ–¥ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 25082026/01/02
- –û—à–∏–±–∫–∞: "–ï–¥–∏–Ω–∏—Ü–∞ 02 –≥—Ä—É–∑–∞ —Ç–∏–ø–∞ 01 –∏–∑ –∑–∞—è–≤–∫–∏ 25082026 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

–°–ò–ú–ü–¢–û–ú–´ –ò–ó –°–ö–†–ò–ù–®–û–¢–ê:
1. –í —Ä–∞–∑–¥–µ–ª–µ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ" –ø–æ–∫–∞–∑–∞–Ω–æ 18 –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
2. QR –∫–æ–¥ 25082026/01/02 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π –∫–∞–∫ –¢–ò–ü 3 (–µ–¥–∏–Ω–∏—Ü–∞ –≥—Ä—É–∑–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–∏–ø–∞)
3. –°–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç: –∑–∞—è–≤–∫–∞ 25082026 ‚Üí –≥—Ä—É–∑ —Ç–∏–ø–∞ 01 ‚Üí –µ–¥–∏–Ω–∏—Ü–∞ 02
4. –ù–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É —á—Ç–æ –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

–ó–ê–î–ê–ß–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
1. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ 25082026**
2. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_items**
3. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å individual_items**
4. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoint**
5. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–≤**
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://placement-manager.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRScanningErrorDiagnoser:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        self.target_cargo_number = "25082026"
        self.target_qr_code = "25082026/01/02"
        self.found_cargo = None
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ –ù–ê–ô–î–ï–ù–û" if success else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def check_cargo_exists_in_placement_list(self):
        """1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ 25082026 –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                pagination = data.get("pagination", {})
                total_count = pagination.get("total_count", 0)
                
                # –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082026
                target_cargo = None
                for item in items:
                    if item.get("cargo_number") == self.target_cargo_number:
                        target_cargo = item
                        self.found_cargo = item
                        break
                
                if target_cargo:
                    cargo_items = target_cargo.get("cargo_items", [])
                    individual_items = []
                    for cargo_item in cargo_items:
                        individual_items.extend(cargo_item.get("individual_items", []))
                    
                    self.log_test(
                        f"–ó–∞—è–≤–∫–∞ {self.target_cargo_number} –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! ID: {target_cargo.get('id')}, cargo_items: {len(cargo_items)}, individual_items: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü. –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_count}"
                    )
                    return True
                else:
                    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    available_numbers = [item.get("cargo_number") for item in items[:10]]  # –ü–µ—Ä–≤—ã–µ 10
                    self.log_test(
                        f"–ó–∞—è–≤–∫–∞ {self.target_cargo_number} –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        error=f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {total_count} –≥—Ä—É–∑–æ–≤. –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {available_numbers}"
                    )
                    return False
            else:
                self.log_test(
                    f"–ó–∞—è–≤–∫–∞ {self.target_cargo_number} –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(f"–ó–∞—è–≤–∫–∞ {self.target_cargo_number} –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, error=str(e))
            return False

    def check_cargo_items_structure(self):
        """2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_items –¥–ª—è —Ç–∏–ø–∞ 01"""
        if not self.found_cargo:
            self.log_test(
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_items –¥–ª—è —Ç–∏–ø–∞ 01",
                False,
                error="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
            )
            return False
            
        try:
            cargo_items = self.found_cargo.get("cargo_items", [])
            
            if not cargo_items:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_items –¥–ª—è —Ç–∏–ø–∞ 01",
                    False,
                    error="cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç"
                )
                return False
            
            # –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ —Ç–∏–ø–∞ 01 (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–æ–º 01)
            type_01_cargo = None
            for i, cargo_item in enumerate(cargo_items):
                type_number = f"{i+1:02d}"  # 01, 02, 03...
                if type_number == "01":
                    type_01_cargo = cargo_item
                    break
            
            if type_01_cargo:
                cargo_name = type_01_cargo.get("cargo_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                quantity = type_01_cargo.get("quantity", 0)
                individual_items = type_01_cargo.get("individual_items", [])
                
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_items –¥–ª—è —Ç–∏–ø–∞ 01",
                    True,
                    f"–ì—Ä—É–∑ —Ç–∏–ø–∞ 01 –Ω–∞–π–¥–µ–Ω: '{cargo_name}', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}, individual_items: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü"
                )
                return True
            else:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_items –¥–ª—è —Ç–∏–ø–∞ 01",
                    False,
                    error=f"–ì—Ä—É–∑ —Ç–∏–ø–∞ 01 –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—Å–µ–≥–æ cargo_items: {len(cargo_items)}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_items –¥–ª—è —Ç–∏–ø–∞ 01", False, error=str(e))
            return False

    def check_individual_items_for_unit_02(self):
        """3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02"""
        if not self.found_cargo:
            self.log_test(
                "Individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02",
                False,
                error="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å individual_items"
            )
            return False
            
        try:
            cargo_items = self.found_cargo.get("cargo_items", [])
            
            if not cargo_items:
                self.log_test(
                    "Individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02",
                    False,
                    error="cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ (—Ç–∏–ø 01)
            type_01_cargo = cargo_items[0] if cargo_items else None
            
            if not type_01_cargo:
                self.log_test(
                    "Individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02",
                    False,
                    error="–ì—Ä—É–∑ —Ç–∏–ø–∞ 01 –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return False
            
            individual_items = type_01_cargo.get("individual_items", [])
            
            if not individual_items:
                self.log_test(
                    "Individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02",
                    False,
                    error="individual_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç –¥–ª—è –≥—Ä—É–∑–∞ —Ç–∏–ø–∞ 01"
                )
                return False
            
            # –ü–æ–∏—Å–∫ –µ–¥–∏–Ω–∏—Ü—ã 02
            unit_02_found = False
            unit_details = []
            
            for item in individual_items:
                unit_index = item.get("unit_index", "")
                individual_number = item.get("individual_number", "")
                unit_details.append(f"unit_index: {unit_index}, individual_number: {individual_number}")
                
                if unit_index == "02":
                    unit_02_found = True
                    break
            
            if unit_02_found:
                self.log_test(
                    "Individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02",
                    True,
                    f"–ï–¥–∏–Ω–∏—Ü–∞ 02 –Ω–∞–π–¥–µ–Ω–∞! –í—Å–µ–≥–æ individual_items: {len(individual_items)}. –î–µ—Ç–∞–ª–∏: {unit_details[:3]}"
                )
                return True
            else:
                self.log_test(
                    "Individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02",
                    False,
                    error=f"–ï–¥–∏–Ω–∏—Ü–∞ 02 –ù–ï –Ω–∞–π–¥–µ–Ω–∞. –í—Å–µ–≥–æ individual_items: {len(individual_items)}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: {unit_details}"
                )
                return False
                
        except Exception as e:
            self.log_test("Individual_items –¥–ª—è –µ–¥–∏–Ω–∏—Ü—ã 02", False, error=str(e))
            return False

    def check_placement_status_api(self):
        """4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoint placement-status"""
        if not self.found_cargo:
            self.log_test(
                "API placement-status",
                False,
                error="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å placement-status"
            )
            return False
            
        try:
            cargo_id = self.found_cargo.get("id")
            if not cargo_id:
                self.log_test(
                    "API placement-status",
                    False,
                    error="cargo_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏"
                )
                return False
            
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ["cargo_id", "cargo_number", "total_quantity", "total_placed", "placement_progress"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    cargo_number = data.get("cargo_number")
                    total_quantity = data.get("total_quantity")
                    total_placed = data.get("total_placed")
                    placement_progress = data.get("placement_progress")
                    individual_units = data.get("individual_units", [])
                    
                    # –ü–æ–∏—Å–∫ –µ–¥–∏–Ω–∏—Ü—ã 25082026/01/02 –≤ individual_units
                    target_unit_found = False
                    for unit in individual_units:
                        if unit.get("individual_number") == self.target_qr_code:
                            target_unit_found = True
                            break
                    
                    self.log_test(
                        "API placement-status",
                        True,
                        f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç! –ì—Ä—É–∑: {cargo_number}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity}, —Ä–∞–∑–º–µ—â–µ–Ω–æ: {total_placed}, –ø—Ä–æ–≥—Ä–µ—Å—Å: {placement_progress}. Individual_units: {len(individual_units)}. –¶–µ–ª–µ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ {self.target_qr_code}: {'–Ω–∞–π–¥–µ–Ω–∞' if target_unit_found else '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}"
                    )
                    return True
                else:
                    self.log_test(
                        "API placement-status",
                        False,
                        error=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "API placement-status",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("API placement-status", False, error=str(e))
            return False

    def check_place_individual_api(self):
        """5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoint place-individual —Å —Ü–µ–ª–µ–≤—ã–º QR –∫–æ–¥–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            warehouses_response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if warehouses_response.status_code != 200:
                self.log_test(
                    "API place-individual —Å QR 25082026/01/02",
                    False,
                    error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            warehouses = warehouses_response.json()
            if not warehouses:
                self.log_test(
                    "API place-individual —Å QR 25082026/01/02",
                    False,
                    error="–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤"
                )
                return False
            
            warehouse_id = warehouses[0].get("id")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º QR –∫–æ–¥–æ–º
            placement_data = {
                "individual_number": self.target_qr_code,
                "warehouse_id": warehouse_id,
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place-individual",
                json=placement_data
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "API place-individual —Å QR 25082026/01/02",
                    True,
                    f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç! QR –∫–æ–¥ {self.target_qr_code} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –û—Ç–≤–µ—Ç: {data.get('message', '–£—Å–ø–µ—à–Ω–æ')}"
                )
                return True
            elif response.status_code == 404:
                # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                error_detail = response.text
                self.log_test(
                    "API place-individual —Å QR 25082026/01/02",
                    False,
                    error=f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: {error_detail}. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
                )
                return False
            elif response.status_code == 422:
                # –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
                error_detail = response.text
                self.log_test(
                    "API place-individual —Å QR 25082026/01/02",
                    False,
                    error=f"–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_detail}"
                )
                return False
            else:
                self.log_test(
                    "API place-individual —Å QR 25082026/01/02",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("API place-individual —Å QR 25082026/01/02", False, error=str(e))
            return False

    def check_data_format_compatibility(self):
        """6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.found_cargo:
            self.log_test(
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
                False,
                error="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
            )
            return False
            
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            cargo_items = self.found_cargo.get("cargo_items", [])
            
            format_issues = []
            compatibility_score = 0
            total_checks = 4
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–∞–ª–∏—á–∏–µ cargo_items
            if cargo_items:
                compatibility_score += 1
            else:
                format_issues.append("cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–∞–ª–∏—á–∏–µ individual_items –≤ –ø–µ—Ä–≤–æ–º –≥—Ä—É–∑–µ
            if cargo_items and cargo_items[0].get("individual_items"):
                compatibility_score += 1
            else:
                format_issues.append("individual_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–≤–æ–º –≥—Ä—É–∑–µ")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è unit_index
            if cargo_items and cargo_items[0].get("individual_items"):
                individual_items = cargo_items[0]["individual_items"]
                unit_indexes = [item.get("unit_index") for item in individual_items]
                if "01" in unit_indexes and "02" in unit_indexes:
                    compatibility_score += 1
                else:
                    format_issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è unit_index: {unit_indexes}")
            else:
                format_issues.append("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å unit_index")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ individual_number —Ñ–æ—Ä–º–∞—Ç—É
            if cargo_items and cargo_items[0].get("individual_items"):
                individual_items = cargo_items[0]["individual_items"]
                individual_numbers = [item.get("individual_number") for item in individual_items]
                expected_format = f"{self.target_cargo_number}/01/"
                matching_format = [num for num in individual_numbers if num and num.startswith(expected_format)]
                if matching_format:
                    compatibility_score += 1
                else:
                    format_issues.append(f"individual_number –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É. –ù–∞–π–¥–µ–Ω–æ: {individual_numbers[:3]}")
            else:
                format_issues.append("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å individual_number")
            
            compatibility_percentage = (compatibility_score / total_checks) * 100
            
            if compatibility_percentage >= 75:
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility_percentage:.1f}% ({compatibility_score}/{total_checks}). –ü—Ä–æ–±–ª–µ–º—ã: {format_issues}"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    error=f"–ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility_percentage:.1f}% ({compatibility_score}/{total_checks}). –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {format_issues}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö", False, error=str(e))
            return False

    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –æ—à–∏–±–∫–∏ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–ê: 25082026/01/02")
        print("=" * 80)
        print()
        print("–ü–†–û–ë–õ–ï–ú–ê: '–ï–¥–∏–Ω–∏—Ü–∞ 02 –≥—Ä—É–∑–∞ —Ç–∏–ø–∞ 01 –∏–∑ –∑–∞—è–≤–∫–∏ 25082026 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'")
        print("QR –ö–û–î: 25082026/01/02 (–¢–ò–ü 3: –µ–¥–∏–Ω–∏—Ü–∞ –≥—Ä—É–∑–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–∏–ø–∞)")
        print()
        
        # Authentication
        if not self.authenticate_operator():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # Diagnostic tests
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        print("-" * 50)
        
        test_results = []
        test_results.append(self.check_cargo_exists_in_placement_list())
        test_results.append(self.check_cargo_items_structure())
        test_results.append(self.check_individual_items_for_unit_02())
        test_results.append(self.check_placement_status_api())
        test_results.append(self.check_place_individual_api())
        test_results.append(self.check_data_format_compatibility())
        
        # Summary
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print("=" * 50)
        
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # Detailed results
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 40)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    üìã {result['details']}")
            if result["error"]:
                print(f"    ‚ùå {result['error']}")
        
        print()
        print("üéØ –î–ò–ê–ì–ù–û–ó:")
        print("-" * 20)
        
        if success_rate >= 80:
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            print("   –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ frontend –ª–æ–≥–∏–∫–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´")
            print("   –ó–∞—è–≤–∫–∞ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        # Recommendations
        print()
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("-" * 35)
        
        if not test_results[0]:  # Cargo not found
            print("1. ‚ùå –ó–∞—è–≤–∫–∞ 25082026 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            print("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚Üí –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞—è–≤–∫–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'awaiting_placement'")
        
        if not test_results[1]:  # cargo_items structure
            print("2. ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π cargo_items")
            print("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ cargo_items —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã")
            print("   ‚Üí –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É 01")
        
        if not test_results[2]:  # individual_items
            print("3. ‚ùå –ï–¥–∏–Ω–∏—Ü–∞ 02 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ individual_items")
            print("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é individual_items –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
            print("   ‚Üí –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ unit_index –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω—É–º–µ—Ä—É–µ—Ç—Å—è (01, 02, 03...)")
        
        if not test_results[3]:  # placement-status API
            print("4. ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API placement-status")
            print("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint /operator/cargo/{id}/placement-status")
            print("   ‚Üí –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ individual_units –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if not test_results[4]:  # place-individual API
            print("5. ‚ùå API place-individual –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–∏—Ü—É")
            print("   ‚Üí –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            print("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ individual_number")
        
        if not test_results[5]:  # data format compatibility
            print("6. ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ frontend –∏ backend —Ñ–æ—Ä–º–∞—Ç–æ–≤")
            print("   ‚Üí –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ individual_number –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        return success_rate >= 50

if __name__ == "__main__":
    diagnoser = QRScanningErrorDiagnoser()
    success = diagnoser.run_comprehensive_diagnosis()
    sys.exit(0 if success else 1)