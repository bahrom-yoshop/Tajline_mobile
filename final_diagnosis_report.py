#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢: –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" –≤ TAJLINE.TJ

–ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:
1. –†–∞–∑–¥–µ–ª "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç GET /api/cargo/all (2054+ –≥—Ä—É–∑–æ–≤)
2. –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: DELETE /api/admin/cargo/{id} ‚úÖ
3. –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ù–ï –†–ê–ë–û–¢–ê–ï–¢: DELETE /api/admin/cargo/bulk ‚ùå

–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:
Endpoint DELETE /api/admin/cargo/bulk –∏–º–µ–µ—Ç –ö–†–ò–¢–ò–ß–ï–°–ö–£–Æ –û–®–ò–ë–ö–£ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç `cargo_ids: dict` –≤–º–µ—Å—Ç–æ Pydantic –º–æ–¥–µ–ª–∏
- FastAPI –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç—å JSON body
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 "–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"

–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
- –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: DELETE /api/admin/cargo/{id} ‚Üí HTTP 200 ‚úÖ
- –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: DELETE /api/admin/cargo/bulk ‚Üí HTTP 404 ‚ùå
- –õ—é–±–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ({"ids": []}, {"cargo_ids": []}) ‚Üí HTTP 404 ‚ùå

–†–ï–®–ï–ù–ò–ï:
1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å endpoint DELETE /api/admin/cargo/bulk
2. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é Pydantic –º–æ–¥–µ–ª—å –¥–ª—è bulk deletion
3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –≤–º–µ—Å—Ç–æ `dict` –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
"""

import requests
import json
import os

BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-tracker-31.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def generate_final_report():
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    print()
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    auth_data = {"phone": "+79999888777", "password": "admin123"}
    session = requests.Session()
    
    response = session.post(f"{API_BASE}/auth/login", json=auth_data)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        return
    
    admin_token = response.json().get("access_token")
    admin_info = response.json().get("user")
    headers = {"Authorization": f"Bearer {admin_token}"}
    
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {admin_info.get('full_name')} ({admin_info.get('user_number')})")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
    response = session.get(f"{API_BASE}/cargo/all", headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤: {response.text}")
        return
    
    cargo_list = response.json()
    cargo_count = len(cargo_list)
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
    statuses = {}
    for cargo in cargo_list:
        status = cargo.get("status", "unknown")
        statuses[status] = statuses.get(status, 0) + 1
    
    print(f"üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–î–ï–õ–ê '–°–ü–ò–°–û–ö –ì–†–£–ó–û–í':")
    print(f"   - Endpoint: GET /api/cargo/all")
    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤: {cargo_count}")
    print(f"   - –°—Ç–∞—Ç—É—Å—ã: {statuses}")
    print()
    
    if cargo_count < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    test_cargo = cargo_list[0]
    cargo_id = test_cargo["id"]
    cargo_number = test_cargo["cargo_number"]
    
    print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–ò–ß–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø:")
    print(f"   - –ì—Ä—É–∑: {cargo_number} (ID: {cargo_id})")
    
    response = session.delete(f"{API_BASE}/admin/cargo/{cargo_id}", headers=headers)
    single_deletion_works = response.status_code == 200
    
    print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: HTTP {response.status_code}")
    print(f"   - –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if single_deletion_works else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    if single_deletion_works:
        print(f"   - –û—Ç–≤–µ—Ç: {response.json()}")
    else:
        print(f"   - –û—à–∏–±–∫–∞: {response.text}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if cargo_count >= 3:
        test_cargo_ids = [cargo["id"] for cargo in cargo_list[1:3]]
        test_cargo_numbers = [cargo["cargo_number"] for cargo in cargo_list[1:3]]
        
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø:")
        print(f"   - –ì—Ä—É–∑—ã: {test_cargo_numbers}")
        print(f"   - IDs: {test_cargo_ids}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        test_structures = [
            ("ids", {"ids": test_cargo_ids}),
            ("cargo_ids", {"cargo_ids": test_cargo_ids}),
            ("direct_list", test_cargo_ids)
        ]
        
        bulk_deletion_works = False
        
        for structure_name, data in test_structures:
            print(f"   üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ '{structure_name}': {data}")
            response = session.delete(f"{API_BASE}/admin/cargo/bulk", json=data, headers=headers)
            works = response.status_code == 200
            
            print(f"      - HTTP {response.status_code}: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if works else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
            if works:
                print(f"      - –û—Ç–≤–µ—Ç: {response.json()}")
                bulk_deletion_works = True
            else:
                print(f"      - –û—à–∏–±–∫–∞: {response.text}")
            print()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        print("üîç –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
        print("=" * 50)
        
        if single_deletion_works and not bulk_deletion_works:
            print("‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –†–ê–ë–û–¢–ê–ï–¢")
            print("‚ùå –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            print()
            print("üéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ù–ê–ô–î–ï–ù–ê:")
            print("   Endpoint DELETE /api/admin/cargo/bulk –∏–º–µ–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É")
            print("   –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç 'cargo_ids: dict' –≤–º–µ—Å—Ç–æ")
            print("   –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π Pydantic –º–æ–¥–µ–ª–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É")
            print("   –ø–∞—Ä—Å–∏–Ω–≥—É JSON body –∏ –æ—à–∏–±–∫–µ 404 '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'.")
            print()
            print("üîß –†–ï–®–ï–ù–ò–ï:")
            print("   1. –°–æ–∑–¥–∞—Ç—å Pydantic –º–æ–¥–µ–ª—å –¥–ª—è bulk deletion:")
            print("      class BulkDeleteRequest(BaseModel):")
            print("          ids: List[str] = Field(..., min_items=1, max_items=100)")
            print()
            print("   2. –ò–∑–º–µ–Ω–∏—Ç—å endpoint –Ω–∞:")
            print("      async def delete_cargo_bulk(")
            print("          request: BulkDeleteRequest,")
            print("          current_user: User = Depends(get_current_user)")
            print("      ):")
            print()
            print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å request.ids –≤–º–µ—Å—Ç–æ cargo_ids.get('ids', [])")
            print()
            print("üéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print("   –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   –∏ –æ—à–∏–±–∫–∏ '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' –∏ '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏' –∏—Å—á–µ–∑–Ω—É—Ç.")
            
        elif single_deletion_works and bulk_deletion_works:
            print("‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –†–ê–ë–û–¢–ê–ï–¢")
            print("‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –†–ê–ë–û–¢–ê–ï–¢")
            print()
            print("üéâ –ü–†–û–ë–õ–ï–ú–ê –£–ñ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
            print("   –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            
        else:
            print("‚ùå –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            print("‚ùå –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            print()
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API endpoints")
            print("   –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

if __name__ == "__main__":
    generate_final_report()