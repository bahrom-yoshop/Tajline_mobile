#!/usr/bin/env python3
"""
–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–∫–ª–∞–¥—ã" –≤ TAJLINE.TJ

–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–°–∫–ª–∞–¥—ã"
–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
"""

import requests
import json
import os
import time
from datetime import datetime
import concurrent.futures
import threading

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth_token = None

def log_test_result(test_name, success, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {status} {test_name}")
    if details:
        print(f"    üìã {details}")
    print()

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes < 1024:
        return f"{size_bytes} bytes"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.2f} KB"
    else:
        return f"{size_bytes / (1024 * 1024):.2f} MB"

def test_admin_authorization():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    global auth_token
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)")
    
    try:
        login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        start_time = time.time()
        response = requests.post(f"{API_BASE}/auth/login", json=login_data)
        response_time = (time.time() - start_time) * 1000
        
        if response.status_code == 200:
            data = response.json()
            auth_token = data.get("access_token")
            user_info = data.get("user", {})
            
            log_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
                True, 
                f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'N/A')}', –≤—Ä–µ–º—è: {response_time:.0f}ms"
            )
            return True
        else:
            log_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"HTTP {response.status_code}")
            return False
            
    except Exception as e:
        log_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return False

def make_request_with_timing(url, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
    start_time = time.time()
    try:
        response = requests.get(url, headers=headers, timeout=30)
        end_time = time.time()
        response_time = (end_time - start_time) * 1000
        return response, response_time, None
    except Exception as e:
        end_time = time.time()
        response_time = (end_time - start_time) * 1000
        return None, response_time, str(e)

def simulate_warehouse_category_loading():
    """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∫–ª–∞–¥–æ–≤"""
    print("üè≠ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–õ–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ò '–°–ö–õ–ê–î–´'")
    
    if not auth_token:
        log_test_result("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏", False, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    headers = {"Authorization": f"Bearer {auth_token}"}
    total_loading_time = 0
    total_data_size = 0
    requests_made = 0
    
    # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
    print("üìã –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤...")
    response, response_time, error = make_request_with_timing(f"{API_BASE}/warehouses", headers)
    total_loading_time += response_time
    requests_made += 1
    
    if response and response.status_code == 200:
        warehouses = response.json()
        data_size = len(response.content)
        total_data_size += data_size
        
        log_test_result(
            "–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤", 
            True, 
            f"96 —Å–∫–ª–∞–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ {response_time:.0f}ms, —Ä–∞–∑–º–µ—Ä: {format_size(data_size)}"
        )
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
        print("üìä –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        test_warehouses = warehouses[:10]
        statistics_times = []
        
        for i, warehouse in enumerate(test_warehouses):
            warehouse_id = warehouse.get('id')
            warehouse_name = warehouse.get('name', 'Unknown')
            
            if warehouse_id:
                response, response_time, error = make_request_with_timing(
                    f"{API_BASE}/warehouses/{warehouse_id}/statistics", 
                    headers
                )
                statistics_times.append(response_time)
                requests_made += 1
                
                if response and response.status_code == 200:
                    data_size = len(response.content)
                    total_data_size += data_size
                    print(f"    –°–∫–ª–∞–¥ {i+1}/10: {warehouse_name[:30]}... - {response_time:.0f}ms")
                else:
                    print(f"    –°–∫–ª–∞–¥ {i+1}/10: {warehouse_name[:30]}... - –û–®–ò–ë–ö–ê")
        
        if statistics_times:
            avg_statistics_time = sum(statistics_times) / len(statistics_times)
            total_statistics_time = sum(statistics_times)
            total_loading_time += total_statistics_time
            
            # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º –Ω–∞ –≤—Å–µ —Å–∫–ª–∞–¥—ã
            estimated_all_statistics_time = avg_statistics_time * len(warehouses)
            
            log_test_result(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–æ–≤ (10 –∏–∑ 96)", 
                True, 
                f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_statistics_time:.0f}ms, –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è 10: {total_statistics_time:.0f}ms, –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –≤—Å–µ—Ö 96: {estimated_all_statistics_time:.0f}ms"
            )
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–æ–≤
        print("üì¶ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–æ–≤...")
        
        cells_times = []
        for i, warehouse in enumerate(test_warehouses):
            warehouse_id = warehouse.get('id')
            warehouse_name = warehouse.get('name', 'Unknown')
            
            if warehouse_id:
                response, response_time, error = make_request_with_timing(
                    f"{API_BASE}/warehouses/{warehouse_id}/cells", 
                    headers
                )
                cells_times.append(response_time)
                requests_made += 1
                
                if response and response.status_code == 200:
                    data_size = len(response.content)
                    total_data_size += data_size
                    cells_data = response.json()
                    cells_count = len(cells_data) if isinstance(cells_data, list) else 0
                    print(f"    –°–∫–ª–∞–¥ {i+1}/10: {warehouse_name[:30]}... - {response_time:.0f}ms, —è—á–µ–µ–∫: {cells_count}")
                else:
                    print(f"    –°–∫–ª–∞–¥ {i+1}/10: {warehouse_name[:30]}... - –û–®–ò–ë–ö–ê")
        
        if cells_times:
            avg_cells_time = sum(cells_times) / len(cells_times)
            total_cells_time = sum(cells_times)
            total_loading_time += total_cells_time
            
            # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º –Ω–∞ –≤—Å–µ —Å–∫–ª–∞–¥—ã
            estimated_all_cells_time = avg_cells_time * len(warehouses)
            
            log_test_result(
                "–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–æ–≤ (10 –∏–∑ 96)", 
                True, 
                f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_cells_time:.0f}ms, –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è 10: {total_cells_time:.0f}ms, –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –≤—Å–µ—Ö 96: {estimated_all_cells_time:.0f}ms"
            )
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        print("üë• –®–∞–≥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...")
        response, response_time, error = make_request_with_timing(
            f"{API_BASE}/admin/operator-warehouse-bindings", 
            headers
        )
        total_loading_time += response_time
        requests_made += 1
        
        if response and response.status_code == 200:
            data_size = len(response.content)
            total_data_size += data_size
            bindings = response.json()
            bindings_count = len(bindings) if isinstance(bindings, list) else 0
            
            log_test_result(
                "–ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", 
                True, 
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {bindings_count} –ø—Ä–∏–≤—è–∑–æ–∫ –∑–∞ {response_time:.0f}ms"
            )
        
        # 5. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        print("üéØ –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ): {total_loading_time:.0f}ms")
        print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {format_size(total_data_size)}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_made}")
        
        # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –Ω–∞ –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
        if statistics_times and cells_times:
            estimated_full_loading_time = (
                response_time +  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
                avg_statistics_time * len(warehouses) +  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
                avg_cells_time * len(warehouses) +  # –Ø—á–µ–π–∫–∏ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
                20  # –ü—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            )
            
            print(f"üö® –û–¶–ï–ù–ö–ê –ü–û–õ–ù–û–ì–û –í–†–ï–ú–ï–ù–ò –ó–ê–ì–†–£–ó–ö–ò –í–°–ï–• 96 –°–ö–õ–ê–î–û–í: {estimated_full_loading_time:.0f}ms ({estimated_full_loading_time/1000:.1f} —Å–µ–∫—É–Ω–¥)")
            
            if estimated_full_loading_time > 3000:  # –ë–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥
                print("‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 3 —Å–µ–∫—É–Ω–¥—ã!")
                print("üí° –û–°–ù–û–í–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ú–ï–î–õ–ï–ù–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò:")
                print(f"   ‚Ä¢ N+1 –ø—Ä–æ–±–ª–µ–º–∞: {len(warehouses)} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ + {len(warehouses)} –∑–∞–ø—Ä–æ—Å–æ–≤ —è—á–µ–µ–∫")
                print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(warehouses) * 2 + 2} –≤–º–µ—Å—Ç–æ 1-2")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {avg_statistics_time:.0f}ms")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —è—á–µ–µ–∫: {avg_cells_time:.0f}ms")
            else:
                print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
    
    else:
        log_test_result("–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤", False, f"–û—à–∏–±–∫–∞: {error}")

def test_concurrent_loading():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("‚ö° –¢–ï–°–¢ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò")
    
    if not auth_token:
        return
    
    headers = {"Authorization": f"Bearer {auth_token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
    response = requests.get(f"{API_BASE}/warehouses", headers=headers)
    if response.status_code != 200:
        return
    
    warehouses = response.json()[:5]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 5 —Å–∫–ª–∞–¥–∞—Ö
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    print("üìã –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 5 —Å–∫–ª–∞–¥–æ–≤:")
    start_time = time.time()
    for warehouse in warehouses:
        warehouse_id = warehouse.get('id')
        if warehouse_id:
            requests.get(f"{API_BASE}/warehouses/{warehouse_id}/statistics", headers=headers)
    sequential_time = (time.time() - start_time) * 1000
    print(f"    –í—Ä–µ–º—è: {sequential_time:.0f}ms")
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    print("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 5 —Å–∫–ª–∞–¥–æ–≤:")
    start_time = time.time()
    
    def load_warehouse_stats(warehouse_id):
        return requests.get(f"{API_BASE}/warehouses/{warehouse_id}/statistics", headers=headers)
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        futures = []
        for warehouse in warehouses:
            warehouse_id = warehouse.get('id')
            if warehouse_id:
                future = executor.submit(load_warehouse_stats, warehouse_id)
                futures.append(future)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for future in concurrent.futures.as_completed(futures):
            future.result()
    
    parallel_time = (time.time() - start_time) * 1000
    print(f"    –í—Ä–µ–º—è: {parallel_time:.0f}ms")
    
    improvement = ((sequential_time - parallel_time) / sequential_time) * 100
    print(f"üí° –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {improvement:.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–°–∫–ª–∞–¥—ã'")
    print("=" * 80)
    print()
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if not test_admin_authorization():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    simulate_warehouse_category_loading()
    
    # –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    test_concurrent_loading()
    
    print("=" * 80)
    print("üèÅ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 80)

if __name__ == "__main__":
    main()