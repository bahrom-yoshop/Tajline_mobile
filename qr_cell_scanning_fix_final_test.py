#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –í –§–û–†–ú–ê–¢–ï WAREHOUSE_ID-BLOCK-SHELF-CELL

–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "001-01-01-003" 
–≥–¥–µ 001 - ID —Å–∫–ª–∞–¥–∞, 01 - –±–ª–æ–∫, 01 - –ø–æ–ª–∫–∞, 003 - –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏. –ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–¥–∞–≤–∞–ª–æ –æ—à–∏–±–∫—É "—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω".

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –≤ API endpoint POST /api/operator/placement/verify-cell
- –¢–µ–ø–µ—Ä—å –¥–ª—è –Ω–æ–º–µ—Ä–Ω—ã—Ö warehouse_id (–Ω–∞–ø—Ä–∏–º–µ—Ä "001") –ø–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –ø–æ –ø–æ–ª—é warehouse_id_number
- –î–ª—è UUID warehouse_id –ø–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –ø–æ –ø–æ–ª—é id

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
- –í —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" —Å ID: d0a8362d-b4d3-4947-b335-28c94658a021
- –£ —Å–∫–ª–∞–¥–∞ –ù–ï–¢ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ warehouse_id_number (–ø–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)
- –£ —Å–∫–ª–∞–¥–∞ –ù–ï–¢ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã layout (–±–ª–æ–∫–∏, –ø–æ–ª–∫–∏, —è—á–µ–π–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –ë–î)

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ—à–∏–±–∫–∞ "—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" –±–æ–ª—å—à–µ –ù–ï –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–∞–¥–æ–≤
- –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–∞–¥–æ–≤
- –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞, –∞ –Ω–µ —Å –ø–æ–∏—Å–∫–æ–º —Å–∫–ª–∞–¥–∞
"""

import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://cargo-tracker-33.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRCellScanningFixTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
            print("=" * 60)
            
            response = self.session.post(f"{API_BASE}/auth/login", json=WAREHOUSE_OPERATOR_CREDENTIALS)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {self.operator_user.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_warehouse_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–õ–ê–î–ï")
            print("=" * 60)
            
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ",
                        True,
                        f"–°–∫–ª–∞–¥: {warehouse.get('name')}, ID: {warehouse.get('id')}, "
                        f"warehouse_id_number: {warehouse.get('warehouse_id_number', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}, "
                        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {warehouse.get('blocks_count')} –±–ª–æ–∫–æ–≤, "
                        f"{warehouse.get('shelves_per_block')} –ø–æ–ª–æ–∫/–±–ª–æ–∫, "
                        f"{warehouse.get('cells_per_shelf')} —è—á–µ–µ–∫/–ø–æ–ª–∫—É"
                    )
                    return warehouse
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return None
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None

    def test_warehouse_lookup_fix(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –ü–û–ò–°–ö–ê –°–ö–õ–ê–î–ê")
            print("=" * 60)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞
            test_cases = [
                {
                    "name": "QR –∫–æ–¥ —Å –Ω–æ–º–µ—Ä–Ω—ã–º warehouse_id (001)",
                    "qr_code": "001-01-01-001",
                    "expected_error_type": "WAREHOUSE_NOT_FOUND",  # –°–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º 001 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    "description": "–î–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å —Å–∫–ª–∞–¥ –ø–æ warehouse_id_number='001'"
                },
                {
                    "name": "QR –∫–æ–¥ —Å –Ω–æ–º–µ—Ä–Ω—ã–º warehouse_id (002)",
                    "qr_code": "002-01-01-001", 
                    "expected_error_type": "WAREHOUSE_NOT_FOUND",  # –°–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º 002 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    "description": "–î–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å —Å–∫–ª–∞–¥ –ø–æ warehouse_id_number='002'"
                },
                {
                    "name": "QR –∫–æ–¥ —Å UUID warehouse_id",
                    "qr_code": "d0a8362d-b4d3-4947-b335-28c94658a021-01-01-001",
                    "expected_error_type": "CELL_NOT_EXISTS",  # –°–∫–ª–∞–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —è—á–µ–π–∫–∏ –Ω–µ—Ç
                    "description": "–î–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å —Å–∫–ª–∞–¥ –ø–æ id (UUID)"
                },
                {
                    "name": "QR –∫–æ–¥ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º UUID",
                    "qr_code": "00000000-0000-0000-0000-000000000000-01-01-001",
                    "expected_error_type": "WAREHOUSE_NOT_FOUND",  # UUID —Å–∫–ª–∞–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    "description": "–î–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å —Å–∫–ª–∞–¥ –ø–æ id (UUID) –∏ –Ω–µ –Ω–∞–π—Ç–∏"
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                print(f"\nüìã –¢–µ—Å—Ç: {test_case['name']}")
                print(f"   üîç QR –∫–æ–¥: {test_case['qr_code']}")
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {test_case['description']}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cell",
                    json={"qr_code": test_case["qr_code"]}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    error_code = data.get("error_code", "")
                    error_message = data.get("error", "")
                    
                    print(f"   üìä –û—Ç–≤–µ—Ç: success={data.get('success')}, error_code={error_code}")
                    print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                    
                    if error_code == test_case["expected_error_type"]:
                        print(f"   ‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ {error_code}")
                        success_count += 1
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è WAREHOUSE_NOT_FOUND
                        if error_code == "WAREHOUSE_NOT_FOUND":
                            warehouse_id = test_case["qr_code"].split("-")[0]
                            if warehouse_id in error_message:
                                print(f"   ‚úÖ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π warehouse_id: {warehouse_id}")
                            else:
                                print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç warehouse_id: {warehouse_id}")
                    else:
                        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è {test_case['expected_error_type']}, –ø–æ–ª—É—á–µ–Ω {error_code}")
                else:
                    print(f"   ‚ùå HTTP –û–®–ò–ë–ö–ê: {response.status_code}")
            
            self.log_test(
                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞",
                success_count == total_tests,
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤. "
                f"–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –ø–æ warehouse_id_number –∏ UUID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
            )
            
            return success_count == total_tests
                
        except Exception as e:
            self.log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_original_problem_fixed(self):
        """–¢–ï–°–¢: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            print("üéØ –¢–ï–°–¢: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–ë–õ–ï–ú–´")
            print("=" * 60)
            
            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π QR –∫–æ–¥ –∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_qr_code = "001-01-01-003"
            
            print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π QR –∫–æ–¥: {original_qr_code}")
            print("üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–¥–∞–≤–∞–ª–æ –æ—à–∏–±–∫—É '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'")
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": original_qr_code}
            )
            
            if response.status_code == 200:
                data = response.json()
                error_code = data.get("error_code", "")
                error_message = data.get("error", "")
                
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={data.get('success')}, error_code={error_code}")
                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –ù–ï "—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                if error_code != "WAREHOUSE_NOT_FOUND":
                    if error_code == "CELL_NOT_EXISTS":
                        self.log_test(
                            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã",
                            True,
                            f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –û—à–∏–±–∫–∞ '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' –±–æ–ª—å—à–µ –ù–ï –≤–æ–∑–Ω–∏–∫–∞–µ—Ç. "
                            f"–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å–∫–ª–∞–¥ –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —è—á–µ–π–∫–æ–π: {error_message}. "
                            f"–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
                        )
                        return True
                    else:
                        self.log_test(
                            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã",
                            True,
                            f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û! –û—à–∏–±–∫–∞ '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' –±–æ–ª—å—à–µ –ù–ï –≤–æ–∑–Ω–∏–∫–∞–µ—Ç. "
                            f"–ü–æ–ª—É—á–µ–Ω–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {error_message} (–∫–æ–¥: {error_code})"
                        )
                        return True
                else:
                    self.log_test(
                        "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã",
                        False,
                        f"‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê! –í—Å–µ –µ—â–µ –ø–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫—É '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω': {error_message}",
                        "–û—à–∏–±–∫–∞ –æ—Ç–ª–∏—á–Ω–∞—è –æ—Ç WAREHOUSE_NOT_FOUND",
                        f"WAREHOUSE_NOT_FOUND: {error_message}"
                    )
                    return False
            else:
                self.log_test(
                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_error_messages_quality(self):
        """–¢–ï–°–¢: –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        try:
            print("üéØ –¢–ï–°–¢: –ö–ê–ß–ï–°–¢–í–û –°–û–û–ë–©–ï–ù–ò–ô –û–ë –û–®–ò–ë–ö–ê–•")
            print("=" * 60)
            
            test_cases = [
                {
                    "name": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–ª–∞–¥ 999",
                    "qr_code": "999-01-01-001",
                    "expected_message_contains": ["999", "–Ω–µ –Ω–∞–π–¥–µ–Ω"]
                },
                {
                    "name": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–ª–∞–¥ 888",
                    "qr_code": "888-02-03-005",
                    "expected_message_contains": ["888", "–Ω–µ –Ω–∞–π–¥–µ–Ω"]
                },
                {
                    "name": "–ü—É—Å—Ç–æ–π QR –∫–æ–¥",
                    "qr_code": "",
                    "expected_http_status": 400
                },
                {
                    "name": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                    "qr_code": "invalid_format",
                    "expected_http_status": 400
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                print(f"\nüìã –¢–µ—Å—Ç: {test_case['name']}")
                print(f"   üîç QR –∫–æ–¥: '{test_case['qr_code']}'")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cell",
                    json={"qr_code": test_case["qr_code"]}
                )
                
                print(f"   üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if "expected_http_status" in test_case:
                    if response.status_code == test_case["expected_http_status"]:
                        print(f"   ‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π HTTP —Å—Ç–∞—Ç—É—Å {test_case['expected_http_status']}")
                        success_count += 1
                    else:
                        print(f"   ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è HTTP {test_case['expected_http_status']}, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                elif response.status_code == 200:
                    data = response.json()
                    error_message = data.get("error", "")
                    print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
                    
                    if "expected_message_contains" in test_case:
                        contains_all = all(
                            expected_part.lower() in error_message.lower() 
                            for expected_part in test_case["expected_message_contains"]
                        )
                        
                        if contains_all:
                            print(f"   ‚úÖ –£–°–ü–ï–•: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–∏: {test_case['expected_message_contains']}")
                            success_count += 1
                        else:
                            print(f"   ‚ùå –û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —á–∞—Å—Ç–∏: {test_case['expected_message_contains']}")
                else:
                    print(f"   ‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô HTTP –°–¢–ê–¢–£–°: {response.status_code}")
            
            self.log_test(
                "–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö",
                success_count == total_tests,
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤. "
                f"–°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã."
            )
            
            return success_count == total_tests
                
        except Exception as e:
            self.log_test("–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö")
        print("=" * 100)
        print(f"üåê Backend URL: {BACKEND_URL}")
        print(f"üì± –¢–µ—Å—Ç–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_CREDENTIALS['phone']}")
        print("üìã –¶–µ–ª—å: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("=" * 100)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
        warehouse_info = self.get_warehouse_info()
        if not warehouse_info:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_functions = [
            ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞", self.test_warehouse_lookup_fix),
            ("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã", self.test_original_problem_fixed),
            ("–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö", self.test_error_messages_quality),
        ]
        
        test_results = []
        for test_name, test_function in test_functions:
            result = test_function()
            test_results.append((test_name, result))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –ø–æ warehouse_id_number –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –ø–æ UUID —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' –ò–°–ü–†–ê–í–õ–ï–ù–ê")
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print("\nüìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
            print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            print("QR –∫–æ–¥ '001-01-01-003' —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π.")
            print("–û—à–∏–±–∫–∞ '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö QR –∫–æ–¥–æ–≤.")
        elif success_rate >= 80:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –ú–Ω–æ–≥–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        return success_rate == 100

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = QRCellScanningFixTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        exit(1)

if __name__ == "__main__":
    main()