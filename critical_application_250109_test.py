#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–æ–π 250109 - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"

–ö–û–ù–¢–ï–ö–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–ë–õ–ï–ú–´:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª, —á—Ç–æ –∑–∞—è–≤–∫–∞ 250109 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ (–≤—Å–µ –≥—Ä—É–∑—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã), –Ω–æ –æ–Ω–∞ –¥–æ —Å–∏—Ö –ø–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤ "–ì—Ä—É–∑—ã" ‚Üí "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤".

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø, –ö–û–¢–û–†–´–ï –ë–´–õ–ò –°–î–ï–õ–ê–ù–´:
1. ‚úÖ Backend API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –û–±–Ω–æ–≤–ª–µ–Ω `/api/operator/cargo/available-for-placement` –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
2. ‚úÖ –õ–æ–≥–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ `placed_units < total_units` —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —á–µ—Ä–µ–∑ placement_records
3. ‚úÖ Frontend –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250109 –≤ available-for-placement (–ù–ï –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250109 –≤ fully-placed (–î–û–õ–ñ–ù–ê –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ placement_records
4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è —Å –ø–æ–ª–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class CriticalApplication250109Tester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_application_250109_available_for_placement(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250109 –≤ available-for-placement"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 250109 –í –°–ü–ò–°–ö–ï –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250109
                application_250109 = None
                for item in items:
                    cargo_number = item.get("cargo_number", "")
                    if "250109" in cargo_number:
                        application_250109 = item
                        break
                
                if application_250109:
                    # –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    cargo_items = application_250109.get("cargo_items", [])
                    total_units = 0
                    placed_units = 0
                    
                    for cargo_item in cargo_items:
                        quantity = cargo_item.get("quantity", 1)
                        total_units += quantity
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_items –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
                        individual_items = cargo_item.get("individual_items", [])
                        for individual_item in individual_items:
                            if individual_item.get("is_placed", False):
                                placed_units += 1
                    
                    placement_status = f"{placed_units}/{total_units}"
                    
                    if placed_units >= total_units:
                        # –ó–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞, –Ω–æ –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
                        self.log_test(
                            "–ó–∞—è–≤–∫–∞ 250109 –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ available-for-placement",
                            False,
                            f"–ó–∞—è–≤–∫–∞ 250109 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placement_status}), –Ω–æ –≤—Å–µ –µ—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            "–ó–∞—è–≤–∫–∞ –ù–ï –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ available-for-placement",
                            f"–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {placement_status}"
                        )
                        return False
                    else:
                        # –ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                        self.log_test(
                            "–ó–∞—è–≤–∫–∞ 250109 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ available-for-placement",
                            True,
                            f"–ó–∞—è–≤–∫–∞ 250109 –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placement_status}), –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                        )
                        return True
                else:
                    # –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed
                    self.log_test(
                        "–ó–∞—è–≤–∫–∞ 250109 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ available-for-placement",
                        True,
                        "–ó–∞—è–≤–∫–∞ 250109 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞)"
                    )
                    return True
            else:
                self.log_test(
                    "GET /api/operator/cargo/available-for-placement",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250109 –≤ available-for-placement", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_application_250109_fully_placed(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250109 –≤ fully-placed"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 250109 –í –°–ü–ò–°–ö–ï –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–´–•")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250109
                application_250109 = None
                for item in items:
                    cargo_number = item.get("cargo_number", "")
                    if "250109" in cargo_number:
                        application_250109 = item
                        break
                
                if application_250109:
                    # –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    cargo_items = application_250109.get("cargo_items", [])
                    total_units = 0
                    placed_units = 0
                    
                    for cargo_item in cargo_items:
                        quantity = cargo_item.get("quantity", 1)
                        total_units += quantity
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_items –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
                        individual_items = cargo_item.get("individual_items", [])
                        for individual_item in individual_items:
                            if individual_item.get("is_placed", False):
                                placed_units += 1
                    
                    placement_status = f"{placed_units}/{total_units}"
                    
                    if placed_units >= total_units:
                        # –ó–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
                        self.log_test(
                            "–ó–∞—è–≤–∫–∞ 250109 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ fully-placed",
                            True,
                            f"–ó–∞—è–≤–∫–∞ 250109 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placement_status}) –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö"
                        )
                        return True
                    else:
                        # –ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞, –Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ fully-placed - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
                        self.log_test(
                            "–ó–∞—è–≤–∫–∞ 250109 –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ fully-placed",
                            False,
                            f"–ó–∞—è–≤–∫–∞ 250109 –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placement_status}), –Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö",
                            f"–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞",
                            f"–°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_status}"
                        )
                        return False
                else:
                    # –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed
                    self.log_test(
                        "–ó–∞—è–≤–∫–∞ 250109 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ fully-placed",
                        False,
                        "–ó–∞—è–≤–∫–∞ 250109 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞)",
                        "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞",
                        "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/operator/cargo/fully-placed",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250109 –≤ fully-placed", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_records_logic(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ placement_records –¥–ª—è 250109"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò PLACEMENT_RECORDS –î–õ–Ø 250109")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ 250109 –∏–∑ available-for-placement
            available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            application_250109 = None
            if available_response.status_code == 200:
                available_data = available_response.json()
                items = available_data.get("items", [])
                
                for item in items:
                    cargo_number = item.get("cargo_number", "")
                    if "250109" in cargo_number:
                        application_250109 = item
                        break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ available, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ fully-placed
            if not application_250109:
                fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
                
                if fully_placed_response.status_code == 200:
                    fully_placed_data = fully_placed_response.json()
                    items = fully_placed_data.get("items", [])
                    
                    for item in items:
                        cargo_number = item.get("cargo_number", "")
                        if "250109" in cargo_number:
                            application_250109 = item
                            break
            
            if application_250109:
                cargo_id = application_250109.get("id")
                cargo_number = application_250109.get("cargo_number")
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ cargo_items
                cargo_items = application_250109.get("cargo_items", [])
                total_units = 0
                placed_units = 0
                
                placement_details = []
                
                for cargo_item in cargo_items:
                    quantity = cargo_item.get("quantity", 1)
                    total_units += quantity
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_items
                    individual_items = cargo_item.get("individual_items", [])
                    for individual_item in individual_items:
                        individual_number = individual_item.get("individual_number", "")
                        is_placed = individual_item.get("is_placed", False)
                        
                        if is_placed:
                            placed_units += 1
                            placement_details.append(f"{individual_number}: —Ä–∞–∑–º–µ—â–µ–Ω")
                        else:
                            placement_details.append(f"{individual_number}: –æ–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                placement_status = f"{placed_units}/{total_units}"
                is_fully_placed = placed_units >= total_units
                
                self.log_test(
                    "–õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ placement_records –¥–ª—è 250109",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {cargo_number}: {placement_status}, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞: {is_fully_placed}. –î–µ—Ç–∞–ª–∏: {', '.join(placement_details[:5])}" + ("..." if len(placement_details) > 5 else "")
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                should_be_in_available = not is_fully_placed
                should_be_in_fully_placed = is_fully_placed
                
                self.log_test(
                    "–õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è 250109",
                    True,
                    f"–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ available-for-placement: {should_be_in_available}, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ fully-placed: {should_be_in_fully_placed}"
                )
                
                return True
            else:
                self.log_test(
                    "–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250109 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ placement_records",
                    False,
                    "–ó–∞—è–≤–∫–∞ 250109 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ available-for-placement, –Ω–∏ –≤ fully-placed",
                    "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤",
                    "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ placement_records", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_create_and_fully_place_application(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è —Å –ø–æ–ª–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –°–õ–£–ß–ê–Ø –° –ü–û–õ–ù–´–ú –†–ê–ó–ú–ï–©–ï–ù–ò–ï–ú")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79999999999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79888888888",
                "recipient_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "route": "moscow_to_tajikistan",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ 1",
                        "quantity": 2,
                        "weight": 10.0,
                        "price_per_kg": 100.0,
                        "total_amount": 1000.0
                    },
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ 2",
                        "quantity": 3,
                        "weight": 15.0,
                        "price_per_kg": 150.0,
                        "total_amount": 2250.0
                    }
                ],
                "payment_method": "cash_on_delivery"
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            create_response = self.session.post(
                f"{API_BASE}/operator/cargo/accept",
                json=cargo_data,
                timeout=30
            )
            
            if create_response.status_code != 200:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                    False,
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {create_response.status_code}",
                    "200",
                    str(create_response.status_code)
                )
                return False
            
            create_data = create_response.json()
            test_cargo_number = create_data.get("cargo_number")
            test_cargo_id = create_data.get("cargo_id")
            
            if not test_cargo_number:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, "–ù–µ –ø–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
                return False
            
            self.log_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                True,
                f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {test_cargo_number} (5 –µ–¥–∏–Ω–∏—Ü: 2+3)"
            )
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ available-for-placement
            available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if available_response.status_code != 200:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ available-for-placement", False, f"–û—à–∏–±–∫–∞: {available_response.status_code}")
                return False
            
            available_data = available_response.json()
            items = available_data.get("items", [])
            
            test_application = None
            for item in items:
                if item.get("cargo_number") == test_cargo_number:
                    test_application = item
                    break
            
            if not test_application:
                self.log_test(
                    "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ available-for-placement",
                    False,
                    f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {test_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                    "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return False
            
            self.log_test(
                "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ available-for-placement",
                True,
                f"–ó–∞—è–≤–∫–∞ {test_cargo_number} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º individual_numbers –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            cargo_items = test_application.get("cargo_items", [])
            individual_numbers = []
            
            for cargo_item in cargo_items:
                individual_items = cargo_item.get("individual_items", [])
                for individual_item in individual_items:
                    individual_number = individual_item.get("individual_number")
                    if individual_number:
                        individual_numbers.append(individual_number)
            
            if len(individual_numbers) != 5:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ individual_numbers",
                    False,
                    f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 individual_numbers, –ø–æ–ª—É—á–µ–Ω–æ {len(individual_numbers)}",
                    "5",
                    str(len(individual_numbers))
                )
                return False
            
            self.log_test(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ individual_numbers –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                True,
                f"–ü–æ–ª—É—á–µ–Ω–æ {len(individual_numbers)} individual_numbers: {', '.join(individual_numbers[:3])}..."
            )
            
            # –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã
            placed_count = 0
            for i, individual_number in enumerate(individual_numbers):
                placement_data = {
                    "individual_number": individual_number,
                    "block_number": 1,
                    "shelf_number": 1,
                    "cell_number": i + 1  # –†–∞–∑–Ω—ã–µ —è—á–µ–π–∫–∏
                }
                
                place_response = self.session.post(
                    f"{API_BASE}/operator/cargo/place-individual",
                    json=placement_data,
                    timeout=30
                )
                
                if place_response.status_code == 200:
                    placed_count += 1
                    print(f"    ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ {individual_number} ({placed_count}/5)")
                else:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {individual_number}: {place_response.status_code}")
            
            if placed_count != 5:
                self.log_test(
                    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                    False,
                    f"–†–∞–∑–º–µ—â–µ–Ω–æ {placed_count}/5 –µ–¥–∏–Ω–∏—Ü",
                    "5",
                    str(placed_count)
                )
                return False
            
            self.log_test(
                "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                True,
                f"–í—Å–µ 5 –µ–¥–∏–Ω–∏—Ü —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã"
            )
            
            # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ available-for-placement
            available_response_after = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if available_response_after.status_code == 200:
                available_data_after = available_response_after.json()
                items_after = available_data_after.get("items", [])
                
                test_application_after = None
                for item in items_after:
                    if item.get("cargo_number") == test_cargo_number:
                        test_application_after = item
                        break
                
                if test_application_after:
                    self.log_test(
                        "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ available-for-placement",
                        False,
                        f"–ó–∞—è–≤–∫–∞ {test_cargo_number} –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        "–ó–∞—è–≤–∫–∞ –ù–ï –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                        "–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞"
                    )
                    return False
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ available-for-placement",
                        True,
                        f"–ó–∞—è–≤–∫–∞ {test_cargo_number} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å—á–µ–∑–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ fully-placed
            fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if fully_placed_response.status_code == 200:
                fully_placed_data = fully_placed_response.json()
                items_fully_placed = fully_placed_data.get("items", [])
                
                test_application_fully_placed = None
                for item in items_fully_placed:
                    if item.get("cargo_number") == test_cargo_number:
                        test_application_fully_placed = item
                        break
                
                if test_application_fully_placed:
                    self.log_test(
                        "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ fully-placed",
                        True,
                        f"–ó–∞—è–≤–∫–∞ {test_cargo_number} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö"
                    )
                    return True
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ fully-placed",
                        False,
                        f"–ó–∞—è–≤–∫–∞ {test_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö",
                        "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                        "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    )
                    return False
            else:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {fully_placed_response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–æ–π 250109")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 1: –ó–∞—è–≤–∫–∞ 250109 –≤ available-for-placement", self.test_application_250109_available_for_placement()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 1: –ó–∞—è–≤–∫–∞ 250109 –≤ fully-placed", self.test_application_250109_fully_placed()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 2: –õ–æ–≥–∏–∫–∞ placement_records –¥–ª—è 250109", self.test_placement_records_logic()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", self.test_create_and_fully_place_application()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û! –ó–∞—è–≤–∫–∞ 250109 –∏ –≤—Å–µ –±—É–¥—É—â–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏!")
        elif success_rate >= 75:
            print("üéØ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.")
        
        return success_rate >= 75  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 75% –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CriticalApplication250109Tester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞—è–≤–∫–æ–π 250109 —Ä–µ—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        return 1

if __name__ == "__main__":
    exit(main())