#!/usr/bin/env python3
"""
üîç –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ–∏—Å–∫ placement_records –¥–ª—è –≥—Ä—É–∑–æ–≤ 25082235/01/01 –∏ 25082235/01/02

**–¶–ï–õ–¨:** –ù–∞–π—Ç–∏ –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ layout-with-cargo

**–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï:**
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API fully-placed –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞
3. –ù–∞–π—Ç–∏ –ª—é–±—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤ —Å–∏—Å—Ç–µ–º–µ
4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ 25082235/01/01 –∏ 25082235/01/02
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Test credentials
TEST_CREDENTIALS = {
    "phone": WAREHOUSE_OPERATOR_PHONE,
    "password": WAREHOUSE_OPERATOR_PASSWORD
}

# Global variables
auth_token = None
warehouse_id = None
target_cargo_numbers = ["25082235/01/01", "25082235/01/02"]

def make_request(method, endpoint, data=None, headers=None):
    """Make HTTP request with error handling and timing"""
    url = f"{BACKEND_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        return response, response_time_ms
    
    except requests.exceptions.RequestException as e:
        response_time_ms = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time_ms

def authenticate():
    """Authenticate and get warehouse_id"""
    global auth_token, warehouse_id
    
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
    response, _ = make_request("POST", "/auth/login", TEST_CREDENTIALS)
    
    if response and response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False
    
    print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id...")
    response, _ = make_request("GET", "/operator/warehouses")
    
    if response and response.status_code == 200:
        warehouses = response.json()
        for warehouse in warehouses:
            if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                warehouse_id = warehouse.get("id")
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥: {warehouse.get('name')} (ID: {warehouse_id})")
                break
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
        return False
    
    return True

def check_fully_placed_cargo():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API fully-placed –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ì–†–£–ó–û–í:")
    print("="*60)
    
    response, response_time = make_request("GET", "/operator/cargo/fully-placed")
    
    if not response or response.status_code != 200:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö")
        return
    
    try:
        data = response.json()
        items = data.get("items", [])
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(items)}")
        
        if not items:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        # –ò—â–µ–º —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã
        target_found = []
        all_individual_units = []
        
        for item in items:
            cargo_number = item.get("cargo_number", "")
            individual_units = item.get("individual_units", [])
            
            print(f"\nüìã –ó–∞—è–≤–∫–∞ {cargo_number}:")
            print(f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {len(individual_units)}")
            
            for unit in individual_units:
                individual_number = unit.get("individual_number", "")
                status = unit.get("status", "")
                placement_info = unit.get("placement_info", "")
                
                all_individual_units.append(individual_number)
                
                if individual_number in target_cargo_numbers:
                    target_found.append({
                        "individual_number": individual_number,
                        "status": status,
                        "placement_info": placement_info,
                        "cargo_number": cargo_number
                    })
                
                status_icon = "‚úÖ" if status == "placed" else "‚è≥"
                print(f"   {status_icon} {individual_number}: {status} - {placement_info}")
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê –¶–ï–õ–ï–í–´–• –ì–†–£–ó–û–í:")
        if target_found:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(target_found)} —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤:")
            for cargo in target_found:
                print(f"   - {cargo['individual_number']}: {cargo['status']} ({cargo['placement_info']})")
        else:
            print(f"‚ùå –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã {target_cargo_numbers} –ù–ï –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ {len(all_individual_units)} –µ–¥–∏–Ω–∏—Ü")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã: {all_individual_units[:10]}{'...' if len(all_individual_units) > 10 else ''}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

def check_warehouse_statistics():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–õ–ê–î–ê:")
    print("="*60)
    
    if not warehouse_id:
        print("‚ùå warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        return
    
    response, _ = make_request("GET", f"/warehouses/{warehouse_id}/statistics")
    
    if not response or response.status_code != 200:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞")
        return
    
    try:
        stats = response.json()
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1':")
        print(f"   –í—Å–µ–≥–æ —è—á–µ–µ–∫: {stats.get('total_cells', 0)}")
        print(f"   –ó–∞–Ω—è—Ç–æ —è—á–µ–µ–∫: {stats.get('occupied_cells', 0)}")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ —è—á–µ–µ–∫: {stats.get('free_cells', 0)}")
        print(f"   –ó–∞–≥—Ä—É–∑–∫–∞: {stats.get('occupancy_percentage', 0)}%")
        print(f"   –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {stats.get('total_cargo', 0)}")
        
        if stats.get('occupied_cells', 0) > 0:
            print("‚úÖ –í —Å–∫–ª–∞–¥–µ –µ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
        else:
            print("‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def deep_investigation():
    """–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    print("\nüîç –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º layout-with-cargo –µ—â–µ —Ä–∞–∑
    if warehouse_id:
        response, _ = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
        
        if response and response.status_code == 200:
            layout_data = response.json()
            
            occupied_cells = layout_data.get("occupied_cells", 0)
            total_cargo = layout_data.get("total_cargo", 0)
            
            print(f"üèóÔ∏è Layout-with-cargo API:")
            print(f"   –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏: {occupied_cells}")
            print(f"   –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {total_cargo}")
            
            if occupied_cells == 0:
                print("‚ùå API layout-with-cargo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0 –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
                warehouse_info = layout_data.get("warehouse", {})
                layout = warehouse_info.get("layout", {})
                blocks = layout.get("blocks", [])
                
                print(f"   –ë–ª–æ–∫–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {len(blocks)}")
                
                # –ò—â–µ–º –ª—é–±—ã–µ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
                found_occupied = False
                for block in blocks:
                    shelves = block.get("shelves", [])
                    for shelf in shelves:
                        cells = shelf.get("cells", [])
                        for cell in cells:
                            if cell.get("is_occupied", False):
                                found_occupied = True
                                cargo_list = cell.get("cargo", [])
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–Ω—è—Ç–∞—è —è—á–µ–π–∫–∞: {cell.get('location_code')} —Å {len(cargo_list)} –≥—Ä—É–∑–∞–º–∏")
                                break
                        if found_occupied:
                            break
                    if found_occupied:
                        break
                
                if not found_occupied:
                    print("   ‚ùå –ù–∏ –æ–¥–Ω–æ–π –∑–∞–Ω—è—Ç–æ–π —è—á–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            else:
                print("‚úÖ API layout-with-cargo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ layout-with-cargo")

def main():
    """Main investigation"""
    print("üîç –ì–õ–£–ë–û–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü–æ–∏—Å–∫ placement_records –¥–ª—è –≥—Ä—É–∑–æ–≤ 25082235/01/01 –∏ 25082235/01/02")
    print("="*100)
    
    if not authenticate():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
    check_fully_placed_cargo()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞
    check_warehouse_statistics()
    
    # –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    deep_investigation()
    
    print("\n" + "="*100)
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
    print("–ï—Å–ª–∏ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã 25082235/01/01 –∏ 25082235/01/02 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ fully-placed,")
    print("–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã, —Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤:")
    print("1. –ì—Ä—É–∑—ã –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏")
    print("2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑–µ")
    print("3. API layout-with-cargo –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å placement_records")
    print("="*100)

if __name__ == "__main__":
    main()