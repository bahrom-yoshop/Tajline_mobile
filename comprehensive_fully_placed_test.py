#!/usr/bin/env python3
"""
üéØ COMPREHENSIVE TESTING: API endpoint /api/operator/cargo/fully-placed —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –¥–∞–Ω–Ω—ã—Ö

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –†–∞–±–æ—Ç—É endpoint /api/operator/cargo/fully-placed
2. –õ–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ endpoints
4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
TEST_USERS = {
    "admin": {
        "phone": "+79999999999",
        "password": "admin123"
    },
    "warehouse_operator": {
        "phone": "+79777888999", 
        "password": "warehouse123"
    }
}

class ComprehensiveFullyPlacedTester:
    def __init__(self):
        self.session = requests.Session()
        self.test_results = []
        self.tokens = {}
        
    def log_test(self, test_name: str, success: bool, details: str = "", response_data: dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat(),
            "response_data": response_data
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        print()

    def authenticate_user(self, user_type: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_data = TEST_USERS[user_type]
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=user_data)
            
            if response.status_code == 200:
                data = response.json()
                token = data.get("access_token")
                user_info = data.get("user", {})
                
                if token:
                    self.tokens[user_type] = token
                    self.log_test(
                        f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}' (—Ä–æ–ª—å: {user_info.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')})"
                    )
                    return True
                else:
                    self.log_test(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_test(
                    f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {user_type}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def diagnose_data_consistency(self, user_type: str = "warehouse_operator") -> bool:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É endpoints"""
        try:
            if user_type not in self.tokens:
                self.log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            
            # 1. –ü–æ–ª—É—á–∞–µ–º individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response1 = self.session.get(f"{BACKEND_URL}/operator/cargo/individual-units-for-placement", headers=headers)
            individual_units_data = response1.json() if response1.status_code == 200 else {}
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response2 = self.session.get(f"{BACKEND_URL}/operator/placement-progress", headers=headers)
            progress_data = response2.json() if response2.status_code == 200 else {}
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            response3 = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            fully_placed_data = response3.json() if response3.status_code == 200 else {}
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            response4 = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
            available_data = response4.json() if response4.status_code == 200 else {}
            
            print("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
            print(f"Individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(individual_units_data.get('items', []))} –≥—Ä—É–ø–ø")
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {progress_data.get('total_units', 0)} –≤—Å–µ–≥–æ, {progress_data.get('placed_units', 0)} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
            print(f"–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {len(fully_placed_data.get('items', []))} –∑–∞—è–≤–æ–∫")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(available_data.get('items', []))} –∑–∞—è–≤–æ–∫")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º individual units
            if individual_units_data.get('items'):
                for i, group in enumerate(individual_units_data['items']):
                    request_number = group.get('request_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    total_units = group.get('total_units', 0)
                    placed_units = group.get('placed_units', 0)
                    units = group.get('units', [])
                    
                    print(f"\\nüìã –ì—Ä—É–ø–ø–∞ {i+1}: –ó–∞—è–≤–∫–∞ {request_number}")
                    print(f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}")
                    print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {placed_units}")
                    print(f"   –ï–¥–∏–Ω–∏—Ü –≤ –º–∞—Å—Å–∏–≤–µ: {len(units)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã
                    placed_count = 0
                    for unit in units:
                        is_placed = unit.get('is_placed', False)
                        placement_info = unit.get('placement_info', '')
                        individual_number = unit.get('individual_number', '')
                        
                        if is_placed:
                            placed_count += 1
                        
                        print(f"   - {individual_number}: {'‚úÖ –†–∞–∑–º–µ—â–µ–Ω' if is_placed else '‚ùå –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω'} ({placement_info})")
                    
                    print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {placed_count}/{len(units)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —ç—Ç–∞ –∑–∞—è–≤–∫–∞ –±—ã—Ç—å –≤ fully-placed
                    if placed_count == len(units) and len(units) > 0:
                        print(f"   üéØ –ó–ê–Ø–í–ö–ê {request_number} –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –í FULLY-PLACED!")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω–∞ –≤ fully-placed
                        found_in_fully_placed = False
                        for fp_item in fully_placed_data.get('items', []):
                            if fp_item.get('cargo_number') == request_number or fp_item.get('request_number') == request_number:
                                found_in_fully_placed = True
                                break
                        
                        if not found_in_fully_placed:
                            self.log_test(
                                f"–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö - –∑–∞—è–≤–∫–∞ {request_number}",
                                False,
                                f"–ó–∞—è–≤–∫–∞ {request_number} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_count}/{len(units)}), –Ω–æ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed endpoint"
                            )
                            return False
                        else:
                            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed")
                    else:
                        print(f"   ‚è≥ –ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_count}/{len(units)})")
            
            self.log_test(
                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö",
                True,
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ 4 endpoints. Individual units: {len(individual_units_data.get('items', []))}, Fully placed: {len(fully_placed_data.get('items', []))}"
            )
            return True
            
        except Exception as e:
            self.log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_fully_placed_endpoint_comprehensive(self, user_type: str = "warehouse_operator") -> bool:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fully-placed endpoint"""
        try:
            if user_type not in self.tokens:
                self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fully-placed endpoint", False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_type} –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                return False
                
            headers = {"Authorization": f"Bearer {self.tokens[user_type]}"}
            
            # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
            
            if response.status_code != 200:
                self.log_test(
                    "Fully-placed endpoint –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
            
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            required_fields = ["items", "pagination", "summary"]
            missing_fields = [field for field in required_fields if field not in data]
            
            if missing_fields:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ fully-placed",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}"
                )
                return False
            
            items = data.get("items", [])
            pagination = data.get("pagination", {})
            summary = data.get("summary", {})
            
            print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ FULLY-PLACED ENDPOINT:")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
            print(f"–ü–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination.get('current_page', 0)}/{pagination.get('total_pages', 0)}")
            print(f"–°–≤–æ–¥–∫–∞: {summary.get('fully_placed_requests', 0)} –∑–∞—è–≤–æ–∫, {summary.get('total_units_placed', 0)} –µ–¥–∏–Ω–∏—Ü")
            
            # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if items:
                item = items[0]
                required_item_fields = [
                    "sender_full_name", "sender_phone", "sender_address",
                    "recipient_full_name", "recipient_phone", "recipient_address",
                    "individual_units", "progress_text"
                ]
                
                missing_item_fields = [field for field in required_item_fields if field not in item]
                
                if missing_item_fields:
                    self.log_test(
                        "–ü–æ–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ fully-placed",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ: {missing_item_fields}"
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units
                individual_units = item.get("individual_units", [])
                print(f"\\nüìã –ü–ï–†–í–´–ô –≠–õ–ï–ú–ï–ù–¢:")
                print(f"–ó–∞—è–≤–∫–∞: {item.get('cargo_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {item.get('sender_full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {item.get('recipient_full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {item.get('progress_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"Individual units: {len(individual_units)}")
                
                if individual_units:
                    unit = individual_units[0]
                    required_unit_fields = ["individual_number", "is_placed", "placement_info"]
                    missing_unit_fields = [field for field in required_unit_fields if field not in unit]
                    
                    if missing_unit_fields:
                        self.log_test(
                            "–ü–æ–ª—è individual_units",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ individual_units: {missing_unit_fields}"
                        )
                        return False
                    
                    print(f"–ü–µ—Ä–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞: {unit.get('individual_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {'‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞' if unit.get('is_placed') else '‚ùå –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞'}")
                    print(f"–ú–µ—Å—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {unit.get('placement_info', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –¢–µ—Å—Ç 3: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            response_page2 = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed?page=2&per_page=5", headers=headers)
            if response_page2.status_code == 200:
                data_page2 = response_page2.json()
                pagination_page2 = data_page2.get("pagination", {})
                
                if pagination_page2.get("current_page") != 2:
                    self.log_test(
                        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è fully-placed",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å 2, –ø–æ–ª—É—á–µ–Ω–æ {pagination_page2.get('current_page')}"
                    )
                    return False
            
            self.log_test(
                "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fully-placed endpoint",
                True,
                f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(items)} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
            )
            return True
            
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fully-placed endpoint", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_role_access(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        try:
            results = []
            
            # –¢–µ—Å—Ç –¥–ª—è warehouse_operator
            if "warehouse_operator" in self.tokens:
                headers = {"Authorization": f"Bearer {self.tokens['warehouse_operator']}"}
                response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
                
                if response.status_code == 200:
                    self.log_test(
                        "–î–æ—Å—Ç—É–ø warehouse_operator",
                        True,
                        f"–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ endpoint"
                    )
                    results.append(True)
                else:
                    self.log_test(
                        "–î–æ—Å—Ç—É–ø warehouse_operator",
                        False,
                        f"–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞ –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø: HTTP {response.status_code}"
                    )
                    results.append(False)
            
            # –¢–µ—Å—Ç –¥–ª—è admin (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if "admin" in self.tokens:
                headers = {"Authorization": f"Bearer {self.tokens['admin']}"}
                response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed", headers=headers)
                
                if response.status_code == 200:
                    self.log_test(
                        "–î–æ—Å—Ç—É–ø admin",
                        True,
                        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ endpoint"
                    )
                    results.append(True)
                else:
                    self.log_test(
                        "–î–æ—Å—Ç—É–ø admin",
                        False,
                        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø: HTTP {response.status_code}"
                    )
                    results.append(False)
            
            # –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed")
            
            if response.status_code == 401 or response.status_code == 403:
                self.log_test(
                    "–î–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    True,
                    f"–î–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}"
                )
                results.append(True)
            else:
                self.log_test(
                    "–î–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    False,
                    f"–î–æ—Å—Ç—É–ø –ù–ï –∑–∞–ø—Ä–µ—â–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}"
                )
                results.append(False)
            
            return all(results)
            
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Ä–æ–ª–µ–π", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoint /api/operator/cargo/fully-placed")
        print("=" * 80)
        print()
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üìã –≠–¢–ê–ü 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("-" * 50)
        admin_auth = self.authenticate_user("admin")
        operator_auth = self.authenticate_user("warehouse_operator")
        print()
        
        if not operator_auth:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞!")
            return False
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("üìã –≠–¢–ê–ü 2: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        print("-" * 50)
        data_diagnosis = self.diagnose_data_consistency("warehouse_operator")
        print()
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint
        print("üìã –≠–¢–ê–ü 3: –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FULLY-PLACED ENDPOINT")
        print("-" * 50)
        endpoint_test = self.test_fully_placed_endpoint_comprehensive("warehouse_operator")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Ä–æ–ª–µ–π
        print("üìã –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ê –î–õ–Ø –†–ê–ó–ù–´–• –†–û–õ–ï–ô")
        print("-" * 50)
        role_access_test = self.test_role_access()
        print()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        critical_tests = [data_diagnosis, endpoint_test, role_access_test]
        success_rate = sum(1 for test in critical_tests if test) / len(critical_tests) * 100
        
        return success_rate >= 75

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        successful_tests = [r for r in self.test_results if r["success"]]
        failed_tests = [r for r in self.test_results if not r["success"]]
        
        total_tests = len(self.test_results)
        success_count = len(successful_tests)
        success_rate = (success_count / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed_tests)}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if failed_tests:
            print("‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for test in failed_tests:
                print(f"   ‚Ä¢ {test['test']}: {test['details']}")
            print()
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
        elif success_rate >= 75:
            print("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API endpoint –∏–º–µ–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveFullyPlacedTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint /api/operator/cargo/fully-placed –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("üö® –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoint!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()