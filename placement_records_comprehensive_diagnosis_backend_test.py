#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ placement_records –¥–ª—è –ø–æ–∏—Å–∫–∞ 13 –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –µ–¥–∏–Ω–∏—Ü —Å–∫–ª–∞–¥–∞ 001
=====================================================================================================

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –ø–æ—á–µ–º—É API layout-with-cargo –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Å–∫–ª–∞–¥–∞ 001

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ placement_records:
   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –í–°–ï placement_records –≤ —Å–∏—Å—Ç–µ–º–µ
   - –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∑–∞—è–≤–æ–∫: 25082298 (7 –µ–¥–∏–Ω–∏—Ü), 250101 (2 –µ–¥–∏–Ω–∏—Ü—ã), 25082235 (4 –µ–¥–∏–Ω–∏—Ü)
   - –í—ã—è–≤–∏—Ç—å –∫–∞–∫–∏–µ warehouse_id –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç location (–ë1-–ü1-–Ø7, 001-01-02-002, etc.)
3. –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ú–æ—Å–∫–≤—ã/001: –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–ª–∞–¥–æ–º 001
4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º

–ü–†–û–ë–õ–ï–ú–ê: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –∑–∞–ø–∏—Å–µ–π –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü. 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ, –Ω–æ API –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –≤ –±–∞–∑–µ.

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- –ù–∞–π—Ç–∏ –≤—Å–µ 13 placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π warehouse_id –¥–ª—è –ø–æ–∏—Å–∫–∞
- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ API
"""

import requests
import json
import sys
import os
from datetime import datetime
from collections import defaultdict

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_APPLICATIONS = ["25082298", "250101", "25082235"]
EXPECTED_UNITS = {"25082298": 7, "250101": 2, "25082235": 4}
TOTAL_EXPECTED = 13

class PlacementRecordsDiagnosticTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "placement_records_found": 0,
            "target_applications_found": {},
            "warehouse_001_records": 0,
            "warehouse_patterns": {},
            "location_formats": set(),
            "critical_issues": []
        }
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.test_results["auth_success"] = True
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def get_all_placement_records(self):
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï placement_records –∏–∑ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            self.log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö placement_records –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints
            endpoints_to_try = [
                "/operator/placement-records/all",
                "/admin/placement-records/all", 
                "/placement-records",
                "/operator/placement-progress",
                "/warehouses/placement-records"
            ]
            
            all_records = []
            
            for endpoint in endpoints_to_try:
                try:
                    response = self.session.get(f"{API_BASE}{endpoint}")
                    if response.status_code == 200:
                        data = response.json()
                        self.log(f"‚úÖ Endpoint {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                        if isinstance(data, list):
                            all_records.extend(data)
                        elif isinstance(data, dict):
                            if 'placement_records' in data:
                                all_records.extend(data['placement_records'])
                            elif 'records' in data:
                                all_records.extend(data['records'])
                            elif 'items' in data:
                                all_records.extend(data['items'])
                        
                        self.log(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_records)} –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ {endpoint}")
                        break
                        
                except Exception as e:
                    self.log(f"‚ö†Ô∏è Endpoint {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
                    continue
            
            if not all_records:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å placement_records —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ endpoints")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ MongoDB API
                return self.get_placement_records_alternative()
            
            self.test_results["placement_records_found"] = len(all_records)
            return all_records
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è placement_records: {str(e)}", "ERROR")
            return []
    
    def get_placement_records_alternative(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è placement_records —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ API"""
        try:
            self.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å placement_records —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API layout-with-cargo –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
            warehouses_response = self.session.get(f"{API_BASE}/operator/warehouses")
            if warehouses_response.status_code != 200:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                return []
            
            warehouses = warehouses_response.json()
            all_records = []
            
            for warehouse in warehouses:
                warehouse_id = warehouse.get('id')
                warehouse_name = warehouse.get('name', 'Unknown')
                
                try:
                    layout_response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/layout-with-cargo")
                    if layout_response.status_code == 200:
                        layout_data = layout_response.json()
                        cargo_info = layout_data.get('cargo_info', [])
                        
                        self.log(f"üì¶ –°–∫–ª–∞–¥ {warehouse_name}: –Ω–∞–π–¥–µ–Ω–æ {len(cargo_info)} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º cargo_info –≤ —Ñ–æ—Ä–º–∞—Ç placement_records
                        for cargo in cargo_info:
                            record = {
                                'warehouse_id': warehouse_id,
                                'warehouse_name': warehouse_name,
                                'cargo_number': cargo.get('cargo_number'),
                                'individual_number': cargo.get('individual_number'),
                                'location': cargo.get('location'),
                                'placed_at': cargo.get('placed_at'),
                                'placed_by': cargo.get('placed_by')
                            }
                            all_records.append(record)
                            
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è layout –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}: {str(e)}")
                    continue
            
            self.test_results["placement_records_found"] = len(all_records)
            self.log(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_records)} placement records —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
            return all_records
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è placement_records: {str(e)}", "ERROR")
            return []
    
    def analyze_placement_records(self, records):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö placement_records –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            self.log("üîç –ê–Ω–∞–ª–∏–∑ placement_records...")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
            application_stats = defaultdict(list)
            warehouse_stats = defaultdict(int)
            location_formats = set()
            warehouse_patterns = defaultdict(set)
            
            for record in records:
                cargo_number = record.get('cargo_number', '')
                individual_number = record.get('individual_number', '')
                warehouse_id = record.get('warehouse_id', '')
                warehouse_name = record.get('warehouse_name', '')
                location = record.get('location', '')
                
                # –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫
                if cargo_number:
                    application_stats[cargo_number].append(record)
                
                # –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
                if warehouse_id:
                    warehouse_stats[warehouse_id] += 1
                    warehouse_patterns[warehouse_id].add(warehouse_name)
                
                # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                if location:
                    location_formats.add(location)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞
                    if '-' in location and len(location.split('-')) == 4:
                        # –§–æ—Ä–º–∞—Ç 001-01-02-002
                        self.log(f"üìç –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç ID: {location}")
                    elif '–ë' in location and '–ü' in location and '–Ø' in location:
                        # –§–æ—Ä–º–∞—Ç –ë1-–ü1-–Ø7
                        self.log(f"üìç –ù–∞–π–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ë-–ü-–Ø: {location}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –∑–∞—è–≤–æ–∫
            self.log("\nüéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–´–• –ó–ê–Ø–í–û–ö:")
            for app_number in TARGET_APPLICATIONS:
                found_records = application_stats.get(app_number, [])
                expected_count = EXPECTED_UNITS.get(app_number, 0)
                
                self.test_results["target_applications_found"][app_number] = len(found_records)
                
                if found_records:
                    self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {len(found_records)} –∑–∞–ø–∏—Å–µ–π (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count})")
                    for record in found_records:
                        self.log(f"   - {record.get('individual_number', 'N/A')} –≤ {record.get('location', 'N/A')} (—Å–∫–ª–∞–¥: {record.get('warehouse_name', 'N/A')})")
                else:
                    self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {app_number}: –ù–ï –ù–ê–ô–î–ï–ù–ê (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count} –∑–∞–ø–∏—Å–µ–π)")
                    self.test_results["critical_issues"].append(f"–ó–∞—è–≤–∫–∞ {app_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ placement_records")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
            self.log("\nüè¢ –ê–ù–ê–õ–ò–ó –°–ö–õ–ê–î–û–í:")
            for warehouse_id, count in warehouse_stats.items():
                warehouse_names = list(warehouse_patterns[warehouse_id])
                self.log(f"üì¶ –°–∫–ª–∞–¥ {warehouse_id}: {count} –∑–∞–ø–∏—Å–µ–π, –Ω–∞–∑–≤–∞–Ω–∏—è: {warehouse_names}")
                
                # –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001
                if any('001' in str(warehouse_id) or '–ú–æ—Å–∫–≤–∞' in name for name in warehouse_names):
                    self.test_results["warehouse_001_records"] = count
                    self.log(f"üéØ –ù–ê–ô–î–ï–ù –°–ö–õ–ê–î 001/–ú–û–°–ö–í–ê: {count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            self.log(f"\nüìç –ù–ê–ô–î–ï–ù–û {len(location_formats)} –£–ù–ò–ö–ê–õ–¨–ù–´–• –§–û–†–ú–ê–¢–û–í –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø:")
            for location in sorted(location_formats):
                self.log(f"   - {location}")
                self.test_results["location_formats"].add(location)
            
            self.test_results["warehouse_patterns"] = dict(warehouse_patterns)
            
            return application_stats, warehouse_stats, location_formats
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ placement_records: {str(e)}", "ERROR")
            return {}, {}, set()
    
    def search_warehouse_001_records(self, records):
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫–ª–∞–¥–æ–º 001/–ú–æ—Å–∫–≤–∞"""
        try:
            self.log("\nüîç –ü–û–ò–°–ö –ó–ê–ü–ò–°–ï–ô –î–õ–Ø –°–ö–õ–ê–î–ê 001/–ú–û–°–ö–í–ê...")
            
            moscow_keywords = ['–º–æ—Å–∫–≤–∞', 'moscow', '001']
            found_records = []
            
            for record in records:
                warehouse_id = str(record.get('warehouse_id', '')).lower()
                warehouse_name = str(record.get('warehouse_name', '')).lower()
                location = str(record.get('location', '')).lower()
                
                # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                if any(keyword in warehouse_id or keyword in warehouse_name or keyword in location 
                       for keyword in moscow_keywords):
                    found_records.append(record)
            
            self.log(f"üéØ –ù–ê–ô–î–ï–ù–û {len(found_records)} –ó–ê–ü–ò–°–ï–ô –î–õ–Ø –°–ö–õ–ê–î–ê 001/–ú–û–°–ö–í–ê:")
            
            for record in found_records:
                cargo_number = record.get('cargo_number', 'N/A')
                individual_number = record.get('individual_number', 'N/A')
                location = record.get('location', 'N/A')
                warehouse_name = record.get('warehouse_name', 'N/A')
                
                self.log(f"   - {cargo_number}/{individual_number} –≤ {location} (—Å–∫–ª–∞–¥: {warehouse_name})")
            
            return found_records
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å–∫–ª–∞–¥–∞ 001: {str(e)}", "ERROR")
            return []
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            self.log("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
            warehouses_response = self.session.get(f"{API_BASE}/operator/warehouses")
            if warehouses_response.status_code != 200:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
                return
            
            warehouses = warehouses_response.json()
            
            for warehouse in warehouses:
                warehouse_id = warehouse.get('id')
                warehouse_name = warehouse.get('name', 'Unknown')
                warehouse_id_number = warehouse.get('warehouse_id_number', 'N/A')
                
                self.log(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞: {warehouse_name} (ID: {warehouse_id}, –ù–æ–º–µ—Ä: {warehouse_id_number})")
                
                try:
                    layout_response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/layout-with-cargo")
                    
                    if layout_response.status_code == 200:
                        layout_data = layout_response.json()
                        cargo_info = layout_data.get('cargo_info', [])
                        
                        self.log(f"‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª: –Ω–∞–π–¥–µ–Ω–æ {len(cargo_info)} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∑–∞—è–≤–æ–∫
                        target_found = {}
                        for cargo in cargo_info:
                            cargo_number = cargo.get('cargo_number', '')
                            if cargo_number in TARGET_APPLICATIONS:
                                if cargo_number not in target_found:
                                    target_found[cargo_number] = []
                                target_found[cargo_number].append(cargo)
                        
                        if target_found:
                            self.log(f"üéØ –ù–ê–ô–î–ï–ù–´ –¶–ï–õ–ï–í–´–ï –ó–ê–Ø–í–ö–ò –≤ —Å–∫–ª–∞–¥–µ {warehouse_name}:")
                            for app_number, cargos in target_found.items():
                                self.log(f"   - {app_number}: {len(cargos)} –µ–¥–∏–Ω–∏—Ü")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º 001 –∏–ª–∏ –ú–æ—Å–∫–≤–∞
                        if ('001' in str(warehouse_id_number) or '–º–æ—Å–∫–≤–∞' in warehouse_name.lower()):
                            self.log(f"üéØ –≠–¢–û –°–ö–õ–ê–î 001/–ú–û–°–ö–í–ê! –ù–∞–π–¥–µ–Ω–æ {len(cargo_info)} –∑–∞–ø–∏—Å–µ–π")
                            if len(cargo_info) == 0:
                                self.test_results["critical_issues"].append(f"API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∫–ª–∞–¥–∞ 001/–ú–æ—Å–∫–≤–∞")
                    else:
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {layout_response.status_code}")
                        
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ {warehouse_name}: {str(e)}")
                    continue
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è layout-with-cargo API: {str(e)}", "ERROR")
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò PLACEMENT RECORDS")
            self.log("=" * 80)
            
            # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate_operator():
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
            
            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö placement_records
            all_records = self.get_all_placement_records()
            if not all_records:
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å placement_records")
                return False
            
            # 3. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π
            app_stats, warehouse_stats, location_formats = self.analyze_placement_records(all_records)
            
            # 4. –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å–∫–ª–∞–¥–∞ 001
            moscow_records = self.search_warehouse_001_records(all_records)
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
            self.test_layout_with_cargo_api()
            
            # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.generate_final_report()
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}", "ERROR")
            return False
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.log("\n" + "=" * 80)
            self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
            self.log("=" * 80)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '–û–®–ò–ë–ö–ê'}")
            self.log(f"üìä –í—Å–µ–≥–æ placement_records –Ω–∞–π–¥–µ–Ω–æ: {self.test_results['placement_records_found']}")
            self.log(f"üè¢ –ó–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∫–ª–∞–¥–∞ 001: {self.test_results['warehouse_001_records']}")
            
            # –¶–µ–ª–µ–≤—ã–µ –∑–∞—è–≤–∫–∏
            self.log(f"\nüéØ –¶–ï–õ–ï–í–´–ï –ó–ê–Ø–í–ö–ò:")
            total_found = 0
            for app_number, expected in EXPECTED_UNITS.items():
                found = self.test_results["target_applications_found"].get(app_number, 0)
                total_found += found
                status = "‚úÖ" if found == expected else "‚ùå"
                self.log(f"{status} {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found} –∏–∑ {expected} –æ–∂–∏–¥–∞–µ–º—ã—Ö")
            
            self.log(f"\nüìà –û–ë–©–ò–ô –ò–¢–û–ì: –Ω–∞–π–¥–µ–Ω–æ {total_found} –∏–∑ {TOTAL_EXPECTED} –æ–∂–∏–¥–∞–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü")
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            if self.test_results["critical_issues"]:
                self.log(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.test_results['critical_issues'])}):")
                for issue in self.test_results["critical_issues"]:
                    self.log(f"‚ùå {issue}")
            
            # –§–æ—Ä–º–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            if self.test_results["location_formats"]:
                self.log(f"\nüìç –ù–ê–ô–î–ï–ù–ù–´–ï –§–û–†–ú–ê–¢–´ –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ({len(self.test_results['location_formats'])}):")
                for location_format in sorted(self.test_results["location_formats"]):
                    self.log(f"   - {location_format}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if total_found < TOTAL_EXPECTED:
                self.log("üîß 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ placement_records –≤ API")
                self.log("üîß 2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ placement_records —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                self.log("üîß 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ warehouse_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            if self.test_results['warehouse_001_records'] == 0:
                self.log("üîß 4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–∫–ª–∞–¥–∞ 001 –≤ —Å–∏—Å—Ç–µ–º–µ")
                self.log("üîß 5. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Å–∫–ª–∞–¥–∞ '001'")
            
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            success_rate = (total_found / TOTAL_EXPECTED) * 100 if TOTAL_EXPECTED > 0 else 0
            self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {success_rate:.1f}%")
            
            if success_rate < 50:
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
            elif success_rate < 100:
                self.log("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê")
            else:
                self.log("‚úÖ –í–°–ï –ó–ê–ü–ò–°–ò –ù–ê–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}", "ERROR")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∏—Å–∫ 13 –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –µ–¥–∏–Ω–∏—Ü —Å–∫–ª–∞–¥–∞ 001")
    print("=" * 80)
    
    tester = PlacementRecordsDiagnosticTester()
    
    try:
        success = tester.run_comprehensive_diagnosis()
        
        if success:
            print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        else:
            print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()