#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –û–ü–õ–ê–¢–´ - —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ (–≤–µ—Å √ó —Ü–µ–Ω–∞) –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ sum(—Ü–µ–Ω–∞)
2. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù –í–´–ë–û–† –°–ö–õ–ê–î–ê - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
3. ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –ú–ê–†–®–†–£–¢–ê - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏ —Å–∫–ª–∞–¥–µ-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
4. ‚úÖ –£–õ–£–ß–®–ï–ù–û –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ª–æ–≥–∏–∫–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
5. ‚úÖ BACKEND –û–ë–ù–û–í–õ–ï–ù - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –≥—Ä—É–∑–∞—Ö
3. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –Ω–∞ –ª—é–±–æ–π –∑–∞—è–≤–∫–µ
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–∏—ë–º–∞:
   - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (3600 —Ä—É–± –∫–∞–∫ –≤ –æ–±—â–µ–π —Å—É–º–º–µ –∑–∞—è–≤–∫–∏)
   - –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
   - –í —Å–ø–∏—Å–∫–µ —Å–∫–ª–∞–¥–æ–≤ –ù–ï–¢ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è)
   - –ï—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ "–ì—Ä—É–∑ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ [—Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞] –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–ª–∞–¥"
5. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞:
   - –ü–æ—è–≤–∏–ª—Å—è badge —Å –º–∞—Ä—à—Ä—É—Ç–æ–º "üìç [—Å–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫] ‚Üí [—Å–∫–ª–∞–¥-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ]"
   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ 3 –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ñ–æ—Ä–º–∞ –ø—Ä–∏—ë–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π, –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞.
"""

import requests
import json
import sys
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-6.preview.emergentagent.com/api"
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class CargoAcceptanceFormTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_user = None
        self.operator_warehouses = []
        self.test_results = []
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        print(f"{status} {test_name}: {details}")
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data["access_token"]
                self.operator_user = data["user"]
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.operator_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.operator_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                data = response.json()
                self.operator_warehouses = data if isinstance(data, list) else []
                
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(self.operator_warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–∞—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                for warehouse in self.operator_warehouses:
                    print(f"   üì¶ –°–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {warehouse.get('name', 'N/A')} (ID: {warehouse.get('id', 'N/A')}, –ê–¥—Ä–µ—Å: {warehouse.get('address', warehouse.get('location', 'N/A'))})")
                
                return True
            else:
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_warehouse_notifications(self):
        """–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –≥—Ä—É–∑–∞—Ö"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouse-notifications")
            
            if response.status_code == 200:
                data = response.json()
                notifications = data if isinstance(data, list) else []
                
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ì–†–£–ó–ê–•",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –≥—Ä—É–∑–∞—Ö"
                )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                pending_notifications = [n for n in notifications if n.get('status') == 'pending']
                print(f"   üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending': {len(pending_notifications)}")
                
                if pending_notifications:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    test_notification = pending_notifications[0]
                    print(f"   üéØ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ID {test_notification.get('id')}, –ó–∞—è–≤–∫–∞: {test_notification.get('request_number', 'N/A')}")
                    print(f"   üìû –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {test_notification.get('sender_full_name', 'N/A')} ({test_notification.get('sender_phone', 'N/A')})")
                    print(f"   üìç –ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞: {test_notification.get('pickup_address', 'N/A')}")
                    print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–∞: {test_notification.get('courier_fee', 'N/A')} —Ä—É–±")
                    
                    return test_notification
                else:
                    self.log_test(
                        "–ü–û–ò–°–ö –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                        False,
                        "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—É—Å–µ 'pending' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )
                    return None
                
            else:
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ì–†–£–ó–ê–•",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ì–†–£–ó–ê–•", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return None
    
    def get_all_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            response = self.session.get(f"{BACKEND_URL}/warehouses")
            
            if response.status_code == 200:
                data = response.json()
                all_warehouses = data if isinstance(data, list) else []
                
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–ö–õ–ê–î–û–í",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_warehouses)} —Å–∫–ª–∞–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"
                )
                
                return all_warehouses
            else:
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–ö–õ–ê–î–û–í",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–ö–õ–ê–î–û–í", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return []
    
    def test_warehouse_filtering_logic(self, all_warehouses):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            if not self.operator_warehouses:
                self.log_test(
                    "–¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–ö–õ–ê–î–û–í",
                    False,
                    "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–∞—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator_warehouse_ids = [w.get('id') for w in self.operator_warehouses]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫–ª–∞–¥—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
            filtered_warehouses = [
                w for w in all_warehouses 
                if w.get('is_active', True) and w.get('id') not in operator_warehouse_ids
            ]
            
            self.log_test(
                "–¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–ö–õ–ê–î–û–í",
                True,
                f"–õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {len(all_warehouses)}, –°–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {len(operator_warehouse_ids)}, –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞: {len(filtered_warehouses)}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã
            excluded_correctly = True
            for op_warehouse in self.operator_warehouses:
                if any(w.get('id') == op_warehouse.get('id') for w in filtered_warehouses):
                    excluded_correctly = False
                    break
            
            if excluded_correctly:
                print(f"   ‚úÖ –°–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞")
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –°–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ù–ï –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞")
            
            # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞:")
            for warehouse in filtered_warehouses[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"      üì¶ {warehouse.get('name', 'N/A')} (ID: {warehouse.get('id', 'N/A')}, –õ–æ–∫–∞—Ü–∏—è: {warehouse.get('location', 'N/A')})")
            
            return excluded_correctly
            
        except Exception as e:
            self.log_test("–¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–ö–õ–ê–î–û–í", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_cargo_acceptance_form(self, notification):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –≥—Ä—É–∑–∞"""
        try:
            if not notification:
                self.log_test(
                    "–¢–ï–°–¢ –§–û–†–ú–´ –ü–†–ò–Å–ú–ê –ì–†–£–ó–ê",
                    False,
                    "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            notification_id = notification.get('id')
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –≥—Ä—É–∑–∞
            cargo_acceptance_data = {
                "sender_full_name": notification.get('sender_full_name', '–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'),
                "sender_phone": notification.get('sender_phone', '+79999999999'),
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79888888888",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑",
                        "weight": 10.0,
                        "price_per_kg": 360.0  # 10 –∫–≥ √ó 360 —Ä—É–±/–∫–≥ = 3600 —Ä—É–±
                    }
                ],
                "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞",
                "route": "moscow_to_tajikistan",
                "warehouse_id": "test-warehouse-id",  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
                "payment_method": "cash",
                "payment_amount": 3600.0,  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 √ó 360 = 3600
                "pickup_required": True,
                "pickup_address": notification.get('pickup_address', '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å'),
                "delivery_method": "pickup",
                "courier_fee": notification.get('courier_fee', 500.0)
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ warehouse_id
            all_warehouses = self.get_all_warehouses()
            if all_warehouses and self.operator_warehouses:
                operator_warehouse_ids = [w.get('id') for w in self.operator_warehouses]
                available_warehouses = [
                    w for w in all_warehouses 
                    if w.get('is_active', True) and w.get('id') not in operator_warehouse_ids
                ]
                
                if available_warehouses:
                    cargo_acceptance_data["warehouse_id"] = available_warehouses[0].get('id')
                    print(f"   üéØ –í—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {available_warehouses[0].get('name', 'N/A')}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —Å—É–º–º—ã
            expected_total = sum(item["weight"] * item["price_per_kg"] for item in cargo_acceptance_data["cargo_items"])
            actual_payment = cargo_acceptance_data["payment_amount"]
            
            if expected_total == actual_payment:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–Å–¢–ê –°–£–ú–ú–´ –û–ü–õ–ê–¢–´",
                    True,
                    f"–°—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {expected_total} —Ä—É–± (–≤–µ—Å √ó —Ü–µ–Ω–∞ –∑–∞ –∫–≥)"
                )
            else:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–Å–¢–ê –°–£–ú–ú–´ –û–ü–õ–ê–¢–´",
                    False,
                    f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total} —Ä—É–±, –ø–æ–ª—É—á–µ–Ω–æ {actual_payment} —Ä—É–±"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
            if self.operator_warehouses:
                source_warehouse = self.operator_warehouses[0]
                cargo_acceptance_data.update({
                    "source_warehouse_id": source_warehouse.get('id'),
                    "destination_warehouse_id": cargo_acceptance_data["warehouse_id"],
                    "route_info": {
                        "from": {
                            "warehouse_id": source_warehouse.get('id'),
                            "warehouse_name": source_warehouse.get('name'),
                            "location": source_warehouse.get('location')
                        },
                        "to": {
                            "warehouse_id": cargo_acceptance_data["warehouse_id"],
                            "warehouse_name": "–°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                            "location": "–õ–æ–∫–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
                        }
                    },
                    "is_route_delivery": True
                })
                
                self.log_test(
                    "–î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ú–ê–†–®–†–£–¢–ï",
                    True,
                    f"–ú–∞—Ä—à—Ä—É—Ç: {source_warehouse.get('name')} ‚Üí –°–∫–ª–∞–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
                )
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)
            self.log_test(
                "–°–ò–ú–£–õ–Ø–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –§–û–†–ú–´ –ü–†–ò–Å–ú–ê",
                True,
                f"–§–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: —Å—É–º–º–∞ {actual_payment} —Ä—É–±, –º–∞—Ä—à—Ä—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            )
            
            return True
            
        except Exception as e:
            self.log_test("–¢–ï–°–¢ –§–û–†–ú–´ –ü–†–ò–Å–ú–ê –ì–†–£–ó–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_route_badge_logic(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è badge –º–∞—Ä—à—Ä—É—Ç–∞"""
        try:
            if not self.operator_warehouses:
                self.log_test(
                    "–¢–ï–°–¢ –õ–û–ì–ò–ö–ò BADGE –ú–ê–†–®–†–£–¢–ê",
                    False,
                    "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–∞—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã
            all_warehouses = self.get_all_warehouses()
            operator_warehouse_ids = [w.get('id') for w in self.operator_warehouses]
            destination_warehouses = [
                w for w in all_warehouses 
                if w.get('is_active', True) and w.get('id') not in operator_warehouse_ids
            ]
            
            if not destination_warehouses:
                self.log_test(
                    "–¢–ï–°–¢ –õ–û–ì–ò–ö–ò BADGE –ú–ê–†–®–†–£–¢–ê",
                    False,
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
                )
                return False
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ badge –º–∞—Ä—à—Ä—É—Ç–∞
            source_warehouse = self.operator_warehouses[0]
            destination_warehouse = destination_warehouses[0]
            
            route_badge = f"üìç {source_warehouse.get('name', '–°–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫')} ‚Üí {destination_warehouse.get('name', '–°–∫–ª–∞–¥-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ')}"
            
            self.log_test(
                "–¢–ï–°–¢ –õ–û–ì–ò–ö–ò BADGE –ú–ê–†–®–†–£–¢–ê",
                True,
                f"Badge –º–∞—Ä—à—Ä—É—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {route_badge}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã badge
            has_source = source_warehouse.get('name') is not None
            has_destination = destination_warehouse.get('name') is not None
            has_arrow = "‚Üí" in route_badge
            has_icon = "üìç" in route_badge
            
            components_check = has_source and has_destination and has_arrow and has_icon
            
            if components_check:
                print(f"   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã badge –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: –∏—Å—Ç–æ—á–Ω–∏–∫, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, —Å—Ç—Ä–µ–ª–∫–∞, –∏–∫–æ–Ω–∫–∞")
            else:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã badge: –∏—Å—Ç–æ—á–Ω–∏–∫={has_source}, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ={has_destination}, —Å—Ç—Ä–µ–ª–∫–∞={has_arrow}, –∏–∫–æ–Ω–∫–∞={has_icon}")
            
            return components_check
            
        except Exception as e:
            self.log_test("–¢–ï–°–¢ –õ–û–ì–ò–ö–ò BADGE –ú–ê–†–®–†–£–¢–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        print("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.get_operator_warehouses():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥—Ä—É–∑–∞—Ö
        test_notification = self.get_warehouse_notifications()
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        all_warehouses = self.get_all_warehouses()
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤
        filtering_success = self.test_warehouse_filtering_logic(all_warehouses)
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –≥—Ä—É–∑–∞
        form_success = self.test_cargo_acceptance_form(test_notification)
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ badge –º–∞—Ä—à—Ä—É—Ç–∞
        badge_success = self.test_route_badge_logic()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        success_count = sum(1 for result in self.test_results if result["success"])
        total_count = len(self.test_results)
        success_rate = (success_count / total_count * 100) if total_count > 0 else 0
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_count} ({success_rate:.1f}%)")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['details']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        critical_checks = {
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞": any(r["test"] == "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê" and r["success"] for r in self.test_results),
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞": any(r["test"] == "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê" and r["success"] for r in self.test_results),
            "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∫–ª–∞–¥–æ–≤": filtering_success,
            "–†–∞—Å—á—ë—Ç —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã": any(r["test"] == "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–Å–¢–ê –°–£–ú–ú–´ –û–ü–õ–ê–¢–´" and r["success"] for r in self.test_results),
            "–õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞": badge_success
        }
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        all_critical_passed = True
        for check_name, passed in critical_checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check_name}")
            if not passed:
                all_critical_passed = False
        
        if all_critical_passed:
            print(f"\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–´!")
            print(f"‚úÖ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–≤–µ—Å √ó —Ü–µ–Ω–∞)")
            print(f"‚úÖ –°–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞")
            print(f"‚úÖ –õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ")
        else:
            print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•!")
        
        return all_critical_passed

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = CargoAcceptanceFormTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            sys.exit(0)
        else:
            print(f"\n‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()