#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoint /api/warehouses/{warehouse_id}/layout-with-cargo –¥–ª—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoint /api/warehouses/{warehouse_id}/layout-with-cargo –¥–ª—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ review request:

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ warehouse_operator (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ /api/operator/warehouses 
3. –í–∑—è—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –∏ –≤—ã–∑–≤–∞—Ç—å /api/warehouses/{warehouse_id}/layout-with-cargo
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ (warehouse, layout, total_cargo, occupied_cells, total_cells, occupancy_percentage)
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ layout —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏, –ø–æ–ª–∫–∏ –∏ —è—á–µ–π–∫–∏
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ 
(–∑–∞–ø–∏—Å–∏ –≤ placement_records), –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ –ø–æ–ª—é warehouse_location.

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- HTTP 200 –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–ª—è warehouse, layout, total_cargo, occupied_cells, total_cells, occupancy_percentage –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
- Layout —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏ —Å –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏
- –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ placement_records
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ warehouse_operator (+79777888999, warehouse123) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class WarehouseLayoutTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouses = []
        self.test_warehouse = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator (+79777888999/warehouse123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ /api/operator/warehouses"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                self.warehouses = response.json()
                
                if len(self.warehouses) > 0:
                    self.test_warehouse = self.warehouses[0]
                    self.log_test(
                        "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ /api/operator/warehouses",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(self.warehouses)} —Å–∫–ª–∞–¥–æ–≤. –ü–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥: '{self.test_warehouse.get('name')}' (ID: {self.test_warehouse.get('id')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤", False, "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤", False, f"–û—à–∏–±–∫–∞: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_warehouse_layout_endpoint(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: endpoint /api/warehouses/{warehouse_id}/layout-with-cargo"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: ENDPOINT LAYOUT-WITH-CARGO")
            
            if not self.test_warehouse:
                self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ layout-with-cargo", False, "–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            warehouse_id = self.test_warehouse.get('id')
            response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/layout-with-cargo", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP 200 –æ—Ç–≤–µ—Ç
                self.log_test(
                    "HTTP 200 –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 200 –¥–ª—è —Å–∫–ª–∞–¥–∞ {self.test_warehouse.get('name')}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                required_fields = ["warehouse", "layout", "total_cargo", "occupied_cells", "total_cells", "occupancy_percentage"]
                present_fields = []
                missing_fields = []
                
                for field in required_fields:
                    if field in data:
                        present_fields.append(field)
                    else:
                        missing_fields.append(field)
                
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (warehouse, layout, total_cargo, occupied_cells, total_cells, occupancy_percentage)",
                    len(missing_fields) == 0,
                    f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {len(present_fields)}/{len(required_fields)}\n" +
                    f"   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(present_fields)}\n" +
                    (f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {', '.join(missing_fields)}" if missing_fields else "   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"),
                    "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_fields}" if missing_fields else "–í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É layout (–±–ª–æ–∫–∏, –ø–æ–ª–∫–∏, —è—á–µ–π–∫–∏)
                layout = data.get("layout", {})
                layout_valid = False
                blocks_count = 0
                shelves_count = 0
                cells_count = 0
                
                if isinstance(layout, dict):
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ (–∫–ª—é—á–∏ –≤–∏–¥–∞ "block_1", "block_2", etc.)
                    block_keys = [key for key in layout.keys() if key.startswith("block_")]
                    blocks_count = len(block_keys)
                    
                    if blocks_count > 0:
                        layout_valid = True
                        
                        for block_key in block_keys:
                            block = layout[block_key]
                            if "shelves" in block and isinstance(block["shelves"], dict):
                                shelf_keys = [key for key in block["shelves"].keys() if key.startswith("shelf_")]
                                shelves_count += len(shelf_keys)
                                
                                for shelf_key in shelf_keys:
                                    shelf = block["shelves"][shelf_key]
                                    if "cells" in shelf and isinstance(shelf["cells"], dict):
                                        cell_keys = [key for key in shelf["cells"].keys() if key.startswith("cell_")]
                                        cells_count += len(cell_keys)
                
                self.log_test(
                    "Layout —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏, –ø–æ–ª–∫–∏ –∏ —è—á–µ–π–∫–∏",
                    layout_valid and blocks_count > 0 and shelves_count > 0 and cells_count > 0,
                    f"Layout —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞: {layout_valid}\n" +
                    f"   üìä –ë–ª–æ–∫–æ–≤: {blocks_count}, –ü–æ–ª–æ–∫: {shelves_count}, –Ø—á–µ–µ–∫: {cells_count}",
                    "Layout –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–ª–æ–∫–∏ —Å –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏",
                    f"–ë–ª–æ–∫–æ–≤: {blocks_count}, –ü–æ–ª–æ–∫: {shelves_count}, –Ø—á–µ–µ–∫: {cells_count}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                total_cargo = data.get("total_cargo", 0)
                occupied_cells = data.get("occupied_cells", 0)
                total_cells = data.get("total_cells", 0)
                occupancy_percentage = data.get("occupancy_percentage", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                calculated_percentage = (occupied_cells / total_cells * 100) if total_cells > 0 else 0
                percentage_correct = abs(occupancy_percentage - calculated_percentage) < 0.1
                
                self.log_test(
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    total_cells > 0 and percentage_correct,
                    f"–í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}\n" +
                    f"   üìä –ó–∞–≥—Ä—É–∑–∫–∞: {occupancy_percentage:.1f}% (—Ä–∞—Å—á–µ—Ç–Ω–∞—è: {calculated_percentage:.1f}%)\n" +
                    f"   ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {percentage_correct}",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π",
                    f"–ó–∞–≥—Ä—É–∑–∫–∞: {occupancy_percentage:.1f}%, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {percentage_correct}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                occupied_cells_with_cargo = 0
                placement_records_found = False
                
                if layout_valid:
                    for block_key in [key for key in layout.keys() if key.startswith("block_")]:
                        block = layout[block_key]
                        for shelf_key in [key for key in block.get("shelves", {}).keys() if key.startswith("shelf_")]:
                            shelf = block["shelves"][shelf_key]
                            for cell_key in [key for key in shelf.get("cells", {}).keys() if key.startswith("cell_")]:
                                cell = shelf["cells"][cell_key]
                                if cell.get("is_occupied", False):
                                    occupied_cells_with_cargo += 1
                                    if cell.get("cargo") is not None:
                                        placement_records_found = True
                
                self.log_test(
                    "–ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ placement_records",
                    occupied_cells_with_cargo == occupied_cells and (placement_records_found or occupied_cells == 0),
                    f"–ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ layout: {occupied_cells_with_cargo}, –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {occupied_cells}\n" +
                    f"   üìã –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã: {placement_records_found}\n" +
                    f"   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö: {occupied_cells_with_cargo == occupied_cells}",
                    "–ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    f"Layout: {occupied_cells_with_cargo}, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {occupied_cells}, –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_records_found}"
                )
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ
                warehouse_info = data.get("warehouse", {})
                warehouse_name = warehouse_info.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                warehouse_location = warehouse_info.get("location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                self.log_test(
                    "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ",
                    True,
                    f"–°–∫–ª–∞–¥: {warehouse_name}, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse_location}\n" +
                    f"   üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_cells} —è—á–µ–µ–∫, {occupied_cells} –∑–∞–Ω—è—Ç–æ ({occupancy_percentage:.1f}%)\n" +
                    f"   üì¶ –†–∞–∑–º–µ—â–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {total_cargo}"
                )
                
                # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                overall_success = (
                    len(missing_fields) == 0 and 
                    layout_valid and 
                    blocks_count > 0 and 
                    cells_count > 0 and
                    total_cells > 0 and
                    percentage_correct and
                    occupied_cells_with_cargo == occupied_cells
                )
                
                return overall_success
                
            else:
                self.log_test(
                    "HTTP 200 –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP {response.status_code} –≤–º–µ—Å—Ç–æ 200",
                    "HTTP 200",
                    f"HTTP {response.status_code}"
                )
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                try:
                    error_data = response.json()
                    error_detail = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    print(f"   üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_detail}")
                except:
                    print(f"   üîç –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}...")
                
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ layout-with-cargo endpoint", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API ENDPOINT /api/warehouses/{warehouse_id}/layout-with-cargo")
        print("=" * 90)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ warehouse_operator")
            return False
        
        if not self.get_operator_warehouses():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        # –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
        test_result = self.test_warehouse_layout_endpoint()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 90)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–•–ï–ú–´ –°–ö–õ–ê–î–ê:")
        print("=" * 90)
        
        success_count = sum(1 for result in self.test_results if result["success"])
        total_count = len(self.test_results)
        success_rate = (success_count / total_count * 100) if total_count > 0 else 0
        
        if test_result:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT /api/warehouses/{warehouse_id}/layout-with-cargo –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print(f"üìä SUCCESS RATE: {success_rate:.1f}% ({success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
            print("\n‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
            print("   ‚úÖ HTTP 200 –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö")
            print("   ‚úÖ –ü–æ–ª—è warehouse, layout, total_cargo, occupied_cells, total_cells, occupancy_percentage –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print("   ‚úÖ Layout —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏ —Å –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏")
            print("   ‚úÖ –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ placement_records")
            print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print(f"üìä SUCCESS RATE: {success_rate:.1f}% ({success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
            print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint /api/warehouses/{warehouse_id}/layout-with-cargo")
            print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É layout —Å –±–ª–æ–∫–∞–º–∏, –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑ placement_records")
        
        return test_result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseLayoutTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("API endpoint /api/warehouses/{warehouse_id}/layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã, —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤")
        return 0
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API endpoint –¥–ª—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞")
        return 1

if __name__ == "__main__":
    exit(main())