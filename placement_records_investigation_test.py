#!/usr/bin/env python3
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —è—á–µ–µ–∫

**–ü–†–û–ë–õ–ï–ú–ê:**
- –û–ø–µ—Ä–∞—Ç–æ—Ä USR648425 —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏–ª 2 –≥—Ä—É–∑–∞ –∏–∑ –∑–∞—è–≤–∫–∏ 25082235:
  - 25082235/01/01 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ë1-–ü3-–Ø3
  - 25082235/01/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ë1-–ü3-–Ø2
- –ù–û –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —è—á–µ–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —è—á–µ–π–∫–∏ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏

**–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï:**

1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞:**
   - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
   - –ü–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"

2. **–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –¥–ª—è –Ω–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤:**
   - –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ placement_records –¥–ª—è 25082235/01/01 –∏ 25082235/01/02
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å warehouse_id –≤ —ç—Ç–∏—Ö –∑–∞–ø–∏—Å—è—Ö
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è location –∏ location_code

3. **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API layout-with-cargo:**
   - –í—ã–∑–≤–∞—Ç—å /api/warehouses/{warehouse_id}/layout-with-cargo
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å occupied_cells - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0
   - –ù–∞–π—Ç–∏ –±–ª–æ–∫ –ë1, –ø–æ–ª–∫—É –ü3, —è—á–µ–π–∫–∏ –Ø2 –∏ –Ø3
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≥—Ä—É–∑—ã –≤ —ç—Ç–∏—Ö —è—á–µ–π–∫–∞—Ö

4. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:**
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ operator_cargo —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
   - –°–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É placement_records –∏ operator_cargo

5. **–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã:**
   - –ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –ø–æ—á–µ–º—É –Ω–æ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ warehouse_id
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ location –∫–æ–¥–æ–≤

**–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:**
- –ù–∞–π—Ç–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã
- occupied_cells –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 (–Ω–æ–≤—ã–µ –≥—Ä—É–∑—ã)
- –ì—Ä—É–∑—ã 25082235/01/01 –∏ 25082235/01/02 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —è—á–µ–π–∫–∞—Ö –ë1-–ü3-–Ø3 –∏ –ë1-–ü3-–Ø2

**–ö–†–ò–¢–ò–ß–ù–û:** –ù–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø–æ—á–µ–º—É —Å–≤–µ–∂–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Å—Ö–µ–º–µ!
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://cargo-sync.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Target cargo items to investigate
TARGET_CARGO_ITEMS = ["25082235/01/01", "25082235/01/02"]
TARGET_CARGO_NUMBER = "25082235"
TARGET_POSITIONS = {
    "25082235/01/01": "–ë1-–ü3-–Ø3",
    "25082235/01/02": "–ë1-–ü3-–Ø2"
}

class PlacementRecordsInvestigation:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.warehouse_id = None
        self.test_results = []
        self.start_time = time.time()
        
    def log_result(self, test_name: str, success: bool, details: str, response_time: float = 0):
        """Log test result with timing"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        self.test_results.append({
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "response_time": f"{response_time:.0f}ms"
        })
        print(f"{status} {test_name}: {details} ({response_time:.0f}ms)")
        
    def make_request(self, method: str, endpoint: str, **kwargs):
        """Make HTTP request with timing"""
        start_time = time.time()
        
        headers = kwargs.get('headers', {})
        if self.token:
            headers['Authorization'] = f'Bearer {self.token}'
        kwargs['headers'] = headers
        
        try:
            url = f"{BACKEND_URL}{endpoint}"
            response = self.session.request(method, url, **kwargs)
            response_time = (time.time() - start_time) * 1000
            
            return response, response_time
        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            print(f"‚ùå Request failed: {e}")
            return None, response_time
    
    def authenticate_warehouse_operator(self):
        """Step 1: Authenticate as warehouse operator"""
        print("\nüîê STEP 1: Authenticating as warehouse operator...")
        
        login_data = {
            "phone": WAREHOUSE_OPERATOR_PHONE,
            "password": WAREHOUSE_OPERATOR_PASSWORD
        }
        
        response, response_time = self.make_request('POST', '/auth/login', json=login_data)
        
        if response and response.status_code == 200:
            data = response.json()
            self.token = data.get('access_token')
            user_info = data.get('user', {})
            
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                True,
                f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'Unknown')}' (—Ä–æ–ª—å: {user_info.get('role', 'unknown')})",
                response_time
            )
            return True
        else:
            error_msg = response.json().get('detail', 'Unknown error') if response else 'Connection failed'
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_msg}",
                response_time
            )
            return False
    
    def get_warehouse_id(self):
        """Step 2: Get warehouse_id for '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
        print("\nüè¢ STEP 2: Getting warehouse_id for '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'...")
        
        response, response_time = self.make_request('GET', '/operator/warehouses')
        
        if response and response.status_code == 200:
            warehouses = response.json()
            
            # Find "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
            moscow_warehouse = None
            for warehouse in warehouses:
                if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get('name', ''):
                    moscow_warehouse = warehouse
                    break
            
            if moscow_warehouse:
                self.warehouse_id = moscow_warehouse['id']
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    True,
                    f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' (ID: {self.warehouse_id})",
                    response_time
                )
                return True
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    f"–°–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤",
                    response_time
                )
                return False
        else:
            error_msg = response.json().get('detail', 'Unknown error') if response else 'Connection failed'
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {error_msg}",
                response_time
            )
            return False
    
    def check_placement_records(self):
        """Step 3: Check placement_records for target cargo items"""
        print("\nüìã STEP 3: Checking placement_records for target cargo items...")
        
        # We need to use a direct database query endpoint or check through operator cargo
        # Let's check through operator cargo first
        response, response_time = self.make_request('GET', '/operator/cargo/fully-placed')
        
        if response and response.status_code == 200:
            data = response.json()
            items = data.get('items', [])
            
            # Look for our target cargo
            target_cargo = None
            for item in items:
                if item.get('cargo_number') == TARGET_CARGO_NUMBER:
                    target_cargo = item
                    break
            
            if target_cargo:
                individual_units = target_cargo.get('individual_units', [])
                found_units = []
                
                for unit in individual_units:
                    individual_number = unit.get('individual_number')
                    if individual_number in TARGET_CARGO_ITEMS:
                        found_units.append({
                            'individual_number': individual_number,
                            'status': unit.get('status'),
                            'placement_info': unit.get('placement_info'),
                            'is_placed': unit.get('status') == 'placed'
                        })
                
                if found_units:
                    details = f"–ù–∞–π–¥–µ–Ω–æ {len(found_units)} –µ–¥–∏–Ω–∏—Ü –∏–∑ –∑–∞—è–≤–∫–∏ {TARGET_CARGO_NUMBER}: "
                    for unit in found_units:
                        details += f"{unit['individual_number']} ({unit['status']}, {unit['placement_info']}), "
                    
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
                        True,
                        details.rstrip(', '),
                        response_time
                    )
                    return found_units
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
                        False,
                        f"–¶–µ–ª–µ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã {TARGET_CARGO_ITEMS} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∑–∞—è–≤–∫–µ {TARGET_CARGO_NUMBER}",
                        response_time
                    )
                    return []
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
                    False,
                    f"–ó–∞—è–≤–∫–∞ {TARGET_CARGO_NUMBER} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {len(items)} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                    response_time
                )
                return []
        else:
            error_msg = response.json().get('detail', 'Unknown error') if response else 'Connection failed'
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {error_msg}",
                response_time
            )
            return []
    
    def check_layout_with_cargo(self):
        """Step 4: Check layout-with-cargo API"""
        print("\nüè≠ STEP 4: Checking layout-with-cargo API...")
        
        if not self.warehouse_id:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo",
                False,
                "warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                0
            )
            return None
        
        response, response_time = self.make_request('GET', f'/warehouses/{self.warehouse_id}/layout-with-cargo')
        
        if response and response.status_code == 200:
            data = response.json()
            
            # Check basic statistics
            total_cells = data.get('total_cells', 0)
            occupied_cells = data.get('occupied_cells', 0)
            total_cargo = data.get('total_cargo', 0)
            loading_percentage = data.get('loading_percentage', 0)
            
            # Check structure
            blocks = data.get('blocks', [])
            
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo",
                True,
                f"–í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}, –ó–∞–≥—Ä—É–∑–∫–∞: {loading_percentage}%, –ë–ª–æ–∫–æ–≤: {len(blocks)}",
                response_time
            )
            
            return data
        else:
            error_msg = response.json().get('detail', 'Unknown error') if response else 'Connection failed'
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞: {error_msg}",
                response_time
            )
            return None
    
    def search_target_cargo_in_layout(self, layout_data):
        """Step 5: Search for target cargo items in layout"""
        print("\nüîç STEP 5: Searching for target cargo items in layout...")
        
        if not layout_data:
            self.log_result(
                "–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
                False,
                "–î–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                0
            )
            return
        
        blocks = layout_data.get('blocks', [])
        found_cargo = []
        
        # Search through all blocks, shelves, and cells
        for block in blocks:
            block_number = block.get('number')
            shelves = block.get('shelves', [])
            
            for shelf in shelves:
                shelf_number = shelf.get('number')
                cells = shelf.get('cells', [])
                
                for cell in cells:
                    cell_number = cell.get('number')
                    is_occupied = cell.get('is_occupied', False)
                    
                    if is_occupied:
                        cargo_info = cell.get('cargo', {})
                        individual_number = cargo_info.get('individual_number')
                        
                        if individual_number in TARGET_CARGO_ITEMS:
                            position = f"–ë{block_number}-–ü{shelf_number}-–Ø{cell_number}"
                            found_cargo.append({
                                'individual_number': individual_number,
                                'position': position,
                                'cargo_number': cargo_info.get('cargo_number'),
                                'cargo_name': cargo_info.get('cargo_name'),
                                'recipient_name': cargo_info.get('recipient_name'),
                                'placed_by': cargo_info.get('placed_by')
                            })
        
        if found_cargo:
            details = f"–ù–∞–π–¥–µ–Ω–æ {len(found_cargo)} —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ: "
            for cargo in found_cargo:
                details += f"{cargo['individual_number']} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {cargo['position']}, "
            
            self.log_result(
                "–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
                True,
                details.rstrip(', '),
                0
            )
        else:
            # Check if we have any occupied cells at all
            occupied_cells = layout_data.get('occupied_cells', 0)
            if occupied_cells > 0:
                self.log_result(
                    "–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
                    False,
                    f"–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã {TARGET_CARGO_ITEMS} –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ —Å—Ö–µ–º–µ, —Ö–æ—Ç—è –µ—Å—Ç—å {occupied_cells} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫",
                    0
                )
            else:
                self.log_result(
                    "–ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
                    False,
                    f"–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã {TARGET_CARGO_ITEMS} –ù–ï –ù–ê–ô–î–ï–ù–´ - —Å—Ö–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0 –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫",
                    0
                )
        
        return found_cargo
    
    def check_data_synchronization(self):
        """Step 6: Check data synchronization between collections"""
        print("\nüîÑ STEP 6: Checking data synchronization...")
        
        # Check individual units for placement
        response, response_time = self.make_request('GET', '/operator/cargo/individual-units-for-placement')
        
        if response and response.status_code == 200:
            data = response.json()
            items = data.get('items', [])
            
            # Look for our target cargo items
            target_units = []
            for item in items:
                individual_number = item.get('individual_number')
                if individual_number in TARGET_CARGO_ITEMS:
                    target_units.append({
                        'individual_number': individual_number,
                        'cargo_number': item.get('cargo_number'),
                        'status': item.get('status'),
                        'is_placed': item.get('is_placed', False),
                        'placement_info': item.get('placement_info')
                    })
            
            if target_units:
                details = f"–ù–∞–π–¥–µ–Ω–æ {len(target_units)} –µ–¥–∏–Ω–∏—Ü –≤ individual-units-for-placement: "
                for unit in target_units:
                    details += f"{unit['individual_number']} (—Ä–∞–∑–º–µ—â–µ–Ω: {unit['is_placed']}, —Å—Ç–∞—Ç—É—Å: {unit['status']}), "
                
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    details.rstrip(', '),
                    response_time
                )
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–¶–µ–ª–µ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã {TARGET_CARGO_ITEMS} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ individual-units-for-placement —Å—Ä–µ–¥–∏ {len(items)} –µ–¥–∏–Ω–∏—Ü",
                    response_time
                )
        else:
            error_msg = response.json().get('detail', 'Unknown error') if response else 'Connection failed'
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual units: {error_msg}",
                response_time
            )
    
    def diagnose_root_cause(self, placement_records, layout_data, found_cargo):
        """Step 7: Diagnose root cause of the problem"""
        print("\nüî¨ STEP 7: Diagnosing root cause...")
        
        diagnosis = []
        
        # Check if cargo items are marked as placed
        placed_items = [item for item in placement_records if item.get('is_placed')]
        if placed_items:
            diagnosis.append(f"‚úÖ {len(placed_items)} –µ–¥–∏–Ω–∏—Ü –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            diagnosis.append(f"‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è")
        
        # Check if layout shows occupied cells
        occupied_cells = layout_data.get('occupied_cells', 0) if layout_data else 0
        if occupied_cells > 0:
            diagnosis.append(f"‚úÖ –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {occupied_cells} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫")
        else:
            diagnosis.append(f"‚ùå –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0 –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫")
        
        # Check if target cargo found in layout
        if found_cargo:
            diagnosis.append(f"‚úÖ {len(found_cargo)} —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞")
        else:
            diagnosis.append(f"‚ùå –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞")
        
        # Determine root cause
        if not placed_items:
            root_cause = "–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ì—Ä—É–∑—ã –Ω–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        elif occupied_cells == 0:
            root_cause = "–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å API layout-with-cargo - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã"
        elif not found_cargo:
            root_cause = "–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"
        else:
            root_cause = "–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - –≥—Ä—É–∑—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è"
        
        diagnosis.append(root_cause)
        
        diagnosis_text = "; ".join(diagnosis)
        
        self.log_result(
            "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã",
            len(found_cargo) == len(TARGET_CARGO_ITEMS),
            diagnosis_text,
            0
        )
        
        return root_cause
    
    def run_investigation(self):
        """Run complete investigation"""
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
        print("=" * 100)
        
        # Step 1: Authenticate
        if not self.authenticate_warehouse_operator():
            return self.generate_report()
        
        # Step 2: Get warehouse ID
        if not self.get_warehouse_id():
            return self.generate_report()
        
        # Step 3: Check placement records
        placement_records = self.check_placement_records()
        
        # Step 4: Check layout with cargo
        layout_data = self.check_layout_with_cargo()
        
        # Step 5: Search for target cargo in layout
        found_cargo = self.search_target_cargo_in_layout(layout_data)
        
        # Step 6: Check data synchronization
        self.check_data_synchronization()
        
        # Step 7: Diagnose root cause
        root_cause = self.diagnose_root_cause(placement_records, layout_data, found_cargo)
        
        return self.generate_report()
    
    def generate_report(self):
        """Generate final test report"""
        total_time = time.time() - self.start_time
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r['success']])
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print("\n" + "=" * 100)
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 100)
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"- –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
        print(f"- –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {total_tests - passed_tests}")
        print(f"- Success Rate: {success_rate:.1f}%")
        print(f"- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(f"{result['status']} {result['test']}: {result['details']} ({result['response_time']})")
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î:")
        if success_rate >= 70:
            if passed_tests == total_tests:
                print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä—É–∑–æ–≤ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
            else:
                print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ–±–ª–µ–º—ã –≤—ã—è–≤–ª–µ–Ω—ã –∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É placement_records –∏ operator_cargo")
        print("2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API layout-with-cargo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ warehouse_id –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö")
        print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ location –∫–æ–¥–æ–≤ (–ë1-–ü3-–Ø3 —Ñ–æ—Ä–º–∞—Ç)")
        
        return {
            'success_rate': success_rate,
            'total_tests': total_tests,
            'passed_tests': passed_tests,
            'execution_time': total_time,
            'results': self.test_results
        }

def main():
    """Main execution function"""
    investigation = PlacementRecordsInvestigation()
    results = investigation.run_investigation()
    
    # Exit with appropriate code
    if results['success_rate'] >= 70:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()