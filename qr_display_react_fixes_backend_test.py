#!/usr/bin/env python3
"""
Backend Test for TAJLINE.TJ Digital QR Code Display and React Error Fixes
Testing final fixes for digital QR code display and React error in TAJLINE.TJ

REVIEW REQUEST CONTEXT:
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR –∫–æ–¥–∞ –∏ React –æ—à–∏–±–∫–∏ –≤ TAJLINE.TJ:

1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: API /api/operator/cargo/place —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–∞
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è: warehouse_name, location_code, cargo_number, placed_at

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´:
- Frontend: –ü–æ–ª–µ –≤–≤–æ–¥–∞ —è—á–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ QR (03010101) –≤–º–µ—Å—Ç–æ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
- Frontend: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ React –æ—à–∏–±–∫–∞ –≤ handlePlaceCargo —Å proper –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±—ä–µ–∫—Ç–∞ response
- Backend: –û–±–Ω–æ–≤–ª–µ–Ω /api/operator/cargo/place –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
  * warehouse_name (–≤–º–µ—Å—Ç–æ warehouse)
  * location_code (–≤–º–µ—Å—Ç–æ location)
  * cargo_number (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
  * placed_at (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
  * cargo_name (–¥–æ–±–∞–≤–ª–µ–Ω–æ)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è frontend
- React –æ—à–∏–±–∫–∞ "Objects are not valid as a React child" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
- –¶–∏—Ñ—Ä–æ–≤–æ–π QR –∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —è—á–µ–π–∫–∏
- –°–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
"""

import requests
import json
import sys
import os
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-6.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRDisplayReactFixesTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.available_cargo = []
        self.warehouses = []
        
    def authenticate_warehouse_operator(self):
        """1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
        print("üîê –≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                # Set authorization header
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞:")
                print(f"   - –ò–º—è: {self.operator_info.get('full_name')}")
                print(f"   - –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.operator_info.get('user_number')}")
                print(f"   - –†–æ–ª—å: {self.operator_info.get('role')}")
                print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {self.operator_info.get('phone')}")
                
                if self.operator_info.get('role') != 'warehouse_operator':
                    print(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–∂–∏–¥–∞–ª–∞—Å—å —Ä–æ–ª—å 'warehouse_operator', –ø–æ–ª—É—á–µ–Ω–∞ '{self.operator_info.get('role')}'")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_available_cargo_for_placement(self):
        """2. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("\nüì¶ –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # Check if response has items structure
                if 'items' in data:
                    self.available_cargo = data['items']
                    pagination = data.get('pagination', {})
                    
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã:")
                    print(f"   - –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {len(self.available_cargo)}")
                    print(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pagination.get('total_count', 'N/A')}")
                    print(f"   - –°—Ç—Ä–∞–Ω–∏—Ü–∞: {pagination.get('page', 'N/A')}")
                    
                    # Show first few cargo for testing
                    if self.available_cargo:
                        print(f"   - –ü–µ—Ä–≤—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                        for i, cargo in enumerate(self.available_cargo[:3]):
                            print(f"     {i+1}. {cargo.get('cargo_number')} - {cargo.get('sender_full_name')} -> {cargo.get('recipient_full_name')}")
                            print(f"        –°—Ç–∞—Ç—É—Å: {cargo.get('processing_status')}, –í–µ—Å: {cargo.get('weight')}–∫–≥")
                    
                    return True
                else:
                    # Legacy format without pagination
                    self.available_cargo = data if isinstance(data, list) else []
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã (legacy format): {len(self.available_cargo)} –≥—Ä—É–∑–æ–≤")
                    return True
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤: {e}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüè≠ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/warehouses",
                timeout=10
            )
            
            if response.status_code == 200:
                self.warehouses = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {len(self.warehouses)} —Å–∫–ª–∞–¥–æ–≤")
                
                if self.warehouses:
                    print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã:")
                    for warehouse in self.warehouses[:3]:
                        print(f"   - {warehouse.get('name')} (ID: {warehouse.get('id')})")
                        print(f"     –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse.get('location')}")
                        if 'warehouse_number' in warehouse:
                            print(f"     –ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞: {warehouse.get('warehouse_number')}")
                        if 'warehouse_id_number' in warehouse:
                            print(f"     ID –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞: {warehouse.get('warehouse_id_number')}")
                
                return True
            else:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}")
            return False
    
    def test_cargo_place_api_structure(self):
        """3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: API /api/operator/cargo/place —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–∞"""
        print("\nüéØ –≠–¢–ê–ü 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞...")
        
        if not self.available_cargo:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        if not self.warehouses:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # Use first available cargo and warehouse
        test_cargo = self.available_cargo[0]
        test_warehouse = self.warehouses[0]
        
        cargo_id = test_cargo.get('id')
        warehouse_id = test_warehouse.get('id')
        
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {test_cargo.get('cargo_number')}")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥: {test_warehouse.get('name')}")
        
        # Test data for cargo placement
        placement_data = {
            "cargo_id": cargo_id,
            "warehouse_id": warehouse_id,
            "block_number": 1,
            "shelf_number": 1,
            "cell_number": 1
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place",
                json=placement_data,
                timeout=10
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API /api/operator/cargo/place —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                
                # Check for required fields according to review request
                required_fields = ['warehouse_name', 'location_code', 'cargo_number', 'placed_at']
                optional_fields = ['cargo_name']
                
                print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:")
                all_required_present = True
                
                for field in required_fields:
                    if field in data:
                        print(f"   ‚úÖ {field}: {data[field]}")
                    else:
                        print(f"   ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï: {field}")
                        all_required_present = False
                
                for field in optional_fields:
                    if field in data:
                        print(f"   ‚úÖ {field} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): {data[field]}")
                    else:
                        print(f"   ‚ö†Ô∏è  {field} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # Check for old fields that should be replaced
                old_fields = ['message', 'location', 'warehouse']
                old_fields_found = []
                for field in old_fields:
                    if field in data:
                        old_fields_found.append(field)
                        print(f"   ‚ö†Ô∏è  –°–¢–ê–†–û–ï –ü–û–õ–ï (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–æ): {field}: {data[field]}")
                
                if all_required_present:
                    print(f"\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
                    print(f"   - warehouse_name: ‚úÖ")
                    print(f"   - location_code: ‚úÖ") 
                    print(f"   - cargo_number: ‚úÖ")
                    print(f"   - placed_at: ‚úÖ")
                    
                    if old_fields_found:
                        print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è: {old_fields_found}")
                        print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API")
                    
                    return True
                else:
                    print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
                    print(f"   Frontend –æ–∂–∏–¥–∞–µ—Ç: {required_fields}")
                    print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {list(data.keys())}")
                    return False
                    
            elif response.status_code == 400:
                error_data = response.json()
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ): {error_data.get('detail', 'Unknown error')}")
                
                # This might be expected if cargo is already placed or cell is occupied
                # Let's try with different coordinates
                print(f"   –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã...")
                
                for cell_num in range(2, 6):  # Try cells 2-5
                    placement_data['cell_number'] = cell_num
                    retry_response = self.session.post(
                        f"{BACKEND_URL}/operator/cargo/place",
                        json=placement_data,
                        timeout=10
                    )
                    
                    if retry_response.status_code == 200:
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å —è—á–µ–π–∫–æ–π {cell_num}")
                        return self.analyze_response_structure(retry_response.json())
                    
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑ –Ω–∏ –≤ –æ–¥–Ω—É —è—á–µ–π–∫—É")
                return False
                
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
            return False
    
    def analyze_response_structure(self, data):
        """Analyze the response structure for required fields"""
        required_fields = ['warehouse_name', 'location_code', 'cargo_number', 'placed_at']
        
        print(f"üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:")
        all_required_present = True
        
        for field in required_fields:
            if field in data:
                print(f"   ‚úÖ {field}: {data[field]}")
            else:
                print(f"   ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢: {field}")
                all_required_present = False
        
        return all_required_present
    
    def test_digital_qr_support(self):
        """4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR —Ñ–æ—Ä–º–∞—Ç–∞ (03010101)"""
        print("\nüî¢ –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR —Ñ–æ—Ä–º–∞—Ç–∞...")
        
        if not self.warehouses:
            print("‚ùå –ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
            return False
        
        digital_format_ready = True
        
        for warehouse in self.warehouses[:3]:  # Check first 3 warehouses
            warehouse_name = warehouse.get('name', 'Unknown')
            warehouse_number = warehouse.get('warehouse_number')
            warehouse_id_number = warehouse.get('warehouse_id_number')
            
            print(f"   –°–∫–ª–∞–¥: {warehouse_name}")
            
            if warehouse_number is not None:
                print(f"   ‚úÖ warehouse_number: {warehouse_number}")
            else:
                print(f"   ‚ùå warehouse_number: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                digital_format_ready = False
            
            if warehouse_id_number is not None:
                print(f"   ‚úÖ warehouse_id_number: {warehouse_id_number}")
            else:
                print(f"   ‚ö†Ô∏è  warehouse_id_number: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        if digital_format_ready:
            print(f"\n‚úÖ –ü–û–î–î–ï–†–ñ–ö–ê –¶–ò–§–†–û–í–û–ì–û QR –§–û–†–ú–ê–¢–ê: –ì–æ—Ç–æ–≤–∞")
            print(f"   –°–∫–ª–∞–¥—ã –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ 03010101")
        else:
            print(f"\n‚ö†Ô∏è  –ü–û–î–î–ï–†–ñ–ö–ê –¶–ò–§–†–û–í–û–ì–û QR –§–û–†–ú–ê–¢–ê: –ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞")
            print(f"   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∫–ª–∞–¥—ã –Ω–µ –∏–º–µ—é—Ç warehouse_number")
        
        return digital_format_ready
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üöÄ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR –∫–æ–¥–∞ –∏ React –æ—à–∏–±–∫–∏ –≤ TAJLINE.TJ")
        print("=" * 100)
        
        test_results = {
            "warehouse_operator_auth": False,
            "available_cargo_retrieval": False,
            "cargo_place_api_structure": False,
            "digital_qr_support": False
        }
        
        # Step 1: Authenticate warehouse operator
        test_results["warehouse_operator_auth"] = self.authenticate_warehouse_operator()
        
        if not test_results["warehouse_operator_auth"]:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return self.generate_final_report(test_results)
        
        # Step 2: Get available cargo for placement
        test_results["available_cargo_retrieval"] = self.get_available_cargo_for_placement()
        
        # Get warehouses for testing
        self.get_operator_warehouses()
        
        # Step 3: Test critical API structure
        test_results["cargo_place_api_structure"] = self.test_cargo_place_api_structure()
        
        # Step 4: Test digital QR support
        test_results["digital_qr_support"] = self.test_digital_qr_support()
        
        return self.generate_final_report(test_results)
    
    def generate_final_report(self, test_results):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "=" * 100)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        passed_tests = sum(test_results.values())
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏)")
        print()
        
        # Detailed results
        test_descriptions = {
            "warehouse_operator_auth": "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
            "available_cargo_retrieval": "2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", 
            "cargo_place_api_structure": "3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
            "digital_qr_support": "4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR —Ñ–æ—Ä–º–∞—Ç–∞ (03010101)"
        }
        
        for test_key, passed in test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            description = test_descriptions.get(test_key, test_key)
            print(f"{status}: {description}")
        
        print()
        
        # Critical analysis
        if test_results["cargo_place_api_structure"]:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: API /api/operator/cargo/place –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É!")
            print("   - warehouse_name: ‚úÖ")
            print("   - location_code: ‚úÖ")
            print("   - cargo_number: ‚úÖ") 
            print("   - placed_at: ‚úÖ")
            print("   React –æ—à–∏–±–∫–∞ 'Objects are not valid as a React child' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: API /api/operator/cargo/place –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É!")
            print("   Frontend –æ–∂–∏–¥–∞–µ—Ç: warehouse_name, location_code, cargo_number, placed_at")
            print("   –≠—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ React –æ—à–∏–±–∫–∏!")
        
        if test_results["digital_qr_support"]:
            print("‚úÖ –¶–ò–§–†–û–í–û–ô QR –§–û–†–ú–ê–¢: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–æ—Ç–æ–≤–∞")
            print("   –ü–æ–ª–µ –≤–≤–æ–¥–∞ —è—á–µ–π–∫–∏ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ (03010101)")
        else:
            print("‚ö†Ô∏è  –¶–ò–§–†–û–í–û–ô QR –§–û–†–ú–ê–¢: –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        
        print()
        
        # Final verdict
        if success_rate >= 75:
            print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            if test_results["cargo_place_api_structure"]:
                print("   –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ React –æ—à–∏–±–∫–∏ —Ä–µ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API")
        else:
            print("‚ö†Ô∏è  –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
            print("   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –ø–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        
        return success_rate >= 75

def main():
    """Main test execution"""
    print("üîß BACKEND STABILITY TESTING FOR QR DISPLAY AND REACT FIXES")
    print("Testing final fixes for digital QR code display and React error in TAJLINE.TJ")
    print()
    
    tester = QRDisplayReactFixesTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        sys.exit(1)

if __name__ == "__main__":
    main()