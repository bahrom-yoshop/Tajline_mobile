#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö placement_records –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è placement_records –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ review request:

–®–ê–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ admin (+79999888777/admin123)
2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ POST /api/admin/reconstruct-placement-records
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ)
4. –ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ warehouse_operator (+79777888999/warehouse123)
5. –ü–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ /api/warehouses/{warehouse_id}/layout-with-cargo:
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ–ø–µ—Ä—å occupied_cells > 0 –∏ total_cargo > 0
   - –ù–∞–π—Ç–∏ –≥—Ä—É–∑ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9 (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 2, —è—á–µ–π–∫–∞ 9)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
7. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP- –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
8. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫–µ (cargo_number, individual_number, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç placement_record –¥–ª—è –≥—Ä—É–∑–∞ 25082235/02/02
- –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–Ω—è—Ç—É—é —è—á–µ–π–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9
- –ì—Ä—É–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö TEMP- –Ω–æ–º–µ—Ä–æ–≤
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementRecordsReconstructionTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_user = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=ADMIN_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.admin_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_user.get('full_name')}' (—Ä–æ–ª—å: {self.admin_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ warehouse_operator...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ warehouse_operator (+79777888999/warehouse123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_placement_records_reconstruction(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ POST /api/admin/reconstruct-placement-records"""
        print("üîß –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è placement_records...")
        
        try:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            self.session.headers.update({
                "Authorization": f"Bearer {self.admin_token}"
            })
            
            response = self.session.post(
                f"{API_BASE}/admin/reconstruct-placement-records",
                headers={"Content-Type": "application/json"},
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –º–∏–≥—Ä–∞—Ü–∏–∏
                status = data.get("status", "unknown")
                records_found = data.get("records_found", 0)
                records_processed = data.get("records_processed", 0)
                message = data.get("message", "No message")
                
                self.log_test(
                    "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ POST /api/admin/reconstruct-placement-records",
                    True,
                    f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ\n" +
                    f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n" +
                    f"   üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {records_found}\n" +
                    f"   ‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {records_processed}\n" +
                    f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                if records_processed > 0:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ)",
                        True,
                        f"–°–æ–∑–¥–∞–Ω–æ {records_processed} –∑–∞–ø–∏—Å–µ–π placement_record"
                    )
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–∑–¥–∞–Ω–æ)",
                        records_found == 0,  # –£—Å–ø–µ—Ö –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {records_processed} –∑–∞–ø–∏—Å–µ–π (–Ω–∞–π–¥–µ–Ω–æ {records_found} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)"
                    )
                
                return True
                
            else:
                self.log_test(
                    "–ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è placement_records",
                    False,
                    f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: HTTP {response.status_code}",
                    "HTTP 200",
                    f"HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è placement_records", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_warehouse_id_moscow_1(self):
        """–ü–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
        print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                
                for warehouse in warehouses:
                    if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                        self.warehouse_id = warehouse.get("id")
                        warehouse_location = warehouse.get("location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        
                        self.log_test(
                            "–ü–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
                            True,
                            f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥ '{warehouse.get('name')}' (ID: {self.warehouse_id}, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse_location})"
                        )
                        return True
                
                self.log_test(
                    "–ü–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
                    False,
                    "–°–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
                
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def check_warehouse_schema(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ /api/warehouses/{warehouse_id}/layout-with-cargo"""
        print("üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞...")
        
        try:
            if not self.warehouse_id:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            response = self.session.get(
                f"{API_BASE}/warehouses/{self.warehouse_id}/layout-with-cargo",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                occupied_cells = data.get("occupied_cells", 0)
                total_cargo = data.get("total_cargo", 0)
                total_cells = data.get("total_cells", 0)
                occupancy_percentage = data.get("occupancy_percentage", 0.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ occupied_cells > 0 –∏ total_cargo > 0
                cells_cargo_check = occupied_cells > 0 and total_cargo > 0
                
                self.log_test(
                    "–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ–ø–µ—Ä—å occupied_cells > 0 –∏ total_cargo > 0",
                    cells_cargo_check,
                    f"–í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}, –ó–∞–≥—Ä—É–∑–∫–∞: {occupancy_percentage}%",
                    "occupied_cells > 0 –∏ total_cargo > 0",
                    f"occupied_cells: {occupied_cells}, total_cargo: {total_cargo}"
                )
                
                # –ò—â–µ–º –≥—Ä—É–∑ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9
                layout = data.get("layout", {})
                cargo_found = False
                cargo_details = {}
                temp_data_found = False
                
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∫–ª–∞–¥–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å blocks –∫–∞–∫ —Å–ø–∏—Å–æ–∫)
                blocks = layout.get("blocks", [])
                for block in blocks:
                    if not isinstance(block, dict):
                        continue
                        
                    block_num = block.get("block_number")
                    shelves = block.get("shelves", [])
                    
                    for shelf in shelves:
                        if not isinstance(shelf, dict):
                            continue
                            
                        shelf_num = shelf.get("shelf_number")
                        cells = shelf.get("cells", [])
                        
                        for cell in cells:
                            if not isinstance(cell, dict):
                                continue
                            
                            cell_num = cell.get("cell_number")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP- –¥–∞–Ω–Ω—ã–µ
                            cargo_list = cell.get("cargo", [])
                            if cargo_list:
                                for cargo_info in cargo_list:
                                    cargo_number = cargo_info.get("cargo_number", "")
                                    individual_number = cargo_info.get("individual_number", "")
                                    
                                    if "TEMP-" in cargo_number or "TEMP-" in individual_number:
                                        temp_data_found = True
                                    
                                    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥—Ä—É–∑ 25082235/02/02
                                    if individual_number == "25082235/02/02":
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ë1-–ü2-–Ø9 (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 2, —è—á–µ–π–∫–∞ 9)
                                        if block_num == 1 and shelf_num == 2 and cell_num == 9:
                                            cargo_found = True
                                            cargo_details = {
                                                "individual_number": individual_number,
                                                "cargo_number": cargo_info.get("cargo_number", ""),
                                                "cargo_name": cargo_info.get("cargo_name", ""),
                                                "sender_name": cargo_info.get("sender_full_name", ""),
                                                "recipient_name": cargo_info.get("recipient_full_name", ""),
                                                "placed_by": cargo_info.get("placed_by", ""),
                                                "location_code": f"–ë{block_num}-–ü{shelf_num}-–Ø{cell_num}",
                                                "is_occupied": cell.get("is_occupied", False),
                                                "placement_location": cargo_info.get("placement_location", "")
                                            }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–∑ 25082235/02/02 –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9
                self.log_test(
                    "–ù–∞–π—Ç–∏ –≥—Ä—É–∑ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9 (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 2, —è—á–µ–π–∫–∞ 9)",
                    cargo_found,
                    f"–ì—Ä—É–∑ {'–Ω–∞–π–¥–µ–Ω' if cargo_found else '–ù–ï –Ω–∞–π–¥–µ–Ω'} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9" +
                    (f"\n   üì¶ Individual Number: {cargo_details.get('individual_number')}\n" +
                     f"   üìã Cargo Number: {cargo_details.get('cargo_number')}\n" +
                     f"   üè∑Ô∏è Cargo Name: {cargo_details.get('cargo_name')}\n" +
                     f"   üìç Location: {cargo_details.get('location_code')}\n" +
                     f"   üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {cargo_details.get('recipient_name')}\n" +
                     f"   üë∑ –†–∞–∑–º–µ—â–µ–Ω: {cargo_details.get('placed_by')}" if cargo_found else ""),
                    "–ì—Ä—É–∑ 25082235/02/02 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9",
                    "–ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω" if cargo_found else "–ì—Ä—É–∑ –ù–ï –Ω–∞–π–¥–µ–Ω"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
                if cargo_found:
                    data_correct = (
                        cargo_details.get("individual_number") == "25082235/02/02" and
                        cargo_details.get("cargo_number") and
                        cargo_details.get("recipient_name") and
                        cargo_details.get("is_occupied") == True
                    )
                    
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã",
                        data_correct,
                        f"–î–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ {'–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã' if data_correct else '–ù–ï –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã'}\n" +
                        f"   üì¶ Individual Number: {cargo_details.get('individual_number')}\n" +
                        f"   üìã Cargo Number: {cargo_details.get('cargo_number')}\n" +
                        f"   üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {cargo_details.get('recipient_name')}\n" +
                        f"   üè† –ó–∞–Ω—è—Ç–∞: {cargo_details.get('is_occupied')}",
                        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏",
                        "–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã" if data_correct else "–î–∞–Ω–Ω—ã–µ –ù–ï –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö TEMP- –¥–∞–Ω–Ω—ã—Ö
                self.log_test(
                    "–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP- –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    not temp_data_found,
                    f"–§–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP- –¥–∞–Ω–Ω—ã–µ {'–ù–ï –Ω–∞–π–¥–µ–Ω—ã' if not temp_data_found else '–ù–ê–ô–î–ï–ù–´'} –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞",
                    "–§–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP- –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                    "TEMP- –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" if not temp_data_found else "TEMP- –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫–µ
                if cargo_found:
                    details_complete = (
                        cargo_details.get("cargo_number") and
                        cargo_details.get("individual_number") and
                        cargo_details.get("recipient_name") and
                        cargo_details.get("placed_by")
                    )
                    
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫–µ (cargo_number, individual_number, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)",
                        details_complete,
                        f"–î–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞ {'–ø–æ–ª–Ω—ã–µ' if details_complete else '–ù–ï –ø–æ–ª–Ω—ã–µ'}\n" +
                        f"   üìã Cargo Number: {cargo_details.get('cargo_number', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n" +
                        f"   üì¶ Individual Number: {cargo_details.get('individual_number', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n" +
                        f"   üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {cargo_details.get('recipient_name', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n" +
                        f"   üë∑ –û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {cargo_details.get('placed_by', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}",
                        "–í—Å–µ –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã",
                        "–î–µ—Ç–∞–ª–∏ –ø–æ–ª–Ω—ã–µ" if details_complete else "–î–µ—Ç–∞–ª–∏ –ù–ï –ø–æ–ª–Ω—ã–µ"
                    )
                
                return cells_cargo_check and cargo_found and not temp_data_found
                
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞: HTTP {response.status_code}",
                    "HTTP 200",
                    f"HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ placement_records"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò PLACEMENT_RECORDS")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if not self.run_placement_records_reconstruction():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return False
        
        # –®–∞–≥ 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            return False
        
        # –®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id
        if not self.get_warehouse_id_moscow_1():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'")
            return False
        
        # –®–∞–≥ 6-8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞
        schema_result = self.check_warehouse_schema()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò PLACEMENT_RECORDS:")
        print("=" * 80)
        
        successful_tests = sum(1 for result in self.test_results if result["success"])
        total_tests = len(self.test_results)
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà SUCCESS RATE: {success_rate:.1f}% ({successful_tests}/{total_tests} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
        
        if schema_result:
            print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò PLACEMENT_RECORDS –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("üéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
            print("   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç placement_record –¥–ª—è –≥—Ä—É–∑–∞ 25082235/02/02")
            print("   ‚úÖ –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–Ω—è—Ç—É—é —è—á–µ–π–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9")
            print("   ‚úÖ –ì—Ä—É–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö TEMP- –Ω–æ–º–µ—Ä–æ–≤")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò PLACEMENT_RECORDS –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ placement_records –¥–ª—è –≥—Ä—É–∑–∞ 25082235/02/02")
            print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö TEMP- –¥–∞–Ω–Ω—ã—Ö")
        
        return schema_result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacementRecordsReconstructionTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ú–∏–≥—Ä–∞—Ü–∏—è placement_records –∏ —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–ì—Ä—É–∑ 25082235/02/02 –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9 —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        return 0
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞")
        return 1

if __name__ == "__main__":
    exit(main())