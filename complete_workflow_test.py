#!/usr/bin/env python3
"""
COMPLETE WORKFLOW TEST: Test the full recipient information workflow
"""

import requests
import json

BACKEND_URL = "https://cargo-system.preview.emergentagent.com/api"

WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

COURIER = {
    "phone": "+79991234567", 
    "password": "courier123"
}

def authenticate_user(phone, password, role_name):
    print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {role_name} ({phone})...")
    response = requests.post(f"{BACKEND_URL}/auth/login", json={
        "phone": phone,
        "password": password
    })
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        user_info = data.get("user")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')}")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return None

def create_pickup_request_with_recipient(operator_token):
    print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è...")
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    request_data = {
        "sender_full_name": "Workflow Test –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
        "sender_phone": "+79991112233",
        "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. Workflow Test, 123",
        "pickup_date": "2025-01-20",
        "pickup_time_from": "10:00",
        "pickup_time_to": "18:00",
        "route": "moscow_to_tajikistan",
        "courier_fee": 500.0,
        "destination": "Workflow Test –≥—Ä—É–∑",
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
        "recipient_full_name": "Workflow Test –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
        "recipient_phone": "+992900123456",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. Workflow Test, 456"
    }
    
    response = requests.post(f"{BACKEND_URL}/admin/courier/pickup-request", 
                           json=request_data, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        request_id = data.get("request_id")
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {request_id}")
        print(f"üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        print(f"   - –§–ò–û: {request_data['recipient_full_name']}")
        print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {request_data['recipient_phone']}")
        print(f"   - –ê–¥—Ä–µ—Å: {request_data['recipient_address']}")
        return request_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
        return None

def complete_courier_workflow(courier_token, request_id):
    print(f"\nüöö –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}...")
    headers = {"Authorization": f"Bearer {courier_token}"}
    
    # Accept
    response = requests.post(f"{BACKEND_URL}/courier/requests/{request_id}/accept", headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {response.status_code}")
        return False
    print("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–º")
    
    # Pickup
    response = requests.post(f"{BACKEND_URL}/courier/requests/{request_id}/pickup", headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞: {response.status_code}")
        return False
    print("‚úÖ –ì—Ä—É–∑ –∑–∞–±—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–æ–º")
    
    # Deliver to warehouse
    response = requests.post(f"{BACKEND_URL}/courier/requests/{request_id}/deliver-to-warehouse", headers=headers)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥: {response.status_code}")
        return False
    print("‚úÖ –ì—Ä—É–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥")
    
    return True

def find_notification_for_request(operator_token, request_id):
    print(f"\nüì¨ –ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id}...")
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{BACKEND_URL}/operator/warehouse-notifications", headers=headers)
    if response.status_code == 200:
        data = response.json()
        notifications = data.get("notifications", [])
        
        for notification in notifications:
            if notification.get("request_number") == request_id:
                notification_id = notification.get("id")
                status = notification.get("status")
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {notification_id} (—Å—Ç–∞—Ç—É—Å: {status})")
                return notification_id, status
        
        print(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None, None
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code}")
        return None, None

def accept_warehouse_notification(operator_token, notification_id):
    print(f"\nüìã –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id} –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–∫–ª–∞–¥–∞...")
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.post(f"{BACKEND_URL}/operator/warehouse-notifications/{notification_id}/accept", 
                           headers=headers)
    
    if response.status_code == 200:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–∫–ª–∞–¥–∞")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
        return False

def send_to_placement(operator_token, notification_id):
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ...")
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.post(f"{BACKEND_URL}/operator/warehouse-notifications/{notification_id}/send-to-placement", 
                           headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        cargo_number = data.get("cargo_number")
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ! –ì—Ä—É–∑: {cargo_number}")
        return cargo_number
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {response.status_code} - {response.text}")
        return None

def verify_recipient_data_in_placement(operator_token, cargo_number):
    print(f"\nüè≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        
        for item in items:
            if item.get("cargo_number") == cargo_number:
                print(f"‚úÖ –ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
                
                recipient_name = item.get("recipient_full_name", "")
                recipient_phone = item.get("recipient_phone", "")
                recipient_address = item.get("recipient_address", "")
                
                print(f"üìã –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –í –ì–†–£–ó–ï:")
                print(f"   - recipient_full_name: '{recipient_name}'")
                print(f"   - recipient_phone: '{recipient_phone}'")
                print(f"   - recipient_address: '{recipient_address}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–º –¥–∞–Ω–Ω—ã–º
                expected_name = "Workflow Test –ü–æ–ª—É—á–∞—Ç–µ–ª—å"
                expected_phone = "+992900123456"
                expected_address = "–î—É—à–∞–Ω–±–µ, —É–ª. Workflow Test, 456"
                
                if (recipient_name == expected_name and 
                    recipient_phone == expected_phone and 
                    recipient_address == expected_address):
                    print(f"üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
                    return True
                else:
                    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ–≤–µ—Ä–Ω—ã–µ!")
                    print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_name} / {expected_phone} / {expected_address}")
                    print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {recipient_name} / {recipient_phone} / {recipient_address}")
                    return False
        
        print(f"‚ùå –ì—Ä—É–∑ {cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {response.status_code}")
        return False

def main():
    print("üéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢ WORKFLOW –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–£–ß–ê–¢–ï–õ–ï")
    print("=" * 80)
    
    test_results = []
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    operator_token = authenticate_user(WAREHOUSE_OPERATOR["phone"], WAREHOUSE_OPERATOR["password"], "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
    courier_token = authenticate_user(COURIER["phone"], COURIER["password"], "–ö—É—Ä—å–µ—Ä")
    
    if not operator_token or not courier_token:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    test_results.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    request_id = create_pickup_request_with_recipient(operator_token)
    if not request_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
        return
    test_results.append("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    
    # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow –∫—É—Ä—å–µ—Ä–∞
    if not complete_courier_workflow(courier_token, request_id):
        print("‚ùå –û—à–∏–±–∫–∞ –≤ workflow –∫—É—Ä—å–µ—Ä–∞")
        return
    test_results.append("‚úÖ Workflow –∫—É—Ä—å–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    # 4. –ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_id, status = find_notification_for_request(operator_token, request_id)
    if not notification_id:
        print("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    test_results.append("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 5. –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –®–ê–ì!)
    if not accept_warehouse_notification(operator_token, notification_id):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    test_results.append("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
    
    # 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    cargo_number = send_to_placement(operator_token, notification_id)
    if not cargo_number:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
        return
    test_results.append("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
    
    # 7. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
    if verify_recipient_data_in_placement(operator_token, cargo_number):
        test_results.append("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
    else:
        test_results.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    
    success_count = len([r for r in test_results if r.startswith("‚úÖ")])
    total_count = len(test_results)
    success_rate = (success_count / total_count) * 100
    
    for result in test_results:
        print(result)
    
    print(f"\nüìà SUCCESS RATE: {success_rate:.1f}% ({success_count}/{total_count})")
    
    if success_rate == 100:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
        print("   - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
        print("   - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å) —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("   - Backend chain —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí send_pickup_request_to_placement ‚Üí available-for-placement")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {total_count - success_count} –∏–∑ {total_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    main()