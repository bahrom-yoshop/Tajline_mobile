#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
==============================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑ operator_cargo —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º USR648425

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)  
2. API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ placement_records
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ operator_cargo (–Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425 (–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:
   - 25082298: –æ–∂–∏–¥–∞–µ—Ç—Å—è 7 –µ–¥–∏–Ω–∏—Ü —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–†–∞–∑–º–µ—â–µ–Ω–æ"
   - 250101: –æ–∂–∏–¥–∞–µ—Ç—Å—è 2 –µ–¥–∏–Ω–∏—Ü—ã  
   - 25082235: –æ–∂–∏–¥–∞–µ—Ç—Å—è 4 –µ–¥–∏–Ω–∏—Ü—ã
   - –í—Å–µ–≥–æ: 13 –µ–¥–∏–Ω–∏—Ü —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º USR648425
4. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ cargo_info: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü–µ

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- –ú–∏–Ω–∏–º—É–º 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ
- –î–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
- –ü–æ–ª–µ cargo_info —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
- API –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE_ID = "001"
TARGET_OPERATOR_ID = "USR648425"
TARGET_OPERATOR_NAME = "–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á"

# –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
EXPECTED_APPLICATIONS = {
    "25082298": {"expected_units": 7, "status": "–†–∞–∑–º–µ—â–µ–Ω–æ"},
    "250101": {"expected_units": 2, "status": "–†–∞–∑–º–µ—â–µ–Ω–æ"}, 
    "25082235": {"expected_units": 4, "status": "–†–∞–∑–º–µ—â–µ–Ω–æ"}
}
TOTAL_EXPECTED_UNITS = 13

class LayoutWithCargoTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "api_accessible": False,
            "cargo_info_present": False,
            "operator_data_found": False,
            "expected_applications_found": {},
            "total_units_found": 0,
            "data_quality_check": False,
            "detailed_analysis": {}
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001"""
        self.log(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_ID}...")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{TARGET_WAREHOUSE_ID}/layout-with-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
                self.test_results["api_accessible"] = True
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {e}", "ERROR")
            return None
    
    def analyze_cargo_info(self, layout_data):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—è cargo_info"""
        self.log("\nüîç –ê–ù–ê–õ–ò–ó –ü–û–õ–Ø cargo_info:")
        self.log("=" * 60)
        
        cargo_info = layout_data.get("cargo_info", [])
        
        if not cargo_info:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ!", "ERROR")
            return False
        
        self.log(f"‚úÖ –ü–æ–ª–µ cargo_info –Ω–∞–π–¥–µ–Ω–æ —Å {len(cargo_info)} –µ–¥–∏–Ω–∏—Ü–∞–º–∏")
        self.test_results["cargo_info_present"] = True
        self.test_results["total_units_found"] = len(cargo_info)
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        placement_records_count = 0
        operator_cargo_count = 0
        operator_usr648425_count = 0
        applications_found = {}
        
        for i, cargo_unit in enumerate(cargo_info):
            cargo_number = cargo_unit.get("cargo_number", "N/A")
            individual_number = cargo_unit.get("individual_number", "N/A")
            placed_by = cargo_unit.get("placed_by", "N/A")
            placed_by_id = cargo_unit.get("placed_by_id", "N/A")
            source = cargo_unit.get("source", "unknown")
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            if source == "placement_records":
                placement_records_count += 1
            elif source == "operator_cargo":
                operator_cargo_count += 1
            
            # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
            if placed_by_id == TARGET_OPERATOR_ID or TARGET_OPERATOR_NAME in str(placed_by):
                operator_usr648425_count += 1
                self.log(f"  üéØ –ù–∞–π–¥–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID}: {individual_number}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
            if cargo_number not in applications_found:
                applications_found[cargo_number] = []
            applications_found[cargo_number].append({
                "individual_number": individual_number,
                "placed_by": placed_by,
                "placed_by_id": placed_by_id,
                "source": source
            })
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.log(f"\nüìä –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•:")
        self.log(f"  üìã –ò–∑ placement_records: {placement_records_count} –µ–¥–∏–Ω–∏—Ü")
        self.log(f"  üè¢ –ò–∑ operator_cargo: {operator_cargo_count} –µ–¥–∏–Ω–∏—Ü")
        self.log(f"  üéØ –û—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID}: {operator_usr648425_count} –µ–¥–∏–Ω–∏—Ü")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if operator_usr648425_count > 0:
            self.log(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID} –Ω–∞–π–¥–µ–Ω—ã!")
            self.test_results["operator_data_found"] = True
        else:
            self.log(f"‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID} –ù–ï –Ω–∞–π–¥–µ–Ω—ã!", "ERROR")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        self.log(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–Ø–í–û–ö:")
        for app_number, expected in EXPECTED_APPLICATIONS.items():
            if app_number in applications_found:
                found_units = len(applications_found[app_number])
                expected_units = expected["expected_units"]
                
                self.log(f"  üì¶ –ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found_units}/{expected_units} –µ–¥–∏–Ω–∏—Ü")
                
                if found_units >= expected_units:
                    self.log(f"    ‚úÖ –û–∂–∏–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω—ã")
                    self.test_results["expected_applications_found"][app_number] = True
                else:
                    self.log(f"    ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥–∏–Ω–∏—Ü (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_units})")
                    self.test_results["expected_applications_found"][app_number] = False
                
                # –î–µ—Ç–∞–ª–∏ –µ–¥–∏–Ω–∏—Ü
                for unit in applications_found[app_number]:
                    self.log(f"      - {unit['individual_number']} (–∏—Å—Ç–æ—á–Ω–∏–∫: {unit['source']}, –æ–ø–µ—Ä–∞—Ç–æ—Ä: {unit['placed_by_id']})")
            else:
                self.log(f"  ‚ùå –ó–∞—è–≤–∫–∞ {app_number}: –ù–ï –Ω–∞–π–¥–µ–Ω–∞!", "ERROR")
                self.test_results["expected_applications_found"][app_number] = False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.test_results["detailed_analysis"] = {
            "placement_records_count": placement_records_count,
            "operator_cargo_count": operator_cargo_count,
            "operator_usr648425_count": operator_usr648425_count,
            "applications_found": applications_found,
            "total_applications": len(applications_found)
        }
        
        return True
    
    def check_data_quality(self, layout_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ cargo_info"""
        self.log("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:")
        self.log("=" * 50)
        
        cargo_info = layout_data.get("cargo_info", [])
        
        if not cargo_info:
            self.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞", "ERROR")
            return False
        
        required_fields = [
            "cargo_number", "individual_number", "cargo_name", 
            "sender_name", "recipient_name", "placed_by", "placed_at"
        ]
        
        complete_records = 0
        incomplete_records = 0
        
        for i, cargo_unit in enumerate(cargo_info):
            missing_fields = []
            for field in required_fields:
                if not cargo_unit.get(field):
                    missing_fields.append(field)
            
            if not missing_fields:
                complete_records += 1
            else:
                incomplete_records += 1
                if incomplete_records <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –Ω–µ–ø–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    self.log(f"  ‚ö†Ô∏è –ó–∞–ø–∏—Å—å #{i+1} –Ω–µ–ø–æ–ª–Ω–∞—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {missing_fields}")
        
        self.log(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
        self.log(f"  ‚úÖ –ü–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {complete_records}")
        self.log(f"  ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {incomplete_records}")
        
        quality_percentage = (complete_records / len(cargo_info)) * 100 if cargo_info else 0
        self.log(f"  üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {quality_percentage:.1f}%")
        
        # –°—á–∏—Ç–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–∏–º –µ—Å–ª–∏ >= 80% –∑–∞–ø–∏—Å–µ–π –ø–æ–ª–Ω—ã–µ
        quality_good = quality_percentage >= 80.0
        self.test_results["data_quality_check"] = quality_good
        
        if quality_good:
            self.log(f"  ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        else:
            self.log(f"  ‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è")
        
        return quality_good
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üè¢ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥: {TARGET_WAREHOUSE_ID}")
        self.log(f"üë§ –¶–µ–ª–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {TARGET_OPERATOR_ID} ({TARGET_OPERATOR_NAME})")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API: {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.test_results['api_accessible'] else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        self.log(f"  3. ‚úÖ –ü–æ–ª–µ cargo_info: {'‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if self.test_results['cargo_info_present'] else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
        self.log(f"  4. üéØ –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID}: {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['operator_data_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        self.log(f"  5. üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –•–û–†–û–®–ï–ï' if self.test_results['data_quality_check'] else '‚ùå –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        self.log(f"  üì¶ –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {self.test_results['total_units_found']}")
        self.log(f"  üéØ –û–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º: {TOTAL_EXPECTED_UNITS} –µ–¥–∏–Ω–∏—Ü")
        
        if "detailed_analysis" in self.test_results:
            details = self.test_results["detailed_analysis"]
            self.log(f"  üìã –ò–∑ placement_records: {details['placement_records_count']}")
            self.log(f"  üè¢ –ò–∑ operator_cargo: {details['operator_cargo_count']}")
            self.log(f"  üë§ –û—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID}: {details['operator_usr648425_count']}")
            self.log(f"  üìë –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {details['total_applications']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–Ø–í–û–ö:")
        all_applications_found = True
        for app_number, expected in EXPECTED_APPLICATIONS.items():
            found = self.test_results["expected_applications_found"].get(app_number, False)
            status = "‚úÖ –ù–ê–ô–î–ï–ù–ê" if found else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê"
            self.log(f"  üì¶ {app_number} ({expected['expected_units']} –µ–¥–∏–Ω–∏—Ü): {status}")
            if not found:
                all_applications_found = False
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
        success_criteria = [
            self.test_results["auth_success"],
            self.test_results["api_accessible"], 
            self.test_results["cargo_info_present"],
            self.test_results["operator_data_found"],
            self.test_results["total_units_found"] >= TOTAL_EXPECTED_UNITS,
            all_applications_found
        ]
        
        success_count = sum(success_criteria)
        total_criteria = len(success_criteria)
        success_rate = (success_count / total_criteria) * 100
        
        self.log(f"üìä SUCCESS RATE: {success_rate:.1f}% ({success_count}/{total_criteria} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã)")
        
        if success_rate >= 90:
            self.log("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID}")
            self.log("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—è–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
            return True
        else:
            self.log("‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            if not self.test_results["operator_data_found"]:
                self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID} –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
            if self.test_results["total_units_found"] < TOTAL_EXPECTED_UNITS:
                self.log(f"‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ï–î–ò–ù–ò–¶: –Ω–∞–π–¥–µ–Ω–æ {self.test_results['total_units_found']}, –æ–∂–∏–¥–∞–ª–æ—Å—å {TOTAL_EXPECTED_UNITS}")
            if not all_applications_found:
                self.log("‚ùå –ù–ï –í–°–ï –û–ñ–ò–î–ê–ï–ú–´–ï –ó–ê–Ø–í–ö–ò –ù–ê–ô–î–ï–ù–´")
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API layout-with-cargo"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API layout-with-cargo")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        layout_data = self.test_layout_with_cargo_api()
        if not layout_data:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # 3. –ê–Ω–∞–ª–∏–∑ cargo_info
        if not self.analyze_cargo_info(layout_data):
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ü—Ä–æ–±–ª–µ–º—ã —Å cargo_info", "ERROR")
            return False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        self.check_data_quality(layout_data)
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        return self.generate_final_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LayoutWithCargoTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ API –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR_ID} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print("‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –µ–¥–∏–Ω–∏—Ü")
            print("üìä API –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ù–ï —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
            print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ operator_cargo —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {TARGET_OPERATOR_ID}")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API layout-with-cargo –° –î–í–£–ú–Ø –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò –î–ê–ù–ù–´–•
====================================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π 
(placement_records + operator_cargo)

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API layout-with-cargo:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –≤ placement_records (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –≤ operator_cargo —Å is_placed=true (–Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)  
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425 (–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫:
   - 25082298: –¥–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ 7 –µ–¥–∏–Ω–∏—Ü (–∏–∑ operator_cargo)
   - 250101: –¥–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ 2 –µ–¥–∏–Ω–∏—Ü—ã
   - 25082235: –¥–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ 4 –µ–¥–∏–Ω–∏—Ü—ã
4. –ö–∞—á–µ—Å—Ç–≤–æ cargo_info: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ cargo_info

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo —Å —Ñ–ª–∞–≥–æ–º is_placed=true
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö placement_records –∏–∑ –¥–∞–Ω–Ω—ã—Ö operator_cargo
- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–µ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ warehouse_id –¥–ª—è –æ–±–µ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤—Å–µ 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö –≤ cargo_info
"""

import requests
import json
import sys
import os
from datetime import datetime
from pymongo import MongoClient

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'cargo_transport')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
EXPECTED_TOTAL_UNITS = 13
TARGET_OPERATOR = "USR648425"  # –Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫
WAREHOUSE_001_ID = "d0a8362d-b4d3-4947-b335-28c94658a021"  # –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1

# –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—è–≤–∫–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
EXPECTED_APPLICATIONS = {
    "25082298": 7,  # –∏–∑ operator_cargo
    "250101": 2,    # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    "25082235": 4   # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
}

class LayoutWithCargoFinalTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.mongo_client = None
        self.db = None
        self.test_results = {
            "auth_success": False,
            "api_accessible": False,
            "cargo_info_present": False,
            "total_units_correct": False,
            "operator_data_found": False,
            "applications_check": {},
            "detailed_analysis": {}
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def connect_to_database(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}", "ERROR")
            return False
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def diagnose_database_state(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.log("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        self.log("=" * 60)
        
        if self.db is None:
            self.log("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "ERROR")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records
            placement_count = self.db.placement_records.count_documents({
                "warehouse_id": WAREHOUSE_001_ID
            })
            self.log(f"üìã placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 001: {placement_count}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ operator_cargo —Å is_placed=true
            operator_cargo_placed = self.db.operator_cargo.count_documents({
                "warehouse_id": WAREHOUSE_001_ID,
                "individual_items.is_placed": True
            })
            self.log(f"üì¶ operator_cargo —Å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏: {operator_cargo_placed}")
            
            # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
            operator_data = self.db.operator_cargo.find({
                "created_by": TARGET_OPERATOR,
                "individual_items.is_placed": True
            })
            operator_count = len(list(operator_data))
            self.log(f"üë§ –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}: {operator_count} –∑–∞—è–≤–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            for app_number, expected_count in EXPECTED_APPLICATIONS.items():
                # –í placement_records
                placement_app = self.db.placement_records.count_documents({
                    "cargo_number": app_number,
                    "warehouse_id": WAREHOUSE_001_ID
                })
                
                # –í operator_cargo
                operator_app = self.db.operator_cargo.find_one({
                    "cargo_number": app_number
                })
                operator_placed = 0
                if operator_app and "individual_items" in operator_app:
                    operator_placed = len([item for item in operator_app["individual_items"] 
                                         if item.get("is_placed", False)])
                
                total_found = placement_app + operator_placed
                self.log(f"üìä –ó–∞—è–≤–∫–∞ {app_number}: placement_records={placement_app}, operator_cargo={operator_placed}, –≤—Å–µ–≥–æ={total_found}, –æ–∂–∏–¥–∞–µ—Ç—Å—è={expected_count}")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ë–î: {e}", "ERROR")
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API layout-with-cargo"""
        self.log("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API layout-with-cargo:")
        self.log("=" * 60)
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ API —Å warehouse_id –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
            response = self.session.get(f"{API_BASE}/warehouses/{WAREHOUSE_001_ID}/layout-with-cargo")
            
            if response.status_code != 200:
                self.log(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code} - {response.text}", "ERROR")
                return False
            
            data = response.json()
            self.log("‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
            self.test_results["api_accessible"] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è cargo_info
            cargo_info = data.get("cargo_info", [])
            if not cargo_info:
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π!", "ERROR")
                return False
            
            self.log(f"‚úÖ cargo_info –Ω–∞–π–¥–µ–Ω —Å {len(cargo_info)} –µ–¥–∏–Ω–∏—Ü–∞–º–∏")
            self.test_results["cargo_info_present"] = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü
            total_found = len(cargo_info)
            self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {total_found}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: {EXPECTED_TOTAL_UNITS}")
            
            if total_found == EXPECTED_TOTAL_UNITS:
                self.log("‚úÖ –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ï–î–ò–ù–ò–¶ –ö–û–†–†–ï–ö–¢–ù–û!")
                self.test_results["total_units_correct"] = True
            else:
                self.log(f"‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: –Ω–∞–π–¥–µ–Ω–æ {total_found}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {EXPECTED_TOTAL_UNITS}")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.analyze_cargo_info(cargo_info)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
            self.check_operator_data(cargo_info)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            self.check_specific_applications(cargo_info)
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}", "ERROR")
            return False
    
    def analyze_cargo_info(self, cargo_info):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ cargo_info"""
        self.log("\nüìã –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê cargo_info:")
        self.log("-" * 40)
        
        applications_found = {}
        operators_found = set()
        locations_found = set()
        
        for i, item in enumerate(cargo_info):
            cargo_number = item.get("cargo_number", "N/A")
            individual_number = item.get("individual_number", "N/A")
            location = item.get("location", "N/A")
            cargo_name = item.get("cargo_name", "N/A")
            placed_by = item.get("placed_by", "N/A")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
            if cargo_number not in applications_found:
                applications_found[cargo_number] = 0
            applications_found[cargo_number] += 1
            
            # –°–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            if placed_by != "N/A":
                operators_found.add(placed_by)
            
            # –°–±–æ—Ä –ª–æ–∫–∞—Ü–∏–π
            if location != "N/A":
                locations_found.add(location)
            
            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                self.log(f"  {i+1}. {individual_number} ({cargo_name}) - {location}")
        
        self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(applications_found)}")
        self.log(f"üë• –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(operators_found)}")
        self.log(f"üìç –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π: {len(locations_found)}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—è–≤–∫–∞–º
        self.log("\nüìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ó–ê–Ø–í–ö–ê–ú:")
        for app_number, count in applications_found.items():
            expected = EXPECTED_APPLICATIONS.get(app_number, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            status = "‚úÖ" if (expected != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and count == expected) else "‚ö†Ô∏è"
            self.log(f"  {status} {app_number}: {count} –µ–¥–∏–Ω–∏—Ü (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected})")
        
        self.test_results["detailed_analysis"] = {
            "applications_found": applications_found,
            "operators_found": list(operators_found),
            "locations_found": list(locations_found),
            "total_items": len(cargo_info)
        }
    
    def check_operator_data(self, cargo_info):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425"""
        self.log(f"\nüë§ –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –û–ü–ï–†–ê–¢–û–†–ê {TARGET_OPERATOR}:")
        self.log("-" * 40)
        
        operator_items = []
        for item in cargo_info:
            placed_by = item.get("placed_by", "")
            created_by = item.get("created_by", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ placed_by –∏ created_by
            if TARGET_OPERATOR in placed_by or TARGET_OPERATOR in created_by:
                operator_items.append(item)
        
        if operator_items:
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(operator_items)} –µ–¥–∏–Ω–∏—Ü –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}")
            self.test_results["operator_data_found"] = True
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            for i, item in enumerate(operator_items[:3]):
                cargo_number = item.get("cargo_number", "N/A")
                individual_number = item.get("individual_number", "N/A")
                cargo_name = item.get("cargo_name", "N/A")
                self.log(f"  {i+1}. {individual_number} ({cargo_name}) –∏–∑ –∑–∞—è–≤–∫–∏ {cargo_number}")
        else:
            self.log(f"‚ùå –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR} –ù–ï –Ω–∞–π–¥–µ–Ω—ã")
            self.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ cargo_info:")
            all_operators = set()
            for item in cargo_info:
                placed_by = item.get("placed_by", "")
                created_by = item.get("created_by", "")
                if placed_by:
                    all_operators.add(placed_by)
                if created_by:
                    all_operators.add(created_by)
            
            for op in list(all_operators)[:5]:
                self.log(f"  - {op}")
    
    def check_specific_applications(self, cargo_info):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        self.log("\nüìä –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–Ø–í–û–ö:")
        self.log("-" * 40)
        
        for app_number, expected_count in EXPECTED_APPLICATIONS.items():
            found_items = [item for item in cargo_info 
                          if item.get("cargo_number") == app_number]
            found_count = len(found_items)
            
            if found_count == expected_count:
                self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found_count} –µ–¥–∏–Ω–∏—Ü (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_count})")
                self.test_results["applications_check"][app_number] = True
            else:
                self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found_count} –µ–¥–∏–Ω–∏—Ü, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_count}")
                self.test_results["applications_check"][app_number] = False
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞–π–¥–µ–Ω–æ
                if found_items:
                    self.log(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã:")
                    for item in found_items:
                        individual_number = item.get("individual_number", "N/A")
                        location = item.get("location", "N/A")
                        self.log(f"     - {individual_number} –≤ {location}")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –° –î–í–£–ú–Ø –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üè¢ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥: 001 (–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1)")
        self.log(f"üë§ –¶–µ–ª–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {TARGET_OPERATOR}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API layout-with-cargo: {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.test_results['api_accessible'] else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        self.log(f"  3. ‚úÖ –ù–∞–ª–∏—á–∏–µ cargo_info: {'‚úÖ –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢' if self.test_results['cargo_info_present'] else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
        self.log(f"  4. üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {'‚úÖ –ö–û–†–†–ï–ö–¢–ù–û' if self.test_results['total_units_correct'] else '‚ùå –ù–ï–í–ï–†–ù–û'}")
        self.log(f"  5. üë§ –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}: {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['operator_data_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        self.log(f"\nüìä –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–Ø–í–û–ö:")
        all_apps_correct = True
        for app_number, expected_count in EXPECTED_APPLICATIONS.items():
            status = self.test_results["applications_check"].get(app_number, False)
            status_icon = "‚úÖ" if status else "‚ùå"
            self.log(f"  {status_icon} –ó–∞—è–≤–∫–∞ {app_number}: {expected_count} –µ–¥–∏–Ω–∏—Ü")
            if not status:
                all_apps_correct = False
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if self.test_results["detailed_analysis"]:
            details = self.test_results["detailed_analysis"]
            self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
            self.log(f"  –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü –≤ cargo_info: {details['total_items']}")
            self.log(f"  –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(details['applications_found'])}")
            self.log(f"  –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(details['operators_found'])}")
            self.log(f"  –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π: {len(details['locations_found'])}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        
        success_criteria = [
            self.test_results["auth_success"],
            self.test_results["api_accessible"],
            self.test_results["cargo_info_present"],
            self.test_results["total_units_correct"],
            all_apps_correct
        ]
        
        overall_success = all(success_criteria)
        
        if overall_success:
            self.log("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ API layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
            self.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (placement_records + operator_cargo) –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("‚úÖ cargo_info —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã")
            self.log("‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ")
        else:
            self.log("‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            failed_criteria = []
            if not self.test_results["auth_success"]:
                failed_criteria.append("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            if not self.test_results["api_accessible"]:
                failed_criteria.append("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API")
            if not self.test_results["cargo_info_present"]:
                failed_criteria.append("–ù–∞–ª–∏—á–∏–µ cargo_info")
            if not self.test_results["total_units_correct"]:
                failed_criteria.append("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü")
            if not all_apps_correct:
                failed_criteria.append("–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏")
            
            self.log(f"üîç –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(failed_criteria)}")
        
        return overall_success
    
    def run_final_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API layout-with-cargo")
        self.log("=" * 80)
        
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.connect_to_database()
        
        # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
        self.diagnose_database_state()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        if not self.test_layout_with_cargo_api():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω", "ERROR")
            return False
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        if self.mongo_client:
            self.mongo_client.close()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LayoutWithCargoFinalTester()
    
    try:
        success = tester.run_final_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ API –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–≤—É–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ cargo_info —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()