#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û API: –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢:
–û–±–Ω–æ–≤–ª–µ–Ω API endpoint GET /api/operator/cargo/available-for-placement —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤:
1. –ì–æ—Ä–æ–¥ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–∞ (delivery_city)
2. –°–∫–ª–∞–¥-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Üí —Å–∫–ª–∞–¥-–ø–æ–ª—É—á–∞—Ç–µ–ª—å (source_warehouse_name, target_warehouse_name)  
3. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ (created_date, accepted_date)
4. –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–∞ (delivery_method)
5. –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (cargo_items) 
6. –°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞ (placement_status, placed_count)
7. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (total_quantity, total_placed, placement_progress)

–ù–û–í–´–ï ENDPOINTS:
- GET /api/operator/cargo/{cargo_id}/placement-status - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- POST /api/operator/cargo/{cargo_id}/update-placement-status - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. GET /api/operator/cargo/available-for-placement - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö endpoints  
4. GET /api/operator/cargo/{cargo_id}/placement-status - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint
5. POST /api/operator/cargo/{cargo_id}/update-placement-status - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏, —Å–∫–ª–∞–¥–∞—Ö –∏ —Å—Ç–∞—Ç—É—Å–∞—Ö.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

def test_new_placement_fields():
    """
    üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ü–û–õ–ï–ô –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö –ì–†–£–ó–û–í –†–ê–ó–ú–ï–©–ï–ù–ò–Ø
    
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
    1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    2. GET /api/operator/cargo/available-for-placement —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    4. GET /api/operator/cargo/{cargo_id}/placement-status
    5. POST /api/operator/cargo/{cargo_id}/update-placement-status
    """
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û API: –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ TAJLINE.TJ")
    print("=" * 100)
    
    # Step 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        login_response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            login_result = login_response.json()
            token = login_result.get("access_token")
            user_info = login_result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'Unknown')}, —Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {login_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Step 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/operator/cargo/available-for-placement —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    print("\n2Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - GET /api/operator/cargo/available-for-placement")
    
    try:
        placement_response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
        print(f"   üì° GET /api/operator/cargo/available-for-placement - Status: {placement_response.status_code}")
        
        if placement_response.status_code == 200:
            placement_result = placement_response.json()
            cargo_list = placement_result if isinstance(placement_result, list) else placement_result.get('items', [])
            
            print(f"   ‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print(f"   üì¶ –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(cargo_list)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ –∫–∞–∂–¥–æ–º –≥—Ä—É–∑–µ
            if cargo_list:
                print(f"\n   üîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ü–û–õ–ï–ô –í –ö–ê–†–¢–û–ß–ö–ê–• –ì–†–£–ó–û–í:")
                
                # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ review request
                expected_new_fields = [
                    "delivery_city",           # –ì–æ—Ä–æ–¥ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–∞
                    "source_warehouse_name",   # –°–∫–ª–∞–¥-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
                    "target_warehouse_name",   # –°–∫–ª–∞–¥-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
                    "created_date",           # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                    "accepted_date",          # –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞
                    "delivery_method",        # –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–∞
                    "cargo_items",            # –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø–æ —Ç–∏–ø–∞–º
                    "placement_status",       # –°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    "placed_count",           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
                    "total_quantity",         # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    "total_placed",           # –í—Å–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ
                    "placement_progress"      # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                ]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü
                sample_cargo = cargo_list[0]
                print(f"   üìã –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑—Ü–∞ –≥—Ä—É–∑–∞ (ID: {sample_cargo.get('id', 'Unknown')}, –ù–æ–º–µ—Ä: {sample_cargo.get('cargo_number', 'Unknown')}):")
                
                present_fields = []
                missing_fields = []
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
                print(f"   üìä –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø –í –û–¢–í–ï–¢–ï:")
                all_fields = list(sample_cargo.keys())
                for field in sorted(all_fields):
                    value = sample_cargo.get(field)
                    if isinstance(value, (dict, list)):
                        print(f"      üîπ {field}: {type(value).__name__} ({len(value) if hasattr(value, '__len__') else 'N/A'})")
                    else:
                        print(f"      üîπ {field}: {value}")
                
                print(f"\n   üéØ –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–ï–ú–´–• –ù–û–í–´–• –ü–û–õ–ï–ô:")
                for field in expected_new_fields:
                    if field in sample_cargo:
                        present_fields.append(field)
                        value = sample_cargo.get(field)
                        print(f"      ‚úÖ {field}: {value}")
                    else:
                        missing_fields.append(field)
                        print(f"      ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cargo_items –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                if "cargo_items" in sample_cargo:
                    cargo_items = sample_cargo["cargo_items"]
                    if isinstance(cargo_items, list) and cargo_items:
                        print(f"      üì¶ cargo_items —Å–æ–¥–µ—Ä–∂–∏—Ç {len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                        for i, item in enumerate(cargo_items[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                            print(f"         –ì—Ä—É–∑ #{i}: {item.get('cargo_name', 'Unknown')} (–∫–æ–ª-–≤–æ: {item.get('quantity', 'Unknown')})")
                    elif cargo_items:
                        print(f"      üì¶ cargo_items: {cargo_items}")
                    else:
                        print(f"      üì¶ cargo_items: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º
                print(f"\n   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–û–í–´–• –ü–û–õ–ï–ô:")
                print(f"      ‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(present_fields)}/{len(expected_new_fields)} ({len(present_fields)/len(expected_new_fields)*100:.1f}%)")
                print(f"      ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(missing_fields)} –ø–æ–ª–µ–π")
                
                if missing_fields:
                    print(f"      üîç –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                cargo_id = sample_cargo.get('id', 'Unknown')
                cargo_number = sample_cargo.get('cargo_number', 'Unknown')
                
            else:
                print(f"   ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É")
                cargo_id = None
                cargo_number = None
                
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {placement_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ available-for-placement: {e}")
        return False
    
    # Step 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
    if not cargo_id or cargo_id == 'Unknown':
        print("\n3Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–´–• ENDPOINTS")
        
        cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏—è",
            "sender_phone": "+79777888999",
            "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏—è", 
            "recipient_phone": "+992900111333",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –†–∞–∑–º–µ—â–µ–Ω–∏—è, 456",
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            "route": "moscow_to_tajikistan",
            "payment_method": "cash",
            "delivery_method": "pickup",
            "cargo_items": [
                {
                    "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
                    "quantity": 2,
                    "weight": 12.0,
                    "price_per_kg": 150.0,
                    "total_amount": 3600.0
                },
                {
                    "cargo_name": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", 
                    "quantity": 1,
                    "weight": 5.0,
                    "price_per_kg": 200.0,
                    "total_amount": 1000.0
                }
            ]
        }
        
        print(f"   üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å {len(cargo_data['cargo_items'])} —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞:")
        total_quantity = sum(item['quantity'] for item in cargo_data['cargo_items'])
        print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {total_quantity}")
        
        try:
            cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
            print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
            
            if cargo_response.status_code == 200:
                cargo_result = cargo_response.json()
                cargo_number = cargo_result.get("cargo_number", "Unknown")
                cargo_id = cargo_result.get("id", "Unknown")
                
                print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
                print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {cargo_response.status_code}")
                print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    # Step 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/operator/cargo/{cargo_id}/placement-status
    print(f"\n4Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - GET /api/operator/cargo/{cargo_id}/placement-status")
    
    try:
        placement_status_response = requests.get(f"{BACKEND_URL}/operator/cargo/{cargo_id}/placement-status", headers=headers)
        print(f"   üì° GET /api/operator/cargo/{cargo_id}/placement-status - Status: {placement_status_response.status_code}")
        
        if placement_status_response.status_code == 200:
            placement_status_result = placement_status_response.json()
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ù–æ–≤—ã–π endpoint placement-status —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            expected_status_fields = [
                "cargo_id", "cargo_number", "placement_status", "total_quantity", 
                "total_placed", "placement_progress", "cargo_items", "placement_details"
            ]
            
            print(f"   üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –°–¢–ê–¢–£–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
            for field in expected_status_fields:
                if field in placement_status_result:
                    value = placement_status_result.get(field)
                    print(f"      ‚úÖ {field}: {value}")
                else:
                    print(f"      ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
            print(f"   üìä –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ü–û–õ–Ø –í –û–¢–í–ï–¢–ï placement-status:")
            for field in sorted(placement_status_result.keys()):
                value = placement_status_result.get(field)
                if isinstance(value, (dict, list)):
                    print(f"      üîπ {field}: {type(value).__name__} ({len(value) if hasattr(value, '__len__') else 'N/A'})")
                else:
                    print(f"      üîπ {field}: {value}")
            
        elif placement_status_response.status_code == 404:
            print(f"   ‚ùå Endpoint placement-status –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        elif placement_status_response.status_code == 403:
            print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∫ placement-status –∑–∞–ø—Ä–µ—â–µ–Ω")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_status_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {placement_status_response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ placement-status: {e}")
    
    # Step 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/operator/cargo/{cargo_id}/update-placement-status
    print(f"\n5Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - POST /api/operator/cargo/{cargo_id}/update-placement-status")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    placement_update_data = {
        "placement_action": "place",  # place, remove, move
        "cargo_item_index": 0,        # –ò–Ω–¥–µ–∫—Å –≥—Ä—É–∑–∞ –≤ cargo_items
        "quantity_to_place": 1,       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        "warehouse_location": {
            "block": 1,
            "shelf": 1, 
            "cell": 10
        },
        "notes": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API"
    }
    
    try:
        placement_update_response = requests.post(
            f"{BACKEND_URL}/operator/cargo/{cargo_id}/update-placement-status", 
            json=placement_update_data, 
            headers=headers
        )
        print(f"   üì° POST /api/operator/cargo/{cargo_id}/update-placement-status - Status: {placement_update_response.status_code}")
        
        if placement_update_response.status_code == 200:
            placement_update_result = placement_update_response.json()
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - Endpoint update-placement-status —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            print(f"   üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
            if "message" in placement_update_result:
                print(f"      ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ: {placement_update_result['message']}")
            if "updated_placement" in placement_update_result:
                updated_placement = placement_update_result["updated_placement"]
                print(f"      üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {updated_placement}")
            if "new_status" in placement_update_result:
                print(f"      üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {placement_update_result['new_status']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
            print(f"   üìä –í–°–ï –ü–û–õ–Ø –í –û–¢–í–ï–¢–ï update-placement-status:")
            for field in sorted(placement_update_result.keys()):
                value = placement_update_result.get(field)
                if isinstance(value, (dict, list)):
                    print(f"      üîπ {field}: {type(value).__name__} ({len(value) if hasattr(value, '__len__') else 'N/A'})")
                else:
                    print(f"      üîπ {field}: {value}")
                
        elif placement_update_response.status_code == 404:
            print(f"   ‚ùå Endpoint update-placement-status –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        elif placement_update_response.status_code == 400:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {placement_update_response.text}")
        elif placement_update_response.status_code == 403:
            print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∫ update-placement-status –∑–∞–ø—Ä–µ—â–µ–Ω")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_update_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {placement_update_response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ update-placement-status: {e}")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    
    success = test_new_placement_fields()
    
    print("\n" + "=" * 100)
    if success:
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û API –î–õ–Ø –ö–ê–†–¢–û–ß–ï–ö –ì–†–£–ó–û–í –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ GET /api/operator/cargo/available-for-placement –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        print("‚úÖ GET /api/operator/cargo/{cargo_id}/placement-status –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ POST /api/operator/cargo/{cargo_id}/update-placement-status –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ API –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ API")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)