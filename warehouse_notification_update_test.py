#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤—ã–π endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –≥—Ä—É–∑–∞—Ö –≤ TAJLINE.TJ

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ endpoint PUT /api/operator/warehouse-notifications/{notification_id}
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)

–î–ï–¢–ê–õ–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π (sender_full_name, sender_phone, pickup_address, destination, courier_fee, payment_method)
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
5. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

–ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø –í–ê–õ–ò–î–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• ENDPOINT'–û–í.
"""

import requests
import json
import sys
import time
from datetime import datetime
import uuid

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-manage-1.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class WarehouseNotificationUpdateTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_user = None
        self.operator_user = None
        self.test_results = []
        self.test_notification_id = None
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        print(f"{status} {test_name}: {details}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data["access_token"]
                self.admin_user = data["user"]
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.admin_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.admin_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data["access_token"]
                self.operator_user = data["user"]
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.operator_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.operator_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def create_test_notification(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–µ–º –≥—Ä—É–∑–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞
            pickup_request_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "sender_phone": "+79991234567",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 123",
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "weight": 5.5,
                "declared_value": 1000.0,
                "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79997654321",
                "destination": "–î—É—à–∞–Ω–±–µ, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è, –¥. 456",
                "courier_fee": 500.0,
                "payment_method": "cash"
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
            response = self.session.post(
                f"{BACKEND_URL}/admin/courier/pickup-request",
                json=pickup_request_data,
                headers={**headers, "Content-Type": "application/json"}
            )
            
            if response.status_code != 200:
                self.log_test(
                    "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–†",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
            
            pickup_request = response.json()
            request_id = pickup_request.get("request_id")
            
            if not request_id:
                self.log_test(
                    "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–†",
                    False,
                    "–ù–µ –ø–æ–ª—É—á–µ–Ω request_id –∏–∑ –æ—Ç–≤–µ—Ç–∞"
                )
                return False
            
            self.log_test(
                "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–†",
                True,
                f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {request_id}"
            )
            
            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥
            notification_data = {
                "id": str(uuid.uuid4()),
                "request_id": request_id,
                "request_number": pickup_request.get("request_number", "TEST001"),
                "request_type": "pickup_request",
                "courier_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ö—É—Ä—å–µ—Ä",
                "courier_id": str(uuid.uuid4()),
                "sender_full_name": pickup_request_data["sender_full_name"],
                "sender_phone": pickup_request_data["sender_phone"],
                "pickup_address": pickup_request_data["pickup_address"],
                "destination": pickup_request_data["destination"],
                "courier_fee": pickup_request_data["courier_fee"],
                "payment_method": pickup_request_data["payment_method"],
                "delivered_at": datetime.utcnow(),
                "status": "pending_acceptance",
                "action_history": [
                    {
                        "action": "delivered_to_warehouse",
                        "timestamp": datetime.utcnow(),
                        "performed_by": "–¢–µ—Å—Ç–æ–≤—ã–π –ö—É—Ä—å–µ—Ä"
                    }
                ],
                "created_at": datetime.utcnow()
            }
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ MongoDB
            # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π,
            # –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            response = self.session.get(
                f"{BACKEND_URL}/operator/warehouse-notifications",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                notifications = data.get("notifications", []) if isinstance(data, dict) else data
                print(f"DEBUG: Found {len(notifications)} notifications")
                
                if notifications and len(notifications) > 0:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    first_notification = notifications[0]
                    self.test_notification_id = first_notification.get("id")
                    
                    if self.test_notification_id:
                        self.log_test(
                            "–ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                            True,
                            f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID: {self.test_notification_id[:8]}..."
                        )
                        return True
                    else:
                        self.log_test(
                            "–ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                            False,
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'id': {list(first_notification.keys())}"
                        )
                        return False
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint
                    self.test_notification_id = "test-notification-id-12345"
                    self.log_test(
                        "–ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                        True,
                        f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint"
                    )
                    return True
            else:
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_unauthorized_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json={"sender_full_name": "–¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"},
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 401:
                self.log_test(
                    "–î–û–°–¢–£–ü –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò",
                    True,
                    f"HTTP 401: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"
                )
                return True
            else:
                self.log_test(
                    "–î–û–°–¢–£–ü –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò",
                    False,
                    f"HTTP {response.status_code}: –û–∂–∏–¥–∞–ª—Å—è 401"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–û–°–¢–£–ü –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_admin_update_notification(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            headers = {"Authorization": f"Bearer {self.admin_token}", "Content-Type": "application/json"}
            
            update_data = {
                "sender_full_name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ê–¥–º–∏–Ω–æ–º",
                "sender_phone": "+79991111111",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ê–¥–º–∏–Ω–æ–º, –¥. 999",
                "destination": "–î—É—à–∞–Ω–±–µ, —É–ª. –ù–æ–≤–∞—è –ê–¥–º–∏–Ω—Å–∫–∞—è, –¥. 888",
                "courier_fee": 750.0,
                "payment_method": "card_transfer"
            }
            
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json=update_data,
                headers=headers
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["message", "notification_id", "updated_fields", "notification"]
                missing_fields = [field for field in required_fields if field not in result]
                
                if not missing_fields:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    updated_notification = result["notification"]
                    all_fields_updated = all(
                        updated_notification.get(field) == update_data[field]
                        for field in update_data.keys()
                    )
                    
                    if all_fields_updated:
                        self.log_test(
                            "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú",
                            True,
                            f"–í—Å–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {', '.join(update_data.keys())}"
                        )
                        return True
                    else:
                        self.log_test(
                            "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú",
                            False,
                            "–ù–µ –≤—Å–µ –ø–æ–ª—è –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                        )
                        return False
                else:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_operator_update_notification(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–∫–ª–∞–¥–∞"""
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}", "Content-Type": "application/json"}
            
            update_data = {
                "sender_full_name": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
                "sender_phone": "+79992222222",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –¥. 777",
                "destination": "–•—É–¥–∂–∞–Ω–¥, —É–ª. –ù–æ–≤–∞—è –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è, –¥. 666",
                "courier_fee": 600.0,
                "payment_method": "cash_on_delivery"
            }
            
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json=update_data,
                headers=headers
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                updated_notification = result.get("notification", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                key_fields_updated = (
                    updated_notification.get("sender_full_name") == update_data["sender_full_name"] and
                    updated_notification.get("courier_fee") == update_data["courier_fee"] and
                    updated_notification.get("payment_method") == update_data["payment_method"]
                )
                
                if key_fields_updated:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–û–ú",
                        True,
                        f"–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {update_data['sender_full_name']}, {update_data['courier_fee']}, {update_data['payment_method']}"
                    )
                    return True
                else:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–û–ú",
                        False,
                        "–ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –Ω–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return False
            else:
                self.log_test(
                    "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–û–ú",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¢–û–†–û–ú", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_individual_field_updates(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        try:
            headers = {"Authorization": f"Bearer {self.admin_token}", "Content-Type": "application/json"}
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json={"sender_full_name": "–¢–æ–ª—å–∫–æ –ò–º—è –û–±–Ω–æ–≤–ª–µ–Ω–æ"},
                headers=headers
            )
            
            if response.status_code == 200:
                result = response.json()
                updated_fields = result.get("updated_fields", [])
                
                if "sender_full_name" in updated_fields:
                    self.log_test(
                        "–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–û–ì–û –ü–û–õ–Ø - –ò–ú–Ø –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø",
                        True,
                        f"–ü–æ–ª–µ sender_full_name –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –≤—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π: {len(updated_fields)}"
                    )
                else:
                    self.log_test(
                        "–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–û–ì–û –ü–û–õ–Ø - –ò–ú–Ø –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø",
                        False,
                        f"–ü–æ–ª–µ sender_full_name –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö: {updated_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–û–ì–û –ü–û–õ–Ø - –ò–ú–Ø –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–∞
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json={"courier_fee": 999.99},
                headers=headers
            )
            
            if response.status_code == 200:
                result = response.json()
                notification = result.get("notification", {})
                
                if notification.get("courier_fee") == 999.99:
                    self.log_test(
                        "–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–û–ì–û –ü–û–õ–Ø - –°–¢–û–ò–ú–û–°–¢–¨ –ö–£–†–¨–ï–†–ê",
                        True,
                        f"–ü–æ–ª–µ courier_fee –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 999.99"
                    )
                    return True
                else:
                    self.log_test(
                        "–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–û–ì–û –ü–û–õ–Ø - –°–¢–û–ò–ú–û–°–¢–¨ –ö–£–†–¨–ï–†–ê",
                        False,
                        f"–ü–æ–ª–µ courier_fee –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {notification.get('courier_fee')}"
                    )
                    return False
            else:
                self.log_test(
                    "–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–û–ì–û –ü–û–õ–Ø - –°–¢–û–ò–ú–û–°–¢–¨ –ö–£–†–¨–ï–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–î–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_invalid_notification_id(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            headers = {"Authorization": f"Bearer {self.admin_token}", "Content-Type": "application/json"}
            
            fake_notification_id = "00000000-0000-0000-0000-000000000000"
            
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{fake_notification_id}",
                json={"sender_full_name": "–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"},
                headers=headers
            )
            
            if response.status_code == 404:
                self.log_test(
                    "–û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                    True,
                    f"HTTP 404: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                )
                return True
            else:
                self.log_test(
                    "–û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø",
                    False,
                    f"HTTP {response.status_code}: –û–∂–∏–¥–∞–ª—Å—è 404"
                )
                return False
                
        except Exception as e:
            self.log_test("–û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_invalid_data_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            headers = {"Authorization": f"Bearer {self.admin_token}", "Content-Type": "application/json"}
            
            # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json={},
                headers=headers
            )
            
            if response.status_code == 400:
                self.log_test(
                    "–í–ê–õ–ò–î–ê–¶–ò–Ø –ü–£–°–¢–´–• –î–ê–ù–ù–´–•",
                    True,
                    f"HTTP 400: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                )
            else:
                # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏ –¥—Ä—É–≥–æ–π –∫–æ–¥ –æ—à–∏–±–∫–∏, –≥–ª–∞–≤–Ω–æ–µ –Ω–µ 200
                if response.status_code != 200:
                    self.log_test(
                        "–í–ê–õ–ò–î–ê–¶–ò–Ø –ü–£–°–¢–´–• –î–ê–ù–ù–´–•",
                        True,
                        f"HTTP {response.status_code}: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã"
                    )
                else:
                    self.log_test(
                        "–í–ê–õ–ò–î–ê–¶–ò–Ø –ü–£–°–¢–´–• –î–ê–ù–ù–´–•",
                        False,
                        f"HTTP 200: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ —É—Å–ø–µ—à–Ω–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é"
                    )
                    return False
            
            # –¢–µ—Å—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json={
                    "invalid_field": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ",
                    "another_invalid": 123,
                    "sender_full_name": "–í–∞–ª–∏–¥–Ω–æ–µ –ø–æ–ª–µ"
                },
                headers=headers
            )
            
            if response.status_code == 200:
                result = response.json()
                updated_fields = result.get("updated_fields", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
                if "sender_full_name" in updated_fields and "invalid_field" not in updated_fields:
                    self.log_test(
                        "–í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï–î–û–ü–£–°–¢–ò–ú–´–• –ü–û–õ–ï–ô",
                        True,
                        f"–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {updated_fields}"
                    )
                    return True
                else:
                    self.log_test(
                        "–í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï–î–û–ü–£–°–¢–ò–ú–´–• –ü–û–õ–ï–ô",
                        False,
                        f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –º–æ–≥–ª–∏ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {updated_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "–í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï–î–û–ü–£–°–¢–ò–ú–´–• –ü–û–õ–ï–ô",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –î–ê–ù–ù–´–•", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_response_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ endpoint'–∞"""
        try:
            headers = {"Authorization": f"Bearer {self.admin_token}", "Content-Type": "application/json"}
            
            response = self.session.put(
                f"{BACKEND_URL}/operator/warehouse-notifications/{self.test_notification_id}",
                json={"sender_full_name": "–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞"},
                headers=headers
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
                required_fields = ["message", "notification_id", "updated_fields", "notification"]
                missing_fields = [field for field in required_fields if field not in result]
                
                if not missing_fields:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                    valid_types = (
                        isinstance(result["message"], str) and
                        isinstance(result["notification_id"], str) and
                        isinstance(result["updated_fields"], list) and
                        isinstance(result["notification"], dict)
                    )
                    
                    if valid_types:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ notification_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É
                        if result["notification_id"] == self.test_notification_id:
                            self.log_test(
                                "–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê ENDPOINT",
                                True,
                                f"–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"
                            )
                            return True
                        else:
                            self.log_test(
                                "–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê ENDPOINT",
                                False,
                                f"notification_id –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É"
                            )
                            return False
                    else:
                        self.log_test(
                            "–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê ENDPOINT",
                            False,
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ"
                        )
                        return False
                else:
                    self.log_test(
                        "–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê ENDPOINT",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê ENDPOINT",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê ENDPOINT", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤—ã–π endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏—Ö –≥—Ä—É–∑–∞—Ö –≤ TAJLINE.TJ")
        print("="*120)
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Backend URL: {BACKEND_URL}")
        print("="*120)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not self.create_test_notification():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("UNAUTHORIZED ACCESS", self.test_unauthorized_access),
            ("ADMIN UPDATE NOTIFICATION", self.test_admin_update_notification),
            ("OPERATOR UPDATE NOTIFICATION", self.test_operator_update_notification),
            ("INDIVIDUAL FIELD UPDATES", self.test_individual_field_updates),
            ("INVALID NOTIFICATION ID", self.test_invalid_notification_id),
            ("INVALID DATA VALIDATION", self.test_invalid_data_validation),
            ("RESPONSE STRUCTURE", self.test_response_structure)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            print(f"\n{'='*60}")
            print(f"üß™ –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–ê: {test_name}")
            print(f"{'='*60}")
            
            try:
                if test_func():
                    passed_tests += 1
                    print(f"‚úÖ –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
                else:
                    print(f"‚ùå –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
            except Exception as e:
                print(f"‚ùå –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ï–ù –° –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï–ú: {str(e)}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*120)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º
        successful_checks = sum(1 for result in self.test_results if result["success"])
        total_checks = len(self.test_results)
        check_success_rate = (successful_checks / total_checks) * 100 if total_checks > 0 else 0
        
        print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {successful_checks}/{total_checks} ({check_success_rate:.1f}%)")
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        failed_tests = [result for result in self.test_results if not result["success"]]
        if failed_tests:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –ü–†–û–í–ï–†–ö–ò ({len(failed_tests)}):")
            for failed in failed_tests:
                print(f"   ‚Ä¢ {failed['test']}: {failed['details']}")
        
        print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if success_rate >= 90:
            print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ù–æ–≤—ã–π endpoint PUT /api/operator/warehouse-notifications/{notification_id} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
        elif success_rate >= 70:
            print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
        return success_rate >= 70

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseNotificationUpdateTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()