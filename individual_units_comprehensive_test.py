#!/usr/bin/env python3
"""
üéØ COMPREHENSIVE TESTING: Individual Units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ
–ö–û–ù–¢–ï–ö–°–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API endpoint GET /api/operator/cargo/individual-units-for-placement
–¶–ï–õ–¨: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import requests
import json
import os
from datetime import datetime
import uuid

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://cargo-tracker-33.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class IndividualUnitsComprehensiveTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_results = []
        self.created_cargo_ids = []  # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
            
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def create_test_cargo_with_individual_items(self, cargo_number_suffix=""):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å individual_items"""
        try:
            print(f"üì¶ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò{cargo_number_suffix}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ –∏ individual_items
            cargo_data = {
                "sender_full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å{cargo_number_suffix}",
                "sender_phone": "+79991234567",
                "recipient_full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å{cargo_number_suffix}",
                "recipient_phone": "+79997654321",
                "recipient_address": f"–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º {cargo_number_suffix or '1'}",
                "description": f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è individual units{cargo_number_suffix}",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung{cargo_number_suffix}",
                        "quantity": 2,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 1000.0
                    },
                    {
                        "cargo_name": f"–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG{cargo_number_suffix}",
                        "quantity": 3,
                        "weight": 8.0,
                        "price_per_kg": 80.0,
                        "total_amount": 1920.0
                    }
                ]
            }
            
            response = self.session.post(f"{API_BASE}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("cargo_id")
                cargo_number = data.get("cargo_number")
                
                if cargo_id:
                    self.created_cargo_ids.append(cargo_id)
                    self.log_test(
                        f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏{cargo_number_suffix}",
                        True,
                        f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id}), –≥—Ä—É–∑—ã: 2 —Ç–∏–ø–∞ (2+3=5 –µ–¥–∏–Ω–∏—Ü)"
                    )
                    return {"cargo_id": cargo_id, "cargo_number": cargo_number}
                else:
                    self.log_test(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏{cargo_number_suffix}", False, "–ù–µ –ø–æ–ª—É—á–µ–Ω cargo_id")
                    return None
            else:
                error_text = response.text if response.text else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                self.log_test(
                    f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏{cargo_number_suffix}",
                    False,
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code} - {error_text}"
                )
                return None
                
        except Exception as e:
            self.log_test(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏{cargo_number_suffix}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None

    def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ endpoint"""
        try:
            print("üéØ –¢–ï–°–¢ 1: –ë–ê–ó–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["items", "individual_units", "total", "page", "per_page", "total_pages"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    total_units = data.get('total', 0)
                    items_count = len(data.get('items', []))
                    individual_units_count = len(data.get('individual_units', []))
                    
                    self.log_test(
                        "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ endpoint",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}, –≥—Ä—É–ø–ø: {items_count}, individual_units: {individual_units_count}"
                    )
                    return data
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return None
            else:
                self.log_test(
                    "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ endpoint",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return None
                
        except Exception as e:
            self.log_test("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None

    def test_individual_units_structure(self, sample_data):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã individual units"""
        try:
            print("üéØ –¢–ï–°–¢ 2: –°–¢–†–£–ö–¢–£–†–ê INDIVIDUAL UNITS")
            
            if not sample_data or not sample_data.get("individual_units"):
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units", True, "–ù–µ—Ç individual_units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return True
            
            individual_units = sample_data.get("individual_units", [])
            
            if individual_units:
                first_unit = individual_units[0]
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è individual units
                critical_fields = [
                    "individual_number", "cargo_request_number", "type_number", "unit_index",
                    "placement_status", "is_placed", "cargo_name", "sender_full_name", 
                    "recipient_full_name", "warehouse_name", "accepting_operator"
                ]
                
                missing_fields = [field for field in critical_fields if field not in first_unit]
                
                if not missing_fields:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç individual_number
                    individual_number = first_unit.get("individual_number", "")
                    if "/" in individual_number and len(individual_number.split("/")) == 3:
                        self.log_test(
                            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units",
                            True,
                            f"–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–∏–º–µ—Ä: {individual_number}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–§–æ—Ä–º–∞—Ç individual_number",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç individual_number: {individual_number}",
                            "–ó–ê–Ø–í–ö–ê/–¢–ò–ü/–ï–î–ò–ù–ò–¶–ê",
                            individual_number
                        )
                        return False
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è: {missing_fields}",
                        str(critical_fields),
                        str(list(first_unit.keys()))
                    )
                    return False
            else:
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units", True, "–ù–µ—Ç –µ–¥–∏–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                return True
                
        except Exception as e:
            self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_filtering_functionality(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ cargo_type_filter –∏ status_filter"""
        try:
            print("üéØ –¢–ï–°–¢ 3: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø")
            
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞ "01"
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?cargo_type_filter=01")
            
            if response.status_code == 200:
                data = response.json()
                total_type_01 = data.get('total', 0)
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞ (01)",
                    True,
                    f"–§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï–¥–∏–Ω–∏—Ü —Ç–∏–ø–∞ 01: {total_type_01}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–º–µ—é—Ç type_number = "01"
                individual_units = data.get('individual_units', [])
                wrong_type_units = [unit for unit in individual_units if unit.get('type_number') != '01']
                
                if wrong_type_units:
                    self.log_test(
                        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É",
                        False,
                        f"–ù–∞–π–¥–µ–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º: {len(wrong_type_units)}"
                    )
                else:
                    self.log_test(
                        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É",
                        True,
                        f"–í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(individual_units)} –µ–¥–∏–Ω–∏—Ü)"
                    )
            else:
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}"
                )
            
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É "awaiting"
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?status_filter=awaiting")
            
            if response.status_code == 200:
                data = response.json()
                total_awaiting = data.get('total', 0)
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (awaiting)",
                    True,
                    f"–§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï–¥–∏–Ω–∏—Ü –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_awaiting}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
                individual_units = data.get('individual_units', [])
                wrong_status_units = [unit for unit in individual_units if unit.get('placement_status') != 'awaiting_placement']
                
                if wrong_status_units:
                    self.log_test(
                        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                        False,
                        f"–ù–∞–π–¥–µ–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º: {len(wrong_status_units)}"
                    )
                else:
                    self.log_test(
                        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                        True,
                        f"–í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(individual_units)} –µ–¥–∏–Ω–∏—Ü)"
                    )
            else:
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                    False,
                    f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}"
                )
            
            # –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?cargo_type_filter=01&status_filter=awaiting")
            
            if response.status_code == 200:
                data = response.json()
                total_combined = data.get('total', 0)
                self.log_test(
                    "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                    True,
                    f"–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_combined}"
                )
                return True
            else:
                self.log_test(
                    "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                    False,
                    f"–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_pagination_functionality(self):
        """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (page, per_page)"""
        try:
            print("üéØ –¢–ï–°–¢ 4: –ü–ê–ì–ò–ù–ê–¶–ò–Ø")
            
            # –¢–µ—Å—Ç —Å –º–∞–ª—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?page=1&per_page=2")
            
            if response.status_code == 200:
                data = response.json()
                
                total = data.get("total", 0)
                page = data.get("page", 1)
                per_page = data.get("per_page", 2)
                total_pages = data.get("total_pages", 1)
                items_count = len(data.get("individual_units", []))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                expected_pages = max(1, (total + per_page - 1) // per_page)
                expected_items = min(per_page, total) if total > 0 else 0
                
                if total_pages == expected_pages and items_count == expected_items:
                    self.log_test(
                        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤",
                        True,
                        f"–í—Å–µ–≥–æ: {total}, —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {items_count}/{per_page}"
                    )
                    
                    # –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                    if total > per_page:
                        response2 = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?page=2&per_page=2")
                        if response2.status_code == 200:
                            data2 = response2.json()
                            items_count_2 = len(data2.get("individual_units", []))
                            self.log_test(
                                "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                                True,
                                f"–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {items_count_2}"
                            )
                        else:
                            self.log_test(
                                "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                                False,
                                f"–û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response2.status_code}"
                            )
                    
                    return True
                else:
                    self.log_test(
                        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏",
                        f"—Å—Ç—Ä–∞–Ω–∏—Ü: {expected_pages}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {expected_items}",
                        f"—Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {items_count}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_grouping_by_requests(self, sample_data):
        """–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–∞—è–≤–∫–∞–º"""
        try:
            print("üéØ –¢–ï–°–¢ 5: –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ó–ê–Ø–í–ö–ê–ú")
            
            if not sample_data or not sample_data.get("items"):
                self.log_test("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º", True, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                return True
            
            items = sample_data.get("items", [])
            individual_units = sample_data.get("individual_units", [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫ –≤ –≥—Ä—É–ø–ø–∞—Ö
            request_numbers = [item.get("request_number") for item in items]
            unique_numbers = set(request_numbers)
            
            if len(request_numbers) == len(unique_numbers):
                self.log_test(
                    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫",
                    True,
                    f"–í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã. –ì—Ä—É–ø–ø: {len(items)}"
                )
            else:
                self.log_test(
                    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫",
                    False,
                    f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫",
                    f"{len(unique_numbers)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö",
                    f"{len(request_numbers)} –≤—Å–µ–≥–æ"
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–ø–ø–∞–º
            total_units_in_groups = sum(len(item.get("units", [])) for item in items)
            total_individual_units = len(individual_units)
            
            if total_units_in_groups == total_individual_units:
                self.log_test(
                    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–ø–ø–∞–º",
                    True,
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {total_units_in_groups} –≤ –≥—Ä—É–ø–ø–∞—Ö = {total_individual_units} individual_units"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–ø–ø–∞–º",
                    False,
                    f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü",
                    str(total_individual_units),
                    str(total_units_in_groups)
                )
                return False
            
        except Exception as e:
            self.log_test("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_sorting_by_request_number(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏"""
        try:
            print("üéØ –¢–ï–°–¢ 6: –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –ù–û–ú–ï–†–£ –ó–ê–Ø–í–ö–ò")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?per_page=10")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                if len(items) > 1:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
                    request_numbers = [item.get("request_number", "") for item in items]
                    sorted_numbers = sorted(request_numbers)
                    
                    if request_numbers == sorted_numbers:
                        self.log_test(
                            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                            True,
                            f"–ó–∞—è–≤–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–µ—Ä–≤–∞—è: {request_numbers[0]}, –ø–æ—Å–ª–µ–¥–Ω—è—è: {request_numbers[-1]}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                            str(sorted_numbers[:3]),
                            str(request_numbers[:3])
                        )
                        return False
                else:
                    self.log_test(
                        "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                        True,
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)"
                    )
                    return True
            else:
                self.log_test(
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
            
            cleaned_count = 0
            for cargo_id in self.created_cargo_ids:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ operator_cargo
                    response = self.session.delete(f"{API_BASE}/admin/cargo/{cargo_id}")
                    if response.status_code in [200, 404]:
                        cleaned_count += 1
                except:
                    pass
            
            if cleaned_count > 0:
                self.log_test(
                    "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"–£–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫"
                )
            else:
                self.log_test(
                    "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"
                )
                
        except Exception as e:
            self.log_test("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

    def run_comprehensive_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ COMPREHENSIVE TESTING: Individual Units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞")
        print("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüì¶ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        test_cargo_1 = self.create_test_cargo_with_individual_items(" #1")
        test_cargo_2 = self.create_test_cargo_with_individual_items(" #2")
        
        if not test_cargo_1 and not test_cargo_2:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        print("\nüéØ –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´")
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        sample_data = self.test_basic_functionality()
        if sample_data is None:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.cleanup_test_data()
            return False
        
        # –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units
        self.test_individual_units_structure(sample_data)
        
        # –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        self.test_filtering_functionality()
        
        # –¢–µ—Å—Ç 4: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        self.test_pagination_functionality()
        
        # –¢–µ—Å—Ç 5: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        self.test_grouping_by_requests(sample_data)
        
        # –¢–µ—Å—Ç 6: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        self.test_sorting_by_request_number()
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup_test_data()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_comprehensive_summary()
        
        return True

    def print_comprehensive_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 80)
        print("üìä COMPREHENSIVE TEST RESULTS")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        successful_tests = len([t for t in self.test_results if t["success"]])
        failed_tests = total_tests - successful_tests
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests} ‚úÖ")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests} ‚ùå")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        critical_tests = [
            "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ endpoint",
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units", 
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞ (01)",
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (awaiting)",
            "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
            "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤",
            "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º",
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏"
        ]
        
        critical_passed = 0
        for test in self.test_results:
            if test["test"] in critical_tests and test["success"]:
                critical_passed += 1
        
        critical_rate = (critical_passed / len(critical_tests) * 100) if critical_tests else 0
        
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´: {critical_passed}/{len(critical_tests)} ({critical_rate:.1f}%)")
        
        if failed_tests > 0:
            print("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for test in self.test_results:
                if not test["success"]:
                    print(f"  ‚Ä¢ {test['test']}: {test['details']}")
            print()
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 95 and critical_rate >= 90:
            print("üéâ COMPREHENSIVE TESTING –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ API endpoint individual-units-for-placement —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        elif success_rate >= 80:
            print("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("üö® –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IndividualUnitsComprehensiveTester()
    tester.run_comprehensive_tests()

if __name__ == "__main__":
    main()