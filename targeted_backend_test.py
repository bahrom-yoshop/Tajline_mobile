#!/usr/bin/env python3
"""
üéØ –¶–ï–õ–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoints –ø–æ—Å–ª–µ —Å–∏—Å—Ç–µ–º—ã –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-manager.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class TargetedBackendTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        
    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    def get_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    print(f"‚úÖ –°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})")
                    return True
                else:
                    print("‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞: {str(e)}")
            return False
    
    def test_specific_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoints"""
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–• ENDPOINTS:")
        print("=" * 60)
        
        endpoints_to_test = [
            ("GET", "/api/operator/placement-progress", None),
            ("GET", "/api/operator/cargo/available-for-placement", None),
            ("GET", "/api/operator/cargo/individual-units-for-placement", None),
            ("POST", "/api/operator/qr/generate-individual", {"individual_number": "250101/01/01"}),
            ("GET", "/api/operator/qr/print-layout", None),
            ("POST", "/api/operator/placement/verify-cell", {"qr_code": "001-01-01-001"}),
        ]
        
        for method, endpoint, payload in endpoints_to_test:
            print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {method} {endpoint}")
            
            try:
                if method == "GET":
                    response = self.session.get(f"{API_BASE.replace('/api', '')}{endpoint}", timeout=30)
                elif method == "POST":
                    response = self.session.post(
                        f"{API_BASE.replace('/api', '')}{endpoint}",
                        json=payload,
                        timeout=30
                    )
                
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ä–∞–∑–º–µ—Ä: {len(str(data))} —Å–∏–º–≤–æ–ª–æ–≤)")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        if isinstance(data, dict):
                            keys = list(data.keys())[:5]  # –ü–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–π
                            print(f"   üìù –ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {keys}")
                        elif isinstance(data, list):
                            print(f"   üìù –ú–∞—Å—Å–∏–≤ –∏–∑ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                            
                    except json.JSONDecodeError:
                        print(f"   ‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
                elif response.status_code == 404:
                    print(f"   ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
                elif response.status_code == 400:
                    print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
                    try:
                        error_data = response.json()
                        print(f"   üìù –û—à–∏–±–∫–∞: {error_data}")
                    except:
                        print(f"   üìù –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text[:200]}")
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                    print(f"   üìù –û—Ç–≤–µ—Ç: {response.text[:200]}")
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
    
    def run_test(self):
        """–ó–∞–ø—É—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –¶–ï–õ–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND API")
        print("=" * 60)
        
        if not self.authenticate():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        self.test_specific_endpoints()
        
        print("\nüéØ –¶–ï–õ–ï–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TargetedBackendTester()
    tester.run_test()
    return 0

if __name__ == "__main__":
    exit(main())