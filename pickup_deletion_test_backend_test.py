#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-tracker-28.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class PickupRequestCreationTest:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        login_data = {
            "phone": ADMIN_PHONE,
            "password": ADMIN_PASSWORD
        }
        
        response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.admin_token = data.get("access_token")
            self.session.headers.update({
                "Authorization": f"Bearer {self.admin_token}",
                "Content-Type": "application/json"
            })
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {data.get('user', {}).get('full_name')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
            return False
    
    def create_test_cargo_requests(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("\nüì¶ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó...")
        
        test_requests = [
            {
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å 1",
                "recipient_phone": "+992123456789",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 1",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 1",
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –∑–∞–±–æ—Ä–∞ 1",
                "weight": 5.0,
                "declared_value": 1000.0,
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                "route": "moscow_to_tajikistan"
            },
            {
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å 2", 
                "recipient_phone": "+992123456790",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 2",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 2",
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –∑–∞–±–æ—Ä–∞ 2",
                "weight": 3.0,
                "declared_value": 500.0,
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                "route": "moscow_to_tajikistan"
            },
            {
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å 3",
                "recipient_phone": "+992123456791", 
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 3",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è 3",
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –∑–∞–±–æ—Ä–∞ 3",
                "weight": 7.0,
                "declared_value": 1500.0,
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                "route": "moscow_to_tajikistan"
            }
        ]
        
        created_requests = []
        
        for i, request_data in enumerate(test_requests):
            print(f"\n   üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ {i+1}...")
            
            try:
                response = self.session.post(f"{BACKEND_URL}/cargo-requests", json=request_data)
                print(f"      POST /api/cargo-requests - Status: {response.status_code}")
                
                if response.status_code in [200, 201]:
                    data = response.json()
                    created_requests.append(data)
                    print(f"      ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {data.get('request_number', 'unknown')}")
                    print(f"         ID: {data.get('id')}")
                    print(f"         –ì—Ä—É–∑: {data.get('cargo_name')}")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.text}")
                    
            except Exception as e:
                print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        
        print(f"\n   üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫: {len(created_requests)}/{len(test_requests)}")
        return created_requests
    
    def check_pickup_requests_after_creation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests")
            print(f"   GET /api/operator/pickup-requests - Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                pickup_requests = data.get("pickup_requests", [])
                total_count = data.get("total_count", 0)
                
                print(f"   üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {total_count}")
                print(f"   üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(pickup_requests)}")
                
                if pickup_requests:
                    print("   üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä:")
                    for i, req in enumerate(pickup_requests):
                        print(f"      {i+1}. ID: {req.get('id')}")
                        print(f"         –ù–æ–º–µ—Ä: {req.get('request_number')}")
                        print(f"         –°—Ç–∞—Ç—É—Å: {req.get('status')}")
                        print(f"         –ì—Ä—É–∑: {req.get('cargo_name', 'unknown')}")
                
                return pickup_requests, total_count
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {response.text}")
                return [], 0
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {e}")
            return [], 0
    
    def test_bulk_deletion_of_pickup_requests(self, pickup_requests):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print(f"\nüóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†...")
        
        if not pickup_requests:
            print("   ‚ö†Ô∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_requests = pickup_requests[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"   üìã –í—ã–±—Ä–∞–Ω–æ {len(test_requests)} –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å
        print(f"   üìã –ó–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for i, req in enumerate(test_requests):
            print(f"      {i+1}. {req.get('request_number')} (ID: {req.get('id')})")
        
        # –ü—Ä–æ–±—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ endpoints
        deletion_endpoints = [
            "/admin/cargo-applications/bulk-delete",
            "/operator/pickup-requests/bulk-delete", 
            "/admin/pickup-requests/bulk-delete"
        ]
        
        request_ids = [req.get("id") for req in test_requests]
        
        successful_deletions = 0
        
        for endpoint in deletion_endpoints:
            print(f"\n   üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {endpoint}...")
            
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã payload
                payloads_to_try = [
                    {"request_ids": request_ids},
                    {"ids": request_ids},
                    {"pickup_request_ids": request_ids},
                    {"cargo_application_ids": request_ids}
                ]
                
                for payload in payloads_to_try:
                    try:
                        response = self.session.delete(f"{BACKEND_URL}{endpoint}", json=payload)
                        print(f"      DELETE {endpoint} (payload: {list(payload.keys())[0]}) - Status: {response.status_code}")
                        
                        if response.status_code in [200, 204]:
                            print(f"      ‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                            print(f"      üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                            successful_deletions += len(request_ids)
                            break
                        else:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞: {response.text}")
                            
                    except Exception as e:
                        print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                
                if successful_deletions > 0:
                    break
                    
            except Exception as e:
                print(f"   ‚ùå –û–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {endpoint}: {e}")
        
        # –ï—Å–ª–∏ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –ø–æ –æ–¥–Ω–æ–π
        if successful_deletions == 0:
            print(f"\n   üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª—è—Ç—å –ø–æ –æ–¥–Ω–æ–π...")
            
            for i, request in enumerate(test_requests):
                request_id = request.get("id")
                request_number = request.get("request_number")
                
                print(f"\n      üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {i+1}: {request_number}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                single_deletion_endpoints = [
                    f"/admin/cargo-applications/{request_id}",
                    f"/operator/pickup-requests/{request_id}",
                    f"/admin/pickup-requests/{request_id}"
                ]
                
                deleted = False
                for endpoint in single_deletion_endpoints:
                    try:
                        response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                        print(f"         DELETE {endpoint} - Status: {response.status_code}")
                        
                        if response.status_code in [200, 204]:
                            print(f"         ‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                            successful_deletions += 1
                            deleted = True
                            break
                        else:
                            print(f"         ‚ùå –û—à–∏–±–∫–∞: {response.text}")
                            
                    except Exception as e:
                        print(f"         ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                
                if not deleted:
                    print(f"         ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É {request_number}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\n   üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {successful_deletions}/{len(test_requests)}")
        
        if successful_deletions > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–∏–ª–∏—Å—å
            print(f"\n   üîç –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø...")
            pickup_requests_after, total_after = self.check_pickup_requests_after_creation()
            
            print(f"   üìä –ó–∞—è–≤–æ–∫ –±—ã–ª–æ: {len(pickup_requests)}")
            print(f"   üìä –ó–∞—è–≤–æ–∫ —Å—Ç–∞–ª–æ: {total_after}")
            print(f"   üìä –û–∂–∏–¥–∞–µ–º–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {successful_deletions}")
            print(f"   üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {len(pickup_requests) - total_after}")
            
            if len(pickup_requests) - total_after >= successful_deletions:
                print(f"   ‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
                return True
            else:
                print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∏ –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")
                return False
        else:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ò –û–î–ù–ê –ó–ê–Ø–í–ö–ê –ù–ï –ë–´–õ–ê –£–î–ê–õ–ï–ù–ê!")
            return False
    
    def run_pickup_deletion_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("=" * 80)
        print("üß™ –¢–ï–°–¢ –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†")
        print("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_pickup_requests, initial_count = self.check_pickup_requests_after_creation()
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {initial_count}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑ (–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä)
        created_requests = self.create_test_cargo_requests()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
        pickup_requests_after_creation, count_after_creation = self.check_pickup_requests_after_creation()
        
        if count_after_creation > initial_count:
            print(f"‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—è–≤–∏–ª–∏—Å—å: {count_after_creation - initial_count} –Ω–æ–≤—ã—Ö")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            deletion_success = self.test_bulk_deletion_of_pickup_requests(pickup_requests_after_creation)
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            print(f"\n" + "=" * 80)
            print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
            print("=" * 80)
            
            print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑: {len(created_requests)}")
            print(f"üìã –ü–æ—è–≤–∏–ª–æ—Å—å –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {count_after_creation - initial_count}")
            
            if deletion_success:
                print(f"‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†: –†–ê–ë–û–¢–ê–ï–¢")
            else:
                print(f"‚ùå –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
            
            return deletion_success
            
        else:
            print(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑")
            print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ:")
            print(f"   1. –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–æ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–µ")
            print(f"   2. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
            print(f"   3. –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö")
            
            return False

def main():
    test = PickupRequestCreationTest()
    
    try:
        success = test.run_pickup_deletion_test()
        
        if success:
            print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()