#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–ê –ß–ï–†–ï–ó QR –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ "Invalid cell code format" –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≥—Ä—É–∑–∞
- Frontend –∫–æ–¥ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç warehouse_id –ø–æ warehouse_number –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR (03010101)
- –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ /api/operator/cargo/available-for-placement
3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ /api/warehouses –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è warehouse_id –∏ warehouse_number
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ —á–µ—Ä–µ–∑ /api/operator/cargo/place
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR (03010101)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
- API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –°–∫–ª–∞–¥—ã –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è warehouse_number –∏ id
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ QR –∫–æ–¥–æ–≤
- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ warehouse_id
"""

import requests
import json
import sys
from datetime import datetime
from typing import Dict, Any, Optional, List

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://logistics-dash-6.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRCargoPlacementTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_info = None
        self.test_results = []
        self.warehouses = []
        self.available_cargo = []
        
    def log_result(self, test_name: str, success: bool, message: str, details: Optional[Dict] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details or {},
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_warehouse_operator(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("\nüîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print("=" * 60)
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user", {})
                
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    
                    operator_name = self.operator_info.get('full_name', 'Unknown')
                    operator_role = self.operator_info.get('role', 'Unknown')
                    operator_number = self.operator_info.get('user_number', 'Unknown')
                    
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {operator_name} (—Ä–æ–ª—å: {operator_role}, –Ω–æ–º–µ—Ä: {operator_number})",
                        {
                            "operator_name": operator_name,
                            "operator_role": operator_role,
                            "operator_number": operator_number,
                            "phone": WAREHOUSE_OPERATOR["phone"],
                            "token_length": len(self.operator_token)
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        False,
                        "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω",
                        {"response": data}
                    )
                    return False
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"status_code": response.status_code}
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def get_available_cargo_for_placement(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("\nüì¶ –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –ì–†–£–ó–û–í –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        print("=" * 60)
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                total_count = data.get("total_count", len(items))
                
                self.available_cargo = items
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                cargo_analysis = {
                    "total_cargo": len(items),
                    "cargo_with_warehouse_info": 0,
                    "cargo_statuses": {},
                    "sample_cargo": items[0] if items else None
                }
                
                for cargo in items:
                    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
                    status = cargo.get("processing_status", "unknown")
                    cargo_analysis["cargo_statuses"][status] = cargo_analysis["cargo_statuses"].get(status, 0) + 1
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
                    if cargo.get("warehouse_name") or cargo.get("warehouse_location"):
                        cargo_analysis["cargo_with_warehouse_info"] += 1
                
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤—Å–µ–≥–æ: {total_count})",
                    cargo_analysis
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                required_fields = ["items"]
                optional_fields = ["total_count", "page", "per_page", "total_pages", "has_next", "has_prev"]
                
                structure_check = {
                    "has_items": "items" in data,
                    "has_pagination": any(field in data for field in optional_fields),
                    "pagination_fields": [field for field in optional_fields if field in data]
                }
                
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API",
                    structure_check["has_items"],
                    f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ {'–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' if structure_check['has_items'] else '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞'}",
                    structure_check
                )
                
                return True
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"status_code": response.status_code}
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def get_warehouses_list(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è warehouse_id –∏ warehouse_number"""
        print("\nüè≠ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–ö–õ–ê–î–û–í")
        print("=" * 60)
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/warehouses",
                timeout=30
            )
            
            if response.status_code == 200:
                warehouses = response.json()
                self.warehouses = warehouses
                
                # –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
                warehouse_analysis = {
                    "total_warehouses": len(warehouses),
                    "warehouses_with_number": 0,
                    "warehouses_with_id": 0,
                    "warehouse_number_formats": {},
                    "sample_warehouse": warehouses[0] if warehouses else None
                }
                
                for warehouse in warehouses:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è warehouse_number
                    if "warehouse_number" in warehouse and warehouse["warehouse_number"] is not None:
                        warehouse_analysis["warehouses_with_number"] += 1
                        
                        # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ warehouse_number
                        wh_number = str(warehouse["warehouse_number"])
                        if wh_number.isdigit():
                            format_type = f"numeric_{len(wh_number)}_digits"
                        else:
                            format_type = "non_numeric"
                        
                        warehouse_analysis["warehouse_number_formats"][format_type] = \
                            warehouse_analysis["warehouse_number_formats"].get(format_type, 0) + 1
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è id
                    if "id" in warehouse and warehouse["id"]:
                        warehouse_analysis["warehouses_with_id"] += 1
                
                success = warehouse_analysis["warehouses_with_number"] > 0 and warehouse_analysis["warehouses_with_id"] > 0
                
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                    success,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤, {warehouse_analysis['warehouses_with_number']} —Å warehouse_number, {warehouse_analysis['warehouses_with_id']} —Å id",
                    warehouse_analysis
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è warehouse_id –∏ warehouse_number
                if success:
                    self.check_warehouse_id_number_mapping()
                
                return success
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"status_code": response.status_code}
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def check_warehouse_id_number_mapping(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è warehouse_id –∏ warehouse_number"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø WAREHOUSE_ID –ò WAREHOUSE_NUMBER")
        
        mapping_data = {
            "warehouses_with_both": 0,
            "mapping_examples": [],
            "potential_issues": []
        }
        
        for warehouse in self.warehouses:
            warehouse_id = warehouse.get("id")
            warehouse_number = warehouse.get("warehouse_number")
            warehouse_name = warehouse.get("name", "Unknown")
            
            if warehouse_id and warehouse_number is not None:
                mapping_data["warehouses_with_both"] += 1
                
                mapping_example = {
                    "name": warehouse_name,
                    "id": warehouse_id,
                    "warehouse_number": warehouse_number,
                    "warehouse_number_str": str(warehouse_number)
                }
                
                mapping_data["mapping_examples"].append(mapping_example)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                if not str(warehouse_number).isdigit():
                    mapping_data["potential_issues"].append(f"–°–∫–ª–∞–¥ '{warehouse_name}' –∏–º–µ–µ—Ç –Ω–µ—á–∏—Å–ª–æ–≤–æ–π warehouse_number: {warehouse_number}")
        
        success = mapping_data["warehouses_with_both"] > 0
        
        self.log_result(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è warehouse_id –∏ warehouse_number",
            success,
            f"–ù–∞–π–¥–µ–Ω–æ {mapping_data['warehouses_with_both']} —Å–∫–ª–∞–¥–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º id –∏ warehouse_number",
            mapping_data
        )
    
    def test_qr_code_formats(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫"""
        print("\nüî≤ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–û–í QR –ö–û–î–û–í –Ø–ß–ï–ï–ö")
        print("=" * 60)
        
        if not self.available_cargo:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤",
                False,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
            )
            return False
        
        if not self.warehouses:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤",
                False,
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cargo = self.available_cargo[0]
        cargo_id = test_cargo.get("id")
        cargo_number = test_cargo.get("cargo_number")
        
        if not cargo_number:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤",
                False,
                "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–∫–ª–∞–¥ —Å warehouse_number –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_warehouse = None
        for warehouse in self.warehouses:
            if warehouse.get("warehouse_number") is not None:
                test_warehouse = warehouse
                break
        
        if not test_warehouse:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤",
                False,
                "–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ —Å warehouse_number –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        warehouse_id = test_warehouse.get("id")
        warehouse_number = str(test_warehouse.get("warehouse_number"))
        warehouse_name = test_warehouse.get("name", "Unknown")
        
        print(f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {cargo_number} (ID: {cargo_id})")
        print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥: {warehouse_name} (ID: {warehouse_id}, Number: {warehouse_number})")
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API endpoint: /api/cargo/place-in-cell
        qr_test_cases = [
            {
                "name": "ID-based —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ñ–∏—Å–∞–º–∏ (003-01-01-001)",
                "cell_code": f"{warehouse_number.zfill(3)}-01-01-001",
                "description": "–§–æ—Ä–º–∞—Ç: warehouse_number(3) + block(2) + shelf(2) + cell(3)"
            },
            {
                "name": "–ü–æ–ª–Ω—ã–π UUID —Ñ–æ—Ä–º–∞—Ç (UUID-–ë1-–ü1-–Ø1)",
                "cell_code": f"{warehouse_id}-–ë1-–ü1-–Ø1",
                "description": "–ü–æ–ª–Ω—ã–π UUID —Å–∫–ª–∞–¥–∞ + —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"
            },
            {
                "name": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ backend)",
                "cell_code": f"{warehouse_number.zfill(2)}010101",  # warehouse_number + block + shelf + cell
                "description": "–§–æ—Ä–º–∞—Ç: warehouse_number(2) + block(2) + shelf(2) + cell(2) - –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø BACKEND"
            }
        ]
        
        test_results = []
        
        for i, test_case in enumerate(qr_test_cases, 1):
            print(f"\nüî≤ –¢–µ—Å—Ç {i}: {test_case['name']}")
            print(f"   Cell –∫–æ–¥: {test_case['cell_code']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {test_case['description']}")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
            placement_data = {
                "cargo_number": cargo_number,
                "cell_code": test_case["cell_code"]
            }
            
            try:
                response = self.session.post(
                    f"{BACKEND_URL}/cargo/place-in-cell",
                    json=placement_data,
                    timeout=30
                )
                
                test_result = {
                    "format": test_case["name"],
                    "cell_code": test_case["cell_code"],
                    "status_code": response.status_code,
                    "success": response.status_code == 200,
                    "response": None,
                    "error": None
                }
                
                if response.status_code == 200:
                    try:
                        response_data = response.json()
                        test_result["response"] = response_data
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {response_data.get('message', '–ì—Ä—É–∑ —Ä–∞–∑–º–µ—â–µ–Ω')}")
                    except:
                        test_result["response"] = response.text
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {response.text}")
                else:
                    try:
                        error_data = response.json()
                        test_result["error"] = error_data
                        error_message = error_data.get("detail", response.text)
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_message}")
                    except:
                        test_result["error"] = response.text
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
                
                test_results.append(test_result)
                
            except Exception as e:
                test_result = {
                    "format": test_case["name"],
                    "cell_code": test_case["cell_code"],
                    "status_code": None,
                    "success": False,
                    "response": None,
                    "error": str(e)
                }
                test_results.append(test_result)
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_formats = [r for r in test_results if r["success"]]
        failed_formats = [r for r in test_results if not r["success"]]
        
        success_rate = len(successful_formats) / len(test_results) * 100 if test_results else 0
        
        self.log_result(
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤",
            len(successful_formats) > 0,
            f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(successful_formats)} –∏–∑ {len(test_results)} —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤ ({success_rate:.1f}%)",
            {
                "test_cargo": {
                    "cargo_id": cargo_id,
                    "cargo_number": cargo_number
                },
                "test_warehouse": {
                    "warehouse_id": warehouse_id,
                    "warehouse_number": warehouse_number,
                    "warehouse_name": warehouse_name
                },
                "successful_formats": [r["format"] for r in successful_formats],
                "failed_formats": [{"format": r["format"], "error": r["error"]} for r in failed_formats],
                "detailed_results": test_results
            }
        )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        compact_format_test = next((r for r in test_results if "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" in r["format"]), None)
        if compact_format_test:
            self.log_result(
                "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR (03010101)",
                compact_format_test["success"],
                f"–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR {'—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' if compact_format_test['success'] else '–ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø –≤ backend (–æ–∂–∏–¥–∞–µ–º–æ)'}",
                {
                    "cell_code": compact_format_test["cell_code"],
                    "status_code": compact_format_test["status_code"],
                    "error": compact_format_test["error"] if not compact_format_test["success"] else None,
                    "note": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞ frontend –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"
                }
            )
        
        return len(successful_formats) > 0
    
    def run_comprehensive_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–ê –ß–ï–†–ï–ó QR –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í TAJLINE.TJ")
        print("=" * 100)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if not self.get_available_cargo_for_placement():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
        
        # –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        if not self.get_warehouses_list():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤
        qr_test_success = self.test_qr_code_formats()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        return qr_test_success
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['message']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        critical_failures = [
            result for result in self.test_results 
            if not result["success"] and any(keyword in result["test"].lower() 
                                           for keyword in ["–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"])
        ]
        
        if critical_failures:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(critical_failures)}):")
            for failure in critical_failures:
                print(f"   - {failure['test']}: {failure['message']}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_test = next((r for r in self.test_results if "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in r["test"]), None)
        if auth_test and auth_test["success"]:
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif auth_test:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        cargo_test = next((r for r in self.test_results if "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤" in r["test"]), None)
        if cargo_test and cargo_test["success"]:
            print("   ‚úÖ API /api/operator/cargo/available-for-placement —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif cargo_test:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å API –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        warehouse_test = next((r for r in self.test_results if "—Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤" in r["test"]), None)
        if warehouse_test and warehouse_test["success"]:
            print("   ‚úÖ API /api/warehouses —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–ª–∞–¥—ã –∏–º–µ—é—Ç warehouse_id –∏ warehouse_number")
        elif warehouse_test:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å API —Å–∫–ª–∞–¥–æ–≤ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–æ–≤
        qr_test = next((r for r in self.test_results if "QR –∫–æ–¥–æ–≤" in r["test"]), None)
        if qr_test and qr_test["success"]:
            print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ QR –∫–æ–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif qr_test:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ QR –∫–æ–¥—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        compact_test = next((r for r in self.test_results if "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" in r["test"]), None)
        if compact_test and compact_test["success"]:
            print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR (03010101) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif compact_test:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 80:
            print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è 'Invalid cell code format' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        else:
            print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = QRCargoPlacementTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        sys.exit(1)

if __name__ == "__main__":
    main()