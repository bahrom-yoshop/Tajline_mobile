#!/usr/bin/env python3
"""
üéØ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª–µ cargo_items –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç API POST /api/operator/cargo/accept

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è cargo_items –≤ –º–æ–¥–µ–ª—å CargoWithLocation –≤ —Å—Ç—Ä–æ–∫–µ 741 backend/server.py,
–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ POST /api/operator/cargo/accept –≤ –æ—Ç–≤–µ—Ç–µ API –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ cargo_items 
—Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞–∂–¥–æ–º –≥—Ä—É–∑–µ.

–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. POST /api/operator/cargo/accept —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ cargo_items 
3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø–æ–ª–µ cargo_items —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç cargo_items —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: cargo_name, quantity, weight, price_per_kg, total_amount

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
–û—Ç–≤–µ—Ç API –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å cargo_items: [{"cargo_name": "...", "quantity": 2, ...}, {"cargo_name": "...", "quantity": 3, ...}] 
–¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –Ω–∞ frontend.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

def test_cargo_items_in_api_response():
    """
    üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—è cargo_items –≤ –æ—Ç–≤–µ—Ç API POST /api/operator/cargo/accept
    """
    print("üéØ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª–µ cargo_items –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç API POST /api/operator/cargo/accept")
    print("=" * 120)
    
    # Step 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        login_response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            login_result = login_response.json()
            token = login_result.get("access_token")
            user_info = login_result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {login_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Step 2: POST /api/operator/cargo/accept —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ cargo_items
    print("\n2Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - POST /api/operator/cargo/accept –° –¢–ï–°–¢–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò CARGO_ITEMS")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ review request
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å CargoItems",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å CargoItems", 
        "recipient_phone": "+992900111222",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è CargoItems, 123",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—è cargo_items –≤ –æ—Ç–≤–µ—Ç–µ API",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55\"",
                "quantity": 2,
                "weight": 15.0,
                "price_per_kg": 180.0,
                "total_amount": 5400.0  # 2 * 15.0 * 180.0
            },
            {
                "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG 25L", 
                "quantity": 3,
                "weight": 8.0,
                "price_per_kg": 160.0,
                "total_amount": 3840.0  # 3 * 8.0 * 160.0
            }
        ]
    }
    
    print(f"   üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"      –ì—Ä—É–∑ ‚Ññ1: {cargo_data['cargo_items'][0]['cargo_name']}")
    print(f"      - quantity: {cargo_data['cargo_items'][0]['quantity']}")
    print(f"      - weight: {cargo_data['cargo_items'][0]['weight']} –∫–≥")
    print(f"      - price_per_kg: {cargo_data['cargo_items'][0]['price_per_kg']} ‚ÇΩ/–∫–≥")
    print(f"      - total_amount: {cargo_data['cargo_items'][0]['total_amount']} ‚ÇΩ")
    print(f"      –ì—Ä—É–∑ ‚Ññ2: {cargo_data['cargo_items'][1]['cargo_name']}")
    print(f"      - quantity: {cargo_data['cargo_items'][1]['quantity']}")
    print(f"      - weight: {cargo_data['cargo_items'][1]['weight']} –∫–≥")
    print(f"      - price_per_kg: {cargo_data['cargo_items'][1]['price_per_kg']} ‚ÇΩ/–∫–≥")
    print(f"      - total_amount: {cargo_data['cargo_items'][1]['total_amount']} ‚ÇΩ")
    print(f"      üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {cargo_data['cargo_items'][0]['quantity'] + cargo_data['cargo_items'][1]['quantity']} (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 5 QR –∫–æ–¥–æ–≤)")
    
    try:
        cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
        
        if cargo_response.status_code == 200:
            cargo_result = cargo_response.json()
            cargo_number = cargo_result.get("cargo_number", "Unknown")
            cargo_id = cargo_result.get("cargo_id", "Unknown")
            
            print(f"   üéâ –£–°–ü–ï–• - –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
            
            # Step 3: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –ø–æ–ª–µ cargo_items —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            print(f"\n3Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - –ü–û–õ–ï CARGO_ITEMS –í –û–¢–í–ï–¢–ï API")
            
            if "cargo_items" in cargo_result:
                cargo_items_response = cargo_result["cargo_items"]
                print(f"   ‚úÖ –£–°–ü–ï–•: –ü–æ–ª–µ 'cargo_items' –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ API!")
                print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ cargo_items: {len(cargo_items_response)}")
                
                # Step 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç cargo_items —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                print(f"\n4Ô∏è‚É£ üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –°–û–î–ï–†–ñ–ò–ú–û–ï –ö–ê–ñ–î–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê CARGO_ITEMS")
                
                required_fields = ["cargo_name", "quantity", "weight", "price_per_kg", "total_amount"]
                all_fields_present = True
                
                for i, item in enumerate(cargo_items_response, 1):
                    print(f"   üì¶ –ì—Ä—É–∑ #{i} –≤ –æ—Ç–≤–µ—Ç–µ API:")
                    
                    for field in required_fields:
                        if field in item:
                            value = item[field]
                            print(f"      ‚úÖ {field}: {value}")
                        else:
                            print(f"      ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
                            all_fields_present = False
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
                    if i == 1:  # –ü–µ—Ä–≤—ã–π –≥—Ä—É–∑
                        expected_values = {
                            "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55\"",
                            "quantity": 2,
                            "weight": 15.0,
                            "price_per_kg": 180.0,
                            "total_amount": 5400.0
                        }
                    else:  # –í—Ç–æ—Ä–æ–π –≥—Ä—É–∑
                        expected_values = {
                            "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG 25L",
                            "quantity": 3,
                            "weight": 8.0,
                            "price_per_kg": 160.0,
                            "total_amount": 3840.0
                        }
                    
                    print(f"      üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º:")
                    for field, expected_value in expected_values.items():
                        actual_value = item.get(field)
                        if actual_value == expected_value:
                            print(f"         ‚úÖ {field}: {actual_value} (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç)")
                        else:
                            print(f"         ‚ö†Ô∏è {field}: {actual_value} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_value})")
                
                # Step 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤
                print(f"\n5Ô∏è‚É£ üéØ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í –ù–ê FRONTEND")
                
                total_quantity = sum(item.get("quantity", 0) for item in cargo_items_response)
                print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {total_quantity}")
                print(f"   üè∑Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR –∫–æ–¥–æ–≤ –¥–ª—è frontend:")
                
                qr_index = 1
                for cargo_index, item in enumerate(cargo_items_response, 1):
                    quantity = item.get("quantity", 0)
                    cargo_name = item.get("cargo_name", "Unknown")
                    print(f"      üì¶ {cargo_name} (–ì—Ä—É–∑ #{cargo_index:02d}):")
                    for unit in range(1, quantity + 1):
                        print(f"         üè∑Ô∏è {cargo_number}/{cargo_index:02d}/{unit} (–µ–¥–∏–Ω–∏—Ü–∞ {qr_index})")
                        qr_index += 1
                
                print(f"   ‚úÖ Frontend –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å {total_quantity} QR –∫–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö cargo_items!")
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                if all_fields_present and len(cargo_items_response) == 2 and total_quantity == 5:
                    print(f"\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
                    print(f"   ‚úÖ –ü–æ–ª–µ cargo_items –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API")
                    print(f"   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ")
                    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
                    print(f"   ‚úÖ Frontend –º–æ–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥—ã")
                    return True
                else:
                    print(f"\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–• - –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´:")
                    if not all_fields_present:
                        print(f"   ‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    if len(cargo_items_response) != 2:
                        print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ cargo_items: {len(cargo_items_response)} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 2)")
                    if total_quantity != 5:
                        print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {total_quantity} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 5)")
                    return False
                
            else:
                print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ 'cargo_items' –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ –æ—Ç–≤–µ—Ç–µ API!")
                print(f"   üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {list(cargo_result.keys())}")
                print(f"   üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
                print(json.dumps(cargo_result, indent=4, ensure_ascii=False))
                return False
            
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {cargo_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    
    success = test_cargo_items_in_api_response()
    
    print("\n" + "=" * 120)
    if success:
        print("üéâ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü–æ–ª–µ cargo_items –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç API POST /api/operator/cargo/accept")
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ cargo_items")
        print("‚úÖ Frontend –º–æ–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞")
        print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢!")
    else:
        print("‚ùå –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è cargo_items –≤ –æ—Ç–≤–µ—Ç–µ API")
        print("‚ùå Frontend –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥—ã")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)