#!/usr/bin/env python3
"""
üéØ –°–û–ó–î–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –°–ö–õ–ê–î–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫—É "—è—á–µ–π–∫–∞ –ë2-–ü1-–Ø1 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏. 
–≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Ç–æ–º—É, —á—Ç–æ —É —Å–∫–ª–∞–¥–æ–≤ –≤ –ë–î –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã layout —Å –±–ª–æ–∫–∞–º–∏, –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏.

–ó–ê–î–ê–ß–ê:
1. **–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**: admin@tajline.tj / admin123 (–∏–ª–∏ –Ω–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞)
2. **–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤** –∏ –Ω–∞–π—Ç–∏ —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" 
3. **–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞** —Å –±–ª–æ–∫–∞–º–∏, –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏ –≤–∫–ª—é—á–∞—è:
   - –ë–ª–æ–∫ 1: –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∏ 1-10
   - –ë–ª–æ–∫ 2: –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∏ 1-10 (–≤–∫–ª—é—á–∞—è —è—á–µ–π–∫—É 1 –¥–ª—è "–ë2-–ü1-–Ø1")
   - –ë–ª–æ–∫ 3: –ü–æ–ª–∫–∞ 1-3, –Ø—á–µ–π–∫–∏ 1-10
4. **–û–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥** —á–µ—Ä–µ–∑ API endpoint PUT /api/warehouses/{warehouse_id}/structure
5. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å** QR –∫–æ–¥ —è—á–µ–π–∫–∏ "–ë2-–ü1-–Ø1" —á–µ—Ä–µ–∑ POST /api/operator/placement/verify-cell

–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ï—Å–ª–∏ –Ω–µ—Ç API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
"""

import requests
import json
import os
from datetime import datetime
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class WarehouseStructureTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_user = None
        self.operator_user = None
        self.warehouse_id = None
        self.warehouse_data = None
        self.test_results = []
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        self.log(f"{status} {test_name}: {details}")

    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_credentials = [
                {"phone": "admin@tajline.tj", "password": "admin123"},
                {"phone": "+992000000001", "password": "admin123"},
                {"phone": "admin", "password": "admin123"},
                {"phone": "+79999999999", "password": "admin123"}
            ]
            
            for i, creds in enumerate(admin_credentials):
                self.log(f"–ü–æ–ø—ã—Ç–∫–∞ {i+1}: {creds['phone']}")
                
                response = self.session.post(
                    f"{API_BASE}/auth/login",
                    json=creds,
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    self.admin_token = data.get("access_token")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_response = self.session.get(
                        f"{API_BASE}/auth/me",
                        headers={"Authorization": f"Bearer {self.admin_token}"},
                        timeout=30
                    )
                    
                    if user_response.status_code == 200:
                        self.admin_user = user_response.json()
                        if self.admin_user.get('role') == 'admin':
                            self.log_test(
                                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                True,
                                f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.admin_user.get('full_name')} (—Ä–æ–ª—å: {self.admin_user.get('role')})"
                            )
                            return True
                        else:
                            self.log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {self.admin_user.get('role')}")
                    else:
                        self.log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
                else:
                    self.log(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            return False
            
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            operator_creds = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=operator_creds,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(
                    f"{API_BASE}/auth/me",
                    headers={"Authorization": f"Bearer {self.operator_token}"},
                    timeout=30
                )
                
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_warehouses_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –∏ –ø–æ–∏—Å–∫ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
        try:
            self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
            endpoints = [
                "/admin/warehouses",
                "/warehouses",
                "/operator/warehouses"
            ]
            
            for endpoint in endpoints:
                self.log(f"–ü—Ä–æ–±—É–µ–º endpoint: {endpoint}")
                
                response = self.session.get(
                    f"{API_BASE}{endpoint}",
                    headers={"Authorization": f"Bearer {self.admin_token}"},
                    timeout=30
                )
                
                if response.status_code == 200:
                    warehouses = response.json()
                    self.log(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
                    
                    # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
                    moscow_warehouse = None
                    for warehouse in warehouses:
                        name = warehouse.get('name', '').lower()
                        if '–º–æ—Å–∫–≤–∞' in name and '—Å–∫–ª–∞–¥' in name and '1' in name:
                            moscow_warehouse = warehouse
                            break
                    
                    if moscow_warehouse:
                        self.warehouse_id = moscow_warehouse.get('id')
                        self.warehouse_data = moscow_warehouse
                        self.log_test(
                            "–ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
                            True,
                            f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥: {moscow_warehouse.get('name')} (ID: {self.warehouse_id})"
                        )
                        return True
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã
                        self.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã:")
                        for i, warehouse in enumerate(warehouses):
                            self.log(f"  {i+1}. {warehouse.get('name')} (ID: {warehouse.get('id')})")
                        
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
                        if warehouses:
                            self.warehouse_id = warehouses[0].get('id')
                            self.warehouse_data = warehouses[0]
                            self.log_test(
                                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞",
                                True,
                                f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–ª–∞–¥: {warehouses[0].get('name')} (ID: {self.warehouse_id})"
                            )
                            return True
                else:
                    self.log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ {endpoint}: {response.status_code}")
            
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            return False
            
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def check_warehouse_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞...")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
            endpoints = [
                f"/admin/warehouses/{self.warehouse_id}/structure",
                f"/warehouses/{self.warehouse_id}/structure",
                f"/warehouses/{self.warehouse_id}"
            ]
            
            for endpoint in endpoints:
                self.log(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint: {endpoint}")
                
                response = self.session.get(
                    f"{API_BASE}{endpoint}",
                    headers={"Authorization": f"Bearer {self.admin_token}"},
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    layout = data.get('layout') or data.get('structure') or data.get('blocks')
                    
                    if layout:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                            True,
                            f"–°–∫–ª–∞–¥ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {type(layout)} —Å {len(layout) if isinstance(layout, list) else '–¥–∞–Ω–Ω—ã–º–∏'}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                            False,
                            "–°–∫–ª–∞–¥ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã layout - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ"
                        )
                        return False
                else:
                    self.log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ {endpoint}: {response.status_code}")
            
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            return False
            
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def create_warehouse_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞ —Å –±–ª–æ–∫–∞–º–∏, –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏"""
        try:
            self.log("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞...")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            warehouse_layout = {
                "blocks": [
                    {
                        "number": 1,
                        "shelves": [
                            {
                                "number": 1,
                                "cells": [{"number": i} for i in range(1, 11)]  # –Ø—á–µ–π–∫–∏ 1-10
                            }
                        ]
                    },
                    {
                        "number": 2,
                        "shelves": [
                            {
                                "number": 1,
                                "cells": [{"number": i} for i in range(1, 11)]  # –Ø—á–µ–π–∫–∏ 1-10 (–≤–∫–ª—é—á–∞—è —è—á–µ–π–∫—É 1 –¥–ª—è "–ë2-–ü1-–Ø1")
                            }
                        ]
                    },
                    {
                        "number": 3,
                        "shelves": [
                            {
                                "number": j,
                                "cells": [{"number": i} for i in range(1, 11)]  # –Ø—á–µ–π–∫–∏ 1-10
                            }
                            for j in range(1, 4)  # –ü–æ–ª–∫–∏ 1-3
                        ]
                    }
                ]
            }
            
            self.log(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(warehouse_layout['blocks'])} –±–ª–æ–∫–æ–≤")
            for block in warehouse_layout['blocks']:
                self.log(f"  –ë–ª–æ–∫ {block['number']}: {len(block['shelves'])} –ø–æ–ª–æ–∫")
                for shelf in block['shelves']:
                    self.log(f"    –ü–æ–ª–∫–∞ {shelf['number']}: {len(shelf['cells'])} —è—á–µ–µ–∫")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            endpoints = [
                f"/admin/warehouses/{self.warehouse_id}/structure",
                f"/warehouses/{self.warehouse_id}/structure",
                f"/admin/warehouses/{self.warehouse_id}"
            ]
            
            methods = ['PUT', 'POST', 'PATCH']
            
            for endpoint in endpoints:
                for method in methods:
                    self.log(f"–ü—Ä–æ–±—É–µ–º {method} {endpoint}")
                    
                    try:
                        if method == 'PUT':
                            response = self.session.put(
                                f"{API_BASE}{endpoint}",
                                json={"layout": warehouse_layout},
                                headers={"Authorization": f"Bearer {self.admin_token}"},
                                timeout=30
                            )
                        elif method == 'POST':
                            response = self.session.post(
                                f"{API_BASE}{endpoint}",
                                json={"layout": warehouse_layout},
                                headers={"Authorization": f"Bearer {self.admin_token}"},
                                timeout=30
                            )
                        else:  # PATCH
                            response = self.session.patch(
                                f"{API_BASE}{endpoint}",
                                json={"layout": warehouse_layout},
                                headers={"Authorization": f"Bearer {self.admin_token}"},
                                timeout=30
                            )
                        
                        if response.status_code in [200, 201, 204]:
                            self.log_test(
                                "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞",
                                True,
                                f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ {method} {endpoint}"
                            )
                            return True
                        else:
                            self.log(f"–û—à–∏–±–∫–∞ {method} {endpoint}: {response.status_code} - {response.text}")
                    
                    except Exception as e:
                        self.log(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ {method} {endpoint}: {str(e)}")
            
            # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            self.log("‚ö†Ô∏è API endpoints –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...")
            return self.create_structure_alternative()
            
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def create_structure_alternative(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            
            # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º layout
            warehouse_update = {
                "layout": {
                    "blocks": [
                        {
                            "number": 1,
                            "shelves": [
                                {
                                    "number": 1,
                                    "cells": [{"number": i, "is_occupied": False} for i in range(1, 11)]
                                }
                            ]
                        },
                        {
                            "number": 2,
                            "shelves": [
                                {
                                    "number": 1,
                                    "cells": [{"number": i, "is_occupied": False} for i in range(1, 11)]
                                }
                            ]
                        },
                        {
                            "number": 3,
                            "shelves": [
                                {
                                    "number": j,
                                    "cells": [{"number": i, "is_occupied": False} for i in range(1, 11)]
                                }
                                for j in range(1, 4)
                            ]
                        }
                    ]
                }
            }
            
            # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ
            response = self.session.patch(
                f"{API_BASE}/admin/warehouses/{self.warehouse_id}",
                json=warehouse_update,
                headers={"Authorization": f"Bearer {self.admin_token}"},
                timeout=30
            )
            
            if response.status_code in [200, 201, 204]:
                self.log_test(
                    "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                    True,
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞"
                )
                return True
            else:
                self.log_test(
                    "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                    False,
                    f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {response.status_code} - {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_cell_qr_code(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ '–ë2-–ü1-–Ø1'"""
        try:
            self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ '–ë2-–ü1-–Ø1'...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not self.operator_token:
                self.log("–¢–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                auth_token = self.admin_token
            else:
                auth_token = self.operator_token
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫
            test_qr_codes = [
                "–ë2-–ü1-–Ø1",  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∑–∞–¥–∞—á–∏
                "001-02-01-001",  # –§–æ—Ä–º–∞—Ç —Å ID –Ω–æ–º–µ—Ä–∞–º–∏
                "002-02-01-001",  # –î—Ä—É–≥–æ–π —Å–∫–ª–∞–¥
                "–ë1-–ü1-–Ø1",  # –ë–ª–æ–∫ 1
                "–ë3-–ü2-–Ø5"   # –ë–ª–æ–∫ 3, –ø–æ–ª–∫–∞ 2
            ]
            
            success_count = 0
            
            for qr_code in test_qr_codes:
                self.log(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥: {qr_code}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cell",
                    json={"qr_code": qr_code},
                    headers={"Authorization": f"Bearer {auth_token}"},
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("success"):
                        cell_info = data.get("cell_info", {})
                        self.log(f"  ‚úÖ –Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {cell_info.get('cell_address', qr_code)}")
                        success_count += 1
                    else:
                        error = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        self.log(f"  ‚ùå –Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {error}")
                else:
                    self.log(f"  ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç - QR –∫–æ–¥ –∏–∑ –∑–∞–¥–∞—á–∏
            main_qr_response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": "–ë2-–ü1-–Ø1"},
                headers={"Authorization": f"Bearer {auth_token}"},
                timeout=30
            )
            
            if main_qr_response.status_code == 200:
                main_data = main_qr_response.json()
                if main_data.get("success"):
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ '–ë2-–ü1-–Ø1'",
                        True,
                        f"QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω! –Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {main_data.get('cell_info', {}).get('cell_address', '–ë2-–ü1-–Ø1')}"
                    )
                    return True
                else:
                    error = main_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    if "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error.lower():
                        self.log_test(
                            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ '–ë2-–ü1-–Ø1'",
                            False,
                            f"–û—à–∏–±–∫–∞ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {error}. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
                        )
                    else:
                        self.log_test(
                            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ '–ë2-–ü1-–Ø1'",
                            False,
                            f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {error}"
                        )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ '–ë2-–ü1-–Ø1'",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {main_qr_response.status_code} - {main_qr_response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def verify_warehouse_structure_created(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞"""
        try:
            self.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ
            response = self.session.get(
                f"{API_BASE}/admin/warehouses/{self.warehouse_id}",
                headers={"Authorization": f"Bearer {self.admin_token}"},
                timeout=30
            )
            
            if response.status_code == 200:
                warehouse_data = response.json()
                layout = warehouse_data.get('layout') or warehouse_data.get('structure')
                
                if layout and layout.get('blocks'):
                    blocks = layout.get('blocks', [])
                    total_cells = 0
                    
                    self.log("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞:")
                    for block in blocks:
                        block_num = block.get('number')
                        shelves = block.get('shelves', [])
                        self.log(f"  –ë–ª–æ–∫ {block_num}: {len(shelves)} –ø–æ–ª–æ–∫")
                        
                        for shelf in shelves:
                            shelf_num = shelf.get('number')
                            cells = shelf.get('cells', [])
                            total_cells += len(cells)
                            self.log(f"    –ü–æ–ª–∫–∞ {shelf_num}: {len(cells)} —è—á–µ–µ–∫")
                    
                    expected_cells = 10 + 10 + (10 * 3)  # –ë–ª–æ–∫1: 10, –ë–ª–æ–∫2: 10, –ë–ª–æ–∫3: 30
                    
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                        True,
                        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(blocks)} –±–ª–æ–∫–æ–≤, {total_cells} —è—á–µ–µ–∫ (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_cells})"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                        False,
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞"""
        self.log("üéØ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞ –¥–ª—è QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫")
        self.log("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # –≠—Ç–∞–ø 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not self.authenticate_operator():
            self.log("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
        
        # –≠—Ç–∞–ø 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
        if not self.get_warehouses_list():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        has_structure = self.check_warehouse_structure()
        
        # –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if not has_structure:
            if not self.create_warehouse_structure():
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞")
                return False
        else:
            self.log("‚ÑπÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
        
        # –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if not self.verify_warehouse_structure_created():
            self.log("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        # –≠—Ç–∞–ø 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏
        qr_test_success = self.test_cell_qr_code()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.log("=" * 80)
        self.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        passed_tests = sum(1 for result in self.test_results if result["success"])
        total_tests = len(self.test_results)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            self.log(f"  {status} {result['test']}: {result['details']}")
        
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        self.log(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if qr_test_success:
            self.log("üéâ –£–°–ü–ï–•: QR –∫–æ–¥ —è—á–µ–π–∫–∏ '–ë2-–ü1-–Ø1' —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            self.log("‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ—à–∏–±–∫–∞ '—è—á–µ–π–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: QR –∫–æ–¥ —è—á–µ–π–∫–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.log("üîß –¢–†–ï–ë–£–ï–¢–°–Ø: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —è—á–µ–µ–∫")
        
        return qr_test_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseStructureTester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–∞, QR –∫–æ–¥—ã —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞")
        return 1

if __name__ == "__main__":
    exit(main())