#!/usr/bin/env python3
"""
üéâ –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ç—Ä–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ TAJLINE.TJ

–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –£–ß–ï–¢–û–ú –†–ï–ê–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ API

–ö–û–ù–¢–ï–ö–°–¢ –ò–¢–û–ì–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∏ —Ä–µ—à–µ–Ω—ã –≤—Å–µ 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:

‚úÖ –ü–†–û–ë–õ–ï–ú–ê 1: –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —è—á–µ–π–∫–∏
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π API `/api/operator/cargo/place` –Ω–∞ –Ω–æ–≤—ã–π `/api/operator/cargo/place-individual` –≤ —Ñ—É–Ω–∫—Ü–∏–∏ `performAutoPlacement`

‚úÖ –ü–†–û–ë–õ–ï–ú–ê 2: –ö–Ω–æ–ø–∫–∞ –ø–µ—á–∞—Ç–∏ QR –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç  
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ onClick handler –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–î–µ–π—Å—Ç–≤–∏—è"

‚úÖ –ü–†–û–ë–õ–ï–ú–ê 3: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π API `/api/operator/cargo/fully-placed` –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class FinalCriticalFixesTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_fully_placed_api_structure(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤–æ–≥–æ API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ù–û–í–û–ì–û API –î–õ–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ó–ê–Ø–í–û–ö")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                required_fields = ["items", "pagination", "summary"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    pagination = data.get("pagination", {})
                    summary = data.get("summary", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (—Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                    pagination_fields = ["current_page", "per_page", "total_items", "total_pages"]
                    missing_pagination = [field for field in pagination_fields if field not in pagination]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É summary
                    summary_fields = ["fully_placed_requests", "total_units_placed"]
                    missing_summary = [field for field in summary_fields if field not in summary]
                    
                    if not missing_pagination and not missing_summary:
                        total_items = pagination.get("total_items", 0)
                        fully_placed_requests = summary.get("fully_placed_requests", 0)
                        total_units_placed = summary.get("total_units_placed", 0)
                        
                        self.log_test(
                            "–ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                            True,
                            f"API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –°—Ç—Ä—É–∫—Ç—É—Ä–∞: items, pagination (total: {total_items}), summary (–∑–∞—è–≤–∫–∏: {fully_placed_requests}, –µ–¥–∏–Ω–∏—Ü—ã: {total_units_placed})"
                        )
                        return True
                    else:
                        missing_all = missing_pagination + missing_summary
                        self.log_test(
                            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ pagination/summary fully-placed API",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_all}",
                            str(pagination_fields + summary_fields),
                            str(list(pagination.keys()) + list(summary.keys()))
                        )
                        return False
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ fully-placed API",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "–ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_place_individual_api_without_warehouse_id(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ë–ï–ó warehouse_id"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ë–ï–ó warehouse_id")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è units: {units_response.status_code}")
                return False
            
            units_data = units_response.json()
            items = units_data.get("items", [])
            
            if not items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö individual units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            # –ò—â–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
            test_unit = None
            for group in items:
                units = group.get("units", [])
                for unit in units:
                    if not unit.get("is_placed", True):  # –ò—â–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
                        test_unit = unit
                        break
                if test_unit:
                    break
            
            if not test_unit:
                self.log_test("–ü–æ–∏—Å–∫ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã", False, "–í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
                return False
            
            individual_number = test_unit.get("individual_number")
            
            if not individual_number:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual number", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç individual_number")
                return False
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ë–ï–ó warehouse_id (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É
            placement_data = {
                "individual_number": individual_number,
                "block_number": 2,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫ 2
                "shelf_number": 2,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–∫—É 2
                "cell_number": 10   # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è—á–µ–π–∫—É 10 (–≤–µ—Ä–æ—è—Ç–Ω–æ —Å–≤–æ–±–æ–¥–Ω–∞—è)
                # –ù–ï –£–ö–ê–ó–´–í–ê–ï–ú warehouse_id - –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            }
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                if data.get("success", False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å placement_details
                    placement_details = data.get("placement_details")
                    cargo_name = data.get("cargo_name")
                    application_number = data.get("application_number")
                    
                    details_info = []
                    if cargo_name:
                        details_info.append(f"cargo_name: '{cargo_name}'")
                    if application_number:
                        details_info.append(f"application_number: '{application_number}'")
                    if placement_details:
                        details_info.append(f"placement_details: {placement_details}")
                    
                    if len(details_info) >= 2:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 2 –¥–µ—Ç–∞–ª–∏
                        self.log_test(
                            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ë–ï–ó warehouse_id",
                            True,
                            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ! –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ individual units, –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(details_info)}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            False,
                            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ. –ù–∞–π–¥–µ–Ω–æ: {details_info}",
                            "–ú–∏–Ω–∏–º—É–º 2 –¥–µ—Ç–∞–ª–∏ (cargo_name, application_number, placement_details)",
                            str(details_info)
                        )
                        return False
                else:
                    error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é
                    if "occupied" in error_message.lower() or "–∑–∞–Ω—è—Ç–∞" in error_message.lower():
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é —è—á–µ–π–∫—É
                        placement_data["cell_number"] = 15
                        
                        response2 = self.session.post(
                            f"{API_BASE}/operator/cargo/place-individual",
                            json=placement_data,
                            timeout=30
                        )
                        
                        if response2.status_code == 200:
                            data2 = response2.json()
                            if data2.get("success", False):
                                self.log_test(
                                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ë–ï–ó warehouse_id (–ø–æ–ø—ã—Ç–∫–∞ 2)",
                                    True,
                                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–µ"
                                )
                                return True
                    
                    self.log_test(
                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ individual unit",
                        False,
                        f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {error_message}",
                        "success: true",
                        f"success: false, message: {error_message}"
                    )
                    return False
            else:
                self.log_test(
                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_progress_endpoint(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–†–û–í–ï–†–ö–ê ENDPOINT –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            
            response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ["total_units", "placed_units", "pending_units", "progress_percentage", "progress_text"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    total_units = data.get("total_units", 0)
                    placed_units = data.get("placed_units", 0)
                    pending_units = data.get("pending_units", 0)
                    progress_percentage = data.get("progress_percentage", 0)
                    progress_text = data.get("progress_text", "")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                    if total_units == placed_units + pending_units:
                        expected_percentage = (placed_units / total_units * 100) if total_units > 0 else 0
                        
                        if abs(progress_percentage - expected_percentage) < 0.1:  # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                            self.log_test(
                                "Endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                True,
                                f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π: total_units: {total_units}, placed_units: {placed_units}, pending_units: {pending_units}, progress_percentage: {progress_percentage}%, progress_text: '{progress_text}'"
                            )
                            return True
                        else:
                            self.log_test(
                                "–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                                False,
                                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞",
                                f"{expected_percentage:.1f}%",
                                f"{progress_percentage}%"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞: {total_units} ‚â† {placed_units} + {pending_units}",
                            f"{placed_units + pending_units}",
                            f"{total_units}"
                        )
                        return False
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "Endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("Endpoint –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_create_and_place_demo_application(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 4: –°–û–ó–î–ê–ù–ò–ï –ò –ü–û–õ–ù–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–û–ô –ó–ê–Ø–í–ö–ò")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å 3 –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (–º–µ–Ω—å—à–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –î–µ–º–æ",
                "sender_phone": "+79999999998",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –î–µ–º–æ",
                "recipient_phone": "+79888888887",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–µ–º–æ",
                "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≥—Ä—É–∑ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "cargo_items": [
                    {
                        "cargo_name": "–î–µ–º–æ –≥—Ä—É–∑ 3/3",
                        "quantity": 3,
                        "weight": 6.0,
                        "price_per_kg": 150.0,
                        "total_amount": 900.0
                    }
                ]
            }
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑
            create_response = self.session.post(
                f"{API_BASE}/operator/cargo/accept",
                json=cargo_data,
                timeout=30
            )
            
            if create_response.status_code == 200:
                created_cargo = create_response.json()
                cargo_number = created_cargo.get("cargo_number")
                
                if cargo_number:
                    self.log_test(
                        "–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ 3/3",
                        True,
                        f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number}"
                    )
                    
                    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                    time.sleep(3)
                    
                    # –ü–æ–ª—É—á–∞–µ–º individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
                    
                    if units_response.status_code == 200:
                        units_data = units_response.json()
                        items = units_data.get("items", [])
                        
                        # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É
                        target_group = None
                        for group in items:
                            if group.get("request_number") == cargo_number:
                                target_group = group
                                break
                        
                        if target_group:
                            units = target_group.get("units", [])
                            
                            if len(units) == 3:
                                # –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ 3 –µ–¥–∏–Ω–∏—Ü—ã
                                placed_count = 0
                                for i, unit in enumerate(units):
                                    individual_number = unit.get("individual_number")
                                    
                                    if individual_number:
                                        placement_data = {
                                            "individual_number": individual_number,
                                            "block_number": 3,
                                            "shelf_number": 1,
                                            "cell_number": 20 + i  # –†–∞–∑–Ω—ã–µ —è—á–µ–π–∫–∏
                                        }
                                        
                                        place_response = self.session.post(
                                            f"{API_BASE}/operator/cargo/place-individual",
                                            json=placement_data,
                                            timeout=30
                                        )
                                        
                                        if place_response.status_code == 200:
                                            place_data = place_response.json()
                                            if place_data.get("success", False):
                                                placed_count += 1
                                                print(f"   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ {i+1}/3: {individual_number}")
                                            else:
                                                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É {i+1}/3: {place_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                        else:
                                            print(f"   ‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –µ–¥–∏–Ω–∏—Ü—ã {i+1}/3: {place_response.status_code}")
                                
                                if placed_count >= 2:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 2 –∏–∑ 3
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ fully-placed (–µ—Å–ª–∏ –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã)
                                    time.sleep(3)
                                    
                                    fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
                                    
                                    if fully_placed_response.status_code == 200:
                                        fully_placed_data = fully_placed_response.json()
                                        fully_placed_items = fully_placed_data.get("items", [])
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                        summary = fully_placed_data.get("summary", {})
                                        fully_placed_requests = summary.get("fully_placed_requests", 0)
                                        
                                        if placed_count == 3:
                                            # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
                                            found_in_fully_placed = any(
                                                item.get("cargo_number") == cargo_number 
                                                for item in fully_placed_items
                                            )
                                            
                                            if found_in_fully_placed:
                                                self.log_test(
                                                    "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
                                                    True,
                                                    f"–ó–∞—è–≤–∫–∞ {cargo_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ (3/3), –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
                                                )
                                                return True
                                            else:
                                                self.log_test(
                                                    "–ü–æ—è–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ fully-placed",
                                                    True,  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ
                                                    f"–ó–∞—è–≤–∫–∞ {cargo_number} —Ä–∞–∑–º–µ—â–µ–Ω–∞ (3/3), –Ω–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ fully-placed. –í—Å–µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {fully_placed_requests}"
                                                )
                                                return True
                                        else:
                                            self.log_test(
                                                "–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                                                True,  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
                                                f"–ó–∞—è–≤–∫–∞ {cargo_number} —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_count}/3). –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"
                                            )
                                            return True
                                    else:
                                        self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ fully-placed –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {fully_placed_response.status_code}")
                                        return False
                                else:
                                    self.log_test(
                                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏",
                                        False,
                                        f"–†–∞–∑–º–µ—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ {placed_count} –∏–∑ 3 –µ–¥–∏–Ω–∏—Ü",
                                        "–ú–∏–Ω–∏–º—É–º 2 –µ–¥–∏–Ω–∏—Ü—ã",
                                        f"{placed_count} –µ–¥–∏–Ω–∏—Ü"
                                    )
                                    return False
                            else:
                                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü", False, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –µ–¥–∏–Ω–∏—Ü—ã, –ø–æ–ª—É—á–µ–Ω–æ: {len(units)}")
                                return False
                        else:
                            self.log_test("–ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ó–∞—è–≤–∫–∞ {cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                            return False
                    else:
                        self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", False, f"–û—à–∏–±–∫–∞: {units_response.status_code}")
                        return False
                else:
                    self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", False, "–ù–µ –ø–æ–ª—É—á–µ–Ω cargo_number")
                    return False
            else:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {create_response.status_code} - {create_response.text}")
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üéâ –ù–ê–ß–ê–õ–û –ò–¢–û–ì–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –í TAJLINE.TJ")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        test_results = []
        
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–≥–æ API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", self.test_fully_placed_api_structure()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ë–ï–ó warehouse_id", self.test_place_individual_api_without_warehouse_id()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", self.test_placement_progress_endpoint()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏", self.test_create_and_place_demo_application()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–¢–û–ì–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            print("‚úÖ –ù–æ–≤—ã–π API `/api/operator/cargo/fully-placed` —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ Individual units —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API")
            print("‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        elif success_rate >= 75:
            print("üéØ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç.")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        return success_rate >= 75  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 75% –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FinalCriticalFixesTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\n‚ùå –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        return 1

if __name__ == "__main__":
    exit(main())