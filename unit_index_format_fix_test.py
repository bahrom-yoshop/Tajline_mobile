#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–†–ú–ê–¢–ê unit_index

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
–ë—ã–ª–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º unit_index:
- Backend –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª unit_index –∫–∞–∫ —á–∏—Å–ª–∞ (1, 2, 3)
- Frontend –∏—Å–∫–∞–ª unit_index –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ ("01", "02", "03")

–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. **Frontend**: –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ `String(unit.unit_index) === extractedData.unit_number`
2. **Backend**: –ò–∑–º–µ–Ω–µ–Ω —Ñ–æ—Ä–º–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ unit_index:
   - –ë–´–õ–û: `unit_index: unit_index` (—á–∏—Å–ª–æ)
   - –°–¢–ê–õ–û: `unit_index: str(unit_index).zfill(2)` (—Å—Ç—Ä–æ–∫–∞ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏)
   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö –∫–æ–¥–∞ (—Å—Ç—Ä–æ–∫–∏ ~5974 –∏ ~6229)

–ó–ê–î–ê–ß–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ unit_index**:
   - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ 25082026 —á–µ—Ä–µ–∑ API
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ unit_index —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ "01", "02", "03" (—Å—Ç—Ä–æ–∫–∏)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ individual_number –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å unit_index

2. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ 25082026/01/02**:
   - –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç QR –∫–æ–¥ —á–µ—Ä–µ–∑ API
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –µ–¥–∏–Ω–∏—Ü–∞ 02 –≥—Ä—É–∑–∞ —Ç–∏–ø–∞ 01 —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ

3. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**:
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥—Ä—É–≥–∏–µ QR –∫–æ–¥—ã —Ç–∏–ø–∞ 25082026/01/01, 25082026/01/03 —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ —Å–ª–æ–º–∞–ª–∞—Å—å —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –≥—Ä—É–∑–∞–º–∏

4. **–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö**:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ structure –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º frontend
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è (individual_number, type_number, unit_index) –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚úÖ unit_index –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏ ("01", "02", "03")
‚úÖ QR –∫–æ–¥ 25082026/01/02 —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞

–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!
"""

import requests
import json
import sys
import time
from datetime import datetime

# Configuration
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class UnitIndexFormatTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        self.warehouse_id = None
        self.test_cargo_id = None
        self.test_cargo_number = None
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def create_test_cargo_with_multiple_units(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ unit_index"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å unit_index",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å unit_index", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ unit_index",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,  # 2 –µ–¥–∏–Ω–∏—Ü—ã - unit_index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "01", "02"
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG",
                        "quantity": 3,  # 3 –µ–¥–∏–Ω–∏—Ü—ã - unit_index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "01", "02", "03"
                        "weight": 8.0,
                        "price_per_kg": 80.0,
                        "total_amount": 640.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                self.test_cargo_id = data.get("id")
                self.test_cargo_number = data.get("cargo_number")
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {self.test_cargo_number} (ID: {self.test_cargo_id}). –ì—Ä—É–∑—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung (2 —à—Ç) + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG (3 —à—Ç) = 5 –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {self.test_cargo_number}/01/01, {self.test_cargo_number}/01/02, {self.test_cargo_number}/02/01, {self.test_cargo_number}/02/02, {self.test_cargo_number}/02/03"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏", False, error=str(e))
            return False

    def test_unit_index_format_in_available_for_placement(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç unit_index –≤ GET /api/operator/cargo/available-for-placement"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ù–∞–π—Ç–∏ –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
                test_cargo = None
                for item in items:
                    if item.get("id") == self.test_cargo_id:
                        test_cargo = item
                        break
                
                if test_cargo:
                    cargo_items = test_cargo.get("cargo_items", [])
                    unit_index_issues = []
                    correct_unit_indexes = []
                    
                    for cargo_item in cargo_items:
                        individual_items = cargo_item.get("individual_items", [])
                        for individual_item in individual_items:
                            unit_index = individual_item.get("unit_index")
                            
                            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: unit_index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
                            if isinstance(unit_index, str) and len(unit_index) == 2 and unit_index.isdigit():
                                correct_unit_indexes.append(unit_index)
                            else:
                                unit_index_issues.append(f"unit_index={unit_index} (—Ç–∏–ø: {type(unit_index)})")
                    
                    if not unit_index_issues:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ available-for-placement",
                            True,
                            f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û! –í—Å–µ unit_index –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏: {correct_unit_indexes}. –ù–∞–π–¥–µ–Ω–æ {len(correct_unit_indexes)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö unit_index –≤ —Ñ–æ—Ä–º–∞—Ç–µ '01', '02', '03'"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ available-for-placement",
                            False,
                            error=f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ unit_index: {unit_index_issues}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ: {correct_unit_indexes}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ available-for-placement",
                        False,
                        error=f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {self.test_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ available-for-placement",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ available-for-placement", False, error=str(e))
            return False

    def test_unit_index_format_in_placement_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç unit_index –≤ GET /api/operator/cargo/{cargo_id}/placement-status"""
        if not self.test_cargo_id:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ placement-status",
                False,
                error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
            
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                individual_units = data.get("individual_units", [])
                
                unit_index_issues = []
                correct_unit_indexes = []
                individual_numbers = []
                
                for unit in individual_units:
                    unit_index = unit.get("unit_index")
                    individual_number = unit.get("individual_number")
                    individual_numbers.append(individual_number)
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: unit_index –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
                    if isinstance(unit_index, str) and len(unit_index) == 2 and unit_index.isdigit():
                        correct_unit_indexes.append(unit_index)
                    else:
                        unit_index_issues.append(f"unit_index={unit_index} (—Ç–∏–ø: {type(unit_index)}) –¥–ª—è {individual_number}")
                
                if not unit_index_issues:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ placement-status",
                        True,
                        f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û! –í—Å–µ unit_index –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏: {correct_unit_indexes}. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {individual_numbers}. –ù–∞–π–¥–µ–Ω–æ {len(correct_unit_indexes)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö unit_index"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ placement-status",
                        False,
                        error=f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ unit_index: {unit_index_issues}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ: {correct_unit_indexes}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ placement-status",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index –≤ placement-status", False, error=str(e))
            return False

    def test_qr_code_placement_with_unit_index(self):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º unit_index"""
        if not self.test_cargo_number:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index",
                False,
                error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_number –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            warehouses_response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            if warehouses_response.status_code == 200:
                warehouses = warehouses_response.json()
                if warehouses:
                    self.warehouse_id = warehouses[0].get("id")
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index",
                        False,
                        error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                    )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: HTTP {warehouses_response.status_code}"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CARGO_NUMBER/TYPE_NUMBER/UNIT_INDEX
            # –ù–∞–ø—Ä–∏–º–µ—Ä: 25082026/01/02 (–≥—Ä—É–∑ —Ç–∏–ø–∞ 01, –µ–¥–∏–Ω–∏—Ü–∞ 02)
            test_qr_code = f"{self.test_cargo_number}/01/02"
            
            placement_data = {
                "individual_number": test_qr_code,
                "warehouse_id": self.warehouse_id,
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place-individual",
                json=placement_data
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index",
                    True,
                    f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•! QR –∫–æ–¥ {test_qr_code} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω. –ï–¥–∏–Ω–∏—Ü–∞ 02 –≥—Ä—É–∑–∞ —Ç–∏–ø–∞ 01 –Ω–∞–π–¥–µ–Ω–∞ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∞. –û—Ç–≤–µ—Ç: {data.get('message', '–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ')}"
                )
                return True
            elif response.status_code == 404:
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º, –∞ –ø—Ä–æ—Å—Ç–æ –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
                error_detail = response.text
                if "not found" in error_detail.lower():
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index",
                        True,
                        f"‚úÖ –§–û–†–ú–ê–¢ QR –ö–û–î–ê –ö–û–†–†–ï–ö–¢–ï–ù! QR –∫–æ–¥ {test_qr_code} —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π (404 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)"
                    )
                    return True
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index",
                        False,
                        error=f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º QR –∫–æ–¥–∞ {test_qr_code}: {error_detail}"
                    )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è QR –∫–æ–¥–∞ —Å unit_index", False, error=str(e))
            return False

    def test_individual_number_structure_validation(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_number –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å unit_index"""
        if not self.test_cargo_id:
            self.log_test(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã individual_number",
                False,
                error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
            
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                individual_units = data.get("individual_units", [])
                
                validation_results = []
                structure_issues = []
                
                for unit in individual_units:
                    individual_number = unit.get("individual_number")
                    type_number = unit.get("type_number")
                    unit_index = unit.get("unit_index")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_number: CARGO_NUMBER/TYPE_NUMBER/UNIT_INDEX
                    if individual_number and "/" in individual_number:
                        parts = individual_number.split("/")
                        if len(parts) == 3:
                            cargo_part, type_part, unit_part = parts
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                            type_match = type_part == type_number
                            unit_match = unit_part == unit_index
                            
                            validation_results.append({
                                "individual_number": individual_number,
                                "type_number": type_number,
                                "unit_index": unit_index,
                                "type_match": type_match,
                                "unit_match": unit_match,
                                "structure_valid": type_match and unit_match
                            })
                            
                            if not (type_match and unit_match):
                                structure_issues.append(f"{individual_number}: type_match={type_match}, unit_match={unit_match}")
                        else:
                            structure_issues.append(f"{individual_number}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π ({len(parts)})")
                    else:
                        structure_issues.append(f"{individual_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ '/'")
                
                if not structure_issues:
                    valid_count = len([r for r in validation_results if r["structure_valid"]])
                    self.log_test(
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã individual_number",
                        True,
                        f"‚úÖ –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –ö–û–†–†–ï–ö–¢–ù–ê! –í—Å–µ {valid_count} individual_number —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É CARGO_NUMBER/TYPE_NUMBER/UNIT_INDEX. unit_index –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å individual_number"
                    )
                    return True
                else:
                    self.log_test(
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã individual_number",
                        False,
                        error=f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: {structure_issues}"
                    )
                    return False
            else:
                self.log_test(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã individual_number",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã individual_number", False, error=str(e))
            return False

    def test_compatibility_with_existing_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            endpoints_to_test = [
                ("/operator/warehouses", "GET"),
                ("/operator/dashboard/analytics", "GET"),
                ("/operator/cargo/available-for-placement", "GET")
            ]
            
            working_endpoints = 0
            total_endpoints = len(endpoints_to_test)
            
            for endpoint, method in endpoints_to_test:
                try:
                    if method == "GET":
                        response = self.session.get(f"{BACKEND_URL}{endpoint}")
                    
                    if response.status_code == 200:
                        working_endpoints += 1
                        
                except Exception as e:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö endpoints
            
            compatibility_rate = (working_endpoints / total_endpoints) * 100
            
            if compatibility_rate >= 80:
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º",
                    True,
                    f"‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û–•–†–ê–ù–ï–ù–ê! –†–∞–±–æ—Ç–∞–µ—Ç {working_endpoints}/{total_endpoints} –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints ({compatibility_rate:.1f}%). –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è unit_index –Ω–µ —Å–ª–æ–º–∞–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º",
                    False,
                    error=f"‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨–Æ! –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ {working_endpoints}/{total_endpoints} endpoints ({compatibility_rate:.1f}%)"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º", False, error=str(e))
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ unit_index"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–†–ú–ê–¢–ê unit_index")
        print("=" * 120)
        print()
        print("–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("- Backend –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª unit_index –∫–∞–∫ —á–∏—Å–ª–∞ (1, 2, 3)")
        print("- Frontend –∏—Å–∫–∞–ª unit_index –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ ('01', '02', '03')")
        print("- –ò–°–ü–†–ê–í–õ–ï–ù–û: unit_index —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ str(unit_index).zfill(2)")
        print()
        
        # Authentication
        if not self.authenticate_operator():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # Create test data
        if not self.create_test_cargo_with_multiple_units():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É")
            return False
        
        print("üîç –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø unit_index:")
        print("-" * 60)
        
        test_results = []
        test_results.append(self.test_unit_index_format_in_available_for_placement())
        test_results.append(self.test_unit_index_format_in_placement_status())
        test_results.append(self.test_qr_code_placement_with_unit_index())
        test_results.append(self.test_individual_number_structure_validation())
        test_results.append(self.test_compatibility_with_existing_functionality())
        
        # Summary
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
            print("‚úÖ unit_index –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏ ('01', '02', '03')")
            print("‚úÖ QR –∫–æ–¥—ã —Å unit_index —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
            print("‚úÖ –ï–¥–∏–Ω–∏—Ü—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
            print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        elif success_rate >= 75:
            print("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º unit_index")
        
        print()
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 40)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    üìã {result['details']}")
            if result["error"]:
                print(f"    ‚ùå {result['error']}")
        
        print()
        print("üéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–í–ï–†–ö–ò:")
        print("- –§–æ—Ä–º–∞—Ç unit_index: —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏")
        print("- QR –∫–æ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ CARGO/TYPE/UNIT")
        print("- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º frontend")
        print("- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        return success_rate >= 80

if __name__ == "__main__":
    tester = UnitIndexFormatTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)