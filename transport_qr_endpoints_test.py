#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoints –¥–ª—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–≠—Ç–∞–ø 1)
=============================================================================

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å QR –∫–æ–¥–∞–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ 
—Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç - –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞".

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. POST /api/transport/{transport_id}/generate-qr - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
2. GET /api/transport/{transport_id}/qr - –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞  
3. POST /api/transport/{transport_id}/print-qr - –ü–µ—á–∞—Ç—å QR –∫–æ–¥–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞)
4. GET /api/transport/list-with-qr - –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å warehouse_operator (+79777888999/warehouse123)
2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR: –°–æ–∑–¥–∞—Ç—å QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TRANSPORT_{transport_number}_{timestamp}
3. QR –¥–∞–Ω–Ω—ã–µ: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è qr_code, qr_generated_at, qr_generated_by, qr_print_count
4. –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏: –î–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ print-qr
5. –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å has_qr_code –∏ qr_print_count –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
6. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Transport –º–æ–¥–µ–ª–∏: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- ‚úÖ –í—Å–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ  
- ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ transport
- ‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1)
- ‚úÖ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR —Å—Ç–∞—Ç—É—Å
- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç (404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤)
"""

import requests
import json
import sys
import os
import re
from datetime import datetime
from typing import Dict, List, Optional, Any

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class TransportQREndpointsTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "transport_list_success": False,
            "qr_generation_success": False,
            "qr_data_retrieval_success": False,
            "qr_print_counter_success": False,
            "transport_model_validation_success": False,
            "error_handling_success": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "test_details": []
        }
        self.test_transport_id = None
        self.test_transport_number = None
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def add_test_result(self, test_name: str, success: bool, details: str = "", response_time: int = 0):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results["total_tests"] += 1
        if success:
            self.test_results["passed_tests"] += 1
        else:
            self.test_results["failed_tests"] += 1
            
        self.test_results["test_details"].append({
            "test_name": test_name,
            "success": success,
            "details": details,
            "response_time_ms": response_time,
            "timestamp": datetime.now().isoformat()
        })
        
    def authenticate_warehouse_operator(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            start_time = datetime.now()
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                operator_name = self.operator_info.get('full_name', 'Unknown')
                operator_role = self.operator_info.get('role', 'Unknown')
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (—Ä–æ–ª—å: {operator_role})")
                self.test_results["auth_success"] = True
                self.add_test_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (—Ä–æ–ª—å: {operator_role})",
                    response_time
                )
                return True
            else:
                error_msg = f"HTTP {response.status_code} - {response.text}"
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_msg}", "ERROR")
                self.add_test_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_msg}",
                    response_time
                )
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            self.add_test_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
            return False
    
    def test_transport_list_with_qr(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/transport/list-with-qr"""
        self.log("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/transport/list-with-qr...")
        
        try:
            start_time = datetime.now()
            response = self.session.get(f"{API_BASE}/transport/list-with-qr")
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["transports", "total_count", "with_qr_count", "without_qr_count"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        "GET /api/transport/list-with-qr - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        error_msg,
                        response_time
                    )
                    return False
                
                transports = data.get("transports", [])
                total_count = data.get("total_count", 0)
                with_qr_count = data.get("with_qr_count", 0)
                without_qr_count = data.get("without_qr_count", 0)
                
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {total_count} –≤—Å–µ–≥–æ, {with_qr_count} —Å QR, {without_qr_count} –±–µ–∑ QR")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                if transports:
                    transport = transports[0]
                    transport_fields = ["id", "transport_number", "has_qr_code", "qr_print_count"]
                    missing_transport_fields = [field for field in transport_fields if field not in transport]
                    
                    if missing_transport_fields:
                        error_msg = f"–í —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_transport_fields}"
                        self.log(f"‚ùå {error_msg}", "ERROR")
                        self.add_test_result(
                            "GET /api/transport/list-with-qr - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                            False,
                            error_msg,
                            response_time
                        )
                        return False
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                    self.test_transport_id = transport.get("id")
                    self.test_transport_number = transport.get("transport_number")
                    
                    self.log(f"üöõ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {self.test_transport_number} (ID: {self.test_transport_id})")
                
                self.test_results["transport_list_success"] = True
                self.add_test_result(
                    "GET /api/transport/list-with-qr",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {total_count} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞",
                    response_time
                )
                return True
            else:
                error_msg = f"HTTP {response.status_code} - {response.text}"
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {error_msg}", "ERROR")
                self.add_test_result(
                    "GET /api/transport/list-with-qr",
                    False,
                    f"–û—à–∏–±–∫–∞ API: {error_msg}",
                    response_time
                )
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {e}", "ERROR")
            self.add_test_result(
                "GET /api/transport/list-with-qr",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
            return False
    
    def test_qr_generation(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/transport/{transport_id}/generate-qr"""
        if not self.test_transport_id:
            self.log("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR", "ERROR")
            return False
            
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/transport/{self.test_transport_id}/generate-qr...")
        
        try:
            start_time = datetime.now()
            response = self.session.post(f"{API_BASE}/transport/{self.test_transport_id}/generate-qr")
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["message", "transport_id", "qr_code", "generated_at", "generated_by"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        f"POST /api/transport/{self.test_transport_id}/generate-qr - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        error_msg,
                        response_time
                    )
                    return False
                
                qr_code = data.get("qr_code")
                generated_by = data.get("generated_by")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞
                expected_pattern = f"TRANSPORT_{self.test_transport_number}_\\d{{8}}_\\d{{6}}"
                if not re.match(expected_pattern, qr_code):
                    error_msg = f"QR –∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É. –ü–æ–ª—É—á–µ–Ω: {qr_code}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        f"POST /api/transport/{self.test_transport_id}/generate-qr - —Ñ–æ—Ä–º–∞—Ç QR",
                        False,
                        error_msg,
                        response_time
                    )
                    return False
                
                self.log(f"‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {qr_code}")
                self.log(f"üë§ –°–æ–∑–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {generated_by}")
                
                self.test_results["qr_generation_success"] = True
                self.add_test_result(
                    f"POST /api/transport/{self.test_transport_id}/generate-qr",
                    True,
                    f"QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {qr_code}, —Å–æ–∑–¥–∞–Ω: {generated_by}",
                    response_time
                )
                return True
            else:
                error_msg = f"HTTP {response.status_code} - {response.text}"
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {error_msg}", "ERROR")
                self.add_test_result(
                    f"POST /api/transport/{self.test_transport_id}/generate-qr",
                    False,
                    f"–û—à–∏–±–∫–∞ API: {error_msg}",
                    response_time
                )
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {e}", "ERROR")
            self.add_test_result(
                f"POST /api/transport/{self.test_transport_id}/generate-qr",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
            return False
    
    def test_qr_data_retrieval(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/transport/{transport_id}/qr"""
        if not self.test_transport_id:
            self.log("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö", "ERROR")
            return False
            
        self.log(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/transport/{self.test_transport_id}/qr...")
        
        try:
            start_time = datetime.now()
            response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}/qr")
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["transport_id", "transport_number", "qr_code", "qr_generated_at", "qr_generated_by", "qr_print_count"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        f"GET /api/transport/{self.test_transport_id}/qr - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        error_msg,
                        response_time
                    )
                    return False
                
                transport_id = data.get("transport_id")
                transport_number = data.get("transport_number")
                qr_code = data.get("qr_code")
                qr_generated_by = data.get("qr_generated_by")
                qr_print_count = data.get("qr_print_count")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if transport_id != self.test_transport_id:
                    error_msg = f"transport_id –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è {self.test_transport_id}, –ø–æ–ª—É—á–µ–Ω {transport_id}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        f"GET /api/transport/{self.test_transport_id}/qr - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID",
                        False,
                        error_msg,
                        response_time
                    )
                    return False
                
                self.log(f"‚úÖ QR –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
                self.log(f"  üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_number}")
                self.log(f"  üî¢ QR –∫–æ–¥: {qr_code}")
                self.log(f"  üë§ –°–æ–∑–¥–∞–Ω: {qr_generated_by}")
                self.log(f"  üñ®Ô∏è –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏: {qr_print_count}")
                
                self.test_results["qr_data_retrieval_success"] = True
                self.add_test_result(
                    f"GET /api/transport/{self.test_transport_id}/qr",
                    True,
                    f"QR –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {qr_code}, —Å—á–µ—Ç—á–∏–∫: {qr_print_count}",
                    response_time
                )
                return True
            else:
                error_msg = f"HTTP {response.status_code} - {response.text}"
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö: {error_msg}", "ERROR")
                self.add_test_result(
                    f"GET /api/transport/{self.test_transport_id}/qr",
                    False,
                    f"–û—à–∏–±–∫–∞ API: {error_msg}",
                    response_time
                )
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            self.add_test_result(
                f"GET /api/transport/{self.test_transport_id}/qr",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
            return False
    
    def test_qr_print_counter(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/transport/{transport_id}/print-qr"""
        if not self.test_transport_id:
            self.log("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏", "ERROR")
            return False
            
        self.log(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/transport/{self.test_transport_id}/print-qr...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫
            qr_response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}/qr")
            if qr_response.status_code != 200:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏", "ERROR")
                return False
                
            current_count = qr_response.json().get("qr_print_count", 0)
            self.log(f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏: {current_count}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—á–∞—Ç—å
            start_time = datetime.now()
            response = self.session.post(f"{API_BASE}/transport/{self.test_transport_id}/print-qr")
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["message", "transport_id", "qr_code", "print_count"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        f"POST /api/transport/{self.test_transport_id}/print-qr - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        error_msg,
                        response_time
                    )
                    return False
                
                new_count = data.get("print_count")
                expected_count = current_count + 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
                if new_count != expected_count:
                    error_msg = f"–°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –æ–∂–∏–¥–∞–ª—Å—è {expected_count}, –ø–æ–ª—É—á–µ–Ω {new_count}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        f"POST /api/transport/{self.test_transport_id}/print-qr - —Å—á–µ—Ç—á–∏–∫",
                        False,
                        error_msg,
                        response_time
                    )
                    return False
                
                self.log(f"‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω: {current_count} ‚Üí {new_count}")
                
                self.test_results["qr_print_counter_success"] = True
                self.add_test_result(
                    f"POST /api/transport/{self.test_transport_id}/print-qr",
                    True,
                    f"–°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω —Å {current_count} –¥–æ {new_count}",
                    response_time
                )
                return True
            else:
                error_msg = f"HTTP {response.status_code} - {response.text}"
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ QR: {error_msg}", "ERROR")
                self.add_test_result(
                    f"POST /api/transport/{self.test_transport_id}/print-qr",
                    False,
                    f"–û—à–∏–±–∫–∞ API: {error_msg}",
                    response_time
                )
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏: {e}", "ERROR")
            self.add_test_result(
                f"POST /api/transport/{self.test_transport_id}/print-qr",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
            return False
    
    def test_error_handling(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.log("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        fake_transport_id = "non-existent-transport-id"
        success_count = 0
        total_error_tests = 3
        
        # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        try:
            start_time = datetime.now()
            response = self.session.post(f"{API_BASE}/transport/{fake_transport_id}/generate-qr")
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 404:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
                success_count += 1
                self.add_test_result(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR (404)",
                    True,
                    "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    response_time
                )
            else:
                self.log(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {response.status_code}")
                self.add_test_result(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR (404)",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}",
                    response_time
                )
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ 404: {e}")
            self.add_test_result(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR (404)",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        try:
            start_time = datetime.now()
            response = self.session.get(f"{API_BASE}/transport/{fake_transport_id}/qr")
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 404:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
                success_count += 1
                self.add_test_result(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –ø–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö (404)",
                    True,
                    "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    response_time
                )
            else:
                self.log(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
                self.add_test_result(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –ø–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö (404)",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}",
                    response_time
                )
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.add_test_result(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –ø–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö (404)",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
        
        # –¢–µ—Å—Ç 3: –ü–µ—á–∞—Ç—å QR –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        try:
            start_time = datetime.now()
            response = self.session.post(f"{API_BASE}/transport/{fake_transport_id}/print-qr")
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 404:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
                success_count += 1
                self.add_test_result(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –ø–µ—á–∞—Ç—å QR (404)",
                    True,
                    "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTTP 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    response_time
                )
            else:
                self.log(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—á–∞—Ç–∏ QR: {response.status_code}")
                self.add_test_result(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –ø–µ—á–∞—Ç—å QR (404)",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}",
                    response_time
                )
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—á–∞—Ç–∏ QR: {e}")
            self.add_test_result(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –ø–µ—á–∞—Ç—å QR (404)",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
        
        error_handling_success = success_count == total_error_tests
        self.test_results["error_handling_success"] = error_handling_success
        
        if error_handling_success:
            self.log(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({success_count}/{total_error_tests})")
        else:
            self.log(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ ({success_count}/{total_error_tests})")
        
        return error_handling_success
    
    def validate_transport_model(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –º–æ–¥–µ–ª—å Transport"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Transport –º–æ–¥–µ–ª–∏...")
        
        if not self.test_transport_id:
            self.log("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏", "ERROR")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ QR endpoint
            response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}/qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π QR
                qr_fields = ["qr_code", "qr_generated_at", "qr_generated_by", "qr_print_count"]
                missing_qr_fields = [field for field in qr_fields if field not in data]
                
                if missing_qr_fields:
                    error_msg = f"–í –º–æ–¥–µ–ª–∏ Transport –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç QR –ø–æ–ª—è: {missing_qr_fields}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è Transport –º–æ–¥–µ–ª–∏ - QR –ø–æ–ª—è",
                        False,
                        error_msg,
                        0
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                qr_code = data.get("qr_code")
                qr_print_count = data.get("qr_print_count")
                
                if not isinstance(qr_code, str) or not qr_code:
                    error_msg = f"qr_code –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(qr_code)} - {qr_code}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è Transport –º–æ–¥–µ–ª–∏ - —Ç–∏–ø qr_code",
                        False,
                        error_msg,
                        0
                    )
                    return False
                
                if not isinstance(qr_print_count, int) or qr_print_count < 0:
                    error_msg = f"qr_print_count –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω: {type(qr_print_count)} - {qr_print_count}"
                    self.log(f"‚ùå {error_msg}", "ERROR")
                    self.add_test_result(
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è Transport –º–æ–¥–µ–ª–∏ - —Ç–∏–ø qr_print_count",
                        False,
                        error_msg,
                        0
                    )
                    return False
                
                self.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Transport –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ - –≤—Å–µ QR –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                self.test_results["transport_model_validation_success"] = True
                self.add_test_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è Transport –º–æ–¥–µ–ª–∏",
                    True,
                    "–í—Å–µ QR –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã",
                    0
                )
                return True
            else:
                error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: HTTP {response.status_code}"
                self.log(f"‚ùå {error_msg}", "ERROR")
                self.add_test_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è Transport –º–æ–¥–µ–ª–∏",
                    False,
                    error_msg,
                    0
                )
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}", "ERROR")
            self.add_test_result(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è Transport –º–æ–¥–µ–ª–∏",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                0
            )
            return False
    
    def generate_comprehensive_report(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        self.log("\n" + "="*80)
        self.log("üìã –ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø QR ENDPOINTS –î–õ–Ø –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log("="*80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¶–ï–õ–¨: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –¥–ª—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–≠—Ç–∞–ø 1)")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üöõ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {self.test_transport_number} (ID: {self.test_transport_id})")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_tests = self.test_results["total_tests"]
        passed_tests = self.test_results["passed_tests"]
        failed_tests = self.test_results["failed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        self.log(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.log(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        self.log(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.log(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú –û–ë–õ–ê–°–¢–Ø–ú:")
        categories = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", self.test_results["auth_success"]),
            ("–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º", self.test_results["transport_list_success"]),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤", self.test_results["qr_generation_success"]),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö", self.test_results["qr_data_retrieval_success"]),
            ("–°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ QR", self.test_results["qr_print_counter_success"]),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è Transport –º–æ–¥–µ–ª–∏", self.test_results["transport_model_validation_success"]),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_results["error_handling_success"])
        ]
        
        for category, success in categories:
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –ù–ï–£–î–ê–ß–ù–û"
            self.log(f"  {category}: {status}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        for i, test in enumerate(self.test_results["test_details"], 1):
            status = "‚úÖ" if test["success"] else "‚ùå"
            response_time = f"({test['response_time_ms']}ms)" if test['response_time_ms'] > 0 else ""
            self.log(f"  {i}. {status} {test['test_name']} {response_time}")
            if test["details"]:
                self.log(f"     {test['details']}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        all_critical_passed = all([
            self.test_results["auth_success"],
            self.test_results["transport_list_success"],
            self.test_results["qr_generation_success"],
            self.test_results["qr_data_retrieval_success"],
            self.test_results["qr_print_counter_success"],
            self.test_results["transport_model_validation_success"],
            self.test_results["error_handling_success"]
        ])
        
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if all_critical_passed and success_rate >= 90:
            self.log("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS –î–õ–Ø QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("‚úÖ QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            self.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ MongoDB –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            self.log("‚úÖ –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR —Å—Ç–∞—Ç—É—Å")
            self.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            self.log(f"üîç –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}% (—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚â•90%)")
            self.log("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            failed_categories = [cat[0] for cat in categories if not cat[1]]
            if failed_categories:
                self.log(f"üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏: {', '.join(failed_categories)}")
        
        return all_critical_passed and success_rate >= 90
    
    def run_comprehensive_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø QR ENDPOINTS –î–õ–Ø –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log("="*80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º
        if not self.test_transport_list_with_qr():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", "ERROR")
            return False
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
        if not self.test_qr_generation():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥", "ERROR")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö
        if not self.test_qr_data_retrieval():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR –¥–∞–Ω–Ω—ã–µ", "ERROR")
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏
        if not self.test_qr_print_counter():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")
        
        # 6. –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Transport
        if not self.validate_transport_model():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é Transport", "ERROR")
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        if not self.test_error_handling():
            self.log("‚ùå –ü–†–û–ë–õ–ï–ú–´: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "WARNING")
        
        # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_comprehensive_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TransportQREndpointsTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QR ENDPOINTS –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints –¥–ª—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É - –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω!")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å QR endpoints –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()