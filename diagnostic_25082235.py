#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ 25082235 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ 25082235 –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö cargo –∏ operator_cargo
2. –°—Ç—Ä—É–∫—Ç—É—Ä—É individual_items –∏ –∏—Ö –ø–æ–ª—è placed_by/placed_by_operator
3. –ó–∞–ø–∏—Å–∏ –≤ placement_records –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
4. –õ–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è placing_operator –≤ endpoint
"""

import requests
import json
import time
from datetime import datetime
import os
from pymongo import MongoClient

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'cargo_transport')
client = MongoClient(MONGO_URL)
db = client[DB_NAME]

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class Diagnostic25082235:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è API —Ç–µ—Å—Ç–æ–≤...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False

    def check_database_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é operator_cargo
        print("üìã –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo...")
        operator_cargo = db.operator_cargo.find_one({"cargo_number": "25082235"})
        
        if operator_cargo:
            print("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ operator_cargo")
            print(f"   üì¶ ID: {operator_cargo.get('id')}")
            print(f"   üìã –ù–æ–º–µ—Ä: {operator_cargo.get('cargo_number')}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {operator_cargo.get('status')}")
            
            cargo_items = operator_cargo.get('cargo_items', [])
            print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cargo_items: {len(cargo_items)}")
            
            for i, item in enumerate(cargo_items):
                print(f"   üì¶ Cargo Item {i+1}:")
                print(f"      üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('cargo_name', 'N/A')}")
                print(f"      üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('quantity', 'N/A')}")
                
                individual_items = item.get('individual_items', [])
                print(f"      üìã Individual items: {len(individual_items)}")
                
                for j, individual in enumerate(individual_items):
                    print(f"         üì¶ Unit {j+1}:")
                    print(f"            üî¢ –ù–æ–º–µ—Ä: {individual.get('individual_number', 'N/A')}")
                    print(f"            ‚úÖ –†–∞–∑–º–µ—â–µ–Ω: {individual.get('is_placed', False)}")
                    print(f"            üìç –ú–µ—Å—Ç–æ: {individual.get('placement_info', 'N/A')}")
                    print(f"            üë§ placed_by: {individual.get('placed_by', '–ù–ï–¢ –ü–û–õ–Ø')}")
                    print(f"            üë§ placed_by_operator: {individual.get('placed_by_operator', '–ù–ï–¢ –ü–û–õ–Ø')}")
                    print(f"            üìÖ placed_at: {individual.get('placed_at', 'N/A')}")
                    print(f"            üè¢ warehouse_name: {individual.get('warehouse_name', 'N/A')}")
        else:
            print("‚ùå –ó–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ operator_cargo")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é cargo
        print("\nüìã –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ cargo...")
        cargo = db.cargo.find_one({"cargo_number": "25082235"})
        
        if cargo:
            print("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ cargo")
            print(f"   üì¶ ID: {cargo.get('id')}")
            print(f"   üìã –ù–æ–º–µ—Ä: {cargo.get('cargo_number')}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {cargo.get('status')}")
        else:
            print("‚ùå –ó–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ cargo")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º placement_records
        print("\nüìã –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records...")
        placement_records = list(db.placement_records.find({"cargo_number": "25082235"}))
        
        if placement_records:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(placement_records)} –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            for i, record in enumerate(placement_records):
                print(f"   üì¶ –ó–∞–ø–∏—Å—å {i+1}:")
                print(f"      üî¢ Individual number: {record.get('individual_number', 'N/A')}")
                print(f"      üìç –ú–µ—Å—Ç–æ: {record.get('location_code', 'N/A')}")
                print(f"      üë§ placed_by_operator: {record.get('placed_by_operator', 'N/A')}")
                print(f"      üìÖ placed_at: {record.get('placed_at', 'N/A')}")
                print(f"      üè¢ warehouse_name: {record.get('warehouse_name', 'N/A')}")
        else:
            print("‚ùå –ó–∞–ø–∏—Å–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ placement_records")
        
        return operator_cargo, cargo, placement_records

    def test_api_response(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç–≤–µ—Ç–∞"""
        print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –û–¢–í–ï–¢–ê:")
        print("=" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 25082235
                target_cargo = None
                for item in items:
                    if item.get("cargo_number") == "25082235":
                        target_cargo = item
                        break
                
                if target_cargo:
                    print("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ API –æ—Ç–≤–µ—Ç–µ")
                    print(f"   üìã –ù–æ–º–µ—Ä: {target_cargo.get('cargo_number')}")
                    print(f"   üë§ placing_operator: '{target_cargo.get('placing_operator')}'")
                    print(f"   üìä –°—Ç–∞—Ç—É—Å: {target_cargo.get('status')}")
                    print(f"   üì¶ –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {target_cargo.get('total_units')}")
                    print(f"   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {target_cargo.get('placed_units')}")
                    
                    individual_units = target_cargo.get("individual_units", [])
                    print(f"   üìã Individual units –≤ API: {len(individual_units)}")
                    
                    for i, unit in enumerate(individual_units):
                        print(f"      üì¶ Unit {i+1}:")
                        print(f"         üî¢ –ù–æ–º–µ—Ä: {unit.get('individual_number', 'N/A')}")
                        print(f"         ‚úÖ –†–∞–∑–º–µ—â–µ–Ω: {unit.get('is_placed', False)}")
                        print(f"         üë§ placed_by: '{unit.get('placed_by', '–ù–ï–¢ –ü–û–õ–Ø')}'")
                        print(f"         üìç –ú–µ—Å—Ç–æ: {unit.get('placement_info', 'N/A')}")
                    
                    return target_cargo
                else:
                    print("‚ùå –ó–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ API –æ—Ç–≤–µ—Ç–µ")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {str(e)}")
            return None

    def suggest_fix(self, operator_cargo, placement_records):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print("\nüîß –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print("=" * 60)
        
        if placement_records:
            # –ï—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ placement_records —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
            operators = [record.get('placed_by_operator') for record in placement_records if record.get('placed_by_operator')]
            if operators:
                print(f"‚úÖ –í placement_records –Ω–∞–π–¥–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: {set(operators)}")
                print("üí° –†–ï–®–ï–ù–ò–ï 1: –û–±–Ω–æ–≤–∏—Ç—å individual_items –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–∑ placement_records")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                print("\nüìù –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MongoDB:")
                for record in placement_records:
                    individual_number = record.get('individual_number')
                    operator = record.get('placed_by_operator')
                    if individual_number and operator:
                        print(f"""
db.operator_cargo.updateOne(
    {{"cargo_number": "25082235", "cargo_items.individual_items.individual_number": "{individual_number}"}},
    {{"$set": {{
        "cargo_items.$[cargo_item].individual_items.$[individual_item].placed_by_operator": "{operator}",
        "cargo_items.$[cargo_item].individual_items.$[individual_item].placed_at": new Date("{record.get('placed_at', '')}"),
        "cargo_items.$[cargo_item].individual_items.$[individual_item].warehouse_name": "{record.get('warehouse_name', '')}"
    }}}},
    {{arrayFilters: [
        {{"cargo_item.individual_items.individual_number": "{individual_number}"}},
        {{"individual_item.individual_number": "{individual_number}"}}
    ]}}
)""")
        
        if operator_cargo:
            print("\nüí° –†–ï–®–ï–ù–ò–ï 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –≤ endpoint fully-placed")
            print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–∏—Å–∫ –∏–¥–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—é (placed_by_operator)")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏")

    def run_full_diagnostic(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–Ø–í–ö–ò 25082235")
        print("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è API —Ç–µ—Å—Ç–æ–≤
        if not self.authenticate_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è API —Ç–µ—Å—Ç–æ–≤")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        operator_cargo, cargo, placement_records = self.check_database_data()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –æ—Ç–≤–µ—Ç–∞
        api_cargo = self.test_api_response()
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        self.suggest_fix(operator_cargo, placement_records)
        
        print("\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnostic = Diagnostic25082235()
    diagnostic.run_full_diagnostic()
    return 0

if __name__ == "__main__":
    exit(main())