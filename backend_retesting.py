#!/usr/bin/env python3
"""
Backend Testing for Tasks that Need Retesting
Based on test_result.md analysis
"""

import requests
import json
import os
from datetime import datetime
import time

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-5.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class BackendRetester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.user_info = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": "+79999888777",
                "password": "admin123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.user_info = user_response.json()
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.user_info.get('full_name')} (—Ä–æ–ª—å: {self.user_info.get('role')})")
                    return True
                    
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}", "ERROR")
            return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def test_notification_system_for_pickup_requests(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        try:
            self.log("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä
            pickup_data = {
                "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "sender_phone": "+79991234567,+79991234568",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, 123",
                "pickup_date": "2025-01-20",
                "pickup_time_from": "10:00",
                "pickup_time_to": "12:00",
                "route": "moscow_to_tajikistan",
                "courier_fee": 500.0
            }
            
            response = self.session.post(f"{API_BASE}/admin/courier/pickup-request", json=pickup_data)
            
            if response.status_code == 200:
                result = response.json()
                request_id = result.get('request_id')
                self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä —Å–æ–∑–¥–∞–Ω–∞: {request_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                time.sleep(1)
                notifications_response = self.session.get(f"{API_BASE}/notifications")
                if notifications_response.status_code == 200:
                    notifications = notifications_response.json()
                    self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_response.status_code}", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}", "ERROR")
            return False
    
    def test_backend_stability_after_pickup_integration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        try:
            self.log("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
            endpoints_to_test = [
                ("/auth/me", "GET"),
                ("/admin/courier/pickup-request", "POST"),
                ("/courier/pickup-requests", "GET"),
                ("/operator/warehouse-notifications", "GET")
            ]
            
            success_count = 0
            total_count = len(endpoints_to_test)
            
            for endpoint, method in endpoints_to_test:
                try:
                    if method == "GET":
                        response = self.session.get(f"{API_BASE}{endpoint}")
                    elif method == "POST" and "pickup-request" in endpoint:
                        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST
                        test_data = {
                            "sender_full_name": "–¢–µ—Å—Ç –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
                            "sender_phone": "+79991234567",
                            "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
                            "pickup_date": "2025-01-20",
                            "pickup_time_from": "10:00",
                            "pickup_time_to": "12:00",
                            "route": "moscow_to_tajikistan",
                            "courier_fee": 500.0
                        }
                        response = self.session.post(f"{API_BASE}{endpoint}", json=test_data)
                    
                    if response.status_code in [200, 201]:
                        self.log(f"‚úÖ {method} {endpoint}: OK ({response.status_code})")
                        success_count += 1
                    else:
                        self.log(f"‚ö†Ô∏è {method} {endpoint}: {response.status_code}", "WARNING")
                        
                except Exception as e:
                    self.log(f"‚ùå {method} {endpoint}: {str(e)}", "ERROR")
            
            success_rate = (success_count / total_count) * 100
            self.log(f"üìä –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend: {success_rate:.1f}% ({success_count}/{total_count})")
            
            return success_rate >= 75  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ 75%+ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {str(e)}", "ERROR")
            return False
    
    def test_courier_authentication_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞"""
        try:
            self.log("üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä
            courier_response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": "+79991234567",
                "password": "courier123"
            })
            
            if courier_response.status_code == 200:
                courier_data = courier_response.json()
                courier_token = courier_data.get("access_token")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
                courier_session = requests.Session()
                courier_session.headers.update({"Authorization": f"Bearer {courier_token}"})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞
                me_response = courier_session.get(f"{API_BASE}/auth/me")
                if me_response.status_code == 200:
                    courier_info = me_response.json()
                    self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞: {courier_info.get('full_name')} (—Ä–æ–ª—å: {courier_info.get('role')})")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints –∫—É—Ä—å–µ—Ä–∞
                    requests_response = courier_session.get(f"{API_BASE}/courier/requests/new")
                    if requests_response.status_code == 200:
                        self.log("‚úÖ Endpoint –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        self.log(f"‚ö†Ô∏è Endpoint –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞: {requests_response.status_code}", "WARNING")
                        return True  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, endpoint –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞: {me_response.status_code}", "ERROR")
                    return False
            else:
                self.log(f"‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {courier_response.status_code}", "WARNING")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞: {str(e)}", "ERROR")
            return False
    
    def test_courier_request_number_generation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞"""
        try:
            self.log("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤
            created_requests = []
            
            for i in range(3):
                pickup_data = {
                    "sender_full_name": f"–¢–µ—Å—Ç –ù–æ–º–µ—Ä {i+1}",
                    "sender_phone": f"+7999123456{i}",
                    "pickup_address": f"–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –ù–æ–º–µ—Ä, {i+1}",
                    "pickup_date": "2025-01-20",
                    "pickup_time_from": "10:00",
                    "pickup_time_to": "12:00",
                    "route": "moscow_to_tajikistan",
                    "courier_fee": 500.0
                }
                
                response = self.session.post(f"{API_BASE}/admin/courier/pickup-request", json=pickup_data)
                
                if response.status_code == 200:
                    result = response.json()
                    request_number = result.get('request_number')
                    created_requests.append(request_number)
                    self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {request_number}")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ {i+1}: {response.status_code}", "ERROR")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤
            if len(created_requests) == len(set(created_requests)):
                self.log("‚úÖ –í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã")
                return True
            else:
                self.log("‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤: {str(e)}", "ERROR")
            return False
    
    def run_all_retests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.log("üöÄ –ù–ê–ß–ê–õ–û –ü–û–í–¢–û–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BACKEND –ó–ê–î–ê–ß")
            self.log("=" * 80)
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate_admin():
                return False
            
            # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
            tests = [
                ("Notification System for Pickup Requests", self.test_notification_system_for_pickup_requests),
                ("Backend Stability After Pickup Integration", self.test_backend_stability_after_pickup_integration),
                ("Courier Authentication System", self.test_courier_authentication_system),
                ("Courier Request Number Generation", self.test_courier_request_number_generation)
            ]
            
            results = {}
            
            for test_name, test_func in tests:
                self.log(f"\nüß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_name}")
                try:
                    result = test_func()
                    results[test_name] = result
                    if result:
                        self.log(f"‚úÖ PASS: {test_name}")
                    else:
                        self.log(f"‚ùå FAIL: {test_name}")
                except Exception as e:
                    self.log(f"‚ùå ERROR: {test_name} - {str(e)}", "ERROR")
                    results[test_name] = False
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.log("\n" + "=" * 80)
            self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û–í–¢–û–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            self.log("=" * 80)
            
            passed = sum(1 for result in results.values() if result)
            total = len(results)
            success_rate = (passed / total) * 100
            
            self.log(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate:.1f}% ({passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
            
            for test_name, result in results.items():
                status = "‚úÖ PASS" if result else "‚ùå FAIL"
                self.log(f"  {status}: {test_name}")
            
            return success_rate >= 75
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", "ERROR")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND –ó–ê–î–ê–ß TAJLINE.TJ")
    print("=" * 80)
    print("–¶–ï–õ–¨: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ needs_retesting: true")
    print("=" * 80)
    
    tester = BackendRetester()
    
    try:
        success = tester.run_all_retests()
        
        print("\n" + "=" * 80)
        print("üéØ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 80)
        
        if success:
            print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()