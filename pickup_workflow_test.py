#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç workflow –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö

WORKFLOW:
1. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞
2. –ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É
3. –ö—É—Ä—å–µ—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –≥—Ä—É–∑
4. –ö—É—Ä—å–µ—Ä —Å–¥–∞–µ—Ç –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥ (—Å–æ–∑–¥–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
5. –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
6. –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –≥—Ä—É–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º placement_ready)
7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ /api/warehouses/placed-cargo
"""

import requests
import sys
import json
from datetime import datetime

class PickupWorkflowTester:
    def __init__(self, base_url="https://tajline-cargo-5.preview.emergentagent.com"):
        self.base_url = base_url
        self.operator_token = None
        self.courier_token = None
        self.pickup_request_id = None
        self.notification_id = None
        self.cargo_numbers = []
        
        print(f"üöö –ü–û–õ–ù–´–ô –¢–ï–°–¢ WORKFLOW –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        response = requests.post(f"{self.base_url}/api/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.operator_token = data["access_token"]
            print(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {response.status_code}")
            return False

    def authenticate_courier(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞"""
        login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        response = requests.post(f"{self.base_url}/api/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.courier_token = data["access_token"]
            print(f"‚úÖ –ö—É—Ä—å–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞: {response.status_code}")
            return False

    def create_pickup_request(self):
        """–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞"""
        print(f"\nüéØ –®–ê–ì 1: –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê")
        
        if not self.operator_token:
            return False
        
        headers = {'Authorization': f'Bearer {self.operator_token}'}
        
        pickup_request_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å Workflow",
            "sender_phone": "+79991234567, +79887776655",
            "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è Workflow, 789",
            "pickup_date": "2025-01-15",
            "pickup_time_from": "09:00",
            "pickup_time_to": "17:00",
            "route": "moscow_to_tajikistan",
            "courier_fee": 750.0
        }
        
        response = requests.post(f"{self.base_url}/api/admin/courier/pickup-request", 
                               json=pickup_request_data, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            self.pickup_request_id = data.get("id")
            request_number = data.get("request_number")
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {self.pickup_request_id}, –Ω–æ–º–µ—Ä {request_number}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False

    def courier_accept_request(self):
        """–®–∞–≥ 2: –ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É"""
        print(f"\nüéØ –®–ê–ì 2: –ö–£–†–¨–ï–† –ü–†–ò–ù–ò–ú–ê–ï–¢ –ó–ê–Ø–í–ö–£")
        
        if not self.courier_token or not self.pickup_request_id:
            return False
        
        headers = {'Authorization': f'Bearer {self.courier_token}'}
        
        response = requests.post(f"{self.base_url}/api/courier/requests/{self.pickup_request_id}/accept", 
                               headers=headers)
        
        if response.status_code == 200:
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–º")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False

    def courier_pickup_cargo(self):
        """–®–∞–≥ 3: –ö—É—Ä—å–µ—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –≥—Ä—É–∑"""
        print(f"\nüéØ –®–ê–ì 3: –ö–£–†–¨–ï–† –ó–ê–ë–ò–†–ê–ï–¢ –ì–†–£–ó")
        
        if not self.courier_token or not self.pickup_request_id:
            return False
        
        headers = {'Authorization': f'Bearer {self.courier_token}'}
        
        response = requests.post(f"{self.base_url}/api/courier/requests/{self.pickup_request_id}/pickup", 
                               headers=headers)
        
        if response.status_code == 200:
            print(f"   ‚úÖ –ì—Ä—É–∑ –∑–∞–±—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–æ–º")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False

    def courier_deliver_to_warehouse(self):
        """–®–∞–≥ 4: –ö—É—Ä—å–µ—Ä —Å–¥–∞–µ—Ç –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥"""
        print(f"\nüéØ –®–ê–ì 4: –ö–£–†–¨–ï–† –°–î–ê–ï–¢ –ì–†–£–ó –ù–ê –°–ö–õ–ê–î")
        
        if not self.courier_token or not self.pickup_request_id:
            return False
        
        headers = {'Authorization': f'Bearer {self.courier_token}'}
        
        response = requests.post(f"{self.base_url}/api/courier/requests/{self.pickup_request_id}/deliver-to-warehouse", 
                               headers=headers)
        
        if response.status_code == 200:
            print(f"   ‚úÖ –ì—Ä—É–∑ —Å–¥–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥, —Å–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–¥–∞—á–∏ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False

    def get_warehouse_notifications(self):
        """–®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞"""
        print(f"\nüéØ –®–ê–ì 5: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê")
        
        if not self.operator_token:
            return False
        
        headers = {'Authorization': f'Bearer {self.operator_token}'}
        
        response = requests.get(f"{self.base_url}/api/operator/warehouse-notifications", 
                              headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            notifications = data.get("items", [])
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
            
            # –ò—â–µ–º –Ω–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            for notification in notifications:
                if notification.get("pickup_request_id") == self.pickup_request_id:
                    self.notification_id = notification.get("id")
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {self.notification_id}")
                    return True
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            if notifications:
                self.notification_id = notifications[0].get("id")
                print(f"   ‚ö†Ô∏è –í–∑—è—Ç–æ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {self.notification_id}")
                return True
            
            print(f"   ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code}")
            return False

    def accept_notification(self):
        """–®–∞–≥ 6: –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        print(f"\nüéØ –®–ê–ì 6: –ü–†–ò–ù–Ø–¢–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
        
        if not self.operator_token or not self.notification_id:
            return False
        
        headers = {'Authorization': f'Bearer {self.operator_token}'}
        
        response = requests.post(f"{self.base_url}/api/operator/warehouse-notifications/{self.notification_id}/accept", 
                               headers=headers)
        
        if response.status_code == 200:
            print(f"   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False

    def complete_notification(self):
        """–®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤)"""
        print(f"\nüéØ –®–ê–ì 7: –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–§–û–†–ú–õ–ï–ù–ò–Ø")
        
        if not self.operator_token or not self.notification_id:
            return False
        
        headers = {'Authorization': f'Bearer {self.operator_token}'}
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤
        cargo_data = {
            "cargo_items": [
                {
                    "recipient_full_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç 1",
                    "recipient_phone": "+79887776655",
                    "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è, 123",
                    "weight": 3.5,
                    "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ 1 –∏–∑ –∑–∞—è–≤–∫–∏",
                    "declared_value": 1500.0,
                    "description": "–ü–µ—Ä–≤—ã–π –≥—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä"
                },
                {
                    "recipient_full_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç 2", 
                    "recipient_phone": "+79887776656",
                    "recipient_address": "–•—É–¥–∂–∞–Ω–¥, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è, 456",
                    "weight": 2.8,
                    "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ 2 –∏–∑ –∑–∞—è–≤–∫–∏",
                    "declared_value": 1200.0,
                    "description": "–í—Ç–æ—Ä–æ–π –≥—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä"
                }
            ]
        }
        
        response = requests.post(f"{self.base_url}/api/operator/warehouse-notifications/{self.notification_id}/complete", 
                               json=cargo_data, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            cargo_numbers = data.get("cargo_numbers", [])
            self.cargo_numbers = cargo_numbers
            print(f"   ‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            print(f"   üì¶ –°–æ–∑–¥–∞–Ω—ã –≥—Ä—É–∑—ã: {', '.join(cargo_numbers)}")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False

    def test_placed_cargo_display(self):
        """–®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö"""
        print(f"\nüéØ –®–ê–ì 8: –ü–†–û–í–ï–†–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ì–†–£–ó–ê–•")
        
        if not self.operator_token:
            return False
        
        headers = {'Authorization': f'Bearer {self.operator_token}'}
        
        response = requests.get(f"{self.base_url}/api/warehouses/placed-cargo", 
                              headers=headers, params={"page": 1, "per_page": 50})
        
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            total = data.get("pagination", {}).get("total", 0)
            
            print(f"   üìä –í—Å–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {total}")
            print(f"   üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(items)}")
            
            # –ò—â–µ–º –Ω–∞—à–∏ –≥—Ä—É–∑—ã
            found_cargo = []
            placement_ready_count = 0
            pickup_request_count = 0
            
            for cargo in items:
                cargo_number = cargo.get("cargo_number", "")
                status = cargo.get("status", "")
                pickup_request_id = cargo.get("pickup_request_id")
                
                if status == "placement_ready":
                    placement_ready_count += 1
                
                if pickup_request_id:
                    pickup_request_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
                if cargo_number in self.cargo_numbers:
                    found_cargo.append(cargo)
                    print(f"   ‚úÖ –ù–ê–ô–î–ï–ù –Ω–∞—à –≥—Ä—É–∑: {cargo_number}")
                    print(f"      üìä –°—Ç–∞—Ç—É—Å: {status}")
                    print(f"      üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_id}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞—è–≤–∫–∏
                if "/" in cargo_number:
                    print(f"   üìã –ì—Ä—É–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞—è–≤–∫–∏: {cargo_number} (—Å—Ç–∞—Ç—É—Å: {status})")
            
            print(f"\n   üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   üéØ –ì—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready': {placement_ready_count}")
            print(f"   üöö –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_count}")
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—à–∏—Ö –≥—Ä—É–∑–æ–≤: {len(found_cargo)}")
            
            # –û–°–ù–û–í–ù–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢
            if placement_ready_count > 0:
                print(f"\n   üéâ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready'!")
                return True
            else:
                print(f"\n   ‚ö†Ô∏è –ì—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {response.status_code}")
            return False

    def run_full_workflow(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ workflow"""
        print(f"üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û WORKFLOW –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê")
        print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        steps = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", self.authenticate_operator),
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞", self.authenticate_courier),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä", self.create_pickup_request),
            ("–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º", self.courier_accept_request),
            ("–ó–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º", self.courier_pickup_cargo),
            ("–°–¥–∞—á–∞ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥", self.courier_deliver_to_warehouse),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", self.get_warehouse_notifications),
            ("–ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", self.accept_notification),
            ("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", self.complete_notification),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", self.test_placed_cargo_display)
        ]
        
        success_count = 0
        
        for step_name, step_func in steps:
            print(f"\n{'='*60}")
            print(f"üîÑ {step_name.upper()}")
            print(f"{'='*60}")
            
            if step_func():
                success_count += 1
                print(f"‚úÖ {step_name} - –£–°–ü–ï–•")
            else:
                print(f"‚ùå {step_name} - –û–®–ò–ë–ö–ê")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        
        print(f"\n{'='*80}")
        print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ WORKFLOW")
        print(f"{'='*80}")
        print(f"üéØ –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {len(steps)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
        print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {len(steps) - success_count}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/len(steps)*100):.1f}%")
        
        if success_count >= 8:  # –ú–∏–Ω–∏–º—É–º 8 –∏–∑ 10 —ç—Ç–∞–ø–æ–≤
            print(f"\nüéâ WORKFLOW –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –†–ê–ë–û–¢–ê–ï–¢!")
        else:
            print(f"\n‚ö†Ô∏è WORKFLOW –ó–ê–í–ï–†–®–ï–ù –° –ü–†–û–ë–õ–ï–ú–ê–ú–ò")
            print(f"‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
        
        print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return success_count >= 8

if __name__ == "__main__":
    tester = PickupWorkflowTester()
    success = tester.run_full_workflow()
    sys.exit(0 if success else 1)