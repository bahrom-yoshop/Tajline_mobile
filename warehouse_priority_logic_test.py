#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ü–†–ò–û–†–ò–¢–ï–¢–ê –°–ö–õ–ê–î–û–í –í API placement-status
===================================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å `target_warehouse_name` - –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ù–ï "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1")
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å `delivery_warehouse` - –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–±–∞ –ø–æ–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å)
   - –î–ª—è –≥–æ—Ä–æ–¥–∞ "–Ø–≤–∞–Ω" –æ–∂–∏–¥–∞–µ—Ç—Å—è "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1"
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ city-based –ª–æ–≥–∏–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ warehouse_id

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ò–∑–º–µ–Ω–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: `target_warehouse_by_city` —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ `target_warehouse_info.get('name')`
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è `target_warehouse_name`

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- `target_warehouse_name` = "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1" (–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥)
- `delivery_warehouse` = "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1" (–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥)
- –û–±–∞ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–ª–∞–¥ –≤ –≥–æ—Ä–æ–¥–µ –¥–æ—Å—Ç–∞–≤–∫–∏, –ù–ï –≤ –≥–æ—Ä–æ–¥–µ –ø—Ä–∏—ë–º–∞
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class WarehousePriorityLogicTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "applications_found": False,
            "placement_status_accessible": False,
            "warehouse_priority_correct": False,
            "consistency_check_passed": False,
            "city_based_logic_priority": False,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_available_applications(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data if isinstance(data, list) else data.get("items", [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                self.test_results["applications_found"] = len(items) > 0
                return items
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} - {response.text}", "ERROR")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}", "ERROR")
            return []
    
    def test_placement_status_api(self, cargo_id, cargo_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        self.log(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API placement-status –î–õ–Ø –ó–ê–Ø–í–ö–ò {cargo_number}")
        self.log("=" * 80)
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/{cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                self.log("‚úÖ API placement-status –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["placement_status_accessible"] = True
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                target_warehouse_name = data.get("target_warehouse_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
                delivery_warehouse = data.get("delivery_warehouse", "–ù–µ —É–∫–∞–∑–∞–Ω")
                delivery_city = data.get("delivery_city", "–ù–µ —É–∫–∞–∑–∞–Ω")
                pickup_city = data.get("pickup_city", "–ù–µ —É–∫–∞–∑–∞–Ω")
                
                self.log(f"üìç delivery_city: '{delivery_city}'")
                self.log(f"üìç pickup_city: '{pickup_city}'")
                self.log(f"üè¢ target_warehouse_name: '{target_warehouse_name}'")
                self.log(f"üè¢ delivery_warehouse: '{delivery_warehouse}'")
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                result = {
                    "cargo_number": cargo_number,
                    "delivery_city": delivery_city,
                    "pickup_city": pickup_city,
                    "target_warehouse_name": target_warehouse_name,
                    "delivery_warehouse": delivery_warehouse,
                    "consistency_check": target_warehouse_name == delivery_warehouse,
                    "city_based_priority": False,
                    "issues": []
                }
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É target_warehouse_name –∏ delivery_warehouse
                if target_warehouse_name == delivery_warehouse:
                    self.log("‚úÖ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨: target_warehouse_name –∏ delivery_warehouse —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    result["consistency_check"] = True
                else:
                    self.log(f"‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: target_warehouse_name='{target_warehouse_name}' != delivery_warehouse='{delivery_warehouse}'", "ERROR")
                    result["issues"].append("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É target_warehouse_name –∏ delivery_warehouse")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç city-based –ª–æ–≥–∏–∫–∏
                if delivery_city != "–ù–µ —É–∫–∞–∑–∞–Ω" and delivery_city.strip():
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ø–≤–∞–Ω" –∏–∑ "–Ø–≤–∞–Ω 50-—Å–æ–ª–∞–≥–∏")
                    delivery_city_clean = delivery_city.split()[0].lower() if delivery_city.split() else delivery_city.lower()
                    pickup_city_clean = pickup_city.split()[0].lower() if pickup_city != "–ù–µ —É–∫–∞–∑–∞–Ω" and pickup_city.split() else ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–ª–∞–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥–æ—Ä–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏, –∞ –Ω–µ –≥–æ—Ä–æ–¥—É –ø—Ä–∏—ë–º–∞
                    if delivery_city_clean in target_warehouse_name.lower():
                        self.log(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ –ì–û–†–û–î–ê –î–û–°–¢–ê–í–ö–ò: target_warehouse_name —Å–æ–¥–µ—Ä–∂–∏—Ç '{delivery_city_clean}' (–≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏)")
                        result["city_based_priority"] = True
                    elif pickup_city_clean and pickup_city_clean in target_warehouse_name.lower():
                        self.log(f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢: target_warehouse_name —Å–æ–¥–µ—Ä–∂–∏—Ç '{pickup_city_clean}' (–≥–æ—Ä–æ–¥ –ø—Ä–∏—ë–º–∞), –∞ –Ω–µ '{delivery_city_clean}' (–≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏)", "ERROR")
                        result["issues"].append(f"–°–∫–ª–∞–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥–æ—Ä–æ–¥—É –ø—Ä–∏—ë–º–∞ ({pickup_city}), –∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏ ({delivery_city})")
                    else:
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
                        if "—è–≤–∞–Ω" in delivery_city_clean and "—è–≤–∞–Ω" in target_warehouse_name.lower():
                            self.log(f"‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢ –ì–û–†–û–î–ê –î–û–°–¢–ê–í–ö–ò: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ø–≤–∞–Ω –ø—Ä–æ–π–¥–µ–Ω–∞")
                            result["city_based_priority"] = True
                        else:
                            self.log(f"‚ö†Ô∏è –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨: –ù–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∫–ª–∞–¥–∞ –≥–æ—Ä–æ–¥—É (delivery: '{delivery_city_clean}', warehouse: '{target_warehouse_name}')", "WARNING")
                            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ "–Ø–≤–∞–Ω"
                if "—è–≤–∞–Ω" in delivery_city.lower():
                    expected_warehouse = "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1"
                    if target_warehouse_name == expected_warehouse:
                        self.log(f"‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –Ø–í–ê–ù: –û–∂–∏–¥–∞–µ–º—ã–π —Å–∫–ª–∞–¥ '{expected_warehouse}' –Ω–∞–π–¥–µ–Ω")
                    else:
                        self.log(f"‚ùå –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –Ø–í–ê–ù: –û–∂–∏–¥–∞–ª—Å—è '{expected_warehouse}', –ø–æ–ª—É—á–µ–Ω '{target_warehouse_name}'", "ERROR")
                        result["issues"].append(f"–î–ª—è –≥–æ—Ä–æ–¥–∞ –Ø–≤–∞–Ω –æ–∂–∏–¥–∞–ª—Å—è '{expected_warehouse}', –ø–æ–ª—É—á–µ–Ω '{target_warehouse_name}'")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" –¥–ª—è –Ω–µ-–º–æ—Å–∫–æ–≤—Å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
                if delivery_city != "–ù–µ —É–∫–∞–∑–∞–Ω" and "–º–æ—Å–∫–≤–∞" not in delivery_city.lower():
                    if "–º–æ—Å–∫–≤–∞ —Å–∫–ª–∞–¥ ‚Ññ1" in target_warehouse_name.lower():
                        self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –î–ª—è –≥–æ—Ä–æ–¥–∞ '{delivery_city}' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'", "ERROR")
                        result["issues"].append(f"–î–ª—è –≥–æ—Ä–æ–¥–∞ '{delivery_city}' –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'")
                
                self.test_results["detailed_results"].append(result)
                return result
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-status: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ placement-status: {e}", "ERROR")
            return None
    
    def analyze_overall_results(self):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("\nüìä –ê–ù–ê–õ–ò–ó –û–ë–©–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        self.log("=" * 80)
        
        total_tested = len(self.test_results["detailed_results"])
        consistency_passed = sum(1 for r in self.test_results["detailed_results"] if r["consistency_check"])
        city_priority_passed = sum(1 for r in self.test_results["detailed_results"] if r["city_based_priority"])
        total_issues = sum(len(r["issues"]) for r in self.test_results["detailed_results"])
        
        self.log(f"üìã –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—è–≤–æ–∫: {total_tested}")
        self.log(f"‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∞: {consistency_passed}/{total_tested}")
        self.log(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {city_priority_passed}/{total_tested}")
        self.log(f"‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {total_issues}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.test_results["consistency_check_passed"] = consistency_passed == total_tested
        self.test_results["city_based_logic_priority"] = city_priority_passed > 0
        self.test_results["warehouse_priority_correct"] = total_issues == 0
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
        if total_issues > 0:
            self.log("\nüö® –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ü–†–û–ë–õ–ï–ú–ê–ú:")
            for result in self.test_results["detailed_results"]:
                if result["issues"]:
                    self.log(f"üìã –ó–∞—è–≤–∫–∞ {result['cargo_number']}:")
                    for issue in result["issues"]:
                        self.log(f"   ‚ùå {issue}")
        
        return total_issues == 0
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–ö–ò –ü–†–ò–û–†–ò–¢–ï–¢–ê –°–ö–õ–ê–î–û–í")
        self.log("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        applications = self.get_available_applications()
        if not applications:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ placement-status –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        tested_count = 0
        for app in applications[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞—è–≤–æ–∫
            cargo_id = app.get("id")
            cargo_number = app.get("cargo_number")
            
            if cargo_id and cargo_number:
                result = self.test_placement_status_api(cargo_id, cargo_number)
                if result:
                    tested_count += 1
        
        if tested_count == 0:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∏ –æ–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞", "ERROR")
            return False
        
        # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        success = self.analyze_overall_results()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.log("\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        self.log("=" * 80)
        
        if success:
            self.log("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–∫–ª–∞–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("‚úÖ City-based –ª–æ–≥–∏–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ warehouse_id")
            self.log("‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        else:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!", "ERROR")
            self.log("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–∫–ª–∞–¥–æ–≤")
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehousePriorityLogicTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()