#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–°–¢–û–Ø–ù–ù–û–ì–û –ù–û–ú–ï–†–ê –ó–ê–Ø–í–ö–ò

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ë–õ–ï–ú–´: 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞—è–≤–æ–∫:
1. –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 00820)
2. –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –î–†–£–ì–û–ô –Ω–æ–º–µ—Ä
3. –í —Ä–∞–∑–¥–µ–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–∂–µ –ø–æ–¥ –¥—Ä—É–≥–∏–º –Ω–æ–º–µ—Ä–æ–º
4. –ù—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è –∑–∞—è–≤–∫–∞ –∏–º–µ–ª–∞ —Å–≤–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä

–í–´–ü–û–õ–ù–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
1. –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ `preGeneratedCargoNumber` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
2. –í `handleGenerateCargoNumberQR` –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ `setPreGeneratedCargoNumber(uniqueCargoNumber)`
3. –í `handleConfirmCargoAcceptance` –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è `preferred_cargo_number: preGeneratedCargoNumber`
4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–æ–º–µ—Ä –æ—á–∏—â–∞–µ—Ç—Å—è

–ó–ê–î–ê–ß–ê –î–õ–Ø BACKEND –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É preferred_cargo_number** –≤ API endpoint `/api/operator/cargo/accept`
2. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º**
3. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤**
4. **–£–±–µ–¥–∏—Ç—å—Å—è –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**
"""

import requests
import json
import sys
import time
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-6.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PreferredCargoNumberTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        self.warehouse_id = None
        self.test_cargo_ids = []
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def get_operator_warehouse(self):
        """Get operator's warehouse for testing"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    self.warehouse_id = warehouses[0].get("id")
                    warehouse_name = warehouses[0].get("name")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥: {warehouse_name} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=str(e))
            return False

    def test_preferred_cargo_number_support(self):
        """1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É preferred_cargo_number –≤ API endpoint"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å preferred_cargo_number
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ù–æ–º–µ—Ä–∞",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ù–æ–º–µ—Ä–∞", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ preferred_cargo_number",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "preferred_cargo_number": "2501280123",  # –ö–õ–Æ–ß–ï–í–û–ï –ü–û–õ–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º",
                        "quantity": 1,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                if cargo_number == "2501280123":
                    self.log_test(
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ preferred_cargo_number",
                        True,
                        f"‚úÖ Backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç preferred_cargo_number! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {cargo_number} (ID: {cargo_id})"
                    )
                    self.test_cargo_ids.append(cargo_id)
                    return True
                else:
                    self.log_test(
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ preferred_cargo_number",
                        False,
                        f"‚ùå Backend –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç preferred_cargo_number. –û–∂–∏–¥–∞–ª—Å—è –Ω–æ–º–µ—Ä: 2501280123, –ø–æ–ª—É—á–µ–Ω: {cargo_number}",
                        "Backend –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–µ preferred_cargo_number –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
                    )
                    self.test_cargo_ids.append(cargo_id)
                    return False
            elif response.status_code == 422:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                error_data = response.json()
                error_details = error_data.get("detail", [])
                
                # –ò—â–µ–º –æ—à–∏–±–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å preferred_cargo_number
                preferred_number_error = any(
                    "preferred_cargo_number" in str(error).lower() 
                    for error in error_details
                )
                
                if preferred_number_error:
                    self.log_test(
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ preferred_cargo_number",
                        False,
                        "‚ùå Backend –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–µ preferred_cargo_number",
                        f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_details}"
                    )
                else:
                    self.log_test(
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ preferred_cargo_number",
                        False,
                        "‚ùå Backend –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–µ preferred_cargo_number",
                        f"–ü–æ–ª–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –º–æ–¥–µ–ª—å—é –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {error_details}"
                    )
                return False
            else:
                self.log_test(
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ preferred_cargo_number",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ preferred_cargo_number", False, error=str(e))
            return False

    def test_without_preferred_cargo_number(self):
        """2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ë–ï–ó preferred_cargo_number (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–ï–ó preferred_cargo_number
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –û–±—ã—á–Ω–æ–≥–æ –ù–æ–º–µ—Ä–∞",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –û–±—ã—á–Ω–æ–≥–æ –ù–æ–º–µ—Ä–∞", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ë–ï–ó preferred_cargo_number –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º –Ω–æ–º–µ—Ä–æ–º",
                        "quantity": 1,
                        "weight": 3.0,
                        "price_per_kg": 150.0,
                        "total_amount": 450.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–µ–∑ preferred_cargo_number",
                    True,
                    f"‚úÖ –ó–∞—è–≤–∫–∏ –±–µ–∑ preferred_cargo_number —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id})"
                )
                self.test_cargo_ids.append(cargo_id)
                return True
            else:
                self.log_test(
                    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–µ–∑ preferred_cargo_number",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–µ–∑ preferred_cargo_number", False, error=str(e))
            return False

    def test_duplicate_preferred_cargo_number(self):
        """3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è preferred_cargo_number"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å —Ç–µ–º –∂–µ preferred_cargo_number
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –î—É–±–ª–∏–∫–∞—Ç–∞",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –î—É–±–ª–∏–∫–∞—Ç–∞", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è preferred_cargo_number",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "preferred_cargo_number": "2501280123",  # –¢–û–¢ –ñ–ï –ù–û–ú–ï–†
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥—É–±–ª–∏–∫–∞—Ç",
                        "quantity": 1,
                        "weight": 2.0,
                        "price_per_kg": 200.0,
                        "total_amount": 400.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                if cargo_number == "2501280123":
                    self.log_test(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è preferred_cargo_number",
                        False,
                        f"‚ùå Backend –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–º–µ—Ä–∞! –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {cargo_number}",
                        "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫"
                    )
                else:
                    self.log_test(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è preferred_cargo_number",
                        True,
                        f"‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä: {cargo_number}"
                    )
                
                self.test_cargo_ids.append(cargo_id)
                return True
            elif response.status_code == 400 or response.status_code == 409:
                # –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                self.log_test(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è preferred_cargo_number",
                    True,
                    f"‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–º–µ—Ä–∞ (HTTP {response.status_code})"
                )
                return True
            elif response.status_code == 422:
                # –ü–æ–ª–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                self.log_test(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è preferred_cargo_number",
                    False,
                    "‚ùå Backend –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–µ preferred_cargo_number",
                    "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—è"
                )
                return False
            else:
                self.log_test(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è preferred_cargo_number",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è preferred_cargo_number", False, error=str(e))
            return False

    def test_cargo_placement_with_preferred_number(self):
        """4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞—è–≤–∫–∏ —Å preferred_cargo_number –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
                test_cargos = [
                    item for item in items 
                    if item.get("id") in self.test_cargo_ids
                ]
                
                if test_cargos:
                    cargo_numbers = [cargo.get("cargo_number") for cargo in test_cargos]
                    self.log_test(
                        "–ó–∞—è–≤–∫–∏ —Å preferred_cargo_number –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏",
                        True,
                        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_cargos)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {cargo_numbers}"
                    )
                    return True
                else:
                    self.log_test(
                        "–ó–∞—è–≤–∫–∏ —Å preferred_cargo_number –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏",
                        False,
                        "‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        "–í–æ–∑–º–æ–∂–Ω–æ –∑–∞—è–≤–∫–∏ –∏–º–µ—é—Ç –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ"
                    )
                    return False
            else:
                self.log_test(
                    "–ó–∞—è–≤–∫–∏ —Å preferred_cargo_number –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ó–∞—è–≤–∫–∏ —Å preferred_cargo_number –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏", False, error=str(e))
            return False

    def test_qr_generation_consistency(self):
        """5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            if not self.test_cargo_ids:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    False,
                    error="–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
            test_cargo_id = self.test_cargo_ids[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{test_cargo_id}/full-info")
            
            if response.status_code == 200:
                data = response.json()
                cargo_number = data.get("cargo_number")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–∞ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
                qr_response = self.session.post(
                    f"{BACKEND_URL}/backend/generate-simple-qr",
                    json={"qr_text": cargo_number}
                )
                
                if qr_response.status_code == 200:
                    qr_data = qr_response.json()
                    qr_code = qr_data.get("qr_code")
                    
                    if qr_code and qr_code.startswith("data:image/png;base64,"):
                        self.log_test(
                            "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                            True,
                            f"‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏: {cargo_number}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                            False,
                            error="QR –∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
                        )
                        return False
                else:
                    self.log_test(
                        "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                        False,
                        error=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: HTTP {qr_response.status_code}"
                    )
                    return False
            elif response.status_code == 403:
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    True,
                    "‚úÖ Endpoint –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)"
                )
                return True
            else:
                self.log_test(
                    "–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –≤ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", False, error=str(e))
            return False

    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            if self.test_cargo_ids:
                self.log_test(
                    "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"–°–æ–∑–¥–∞–Ω–æ {len(self.test_cargo_ids)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫. ID: {self.test_cargo_ids}"
                )
            return True
        except Exception as e:
            self.log_test("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", False, error=str(e))
            return False

    def run_all_tests(self):
        """Run all tests for preferred_cargo_number functionality"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–°–¢–û–Ø–ù–ù–û–ì–û –ù–û–ú–ï–†–ê –ó–ê–Ø–í–ö–ò")
        print("=" * 80)
        print()
        
        # Authentication
        if not self.authenticate_operator():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
            
        if not self.get_operator_warehouse():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–î–ï–†–ñ–ö–ò preferred_cargo_number:")
        print("-" * 60)
        
        test_results = []
        test_results.append(self.test_preferred_cargo_number_support())
        test_results.append(self.test_without_preferred_cargo_number())
        test_results.append(self.test_duplicate_preferred_cargo_number())
        test_results.append(self.test_cargo_placement_with_preferred_number())
        test_results.append(self.test_qr_generation_consistency())
        
        # Cleanup
        self.cleanup_test_data()
        
        # Summary
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if success_rate >= 80:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç preferred_cargo_number!")
            print("‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Ä–µ—à–µ–Ω–∞")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê: Backend —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Backend –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç preferred_cargo_number!")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–ª—è preferred_cargo_number –≤:")
            print("   1. –ú–æ–¥–µ–ª—å OperatorCargoCreate")
            print("   2. Endpoint POST /api/operator/cargo/accept")
            print("   3. –õ–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫")
        
        print()
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 40)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    üìã {result['details']}")
            if result["error"]:
                print(f"    ‚ùå {result['error']}")
        
        print()
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø MAIN AGENT:")
        print("-" * 40)
        
        if success_rate < 60:
            print("1. ‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ preferred_cargo_number –≤ –º–æ–¥–µ–ª—å OperatorCargoCreate")
            print("2. üîß –û–±–Ω–æ–≤–∏—Ç—å endpoint /api/operator/cargo/accept –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ preferred_cargo_number")
            print("3. üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å preferred_cargo_number –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω")
            print("4. ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ preferred_cargo_number")
            print("5. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å frontend")
        else:
            print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫!")
        
        return success_rate >= 60

if __name__ == "__main__":
    tester = PreferredCargoNumberTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)