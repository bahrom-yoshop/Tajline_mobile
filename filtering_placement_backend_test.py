#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥—Å—á–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–∞—Ö "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é"

–ü–†–û–ë–õ–ï–ú–ê:
1. –í —Ä–µ–∂–∏–º–µ "Individual Units –∫–∞—Ä—Ç–æ—á–∫–∏" –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (25082235, 25082298)
2. –í —Ä–µ–∂–∏–º–µ "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫" –Ω–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. individual-units-for-placement API: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
2. available-for-placement API: –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —á–µ—Ä–µ–∑ placement_records

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
‚úÖ –ó–∞—è–≤–∫–∏ 25082235 –∏ 25082298 –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ individual units
‚úÖ –ó–∞—è–≤–∫–∞ 250101 –î–û–õ–ñ–ù–ê –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ (—á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ 2/4)
‚úÖ –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç placed_count —á–µ—Ä–µ–∑ placement_records
‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ individual-units
‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –æ–±–∞ —Ä–µ–∂–∏–º–∞ "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é" —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_individual_units_for_placement_api():
    """–¢–µ—Å—Ç 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - individual-units-for-placement API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"""
    
    print("\nüéØ –¢–ï–°–¢ 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - individual-units-for-placement API")
    print("   üìù –¶–ï–õ–¨: –ó–∞—è–≤–∫–∏ 25082235 –∏ 25082298 –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω—ã)")
    print("   üìù –¶–ï–õ–¨: –ó–∞—è–≤–∫–∞ 250101 –î–û–õ–ñ–ù–ê –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ (—á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ 2/4)")
    
    response, response_time = make_request("GET", "/operator/cargo/individual-units-for-placement?page=1&per_page=25")
    
    if not response:
        return log_test("individual-units-for-placement API", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ individual-units-for-placement API:")
        print(f"   - –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(data.get('items', []))}")
        
        items = data.get('items', [])
        found_cargo_numbers = set()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for item in items:
            cargo_number = item.get('cargo_number', '')
            if cargo_number:
                found_cargo_numbers.add(cargo_number)
        
        print(f"   - –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫: {sorted(found_cargo_numbers)}")
        
        success = True
        issues = []
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 1: –ó–∞—è–≤–∫–∞ 25082235 –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        if '25082235' in found_cargo_numbers:
            success = False
            issues.append("‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ê: –∑–∞—è–≤–∫–∞ 25082235 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è)")
        else:
            print("   ‚úÖ –ò–°–ö–õ–Æ–ß–ï–ù–ê: –∑–∞—è–≤–∫–∞ 25082235 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∞)")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 2: –ó–∞—è–≤–∫–∞ 25082298 –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        if '25082298' in found_cargo_numbers:
            success = False
            issues.append("‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ê: –∑–∞—è–≤–∫–∞ 25082298 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è)")
        else:
            print("   ‚úÖ –ò–°–ö–õ–Æ–ß–ï–ù–ê: –∑–∞—è–≤–∫–∞ 25082298 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∞)")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê 3: –ó–∞—è–≤–∫–∞ 250101 –î–û–õ–ñ–ù–ê –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        if '250101' not in found_cargo_numbers:
            success = False
            issues.append("‚ùå –í–ö–õ–Æ–ß–ï–ù–ê: –∑–∞—è–≤–∫–∞ 250101 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è)")
        else:
            print("   ‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê: –∑–∞—è–≤–∫–∞ 250101 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ 250101
            cargo_250101_items = [item for item in items if item.get('cargo_number') == '250101']
            print(f"   - –ï–¥–∏–Ω–∏—Ü—ã –∑–∞—è–≤–∫–∏ 250101: {len(cargo_250101_items)}")
            
            for unit in cargo_250101_items:
                individual_number = unit.get('individual_number', '')
                is_placed = unit.get('is_placed', False)
                print(f"     * {individual_number}: {'—Ä–∞–∑–º–µ—â–µ–Ω' if is_placed else '–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω'}")
        
        if success:
            details = f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã, —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã"
            return log_test("individual-units-for-placement API", True, details, response_time)
        else:
            details = f"‚ùå {'; '.join(issues)}"
            return log_test("individual-units-for-placement API", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("individual-units-for-placement API", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_available_for_placement_api():
    """–¢–µ—Å—Ç 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - available-for-placement API –ø–æ–¥—Å—á–µ—Ç —á–µ—Ä–µ–∑ placement_records"""
    
    print("\nüéØ –¢–ï–°–¢ 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - available-for-placement API")
    print("   üìù –¶–ï–õ–¨: –¢–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç placed_count —á–µ—Ä–µ–∑ placement_records")
    print("   üìù –¶–ï–õ–¨: –ó–∞—è–≤–∫–∞ 250101 –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
    
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement?page=1&per_page=25")
    
    if not response:
        return log_test("available-for-placement API", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ available-for-placement API:")
        print(f"   - –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(data.get('items', []))}")
        
        items = data.get('items', [])
        found_cargo_250101 = None
        
        # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        for item in items:
            if item.get('cargo_number') == '250101':
                found_cargo_250101 = item
                break
        
        success = True
        issues = []
        
        if not found_cargo_250101:
            success = False
            issues.append("‚ùå –ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ available-for-placement")
        else:
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ 250101 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: placed_count —á–µ—Ä–µ–∑ placement_records
            placed_count = found_cargo_250101.get('placed_count', 0)
            total_units = found_cargo_250101.get('total_units', 0)
            placement_progress = found_cargo_250101.get('placement_progress', '')
            
            print(f"   - placed_count: {placed_count}")
            print(f"   - total_units: {total_units}")
            print(f"   - placement_progress: {placement_progress}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞
            if placed_count == 2 and total_units == 4:
                print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: placed_count = 2, total_units = 4 (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —á–µ—Ä–µ–∑ placement_records)")
            else:
                success = False
                issues.append(f"‚ùå –ù–µ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç: placed_count={placed_count}, total_units={total_units} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2/4)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º placement_progress
            expected_progress = "2/4"
            if expected_progress in placement_progress:
                print(f"   ‚úÖ placement_progress –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: '{placement_progress}'")
            else:
                success = False
                issues.append(f"‚ùå placement_progress –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: '{placement_progress}' (–æ–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ '2/4')")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã
        found_fully_placed = []
        for item in items:
            cargo_number = item.get('cargo_number', '')
            placed_count = item.get('placed_count', 0)
            total_units = item.get('total_units', 0)
            
            if placed_count > 0 and placed_count >= total_units:
                found_fully_placed.append(cargo_number)
        
        if found_fully_placed:
            success = False
            issues.append(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ: {found_fully_placed}")
        else:
            print("   ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
        
        if success:
            details = f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ü–æ–¥—Å—á–µ—Ç —á–µ—Ä–µ–∑ placement_records —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            return log_test("available-for-placement API", True, details, response_time)
        else:
            details = f"‚ùå {'; '.join(issues)}"
            return log_test("available-for-placement API", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("available-for-placement API", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_placement_records_verification():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö placement_records –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("\nüîç –¢–ï–°–¢ 4: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ placement_records")
    print("   üìù –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ placement_records –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ verify-cargo API
    test_units = [
        {"unit": "25082235/01/01", "expected_status": "—Ä–∞–∑–º–µ—â–µ–Ω"},
        {"unit": "25082235/01/02", "expected_status": "—Ä–∞–∑–º–µ—â–µ–Ω"},
        {"unit": "25082298/01/01", "expected_status": "—Ä–∞–∑–º–µ—â–µ–Ω"},
        {"unit": "250101/01/01", "expected_status": "–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω"},
        {"unit": "250101/01/02", "expected_status": "—Ä–∞–∑–º–µ—â–µ–Ω"},
    ]
    
    success = True
    placement_status = {}
    
    for test_unit in test_units:
        unit_number = test_unit["unit"]
        expected_status = test_unit["expected_status"]
        
        response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": unit_number})
        
        if response and response.status_code == 200:
            data = response.json()
            if data.get("success"):
                placement_status[unit_number] = "–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω"
                print(f"   - {unit_number}: –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω (API –≤–µ—Ä–Ω—É–ª success=true)")
            else:
                error = data.get("error", "")
                if "—É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω" in error.lower():
                    placement_status[unit_number] = "—Ä–∞–∑–º–µ—â–µ–Ω"
                    print(f"   - {unit_number}: —Ä–∞–∑–º–µ—â–µ–Ω (API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É '—É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω')")
                else:
                    placement_status[unit_number] = f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({error})"
                    print(f"   - {unit_number}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ - {error}")
        else:
            placement_status[unit_number] = "–æ—à–∏–±–∫–∞ API"
            print(f"   - {unit_number}: –æ—à–∏–±–∫–∞ API")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
    
    # –ó–∞—è–≤–∫–∞ 25082235
    units_25082235 = [k for k in placement_status.keys() if k.startswith("25082235")]
    placed_25082235 = [k for k in units_25082235 if placement_status[k] == "—Ä–∞–∑–º–µ—â–µ–Ω"]
    print(f"   - –ó–∞—è–≤–∫–∞ 25082235: {len(placed_25082235)}/{len(units_25082235)} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
    
    # –ó–∞—è–≤–∫–∞ 25082298
    units_25082298 = [k for k in placement_status.keys() if k.startswith("25082298")]
    placed_25082298 = [k for k in units_25082298 if placement_status[k] == "—Ä–∞–∑–º–µ—â–µ–Ω"]
    print(f"   - –ó–∞—è–≤–∫–∞ 25082298: {len(placed_25082298)}/{len(units_25082298)} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
    
    # –ó–∞—è–≤–∫–∞ 250101
    units_250101 = [k for k in placement_status.keys() if k.startswith("250101")]
    placed_250101 = [k for k in units_250101 if placement_status[k] == "—Ä–∞–∑–º–µ—â–µ–Ω"]
    print(f"   - –ó–∞—è–≤–∫–∞ 250101: {len(placed_250101)}/{len(units_250101)} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
    
    details = f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(test_units)} –µ–¥–∏–Ω–∏—Ü"
    return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ placement_records", True, details, None)

def test_logging_verification():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ—Å–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
    
    print("\nüìù –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    print("   üìù –¶–ï–õ–¨: –ö–æ—Å–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã API")
    
    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ individual-units-for-placement –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    consistent_results = True
    first_result = None
    
    for i in range(3):
        response, response_time = make_request("GET", "/operator/cargo/individual-units-for-placement?page=1&per_page=25")
        
        if response and response.status_code == 200:
            data = response.json()
            items = data.get('items', [])
            cargo_numbers = sorted([item.get('cargo_number', '') for item in items])
            
            if first_result is None:
                first_result = cargo_numbers
                print(f"   - –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(cargo_numbers)} –∑–∞—è–≤–æ–∫")
            else:
                if cargo_numbers != first_result:
                    consistent_results = False
                    print(f"   - –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! –Ω–∞–π–¥–µ–Ω–æ {len(cargo_numbers)} –∑–∞—è–≤–æ–∫")
                else:
                    print(f"   - –ü–æ–ø—ã—Ç–∫–∞ {i+1}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω ({len(cargo_numbers)} –∑–∞—è–≤–æ–∫)")
        else:
            consistent_results = False
            print(f"   - –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –æ—à–∏–±–∫–∞ API")
    
    if consistent_results:
        details = "‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", True, details, None)
    else:
        details = "‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", False, details, None)

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥—Å—á–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–∞—Ö '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é'")
    print("=" * 100)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        test_warehouse_operator_auth,
        test_individual_units_for_placement_api,
        test_available_for_placement_api,
        test_placement_records_verification,
        test_logging_verification,
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    passed_tests = 0
    total_tests = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 100)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 100)
    
    success_rate = (passed_tests / total_tests) * 100
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    if success_rate == 100:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Individual units API –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
        print("‚úÖ Available placement API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
        print("‚úÖ –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —á–µ—Ä–µ–∑ placement_records —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("\nüéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: –û–±–∞ —Ä–µ–∂–∏–º–∞ '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é' —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    elif success_rate >= 80:
        print(f"\n‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û ({success_rate:.1f}%)")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    else:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´ ({success_rate:.1f}%)")
        print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for result in test_results:
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"{status} {result['test']}{time_info}")
        if result["details"]:
            print(f"   ‚îî‚îÄ {result['details']}")
    
    return success_rate == 100

if __name__ == "__main__":
    run_all_tests()