#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –î–õ–Ø –û–ü–ï–†–ê–¢–û–†–ê USR648425
===================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API layout-with-cargo —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" 
3. API layout-with-cargo - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏ 500
4. –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö USR648425:
   - –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ operator_cargo —Å warehouse_id=None
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É 25082298 —Å 7 –µ–¥–∏–Ω–∏—Ü–∞–º–∏
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç
5. –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 
   - –ú–∏–Ω–∏–º—É–º 11 –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ
   - cargo_info —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç USR648425
   - API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π warehouse_info
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ warehouse_id=None –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –Ω–∞–π—Ç–∏ –≤—Å–µ 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_OPERATOR = "USR648425"
TARGET_APPLICATION = "25082298"
EXPECTED_MIN_UNITS = 11
EXPECTED_TOTAL_UNITS = 13

class LayoutWithCargoUSR648425Tester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.warehouse_id = None
        self.test_results = {
            "auth_success": False,
            "warehouse_found": False,
            "api_no_500_error": False,
            "usr648425_data_found": False,
            "application_25082298_found": False,
            "min_units_found": False,
            "total_units_expected": False,
            "operator_filtering_works": False,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_warehouse_id(self):
        """–ü–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
        self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                for warehouse in warehouses:
                    if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                        self.warehouse_id = warehouse.get("id")
                        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥: {warehouse.get('name')} (ID: {self.warehouse_id})")
                        self.test_results["warehouse_found"] = True
                        return True
                
                self.log("‚ùå –°–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}", "ERROR")
            return False
    
    def check_fully_placed_api_for_usr648425(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API fully-placed –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö USR648425"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API fully-placed –¥–ª—è –ø–æ–∏—Å–∫–∞ USR648425...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", []) if isinstance(data, dict) else data
                
                self.log(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                
                usr648425_found = False
                application_25082298_found = False
                
                for item in items:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ USR648425
                    operator_fields = [
                        item.get("placed_by_operator"),
                        item.get("accepting_operator"),
                        item.get("created_by_operator")
                    ]
                    
                    for field in operator_fields:
                        if field and "USR648425" in str(field):
                            usr648425_found = True
                            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω USR648425 –≤ fully-placed: {item.get('cargo_number', 'N/A')}")
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É 25082298
                    if item.get("cargo_number") == "25082298":
                        application_25082298_found = True
                        individual_units = item.get("individual_units", [])
                        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ 25082298 —Å {len(individual_units)} –µ–¥–∏–Ω–∏—Ü–∞–º–∏")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
                        self.log(f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ 25082298:")
                        self.log(f"   - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {len(individual_units)}")
                        self.log(f"   - –û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {item.get('placed_by_operator', 'N/A')}")
                        self.log(f"   - –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–µ–º–∞: {item.get('accepting_operator', 'N/A')}")
                
                return usr648425_found, application_25082298_found
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fully-placed: {response.status_code}", "ERROR")
                return False, False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ fully-placed: {e}", "ERROR")
            return False, False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo"""
        self.log("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo...")
        
        if not self.warehouse_id:
            self.log("‚ùå warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç", "ERROR")
            return None
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_id}/layout-with-cargo")
            
            self.log(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: GET /api/warehouses/{self.warehouse_id}/layout-with-cargo")
            self.log(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 500:
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 –æ—à–∏–±–∫—É!", "ERROR")
                self.log(f"‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}", "ERROR")
                self.test_results["api_no_500_error"] = False
                return None
            elif response.status_code == 200:
                self.log("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–∫–∏ 500!")
                self.test_results["api_no_500_error"] = True
                
                data = response.json()
                self.log(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç API (—Ç–∏–ø: {type(data)})")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, dict):
                    self.log(f"üîç –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(data.keys())}")
                    if 'cargo_info' in data:
                        cargo_info = data['cargo_info']
                        self.log(f"üì¶ cargo_info —Å–æ–¥–µ—Ä–∂–∏—Ç {len(cargo_info)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        if len(cargo_info) > 0:
                            self.log(f"üìã –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç cargo_info: {json.dumps(cargo_info[0], indent=2, ensure_ascii=False)}")
                
                return data
            else:
                self.log(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}", "WARNING")
                self.log(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}", "ERROR")
            return None
    
    def analyze_usr648425_data(self, api_data):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425"""
        self.log(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}...")
        
        if not api_data:
            self.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", "ERROR")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {type(api_data)}")
        
        if isinstance(api_data, dict):
            self.log(f"üìã –ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {list(api_data.keys())}")
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
            cargo_info = api_data.get("cargo_info", [])
            items = api_data.get("items", [])
            data_field = api_data.get("data", [])
            
            all_items = []
            if cargo_info:
                all_items.extend(cargo_info if isinstance(cargo_info, list) else [cargo_info])
            if items:
                all_items.extend(items if isinstance(items, list) else [items])
            if data_field:
                all_items.extend(data_field if isinstance(data_field, list) else [data_field])
                
        elif isinstance(api_data, list):
            all_items = api_data
        else:
            self.log(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(api_data)}", "ERROR")
            return False
        
        self.log(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(all_items)}")
        
        # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö USR648425
        usr648425_items = []
        application_25082298_items = []
        
        for item in all_items:
            if not isinstance(item, dict):
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
            operator_fields = [
                item.get("placed_by_operator"),
                item.get("placed_by_operator_name"),
                item.get("operator_name"),
                item.get("accepting_operator"),
                item.get("created_by_operator")
            ]
            
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
            cargo_number = item.get("cargo_number", "")
            application_number = item.get("application_number", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ USR648425
            for field in operator_fields:
                if field and TARGET_OPERATOR in str(field):
                    usr648425_items.append(item)
                    self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –æ—Ç {TARGET_OPERATOR}: {item.get('cargo_number', 'N/A')}")
                    break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É 25082298
            if TARGET_APPLICATION in cargo_number or TARGET_APPLICATION in application_number:
                application_25082298_items.append(item)
                self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}: {item.get('cargo_number', 'N/A')}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.log(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        self.log(f"   - –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_items)}")
        self.log(f"   - –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç {TARGET_OPERATOR}: {len(usr648425_items)}")
        self.log(f"   - –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}: {len(application_25082298_items)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        if len(usr648425_items) > 0:
            self.test_results["usr648425_data_found"] = True
            self.log(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç {TARGET_OPERATOR} –Ω–∞–π–¥–µ–Ω—ã!")
        else:
            self.log(f"‚ùå –î–∞–Ω–Ω—ã–µ –æ—Ç {TARGET_OPERATOR} –ù–ï –Ω–∞–π–¥–µ–Ω—ã!", "ERROR")
        
        if len(application_25082298_items) >= 7:
            self.test_results["application_25082298_found"] = True
            self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞ —Å {len(application_25082298_items)} –µ–¥–∏–Ω–∏—Ü–∞–º–∏!")
        else:
            self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å {len(application_25082298_items)} –µ–¥–∏–Ω–∏—Ü–∞–º–∏ (–æ–∂–∏–¥–∞–ª–æ—Å—å 7+)", "ERROR")
        
        if len(all_items) >= EXPECTED_MIN_UNITS:
            self.test_results["min_units_found"] = True
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_items)} –µ–¥–∏–Ω–∏—Ü (–º–∏–Ω–∏–º—É–º {EXPECTED_MIN_UNITS})!")
        else:
            self.log(f"‚ùå –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(all_items)} –µ–¥–∏–Ω–∏—Ü (–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º {EXPECTED_MIN_UNITS})", "ERROR")
        
        if len(all_items) >= EXPECTED_TOTAL_UNITS:
            self.test_results["total_units_expected"] = True
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_items)} –µ–¥–∏–Ω–∏—Ü (–æ–∂–∏–¥–∞–ª–æ—Å—å {EXPECTED_TOTAL_UNITS})!")
        else:
            self.log(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(all_items)} –µ–¥–∏–Ω–∏—Ü (–æ–∂–∏–¥–∞–ª–æ—Å—å {EXPECTED_TOTAL_UNITS})", "WARNING")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        if len(usr648425_items) > 0:
            self.test_results["operator_filtering_works"] = True
            self.log("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            self.log("‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!", "ERROR")
        
        return len(all_items) > 0
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API layout-with-cargo –î–õ–Ø USR648425")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id
        if not self.get_warehouse_id():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å warehouse_id!", "ERROR")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed API –¥–ª—è –ø–æ–∏—Å–∫–∞ USR648425
        usr648425_in_fully_placed, app_25082298_in_fully_placed = self.check_fully_placed_api_for_usr648425()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
        api_data = self.test_layout_with_cargo_api()
        if api_data is None:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ!", "ERROR")
            return False
        
        # 5. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö USR648425
        if not self.analyze_usr648425_data(api_data):
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è!", "ERROR")
            return False
        
        # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report(usr648425_in_fully_placed, app_25082298_in_fully_placed)
        
        return True
    
    def generate_final_report(self, usr648425_in_fully_placed=False, app_25082298_in_fully_placed=False):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("=" * 80)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 80)
        
        total_tests = len(self.test_results) - 1  # -1 –¥–ª—è detailed_results
        passed_tests = sum(1 for k, v in self.test_results.items() if k != "detailed_results" and v)
        
        self.log(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        self.log(f"üìä SUCCESS RATE: {(passed_tests/total_tests)*100:.1f}%")
        
        self.log("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        test_descriptions = {
            "auth_success": "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            "warehouse_found": "‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
            "api_no_500_error": "‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–∫–∏ 500",
            "usr648425_data_found": "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç USR648425 –Ω–∞–π–¥–µ–Ω—ã",
            "application_25082298_found": "‚úÖ –ó–∞—è–≤–∫–∞ 25082298 —Å 7+ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –Ω–∞–π–¥–µ–Ω–∞",
            "min_units_found": f"‚úÖ –ú–∏–Ω–∏–º—É–º {EXPECTED_MIN_UNITS} –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ",
            "total_units_expected": f"‚úÖ –û–∂–∏–¥–∞–µ–º—ã–µ {EXPECTED_TOTAL_UNITS} –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω—ã",
            "operator_filtering_works": "‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ä–∞–±–æ—Ç–∞–µ—Ç"
        }
        
        for test_key, description in test_descriptions.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if self.test_results.get(test_key, False) else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            self.log(f"   {description}: {status}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.log("\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        self.log(f"   üìã USR648425 –Ω–∞–π–¥–µ–Ω –≤ fully-placed API: {'‚úÖ –î–ê' if usr648425_in_fully_placed else '‚ùå –ù–ï–¢'}")
        self.log(f"   üìã –ó–∞—è–≤–∫–∞ 25082298 –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed API: {'‚úÖ –î–ê' if app_25082298_in_fully_placed else '‚ùå –ù–ï–¢'}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        if passed_tests == total_tests:
            self.log("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            self.log("‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è USR648425")
            self.log("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            self.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        elif self.test_results["api_no_500_error"]:
            self.log("\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: API —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
            self.log("‚úÖ –û—à–∏–±–∫–∞ 500 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            if usr648425_in_fully_placed:
                self.log("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ USR648425 —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ layout-with-cargo")
                self.log("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ API")
            else:
                self.log("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ USR648425 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        else:
            self.log("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: API –≤—Å–µ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏!")
            self.log("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã")
            self.log("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LayoutWithCargoUSR648425Tester()
    
    try:
        success = tester.run_comprehensive_test()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        tester.log("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        sys.exit(1)
    except Exception as e:
        tester.log(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()