#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢:
–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ü–µ—á–∞—Ç—å QR –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏" —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏–Ω—è—Ç—å –≥—Ä—É–∑" –Ω–∞ —Ñ–æ—Ä–º–µ "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π –≥—Ä—É–∑". 
–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "250127/02/01" –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ "250127") 
—Å –ø–µ—á–∞—Ç—å—é —Ä–∞–∑–º–µ—Ä–æ–º 90–º–º x 100–º–º.

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ POST /api/operator/cargo/accept
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ backend —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API endpoint GET /api/operator/cargo/{cargo_id}/full-info –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
Backend –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ, –≤—Å–µ API endpoints –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. 
–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ frontend.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://placement-manager.preview.emergentagent.com/api"

def test_warehouse_operator_authorization():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    print("1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            token = result.get("access_token")
            user_info = result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')}")
            print(f"   üë§ –†–æ–ª—å: {user_info.get('role', 'Unknown')}")
            print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', 'Unknown')}")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return token, user_info
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return None, None
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None, None

def test_cargo_creation(token):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    print("\n2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ß–ï–†–ï–ó POST /api/operator/cargo/accept")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    cargo_data = {
        "sender_full_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á –°–∏–¥–æ—Ä–æ–≤",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–ê—Ö–º–∞–¥ –†–∞—Ö–∏–º–æ–≤–∏—á –ù–∞–∑–∞—Ä–æ–≤", 
        "recipient_phone": "+992900123456",
        "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (—Ç–µ–ª–µ–≤–∏–∑–æ—Ä)",
                "quantity": 1,
                "weight": 25.0,
                "price_per_kg": 150.0,
                "total_amount": 3750.0
            },
            {
                "cargo_name": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", 
                "quantity": 2,
                "weight": 5.0,
                "price_per_kg": 200.0,
                "total_amount": 2000.0
            }
        ]
    }
    
    try:
        response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            cargo_number = result.get("cargo_number", "Unknown")
            cargo_id = result.get("id", "Unknown")
            
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
            print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–∞: {len(cargo_data['cargo_items'])}")
            
            total_quantity = sum(item['quantity'] for item in cargo_data['cargo_items'])
            print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {total_quantity}")
            
            return cargo_id, cargo_number, result
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return None, None, None
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return None, None, None

def test_backend_stability_after_new_functionality(token):
    """–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò BACKEND –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
    endpoints_to_test = [
        ("GET", "/operator/warehouses", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"),
        ("GET", "/warehouses/all-cities", "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å–∫–ª–∞–¥–æ–≤"),
        ("GET", "/operator/dashboard/analytics", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"),
        ("GET", "/operator/pickup-requests", "–ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞"),
        ("GET", "/operator/warehouse-notifications", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
    ]
    
    stable_endpoints = 0
    total_endpoints = len(endpoints_to_test)
    
    for method, endpoint, description in endpoints_to_test:
        try:
            if method == "GET":
                response = requests.get(f"{BACKEND_URL}{endpoint}", headers=headers)
            
            print(f"   üì° {method} {endpoint} - Status: {response.status_code} ({description})")
            
            if response.status_code in [200, 201]:
                print(f"   ‚úÖ {description}: –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                stable_endpoints += 1
            else:
                print(f"   ‚ö†Ô∏è {description}: –°—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå {description}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
    
    stability_percentage = (stable_endpoints / total_endpoints) * 100
    print(f"\n   üìä –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend: {stable_endpoints}/{total_endpoints} endpoints ({stability_percentage:.1f}%)")
    
    if stability_percentage >= 80:
        print(f"   ‚úÖ Backend —Å—Ç–∞–±–∏–ª–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        return True
    else:
        print(f"   ‚ùå Backend –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        return False

def test_full_info_endpoint(token, cargo_id):
    """–¢–µ—Å—Ç endpoint GET /api/operator/cargo/{cargo_id}/full-info"""
    print(f"\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT GET /api/operator/cargo/{cargo_id}/full-info")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(f"{BACKEND_URL}/operator/cargo/{cargo_id}/full-info", headers=headers)
        print(f"   üì° GET /api/operator/cargo/{cargo_id}/full-info - Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            required_fields = [
                "cargo_number", "cargo_items", "sender_full_name", 
                "recipient_full_name", "weight", "declared_value"
            ]
            
            missing_fields = []
            for field in required_fields:
                if field not in result:
                    missing_fields.append(field)
            
            if not missing_fields:
                print(f"   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ cargo_items –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                cargo_items = result.get("cargo_items", [])
                print(f"   üì¶ Cargo items –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                for i, item in enumerate(cargo_items, 1):
                    print(f"      –ì—Ä—É–∑ #{i}: {item.get('cargo_name', 'N/A')} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('quantity', 'N/A')})")
                
                return True, result
            else:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
                return False, None
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False, None
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ endpoint: {e}")
        return False, None

def test_previously_added_functions(token):
    """–¢–µ—Å—Ç —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ê–ù–ï–ï –î–û–ë–ê–í–õ–ï–ù–ù–´–• –§–£–ù–ö–¶–ò–ô")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å
    functions_to_test = [
        ("GET", "/auth/me", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
        ("GET", "/operator/warehouses", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"),
        ("GET", "/cargo/all", "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤"),
        ("GET", "/warehouses", "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤")
    ]
    
    working_functions = 0
    total_functions = len(functions_to_test)
    
    for method, endpoint, description in functions_to_test:
        try:
            if method == "GET":
                response = requests.get(f"{BACKEND_URL}{endpoint}", headers=headers)
            
            print(f"   üì° {method} {endpoint} - Status: {response.status_code}")
            
            if response.status_code in [200, 201]:
                print(f"   ‚úÖ {description}: –§—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                working_functions += 1
            else:
                print(f"   ‚ö†Ô∏è {description}: –°—Ç–∞—Ç—É—Å {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå {description}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
    
    functionality_percentage = (working_functions / total_functions) * 100
    print(f"\n   üìä –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π: {working_functions}/{total_functions} ({functionality_percentage:.1f}%)")
    
    if functionality_percentage >= 75:
        print(f"   ‚úÖ –†–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print(f"   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        return False

def test_qr_code_number_extraction(cargo_number):
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è QR –∫–æ–¥–∞"""
    print(f"\n6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ù–û–ú–ï–†–ê –ó–ê–Ø–í–ö–ò –î–õ–Ø QR –ö–û–î–ê")
    
    print(f"   üìã –ü–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
    
    # –õ–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤)
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "250127/02/01" –¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è "250127"
    base_number = cargo_number.split('/')[0] if '/' in cargo_number else cargo_number
    
    print(f"   üéØ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è QR –∫–æ–¥–∞: {base_number}")
    print(f"   üìè –î–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: {len(base_number)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è QR –∫–æ–¥–∞
    if len(base_number) >= 4 and base_number.isdigit():
        print(f"   ‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞")
        print(f"   üñ®Ô∏è –ì–æ—Ç–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–º 90–º–º x 100–º–º")
        return True, base_number
    else:
        print(f"   ‚ùå –ù–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è QR –∫–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º, –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)")
        return False, None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ TAJLINE.TJ")
    print("=" * 120)
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    print()
    
    # –°—á–µ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    total_tests = 6
    passed_tests = 0
    
    # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    token, user_info = test_warehouse_operator_authorization()
    if token:
        passed_tests += 1
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        return False
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    cargo_id, cargo_number, cargo_result = test_cargo_creation(token)
    if cargo_id and cargo_number:
        passed_tests += 1
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
        return False
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend
    if test_backend_stability_after_new_functionality(token):
        passed_tests += 1
    
    # –¢–µ—Å—Ç 4: Endpoint full-info
    full_info_success, full_info_result = test_full_info_endpoint(token, cargo_id)
    if full_info_success:
        passed_tests += 1
    
    # –¢–µ—Å—Ç 5: –†–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if test_previously_added_functions(token):
        passed_tests += 1
    
    # –¢–µ—Å—Ç 6: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è QR –∫–æ–¥–∞
    qr_success, qr_number = test_qr_code_number_extraction(cargo_number)
    if qr_success:
        passed_tests += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 120)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 120)
    
    success_rate = (passed_tests / total_tests) * 100
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
    
    if success_rate >= 85:
        print("\nüéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ Backend —Å—Ç–∞–±–∏–ª–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        print("‚úÖ API endpoint GET /api/operator/cargo/{cargo_id}/full-info —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –í—Å–µ —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è QR –∫–æ–¥–∞ –≥–æ—Ç–æ–≤–æ")
        print("\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–û–ô –ö–ù–û–ü–ö–ò –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–ê –ù–ê FRONTEND:")
        print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è QR: {qr_number}")
        print(f"   üñ®Ô∏è –†–∞–∑–º–µ—Ä –ø–µ—á–∞—Ç–∏: 90–º–º x 100–º–º")
        print(f"   üîó Backend endpoint –≥–æ—Ç–æ–≤: GET /api/operator/cargo/{cargo_id}/full-info")
        return True
    else:
        print("\n‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º frontend")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)