#!/usr/bin/env python3
"""
–ü–†–Ø–ú–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•: –ü–æ–∏—Å–∫ placement_records –≤ MongoDB
================================================================

–¶–ï–õ–¨: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ MongoDB –¥–ª—è –ø–æ–∏—Å–∫–∞ placement_records –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
2. –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å placement –¥–∞–Ω–Ω—ã–º–∏
3. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
4. –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞—è–≤–æ–∫: 25082298, 250101, 25082235
5. –ê–Ω–∞–ª–∏–∑ warehouse_id –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
6. –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001/–ú–æ—Å–∫–≤–∞
"""

import requests
import json
import sys
import os
from datetime import datetime
from pymongo import MongoClient
from collections import defaultdict

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# MongoDB –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'cargo_transport')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_APPLICATIONS = ["25082298", "250101", "25082235"]
EXPECTED_UNITS = {"25082298": 7, "250101": 2, "25082235": 4}
TOTAL_EXPECTED = 13

class DirectDatabaseDiagnosticTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.mongo_client = None
        self.db = None
        self.test_results = {
            "auth_success": False,
            "mongo_connection": False,
            "collections_found": [],
            "placement_records_found": 0,
            "target_applications_found": {},
            "warehouse_001_records": 0,
            "warehouse_patterns": {},
            "location_formats": set(),
            "critical_issues": []
        }
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.test_results["auth_success"] = True
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def connect_to_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
            self.log(f"üìç MongoDB URL: {MONGO_URL}")
            self.log(f"üìç Database: {DB_NAME}")
            
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.mongo_client.admin.command('ping')
            self.test_results["mongo_connection"] = True
            self.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            collections = self.db.list_collection_names()
            self.test_results["collections_found"] = collections
            self.log(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π: {collections}")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {str(e)}", "ERROR")
            return False
    
    def search_placement_collections(self):
        """–ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
        try:
            self.log("\nüîç –ü–û–ò–°–ö –ö–û–õ–õ–ï–ö–¶–ò–ô –° –î–ê–ù–ù–´–ú–ò –û –†–ê–ó–ú–ï–©–ï–ù–ò–ò...")
            
            placement_collections = []
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            possible_collections = [
                'placement_records',
                'cargo_placement',
                'warehouse_placements',
                'individual_placements',
                'cargo',
                'operator_cargo',
                'warehouse_cells'
            ]
            
            for collection_name in possible_collections:
                if collection_name in self.test_results["collections_found"]:
                    collection = self.db[collection_name]
                    count = collection.count_documents({})
                    self.log(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    placement_collections.append((collection_name, count))
                else:
                    self.log(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            return placement_collections
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}", "ERROR")
            return []
    
    def analyze_cargo_collections(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π cargo –∏ operator_cargo –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        try:
            self.log("\nüì¶ –ê–ù–ê–õ–ò–ó –ö–û–õ–õ–ï–ö–¶–ò–ô CARGO...")
            
            all_placement_data = []
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ cargo
            if 'cargo' in self.test_results["collections_found"]:
                cargo_collection = self.db['cargo']
                cargo_count = cargo_collection.count_documents({})
                self.log(f"üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è cargo: {cargo_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                
                # –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
                placed_cargo = list(cargo_collection.find({
                    "$or": [
                        {"status": "placed_in_warehouse"},
                        {"warehouse_id": {"$exists": True, "$ne": None}},
                        {"block_number": {"$exists": True}},
                        {"individual_items.is_placed": True}
                    ]
                }))
                
                self.log(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(placed_cargo)} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ cargo")
                
                for cargo in placed_cargo:
                    cargo_number = cargo.get('cargo_number', '')
                    individual_items = cargo.get('individual_items', [])
                    
                    for item in individual_items:
                        if item.get('is_placed', False):
                            placement_data = {
                                'source': 'cargo',
                                'cargo_number': cargo_number,
                                'individual_number': item.get('individual_number', ''),
                                'warehouse_id': cargo.get('warehouse_id'),
                                'location': item.get('placement_info', ''),
                                'is_placed': item.get('is_placed', False),
                                'placed_at': item.get('placed_at'),
                                'placed_by': item.get('placed_by')
                            }
                            all_placement_data.append(placement_data)
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo
            if 'operator_cargo' in self.test_results["collections_found"]:
                operator_cargo_collection = self.db['operator_cargo']
                operator_cargo_count = operator_cargo_collection.count_documents({})
                self.log(f"üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è operator_cargo: {operator_cargo_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                
                # –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
                placed_operator_cargo = list(operator_cargo_collection.find({
                    "$or": [
                        {"status": "placed_in_warehouse"},
                        {"warehouse_id": {"$exists": True, "$ne": None}},
                        {"block_number": {"$exists": True}},
                        {"individual_items.is_placed": True}
                    ]
                }))
                
                self.log(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(placed_operator_cargo)} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo")
                
                for cargo in placed_operator_cargo:
                    cargo_number = cargo.get('cargo_number', '')
                    individual_items = cargo.get('individual_items', [])
                    
                    for item in individual_items:
                        if item.get('is_placed', False):
                            placement_data = {
                                'source': 'operator_cargo',
                                'cargo_number': cargo_number,
                                'individual_number': item.get('individual_number', ''),
                                'warehouse_id': cargo.get('warehouse_id'),
                                'location': item.get('placement_info', ''),
                                'is_placed': item.get('is_placed', False),
                                'placed_at': item.get('placed_at'),
                                'placed_by': item.get('placed_by')
                            }
                            all_placement_data.append(placement_data)
            
            self.test_results["placement_records_found"] = len(all_placement_data)
            self.log(f"üìä –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û {len(all_placement_data)} –ó–ê–ü–ò–°–ï–ô –û –†–ê–ó–ú–ï–©–ï–ù–ò–ò")
            
            return all_placement_data
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π cargo: {str(e)}", "ERROR")
            return []
    
    def search_placement_records_collection(self):
        """–ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records"""
        try:
            self.log("\nüîç –ü–û–ò–°–ö –í –ö–û–õ–õ–ï–ö–¶–ò–ò placement_records...")
            
            if 'placement_records' not in self.test_results["collections_found"]:
                self.log("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è placement_records –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return []
            
            placement_collection = self.db['placement_records']
            all_records = list(placement_collection.find({}))
            
            self.log(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_records)} –∑–∞–ø–∏—Å–µ–π –≤ placement_records")
            
            placement_data = []
            for record in all_records:
                placement_data.append({
                    'source': 'placement_records',
                    'cargo_number': record.get('cargo_number', ''),
                    'individual_number': record.get('individual_number', ''),
                    'warehouse_id': record.get('warehouse_id'),
                    'location': record.get('location', ''),
                    'placed_at': record.get('placed_at'),
                    'placed_by': record.get('placed_by')
                })
            
            return placement_data
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ placement_records: {str(e)}", "ERROR")
            return []
    
    def analyze_warehouses(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ 001"""
        try:
            self.log("\nüè¢ –ê–ù–ê–õ–ò–ó –°–ö–õ–ê–î–û–í...")
            
            if 'warehouses' not in self.test_results["collections_found"]:
                self.log("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è warehouses –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return {}
            
            warehouses_collection = self.db['warehouses']
            all_warehouses = list(warehouses_collection.find({}))
            
            self.log(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_warehouses)} —Å–∫–ª–∞–¥–æ–≤")
            
            warehouse_info = {}
            moscow_warehouse = None
            
            for warehouse in all_warehouses:
                warehouse_id = warehouse.get('id', '')
                warehouse_name = warehouse.get('name', '')
                warehouse_id_number = warehouse.get('warehouse_id_number', '')
                location = warehouse.get('location', '')
                
                warehouse_info[warehouse_id] = {
                    'name': warehouse_name,
                    'id_number': warehouse_id_number,
                    'location': location
                }
                
                self.log(f"üè¢ –°–∫–ª–∞–¥: {warehouse_name} (ID: {warehouse_id}, –ù–æ–º–µ—Ä: {warehouse_id_number}, –õ–æ–∫–∞—Ü–∏—è: {location})")
                
                # –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001 –∏–ª–∏ –ú–æ—Å–∫–≤–∞
                if (warehouse_id_number == '001' or 
                    '–º–æ—Å–∫–≤–∞' in warehouse_name.lower() or 
                    '–º–æ—Å–∫–≤–∞' in location.lower()):
                    moscow_warehouse = warehouse
                    self.log(f"üéØ –ù–ê–ô–î–ï–ù –°–ö–õ–ê–î 001/–ú–û–°–ö–í–ê: {warehouse_name}")
            
            return warehouse_info, moscow_warehouse
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–ª–∞–¥–æ–≤: {str(e)}", "ERROR")
            return {}, None
    
    def analyze_placement_data(self, placement_data):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏"""
        try:
            self.log(f"\nüîç –ê–ù–ê–õ–ò–ó {len(placement_data)} –ó–ê–ü–ò–°–ï–ô –û –†–ê–ó–ú–ï–©–ï–ù–ò–ò...")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
            application_stats = defaultdict(list)
            warehouse_stats = defaultdict(int)
            location_formats = set()
            
            for record in placement_data:
                cargo_number = record.get('cargo_number', '')
                warehouse_id = record.get('warehouse_id', '')
                location = record.get('location', '')
                
                # –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫
                if cargo_number:
                    application_stats[cargo_number].append(record)
                
                # –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
                if warehouse_id:
                    warehouse_stats[warehouse_id] += 1
                
                # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                if location:
                    location_formats.add(location)
            
            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –∑–∞—è–≤–æ–∫
            self.log("\nüéØ –ê–ù–ê–õ–ò–ó –¶–ï–õ–ï–í–´–• –ó–ê–Ø–í–û–ö:")
            for app_number in TARGET_APPLICATIONS:
                found_records = application_stats.get(app_number, [])
                expected_count = EXPECTED_UNITS.get(app_number, 0)
                
                self.test_results["target_applications_found"][app_number] = len(found_records)
                
                if found_records:
                    self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {len(found_records)} –∑–∞–ø–∏—Å–µ–π (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count})")
                    for record in found_records:
                        self.log(f"   - {record.get('individual_number', 'N/A')} –≤ {record.get('location', 'N/A')} (–∏—Å—Ç–æ—á–Ω–∏–∫: {record.get('source', 'N/A')})")
                else:
                    self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {app_number}: –ù–ï –ù–ê–ô–î–ï–ù–ê (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count} –∑–∞–ø–∏—Å–µ–π)")
                    self.test_results["critical_issues"].append(f"–ó–∞—è–≤–∫–∞ {app_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
            self.log(f"\nüè¢ –ê–ù–ê–õ–ò–ó –°–ö–õ–ê–î–û–í ({len(warehouse_stats)} —Å–∫–ª–∞–¥–æ–≤):")
            for warehouse_id, count in warehouse_stats.items():
                self.log(f"üì¶ –°–∫–ª–∞–¥ {warehouse_id}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            self.log(f"\nüìç –ù–ê–ô–î–ï–ù–û {len(location_formats)} –£–ù–ò–ö–ê–õ–¨–ù–´–• –§–û–†–ú–ê–¢–û–í –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø:")
            for location in sorted(location_formats):
                self.log(f"   - {location}")
                self.test_results["location_formats"].add(location)
            
            self.test_results["warehouse_patterns"] = dict(warehouse_stats)
            
            return application_stats, warehouse_stats, location_formats
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}", "ERROR")
            return {}, {}, set()
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.log("üöÄ –ó–ê–ü–£–°–ö –ü–†–Ø–ú–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            self.log("=" * 80)
            
            # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate_operator():
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
            
            # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if not self.connect_to_mongodb():
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
                return False
            
            # 3. –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            placement_collections = self.search_placement_collections()
            
            # 4. –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤
            warehouse_info, moscow_warehouse = self.analyze_warehouses()
            
            # 5. –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
            placement_data = []
            
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records
            placement_records_data = self.search_placement_records_collection()
            placement_data.extend(placement_records_data)
            
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö cargo
            cargo_placement_data = self.analyze_cargo_collections()
            placement_data.extend(cargo_placement_data)
            
            # 6. –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if placement_data:
                app_stats, warehouse_stats, location_formats = self.analyze_placement_data(placement_data)
            else:
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
            
            # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.generate_final_report(moscow_warehouse)
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}", "ERROR")
            return False
        finally:
            if self.mongo_client:
                self.mongo_client.close()
    
    def generate_final_report(self, moscow_warehouse=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.log("\n" + "=" * 80)
            self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–†–Ø–ú–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            self.log("=" * 80)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '–û–®–ò–ë–ö–ê'}")
            self.log(f"‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'–£–°–ü–ï–®–ù–û' if self.test_results['mongo_connection'] else '–û–®–ò–ë–ö–ê'}")
            self.log(f"üìã –ö–æ–ª–ª–µ–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(self.test_results['collections_found'])}")
            self.log(f"üìä –ó–∞–ø–∏—Å–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω–æ: {self.test_results['placement_records_found']}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ 001
            if moscow_warehouse:
                self.log(f"\nüéØ –°–ö–õ–ê–î 001/–ú–û–°–ö–í–ê –ù–ê–ô–î–ï–ù:")
                self.log(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {moscow_warehouse.get('name', 'N/A')}")
                self.log(f"   - ID: {moscow_warehouse.get('id', 'N/A')}")
                self.log(f"   - –ù–æ–º–µ—Ä: {moscow_warehouse.get('warehouse_id_number', 'N/A')}")
                self.log(f"   - –õ–æ–∫–∞—Ü–∏—è: {moscow_warehouse.get('location', 'N/A')}")
            else:
                self.log(f"\n‚ùå –°–ö–õ–ê–î 001/–ú–û–°–ö–í–ê –ù–ï –ù–ê–ô–î–ï–ù")
                self.test_results["critical_issues"].append("–°–∫–ª–∞–¥ 001/–ú–æ—Å–∫–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –¶–µ–ª–µ–≤—ã–µ –∑–∞—è–≤–∫–∏
            self.log(f"\nüéØ –¶–ï–õ–ï–í–´–ï –ó–ê–Ø–í–ö–ò:")
            total_found = 0
            for app_number, expected in EXPECTED_UNITS.items():
                found = self.test_results["target_applications_found"].get(app_number, 0)
                total_found += found
                status = "‚úÖ" if found == expected else "‚ùå"
                self.log(f"{status} {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found} –∏–∑ {expected} –æ–∂–∏–¥–∞–µ–º—ã—Ö")
            
            self.log(f"\nüìà –û–ë–©–ò–ô –ò–¢–û–ì: –Ω–∞–π–¥–µ–Ω–æ {total_found} –∏–∑ {TOTAL_EXPECTED} –æ–∂–∏–¥–∞–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü")
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            if self.test_results["critical_issues"]:
                self.log(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.test_results['critical_issues'])}):")
                for issue in self.test_results["critical_issues"]:
                    self.log(f"‚ùå {issue}")
            
            # –§–æ—Ä–º–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            if self.test_results["location_formats"]:
                self.log(f"\nüìç –ù–ê–ô–î–ï–ù–ù–´–ï –§–û–†–ú–ê–¢–´ –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø ({len(self.test_results['location_formats'])}):")
                for location_format in sorted(self.test_results["location_formats"]):
                    self.log(f"   - {location_format}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            if total_found == 0:
                self.log("üîß 1. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                self.log("üîß 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ - –∑–∞–ø–∏—Å–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
                self.log("üîß 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤")
            elif total_found < TOTAL_EXPECTED:
                self.log("üîß 1. –ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
                self.log("üîß 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É frontend –∏ backend")
                self.log("üîß 3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏")
            
            if not moscow_warehouse:
                self.log("üîß 4. –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥ 001/–ú–æ—Å–∫–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            success_rate = (total_found / TOTAL_EXPECTED) * 100 if TOTAL_EXPECTED > 0 else 0
            self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {success_rate:.1f}%")
            
            if success_rate == 0:
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–û–õ–ù–ê–Ø –ü–û–¢–ï–†–Ø –î–ê–ù–ù–´–•!")
            elif success_rate < 50:
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
            elif success_rate < 100:
                self.log("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê")
            else:
                self.log("‚úÖ –í–°–ï –ó–ê–ü–ò–°–ò –ù–ê–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}", "ERROR")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü–†–Ø–ú–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•: –ü–æ–∏—Å–∫ 13 –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –µ–¥–∏–Ω–∏—Ü —Å–∫–ª–∞–¥–∞ 001")
    print("=" * 80)
    
    tester = DirectDatabaseDiagnosticTester()
    
    try:
        success = tester.run_comprehensive_diagnosis()
        
        if success:
            print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        else:
            print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()