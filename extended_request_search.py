#!/usr/bin/env python3
"""
–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 100008/02 –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö —Å–∏—Å—Ç–µ–º—ã TAJLINE.TJ

–ü–æ—Å–∫–æ–ª—å–∫—É –∑–∞—è–≤–∫–∞ 100008/02 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö, –ø—Ä–æ–≤–µ–¥–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
–≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã, –≤–∫–ª—é—á–∞—è –≥—Ä—É–∑—ã, –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –∑–∞—è–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://placement-manager.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

class ExtendedRequestSearchTest:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.target_request_number = "100008/02"
        self.search_results = {}
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'N/A')} ({user_info.get('role', 'N/A')})")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def search_in_cargo_collections(self):
        """–ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –≥—Ä—É–∑–æ–≤"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {self.target_request_number} –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –≥—Ä—É–∑–æ–≤...")
        
        # –ü–æ–∏—Å–∫ –≤ operator/cargo/available-for-placement
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_items = data.get('items', [])
                
                print(f"üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(cargo_items)} –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏...")
                
                found_cargo = []
                for cargo in cargo_items:
                    cargo_number = cargo.get('cargo_number', '')
                    if self.target_request_number in cargo_number or cargo_number in self.target_request_number:
                        found_cargo.append(cargo)
                
                if found_cargo:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(found_cargo)} –ø–æ—Ö–æ–∂–∏—Ö –≥—Ä—É–∑–æ–≤:")
                    for cargo in found_cargo:
                        print(f"   - –ù–æ–º–µ—Ä: {cargo.get('cargo_number', 'N/A')}")
                        print(f"     ID: {cargo.get('id', 'N/A')}")
                        print(f"     –°—Ç–∞—Ç—É—Å: {cargo.get('processing_status', 'N/A')}")
                        print(f"     –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {cargo.get('sender_full_name', 'N/A')}")
                    
                    self.search_results['cargo_placement'] = found_cargo
                else:
                    print("‚ùå –ü–æ—Ö–æ–∂–∏—Ö –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥—Ä—É–∑–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
        
        # –ü–æ–∏—Å–∫ –≤ admin/cargo (–≤—Å–µ –≥—Ä—É–∑—ã)
        try:
            response = self.session.get(
                f"{BACKEND_URL}/admin/cargo",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                all_cargo = data.get('items', []) if isinstance(data, dict) else data
                
                print(f"üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(all_cargo)} –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ...")
                
                found_cargo = []
                for cargo in all_cargo:
                    cargo_number = cargo.get('cargo_number', '')
                    if self.target_request_number in cargo_number or cargo_number in self.target_request_number:
                        found_cargo.append(cargo)
                
                if found_cargo:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(found_cargo)} –ø–æ—Ö–æ–∂–∏—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:")
                    for cargo in found_cargo:
                        print(f"   - –ù–æ–º–µ—Ä: {cargo.get('cargo_number', 'N/A')}")
                        print(f"     ID: {cargo.get('id', 'N/A')}")
                        print(f"     –°—Ç–∞—Ç—É—Å: {cargo.get('status', 'N/A')}")
                        print(f"     –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {cargo.get('sender_full_name', 'N/A')}")
                    
                    self.search_results['all_cargo'] = found_cargo
                else:
                    print("‚ùå –ü–æ—Ö–æ–∂–∏—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ –≤—Å–µ—Ö –≥—Ä—É–∑–∞—Ö: {e}")
    
    def search_in_courier_collections(self):
        """–ü–æ–∏—Å–∫ –≤ –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö"""
        print(f"\nüöö –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {self.target_request_number} –≤ –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö...")
        
        # –ü–æ–∏—Å–∫ –≤ courier-requests
        try:
            response = self.session.get(
                f"{BACKEND_URL}/admin/courier-requests",
                timeout=10
            )
            
            if response.status_code == 200:
                courier_requests = response.json()
                
                print(f"üöö –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(courier_requests)} –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫...")
                
                found_requests = []
                for request in courier_requests:
                    request_number = request.get('request_number', '')
                    cargo_name = request.get('cargo_name', '')
                    
                    if (self.target_request_number in request_number or 
                        request_number in self.target_request_number or
                        self.target_request_number in cargo_name):
                        found_requests.append(request)
                
                if found_requests:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(found_requests)} –ø–æ—Ö–æ–∂–∏—Ö –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫:")
                    for request in found_requests:
                        print(f"   - –ù–æ–º–µ—Ä: {request.get('request_number', 'N/A')}")
                        print(f"     ID: {request.get('id', 'N/A')}")
                        print(f"     –°—Ç–∞—Ç—É—Å: {request.get('request_status', 'N/A')}")
                        print(f"     –ì—Ä—É–∑: {request.get('cargo_name', 'N/A')}")
                    
                    self.search_results['courier_requests'] = found_requests
                else:
                    print("‚ùå –ü–æ—Ö–æ–∂–∏—Ö –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–∫–∞—Ö: {e}")
    
    def search_in_warehouse_notifications(self):
        """–ü–æ–∏—Å–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —Å–∫–ª–∞–¥–∞"""
        print(f"\nüì¨ –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {self.target_request_number} –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/warehouse-notifications",
                timeout=10
            )
            
            if response.status_code == 200:
                notifications = response.json()
                
                print(f"üì¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞...")
                
                found_notifications = []
                for notification in notifications:
                    request_number = notification.get('request_number', '')
                    
                    if (self.target_request_number in request_number or 
                        request_number in self.target_request_number):
                        found_notifications.append(notification)
                
                if found_notifications:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(found_notifications)} –ø–æ—Ö–æ–∂–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
                    for notification in found_notifications:
                        print(f"   - –ù–æ–º–µ—Ä: {notification.get('request_number', 'N/A')}")
                        print(f"     ID: {notification.get('id', 'N/A')}")
                        print(f"     –°—Ç–∞—Ç—É—Å: {notification.get('status', 'N/A')}")
                        print(f"     –¢–∏–ø: {notification.get('request_type', 'N/A')}")
                    
                    self.search_results['warehouse_notifications'] = found_notifications
                else:
                    print("‚ùå –ü–æ—Ö–æ–∂–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {e}")
    
    def search_by_pattern_variations(self):
        """–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–∞—Ä–∏–∞—Ü–∏—è–º –Ω–æ–º–µ—Ä–∞"""
        print(f"\nüîÑ –ü–æ–∏—Å–∫ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º –Ω–æ–º–µ—Ä–∞ {self.target_request_number}...")
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–æ–º–µ—Ä–∞
        variations = [
            "100008/02",
            "100008-02", 
            "100008_02",
            "10000802",
            "100008.02",
            "100008 02",
            "000008/02",
            "008/02",
            "100008",
            "02"
        ]
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(variations)} –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–æ–º–µ—Ä–∞...")
        
        # –ü–æ–∏—Å–∫ –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –≥—Ä—É–∑—ã
        try:
            response = self.session.get(
                f"{BACKEND_URL}/admin/cargo-requests",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                requests_list = data if isinstance(data, list) else data.get('items', [])
                
                found_by_variation = []
                for request in requests_list:
                    request_number = request.get('request_number', '')
                    cargo_name = request.get('cargo_name', '')
                    
                    for variation in variations:
                        if (variation in request_number or 
                            variation in cargo_name or
                            request_number.endswith(variation) or
                            cargo_name.endswith(variation)):
                            found_by_variation.append({
                                'request': request,
                                'matched_variation': variation
                            })
                            break
                
                if found_by_variation:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(found_by_variation)} –∑–∞—è–≤–æ–∫ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º:")
                    for item in found_by_variation:
                        request = item['request']
                        variation = item['matched_variation']
                        print(f"   - –ù–æ–º–µ—Ä: {request.get('request_number', 'N/A')} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {variation})")
                        print(f"     ID: {request.get('id', 'N/A')}")
                        print(f"     –ì—Ä—É–∑: {request.get('cargo_name', 'N/A')}")
                    
                    self.search_results['pattern_variations'] = found_by_variation
                else:
                    print("‚ùå –ó–∞—è–≤–æ–∫ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º: {e}")
    
    def check_deleted_or_archived_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüóÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        endpoints_to_check = [
            "/admin/deleted-requests",
            "/admin/archived-requests", 
            "/operator/completed-requests",
            "/admin/history",
            "/operator/pickup-history"
        ]
        
        for endpoint in endpoints_to_check:
            try:
                response = self.session.get(
                    f"{BACKEND_URL}{endpoint}",
                    timeout=10
                )
                
                if response.status_code == 200:
                    print(f"‚úÖ Endpoint {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω")
                    data = response.json()
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ
                    items = []
                    if isinstance(data, list):
                        items = data
                    elif isinstance(data, dict):
                        items = data.get('items', []) or data.get('requests', []) or data.get('history', [])
                    
                    if items:
                        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(items)} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É
                        found = []
                        for item in items:
                            item_number = item.get('request_number', '') or item.get('cargo_number', '')
                            if self.target_request_number in item_number:
                                found.append(item)
                        
                        if found:
                            print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(found)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π!")
                            for item in found:
                                print(f"      - –ù–æ–º–µ—Ä: {item.get('request_number', 'N/A')}")
                                print(f"        ID: {item.get('id', 'N/A')}")
                    else:
                        print(f"   üì≠ –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                elif response.status_code == 404:
                    print(f"‚ùå Endpoint {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è Endpoint {endpoint} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {endpoint}: {e}")
    
    def analyze_similar_requests(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞"""
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/admin/cargo-requests",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                requests_list = data if isinstance(data, list) else data.get('items', [])
                
                print(f"üìã –ê–Ω–∞–ª–∏–∑ {len(requests_list)} –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ:")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
                number_formats = {}
                for request in requests_list:
                    request_number = request.get('request_number', '')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
                    if request_number.startswith('REQ'):
                        format_type = 'REQ_FORMAT'
                    elif '/' in request_number:
                        format_type = 'SLASH_FORMAT'
                    elif '-' in request_number:
                        format_type = 'DASH_FORMAT'
                    elif request_number.isdigit():
                        format_type = 'NUMERIC_FORMAT'
                    else:
                        format_type = 'OTHER_FORMAT'
                    
                    if format_type not in number_formats:
                        number_formats[format_type] = []
                    number_formats[format_type].append(request_number)
                
                print(f"\nüìä –§–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:")
                for format_type, numbers in number_formats.items():
                    print(f"   {format_type}: {len(numbers)} –∑–∞—è–≤–æ–∫")
                    for number in numbers[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
                        print(f"      - {number}")
                    if len(numbers) > 3:
                        print(f"      ... –∏ –µ—â–µ {len(numbers) - 3}")
                
                # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ü–∏—Ñ—Ä—ã –∏–∑ 100008/02)
                target_digits = ['100008', '02', '008', '100']
                similar_requests = []
                
                for request in requests_list:
                    request_number = request.get('request_number', '')
                    cargo_name = request.get('cargo_name', '')
                    
                    for digit in target_digits:
                        if digit in request_number or digit in cargo_name:
                            similar_requests.append({
                                'request': request,
                                'match': digit
                            })
                            break
                
                if similar_requests:
                    print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(similar_requests)} –∑–∞—è–≤–æ–∫ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏:")
                    for item in similar_requests:
                        request = item['request']
                        match = item['match']
                        print(f"   - {request.get('request_number', 'N/A')} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match})")
                        print(f"     –ì—Ä—É–∑: {request.get('cargo_name', 'N/A')}")
                        print(f"     –°—Ç–∞—Ç—É—Å: {request.get('status', 'N/A')}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
    
    def run_extended_search(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ 100008/02"""
        print("=" * 80)
        print("üîç –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 100008/02 –≤–æ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –≥—Ä—É–∑–æ–≤
        self.search_in_cargo_collections()
        
        # –®–∞–≥ 3: –ü–æ–∏—Å–∫ –≤ –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
        self.search_in_courier_collections()
        
        # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —Å–∫–ª–∞–¥–∞
        self.search_in_warehouse_notifications()
        
        # –®–∞–≥ 5: –ü–æ–∏—Å–∫ –ø–æ –≤–∞—Ä–∏–∞—Ü–∏—è–º –Ω–æ–º–µ—Ä–∞
        self.search_by_pattern_variations()
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.check_deleted_or_archived_data()
        
        # –®–∞–≥ 7: –ê–Ω–∞–ª–∏–∑ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞—è–≤–æ–∫
        self.analyze_similar_requests()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print(f"\n" + "=" * 80)
        print(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê")
        print(f"=" * 80)
        
        total_found = sum(len(results) for results in self.search_results.values())
        
        if total_found > 0:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_found} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
            for collection, results in self.search_results.items():
                if results:
                    print(f"   üìÇ {collection}: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            print(f"‚ùå –ó–∞—è–≤–∫–∞ {self.target_request_number} –ù–ï –ù–ê–ô–î–ï–ù–ê –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")
            print(f"\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
            print(f"   1. –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
            print(f"   2. –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç")
            print(f"   3. –ó–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            print(f"   4. –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º–µ")
            print(f"   5. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ –∑–∞—è–≤–∫–∏")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    test = ExtendedRequestSearchTest()
    
    try:
        success = test.run_extended_search()
        
        if success:
            print("\nüéâ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        else:
            print("\n‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()