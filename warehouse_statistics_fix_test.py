#!/usr/bin/env python3
"""
üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–∫–ª–∞–¥–∞
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE_NAME = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"

class WarehouseStatisticsTest:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.warehouse_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected and actual:
            print(f"   üéØ Expected: {expected}")
            print(f"   üìä Actual: {actual}")
        print()

    def authenticate_warehouse_operator(self):
        """1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê STEP 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            )
            return False

    def get_warehouse_id(self):
        """2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" """
        print("üè¢ STEP 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                for warehouse in warehouses:
                    if warehouse.get("name") == TARGET_WAREHOUSE_NAME:
                        self.warehouse_id = warehouse.get("id")
                        self.log_test(
                            "–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                            True,
                            f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '{TARGET_WAREHOUSE_NAME}' (ID: {self.warehouse_id})"
                        )
                        return True
                
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    f"–°–∫–ª–∞–¥ '{TARGET_WAREHOUSE_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤"
                )
                return False
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False

    def test_warehouse_statistics_api(self):
        """3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞"""
        print("üìä STEP 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        if not self.warehouse_id:
            self.log_test(
                "API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞",
                False,
                "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return False
            
        try:
            response = self.session.get(f"{BACKEND_URL}/warehouses/{self.warehouse_id}/statistics")
            
            if response.status_code == 200:
                stats = response.json()
                print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {json.dumps(stats, indent=2, ensure_ascii=False)}")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò
                success = True
                details = []
                
                # 1. occupied_cells –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 (–Ω–µ 10!)
                occupied_cells = stats.get("occupied_cells", 0)
                if occupied_cells == 2:
                    details.append(f"‚úÖ occupied_cells = {occupied_cells} (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 10)")
                else:
                    details.append(f"‚ùå occupied_cells = {occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)")
                    success = False
                
                # 2. total_placed_cargo –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3
                total_placed_cargo = stats.get("total_placed_cargo", 0)
                if total_placed_cargo == 3:
                    details.append(f"‚úÖ total_placed_cargo = {total_placed_cargo}")
                else:
                    details.append(f"‚ùå total_placed_cargo = {total_placed_cargo} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
                    success = False
                
                # 3. placement_statistics –ø—Ä–æ–≤–µ—Ä–∫–∏
                placement_stats = stats.get("placement_statistics", {})
                unique_occupied_cells = placement_stats.get("unique_occupied_cells", 0)
                placement_records_count = placement_stats.get("placement_records_count", 0)
                
                if unique_occupied_cells == 2:
                    details.append(f"‚úÖ placement_statistics.unique_occupied_cells = {unique_occupied_cells}")
                else:
                    details.append(f"‚ùå placement_statistics.unique_occupied_cells = {unique_occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)")
                    success = False
                
                if placement_records_count == 3:
                    details.append(f"‚úÖ placement_statistics.placement_records_count = {placement_records_count}")
                else:
                    details.append(f"‚ùå placement_statistics.placement_records_count = {placement_records_count} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
                    success = False
                
                # 4. data_source –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "placement_records"
                data_source = stats.get("data_source", "")
                if data_source == "placement_records":
                    details.append(f"‚úÖ data_source = '{data_source}'")
                else:
                    details.append(f"‚ùå data_source = '{data_source}' (–æ–∂–∏–¥–∞–ª–æ—Å—å 'placement_records')")
                    success = False
                
                self.log_test(
                    "API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏",
                    success,
                    "; ".join(details)
                )
                
                return success
            else:
                self.log_test(
                    "API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False

    def check_diagnostic_logging(self):
        """4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)"""
        print("üîç STEP 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if not self.warehouse_id:
            self.log_test(
                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                False,
                "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return False
            
        try:
            # –î–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            response = self.session.get(f"{BACKEND_URL}/warehouses/{self.warehouse_id}/statistics")
            
            if response.status_code == 200:
                stats = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                diagnostic_info = []
                
                if "placement_statistics" in stats:
                    placement_stats = stats["placement_statistics"]
                    diagnostic_info.append(f"üì¶ placement_records –Ω–∞–π–¥–µ–Ω–æ: {placement_stats.get('placement_records_count', 0)}")
                    diagnostic_info.append(f"üìç –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {placement_stats.get('unique_occupied_cells', 0)}")
                    diagnostic_info.append(f"üè∑Ô∏è –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {stats.get('total_placed_cargo', 0)}")
                
                if diagnostic_info:
                    self.log_test(
                        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                        True,
                        f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {'; '.join(diagnostic_info)}"
                    )
                    return True
                else:
                    self.log_test(
                        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                        False,
                        "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ API"
                    )
                    return False
            else:
                self.log_test(
                    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø API –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ö–õ–ê–î–ê")
        print("=" * 80)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        tests_passed = 0
        total_tests = 4
        
        if self.authenticate_warehouse_operator():
            tests_passed += 1
            
            if self.get_warehouse_id():
                tests_passed += 1
                
                if self.test_warehouse_statistics_api():
                    tests_passed += 1
                    
                if self.check_diagnostic_logging():
                    tests_passed += 1
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        success_rate = (tests_passed / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if tests_passed == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï API –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ö–õ–ê–î–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            print("‚úÖ occupied_cells = 2 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 10)")
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ placement_records –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∫–ª–∞–¥–∞")
        else:
            print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(f"{result['status']}: {result['test']}")
            if result['details']:
                print(f"   üìù {result['details']}")
        
        return tests_passed == total_tests

if __name__ == "__main__":
    tester = WarehouseStatisticsTest()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)