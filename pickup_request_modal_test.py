#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –î–ê–ù–ù–´–• –ü–õ–ï–ô–°–•–û–õ–î–ï–†–ê –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê TAJLINE.TJ

–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞.
–¶–µ–ª—å: –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤ –∫–æ–¥–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint GET /api/operator/pickup-requests/100040 - –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å recipient_data (–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç –∫—É—Ä—å–µ—Ä–∞)
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cargo_info (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞)  
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å sender_data (–¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ - –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
8. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –∫—É—Ä—å–µ—Ä–æ–º –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
9. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫—É—Ä—å–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class PickupRequestModalDataTester:
    def __init__(self, base_url="https://freight-qr-system.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.users = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üöö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –î–ê–ù–ù–´–• –ü–õ–ï–ô–°–•–û–õ–î–ï–†–ê –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê TAJLINE.TJ")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_pickup_request_modal_data_diagnosis(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞"""
        print("\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –î–ê–ù–ù–´–• –ü–õ–ï–ô–°–•–û–õ–î–ï–†–ê –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï")
        print("   üéØ –¶–µ–ª—å: –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã")
        
        all_success = True
        diagnosis_results = {}
        
        # –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)
        print("\n   üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        
        operator_token = None
        if success and 'access_token' in login_response:
            operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            operator_phone = operator_user.get('phone')
            operator_user_number = operator_user.get('user_number')
            
            print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {operator_name}")
            print(f"   üëë –†–æ–ª—å: {operator_role}")
            print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {operator_phone}")
            print(f"   üÜî –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {operator_user_number}")
            
            self.tokens['operator'] = operator_token
            self.users['operator'] = operator_user
            
            diagnosis_results['operator_auth'] = {
                'success': True,
                'name': operator_name,
                'role': operator_role,
                'phone': operator_phone,
                'user_number': operator_user_number
            }
        else:
            print("   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            all_success = False
            diagnosis_results['operator_auth'] = {'success': False}
            return False
        
        # –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ò–¢–¨ ENDPOINT GET /api/operator/pickup-requests/100040
        print("\n   üìã –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ò–¢–¨ ENDPOINT GET /api/operator/pickup-requests/100040...")
        print("   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç endpoint –¥–ª—è –∑–∞—è–≤–∫–∏ 100040")
        
        success, pickup_request_100040 = self.run_test(
            "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ 100040",
            "GET",
            "/api/operator/pickup-requests/100040",
            200,
            token=operator_token
        )
        
        if success:
            print("   ‚úÖ Endpoint /api/operator/pickup-requests/100040 —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   üìÑ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ó–ê–Ø–í–ö–ò 100040:")
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            request_data = pickup_request_100040
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏
            basic_fields = ['id', 'request_number', 'sender_full_name', 'sender_phone', 'pickup_address', 'pickup_date', 'status']
            print("\n   üìä –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø –ó–ê–Ø–í–ö–ò:")
            for field in basic_fields:
                value = request_data.get(field, '–û–¢–°–£–¢–°–¢–í–£–ï–¢')
                print(f"     {field}: {value}")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: recipient_data (–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç –∫—É—Ä—å–µ—Ä–∞)
            print("\n   üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: recipient_data (–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç –∫—É—Ä—å–µ—Ä–∞)")
            recipient_data = request_data.get('recipient_data', {})
            if recipient_data:
                print("   ‚úÖ recipient_data –Ω–∞–π–¥–µ–Ω—ã:")
                for key, value in recipient_data.items():
                    print(f"     {key}: {value}")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                recipient_fields = ['recipient_full_name', 'recipient_phone', 'recipient_address']
                filled_fields = 0
                empty_fields = []
                
                for field in recipient_fields:
                    field_value = recipient_data.get(field, '')
                    if field_value and field_value.strip() and field_value not in ['', 'null', 'None', 'undefined']:
                        filled_fields += 1
                        print(f"     ‚úÖ {field}: '{field_value}' (–ó–ê–ü–û–õ–ù–ï–ù–û)")
                    else:
                        empty_fields.append(field)
                        print(f"     ‚ùå {field}: '{field_value}' (–ü–£–°–¢–û–ï/–ü–õ–ï–ô–°–•–û–õ–î–ï–†)")
                
                diagnosis_results['recipient_data'] = {
                    'exists': True,
                    'filled_fields': filled_fields,
                    'empty_fields': empty_fields,
                    'total_fields': len(recipient_fields),
                    'data': recipient_data
                }
                
                if filled_fields == len(recipient_fields):
                    print(f"   üéâ –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–´ ({filled_fields}/{len(recipient_fields)})")
                elif filled_fields > 0:
                    print(f"   ‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –ó–ê–ü–û–õ–ù–ï–ù–´ –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø ({filled_fields}/{len(recipient_fields)})")
                else:
                    print(f"   ‚ùå –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ü–£–°–¢–´–ï (0/{len(recipient_fields)}) - –≠–¢–û –ü–†–ò–ß–ò–ù–ê –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í!")
            else:
                print("   ‚ùå recipient_data –û–¢–°–£–¢–°–¢–í–£–Æ–¢ - –≠–¢–û –ü–†–ò–ß–ò–ù–ê –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í!")
                diagnosis_results['recipient_data'] = {'exists': False}
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: cargo_info (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞)
            print("\n   üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: cargo_info (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞)")
            cargo_info = request_data.get('cargo_info', {})
            if cargo_info:
                print("   ‚úÖ cargo_info –Ω–∞–π–¥–µ–Ω—ã:")
                for key, value in cargo_info.items():
                    print(f"     {key}: {value}")
                diagnosis_results['cargo_info'] = {'exists': True, 'data': cargo_info}
            else:
                print("   ‚ùå cargo_info –û–¢–°–£–¢–°–¢–í–£–Æ–¢")
                diagnosis_results['cargo_info'] = {'exists': False}
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: sender_data (–¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
            print("\n   üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: sender_data (–¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)")
            sender_data = request_data.get('sender_data', {})
            if sender_data:
                print("   ‚úÖ sender_data –Ω–∞–π–¥–µ–Ω—ã:")
                for key, value in sender_data.items():
                    print(f"     {key}: {value}")
                diagnosis_results['sender_data'] = {'exists': True, 'data': sender_data}
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                sender_fields = ['sender_full_name', 'sender_phone']
                sender_info = {}
                for field in sender_fields:
                    value = request_data.get(field)
                    if value:
                        sender_info[field] = value
                
                if sender_info:
                    print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ:")
                    for key, value in sender_info.items():
                        print(f"     {key}: {value}")
                    diagnosis_results['sender_data'] = {'exists': True, 'data': sender_info, 'location': 'top_level'}
                else:
                    print("   ‚ùå sender_data –û–¢–°–£–¢–°–¢–í–£–Æ–¢")
                    diagnosis_results['sender_data'] = {'exists': False}
            
            diagnosis_results['request_100040'] = {
                'success': True,
                'full_data': request_data
            }
        else:
            print("   ‚ùå Endpoint /api/operator/pickup-requests/100040 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            diagnosis_results['request_100040'] = {'success': False}
            all_success = False
        
        # –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ò–¢–¨ –î–†–£–ì–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê - –ù–ê–ô–¢–ò –ó–ê–Ø–í–ö–£ –° –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
        print("\n   üîç –≠–¢–ê–ü 3: –ü–û–ò–°–ö –î–†–£–ì–ò–• –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –° –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ü–û–õ–£–ß–ê–¢–ï–õ–Ø...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞
        success, all_pickup_requests = self.run_test(
            "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token
        )
        
        if success and all_pickup_requests:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_pickup_requests)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/–∑–∞—è–≤–æ–∫")
            
            # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            requests_with_recipient_data = []
            requests_without_recipient_data = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞—è–≤–æ–∫
            requests_to_check = all_pickup_requests[:10] if len(all_pickup_requests) > 10 else all_pickup_requests
            for i, request in enumerate(requests_to_check):
                request_id = request.get('id', f'unknown_{i}')
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–µ
                success_detail, request_detail = self.run_test(
                    f"–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ {request_id}",
                    "GET",
                    f"/api/operator/pickup-requests/{request_id}",
                    200,
                    token=operator_token
                )
                
                if success_detail:
                    recipient_data = request_detail.get('recipient_data', {})
                    if recipient_data:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å
                        recipient_fields = ['recipient_full_name', 'recipient_phone', 'recipient_address']
                        filled_count = sum(1 for field in recipient_fields 
                                         if recipient_data.get(field) and 
                                         str(recipient_data.get(field)).strip() not in ['', 'null', 'None', 'undefined'])
                        
                        if filled_count > 0:
                            requests_with_recipient_data.append({
                                'id': request_id,
                                'filled_fields': filled_count,
                                'total_fields': len(recipient_fields),
                                'recipient_data': recipient_data
                            })
                            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ {request_id}: {filled_count}/{len(recipient_fields)} –ø–æ–ª–µ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                        else:
                            requests_without_recipient_data.append(request_id)
                            print(f"   ‚ùå –ó–∞—è–≤–∫–∞ {request_id}: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—É—Å—Ç—ã–µ")
                    else:
                        requests_without_recipient_data.append(request_id)
                        print(f"   ‚ùå –ó–∞—è–≤–∫–∞ {request_id}: recipient_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            diagnosis_results['other_requests'] = {
                'total_checked': len(requests_to_check),
                'with_recipient_data': len(requests_with_recipient_data),
                'without_recipient_data': len(requests_without_recipient_data),
                'filled_requests': requests_with_recipient_data
            }
            
            if requests_with_recipient_data:
                print(f"\n   üéâ –ù–ê–ô–î–ï–ù–û {len(requests_with_recipient_data)} –ó–ê–Ø–í–û–ö –° –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ü–û–õ–£–ß–ê–¢–ï–õ–Ø!")
                print("   üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:")
                for req in requests_with_recipient_data[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"     –ó–∞—è–≤–∫–∞ {req['id']}: {req['filled_fields']}/{req['total_fields']} –ø–æ–ª–µ–π")
                    for field, value in req['recipient_data'].items():
                        if value and str(value).strip():
                            print(f"       {field}: {value}")
            else:
                print(f"\n   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –ó–ê–Ø–í–û–ö –° –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ü–û–õ–£–ß–ê–¢–ï–õ–Ø")
                print("   üîç –≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞")
            diagnosis_results['other_requests'] = {'success': False}
        
        # –≠–¢–ê–ü 4: –ü–û–ü–†–û–ë–û–í–ê–¢–¨ –°–û–ó–î–ê–¢–¨ –ù–û–í–£–Æ –ó–ê–Ø–í–ö–£ –° –ö–£–†–¨–ï–†–û–ú –ò –ó–ê–ü–û–õ–ù–ò–¢–¨ –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
        print("\n   üÜï –≠–¢–ê–ü 4: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –ó–ê–Ø–í–ö–ò –° –ö–£–†–¨–ï–†–û–ú –ò –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–£–ß–ê–¢–ï–õ–Ø...")
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä
        print("\n   üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (+79991234567/courier123)...")
        
        courier_login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        success, courier_login_response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (+79991234567/courier123)",
            "POST",
            "/api/auth/login",
            200,
            courier_login_data
        )
        
        courier_token = None
        if success and 'access_token' in courier_login_response:
            courier_token = courier_login_response['access_token']
            courier_user = courier_login_response.get('user', {})
            courier_name = courier_user.get('full_name')
            
            print(f"   ‚úÖ –ö—É—Ä—å–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {courier_name}")
            self.tokens['courier'] = courier_token
            self.users['courier'] = courier_user
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –æ—Ç –∏–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            print("\n   üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞...")
            
            new_pickup_request_data = {
                "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                "sender_phone": "+79991234567",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è, 1",
                "pickup_date": "2025-01-20",
                "pickup_time_from": "10:00",
                "pickup_time_to": "18:00",
                "route": "moscow_to_tajikistan",
                "courier_fee": 500.0,
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                "weight": 2.0,
                "declared_value": 1000.0,
                "description": "–¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤"
            }
            
            success, new_request_response = self.run_test(
                "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞",
                "POST",
                "/api/admin/courier/pickup-request",
                200,
                new_pickup_request_data,
                operator_token
            )
            
            if success and 'id' in new_request_response:
                new_request_id = new_request_response['id']
                new_request_number = new_request_response.get('request_number', new_request_id)
                
                print(f"   ‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {new_request_id}, –Ω–æ–º–µ—Ä {new_request_number}")
                
                # –¢–µ–ø–µ—Ä—å –∫—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É
                print(f"\n   üìã –ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É {new_request_id}...")
                
                success, accept_response = self.run_test(
                    f"–ö—É—Ä—å–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É {new_request_id}",
                    "POST",
                    f"/api/courier/requests/{new_request_id}/accept",
                    200,
                    token=courier_token
                )
                
                if success:
                    print("   ‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–º")
                    
                    # –ö—É—Ä—å–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    print(f"\n   ‚úèÔ∏è  –ö—É—Ä—å–µ—Ä –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∑–∞—è–≤–∫–µ {new_request_id}...")
                    
                    recipient_update_data = {
                        "recipient_full_name": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã–π",
                        "recipient_phone": "+992987654321",
                        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, 123",
                        "cargo_items": [
                            {
                                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                                "weight": "2.0",
                                "total_price": "1000"
                            }
                        ],
                        "delivery_method": "pickup",
                        "payment_method": "cash"
                    }
                    
                    success, update_response = self.run_test(
                        f"–ö—É—Ä—å–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                        "PUT",
                        f"/api/courier/requests/{new_request_id}/update",
                        200,
                        recipient_update_data,
                        courier_token
                    )
                    
                    if success:
                        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫—É—Ä—å–µ—Ä–æ–º")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                        print(f"\n   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∑–∞—è–≤–∫–µ {new_request_id}...")
                        
                        success, updated_request = self.run_test(
                            f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É {new_request_id}",
                            "GET",
                            f"/api/operator/pickup-requests/{new_request_id}",
                            200,
                            token=operator_token
                        )
                        
                        if success:
                            print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                            updated_recipient_data = updated_request.get('recipient_data', {})
                            if updated_recipient_data:
                                print("   üéâ –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ù–ê–ô–î–ï–ù–´ –í –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –ó–ê–Ø–í–ö–ï:")
                                
                                recipient_fields = ['recipient_full_name', 'recipient_phone', 'recipient_address']
                                filled_count = 0
                                
                                for field in recipient_fields:
                                    value = updated_recipient_data.get(field, '')
                                    if value and str(value).strip():
                                        filled_count += 1
                                        print(f"     ‚úÖ {field}: '{value}' (–ó–ê–ü–û–õ–ù–ï–ù–û)")
                                    else:
                                        print(f"     ‚ùå {field}: '{value}' (–ü–£–°–¢–û–ï)")
                                
                                diagnosis_results['new_request_test'] = {
                                    'success': True,
                                    'request_id': new_request_id,
                                    'recipient_data_saved': filled_count > 0,
                                    'filled_fields': filled_count,
                                    'total_fields': len(recipient_fields),
                                    'recipient_data': updated_recipient_data
                                }
                                
                                if filled_count == len(recipient_fields):
                                    print(f"   üéâ –í–°–ï –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –°–û–•–†–ê–ù–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û ({filled_count}/{len(recipient_fields)})")
                                    print("   ‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í –°–û–•–†–ê–ù–ï–ù–ò–ò –î–ê–ù–ù–´–• - –ü–†–û–ë–õ–ï–ú–ê –í –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ò!")
                                else:
                                    print(f"   ‚ùå –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –°–û–•–†–ê–ù–ï–ù–´ –ß–ê–°–¢–ò–ß–ù–û ({filled_count}/{len(recipient_fields)})")
                                    print("   üîç –ü–†–û–ë–õ–ï–ú–ê –í –ü–†–û–¶–ï–°–°–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ö–£–†–¨–ï–†–û–ú")
                            else:
                                print("   ‚ùå –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ù–ï –ù–ê–ô–î–ï–ù–´ –í –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –ó–ê–Ø–í–ö–ï")
                                print("   üîç –ü–†–û–ë–õ–ï–ú–ê –í –°–û–•–†–ê–ù–ï–ù–ò–ò –î–ê–ù–ù–´–• –ü–û–õ–£–ß–ê–¢–ï–õ–Ø")
                                diagnosis_results['new_request_test'] = {
                                    'success': True,
                                    'request_id': new_request_id,
                                    'recipient_data_saved': False
                                }
                        else:
                            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É")
                    else:
                        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
                else:
                    print("   ‚ùå –ö—É—Ä—å–µ—Ä –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É")
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞")
        
        # –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –í–´–í–û–î–´
        print("\n" + "="*80)
        print("üî¨ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í")
        print("="*80)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 100040
        if diagnosis_results.get('request_100040', {}).get('success'):
            recipient_data_result = diagnosis_results.get('recipient_data', {})
            if recipient_data_result.get('exists'):
                filled_fields = recipient_data_result.get('filled_fields', 0)
                total_fields = recipient_data_result.get('total_fields', 3)
                
                if filled_fields == 0:
                    print("‚ùå –ó–ê–Ø–í–ö–ê 100040: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—É—Å—Ç—ã–µ - –≠–¢–û –ü–†–ò–ß–ò–ù–ê –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í!")
                elif filled_fields < total_fields:
                    print(f"‚ö†Ô∏è  –ó–ê–Ø–í–ö–ê 100040: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ ({filled_fields}/{total_fields})")
                else:
                    print(f"‚úÖ –ó–ê–Ø–í–ö–ê 100040: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ({filled_fields}/{total_fields})")
            else:
                print("‚ùå –ó–ê–Ø–í–ö–ê 100040: recipient_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é - –≠–¢–û –ü–†–ò–ß–ò–ù–ê –ü–õ–ï–ô–°–•–û–õ–î–ï–†–û–í!")
        else:
            print("‚ùå –ó–ê–Ø–í–ö–ê 100040: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞—è–≤–æ–∫
        other_requests_result = diagnosis_results.get('other_requests', {})
        if other_requests_result.get('with_recipient_data', 0) > 0:
            print(f"‚úÖ –î–†–£–ì–ò–ï –ó–ê–Ø–í–ö–ò: –ù–∞–π–¥–µ–Ω–æ {other_requests_result['with_recipient_data']} –∑–∞—è–≤–æ–∫ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        else:
            print("‚ùå –î–†–£–ì–ò–ï –ó–ê–Ø–í–ö–ò: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        new_request_result = diagnosis_results.get('new_request_test', {})
        if new_request_result.get('success'):
            if new_request_result.get('recipient_data_saved'):
                print("‚úÖ –ù–û–í–´–ô –¢–ï–°–¢: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–æ–º")
            else:
                print("‚ùå –ù–û–í–´–ô –¢–ï–°–¢: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–æ–º")
        
        # –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        print("\nüéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã
        if diagnosis_results.get('recipient_data', {}).get('filled_fields', 0) == 0:
            print("\nüîç –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ù–ï –ó–ê–ü–û–õ–ù–ï–ù–´ –í –ó–ê–Ø–í–ö–ï 100040")
            print("   –ü—Ä–∏—á–∏–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å:")
            print("   1. –ö—É—Ä—å–µ—Ä –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")
            print("   2. –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ backend")
            print("   3. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –¥—Ä—É–≥–æ–º –ø–æ–ª–µ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            print("   4. –ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
            
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫—É—Ä—å–µ—Ä–æ–º")
            print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ 100040")
            print("   4. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
            
        elif diagnosis_results.get('recipient_data', {}).get('exists'):
            print("\nüîç –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –ï–°–¢–¨, –ù–û –ó–ê–ü–û–õ–ù–ï–ù–´ –ß–ê–°–¢–ò–ß–ù–û")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. –ö—É—Ä—å–µ—Ä –∑–∞–ø–æ–ª–Ω–∏–ª –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            print("   2. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            print("   3. –ü—Ä–æ–±–ª–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ frontend –∏–ª–∏ backend")
            
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –°–¥–µ–ª–∞—Ç—å –≤—Å–µ –ø–æ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            print("   2. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ frontend –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö")
            print("   3. –£–ª—É—á—à–∏—Ç—å UX –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫—É—Ä—å–µ—Ä–æ–º")
        else:
            print("\nüîç –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –°–¢–†–£–ö–¢–£–†–ê recipient_data –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. Endpoint /api/operator/pickup-requests/{id} –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç recipient_data")
            print("   2. –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
            print("   3. –ü—Ä–æ–±–ª–µ–º–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–∞–º–∏")
            
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ endpoint /api/operator/pickup-requests/{id}")
            print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            print("   3. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ recipient_data –≤ –æ—Ç–≤–µ—Ç endpoint –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnosis_success = (
            diagnosis_results.get('operator_auth', {}).get('success', False) and
            diagnosis_results.get('request_100040', {}).get('success', False)
        )
        
        print(f"\nüìà –°–¢–ê–¢–£–° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: {'–ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û' if diagnosis_success else '–ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò'}")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.tests_run}")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ: {self.tests_passed}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.tests_passed/self.tests_run*100):.1f}%" if self.tests_run > 0 else "0%")
        
        return diagnosis_success

def main():
    """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞"""
    tester = PickupRequestModalDataTester()
    
    try:
        success = tester.test_pickup_request_modal_data_diagnosis()
        
        if success:
            print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("üìã –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤")
        else:
            print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            print("üîç –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
            print("‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()