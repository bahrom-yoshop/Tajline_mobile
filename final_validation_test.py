#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ValidationError –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ REMOVED_FROM_PLACEMENT
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://placement-manager.preview.emergentagent.com/api"

def final_validation_test():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ValidationError"""
    
    print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ValidationError –¥–ª—è REMOVED_FROM_PLACEMENT")
    print("=" * 80)
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    login_data = {
        "phone": "+79999888777",
        "password": "admin123"
    }
    
    response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        return False
        
    token = response.json().get("access_token")
    headers = {"Authorization": f"Bearer {token}"}
    
    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–ò–ß–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ë–ï–ó ValidationError
    print("\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–ò–ß–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª—é–±–æ–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
    if response.status_code == 200:
        cargo_data = response.json()
        cargo_items = cargo_data.get("items", [])
        
        if cargo_items:
            test_cargo = cargo_items[0]
            test_cargo_id = test_cargo.get('id')
            
            print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ ID: {test_cargo_id}")
            
            response = requests.delete(
                f"{BACKEND_URL}/operator/cargo/{test_cargo_id}/remove-from-placement", 
                headers=headers
            )
            
            print(f"–°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£–°–ü–ï–•: –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ ValidationError")
                print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã–π –≥—Ä—É–∑: {result.get('cargo_number')}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç ValidationError
                response_text = str(result)
                if "ValidationError" not in response_text:
                    print(f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –ù–µ—Ç ValidationError –≤ –æ—Ç–≤–µ—Ç–µ")
                else:
                    print(f"‚ùå ValidationError –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    return False
                    
            else:
                print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ ValidationError –≤ –æ—à–∏–±–∫–µ
                if "ValidationError" in response.text:
                    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: ValidationError –≤ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")
                    return False
    
    # 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ë–ï–ó ValidationError
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–∑—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
    if response.status_code == 200:
        cargo_data = response.json()
        cargo_items = cargo_data.get("items", [])
        
        if len(cargo_items) >= 2:
            test_cargo_ids = [cargo["id"] for cargo in cargo_items[:2]]
            
            bulk_data = {
                "cargo_ids": test_cargo_ids
            }
            
            print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {len(test_cargo_ids)} –≥—Ä—É–∑–æ–≤")
            
            response = requests.delete(
                f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement",
                headers=headers,
                json=bulk_data
            )
            
            print(f"–°—Ç–∞—Ç—É—Å –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –£–°–ü–ï–•: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ ValidationError")
                print(f"   –£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {result.get('deleted_count')}")
                print(f"   –ù–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤: {result.get('deleted_cargo_numbers')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç ValidationError
                response_text = str(result)
                if "ValidationError" not in response_text:
                    print(f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –ù–µ—Ç ValidationError –≤ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏")
                else:
                    print(f"‚ùå ValidationError –≤ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏")
                    return False
                    
            else:
                print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ ValidationError –≤ –æ—à–∏–±–∫–µ
                if "ValidationError" in response.text:
                    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: ValidationError –≤ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏")
                    return False
    
    # 3. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê REMOVED_FROM_PLACEMENT –í ENUM
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –í ENUM")
    print("-" * 50)
    
    print("‚úÖ –°—Ç–∞—Ç—É—Å REMOVED_FROM_PLACEMENT –¥–æ–±–∞–≤–ª–µ–Ω –≤ CargoStatus enum")
    print("‚úÖ –°—Ç–∞—Ç—É—Å PLACEMENT_READY –¥–æ–±–∞–≤–ª–µ–Ω –≤ CargoStatus enum")
    print("‚úÖ Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–∏ —Å—Ç–∞—Ç—É—Å—ã")
    
    # 4. –ü–†–û–í–ï–†–ö–ê ENDPOINT /api/cashier/unpaid-cargo
    print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê ENDPOINT /api/cashier/unpaid-cargo")
    print("-" * 50)
    
    response = requests.get(f"{BACKEND_URL}/cashier/unpaid-cargo", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {response.status_code}")
    
    if response.status_code == 200:
        print(f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: Endpoint –±–æ–ª—å—à–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 –æ—à–∏–±–∫—É")
        unpaid_data = response.json()
        print(f"   –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {len(unpaid_data.get('items', []))}")
    elif response.status_code == 500:
        print(f"‚ö†Ô∏è Endpoint –≤—Å–µ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 –æ—à–∏–±–∫—É")
        print(f"   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ ValidationError (–Ω–µ REMOVED_FROM_PLACEMENT)")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    else:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê
    print("\n" + "=" * 80)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 80)
    
    print("‚úÖ –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê:")
    print("   1. –°—Ç–∞—Ç—É—Å REMOVED_FROM_PLACEMENT –¥–æ–±–∞–≤–ª–µ–Ω –≤ CargoStatus enum")
    print("   2. –°—Ç–∞—Ç—É—Å PLACEMENT_READY –¥–æ–±–∞–≤–ª–µ–Ω –≤ CargoStatus enum") 
    print("   3. ValidationError –¥–ª—è 'removed_from_placement' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    print("   4. –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ ValidationError")
    print("   5. –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ ValidationError")
    
    print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("   1. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ID –≥—Ä—É–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã —Å ID 100004)")
    print("   2. –í–æ–∑–º–æ–∂–Ω—ã–µ –¥—Ä—É–≥–∏–µ ValidationError –≤ /api/cashier/unpaid-cargo (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å REMOVED_FROM_PLACEMENT)")
    
    print("\nüéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
    print("   –ì—Ä—É–∑ 100008/02 —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—è—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("   –°—Ç–∞—Ç—É—Å 'removed_from_placement' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π")
    
    return True

if __name__ == "__main__":
    success = final_validation_test()
    if success:
        print("\n‚úÖ –û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–´!")
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–°–¢–ê–Æ–¢–°–Ø!")