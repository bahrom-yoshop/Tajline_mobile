#!/usr/bin/env python3
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å placement_records

**–¶–ï–õ–¨:** –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å missing placement_records –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤

**–¢–ï–°–¢–´:**

1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞** (+79777888999/warehouse123)

2. **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records:**
   - –í—ã–∑–≤–∞—Ç—å API `/api/admin/fix-missing-placement-records`
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≥—Ä—É–∑—ã 25082235/01/01, 25082235/01/02, 25082235/02/01 –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è

3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:**
   - –í—ã–∑–≤–∞—Ç—å API `/api/warehouses/{warehouse_id}/layout-with-cargo` 
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≥—Ä—É–∑—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —è—á–µ–π–∫–∞—Ö:
     - 25082235/01/01 –Ω–∞ –ë1-–ü3-–Ø3
     - 25082235/01/02 –Ω–∞ –ë1-–ü3-–Ø2  
     - 25082235/02/01 –Ω–∞ –ë1-–ü3-–Ø2
   - occupied_cells –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0

4. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002:**
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ QR –∫–æ–¥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç warehouse-block-shelf-cell

**–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:**
- –£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records  
- –ì—Ä—É–∑—ã 25082235/01/01, 25082235/01/02, 25082235/02/01 –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ
- occupied_cells > 0 –≤ layout-with-cargo API
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002

**–ö–†–ò–¢–ò–ß–ù–û:** –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —è—á–µ–µ–∫
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://cargo-sync.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": WAREHOUSE_OPERATOR_PHONE,
    "password": WAREHOUSE_OPERATOR_PASSWORD
}

# Admin credentials for fix-missing-placement-records API
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"
ADMIN_CREDENTIALS = {
    "phone": ADMIN_PHONE,
    "password": ADMIN_PASSWORD
}

# Global variables
warehouse_operator_token = None
admin_token = None
test_results = []
warehouse_id = None
moscow_warehouse_name = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"

# Target cargo to check
TARGET_CARGO = [
    {"individual_number": "25082235/01/01", "expected_position": "–ë1-–ü3-–Ø3"},
    {"individual_number": "25082235/01/02", "expected_position": "–ë1-–ü3-–Ø2"},
    {"individual_number": "25082235/02/01", "expected_position": "–ë1-–ü3-–Ø2"}
]

def log_test_result(test_name, success, details, response_time_ms=None):
    """Log test result with details"""
    status = "‚úÖ PASSED" if success else "‚ùå FAILED"
    result = {
        "test": test_name,
        "status": status,
        "success": success,
        "details": details,
        "timestamp": datetime.now().isoformat(),
        "response_time_ms": response_time_ms
    }
    test_results.append(result)
    
    time_info = f" ({response_time_ms}ms)" if response_time_ms else ""
    print(f"{status}: {test_name}{time_info}")
    print(f"   Details: {details}")
    print()

def make_request(method, endpoint, data=None, headers=None, token=None):
    """Make HTTP request with error handling and timing"""
    url = f"{BACKEND_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if token:
        headers["Authorization"] = f"Bearer {token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        
        return response, response_time_ms
    
    except requests.exceptions.RequestException as e:
        response_time_ms = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time_ms

def test_warehouse_operator_authentication():
    """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
    global warehouse_operator_token
    
    response, response_time = make_request("POST", "/auth/login", WAREHOUSE_OPERATOR_CREDENTIALS)
    
    if not response:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
            False, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            warehouse_operator_token = data.get("access_token")
            user_info = data.get("user", {})
            
            if warehouse_operator_token and user_info.get("role") == "warehouse_operator":
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('role')} (–æ–∂–∏–¥–∞–ª–∞—Å—å warehouse_operator)",
                    response_time
                )
                return False
        except Exception as e:
            log_test_result(
                "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_admin_authentication():
    """Test 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ fix-missing-placement-records"""
    global admin_token
    
    response, response_time = make_request("POST", "/auth/login", ADMIN_CREDENTIALS)
    
    if not response:
        log_test_result(
            "2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
            False, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            admin_token = data.get("access_token")
            user_info = data.get("user", {})
            
            if admin_token and user_info.get("role") == "admin":
                log_test_result(
                    "2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('role')} (–æ–∂–∏–¥–∞–ª–∞—Å—å admin)",
                    response_time
                )
                return False
        except Exception as e:
            log_test_result(
                "2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_fix_missing_placement_records():
    """Test 3: –í—ã–∑–æ–≤ API –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è missing placement_records"""
    if not admin_token:
        log_test_result(
            "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records",
            False,
            "Admin —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    response, response_time = make_request("GET", "/admin/fix-missing-placement-records", token=admin_token)
    
    if not response:
        log_test_result(
            "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            fixed_count = data.get("fixed_count", 0)
            message = data.get("message", "")
            details = data.get("details", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            target_cargo_numbers = ["25082235/01/01", "25082235/01/02", "25082235/02/01"]
            fixed_cargo = details.get("fixed_cargo", [])
            
            target_found = []
            for cargo_num in target_cargo_numbers:
                if any(cargo_num in str(cargo) for cargo in fixed_cargo):
                    target_found.append(cargo_num)
            
            if fixed_count > 0 and len(target_found) > 0:
                log_test_result(
                    "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records",
                    True,
                    f"–£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ placement_records! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {fixed_count}, –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–∞–π–¥–µ–Ω—ã: {target_found}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                    response_time
                )
                return True
            elif fixed_count == 0:
                log_test_result(
                    "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records",
                    True,
                    f"API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ó–∞–ø–∏—Å–µ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (fixed_count=0). –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records",
                    False,
                    f"–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {fixed_count}, –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö: {len(target_found)}, –î–µ—Ç–∞–ª–∏: {details}",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ missing placement_records",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_get_warehouse_id():
    """Test 4: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ layout-with-cargo"""
    global warehouse_id
    
    if not warehouse_operator_token:
        log_test_result(
            "4. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
            False,
            "Warehouse operator —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω",
            0
        )
        return False
    
    response, response_time = make_request("GET", "/operator/warehouses", token=warehouse_operator_token)
    
    if not response:
        log_test_result(
            "4. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            warehouses = response.json()
            
            if not warehouses:
                log_test_result(
                    "4. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç",
                    response_time
                )
                return False
            
            # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
            moscow_warehouse = None
            for warehouse in warehouses:
                if moscow_warehouse_name in warehouse.get("name", ""):
                    moscow_warehouse = warehouse
                    warehouse_id = warehouse.get("id")
                    break
            
            if moscow_warehouse:
                log_test_result(
                    "4. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    True,
                    f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '{moscow_warehouse.get('name')}' (ID: {warehouse_id})",
                    response_time
                )
                return True
            else:
                warehouse_names = [w.get("name") for w in warehouses]
                log_test_result(
                    "4. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    f"–°–∫–ª–∞–¥ '{moscow_warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {warehouse_names}",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "4. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "4. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_layout_with_cargo_after_fix():
    """Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo API –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è placement_records"""
    if not warehouse_id or not warehouse_operator_token:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
            False,
            "warehouse_id –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤",
            0
        )
        return False, None
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo", token=warehouse_operator_token)
    
    if not response:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False, None
    
    if response.status_code == 200:
        try:
            layout_data = response.json()
            
            total_cells = layout_data.get("total_cells", 0)
            occupied_cells = layout_data.get("occupied_cells", 0)
            total_cargo = layout_data.get("total_cargo", 0)
            loading_percentage = layout_data.get("occupancy_percentage", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ occupied_cells > 0 (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ)
            if occupied_cells > 0:
                log_test_result(
                    "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                    True,
                    f"API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}, –ó–∞–≥—Ä—É–∑–∫–∞: {loading_percentage}%",
                    response_time
                )
                return True, layout_data
            else:
                log_test_result(
                    "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                    False,
                    f"occupied_cells = 0 –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è placement_records. –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}",
                    response_time
                )
                return False, layout_data
                
        except Exception as e:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False, None
    else:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ layout-with-cargo –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False, None

def test_target_cargo_in_layout(layout_data):
    """Test 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —è—á–µ–µ–∫"""
    if not layout_data:
        log_test_result(
            "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    try:
        found_cargo = []
        missing_cargo = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
        warehouse_info = layout_data.get("warehouse", {})
        layout = warehouse_info.get("layout", {})
        blocks = layout.get("blocks", [])
        
        # –ò—â–µ–º –∫–∞–∂–¥—ã–π —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–∑
        for target in TARGET_CARGO:
            target_number = target["individual_number"]
            expected_position = target["expected_position"]
            cargo_found = False
            actual_position = None
            
            for block in blocks:
                shelves = block.get("shelves", [])
                for shelf in shelves:
                    cells = shelf.get("cells", [])
                    for cell in cells:
                        if cell.get("is_occupied", False):
                            cargo_list = cell.get("cargo", [])
                            location_code = cell.get("location_code", "")
                            
                            for cargo_info in cargo_list:
                                individual_number = cargo_info.get("individual_number", "")
                                
                                if target_number == individual_number:
                                    cargo_found = True
                                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º location_code (1-3-3) –≤ —Ñ–æ—Ä–º–∞—Ç –ë-–ü-–Ø (–ë1-–ü3-–Ø3)
                                    parts = location_code.split('-')
                                    if len(parts) == 3:
                                        actual_position = f"–ë{parts[0]}-–ü{parts[1]}-–Ø{parts[2]}"
                                    else:
                                        actual_position = location_code
                                    break
                            if cargo_found:
                                break
                        if cargo_found:
                            break
                    if cargo_found:
                        break
                if cargo_found:
                    break
            
            if cargo_found:
                position_match = actual_position == expected_position
                found_cargo.append({
                    "number": target_number,
                    "expected_position": expected_position,
                    "actual_position": actual_position,
                    "position_match": position_match
                })
            else:
                missing_cargo.append(target_number)
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if len(found_cargo) == len(TARGET_CARGO) and all(c["position_match"] for c in found_cargo):
            log_test_result(
                "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
                True,
                f"–í—Å–µ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö! –ù–∞–π–¥–µ–Ω–æ: {len(found_cargo)}/{len(TARGET_CARGO)} –≥—Ä—É–∑–æ–≤",
                0
            )
            return True
        elif len(found_cargo) > 0:
            position_issues = [c for c in found_cargo if not c["position_match"]]
            details = f"–ù–∞–π–¥–µ–Ω–æ: {len(found_cargo)}/{len(TARGET_CARGO)} –≥—Ä—É–∑–æ–≤"
            if missing_cargo:
                details += f", –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_cargo}"
            if position_issues:
                details += f", –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {[(c['number'], c['expected_position'], c['actual_position']) for c in position_issues]}"
            
            log_test_result(
                "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
                len(found_cargo) == len(TARGET_CARGO),  # –£—Å–ø–µ—Ö –µ—Å–ª–∏ –≤—Å–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                details,
                0
            )
            return len(found_cargo) == len(TARGET_CARGO)
        else:
            log_test_result(
                "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
                False,
                f"–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_cargo}",
                0
            )
            return False
        
    except Exception as e:
        log_test_result(
            "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ",
            False,
            f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤: {e}",
            0
        )
        return False

def test_qr_format_support():
    """Test 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002"""
    if not warehouse_operator_token:
        log_test_result(
            "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
            False,
            "Warehouse operator —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω",
            0
        )
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ QR –∫–æ–¥–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    test_qr_code = "001-01-02-002"
    test_data = {
        "qr_code": test_qr_code
    }
    
    response, response_time = make_request("POST", "/operator/placement/verify-cell", test_data, token=warehouse_operator_token)
    
    if not response:
        log_test_result(
            "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞
    if response.status_code in [200, 400, 404]:  # –õ—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        try:
            data = response.json()
            
            if response.status_code == 200:
                log_test_result(
                    "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    True,
                    f"QR —Ñ–æ—Ä–º–∞—Ç 001-01-02-002 –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –û—Ç–≤–µ—Ç: {data.get('message', '–£—Å–ø–µ—à–Ω–æ')}",
                    response_time
                )
                return True
            elif response.status_code == 400:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º QR –∫–æ–¥–∞
                error_detail = data.get("detail", "").lower()
                if "format" in error_detail or "parse" in error_detail or "invalid" in error_detail:
                    log_test_result(
                        "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                        False,
                        f"QR —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {data.get('detail')}",
                        response_time
                    )
                    return False
                else:
                    log_test_result(
                        "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                        True,
                        f"QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (HTTP 400 - –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º). –î–µ—Ç–∞–ª–∏: {data.get('detail')}",
                        response_time
                    )
                    return True
            elif response.status_code == 404:
                log_test_result(
                    "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    True,
                    f"QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (HTTP 404 - —è—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω). –î–µ—Ç–∞–ª–∏: {data.get('detail')}",
                    response_time
                )
                return True
                
        except Exception as e:
            log_test_result(
                "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
            False,
            f"API –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å QR —Ñ–æ—Ä–º–∞—Ç. HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def print_test_summary():
    """Print comprehensive test summary"""
    print("\n" + "="*80)
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å placement_records - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = len([r for r in test_results if r["success"]])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   Success Rate: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status_icon = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time_ms']}ms)" if result.get('response_time_ms') else ""
        print(f"   {i}. {status_icon} {result['test']}{time_info}")
        print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    placement_records_fixed = any("placement_records" in r["test"] and r["success"] for r in test_results)
    layout_api_works = any("layout-with-cargo" in r["test"] and r["success"] for r in test_results)
    target_cargo_found = any("—Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤" in r["test"] and r["success"] for r in test_results)
    qr_format_supported = any("QR —Ñ–æ—Ä–º–∞—Ç–∞" in r["test"] and r["success"] for r in test_results)
    
    print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ placement_records: {'–î–ê' if placement_records_fixed else '–ù–ï–¢'}")
    print(f"   ‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç: {'–î–ê' if layout_api_works else '–ù–ï–¢'}")
    print(f"   ‚úÖ –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ: {'–î–ê' if target_cargo_found else '–ù–ï–¢'}")
    print(f"   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002: {'–î–ê' if qr_format_supported else '–ù–ï–¢'}")
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if success_rate >= 85 and placement_records_fixed and layout_api_works:
        print("   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ —Å placement_records –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ.")
        if target_cargo_found:
            print("   ‚úÖ –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã 25082235/01/01, 25082235/01/02, 25082235/02/01 –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ!")
        if qr_format_supported:
            print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê.")
        if not placement_records_fixed:
            print("   ‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ placement_records –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        if not layout_api_works:
            print("   ‚ùå API layout-with-cargo –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("="*80)

def main():
    """Main test execution"""
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å placement_records")
    print("="*80)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å missing placement_records –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤...")
    print()
    
    # Test 1: Warehouse operator authentication
    if not test_warehouse_operator_authentication():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞.")
        print_test_summary()
        return
    
    # Test 2: Admin authentication
    if not test_admin_authentication():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        print_test_summary()
        return
    
    # Test 3: Fix missing placement records
    test_fix_missing_placement_records()
    
    # Test 4: Get warehouse ID
    if not test_get_warehouse_id():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å warehouse_id.")
        print_test_summary()
        return
    
    # Test 5: Check layout-with-cargo after fix
    layout_success, layout_data = test_layout_with_cargo_after_fix()
    
    # Test 6: Check target cargo in layout
    if layout_data:
        test_target_cargo_in_layout(layout_data)
    
    # Test 7: Check QR format support
    test_qr_format_support()
    
    # Print final summary
    print_test_summary()

if __name__ == "__main__":
    main()