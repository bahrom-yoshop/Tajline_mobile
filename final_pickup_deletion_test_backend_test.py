#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ DELETE endpoint –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä

–ù–ê–ô–î–ï–ù–û: 1 —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π endpoint –∏–∑ 5 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
–ù–£–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ endpoint –∏ –¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class FinalPickupDeletionTest:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        self.pickup_requests = []
        
    def log(self, message, level="INFO"):
        """–ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                })
                
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.current_user = user_response.json()
                    self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {self.current_user.get('full_name')} (—Ä–æ–ª—å: {self.current_user.get('role')})")
                    return True
                    
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}", "ERROR")
            return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def get_pickup_requests(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        try:
            response = self.session.get(f"{API_BASE}/operator/pickup-requests")
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    self.pickup_requests = data
                elif isinstance(data, dict):
                    self.pickup_requests = data.get('items', data.get('requests', data.get('pickup_requests', [])))
                
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(self.pickup_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
                
                if self.pickup_requests:
                    sample = self.pickup_requests[0]
                    self.log(f"üìã –û–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–∫–∏: ID={sample.get('id')}, –Ω–æ–º–µ—Ä={sample.get('request_number')}")
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: HTTP {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {str(e)}", "ERROR")
            return False
    
    def test_individual_endpoints_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö endpoints"""
        if not self.pickup_requests:
            self.log("‚ö†Ô∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "WARNING")
            return
        
        test_request = self.pickup_requests[0]
        request_id = test_request.get('id')
        request_number = test_request.get('request_number')
        
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å ID={request_id}, –Ω–æ–º–µ—Ä={request_number}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints
        endpoints_to_test = [
            f"/api/admin/pickup-requests/{request_id}",
            f"/api/admin/courier/pickup-requests/{request_id}",
            f"/api/operator/pickup-requests/{request_id}",
            f"/api/admin/pickup-requests/{request_number}",
            f"/api/admin/courier/pickup-requests/{request_number}"
        ]
        
        working_endpoints = []
        
        for endpoint in endpoints_to_test:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                head_response = self.session.head(f"{BACKEND_URL}{endpoint}")
                
                if head_response.status_code == 200:
                    self.log(f"‚úÖ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô ENDPOINT: {endpoint} (HTTP 200)")
                    working_endpoints.append(endpoint)
                elif head_response.status_code == 405:  # Method Not Allowed - endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ DELETE –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    self.log(f"‚ö†Ô∏è Endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ DELETE –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {endpoint} (HTTP 405)")
                elif head_response.status_code == 404:
                    self.log(f"‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: {endpoint} (HTTP 404)")
                else:
                    self.log(f"üîç Endpoint {endpoint}: HTTP {head_response.status_code}")
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {str(e)}", "ERROR")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö endpoints
        if working_endpoints:
            self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE –Ω–∞ {len(working_endpoints)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö endpoints")
            
            for endpoint in working_endpoints:
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
                    delete_response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                    
                    if delete_response.status_code == 200:
                        self.log(f"‚úÖ DELETE –†–ê–ë–û–¢–ê–ï–¢: {endpoint} - –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                        self.log(f"üìÑ –û—Ç–≤–µ—Ç: {delete_response.text[:200]}")
                        break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    elif delete_response.status_code == 404:
                        self.log(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {endpoint} (HTTP 404)")
                    elif delete_response.status_code == 403:
                        self.log(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {endpoint} (HTTP 403)")
                    elif delete_response.status_code == 405:
                        self.log(f"‚ùå –ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {endpoint} (HTTP 405)")
                    else:
                        self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {endpoint}: HTTP {delete_response.status_code}")
                        self.log(f"üìÑ –û—Ç–≤–µ—Ç: {delete_response.text[:200]}")
                        
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ DELETE –Ω–∞ {endpoint}: {str(e)}", "ERROR")
        else:
            self.log("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û —Ä–∞–±–æ—á–∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö endpoints –¥–ª—è DELETE", "ERROR")
    
    def test_bulk_endpoint_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bulk endpoint"""
        if not self.pickup_requests:
            self.log("‚ö†Ô∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è bulk —É–¥–∞–ª–µ–Ω–∏—è", "WARNING")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –¥–ª—è bulk —É–¥–∞–ª–µ–Ω–∏—è
        test_request = self.pickup_requests[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–æ–º
        request_id = test_request.get('id')
        
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk —É–¥–∞–ª–µ–Ω–∏–µ —Å ID={request_id}")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è bulk delete
        bulk_data = {
            "ids": [request_id]
        }
        
        try:
            response = self.session.delete(f"{API_BASE}/admin/pickup-requests/bulk", json=bulk_data)
            
            if response.status_code == 200:
                self.log("‚úÖ BULK DELETE –†–ê–ë–û–¢–ê–ï–¢: –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ bulk endpoint!")
                self.log(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
            elif response.status_code == 400:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ bulk delete: {response.text[:200]}")
            elif response.status_code == 500:
                self.log(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ bulk delete: {response.text[:200]}")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç bulk delete: HTTP {response.status_code}")
                self.log(f"üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ bulk delete: {str(e)}", "ERROR")
    
    def run_final_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        print("=" * 80)
        print()
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        if not self.get_pickup_requests():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
            return
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö endpoints
        self.log("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• DELETE ENDPOINTS")
        self.log("-" * 60)
        self.test_individual_endpoints_detailed()
        
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bulk endpoint
        self.log("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT")
        self.log("-" * 60)
        self.test_bulk_endpoint_detailed()
        
        print()
        print("=" * 80)
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FinalPickupDeletionTest()
    tester.run_final_test()

if __name__ == "__main__":
    main()