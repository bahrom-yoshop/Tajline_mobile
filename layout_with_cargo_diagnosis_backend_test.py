#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: API layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ 4 –∏–∑ 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
===============================================================================================

–¶–ï–õ–¨: –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4 –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–¥–µ –Ω–∞ —Å–∫–ª–∞–¥–µ 001 —Ä–∞–∑–º–µ—â–µ–Ω–æ 13 –µ–¥–∏–Ω–∏—Ü –∏–∑ 3 –∑–∞—è–≤–æ–∫, 
–Ω–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4

–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ placement_records –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
   - –ù–∞–π—Ç–∏ –í–°–ï placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã warehouse_id ("001", UUID —Å–∫–ª–∞–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ)
   - –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–∞–Ω–Ω—ã–º–∏:
   - API –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞—è–≤–∫–∏: 25082298 (7 –µ–¥–∏–Ω–∏—Ü), 250101 (2 –µ–¥–∏–Ω–∏—Ü—ã), 25082235 (4 –µ–¥–∏–Ω–∏—Ü—ã)
   - –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 13 –µ–¥–∏–Ω–∏—Ü, –Ω–µ 4
4. –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –í–æ–∑–º–æ–∂–Ω–æ API —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –ø–æ—á–µ–º—É API –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç 9 –∏–∑ 13 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - API –Ω–µ –≤–∏–¥–∏—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE = "001"
EXPECTED_APPLICATIONS = ["25082298", "250101", "25082235"]
EXPECTED_TOTAL_UNITS = 13
EXPECTED_UNITS_PER_APP = {"25082298": 7, "250101": 2, "25082235": 4}

class LayoutWithCargoDiagnoser:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.warehouse_001_info = None
        self.test_results = {
            "auth_success": False,
            "warehouse_found": False,
            "api_accessible": False,
            "placement_records_found": 0,
            "expected_records": EXPECTED_TOTAL_UNITS,
            "missing_records": 0,
            "applications_analysis": {},
            "critical_issues": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def find_warehouse_001(self):
        """–ù–∞–π—Ç–∏ —Å–∫–ª–∞–¥ 001 –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        self.log("üè¢ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                self.log(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                
                # –ò—â–µ–º —Å–∫–ª–∞–¥ 001
                for warehouse in warehouses:
                    warehouse_id_number = warehouse.get("warehouse_id_number", "")
                    warehouse_name = warehouse.get("name", "")
                    warehouse_id = warehouse.get("id", "")
                    
                    self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥: ID={warehouse_id}, –Ω–æ–º–µ—Ä={warehouse_id_number}, –Ω–∞–∑–≤–∞–Ω–∏–µ={warehouse_name}")
                    
                    if warehouse_id_number == TARGET_WAREHOUSE:
                        self.warehouse_001_info = warehouse
                        self.log(f"‚úÖ –°–∫–ª–∞–¥ 001 –Ω–∞–π–¥–µ–Ω!")
                        self.log(f"   ID: {warehouse_id}")
                        self.log(f"   –ù–æ–º–µ—Ä: {warehouse_id_number}")
                        self.log(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {warehouse_name}")
                        self.log(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse.get('location', 'N/A')}")
                        self.test_results["warehouse_found"] = True
                        return True
                
                self.log(f"‚ùå –°–∫–ª–∞–¥ 001 –ù–ï –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "ERROR")
                return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–∫–ª–∞–¥–∞: {e}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001"""
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001")
        self.log("=" * 80)
        
        if not self.warehouse_001_info:
            self.log("‚ùå –°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API", "ERROR")
            return False
        
        warehouse_id = self.warehouse_001_info["id"]
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ API layout-with-cargo
            self.log(f"üì° –ó–∞–ø—Ä–æ—Å –∫ /api/operator/warehouses/{warehouse_id}/layout-with-cargo")
            response = self.session.get(f"{API_BASE}/operator/warehouses/{warehouse_id}/layout-with-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log("‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["api_accessible"] = True
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                self.log("\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:")
                self.log(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                
                if isinstance(data, dict):
                    self.log(f"–ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                    
                    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö
                    cargo_info = data.get("cargo_info", [])
                    occupied_cells = data.get("occupied_cells", 0)
                    layout_data = data.get("layout", {})
                    
                    self.log(f"üì¶ cargo_info: {len(cargo_info)} –∑–∞–ø–∏—Å–µ–π")
                    self.log(f"üè† occupied_cells: {occupied_cells}")
                    self.log(f"üó∫Ô∏è layout –¥–∞–Ω–Ω—ã–µ: {type(layout_data)}")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ê–Ω–∞–ª–∏–∑ cargo_info
                    self.analyze_cargo_info(cargo_info)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    self.test_results["placement_records_found"] = len(cargo_info)
                    self.test_results["missing_records"] = EXPECTED_TOTAL_UNITS - len(cargo_info)
                    
                    return True
                else:
                    self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(data)}", "WARNING")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}", "ERROR")
            return False
    
    def analyze_cargo_info(self, cargo_info):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo_info –∏–∑ API –æ—Ç–≤–µ—Ç–∞"""
        self.log("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO_INFO:")
        self.log("-" * 60)
        
        if not cargo_info:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: cargo_info –ø—É—Å—Ç–æ–π!", "ERROR")
            self.test_results["critical_issues"].append("cargo_info –ø—É—Å—Ç–æ–π - API –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º –∑–∞—è–≤–æ–∫
        applications_found = {}
        
        for i, cargo in enumerate(cargo_info):
            cargo_number = cargo.get("cargo_number", "N/A")
            individual_number = cargo.get("individual_number", "N/A")
            cargo_name = cargo.get("cargo_name", "N/A")
            placement_location = cargo.get("placement_location", "N/A")
            
            self.log(f"üì¶ –ì—Ä—É–∑ #{i+1}:")
            self.log(f"   –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            self.log(f"   Individual –Ω–æ–º–µ—Ä: {individual_number}")
            self.log(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo_name}")
            self.log(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {placement_location}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞—è–≤–∫–∞–º
            if cargo_number not in applications_found:
                applications_found[cargo_number] = []
            applications_found[cargo_number].append(cargo)
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        self.log(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û –ó–ê–Ø–í–ö–ê–ú:")
        self.log(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(applications_found)}")
        
        for app_number, cargos in applications_found.items():
            expected_count = EXPECTED_UNITS_PER_APP.get(app_number, 0)
            found_count = len(cargos)
            
            self.log(f"üìã –ó–∞—è–≤–∫–∞ {app_number}:")
            self.log(f"   –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {found_count}")
            self.log(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –µ–¥–∏–Ω–∏—Ü: {expected_count}")
            
            if expected_count > 0:
                if found_count == expected_count:
                    self.log(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                else:
                    self.log(f"   ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {expected_count - found_count} –µ–¥–∏–Ω–∏—Ü")
                    self.test_results["critical_issues"].append(
                        f"–ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found_count} –∏–∑ {expected_count} –µ–¥–∏–Ω–∏—Ü"
                    )
            else:
                self.log(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞—è–≤–æ–∫
        self.log(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –û–ñ–ò–î–ê–ï–ú–´–• –ó–ê–Ø–í–û–ö:")
        for expected_app in EXPECTED_APPLICATIONS:
            if expected_app in applications_found:
                found_count = len(applications_found[expected_app])
                expected_count = EXPECTED_UNITS_PER_APP[expected_app]
                self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {expected_app}: –Ω–∞–π–¥–µ–Ω–∞ ({found_count}/{expected_count})")
            else:
                self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {expected_app}: –ù–ï –ù–ê–ô–î–ï–ù–ê!")
                self.test_results["critical_issues"].append(f"–ó–∞—è–≤–∫–∞ {expected_app} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ API –æ—Ç–≤–µ—Ç–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        self.test_results["applications_analysis"] = {
            app: len(cargos) for app, cargos in applications_found.items()
        }
    
    def test_placement_progress_api(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API placement-progress"""
        self.log("\nüîÑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: API placement-progress")
        self.log("-" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/operator/placement-progress")
            
            if response.status_code == 200:
                data = response.json()
                
                total_units = data.get("total_units", 0)
                placed_units = data.get("placed_units", 0)
                pending_units = data.get("pending_units", 0)
                progress_percentage = data.get("progress_percentage", 0)
                
                self.log(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
                self.log(f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}")
                self.log(f"   –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {placed_units}")
                self.log(f"   –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {pending_units}")
                self.log(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage}%")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo
                layout_found = self.test_results["placement_records_found"]
                self.log(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –° layout-with-cargo:")
                self.log(f"   placement-progress placed_units: {placed_units}")
                self.log(f"   layout-with-cargo –Ω–∞–π–¥–µ–Ω–æ: {layout_found}")
                
                if placed_units == layout_found:
                    self.log(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    self.log(f"   ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: {abs(placed_units - layout_found)} –µ–¥–∏–Ω–∏—Ü")
                    self.test_results["critical_issues"].append(
                        f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É placement-progress ({placed_units}) –∏ layout-with-cargo ({layout_found})"
                    )
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-progress: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ placement-progress: {e}", "ERROR")
            return False
    
    def generate_diagnosis_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001")
        self.log(f"üìÖ –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üè¢ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥: {TARGET_WAREHOUSE}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001: {'‚úÖ –ù–ê–ô–î–ï–ù' if self.test_results['warehouse_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        self.log(f"  3. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API layout-with-cargo: {'‚úÖ –î–û–°–¢–£–ü–ï–ù' if self.test_results['api_accessible'] else '‚ùå –ù–ï–î–û–°–¢–£–ü–ï–ù'}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        found_records = self.test_results["placement_records_found"]
        expected_records = self.test_results["expected_records"]
        missing_records = self.test_results["missing_records"]
        
        self.log(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:")
        self.log(f"  –û–∂–∏–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {expected_records}")
        self.log(f"  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {found_records}")
        self.log(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å–µ–π: {missing_records}")
        
        if missing_records > 0:
            self.log(f"  ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: API –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç {missing_records} –∏–∑ {expected_records} –∑–∞–ø–∏—Å–µ–π!")
        else:
            self.log(f"  ‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞—è–≤–∫–∞–º
        if self.test_results["applications_analysis"]:
            self.log(f"\nüìã –ê–ù–ê–õ–ò–ó –ü–û –ó–ê–Ø–í–ö–ê–ú:")
            for app_number, found_count in self.test_results["applications_analysis"].items():
                expected_count = EXPECTED_UNITS_PER_APP.get(app_number, 0)
                if expected_count > 0:
                    status = "‚úÖ" if found_count == expected_count else "‚ùå"
                    self.log(f"  {status} –ó–∞—è–≤–∫–∞ {app_number}: {found_count}/{expected_count}")
                else:
                    self.log(f"  ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ {app_number}: {found_count} (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è)")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.test_results["critical_issues"]:
            self.log(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.test_results['critical_issues'])} —à—Ç.):")
            for i, issue in enumerate(self.test_results["critical_issues"], 1):
                self.log(f"  {i}. {issue}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –î–ò–ê–ì–ù–û–ó:")
        if missing_records == 0 and not self.test_results["critical_issues"]:
            self.log("‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("üìä –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            self.log("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            self.log(f"üîç API layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ {found_records} –∏–∑ {expected_records} –∑–∞–ø–∏—Å–µ–π")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ placement_records")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            self.log("  1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ placement_records –≤ API")
            self.log("  2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º warehouse_id")
            self.log("  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            self.log("  4. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        return missing_records == 0 and not self.test_results["critical_issues"]
    
    def run_full_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API layout-with-cargo")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–∏—Å–∫ —Å–∫–ª–∞–¥–∞ 001
        if not self.find_warehouse_001():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –°–∫–ª–∞–¥ 001 –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
        if not self.test_layout_with_cargo_api():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ placement-progress
        self.test_placement_progress_api()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        diagnosis_success = self.generate_diagnosis_report()
        
        return diagnosis_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnoser = LayoutWithCargoDiagnoser()
    
    try:
        success = diagnoser.run_full_diagnosis()
        
        if success:
            print("\n" + "="*80)
            print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
            print("üìä API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üéØ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
            print("üîç API layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ placement_records")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()