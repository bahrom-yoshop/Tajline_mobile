#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API endpoint –¥–ª—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoint –¥–ª—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ review request:

–®–ê–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ warehouse_operator (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ /api/operator/warehouses
3. –í–∑—è—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –∏ –≤—ã–∑–≤–∞—Ç—å /api/warehouses/{warehouse_id}/layout-with-cargo
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ layout.blocks —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏ —Å –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏
5. –ù–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ (cell.is_occupied: true) –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å cell.cargo –º–∞—Å—Å–∏–≤
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π API endpoint /api/operator/cargo/remove-from-cell:
   - –í–∑—è—Ç—å individual_number –∏ cargo_number –∏–∑ –∑–∞–Ω—è—Ç–æ–π —è—á–µ–π–∫–∏
   - –í—ã–∑–≤–∞—Ç—å POST /api/operator/cargo/remove-from-cell —Å –¥–∞–Ω–Ω—ã–º–∏
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
7. –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ –∏ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —è—á–µ–π–∫–∏

–í–ê–ñ–ù–û: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ warehouse_operator (+79777888999, warehouse123) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-8.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class WarehouseLayoutCargoRemovalTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.warehouse_data = None
        self.occupied_cells = []
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator (+79777888999/warehouse123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ /api/operator/warehouses"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                
                if warehouses and len(warehouses) > 0:
                    self.warehouse_id = warehouses[0].get("id")
                    self.warehouse_data = warehouses[0]
                    
                    self.log_test(
                        "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ /api/operator/warehouses",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤. –ü–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥: '{warehouses[0].get('name')}' (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def get_warehouse_layout_with_cargo(self):
        """–í—ã–∑–≤–∞—Ç—å /api/warehouses/{warehouse_id}/layout-with-cargo"""
        try:
            print("üó∫Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ —Å –≥—Ä—É–∑–∞–º–∏...")
            
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_id}/layout-with-cargo", timeout=30)
            
            if response.status_code == 200:
                layout_data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["warehouse", "layout", "total_cargo", "occupied_cells", "total_cells", "occupancy_percentage"]
                present_fields = [field for field in required_fields if field in layout_data]
                
                self.log_test(
                    "–í–∑—è—Ç—å –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –∏ –≤—ã–∑–≤–∞—Ç—å /api/warehouses/{warehouse_id}/layout-with-cargo",
                    len(present_fields) == len(required_fields),
                    f"Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 200 –¥–ª—è —Å–∫–ª–∞–¥–∞ {self.warehouse_data.get('name')}, –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(present_fields)}/{len(required_fields)})",
                    "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                    f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present_fields}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É layout.blocks
                layout = layout_data.get("layout", {})
                blocks = layout.get("blocks", [])
                
                total_blocks = len(blocks)
                total_shelves = 0
                total_cells = 0
                
                for block in blocks:
                    shelves = block.get("shelves", [])
                    total_shelves += len(shelves)
                    for shelf in shelves:
                        cells = shelf.get("cells", [])
                        total_cells += len(cells)
                
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - layout.blocks —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏ —Å –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏",
                    total_blocks > 0 and total_shelves > 0 and total_cells > 0,
                    f"Layout —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞: –ë–ª–æ–∫–æ–≤: {total_blocks}, –ü–æ–ª–æ–∫: {total_shelves}, –Ø—á–µ–µ–∫: {total_cells}",
                    "Layout –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–ª–æ–∫–∏ —Å –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏",
                    f"–ë–ª–æ–∫–æ–≤: {total_blocks}, –ü–æ–ª–æ–∫: {total_shelves}, –Ø—á–µ–µ–∫: {total_cells}"
                )
                
                # –ù–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
                self.occupied_cells = []
                for block in blocks:
                    for shelf in block.get("shelves", []):
                        for cell in shelf.get("cells", []):
                            if cell.get("is_occupied", False):
                                cargo_data = cell.get("cargo", [])
                                if cargo_data:
                                    self.occupied_cells.append({
                                        "cell": cell,
                                        "cargo": cargo_data,
                                        "block_number": block.get("block_number"),
                                        "shelf_number": shelf.get("shelf_number"),
                                        "cell_number": cell.get("cell_number")
                                    })
                
                self.log_test(
                    "–ù–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ (cell.is_occupied: true) –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å cell.cargo –º–∞—Å—Å–∏–≤",
                    len(self.occupied_cells) > 0,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(self.occupied_cells)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ —Å –≥—Ä—É–∑–∞–º–∏",
                    "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ —Å –≥—Ä—É–∑–∞–º–∏",
                    f"–ù–∞–π–¥–µ–Ω–æ: {len(self.occupied_cells)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫"
                )
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö
                if self.occupied_cells:
                    for i, occupied_cell in enumerate(self.occupied_cells[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        cell = occupied_cell["cell"]
                        cargo_list = occupied_cell["cargo"]
                        location = f"–ë{occupied_cell['block_number']}-–ü{occupied_cell['shelf_number']}-–Ø{occupied_cell['cell_number']}"
                        
                        cargo_info = []
                        for cargo in cargo_list:
                            individual_number = cargo.get("individual_number", "N/A")
                            cargo_name = cargo.get("cargo_name", "N/A")
                            sender_name = cargo.get("sender_name", "N/A")
                            recipient_name = cargo.get("recipient_name", "N/A")
                            cargo_info.append(f"–ì—Ä—É–∑ {individual_number} ({cargo_name}), –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name}")
                        
                        print(f"   üì¶ –ó–ê–ù–Ø–¢–ê–Ø –Ø–ß–ï–ô–ö–ê {i+1}: {location}")
                        for info in cargo_info:
                            print(f"      {info}")
                
                return layout_data
                
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return None
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None

    def test_cargo_removal_endpoint(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π API endpoint /api/operator/cargo/remove-from-cell"""
        try:
            print("üóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏...")
            
            if not self.occupied_cells:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞",
                    False,
                    "–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–Ω—è—Ç—É—é —è—á–µ–π–∫—É
            test_cell = self.occupied_cells[0]
            cargo_list = test_cell["cargo"]
            
            if not cargo_list:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞",
                    False,
                    "–í –∑–∞–Ω—è—Ç–æ–π —è—á–µ–π–∫–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–µ"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –∏–∑ —è—á–µ–π–∫–∏
            test_cargo = cargo_list[0]
            individual_number = test_cargo.get("individual_number")
            cargo_number = test_cargo.get("cargo_number")
            
            if not individual_number or not cargo_number:
                self.log_test(
                    "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: individual_number={individual_number}, cargo_number={cargo_number}"
                )
                return False
            
            print(f"   üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞: individual_number={individual_number}, cargo_number={cargo_number}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ endpoint
            removal_data = {
                "individual_number": individual_number,
                "cargo_number": cargo_number
            }
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/remove-from-cell",
                json=removal_data,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                result_data = response.json()
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π API endpoint /api/operator/cargo/remove-from-cell",
                    True,
                    f"–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ {individual_number} –∏–∑ —è—á–µ–π–∫–∏. –û—Ç–≤–µ—Ç: {result_data.get('message', '–£—Å–ø–µ—à–Ω–æ')}"
                )
                return True
            elif response.status_code == 404:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π API endpoint /api/operator/cargo/remove-from-cell",
                    False,
                    f"Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (HTTP 404). –í–æ–∑–º–æ–∂–Ω–æ, endpoint –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
                    "HTTP 200 —Å —É—Å–ø–µ—à–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º",
                    "HTTP 404 - endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return False
            else:
                try:
                    error_data = response.json()
                    error_message = error_data.get("detail", f"HTTP {response.status_code}")
                except:
                    error_message = f"HTTP {response.status_code}"
                
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π API endpoint /api/operator/cargo/remove-from-cell",
                    False,
                    f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞: {error_message}",
                    "HTTP 200 —Å —É—Å–ø–µ—à–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º",
                    error_message
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def verify_cargo_removal(self, initial_layout_data):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ –∏ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —è—á–µ–π–∫–∏"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_id}/layout-with-cargo", timeout=30)
            
            if response.status_code == 200:
                updated_layout_data = response.json()
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –¥–æ –∏ –ø–æ—Å–ª–µ
                initial_occupied = initial_layout_data.get("occupied_cells", 0)
                updated_occupied = updated_layout_data.get("occupied_cells", 0)
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤
                initial_cargo_count = initial_layout_data.get("total_cargo", 0)
                updated_cargo_count = updated_layout_data.get("total_cargo", 0)
                
                cargo_removed = initial_cargo_count > updated_cargo_count
                cells_updated = initial_occupied >= updated_occupied
                
                self.log_test(
                    "–ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ –∏ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —è—á–µ–π–∫–∏",
                    cargo_removed or cells_updated,
                    f"–°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –ì—Ä—É–∑–æ–≤ –±—ã–ª–æ {initial_cargo_count}, —Å—Ç–∞–ª–æ {updated_cargo_count}. " +
                    f"–ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –±—ã–ª–æ {initial_occupied}, —Å—Ç–∞–ª–æ {updated_occupied}",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –∏–ª–∏ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –¥–æ–ª–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å—Å—è",
                    f"–ì—Ä—É–∑–æ–≤: {initial_cargo_count}‚Üí{updated_cargo_count}, –Ø—á–µ–µ–∫: {initial_occupied}‚Üí{updated_occupied}"
                )
                
                return cargo_removed or cells_updated
            else:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º—ã: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ review request"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API ENDPOINT –î–õ–Ø –°–•–ï–ú–´ –°–ö–õ–ê–î–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê")
        print("=" * 90)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
        if not self.get_operator_warehouses():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        # –®–∞–≥ 3-5: –ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞ –∏ –Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
        initial_layout_data = self.get_warehouse_layout_with_cargo()
        if not initial_layout_data:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞")
            return False
        
        # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞
        removal_success = self.test_cargo_removal_endpoint()
        
        # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ)
        verification_success = True
        if removal_success:
            verification_success = self.verify_cargo_removal(initial_layout_data)
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 90)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API ENDPOINT –î–õ–Ø –°–•–ï–ú–´ –°–ö–õ–ê–î–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê:")
        print("=" * 90)
        
        successful_tests = sum(1 for result in self.test_results if result["success"])
        total_tests = len(self.test_results)
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà SUCCESS RATE: {success_rate:.1f}% ({successful_tests}/{total_tests} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
        
        overall_success = removal_success and verification_success and success_rate >= 80
        
        if overall_success:
            print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("üéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚úÖ API /api/operator/warehouses –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            print("   ‚úÖ API /api/warehouses/{warehouse_id}/layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ layout.blocks —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏ —Å –ø–æ–ª–∫–∞–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏")
            print("   ‚úÖ –ó–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–∞—Ö")
            if removal_success:
                print("   ‚úÖ API /api/operator/cargo/remove-from-cell —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                if verification_success:
                    print("   ‚úÖ –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê:")
            if not removal_success:
                print("   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å API endpoint /api/operator/cargo/remove-from-cell")
            if removal_success and not verification_success:
                print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞")
            if success_rate < 80:
                print(f"   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (success rate: {success_rate:.1f}%)")
        
        return overall_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseLayoutCargoRemovalTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT –î–õ–Ø –°–•–ï–ú–´ –°–ö–õ–ê–î–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
        return 0
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´ –° –ù–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨–Æ!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ API endpoint —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏")
        return 1

if __name__ == "__main__":
    exit(main())