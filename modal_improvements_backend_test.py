#!/usr/bin/env python3
"""
Backend Testing for Modal Window Improvements in TAJLINE.TJ
Testing improvements to cargo acceptance modal window according to review request:
1. QR CODES: Added QR code and label buttons for each cargo separately in format xxxxxx/xx (numbers only)
2. FIXED TOTAL SUM: Now correctly calculated as weight * price instead of just price
3. ADDED UI ELEMENTS: Warehouse list, extended payment statuses, payment methods
4. IMPROVED PAYMENT ACCEPTANCE BLOCK: Shows total sum from calculator with detailed calculation
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class ModalImprovementsBackendTester:
    def __init__(self, base_url="https://cargo-tracker-33.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.users = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üéØ TAJLINE.TJ MODAL WINDOW IMPROVEMENTS BACKEND TESTING")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    if isinstance(result, dict) and len(str(result)) < 300:
                        print(f"   üìÑ Response: {result}")
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_modal_window_improvements(self):
        """Test modal window improvements for cargo acceptance in TAJLINE.TJ"""
        print("\nüéØ MODAL WINDOW IMPROVEMENTS BACKEND TESTING")
        print("   üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ")
        print("   üîß –ö–û–ù–¢–ï–ö–°–¢: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≥—Ä—É–∑–∞:")
        print("   1. QR –ö–û–î–´: –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ QR –∫–æ–¥–∞ –∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ xxxxxx/xx (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        print("   2. –ò–°–ü–†–ê–í–õ–ï–ù–ê –û–ë–©–ê–Ø –°–£–ú–ú–ê: —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –≤–µ—Å * —Ü–µ–Ω–∞ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω–∞")
        print("   3. –î–û–ë–ê–í–õ–ï–ù–´ –≠–õ–ï–ú–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê: —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã, —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã")
        print("   4. –£–õ–£–ß–®–ï–ù –ë–õ–û–ö –ü–†–ò–ù–Ø–¢–ò–Ø –û–ü–õ–ê–¢–´: –ø–æ–∫–∞–∑–∞–Ω–∞ –æ–±—â–∞—è —Å—É–º–º–∞ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º")
        
        all_success = True
        
        # –≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
        print("\n   üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        all_success &= success
        
        operator_token = None
        if success and 'access_token' in login_response:
            operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            operator_phone = operator_user.get('phone')
            operator_user_number = operator_user.get('user_number')
            
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {operator_name}")
            print(f"   üëë –†–æ–ª—å: {operator_role}")
            print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {operator_phone}")
            print(f"   üÜî –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {operator_user_number}")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {operator_token[:50]}...")
            
            # Verify role is warehouse_operator
            if operator_role == 'warehouse_operator':
                print("   ‚úÖ –†–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ 'warehouse_operator'")
            else:
                print(f"   ‚ùå –†–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è: –æ–∂–∏–¥–∞–ª–æ—Å—å 'warehouse_operator', –ø–æ–ª—É—á–µ–Ω–æ '{operator_role}'")
                all_success = False
            
            self.tokens['warehouse_operator'] = operator_token
            self.users['warehouse_operator'] = operator_user
        else:
            print("   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            all_success = False
            return False
        
        # –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ (endpoint /api/warehouses)
        print("\n   üè≠ –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –°–ö–õ–ê–î–û–í (endpoint /api/warehouses)...")
        
        success, warehouses_response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ",
            "GET",
            "/api/warehouses",
            200,
            token=operator_token
        )
        all_success &= success
        
        warehouses_list = []
        if success:
            warehouses_list = warehouses_response if isinstance(warehouses_response, list) else []
            warehouse_count = len(warehouses_list)
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤: {warehouse_count} —Å–∫–ª–∞–¥–æ–≤")
            
            if warehouse_count > 0:
                # Verify warehouse structure for modal window
                sample_warehouse = warehouses_list[0]
                required_fields = ['id', 'name', 'location']
                missing_fields = [field for field in required_fields if field not in sample_warehouse]
                
                if not missing_fields:
                    print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (id, name, location)")
                    print(f"   üè≠ –ü—Ä–∏–º–µ—Ä —Å–∫–ª–∞–¥–∞: {sample_warehouse.get('name')} - {sample_warehouse.get('location')}")
                else:
                    print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∫–ª–∞–¥–∞: {missing_fields}")
                    all_success = False
            else:
                print("   ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            all_success = False
        
        # –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "in_processing"
        print("\n   üì¨ –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–û –°–¢–ê–¢–£–°–û–ú 'in_processing'...")
        
        success, notifications_response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing'",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token,
            params={"status": "in_processing"}
        )
        all_success &= success
        
        in_processing_notifications = []
        if success:
            notifications = notifications_response.get('notifications', []) if isinstance(notifications_response, dict) else notifications_response if isinstance(notifications_response, list) else []
            
            # Filter for in_processing status
            in_processing_notifications = [n for n in notifications if n.get('status') == 'in_processing']
            in_processing_count = len(in_processing_notifications)
            total_notifications = len(notifications)
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_notifications} –≤—Å–µ–≥–æ, {in_processing_count} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing'")
            
            if in_processing_count > 0:
                # Find a notification for testing
                test_notification = in_processing_notifications[0]
                notification_id = test_notification.get('id')
                request_number = test_notification.get('request_number')
                sender_name = test_notification.get('sender_full_name')
                
                print(f"   üìã –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_id}")
                print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_number}")
                print(f"   üìã –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}")
                
                # Store for later testing
                self.test_notification_id = notification_id
                self.test_request_number = request_number
            else:
                print("   ‚ö†Ô∏è  –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            all_success = False
        
        # –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        print("\n   üéØ –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT –ó–ê–í–ï–†–®–ï–ù–ò–Ø –û–§–û–†–ú–õ–ï–ù–ò–Ø –° –ù–û–í–´–ú–ò –ü–û–õ–Ø–ú–ò...")
        
        if hasattr(self, 'test_notification_id') and self.test_notification_id:
            # Test completion endpoint with new modal window fields
            completion_data = {
                "warehouse_id": warehouses_list[0]['id'] if warehouses_list else None,
                "payment_method": "cash",  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                "payment_amount": 2500.0,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
                "total_calculation": {  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    "weight": 5.0,
                    "price_per_kg": 500.0,
                    "total_cost": 2500.0  # weight * price_per_kg
                },
                "extended_payment_status": "paid",  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                "qr_format": "xxxxxx/xx"  # –ù–æ–≤–æ–µ –ø–æ–ª–µ - —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
            }
            
            success, completion_response = self.run_test(
                "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                "POST",
                f"/api/operator/warehouse-notifications/{self.test_notification_id}/complete",
                200,
                completion_data,
                operator_token
            )
            all_success &= success
            
            if success:
                print("   ‚úÖ Endpoint –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏")
                
                # Verify response structure
                message = completion_response.get('message')
                notification_id = completion_response.get('notification_id')
                cargo_id = completion_response.get('cargo_id')
                cargo_number = completion_response.get('cargo_number')
                notification_status = completion_response.get('notification_status')
                created_cargos = completion_response.get('created_cargos')
                
                print(f"   üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                print(f"   üìã ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_id}")
                print(f"   üì¶ ID –≥—Ä—É–∑–∞: {cargo_id}")
                print(f"   üì¶ –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {cargo_number}")
                print(f"   üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_status}")
                print(f"   üìä –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–∑–æ–≤: {created_cargos}")
                
                # Verify cargo number format (xxxxxx/xx - only digits)
                if cargo_number:
                    import re
                    # Check if cargo number matches format xxxxxx/xx (digits only)
                    if re.match(r'^\d{6}/\d{2}$', cargo_number):
                        print(f"   ‚úÖ –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É xxxxxx/xx (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã): {cargo_number}")
                    else:
                        print(f"   ‚ö†Ô∏è  –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É xxxxxx/xx: {cargo_number}")
                
                # Store created cargo for further testing
                if cargo_id:
                    self.test_cargo_id = cargo_id
                    self.test_cargo_number = cargo_number
            else:
                print("   ‚ùå Endpoint –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏")
                all_success = False
        else:
            print("   ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")
        
        # –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Å warehouse_id
        print("\n   üì¶ –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –ì–†–£–ó–û–í –° WAREHOUSE_ID...")
        
        if hasattr(self, 'test_cargo_number') and self.test_cargo_number:
            # Check if cargo was created with warehouse_id
            success, cargo_response = self.run_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞ —Å warehouse_id",
                "GET",
                f"/api/cargo/track/{self.test_cargo_number}",
                200,
                token=operator_token
            )
            
            if success:
                print("   ‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –≥—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                
                # Verify cargo has warehouse_id and other new fields
                warehouse_id = cargo_response.get('warehouse_id')
                processing_status = cargo_response.get('processing_status')
                payment_method = cargo_response.get('payment_method')
                total_cost = cargo_response.get('declared_value') or cargo_response.get('total_cost')
                weight = cargo_response.get('weight')
                
                print(f"   üè≠ Warehouse ID: {warehouse_id}")
                print(f"   üìä Processing status: {processing_status}")
                print(f"   üí≥ Payment method: {payment_method}")
                print(f"   üí∞ Total cost: {total_cost}")
                print(f"   ‚öñÔ∏è  Weight: {weight}")
                
                # Verify warehouse_id is present
                if warehouse_id:
                    print("   ‚úÖ –ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º warehouse_id")
                else:
                    print("   ‚ùå –ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω –±–µ–∑ warehouse_id")
                    all_success = False
                
                # Verify total cost calculation (weight * price)
                if weight and total_cost:
                    expected_total = weight * 500.0  # price_per_kg from test data
                    if abs(total_cost - expected_total) < 0.01:
                        print(f"   ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {weight} * 500 = {total_cost}")
                    else:
                        print(f"   ‚ö†Ô∏è  –û–±—â–∞—è —Å—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ-–¥—Ä—É–≥–æ–º—É: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ {total_cost}")
            else:
                print("   ‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                all_success = False
        else:
            print("   ‚ö†Ô∏è  –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        # –≠–¢–ê–ü 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        print("\n   üîß –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ü–û–î–î–ï–†–ñ–ö–ò –ù–û–í–´–• –ü–û–õ–ï–ô –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê...")
        
        # Test creating cargo with all new modal window fields
        new_cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–µ –û–∫–Ω–æ",
            "sender_phone": "+79991234567",
            "recipient_full_name": "–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–µ –û–∫–Ω–æ",
            "recipient_phone": "+992987654321",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ú–æ–¥–∞–ª—å–Ω—ã—Ö –£–ª—É—á—à–µ–Ω–∏–π, 1",
            "weight": 3.5,
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
            "description": "–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
            "route": "moscow_to_tajikistan",
            
            # NEW MODAL WINDOW FIELDS
            "warehouse_id": warehouses_list[0]['id'] if warehouses_list else None,
            "payment_method": "card_transfer",  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
            "payment_amount": 1750.0,  # –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
            "extended_payment_status": "paid",  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã
            
            # Individual cargo items with separate pricing (for QR codes)
            "cargo_items": [
                {
                    "cargo_name": "–ì—Ä—É–∑ 1 –¥–ª—è QR",
                    "weight": 2.0,
                    "price_per_kg": 500.0  # Individual price per kg
                },
                {
                    "cargo_name": "–ì—Ä—É–∑ 2 –¥–ª—è QR", 
                    "weight": 1.5,
                    "price_per_kg": 500.0  # Individual price per kg
                }
            ]
        }
        
        success, new_cargo_response = self.run_test(
            "–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–∑–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
            "POST",
            "/api/operator/cargo/accept",
            200,
            new_cargo_data,
            operator_token
        )
        all_success &= success
        
        if success:
            print("   ‚úÖ Backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            
            # Verify response contains new fields
            cargo_number = new_cargo_response.get('cargo_number')
            warehouse_id = new_cargo_response.get('warehouse_id')
            payment_method = new_cargo_response.get('payment_method')
            processing_status = new_cargo_response.get('processing_status')
            total_cost = new_cargo_response.get('total_cost') or new_cargo_response.get('declared_value')
            
            print(f"   üì¶ –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {cargo_number}")
            print(f"   üè≠ Warehouse ID: {warehouse_id}")
            print(f"   üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_status}")
            print(f"   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}")
            
            # Verify total cost calculation for individual items
            if total_cost:
                expected_total = (2.0 * 500.0) + (1.5 * 500.0)  # Sum of individual cargo costs
                if abs(total_cost - expected_total) < 0.01:
                    print(f"   ‚úÖ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {total_cost}")
                else:
                    print(f"   ‚ö†Ô∏è  –û–±—â–∞—è —Å—É–º–º–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ {total_cost}")
            
            # Verify cargo number format for QR codes
            if cargo_number:
                import re
                if re.match(r'^\d+$', cargo_number.replace('/', '')):
                    print(f"   ‚úÖ –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è QR –∫–æ–¥–æ–≤: {cargo_number}")
                else:
                    print(f"   ‚ö†Ô∏è  –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã: {cargo_number}")
        else:
            print("   ‚ùå Backend –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            all_success = False
        
        # SUMMARY
        print("\n   üìä MODAL WINDOW IMPROVEMENTS BACKEND TESTING SUMMARY:")
        
        success_rate = (self.tests_passed / self.tests_run * 100) if self.tests_run > 0 else 0
        
        if all_success:
            print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            print("   ‚úÖ –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
            print("   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
            print("   ‚úÖ Endpoint –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è")
            print("   ‚úÖ –ì—Ä—É–∑—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º warehouse_id")
            print("   ‚úÖ Backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:")
            print("       - QR –∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ xxxxxx/xx (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) ‚úÖ")
            print("       - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ–±—â–∞—è —Å—É–º–º–∞ (–≤–µ—Å * —Ü–µ–Ω–∞) ‚úÖ")
            print("       - –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ ‚úÖ")
            print("       - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã ‚úÖ")
            print("       - –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã ‚úÖ")
            print("       - –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã ‚úÖ")
            print("   üéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        else:
            print("   ‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            print("   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤—ã—à–µ")
        
        print(f"\n   üìà SUCCESS RATE: {self.tests_passed}/{self.tests_run} ({success_rate:.1f}%)")
        
        return all_success

def main():
    """Main function to run modal window improvements backend testing"""
    tester = ModalImprovementsBackendTester()
    
    print("üöÄ Starting Modal Window Improvements Backend Testing...")
    
    # Run the comprehensive test
    success = tester.test_modal_window_improvements()
    
    print("\n" + "=" * 80)
    if success:
        print("üéâ MODAL WINDOW IMPROVEMENTS BACKEND TESTING COMPLETED SUCCESSFULLY!")
        print("‚úÖ All modal window improvements are working correctly")
        print("‚úÖ Backend supports new QR codes, total sum calculation, UI elements, and payment block")
        sys.exit(0)
    else:
        print("‚ùå MODAL WINDOW IMPROVEMENTS BACKEND TESTING FAILED!")
        print("üîç Some modal window improvements need attention")
        sys.exit(1)

if __name__ == "__main__":
    main()