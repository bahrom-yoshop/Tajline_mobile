#!/usr/bin/env python3
"""
üéâ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞

**–ö–û–ù–¢–ï–ö–°–¢:**
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä USR648425 —Ä–∞–∑–º–µ—Å—Ç–∏–ª –≥—Ä—É–∑—ã:
- 25082235/01/01 –Ω–∞ –ë1-–ü3-–Ø3
- 25082235/01/02 –Ω–∞ –ë1-–ü3-–Ø2  
- 25082235/02/01 –Ω–∞ –ë1-–ü3-–Ø2

–Ø –∏—Å–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã —Å placement_records –∏ layout-with-cargo API. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.

**–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:**

1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞** 
   - –õ–æ–≥–∏–Ω: +79777888999 / warehouse123
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

2. **–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"**
   - –í—ã–∑–≤–∞—Ç—å /api/operator/warehouses
   - –ù–∞–π—Ç–∏ —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID

3. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo**
   - –í—ã–∑–≤–∞—Ç—å /api/warehouses/{warehouse_id}/layout-with-cargo
   - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
     * occupied_cells –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 2
     * total_cargo –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 3
     * occupancy_percentage > 0
     * layout.blocks[0] –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å

4. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ —Å –≥—Ä—É–∑–∞–º–∏**
   - –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 3, –Ø—á–µ–π–∫–∞ 2 (–ë1-–ü3-–Ø2): –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≥—Ä—É–∑—ã 25082235/01/02 –∏ 25082235/02/01
   - –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 3, –Ø—á–µ–π–∫–∞ 3 (–ë1-–ü3-–Ø3): –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≥—Ä—É–∑ 25082235/01/01
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å is_occupied=true –¥–ª—è –æ–±–µ–∏—Ö —è—á–µ–µ–∫
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cargo_count –∏ –Ω–∞–ª–∏—á–∏–µ cargo –º–∞—Å—Å–∏–≤–æ–≤

5. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö**
   - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ:
     * individual_number
     * cargo_number  
     * recipient_full_name
     * cargo_name
     * placement_location
     * placed_by
     * placed_at

6. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏**
   - –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∑–≤–∞—Ç—å /api/operator/cargo/remove-from-cell
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

7. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002**
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç warehouse-block-shelf-cell —Ñ–æ—Ä–º–∞—Ç

**–ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:**
- ‚úÖ occupied_cells >= 2, total_cargo >= 3
- ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2 —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –≥—Ä—É–∑–∞
- ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3 —Å–æ–¥–µ—Ä–∂–∏—Ç 1 –≥—Ä—É–∑
- ‚úÖ –í—Å–µ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- ‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
- ‚úÖ QR –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç

**–¶–ï–õ–¨:** –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π —è—á–µ–µ–∫ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Test credentials
TEST_CREDENTIALS = {
    "phone": WAREHOUSE_OPERATOR_PHONE,
    "password": WAREHOUSE_OPERATOR_PASSWORD
}

# Global variables
auth_token = None
test_results = []
warehouse_id = None
moscow_warehouse_name = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"

# Target cargo items that should be placed
TARGET_CARGO_ITEMS = [
    {"individual_number": "25082235/01/01", "expected_location": "–ë1-–ü3-–Ø3"},
    {"individual_number": "25082235/01/02", "expected_location": "–ë1-–ü3-–Ø2"},
    {"individual_number": "25082235/02/01", "expected_location": "–ë1-–ü3-–Ø2"}
]

def log_test_result(test_name, success, details, response_time_ms=None):
    """Log test result with details"""
    status = "‚úÖ PASSED" if success else "‚ùå FAILED"
    result = {
        "test": test_name,
        "status": status,
        "success": success,
        "details": details,
        "timestamp": datetime.now().isoformat(),
        "response_time_ms": response_time_ms
    }
    test_results.append(result)
    
    time_info = f" ({response_time_ms}ms)" if response_time_ms else ""
    print(f"{status}: {test_name}{time_info}")
    print(f"   Details: {details}")
    print()

def make_request(method, endpoint, data=None, headers=None):
    """Make HTTP request with error handling and timing"""
    url = f"{BACKEND_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        
        return response, response_time_ms
    
    except requests.exceptions.RequestException as e:
        response_time_ms = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time_ms

def test_warehouse_operator_authentication():
    """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
    global auth_token
    
    response, response_time = make_request("POST", "/auth/login", TEST_CREDENTIALS)
    
    if not response:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
            False, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            auth_token = data.get("access_token")
            user_info = data.get("user", {})
            
            if auth_token and user_info.get("role") == "warehouse_operator":
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('role')} (–æ–∂–∏–¥–∞–ª–∞—Å—å warehouse_operator)",
                    response_time
                )
                return False
        except Exception as e:
            log_test_result(
                "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_get_warehouse_id():
    """Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" """
    global warehouse_id
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            warehouses = response.json()
            
            if not warehouses:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
                    False,
                    "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç",
                    response_time
                )
                return False
            
            # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
            moscow_warehouse = None
            for warehouse in warehouses:
                if moscow_warehouse_name in warehouse.get("name", ""):
                    moscow_warehouse = warehouse
                    warehouse_id = warehouse.get("id")
                    break
            
            if moscow_warehouse:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
                    True,
                    f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' (ID: {warehouse_id})",
                    response_time
                )
                return True
            else:
                warehouse_names = [w.get("name") for w in warehouses]
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
                    False,
                    f"–°–∫–ª–∞–¥ '{moscow_warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {warehouse_names}",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_layout_with_cargo_api():
    """Test 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo"""
    if not warehouse_id:
        log_test_result(
            "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo",
            False,
            "warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False, None
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        log_test_result(
            "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False, None
    
    if response.status_code == 200:
        try:
            layout_data = response.json()
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò —Å–æ–≥–ª–∞—Å–Ω–æ review request
            occupied_cells = layout_data.get("occupied_cells", 0)
            total_cargo = layout_data.get("total_cargo", 0)
            occupancy_percentage = layout_data.get("occupancy_percentage", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ layout.blocks
            layout = layout_data.get("layout", {})
            blocks = layout.get("blocks", [])
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
            criteria_met = []
            criteria_failed = []
            
            if occupied_cells >= 2:
                criteria_met.append(f"occupied_cells >= 2 ‚úÖ ({occupied_cells})")
            else:
                criteria_failed.append(f"occupied_cells >= 2 ‚ùå ({occupied_cells})")
            
            if total_cargo >= 3:
                criteria_met.append(f"total_cargo >= 3 ‚úÖ ({total_cargo})")
            else:
                criteria_failed.append(f"total_cargo >= 3 ‚ùå ({total_cargo})")
            
            if occupancy_percentage > 0:
                criteria_met.append(f"occupancy_percentage > 0 ‚úÖ ({occupancy_percentage}%)")
            else:
                criteria_failed.append(f"occupancy_percentage > 0 ‚ùå ({occupancy_percentage}%)")
            
            if len(blocks) > 0:
                criteria_met.append(f"layout.blocks[0] —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚úÖ (–±–ª–æ–∫–æ–≤: {len(blocks)})")
            else:
                criteria_failed.append(f"layout.blocks[0] —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå (–±–ª–æ–∫–æ–≤: {len(blocks)})")
            
            success = len(criteria_failed) == 0
            
            if success:
                log_test_result(
                    "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo",
                    True,
                    f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´: {'; '.join(criteria_met)}",
                    response_time
                )
            else:
                log_test_result(
                    "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo",
                    False,
                    f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´: {'; '.join(criteria_failed)}. –ü—Ä–æ–π–¥–µ–Ω–æ: {'; '.join(criteria_met)}",
                    response_time
                )
            
            return success, layout_data
            
        except Exception as e:
            log_test_result(
                "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False, None
    else:
        log_test_result(
            "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API layout-with-cargo",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False, None

def test_specific_cells_with_cargo(layout_data):
    """Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ —Å –≥—Ä—É–∑–∞–º–∏"""
    if not layout_data:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ —Å –≥—Ä—É–∑–∞–º–∏",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    try:
        layout = layout_data.get("layout", {})
        blocks = layout.get("blocks", [])
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
        target_cells = {
            "–ë1-–ü3-–Ø2": {"expected_cargo_count": 2, "expected_cargo": ["25082235/01/02", "25082235/02/01"], "found": False, "actual_cargo": []},
            "–ë1-–ü3-–Ø3": {"expected_cargo_count": 1, "expected_cargo": ["25082235/01/01"], "found": False, "actual_cargo": []}
        }
        
        for block in blocks:
            if block.get("number") == 1:  # –ë–ª–æ–∫ 1
                shelves = block.get("shelves", [])
                for shelf in shelves:
                    if shelf.get("number") == 3:  # –ü–æ–ª–∫–∞ 3
                        cells = shelf.get("cells", [])
                        for cell in cells:
                            cell_number = cell.get("number")
                            if cell_number in [2, 3]:  # –Ø—á–µ–π–∫–∏ 2 –∏ 3
                                location_key = f"–ë1-–ü3-–Ø{cell_number}"
                                
                                if location_key in target_cells:
                                    target_cells[location_key]["found"] = True
                                    target_cells[location_key]["is_occupied"] = cell.get("is_occupied", False)
                                    target_cells[location_key]["cargo_count"] = cell.get("cargo_count", 0)
                                    
                                    cargo_list = cell.get("cargo", [])
                                    for cargo in cargo_list:
                                        individual_number = cargo.get("individual_number", "")
                                        target_cells[location_key]["actual_cargo"].append(individual_number)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        all_success = True
        
        for location, data in target_cells.items():
            if not data["found"]:
                results.append(f"‚ùå {location}: —è—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                all_success = False
                continue
            
            if not data.get("is_occupied", False):
                results.append(f"‚ùå {location}: is_occupied=false (–æ–∂–∏–¥–∞–ª–æ—Å—å true)")
                all_success = False
                continue
            
            actual_count = len(data["actual_cargo"])
            expected_count = data["expected_cargo_count"]
            
            if actual_count != expected_count:
                results.append(f"‚ùå {location}: {actual_count} –≥—Ä—É–∑–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count})")
                all_success = False
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥—Ä—É–∑—ã
            missing_cargo = []
            for expected_cargo in data["expected_cargo"]:
                if expected_cargo not in data["actual_cargo"]:
                    missing_cargo.append(expected_cargo)
            
            if missing_cargo:
                results.append(f"‚ùå {location}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≥—Ä—É–∑—ã {missing_cargo}")
                all_success = False
            else:
                results.append(f"‚úÖ {location}: {actual_count} –≥—Ä—É–∑–æ–≤, is_occupied=true, –≥—Ä—É–∑—ã: {data['actual_cargo']}")
        
        if all_success:
            log_test_result(
                "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ —Å –≥—Ä—É–∑–∞–º–∏",
                True,
                f"–í—Å–µ —Ü–µ–ª–µ–≤—ã–µ —è—á–µ–π–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã: {'; '.join(results)}",
                0
            )
        else:
            log_test_result(
                "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ —Å –≥—Ä—É–∑–∞–º–∏",
                False,
                f"–ü—Ä–æ–±–ª–µ–º—ã —Å —Ü–µ–ª–µ–≤—ã–º–∏ —è—á–µ–π–∫–∞–º–∏: {'; '.join(results)}",
                0
            )
        
        return all_success
        
    except Exception as e:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ —Å –≥—Ä—É–∑–∞–º–∏",
            False,
            f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —è—á–µ–µ–∫: {e}",
            0
        )
        return False

def test_cargo_detailed_information(layout_data):
    """Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö"""
    if not layout_data:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    try:
        layout = layout_data.get("layout", {})
        blocks = layout.get("blocks", [])
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–∑—ã –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö —è—á–µ–µ–∫
        found_cargo = []
        
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied", False):
                        cargo_list = cell.get("cargo", [])
                        for cargo in cargo_list:
                            individual_number = cargo.get("individual_number", "")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã
                            if any(target["individual_number"] in individual_number for target in TARGET_CARGO_ITEMS):
                                found_cargo.append(cargo)
        
        if not found_cargo:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö",
                False,
                "–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞",
                0
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞
        required_fields = [
            "individual_number", "cargo_number", "recipient_full_name", 
            "cargo_name", "placement_location", "placed_by", "placed_at"
        ]
        
        cargo_results = []
        all_fields_present = True
        
        for cargo in found_cargo:
            individual_number = cargo.get("individual_number", "unknown")
            missing_fields = []
            present_fields = []
            
            for field in required_fields:
                if field in cargo and cargo[field]:
                    present_fields.append(field)
                else:
                    missing_fields.append(field)
            
            if missing_fields:
                cargo_results.append(f"‚ùå {individual_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}")
                all_fields_present = False
            else:
                cargo_results.append(f"‚úÖ {individual_number}: –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        if all_fields_present:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö",
                True,
                f"–í—Å–µ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(found_cargo)} –≥—Ä—É–∑–æ–≤: {'; '.join(cargo_results)}",
                0
            )
        else:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö",
                False,
                f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–∑–∞—Ö: {'; '.join(cargo_results)}",
                0
            )
        
        return all_fields_present
        
    except Exception as e:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö",
            False,
            f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö: {e}",
            0
        )
        return False

def test_cargo_removal_api():
    """Test 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_cargo = TARGET_CARGO_ITEMS[0]  # 25082235/01/01
    
    removal_data = {
        "individual_number": test_cargo["individual_number"],
        "location": test_cargo["expected_location"]
    }
    
    response, response_time = make_request("POST", "/operator/cargo/remove-from-cell", removal_data)
    
    if not response:
        log_test_result(
            "6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    # API –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ª—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å)
    if response.status_code in [200, 400, 404, 422]:
        try:
            response_data = response.json()
            
            if response.status_code == 200:
                log_test_result(
                    "6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –û—Ç–≤–µ—Ç: {response_data.get('message', '–ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')}",
                    response_time
                )
                return True
            else:
                # –î–∞–∂–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç
                log_test_result(
                    "6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! HTTP {response.status_code}: {response_data.get('detail', 'API –¥–æ—Å—Ç—É–ø–µ–Ω')}",
                    response_time
                )
                return True
            
        except Exception as e:
            log_test_result(
                "6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
            False,
            f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_qr_format_support():
    """Test 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002"""
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º QR —Ñ–æ—Ä–º–∞—Ç warehouse-block-shelf-cell
    qr_test_data = {
        "qr_code": "001-01-02-002"
    }
    
    response, response_time = make_request("POST", "/operator/placement/verify-cell", qr_test_data)
    
    if not response:
        log_test_result(
            "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code in [200, 400, 404, 422]:
        try:
            response_data = response.json()
            
            if response.status_code == 200:
                log_test_result(
                    "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    True,
                    f"‚úÖ QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {response_data.get('message', '–Ø—á–µ–π–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é')}",
                    response_time
                )
                return True
            elif "–Ω–µ –Ω–∞–π–¥–µ–Ω" in response_data.get("detail", "").lower() or "not found" in response_data.get("detail", "").lower():
                log_test_result(
                    "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    True,
                    f"‚úÖ QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (—è—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω): {response_data.get('detail')}",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    False,
                    f"QR —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {response_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    response_time
                )
                return False
            
        except Exception as e:
            log_test_result(
                "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
            False,
            f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def print_test_summary():
    """Print comprehensive test summary"""
    print("\n" + "="*80)
    print("üéâ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = len([r for r in test_results if r["success"]])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   Success Rate: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status_icon = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time_ms']}ms)" if result.get('response_time_ms') else ""
        print(f"   {i}. {status_icon} {result['test']}{time_info}")
        print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ review request
    auth_success = any("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞" in r["test"] and r["success"] for r in test_results)
    warehouse_found = any("warehouse_id" in r["test"] and r["success"] for r in test_results)
    layout_api_works = any("layout-with-cargo" in r["test"] and r["success"] for r in test_results)
    cells_correct = any("–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫" in r["test"] and r["success"] for r in test_results)
    cargo_info_complete = any("–¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in r["test"] and r["success"] for r in test_results)
    removal_api_works = any("—É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞" in r["test"] and r["success"] for r in test_results)
    qr_format_supported = any("QR —Ñ–æ—Ä–º–∞—Ç–∞" in r["test"] and r["success"] for r in test_results)
    
    print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'–î–ê' if auth_success else '–ù–ï–¢'}")
    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id: {'–î–ê' if warehouse_found else '–ù–ï–¢'}")
    print(f"   ‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç: {'–î–ê' if layout_api_works else '–ù–ï–¢'}")
    print(f"   ‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —è—á–µ–π–∫–∏ —Å –≥—Ä—É–∑–∞–º–∏: {'–î–ê' if cells_correct else '–ù–ï–¢'}")
    print(f"   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–∞—Ö: {'–î–ê' if cargo_info_complete else '–ù–ï–¢'}")
    print(f"   ‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {'–î–ê' if removal_api_works else '–ù–ï–¢'}")
    print(f"   ‚úÖ QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {'–î–ê' if qr_format_supported else '–ù–ï–¢'}")
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    all_criteria_met = all([auth_success, warehouse_found, layout_api_works, cells_correct, cargo_info_complete, removal_api_works, qr_format_supported])
    
    if success_rate >= 85 and all_criteria_met:
        print("   üéâ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π —è—á–µ–µ–∫ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!")
        print("   –í—Å–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
        print("   - ‚úÖ occupied_cells >= 2, total_cargo >= 3")
        print("   - ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2 —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –≥—Ä—É–∑–∞")
        print("   - ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3 —Å–æ–¥–µ—Ä–∂–∏—Ç 1 –≥—Ä—É–∑")
        print("   - ‚úÖ –í—Å–µ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print("   - ‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   - ‚úÖ QR –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç")
    else:
        print("   ‚ùå –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
        print("   –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        if not all_criteria_met:
            failed_criteria = []
            if not auth_success: failed_criteria.append("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            if not warehouse_found: failed_criteria.append("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id")
            if not layout_api_works: failed_criteria.append("API layout-with-cargo")
            if not cells_correct: failed_criteria.append("–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —è—á–µ–π–∫–∏")
            if not cargo_info_complete: failed_criteria.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–∞—Ö")
            if not removal_api_works: failed_criteria.append("API —É–¥–∞–ª–µ–Ω–∏—è")
            if not qr_format_supported: failed_criteria.append("QR —Ñ–æ—Ä–º–∞—Ç")
            print(f"   –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏: {', '.join(failed_criteria)}")
    
    print("="*80)

def main():
    """Main test execution"""
    print("üéâ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞")
    print("="*80)
    print("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    print()
    
    # Test 1: Authentication
    if not test_warehouse_operator_authentication():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_test_summary()
        return
    
    # Test 2: Get warehouse ID
    if not test_get_warehouse_id():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å warehouse_id. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_test_summary()
        return
    
    # Test 3: Layout API with critical checks
    layout_success, layout_data = test_layout_with_cargo_api()
    if not layout_success:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: API layout-with-cargo –Ω–µ –ø—Ä–æ—à–µ–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        print_test_summary()
        return
    
    # Test 4: Specific cells with cargo
    test_specific_cells_with_cargo(layout_data)
    
    # Test 5: Detailed cargo information
    test_cargo_detailed_information(layout_data)
    
    # Test 6: Cargo removal API
    test_cargo_removal_api()
    
    # Test 7: QR format support
    test_qr_format_support()
    
    # Print final summary
    print_test_summary()

if __name__ == "__main__":
    main()