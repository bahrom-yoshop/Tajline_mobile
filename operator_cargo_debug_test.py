#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê: –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
===================================================================================

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ operator_cargo —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º USR648425

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ GET /api/debug/operator-cargo –∏–ª–∏ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
3. –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425:
   - –ù–∞–π—Ç–∏ –í–°–ï –∑–∞–ø–∏—Å–∏ operator_cargo —Å operator_name –∏–ª–∏ placed_by —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "USR648425" –∏–ª–∏ "–Æ–ª–¥–∞—à–µ–≤"
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö: cargo_items.individual_items.is_placed
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å warehouse_id –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã:
   - –ü–æ—á–µ–º—É API layout-with-cargo –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ warehouse_id
   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –ø–∞—Ä—Å–∏—Ç—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è operator_cargo

–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–¥–µ –∑–∞—è–≤–∫–∞ 25082298 –∏–º–µ–µ—Ç 7 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü 
–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º "–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á". –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ operator_cargo.

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø–æ—á–µ–º—É operator_cargo –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è API
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_OPERATOR = "USR648425"
TARGET_APPLICATION = "25082298"
TARGET_OPERATOR_NAME = "–Æ–ª–¥–∞—à–µ–≤"

class OperatorCargoDebugTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "debug_api_accessible": False,
            "operator_cargo_found": False,
            "target_application_found": False,
            "individual_items_structure": False,
            "warehouse_id_check": False,
            "api_layout_diagnosis": False
        }
        self.found_records = []
        self.diagnosis_results = {}

    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                    self.test_results["auth_success"] = True
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False

    def check_debug_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ debug API –¥–ª—è operator_cargo"""
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ debug API –¥–ª—è operator_cargo...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ debug endpoints
            debug_endpoints = [
                "/debug/operator-cargo",
                "/operator/debug/operator-cargo", 
                "/admin/debug/operator-cargo",
                "/debug/collections/operator_cargo"
            ]
            
            for endpoint in debug_endpoints:
                try:
                    response = self.session.get(f"{API_BASE}{endpoint}")
                    self.log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {endpoint}: {response.status_code}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        self.log(f"‚úÖ Debug API –¥–æ—Å—Ç—É–ø–µ–Ω: {endpoint}")
                        self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data) if isinstance(data, list) else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                        self.test_results["debug_api_accessible"] = True
                        return data
                    elif response.status_code == 404:
                        continue
                    else:
                        self.log(f"‚ö†Ô∏è {endpoint} –≤–µ—Ä–Ω—É–ª: {response.status_code}")
                        
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {endpoint}: {e}")
                    continue
            
            self.log("‚ùå –ù–∏ –æ–¥–∏–Ω debug API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ debug API: {e}", "ERROR")
            return None

    def search_operator_cargo_direct(self):
        """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ operator_cargo —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API"""
        try:
            self.log(f"üîç –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR} –≤ operator_cargo...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ API endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_endpoints = [
                "/operator/cargo/all",
                "/operator/cargo/list", 
                "/admin/cargo/all",
                "/cargo/search",
                "/operator/cargo/individual-units-for-placement"
            ]
            
            for endpoint in search_endpoints:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    params_list = [
                        {},
                        {"page": 1, "per_page": 100},
                        {"search": TARGET_OPERATOR},
                        {"search": TARGET_OPERATOR_NAME},
                        {"operator": TARGET_OPERATOR}
                    ]
                    
                    for params in params_list:
                        response = self.session.get(f"{API_BASE}{endpoint}", params=params)
                        
                        if response.status_code == 200:
                            data = response.json()
                            self.log(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ {endpoint} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                            if isinstance(data, dict):
                                if "items" in data:
                                    items = data["items"]
                                    self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(items)}")
                                    self.analyze_cargo_records(items, endpoint)
                                elif "cargo" in data:
                                    items = data["cargo"]
                                    self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(items)}")
                                    self.analyze_cargo_records(items, endpoint)
                                else:
                                    self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                            elif isinstance(data, list):
                                self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
                                self.analyze_cargo_records(data, endpoint)
                            
                            break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π endpoint, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                        elif response.status_code == 404:
                            continue
                        else:
                            self.log(f"‚ö†Ô∏è {endpoint} –≤–µ—Ä–Ω—É–ª: {response.status_code}")
                            
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint}: {e}")
                    continue
                    
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ operator_cargo: {e}", "ERROR")

    def analyze_cargo_records(self, records, source_endpoint):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425"""
        try:
            self.log(f"üîç –ê–Ω–∞–ª–∏–∑ {len(records)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {source_endpoint}...")
            
            target_records = []
            
            for record in records:
                # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
                found_operator = False
                found_fields = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                fields_to_check = [
                    "operator_name", "placed_by", "created_by_operator", 
                    "accepting_operator", "placing_operator", "operator_id",
                    "created_by", "updated_by"
                ]
                
                for field in fields_to_check:
                    if field in record:
                        value = str(record[field]).lower()
                        if TARGET_OPERATOR.lower() in value or TARGET_OPERATOR_NAME.lower() in value:
                            found_operator = True
                            found_fields.append(f"{field}: {record[field]}")
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if "cargo_items" in record:
                    for cargo_item in record["cargo_items"]:
                        if "individual_items" in cargo_item:
                            for individual_item in cargo_item["individual_items"]:
                                for field in ["placed_by", "operator_name", "operator_id"]:
                                    if field in individual_item:
                                        value = str(individual_item[field]).lower()
                                        if TARGET_OPERATOR.lower() in value or TARGET_OPERATOR_NAME.lower() in value:
                                            found_operator = True
                                            found_fields.append(f"cargo_items.individual_items.{field}: {individual_item[field]}")
                
                if found_operator:
                    target_records.append({
                        "record": record,
                        "found_fields": found_fields,
                        "source": source_endpoint
                    })
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É 25082298
                    cargo_number = record.get("cargo_number", "")
                    if TARGET_APPLICATION in cargo_number:
                        self.log(f"üéØ –ù–ê–ô–î–ï–ù–ê –¶–ï–õ–ï–í–ê–Ø –ó–ê–Ø–í–ö–ê {TARGET_APPLICATION}!")
                        self.test_results["target_application_found"] = True
            
            if target_records:
                self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(target_records)} –∑–∞–ø–∏—Å–µ–π —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {TARGET_OPERATOR}")
                self.found_records.extend(target_records)
                self.test_results["operator_cargo_found"] = True
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                self.analyze_found_records(target_records)
            else:
                self.log(f"‚ùå –ó–∞–ø–∏—Å–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {TARGET_OPERATOR} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {source_endpoint}")
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø–∏—Å–µ–π: {e}", "ERROR")

    def analyze_found_records(self, records):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            self.log("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ê–ô–î–ï–ù–ù–´–• –ó–ê–ü–ò–°–ï–ô:")
            
            for i, record_data in enumerate(records, 1):
                record = record_data["record"]
                found_fields = record_data["found_fields"]
                source = record_data["source"]
                
                self.log(f"\nüìã –ó–ê–ü–ò–°–¨ #{i} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source}):")
                self.log(f"   –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {record.get('cargo_number', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                self.log(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {', '.join(found_fields)}")
                self.log(f"   warehouse_id: {record.get('warehouse_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã cargo_items
                if "cargo_items" in record:
                    self.log(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cargo_items: {len(record['cargo_items'])}")
                    
                    total_individual_items = 0
                    placed_individual_items = 0
                    
                    for j, cargo_item in enumerate(record["cargo_items"], 1):
                        self.log(f"      Cargo Item #{j}: {cargo_item.get('cargo_name', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                        
                        if "individual_items" in cargo_item:
                            individual_items = cargo_item["individual_items"]
                            total_individual_items += len(individual_items)
                            
                            placed_count = sum(1 for item in individual_items if item.get("is_placed", False))
                            placed_individual_items += placed_count
                            
                            self.log(f"         Individual items: {len(individual_items)} (—Ä–∞–∑–º–µ—â–µ–Ω–æ: {placed_count})")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_items
                            if individual_items:
                                sample_item = individual_items[0]
                                self.log(f"         –°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual_item: {list(sample_item.keys())}")
                                
                                if "is_placed" in sample_item:
                                    self.test_results["individual_items_structure"] = True
                        else:
                            self.log(f"         ‚ùå individual_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                    
                    self.log(f"   üìä –ò–¢–û–ì–û: {total_individual_items} –µ–¥–∏–Ω–∏—Ü, —Ä–∞–∑–º–µ—â–µ–Ω–æ: {placed_individual_items}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º warehouse_id
                    warehouse_id = record.get("warehouse_id")
                    if warehouse_id:
                        self.log(f"   üè¢ warehouse_id: {warehouse_id}")
                        self.test_results["warehouse_id_check"] = True
                    else:
                        self.log(f"   ‚ùå warehouse_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                else:
                    self.log(f"   ‚ùå cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                    
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}", "ERROR")

    def diagnose_layout_with_cargo_api(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API layout-with-cargo"""
        try:
            self.log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API layout-with-cargo...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            warehouses_response = self.session.get(f"{API_BASE}/operator/warehouses")
            if warehouses_response.status_code != 200:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {warehouses_response.status_code}")
                return
            
            warehouses = warehouses_response.json()
            if not warehouses:
                self.log("‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                return
            
            warehouse = warehouses[0]
            warehouse_id = warehouse["id"]
            self.log(f"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–ª–∞–¥: {warehouse['name']} (ID: {warehouse_id})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API layout-with-cargo
            layout_response = self.session.get(f"{API_BASE}/warehouses/{warehouse_id}/layout-with-cargo")
            
            if layout_response.status_code == 200:
                layout_data = layout_response.json()
                self.log(f"‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º cargo_info
                if "cargo_info" in layout_data:
                    cargo_info = layout_data["cargo_info"]
                    self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü –≤ cargo_info: {len(cargo_info)}")
                    
                    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
                    usr648425_units = []
                    for unit in cargo_info:
                        placed_by = unit.get("placed_by", "")
                        if TARGET_OPERATOR in placed_by or TARGET_OPERATOR_NAME.lower() in placed_by.lower():
                            usr648425_units.append(unit)
                    
                    if usr648425_units:
                        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(usr648425_units)} –µ–¥–∏–Ω–∏—Ü –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}")
                        self.test_results["api_layout_diagnosis"] = True
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                        for unit in usr648425_units[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            self.log(f"   üì¶ {unit.get('cargo_number', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {unit.get('cargo_name', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                            self.log(f"      –†–∞–∑–º–µ—â–µ–Ω: {unit.get('placed_by', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            self.log(f"      –Ø—á–µ–π–∫–∞: {unit.get('cell_location', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    else:
                        self.log(f"‚ùå –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR} –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ cargo_info")
                        self.log("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        self.log("   1. –î–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ operator_cargo, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è API")
                        self.log("   2. warehouse_id –≤ operator_cargo –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∫–ª–∞–¥—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                        self.log("   3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual_items –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
                        self.log("   4. –§–∏–ª—å—Ç—Ä –ø–æ is_placed –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                        self.additional_diagnosis(warehouse_id)
                else:
                    self.log("‚ùå cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API")
            else:
                self.log(f"‚ùå API layout-with-cargo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {layout_response.status_code}")
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ API: {e}", "ERROR")

    def additional_diagnosis(self, warehouse_id):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            self.log("üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ operator_cargo —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º warehouse_id
            if self.found_records:
                self.log(f"üìã –ê–Ω–∞–ª–∏–∑ warehouse_id –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö:")
                
                for record_data in self.found_records:
                    record = record_data["record"]
                    record_warehouse_id = record.get("warehouse_id")
                    cargo_number = record.get("cargo_number", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    self.log(f"   –ó–∞—è–≤–∫–∞ {cargo_number}: warehouse_id = {record_warehouse_id}")
                    
                    if record_warehouse_id == warehouse_id:
                        self.log(f"   ‚úÖ warehouse_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–∫–ª–∞–¥–æ–º")
                    elif record_warehouse_id is None:
                        self.log(f"   ‚ùå warehouse_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (None)")
                    else:
                        self.log(f"   ‚ùå warehouse_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {warehouse_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º placement_records
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records...")
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ placement_records —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ API
                placement_endpoints = [
                    f"/warehouses/{warehouse_id}/placement-records",
                    f"/operator/placement-records",
                    f"/debug/placement-records"
                ]
                
                for endpoint in placement_endpoints:
                    try:
                        response = self.session.get(f"{API_BASE}{endpoint}")
                        if response.status_code == 200:
                            data = response.json()
                            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã placement_records —á–µ—Ä–µ–∑ {endpoint}")
                            
                            if isinstance(data, list):
                                usr_records = [r for r in data if TARGET_OPERATOR in str(r.get("placed_by", ""))]
                                self.log(f"üìä –ó–∞–ø–∏—Å–∏ –æ—Ç {TARGET_OPERATOR}: {len(usr_records)}")
                            break
                    except:
                        continue
            except:
                self.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å placement_records")
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}", "ERROR")

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–¢–õ–ê–î–ö–ò operator_cargo –¥–ª—è USR648425")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ debug API
        debug_data = self.check_debug_api()
        
        # 3. –ü–æ–∏—Å–∫ operator_cargo
        self.search_operator_cargo_direct()
        
        # 4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ layout-with-cargo API
        self.diagnose_layout_with_cargo_api()
        
        # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        return True

    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 80)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –û–¢–õ–ê–î–ö–ò")
        self.log("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
        passed_tests = sum(1 for result in self.test_results.values() if result)
        total_tests = len(self.test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        self.log(f"üìà SUCCESS RATE: {success_rate:.1f}% ({passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in self.test_results.items():
            status = "‚úÖ" if result else "‚ùå"
            self.log(f"   {status} {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ù–ï –ü–†–û–ô–î–ï–ù'}")
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if self.found_records:
            self.log(f"\nüìã –ù–ê–ô–î–ï–ù–û –ó–ê–ü–ò–°–ï–ô –° –û–ü–ï–†–ê–¢–û–†–û–ú {TARGET_OPERATOR}: {len(self.found_records)}")
            
            target_app_found = any(
                TARGET_APPLICATION in record_data["record"].get("cargo_number", "")
                for record_data in self.found_records
            )
            
            if target_app_found:
                self.log(f"üéØ –¶–ï–õ–ï–í–ê–Ø –ó–ê–Ø–í–ö–ê {TARGET_APPLICATION} –ù–ê–ô–î–ï–ù–ê!")
            else:
                self.log(f"‚ùå –¶–ï–õ–ï–í–ê–Ø –ó–ê–Ø–í–ö–ê {TARGET_APPLICATION} –ù–ï –ù–ê–ô–î–ï–ù–ê")
        else:
            self.log(f"\n‚ùå –ó–ê–ü–ò–°–ò –° –û–ü–ï–†–ê–¢–û–†–û–ú {TARGET_OPERATOR} –ù–ï –ù–ê–ô–î–ï–ù–´")
        
        # –î–∏–∞–≥–Ω–æ–∑ –ø—Ä–æ–±–ª–µ–º—ã
        self.log("\nüîç –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´:")
        
        if not self.test_results["operator_cargo_found"]:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ operator_cargo")
            self.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏—é")
            self.log("   2. –ü–æ–ª—è operator_name/placed_by —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            self.log("   3. API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ operator_cargo –¥–∞–Ω–Ω—ã–º")
        elif not self.test_results["target_application_found"]:
            self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ 25082298 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –∑–∞–ø–∏—Å–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            self.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. –ó–∞—è–≤–∫–∞ –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä")
            self.log("   2. –ó–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É USR648425")
        elif not self.test_results["individual_items_structure"]:
            self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual_items –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            self.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. individual_items –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ is_placed")
            self.log("   2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
        elif not self.test_results["warehouse_id_check"]:
            self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: warehouse_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø–∏—Å—è—Ö")
            self.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. warehouse_id –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
            self.log("   2. –ó–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è warehouse_id")
        elif not self.test_results["api_layout_diagnosis"]:
            self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: API layout-with-cargo –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ operator_cargo")
            self.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. API –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –≤ placement_records, –∏–≥–Ω–æ—Ä–∏—Ä—É—è operator_cargo")
            self.log("   2. –§–∏–ª—å—Ç—Ä –ø–æ warehouse_id –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å operator_cargo")
            self.log("   3. –õ–æ–≥–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        else:
            self.log("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´: –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not self.test_results["operator_cargo_found"]:
            self.log("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo")
            self.log("2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª—è operator_name/placed_by —Å–æ–¥–µ—Ä–∂–∞—Ç 'USR648425' –∏–ª–∏ '–Æ–ª–¥–∞—à–µ–≤'")
            self.log("3. –°–æ–∑–¥–∞—Ç—å debug endpoint –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ operator_cargo")
        else:
            self.log("1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ API layout-with-cargo")
            self.log("2. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ placement_records –∏ operator_cargo")
            self.log("3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ warehouse_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏")
            self.log("4. –°–æ–∑–¥–∞—Ç—å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ placement_records –∏–∑ operator_cargo –¥–∞–Ω–Ω—ã—Ö")
        
        self.log("\n" + "=" * 80)
        self.log("üèÅ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        self.log("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = OperatorCargoDebugTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return 0
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())