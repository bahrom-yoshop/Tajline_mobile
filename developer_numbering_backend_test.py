#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND API –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ù–£–ú–ï–†–ê–¶–ò–ò –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (DevBadge, DevControl –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã).
–ò–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ frontend (–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã React).
–ù—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ backend API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –Ω–∞—à–∏ frontend –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å.

–ö–õ–Æ–ß–ï–í–´–ï –û–ë–õ–ê–°–¢–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è API** - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å login endpoint
2. **–ë–∞–∑–æ–≤—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏** - –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –¥–ª—è –≥—Ä—É–∑–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
3. **–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤** - endpoints –¥–ª—è placement operations
4. **QR –æ–ø–µ—Ä–∞—Ü–∏–∏** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ QR –∫–æ–¥–æ–≤

ENDPOINTS –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
- POST /api/auth/login - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- GET /api/operator/cargo/available-for-placement - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è  
- POST /api/operator/cargo/place-individual-unit - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞
- GET /api/operator/cargo/placement-progress - –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- GET /api/operator/qr/generate-individual - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- –í—Å–µ API endpoints –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ù–∏–∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–∞ backend
- –°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –±–µ–∑ –ø—Ä–æ–±–ª–µ–º
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class DeveloperNumberingBackendTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def test_authentication_api(self):
        """1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø API - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å login endpoint"""
        print("üîê –¢–ï–°–¢ 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø API")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                if self.auth_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.auth_token}"
                    })
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                    if user_response.status_code == 200:
                        self.operator_user = user_response.json()
                        self.log_test(
                            "POST /api/auth/login - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                            True,
                            f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                        )
                        return True
                    else:
                        self.log_test("GET /api/auth/me", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
                        return False
                else:
                    self.log_test("POST /api/auth/login", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                    return False
            else:
                self.log_test("POST /api/auth/login", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("POST /api/auth/login", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_basic_crud_operations(self):
        """2. –ë–ê–ó–û–í–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò - –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –¥–ª—è –≥—Ä—É–∑–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("üéØ –¢–ï–°–¢ 2: –ë–ê–ó–û–í–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò")
        
        success_count = 0
        total_tests = 0
        
        # –¢–µ—Å—Ç 2.1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            total_tests += 1
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "GET /api/operator/warehouses",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥ '{warehouse.get('name')}' (ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)"
                    )
                    success_count += 1
                else:
                    self.log_test("GET /api/operator/warehouses", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
            else:
                self.log_test("GET /api/operator/warehouses", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            self.log_test("GET /api/operator/warehouses", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 2.2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å–∫–ª–∞–¥–æ–≤
        try:
            total_tests += 1
            response = self.session.get(f"{API_BASE}/warehouses/all-cities", timeout=30)
            
            if response.status_code == 200:
                cities = response.json()
                self.log_test(
                    "GET /api/warehouses/all-cities",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤ —Å–∫–ª–∞–¥–æ–≤"
                )
                success_count += 1
            else:
                self.log_test("GET /api/warehouses/all-cities", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            self.log_test("GET /api/warehouses/all-cities", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 2.3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            total_tests += 1
            response = self.session.get(f"{API_BASE}/operator/dashboard/analytics", timeout=30)
            
            if response.status_code == 200:
                analytics = response.json()
                self.log_test(
                    "GET /api/operator/dashboard/analytics",
                    True,
                    f"–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º frontend"
                )
                success_count += 1
            else:
                self.log_test("GET /api/operator/dashboard/analytics", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            self.log_test("GET /api/operator/dashboard/analytics", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        success_rate = (success_count / total_tests) * 100 if total_tests > 0 else 0
        return success_rate >= 90  # –û–∂–∏–¥–∞–µ–º 90% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    
    def test_cargo_placement_system(self):
        """3. –°–ò–°–¢–ï–ú–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í - endpoints –¥–ª—è placement operations"""
        print("üéØ –¢–ï–°–¢ 3: –°–ò–°–¢–ï–ú–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í")
        
        success_count = 0
        total_tests = 0
        
        # –¢–µ—Å—Ç 3.1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        try:
            total_tests += 1
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                self.log_test(
                    "GET /api/operator/cargo/available-for-placement",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, endpoint —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                )
                success_count += 1
            else:
                self.log_test("GET /api/operator/cargo/available-for-placement", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            self.log_test("GET /api/operator/cargo/available-for-placement", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 3.2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        try:
            total_tests += 1
            response = self.session.get(f"{API_BASE}/operator/cargo/placement-progress", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                required_fields = ["total_units", "placed_units", "pending_units", "progress_percentage", "progress_text"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    total_units = data.get("total_units", 0)
                    placed_units = data.get("placed_units", 0)
                    pending_units = data.get("pending_units", 0)
                    progress_percentage = data.get("progress_percentage", 0)
                    progress_text = data.get("progress_text", "")
                    
                    self.log_test(
                        "GET /api/operator/cargo/placement-progress",
                        True,
                        f"Endpoint —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø–æ–ª–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π: total_units: {total_units}, placed_units: {placed_units}, pending_units: {pending_units}, progress_percentage: {progress_percentage}%, progress_text: '{progress_text}'"
                    )
                    success_count += 1
                else:
                    self.log_test("GET /api/operator/cargo/placement-progress", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            else:
                self.log_test("GET /api/operator/cargo/placement-progress", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            self.log_test("GET /api/operator/cargo/placement-progress", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 3.3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã)
        try:
            total_tests += 1
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ individual units
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code == 200:
                units_data = units_response.json()
                items = units_data.get("items", [])
                
                if items:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    first_group = items[0]
                    units = first_group.get("units", [])
                    
                    if units:
                        test_unit = units[0]
                        individual_number = test_unit.get("individual_number")
                        
                        if individual_number:
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                            placement_data = {
                                "individual_number": individual_number,
                                "block_number": 1,
                                "shelf_number": 1,
                                "cell_number": 1
                            }
                            
                            response = self.session.post(
                                f"{API_BASE}/operator/cargo/place-individual",
                                json=placement_data,
                                timeout=30
                            )
                            
                            if response.status_code == 200:
                                data = response.json()
                                enhanced_fields = ["cargo_name", "application_number", "placement_details", "application_progress"]
                                present_enhanced = [field for field in enhanced_fields if field in data]
                                
                                if len(present_enhanced) >= 2:
                                    details_info = []
                                    if "cargo_name" in data:
                                        details_info.append(f"cargo_name: '{data.get('cargo_name')}'")
                                    if "application_number" in data:
                                        details_info.append(f"application_number: '{data.get('application_number')}'")
                                    if "placement_details" in data:
                                        details_info.append(f"placement_details: {data.get('placement_details')}")
                                    if "application_progress" in data:
                                        details_info.append(f"application_progress: {data.get('application_progress')}")
                                    
                                    self.log_test(
                                        "POST /api/operator/cargo/place-individual",
                                        True,
                                        f"–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ –∏ –∑–∞—è–≤–∫–µ: {', '.join(details_info)}"
                                    )
                                    success_count += 1
                                else:
                                    self.log_test("POST /api/operator/cargo/place-individual", False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {present_enhanced}")
                            else:
                                self.log_test("POST /api/operator/cargo/place-individual", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        else:
                            self.log_test("POST /api/operator/cargo/place-individual", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç individual_number –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    else:
                        self.log_test("POST /api/operator/cargo/place-individual", False, "–ù–µ—Ç –µ–¥–∏–Ω–∏—Ü –≤ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                else:
                    self.log_test("POST /api/operator/cargo/place-individual", True, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                    success_count += 1
            else:
                self.log_test("POST /api/operator/cargo/place-individual", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual units: {units_response.status_code}")
                
        except Exception as e:
            self.log_test("POST /api/operator/cargo/place-individual", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        success_rate = (success_count / total_tests) * 100 if total_tests > 0 else 0
        return success_rate >= 75  # –û–∂–∏–¥–∞–µ–º 75% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    
    def test_qr_operations(self):
        """4. QR –û–ü–ï–†–ê–¶–ò–ò - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ QR –∫–æ–¥–æ–≤"""
        print("üéØ –¢–ï–°–¢ 4: QR –û–ü–ï–†–ê–¶–ò–ò")
        
        success_count = 0
        total_tests = 0
        
        # –¢–µ—Å—Ç 4.1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è individual unit
        try:
            total_tests += 1
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ individual units
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code == 200:
                units_data = units_response.json()
                items = units_data.get("items", [])
                
                if items:
                    first_group = items[0]
                    units = first_group.get("units", [])
                    
                    if units:
                        test_unit = units[0]
                        individual_number = test_unit.get("individual_number")
                        
                        if individual_number:
                            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–∞
                            response = self.session.post(
                                f"{API_BASE}/operator/qr/generate-individual",
                                json={"individual_number": individual_number},
                                timeout=30
                            )
                            
                            if response.status_code == 200:
                                data = response.json()
                                if "qr_code" in data and data["qr_code"].startswith("data:image/png;base64,"):
                                    self.log_test(
                                        "POST /api/operator/qr/generate-individual",
                                        True,
                                        f"QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {individual_number}, —Ñ–æ—Ä–º–∞—Ç base64 PNG –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
                                    )
                                    success_count += 1
                                else:
                                    self.log_test("POST /api/operator/qr/generate-individual", False, "QR –∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                            else:
                                self.log_test("POST /api/operator/qr/generate-individual", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        else:
                            self.log_test("POST /api/operator/qr/generate-individual", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç individual_number –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    else:
                        self.log_test("POST /api/operator/qr/generate-individual", True, "–ù–µ—Ç –µ–¥–∏–Ω–∏—Ü –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                        success_count += 1
                else:
                    self.log_test("POST /api/operator/qr/generate-individual", True, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                    success_count += 1
            else:
                self.log_test("POST /api/operator/qr/generate-individual", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual units: {units_response.status_code}")
                
        except Exception as e:
            self.log_test("POST /api/operator/qr/generate-individual", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 4.2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤
        try:
            total_tests += 1
            response = self.session.get(f"{API_BASE}/operator/qr/print-layout", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                if "layouts" in data and len(data["layouts"]) > 0:
                    layouts = data["layouts"]
                    self.log_test(
                        "GET /api/operator/qr/print-layout",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(layouts)} –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤"
                    )
                    success_count += 1
                else:
                    self.log_test("GET /api/operator/qr/print-layout", False, "–ú–∞–∫–µ—Ç—ã –ø–µ—á–∞—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                self.log_test("GET /api/operator/qr/print-layout", False, f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            self.log_test("GET /api/operator/qr/print-layout", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        # –¢–µ—Å—Ç 4.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫
        try:
            total_tests += 1
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫
            test_qr_codes = ["001-01-01-001", "–ë1-–ü1-–Ø1"]
            
            for qr_code in test_qr_codes:
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cell",
                    json={"qr_code": qr_code},
                    timeout=30
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç QR –∫–æ–¥—ã (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫)
                if response.status_code in [200, 400, 404]:
                    self.log_test(
                        "POST /api/operator/placement/verify-cell",
                        True,
                        f"QR –∫–æ–¥ '{qr_code}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω backend (—Å—Ç–∞—Ç—É—Å: {response.status_code})"
                    )
                    success_count += 1
                    break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
                    
        except Exception as e:
            self.log_test("POST /api/operator/placement/verify-cell", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        success_rate = (success_count / total_tests) * 100 if total_tests > 0 else 0
        return success_rate >= 70  # –û–∂–∏–¥–∞–µ–º 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è QR –æ–ø–µ—Ä–∞—Ü–∏–π
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ backend API –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND API –ü–û–°–õ–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ù–£–ú–ï–†–ê–¶–ò–ò –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê")
        print("=" * 80)
        print("–ö–û–ù–¢–ï–ö–°–¢: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ frontend –∏–∑–º–µ–Ω–µ–Ω–∏—è (DevBadge, DevControl) –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend")
        print("=" * 80)
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append(("1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è API", self.test_authentication_api()))
        test_results.append(("2. –ë–∞–∑–æ–≤—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏", self.test_basic_crud_operations()))
        test_results.append(("3. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤", self.test_cargo_placement_system()))
        test_results.append(("4. QR –æ–ø–µ—Ä–∞—Ü–∏–∏", self.test_qr_operations()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø BACKEND API:")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ü–†–û–ë–õ–ï–ú–´"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} –æ–±–ª–∞—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï BACKEND API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ –ø–æ–≤–ª–∏—è–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å")
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        elif success_rate >= 75:
            print("üéØ BACKEND API –í –û–°–ù–û–í–ù–û–ú –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í BACKEND API!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        
        return success_rate >= 75  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 75% –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = DeveloperNumberingBackendTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND API –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ –ø–æ–≤–ª–∏—è–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É backend")
        return 0
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´ –í BACKEND API!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏")
        return 1

if __name__ == "__main__":
    exit(main())