#!/usr/bin/env python3
"""
TAJLINE.TJ Improved Pickup Request Modal Testing
Testing the improved pickup request processing modal functionality according to review request

–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–Ø–í–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–π endpoint GET /api/operator/pickup-requests/{request_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏
3. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ –∫—É—Ä—å–µ—Ä–∞ (+992936999880/baha3337):
   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞
   - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –≥—Ä—É–∑–∞
   - –°—Ç–∞—Ç—É—Å: "picked_up" –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞
5. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –∏–ª–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—å–µ—Ä–µ –∏ –¥–∞—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏
   - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å) - –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–æ–º
   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –≤–µ—Å, —Å—Ç–æ–∏–º–æ—Å—Ç—å)
   - –°–µ–∫—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–ª–∞—Ç—ã
   - –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
- Endpoint /api/operator/pickup-requests/{request_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞—è–≤–∫–∏
- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
- –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–ª–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
"""

import requests
import json
import sys
import os
from datetime import datetime, timedelta

class ImprovedPickupModalTester:
    def __init__(self, base_url="https://tajline-cargo-6.preview.emergentagent.com"):
        self.base_url = base_url
        self.session = requests.Session()
        self.tests_run = 0
        self.tests_passed = 0
        self.pickup_request_id = None
        self.operator_token = None
        self.courier_token = None
        self.notification_id = None
        
        print(f"üéØ TAJLINE.TJ Improved Pickup Request Modal Testing")
        print(f"üì° Base URL: {self.base_url}")
        print("="*80)
        
    def run_test(self, test_name, method, endpoint, expected_status, data=None, token=None):
        """Run a single test"""
        self.tests_run += 1
        
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'
        
        try:
            if method == 'GET':
                response = self.session.get(url, headers=headers, timeout=30)
            elif method == 'POST':
                response = self.session.post(url, json=data, headers=headers, timeout=30)
            elif method == 'PUT':
                response = self.session.put(url, json=data, headers=headers, timeout=30)
            elif method == 'DELETE':
                response = self.session.delete(url, headers=headers, timeout=30)
            else:
                raise ValueError(f"Unsupported method: {method}")
            
            print(f"\nüîç Test {self.tests_run}: {test_name}")
            print(f"   {method} {endpoint}")
            
            if response.status_code == expected_status:
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                self.tests_passed += 1
                
                try:
                    response_data = response.json()
                    return True, response_data
                except:
                    return True, response.text
            else:
                print(f"   ‚ùå FAILED - Expected: {expected_status}, Got: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   üìÑ Error: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                    return False, error_data
                except:
                    print(f"   üìÑ Error: {response.text}")
                    return False, response.text
                    
        except Exception as e:
            print(f"   ‚ùå EXCEPTION: {str(e)}")
            return False, str(e)

    def test_operator_authentication(self):
        """Test 1: Operator Authentication (+79777888999/warehouse123)"""
        print("\n" + "="*80)
        print("üè¢ –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)")
        print("="*80)
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Operator Authentication",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        
        if success and 'access_token' in login_response:
            self.operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            
            print(f"   ‚úÖ Operator authenticated: {operator_user.get('full_name')}")
            print(f"   üëë Role: {operator_user.get('role')}")
            print(f"   üìû Phone: {operator_user.get('phone')}")
            print(f"   üÜî User Number: {operator_user.get('user_number')}")
            return True
        else:
            print("   ‚ùå Operator authentication failed")
            return False

    def test_courier_authentication(self):
        """Test 2: Courier Authentication (+992936999880/baha3337)"""
        print("\n" + "="*80)
        print("üöö –≠–¢–ê–ü 2: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê (+992936999880/baha3337)")
        print("="*80)
        
        courier_login_data = {
            "phone": "+992936999880",
            "password": "baha3337"
        }
        
        success, login_response = self.run_test(
            "Courier Authentication",
            "POST",
            "/api/auth/login",
            200,
            courier_login_data
        )
        
        if success and 'access_token' in login_response:
            self.courier_token = login_response['access_token']
            courier_user = login_response.get('user', {})
            
            print(f"   ‚úÖ Courier authenticated: {courier_user.get('full_name')}")
            print(f"   üëë Role: {courier_user.get('role')}")
            print(f"   üìû Phone: {courier_user.get('phone')}")
            print(f"   üÜî User Number: {courier_user.get('user_number')}")
            return True
        else:
            print("   ‚ùå Courier authentication failed")
            return False

    def test_create_pickup_request(self):
        """Test 3: Create pickup request with full recipient and cargo data (by operator)"""
        print("\n" + "="*80)
        print("üì¶ –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –û–ü–ï–†–ê–¢–û–†–û–ú –° –ü–û–õ–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
        print("="*80)
        
        if not self.operator_token:
            print("   ‚ùå Operator token not available")
            return False
            
        pickup_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–µ –û–∫–Ω–æ",
            "sender_phone": "+992987654321",
            "pickup_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –ú–æ–¥–∞–ª—å–Ω–∞—è, 123",
            "pickup_date": (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d"),
            "pickup_time_from": "10:00",
            "pickup_time_to": "12:00",
            "route": "tajikistan_to_moscow",
            "courier_fee": 750.0,
            "destination": "–ú–æ—Å–∫–≤–∞, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è –ú–æ–¥–∞–ª—å–Ω–∞—è, 456",
            "payment_method": "cash"
        }
        
        success, response = self.run_test(
            "Create pickup request with full data by operator",
            "POST",
            "/api/admin/courier/pickup-request",
            200,
            pickup_data,
            self.operator_token
        )
        
        if success and ("request_id" in response or "id" in response):
            self.pickup_request_id = response.get("request_id") or response.get("id")
            print(f"   üìã Pickup Request ID: {self.pickup_request_id}")
            print(f"   üìã Request Number: {response.get('request_number')}")
            
            # Verify response contains full data
            print("   üìã –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –û–¢–í–ï–¢–ï:")
            print(f"   üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {pickup_data['sender_full_name']}")
            print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {pickup_data['sender_phone']}")
            print(f"   üìç –ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞: {pickup_data['pickup_address']}")
            print(f"   üìç –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {pickup_data['destination']}")
            print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–∞: {pickup_data['courier_fee']} —Ä—É–±")
            
            return True
        else:
            print("   ‚ùå Failed to create pickup request")
            return False

    def test_courier_workflow(self):
        """Test 4: Complete courier workflow (accept, pickup, deliver to warehouse)"""
        print("\n" + "="*80)
        print("üîÑ –≠–¢–ê–ü 4: –ü–û–õ–ù–´–ô WORKFLOW –ö–£–†–¨–ï–†–ê (–ü–†–ò–ù–Ø–¢–ò–ï, –ó–ê–ë–û–†, –î–û–°–¢–ê–í–ö–ê –ù–ê –°–ö–õ–ê–î)")
        print("="*80)
        
        if not self.pickup_request_id or not self.courier_token:
            print("   ‚ùå Pickup request ID or courier token not available")
            return False
        
        # Step 1: Accept request
        success, response = self.run_test(
            "Courier accepts pickup request",
            "POST",
            f"/api/courier/pickup-requests/{self.pickup_request_id}/accept",
            200,
            {},
            self.courier_token
        )
        
        if not success:
            print("   ‚ùå Failed to accept pickup request")
            return False
        
        print("   ‚úÖ Step 1: Request accepted")
        
        # Step 2: Pickup cargo
        success, response = self.run_test(
            "Courier picks up cargo",
            "POST",
            f"/api/courier/pickup-requests/{self.pickup_request_id}/pickup",
            200,
            {},
            self.courier_token
        )
        
        if not success:
            print("   ‚ùå Failed to pickup cargo")
            return False
        
        print("   ‚úÖ Step 2: Cargo picked up")
        
        # Step 3: Deliver to warehouse
        success, response = self.run_test(
            "Courier delivers cargo to warehouse",
            "POST",
            f"/api/courier/pickup-requests/{self.pickup_request_id}/deliver-to-warehouse",
            200,
            {},
            self.courier_token
        )
        
        if not success:
            print("   ‚ùå Failed to deliver cargo to warehouse")
            return False
        
        print("   ‚úÖ Step 3: Cargo delivered to warehouse")
        print("   üéØ –°–¢–ê–¢–£–°: 'picked_up' –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return True

    def test_operator_notifications(self):
        """Test 5: Check operator notifications about cargo availability"""
        print("\n" + "="*80)
        print("üîî –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û–ü–ï–†–ê–¢–û–†–ê –û –î–û–°–¢–£–ü–ù–û–°–¢–ò –ì–†–£–ó–ê")
        print("="*80)
        
        if not self.operator_token:
            print("   ‚ùå Operator token not available")
            return False
        
        success, response = self.run_test(
            "Get operator warehouse notifications",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            None,
            self.operator_token
        )
        
        if success and "notifications" in response:
            notifications = response["notifications"]
            print(f"   üìã Found {len(notifications)} notifications")
            
            # Look for our pickup request notification
            for notification in notifications:
                if notification.get("status") == "pending_acceptance":
                    self.notification_id = notification.get("id")
                    print(f"   üéØ Found pending notification: {self.notification_id}")
                    print(f"   üìÑ Message: {notification.get('message', 'N/A')}")
                    print(f"   üìÖ Created: {notification.get('created_at', 'N/A')}")
                    return True
            
            print("   ‚ö†Ô∏è No pending notifications found")
            return True  # This might be expected depending on timing
        
        return success

    def test_new_pickup_request_endpoint(self):
        """Test 6: Test new endpoint GET /api/operator/pickup-requests/{request_id}"""
        print("\n" + "="*80)
        print("üîç –≠–¢–ê–ü 6: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û ENDPOINT –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–õ–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò –ó–ê–Ø–í–ö–ò")
        print("="*80)
        
        if not self.pickup_request_id or not self.operator_token:
            print("   ‚ùå Pickup request ID or operator token not available")
            return False
        
        success, response = self.run_test(
            "Get full pickup request information",
            "GET",
            f"/api/operator/pickup-requests/{self.pickup_request_id}",
            200,
            None,
            self.operator_token
        )
        
        if success:
            print("   üìã –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –û–¢–í–ï–¢–ê:")
            
            # Check courier information
            courier_info = response.get("courier_info", {})
            if courier_info:
                print(f"   üë§ –ö—É—Ä—å–µ—Ä: {courier_info.get('name', 'N/A')}")
                print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞: {courier_info.get('phone', 'N/A')}")
                print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—å–µ—Ä–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—å–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check delivery date
            delivery_date = response.get("delivery_date")
            if delivery_date:
                print(f"   üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}")
                print("   ‚úÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("   ‚ùå –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check recipient data (filled by courier)
            recipient_data = response.get("recipient_data", {})
            if recipient_data:
                print(f"   üìÆ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_data.get('full_name', 'N/A')}")
                print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_data.get('phone', 'N/A')}")
                print(f"   üìç –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_data.get('address', 'N/A')}")
                print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–æ–º) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                print("   ‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # Check cargo information
            cargo_info = response.get("cargo_info", {})
            if cargo_info:
                print(f"   üì¶ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞: {cargo_info.get('name', 'N/A')}")
                print(f"   ‚öñÔ∏è –í–µ—Å: {cargo_info.get('weight', 'N/A')} –∫–≥")
                print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cargo_info.get('cost', 'N/A')} —Ä—É–±")
                print("   ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("   ‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check payment section
            payment_section = response.get("payment_section", {})
            if payment_section:
                print(f"   üí≥ –°–µ–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–ª–∞—Ç—ã: {payment_section}")
                print("   ‚úÖ –°–µ–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("   ‚ùå –°–µ–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # Check QR and label buttons data
            qr_buttons = response.get("qr_buttons", [])
            label_buttons = response.get("label_buttons", [])
            
            if qr_buttons or label_buttons:
                print(f"   üñ®Ô∏è QR –∫–Ω–æ–ø–∫–∏: {len(qr_buttons)}")
                print(f"   üè∑Ô∏è –ö–Ω–æ–ø–∫–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫: {len(label_buttons)}")
                print("   ‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                print("   ‚ùå –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            return True
        
        return False

    def test_modal_accept_continue_buttons(self):
        """Test 7: Test modal Accept and Continue processing buttons"""
        print("\n" + "="*80)
        print("üñ•Ô∏è –≠–¢–ê–ü 7: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ù–û–ü–û–ö '–ü–†–ò–ù–Ø–¢–¨' –ò '–ü–†–û–î–û–õ–ñ–ò–¢–¨ –û–§–û–†–ú–õ–ï–ù–ò–ï'")
        print("="*80)
        
        if not self.operator_token:
            print("   ‚ùå Operator token not available")
            return False
        
        # First, get notifications to find one to test
        success, response = self.run_test(
            "Get warehouse notifications for modal test",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            None,
            self.operator_token
        )
        
        if success and "notifications" in response:
            notifications = response["notifications"]
            
            # Find a pending notification to test
            for notification in notifications:
                if notification.get("status") == "pending_acceptance":
                    notification_id = notification.get("id")
                    
                    # Test Accept button
                    accept_success, accept_response = self.run_test(
                        "Test Accept button functionality",
                        "POST",
                        f"/api/operator/warehouse-notifications/{notification_id}/accept",
                        200,
                        {},
                        self.operator_token
                    )
                    
                    if accept_success:
                        print("   ‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–∏–Ω—è—Ç—å' —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        
                        # Test Continue processing button
                        continue_data = {
                            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–µ",
                            "cargo_items": [
                                {
                                    "name": "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≥—Ä—É–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                                    "weight": "25.5",
                                    "price": "3500"
                                }
                            ],
                            "payment_method": "cash",
                            "delivery_method": "pickup"
                        }
                        
                        continue_success, continue_response = self.run_test(
                            "Test Continue processing functionality",
                            "POST",
                            f"/api/operator/warehouse-notifications/{notification_id}/complete",
                            200,
                            continue_data,
                            self.operator_token
                        )
                        
                        if continue_success:
                            print("   ‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ' —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            return True
                        else:
                            print("   ‚ùå –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ' –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print("   ‚ùå –ö–Ω–æ–ø–∫–∞ '–ü—Ä–∏–Ω—è—Ç—å' –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    break
            else:
                print("   ‚ö†Ô∏è No pending notifications found for testing")
                return True  # Not necessarily a failure
        
        return False

    def test_qr_and_label_printing(self):
        """Test 8: Test QR code and label printing functionality"""
        print("\n" + "="*80)
        print("üñ®Ô∏è –≠–¢–ê–ü 8: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–ß–ê–¢–ò QR –ö–û–î–û–í –ò –≠–¢–ò–ö–ï–¢–û–ö –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ì–†–£–ó–ê")
        print("="*80)
        
        if not self.operator_token:
            print("   ‚ùå Operator token not available")
            return False
        
        # Get available cargo for placement to test QR/label functionality
        success, response = self.run_test(
            "Get cargo available for placement",
            "GET",
            "/api/operator/cargo/available-for-placement",
            200,
            None,
            self.operator_token
        )
        
        if success and "items" in response:
            items = response["items"]
            if items:
                cargo = items[0]
                cargo_id = cargo.get("id")
                cargo_number = cargo.get("cargo_number")
                
                print(f"   üì¶ Testing with cargo: {cargo_number}")
                
                if cargo_id:
                    # Test QR code generation
                    qr_success, qr_response = self.run_test(
                        "Test QR code generation for cargo",
                        "GET",
                        f"/api/cargo/{cargo_id}/qr-code",
                        200,
                        None,
                        self.operator_token
                    )
                    
                    if qr_success:
                        print("   ‚úÖ QR –∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –≥—Ä—É–∑–∞")
                    else:
                        print("   ‚ùå QR –∫–æ–¥ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –≥—Ä—É–∑–∞")
                    
                    # Test label printing
                    label_success, label_response = self.run_test(
                        "Test label printing for cargo",
                        "GET",
                        f"/api/cargo/{cargo_id}/print-label",
                        200,
                        None,
                        self.operator_token
                    )
                    
                    if label_success:
                        print("   ‚úÖ –≠—Ç–∏–∫–µ—Ç–∫–∞ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –¥–ª—è –≥—Ä—É–∑–∞")
                        return True
                    else:
                        print("   ‚ùå –≠—Ç–∏–∫–µ—Ç–∫–∞ –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è –¥–ª—è –≥—Ä—É–∑–∞")
                        return qr_success  # At least QR works
                else:
                    print("   ‚ùå No cargo ID available for testing")
            else:
                print("   ‚ö†Ô∏è No cargo available for placement testing")
        
        return False

    def run_comprehensive_test(self):
        """Run all improved pickup modal tests"""
        print("üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–Ø–í–ö–ò")
        print("="*80)
        
        test_results = []
        
        # Run all tests in sequence
        tests = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", self.test_operator_authentication),
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞", self.test_courier_authentication),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞", self.test_create_pickup_request),
            ("Workflow –∫—É—Ä—å–µ—Ä–∞", self.test_courier_workflow),
            ("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", self.test_operator_notifications),
            ("–ù–æ–≤—ã–π endpoint –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", self.test_new_pickup_request_endpoint),
            ("–ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞", self.test_modal_accept_continue_buttons),
            ("–ü–µ—á–∞—Ç—å QR –∫–æ–¥–æ–≤ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫", self.test_qr_and_label_printing)
        ]
        
        for test_name, test_func in tests:
            try:
                result = test_func()
                test_results.append((test_name, result))
                if result:
                    print(f"   ‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
                else:
                    print(f"   ‚ùå {test_name}: –ù–ï–£–î–ê–ß–ù–û")
            except Exception as e:
                print(f"   ‚ùå {test_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
                test_results.append((test_name, False))
        
        # Final summary
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê")
        print("="*80)
        
        successful_tests = sum(1 for _, result in test_results if result)
        total_tests = len(test_results)
        
        print(f"üîç –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        print(f"üîç –í—Å–µ–≥–æ API —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö API —Ç–µ—Å—Ç–æ–≤: {self.tests_passed}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö API —Ç–µ—Å—Ç–æ–≤: {self.tests_run - self.tests_passed}")
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        api_success_rate = (self.tests_passed / self.tests_run * 100) if self.tests_run > 0 else 0
        
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —ç—Ç–∞–ø–æ–≤: {success_rate:.1f}%")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ API —Ç–µ—Å—Ç–æ–≤: {api_success_rate:.1f}%")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for test_name, result in test_results:
            status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –ù–ï–£–î–ê–ß–ù–û"
            print(f"   {status}: {test_name}")
        
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        critical_checks = [
            ("Endpoint /api/operator/pickup-requests/{request_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", 
             test_results[5][1] if len(test_results) > 5 else False),
            ("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞", 
             test_results[5][1] if len(test_results) > 5 else False),
            ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ", 
             test_results[5][1] if len(test_results) > 5 else False),
            ("–ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –æ–ø–ª–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã", 
             test_results[6][1] if len(test_results) > 6 else False),
            ("–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ –∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç", 
             test_results[7][1] if len(test_results) > 7 else False)
        ]
        
        for check_name, check_result in critical_checks:
            status = "‚úÖ" if check_result else "‚ùå"
            print(f"   {status} {check_name}")
        
        overall_success = success_rate >= 75 and api_success_rate >= 80
        
        if overall_success:
            print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif success_rate >= 50:
            print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("üîç –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        
        return overall_success

if __name__ == "__main__":
    # Get the backend URL from environment variable or use default
    backend_url = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-6.preview.emergentagent.com')
    
    # Initialize tester with the correct URL
    tester = ImprovedPickupModalTester(base_url=backend_url)
    
    # Run comprehensive test
    result = tester.run_comprehensive_test()
    
    if result:
        print("\nüéâ –£–õ–£–ß–®–ï–ù–ù–û–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–Ø–í–ö–ò –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï –ü–†–ò–ù–Ø–¢–ò–Ø –ó–ê–Ø–í–ö–ò")
        sys.exit(1)