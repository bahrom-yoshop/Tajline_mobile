#!/usr/bin/env python3
"""
–ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û API placement-status
======================================================

–¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∑–∞—è–≤–∫–∏:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å delivery_city, pickup_city - –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ (–Ω–µ "–ù–µ —É–∫–∞–∑–∞–Ω")
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å source_warehouse_name, accepting_warehouse - –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å target_warehouse_name, delivery_warehouse - –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤—ã–¥–∞—á–∏
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å operator_full_name, operator_phone - –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
3. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º–∏–Ω–∏–º—É–º 75% –ø–æ–ª–µ–π —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–µ "–ù–µ —É–∫–∞–∑–∞–Ω")

–£–õ–£–ß–®–ï–ù–ò–Ø:
- –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –∞–¥—Ä–µ—Å–æ–≤ sender_address –∏ recipient_address
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è operator_full_name
- Fallback –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ú–æ—Å–∫–≤–∞ (–ø—Ä–∏—ë–º), –î—É—à–∞–Ω–±–µ (–≤—ã–¥–∞—á–∞)
- Lookup –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π users –∏ warehouses

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class PlacementStatusAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "applications_found": False,
            "api_accessible": False,
            "data_quality_good": False,
            "quality_percentage": 0.0,
            "detailed_results": {}
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_available_applications(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data if isinstance(data, list) else data.get("items", [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                self.test_results["applications_found"] = len(items) > 0
                return items
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} - {response.text}", "ERROR")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}", "ERROR")
            return []
    
    def test_placement_status_api(self, cargo_id, cargo_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/{cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API placement-status –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ ({len(data)} –ø–æ–ª–µ–π)")
                self.test_results["api_accessible"] = True
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-status: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}", "ERROR")
            return None
    
    def analyze_data_quality(self, placement_data, cargo_number):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API"""
        self.log(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –î–õ–Ø –ó–ê–Ø–í–ö–ò {cargo_number}:")
        self.log("=" * 60)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        critical_fields = {
            "delivery_city": "–ì–æ—Ä–æ–¥ –≤—ã–¥–∞—á–∏",
            "pickup_city": "–ì–æ—Ä–æ–¥ –ø—Ä–∏—ë–º–∞", 
            "source_warehouse_name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏—ë–º–∞",
            "accepting_warehouse": "–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å–∫–ª–∞–¥",
            "target_warehouse_name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞",
            "delivery_warehouse": "–°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏",
            "operator_full_name": "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            "operator_phone": "–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
        }
        
        quality_results = {}
        good_fields = 0
        total_fields = len(critical_fields)
        
        self.log("üìä –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô:")
        
        for field, description in critical_fields.items():
            value = placement_data.get(field, "")
            is_good = value and value != "–ù–µ —É–∫–∞–∑–∞–Ω" and value != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and value != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä"
            
            if is_good:
                good_fields += 1
                status = "‚úÖ"
                quality_results[field] = {"value": value, "quality": "good"}
            else:
                status = "‚ö†Ô∏è"
                quality_results[field] = {"value": value, "quality": "poor"}
            
            self.log(f"  {status} {description}: '{value}'")
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_percentage = (good_fields / total_fields) * 100
        
        self.log(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –ö–ê–ß–ï–°–¢–í–ê:")
        self.log(f"  –•–æ—Ä–æ—à–∏–µ –ø–æ–ª—è: {good_fields}/{total_fields}")
        self.log(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {quality_percentage:.1f}%")
        self.log(f"  –¢—Ä–µ–±—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º: 75.0%")
        
        quality_good = quality_percentage >= 75.0
        
        if quality_good:
            self.log(f"  ‚úÖ –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú!")
        else:
            self.log(f"  ‚ùå –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û–ï!")
        
        return {
            "quality_percentage": quality_percentage,
            "good_fields": good_fields,
            "total_fields": total_fields,
            "quality_good": quality_good,
            "field_analysis": quality_results
        }
    
    def check_data_improvements(self, placement_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö"""
        self.log(f"\nüîß –ü–†–û–í–ï–†–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô –í –î–ê–ù–ù–´–•:")
        self.log("-" * 40)
        
        improvements_found = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –∞–¥—Ä–µ—Å–æ–≤
        sender_address = placement_data.get("sender_address", "")
        recipient_address = placement_data.get("recipient_address", "")
        pickup_city = placement_data.get("pickup_city", "")
        delivery_city = placement_data.get("delivery_city", "")
        
        if sender_address and pickup_city != "–ù–µ —É–∫–∞–∑–∞–Ω":
            improvements_found.append("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ—Ä–æ–¥–∞ –∏–∑ sender_address —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.log(f"  ‚úÖ –ì–æ—Ä–æ–¥ –ø—Ä–∏—ë–º–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–∑ –∞–¥—Ä–µ—Å–∞: '{pickup_city}' (–∏–∑ '{sender_address}')")
        
        if recipient_address and delivery_city != "–ù–µ —É–∫–∞–∑–∞–Ω":
            improvements_found.append("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ—Ä–æ–¥–∞ –∏–∑ recipient_address —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.log(f"  ‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏–∑ –∞–¥—Ä–µ—Å–∞: '{delivery_city}' (–∏–∑ '{recipient_address}')")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_full_name = placement_data.get("operator_full_name", "")
        operator_phone = placement_data.get("operator_phone", "")
        
        if operator_full_name and operator_full_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä":
            improvements_found.append("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log(f"  ‚úÖ –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: '{operator_full_name}'")
        
        if operator_phone and operator_phone != "–ù–µ —É–∫–∞–∑–∞–Ω":
            improvements_found.append("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω")
            self.log(f"  ‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω: '{operator_phone}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback –∑–Ω–∞—á–µ–Ω–∏–π
        if pickup_city == "–ú–æ—Å–∫–≤–∞" or delivery_city == "–î—É—à–∞–Ω–±–µ":
            improvements_found.append("‚úÖ Fallback –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è")
            self.log(f"  ‚úÖ Fallback –∑–Ω–∞—á–µ–Ω–∏—è: pickup_city='{pickup_city}', delivery_city='{delivery_city}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ lookup –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        source_warehouse = placement_data.get("source_warehouse_name", "")
        target_warehouse = placement_data.get("target_warehouse_name", "")
        
        if source_warehouse and source_warehouse != "–ù–µ —É–∫–∞–∑–∞–Ω":
            improvements_found.append("‚úÖ Lookup –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.log(f"  ‚úÖ –°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞ –Ω–∞–π–¥–µ–Ω: '{source_warehouse}'")
        
        if target_warehouse and target_warehouse != "–ù–µ —É–∫–∞–∑–∞–Ω":
            self.log(f"  ‚úÖ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω: '{target_warehouse}'")
        
        self.log(f"\nüìä –ù–ê–ô–î–ï–ù–û –£–õ–£–ß–®–ï–ù–ò–ô: {len(improvements_found)}")
        for improvement in improvements_found:
            self.log(f"  {improvement}")
        
        return improvements_found
    
    def generate_final_report(self, cargo_number, quality_analysis, improvements):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API placement-status:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û API placement-status")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º–∞—è –∑–∞—è–≤–∫–∞: {cargo_number}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['applications_found'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API placement-status: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  4. üéØ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö (‚â•75%): {'‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢' if self.test_results['data_quality_good'] else '‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
        if quality_analysis:
            self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•:")
            self.log(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {quality_analysis['quality_percentage']:.1f}%")
            self.log(f"  –•–æ—Ä–æ—à–∏–µ –ø–æ–ª—è: {quality_analysis['good_fields']}/{quality_analysis['total_fields']}")
            self.log(f"  –¢—Ä–µ–±—É–µ–º—ã–π –º–∏–Ω–∏–º—É–º: 75.0%")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª—è–º
            self.log(f"\nüìã –ê–ù–ê–õ–ò–ó –ü–û –ü–û–õ–Ø–ú:")
            for field, analysis in quality_analysis['field_analysis'].items():
                status = "‚úÖ" if analysis['quality'] == 'good' else "‚ö†Ô∏è"
                self.log(f"  {status} {field}: '{analysis['value']}'")
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        if improvements:
            self.log(f"\nüîß –ù–ê–ô–î–ï–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø ({len(improvements)} —à—Ç.):")
            for improvement in improvements:
                self.log(f"  {improvement}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if self.test_results["data_quality_good"]:
            self.log("‚úÖ API placement-status –í–û–ó–í–†–ê–©–ê–ï–¢ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï!")
            self.log("üéâ –£–ª—É—á—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (‚â•75%)")
            self.log("üéØ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        else:
            self.log("‚ùå –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• API placement-status –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û–ï!")
            self.log(f"üîç –¢–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {self.test_results['quality_percentage']:.1f}% (—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚â•75%)")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ lookup –ª–æ–≥–∏–∫–∏")
        
        return self.test_results["data_quality_good"]
    
    def run_placement_status_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API placement-status"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ü–û–í–¢–û–†–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û API placement-status")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        applications = self.get_available_applications()
        if not applications:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫", "ERROR")
            return False
        
        # 3. –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_application = applications[0]
        cargo_id = test_application.get("id")
        cargo_number = test_application.get("cargo_number")
        
        if not cargo_id or not cargo_number:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", "ERROR")
            return False
        
        self.log(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {cargo_number} (ID: {cargo_id})")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status
        placement_data = self.test_placement_status_api(cargo_id, cargo_number)
        if not placement_data:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: API placement-status –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # 5. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        quality_analysis = self.analyze_data_quality(placement_data, cargo_number)
        self.test_results["data_quality_good"] = quality_analysis["quality_good"]
        self.test_results["quality_percentage"] = quality_analysis["quality_percentage"]
        self.test_results["detailed_results"] = quality_analysis
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
        improvements = self.check_data_improvements(placement_data)
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report(cargo_number, quality_analysis, improvements)
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacementStatusAPITester()
    
    try:
        success = tester.run_placement_status_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API placement-status –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            print("üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (‚â•75%)")
            print("üéØ –£–ª—É—á—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API placement-status –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ lookup –ª–æ–≥–∏–∫–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()