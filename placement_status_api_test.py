#!/usr/bin/env python3
"""
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API placement-status –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê "–î–ï–¢–ê–õ–¨–ù–û–ï –†–ê–ó–ú–ï–©–ï–ù–ò–ï"
==============================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ, —Å–∫–ª–∞–¥–∞—Ö –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ 
–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∑–∞—è–≤–∫–∏:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è: delivery_city, pickup_city (–≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è: source_warehouse_name, accepting_warehouse (—Å–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è: target_warehouse_name, delivery_warehouse (—Å–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è: operator_full_name, operator_phone (–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—ë–º–∞)
3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç "–ù–µ —É–∫–∞–∑–∞–Ω" –≤–µ–∑–¥–µ, –∞ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω lookup –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π users –∏ warehouses
- –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –∏ —Å–∫–ª–∞–¥–∞—Ö
- –î–æ–±–∞–≤–ª–µ–Ω—ã fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ 
–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class PlacementStatusAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "available_applications_found": False,
            "placement_status_api_accessible": False,
            "required_fields_present": False,
            "data_quality_good": False,
            "total_tests_passed": 0,
            "total_tests_run": 0,
            "detailed_results": {}
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                self.test_results["total_tests_passed"] += 1
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
        finally:
            self.test_results["total_tests_run"] += 1
    
    def get_available_applications(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data if isinstance(data, list) else data.get("items", [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                if len(items) > 0:
                    self.test_results["available_applications_found"] = True
                    self.test_results["total_tests_passed"] += 1
                    return items
                else:
                    self.log("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "WARNING")
                    return []
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}", "ERROR")
            return None
        finally:
            self.test_results["total_tests_run"] += 1
    
    def test_placement_status_api(self, cargo_id, cargo_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number} (ID: {cargo_id})...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/{cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API placement-status –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}")
                self.test_results["placement_status_api_accessible"] = True
                self.test_results["total_tests_passed"] += 1
                
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-status: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ placement-status API: {e}", "ERROR")
            return None
        finally:
            self.test_results["total_tests_run"] += 1
    
    def validate_required_fields(self, placement_data, cargo_number):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        self.log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}...")
        
        # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        required_fields = {
            "delivery_city": "–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏",
            "pickup_city": "–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è", 
            "source_warehouse_name": "–°–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫",
            "accepting_warehouse": "–°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞",
            "target_warehouse_name": "–¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥",
            "delivery_warehouse": "–°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏",
            "operator_full_name": "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            "operator_phone": "–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
        }
        
        missing_fields = []
        present_fields = []
        
        for field, description in required_fields.items():
            if field in placement_data:
                present_fields.append(field)
                self.log(f"  ‚úÖ {description} ({field}): –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                missing_fields.append(field)
                self.log(f"  ‚ùå {description} ({field}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        fields_present = len(missing_fields) == 0
        if fields_present:
            self.log(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç ({len(present_fields)}/{len(required_fields)})")
            self.test_results["required_fields_present"] = True
            self.test_results["total_tests_passed"] += 1
        else:
            self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        
        self.test_results["total_tests_run"] += 1
        return fields_present, present_fields, missing_fields
    
    def validate_data_quality(self, placement_data, cargo_number):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–µ—Ç "–ù–µ —É–∫–∞–∑–∞–Ω" –≤–µ–∑–¥–µ"""
        self.log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}...")
        
        # –ü–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        quality_fields = {
            "delivery_city": "–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏",
            "pickup_city": "–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è",
            "source_warehouse_name": "–°–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫", 
            "accepting_warehouse": "–°–∫–ª–∞–¥ –ø—Ä–∏—ë–º–∞",
            "target_warehouse_name": "–¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥",
            "delivery_warehouse": "–°–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏",
            "operator_full_name": "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            "operator_phone": "–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
        }
        
        # –ó–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è "–ø–ª–æ—Ö–∏–º–∏" (–ø—É—Å—Ç—ã–º–∏/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏)
        bad_values = ["–ù–µ —É–∫–∞–∑–∞–Ω", "–Ω–µ —É–∫–∞–∑–∞–Ω", "–ù–ï –£–ö–ê–ó–ê–ù", "", None, "null", "undefined", "N/A", "n/a"]
        
        good_data_count = 0
        bad_data_count = 0
        field_analysis = {}
        
        for field, description in quality_fields.items():
            if field in placement_data:
                value = placement_data[field]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                if value in bad_values:
                    self.log(f"  ‚ö†Ô∏è {description} ({field}): '{value}' - –ø–ª–æ—Ö–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    bad_data_count += 1
                    field_analysis[field] = {"status": "bad", "value": value, "description": description}
                else:
                    self.log(f"  ‚úÖ {description} ({field}): '{value}' - —Ö–æ—Ä–æ—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    good_data_count += 1
                    field_analysis[field] = {"status": "good", "value": value, "description": description}
            else:
                self.log(f"  ‚ùå {description} ({field}): –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                bad_data_count += 1
                field_analysis[field] = {"status": "missing", "value": None, "description": description}
        
        total_fields = len(quality_fields)
        quality_percentage = (good_data_count / total_fields) * 100 if total_fields > 0 else 0
        
        self.log(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {good_data_count}/{total_fields} –ø–æ–ª–µ–π ({quality_percentage:.1f}%)")
        
        # –°—á–∏—Ç–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–∏–º –µ—Å–ª–∏ >= 80% –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        data_quality_good = quality_percentage >= 80.0
        
        if data_quality_good:
            self.log(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ä–æ—à–µ–µ ({quality_percentage:.1f}% >= 80%)")
            self.test_results["data_quality_good"] = True
            self.test_results["total_tests_passed"] += 1
        else:
            self.log(f"‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–ª–æ—Ö–æ–µ ({quality_percentage:.1f}% < 80%)")
        
        self.test_results["total_tests_run"] += 1
        
        return data_quality_good, field_analysis, quality_percentage
    
    def analyze_placement_data_structure(self, placement_data, cargo_number):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö placement-status"""
        self.log(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
        if isinstance(placement_data, dict):
            self.log(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ ({len(placement_data)} —à—Ç.):")
            for key, value in placement_data.items():
                value_type = type(value).__name__
                value_preview = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)
                self.log(f"  - {key} ({value_type}): {value_preview}")
        else:
            self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {type(placement_data)}")
        
        return placement_data
    
    def test_single_application(self, application):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        cargo_id = application.get("id")
        cargo_number = application.get("cargo_number", "N/A")
        
        if not cargo_id:
            self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {cargo_number} –Ω–µ –∏–º–µ–µ—Ç ID", "ERROR")
            return False
        
        self.log(f"\n{'='*60}")
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò {cargo_number}")
        self.log(f"{'='*60}")
        
        # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status
        placement_data = self.test_placement_status_api(cargo_id, cargo_number)
        if not placement_data:
            return False
        
        # 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.analyze_placement_data_structure(placement_data, cargo_number)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        fields_present, present_fields, missing_fields = self.validate_required_fields(placement_data, cargo_number)
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        data_quality_good, field_analysis, quality_percentage = self.validate_data_quality(placement_data, cargo_number)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
        self.test_results["detailed_results"][cargo_number] = {
            "cargo_id": cargo_id,
            "api_accessible": True,
            "fields_present": fields_present,
            "present_fields": present_fields,
            "missing_fields": missing_fields,
            "data_quality_good": data_quality_good,
            "quality_percentage": quality_percentage,
            "field_analysis": field_analysis,
            "raw_data": placement_data
        }
        
        return fields_present and data_quality_good
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "="*80)
        self.log("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API placement-status")
        self.log("="*80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API placement-status –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üîó Backend URL: {BACKEND_URL}")
        
        # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_rate = (self.test_results["total_tests_passed"] / self.test_results["total_tests_run"]) * 100 if self.test_results["total_tests_run"] > 0 else 0
        
        self.log(f"\nüìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        self.log(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests_run']}")
        self.log(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['total_tests_passed']}")
        self.log(f"  Success Rate: {success_rate:.1f}%")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['available_applications_found'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API placement-status: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['placement_status_api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  4. ‚úÖ –ù–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['required_fields_present'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  5. ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –•–û–†–û–®–ï–ï' if self.test_results['data_quality_good'] else '‚ùå –ü–õ–û–•–û–ï'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞—è–≤–∫–∞–º
        if self.test_results["detailed_results"]:
            self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ó–ê–Ø–í–ö–ê–ú:")
            for cargo_number, details in self.test_results["detailed_results"].items():
                self.log(f"\n  üéØ –ó–∞—è–≤–∫–∞ {cargo_number}:")
                self.log(f"    - API –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if details['api_accessible'] else '‚ùå'}")
                self.log(f"    - –ü–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {'‚úÖ' if details['fields_present'] else '‚ùå'}")
                self.log(f"    - –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if details['data_quality_good'] else '‚ùå'} ({details['quality_percentage']:.1f}%)")
                
                if details['missing_fields']:
                    self.log(f"    - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {details['missing_fields']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π
                self.log(f"    - –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π:")
                for field, analysis in details['field_analysis'].items():
                    status_icon = "‚úÖ" if analysis['status'] == 'good' else "‚ö†Ô∏è" if analysis['status'] == 'bad' else "‚ùå"
                    self.log(f"      {status_icon} {analysis['description']}: {analysis['value']}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        all_critical_tests_passed = (
            self.test_results["auth_success"] and
            self.test_results["available_applications_found"] and
            self.test_results["placement_status_api_accessible"] and
            self.test_results["required_fields_present"] and
            self.test_results["data_quality_good"]
        )
        
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if all_critical_tests_passed:
            self.log("‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            self.log("üéâ API placement-status –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            self.log("üìä –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –Ω–µ '–ù–µ —É–∫–∞–∑–∞–Ω'")
            self.log("üèóÔ∏è Lookup –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π users –∏ warehouses —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
            self.log("üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API placement-status")
            if not self.test_results["required_fields_present"]:
                self.log("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            if not self.test_results["data_quality_good"]:
                self.log("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ - –º–Ω–æ–≥–æ '–ù–µ —É–∫–∞–∑–∞–Ω' –∑–Ω–∞—á–µ–Ω–∏–π")
        
        return all_critical_tests_passed
    
    def run_placement_status_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API placement-status"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API placement-status")
        self.log("="*80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        applications = self.get_available_applications()
        if not applications:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫", "ERROR")
            return False
        
        if len(applications) == 0:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç", "ERROR")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∑–∞—è–≤–∫–∏
        self.log(f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ {len(applications)} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        first_application = applications[0]
        
        success = self.test_single_application(first_application)
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacementStatusAPITester()
    
    try:
        success = tester.run_placement_status_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API placement-status –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            print("üìä –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–∞—Ö, —Å–∫–ª–∞–¥–∞—Ö –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö")
            print("üèóÔ∏è Lookup –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π users –∏ warehouses —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API placement-status –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ lookup –¥–∞–Ω–Ω—ã—Ö –∏ fallback –∑–Ω–∞—á–µ–Ω–∏–π")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()