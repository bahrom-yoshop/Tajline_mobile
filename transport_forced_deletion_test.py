#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô FRONTEND:
1. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑"
2. ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω workflow –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π endpoint /api/transport/{id}
3. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
4. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

–ù–û–í–´–ô WORKFLOW –£–î–ê–õ–ï–ù–ò–Ø –¢–†–ê–ù–°–ü–û–†–¢–ê:
1. –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–≥–∏–π endpoint /api/admin/transports/{id}
2. –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑ ‚Üí catch –æ—à–∏–±–∫—É
3. –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
4. –ü—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å endpoint /api/transport/{id} –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
5. –ì—Ä—É–∑ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å "–ë–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"

–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ (–Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –≥—Ä—É–∑–æ–º)
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–≥–∏–π endpoint
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º:
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏
   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /api/transport/{id}
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–∞–∂–µ —Å –≥—Ä—É–∑–æ–º —á–µ—Ä–µ–∑ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
if not BACKEND_URL.endswith('/api'):
    BACKEND_URL = f"{BACKEND_URL}/api"

print(f"üîß Backend URL: {BACKEND_URL}")

class TransportForcedDeletionTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_results = []
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        print(f"   üìã {details}")
        print()
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'Unknown')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')}, —Ä–æ–ª—å: {user_info.get('role', 'N/A')})"
                )
                return True
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            )
            return False
    
    def get_transports_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤"""
        try:
            response = self.session.get(f"{BACKEND_URL}/transport/list")
            
            if response.status_code == 200:
                data = response.json()
                transports = data if isinstance(data, list) else data.get('items', [])
                
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(transports)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤. Endpoint /api/transport/list —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                )
                return transports
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return []
    
    def create_test_transport(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        try:
            transport_data = {
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å –£–¥–∞–ª–µ–Ω–∏—è",
                "driver_phone": "+79999123456",
                "transport_number": f"TEST{datetime.now().strftime('%H%M%S')}",
                "capacity_kg": 1000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            }
            
            response = self.session.post(f"{BACKEND_URL}/transport/create", json=transport_data)
            
            if response.status_code == 200:
                data = response.json()
                transport_id = data.get('transport_id') or data.get('id')
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    True,
                    f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ID: {transport_id}. –ù–æ–º–µ—Ä: {transport_data['transport_number']}"
                )
                return transport_id, transport_data
            else:
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return None, None
                
        except Exception as e:
            self.log_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return None, None
    
    def find_existing_cargo_and_assign_to_transport(self, transport_id: str):
        """–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä—É–∑ –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            response = self.session.get(f"{BACKEND_URL}/cargo/all")
            
            if response.status_code == 200:
                data = response.json()
                cargos = data if isinstance(data, list) else data.get('items', [])
                
                # –ò—â–µ–º –≥—Ä—É–∑, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                suitable_cargo = None
                for cargo in cargos:
                    if cargo.get('status') in ['accepted', 'placed_in_warehouse', 'in_warehouse'] and not cargo.get('transport_id'):
                        suitable_cargo = cargo
                        break
                
                if suitable_cargo:
                    cargo_id = suitable_cargo.get('id')
                    cargo_number = suitable_cargo.get('cargo_number')
                    
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º –≥—Ä—É–∑ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    assignment_data = {
                        "cargo_numbers": [cargo_number]
                    }
                    
                    assign_response = self.session.post(f"{BACKEND_URL}/transport/{transport_id}/place-cargo", json=assignment_data)
                    
                    if assign_response.status_code == 200:
                        self.log_result(
                            "–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                            True,
                            f"–ù–∞–π–¥–µ–Ω –≥—Ä—É–∑ {cargo_number} (ID: {cargo_id}) –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_id}"
                        )
                        return cargo_id, cargo_number
                    else:
                        self.log_result(
                            "–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                            False,
                            f"–ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. HTTP {assign_response.status_code}: {assign_response.text}"
                        )
                        return None, None
                else:
                    self.log_result(
                        "–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                        False,
                        f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç. –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {len(cargos)}"
                    )
                    return None, None
            else:
                self.log_result(
                    "–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤. HTTP {response.status_code}: {response.text}"
                )
                return None, None
                
        except Exception as e:
            self.log_result(
                "–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return None, None
    
    def test_empty_transport_deletion_strict_endpoint(self, transport_id: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–≥–∏–π endpoint"""
        try:
            response = self.session.delete(f"{BACKEND_URL}/admin/transports/{transport_id}")
            
            if response.status_code == 200:
                data = response.json()
                self.log_result(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å—Ç—Ä–æ–≥–∏–π endpoint)",
                    True,
                    f"–ü—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ /api/admin/transports/{{id}}. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            elif response.status_code == 400:
                # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑, —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
                self.log_result(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å—Ç—Ä–æ–≥–∏–π endpoint)",
                    True,
                    f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑ - –ø–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ HTTP 400: {response.text}"
                )
                return False  # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            else:
                self.log_result(
                    "–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å—Ç—Ä–æ–≥–∏–π endpoint)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Å—Ç—Ä–æ–≥–∏–π endpoint)",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def test_transport_with_cargo_deletion_strict_endpoint(self, transport_id: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–≥–∏–π endpoint (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)"""
        try:
            response = self.session.delete(f"{BACKEND_URL}/admin/transports/{transport_id}")
            
            if response.status_code == 400:
                error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {"error": response.text}
                self.log_result(
                    "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º (—Å—Ç—Ä–æ–≥–∏–π endpoint - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞)",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –≥—Ä—É–∑–æ–º. HTTP 400: {error_data}"
                )
                return True  # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å
            elif response.status_code == 200:
                self.log_result(
                    "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º (—Å—Ç—Ä–æ–≥–∏–π endpoint - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞)",
                    False,
                    f"–ù–ï–û–ñ–ò–î–ê–ù–ù–û: –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –≥—Ä—É–∑–æ–º –±—ã–ª —É–¥–∞–ª–µ–Ω –±–µ–∑ –æ—à–∏–±–∫–∏! –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å. –û—Ç–≤–µ—Ç: {response.text}"
                )
                return False
            else:
                self.log_result(
                    "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º (—Å—Ç—Ä–æ–≥–∏–π endpoint - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞)",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º (—Å—Ç—Ä–æ–≥–∏–π endpoint - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞)",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def test_forced_transport_deletion_lenient_endpoint(self, transport_id: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π endpoint"""
        try:
            response = self.session.delete(f"{BACKEND_URL}/transport/{transport_id}")
            
            if response.status_code == 200:
                data = response.json()
                self.log_result(
                    "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π endpoint)",
                    True,
                    f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ /api/transport/{{id}}. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            else:
                self.log_result(
                    "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π endpoint)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π endpoint)",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def check_cargo_status_after_transport_deletion(self, cargo_id: str, cargo_number: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ tracking endpoint
            response = self.session.get(f"{BACKEND_URL}/cargo/track/{cargo_number}")
            
            if response.status_code == 200:
                cargo_data = response.json()
                cargo_status = cargo_data.get('status', 'unknown')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–∑ –ø–µ—Ä–µ—à–µ–ª –≤ —Å—Ç–∞—Ç—É—Å "–±–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–π
                expected_statuses = ['removed_from_placement', 'in_warehouse', 'awaiting_placement', 'placed_in_warehouse']
                
                if cargo_status in expected_statuses:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        True,
                        f"–ì—Ä—É–∑ {cargo_number} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –°—Ç–∞—Ç—É—Å: {cargo_status}"
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        False,
                        f"–ì—Ä—É–∑ {cargo_number} –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {cargo_status}. –û–∂–∏–¥–∞–ª–∏—Å—å: {expected_statuses}"
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ {cargo_number}. HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def verify_transport_deletion_from_database(self, transport_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç
            response = self.session.get(f"{BACKEND_URL}/transport/list")
            
            if response.status_code == 200:
                data = response.json()
                transports = data if isinstance(data, list) else data.get('items', [])
                
                # –ò—â–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ —Å–ø–∏—Å–∫–µ
                deleted_transport = next((t for t in transports if t.get('id') == transport_id), None)
                
                if deleted_transport is None:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                        True,
                        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                        False,
                        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_id} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª–µ–Ω–∏–µ –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏. HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def test_endpoints_availability(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–∏–π endpoint —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
            test_id = "test-transport-id-123"
            
            response1 = self.session.delete(f"{BACKEND_URL}/admin/transports/{test_id}")
            strict_available = response1.status_code in [200, 400, 404]
            
            response2 = self.session.delete(f"{BACKEND_URL}/transport/{test_id}")
            lenient_available = response2.status_code in [200, 400, 404]
            
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints —É–¥–∞–ª–µ–Ω–∏—è",
                strict_available and lenient_available,
                f"–°—Ç—Ä–æ–≥–∏–π endpoint /api/admin/transports/{{id}}: HTTP {response1.status_code} {'‚úÖ' if strict_available else '‚ùå'}, "
                f"–ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π endpoint /api/transport/{{id}}: HTTP {response2.status_code} {'‚úÖ' if lenient_available else '‚ùå'}"
            )
            
            return strict_available and lenient_available
            
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints —É–¥–∞–ª–µ–Ω–∏—è",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º")
        print("=" * 100)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        transports = self.get_transports_list()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints
        self.test_endpoints_availability()
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        empty_transport_id, empty_transport_data = self.create_test_transport()
        
        if empty_transport_id:
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–≥–∏–π endpoint
            self.test_empty_transport_deletion_strict_endpoint(empty_transport_id)
            self.verify_transport_deletion_from_database(empty_transport_id)
        
        # 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º
        transport_with_cargo_id, transport_with_cargo_data = self.create_test_transport()
        
        if transport_with_cargo_id:
            # 7. –ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            cargo_id, cargo_number = self.find_existing_cargo_and_assign_to_transport(transport_with_cargo_id)
            
            if cargo_id and cargo_number:
                # 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–≥–∏–π endpoint (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
                self.test_transport_with_cargo_deletion_strict_endpoint(transport_with_cargo_id)
                
                # 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π endpoint
                forced_deletion_success = self.test_forced_transport_deletion_lenient_endpoint(transport_with_cargo_id)
                
                if forced_deletion_success:
                    # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                    self.check_cargo_status_after_transport_deletion(cargo_id, cargo_number)
                    
                    # 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    self.verify_transport_deletion_from_database(transport_with_cargo_id)
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
        
        return True
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("=" * 100)
        print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print()
        
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(f"   {result['status']}: {result['test']}")
        
        print()
        if success_rate >= 80:
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ –ì—Ä—É–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        else:
            print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print("=" * 100)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = TransportForcedDeletionTester()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()