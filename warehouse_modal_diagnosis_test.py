#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –ø—Ä–∏–µ–º–∫–∏ –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ
–ù–ê–ô–î–ï–ù–ê –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´!

–ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–û—Ñ–æ—Ä–º–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ

–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: Frontend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π workflow!
1. Frontend –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–≤–∞—Ç—å /accept (–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ in_processing)
2. –ó–∞—Ç–µ–º –≤—ã–∑–≤–∞—Ç—å /complete —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Å–æ–∑–¥–∞–µ—Ç –≥—Ä—É–∑—ã)
3. –ù–æ frontend, –≤–µ—Ä–æ—è—Ç–Ω–æ, –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ /accept –∏ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç /complete

–≠–¢–û–¢ –¢–ï–°–¢ –î–ï–ú–û–ù–°–¢–†–ò–†–£–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô WORKFLOW
"""

import requests
import json
import os
from datetime import datetime

# Configuration
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://tajline-cargo-5.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# Admin credentials
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class WarehouseModalDiagnoser:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        
    def authenticate(self):
        """Authenticate as admin"""
        login_data = {
            "phone": ADMIN_PHONE,
            "password": ADMIN_PASSWORD
        }
        
        response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
        
        if response.status_code == 200:
            data = response.json()
            self.auth_token = data.get("access_token")
            self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
            
            # Get user info
            user_response = self.session.get(f"{API_BASE}/auth/me")
            if user_response.status_code == 200:
                self.current_user = user_response.json()
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.current_user.get('full_name')} (—Ä–æ–ª—å: {self.current_user.get('role')})")
                return True
        
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False
    
    def get_fresh_notification(self):
        """Get a fresh notification for testing"""
        response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
        
        if response.status_code == 200:
            data = response.json()
            notifications = data.get('notifications', [])
            
            # Find a pending notification
            for notification in notifications:
                if notification.get('status') == 'pending_acceptance':
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {notification.get('request_number')} (—Å—Ç–∞—Ç—É—Å: {notification.get('status')})")
                    return notification
            
            print("‚ùå –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending_acceptance'")
            return None
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: HTTP {response.status_code}")
        return None
    
    def demonstrate_correct_workflow(self):
        """Demonstrate the correct workflow that should fix the modal issue"""
        print("\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ì–û WORKFLOW –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê")
        print("=" * 70)
        
        # Get a fresh notification
        notification = self.get_fresh_notification()
        if not notification:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        notification_id = notification.get('id')
        request_number = notification.get('request_number')
        
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É ‚Ññ{request_number} (ID: {notification_id})")
        
        # STEP 1: Accept notification (what happens when user clicks "–ü—Ä–∏–Ω—è—Ç—å")
        print("\nüî∏ –®–ê–ì 1: –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (/accept)")
        print("   –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–Ω—è—Ç—å' –≤ —Å–ø–∏—Å–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        accept_response = self.session.post(
            f"{API_BASE}/operator/warehouse-notifications/{notification_id}/accept"
        )
        
        if accept_response.status_code == 200:
            accept_data = accept_response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ. –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {accept_data.get('status')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è: HTTP {accept_response.status_code}")
            print(f"   –î–µ—Ç–∞–ª–∏: {accept_response.text}")
            return False
        
        # STEP 2: Complete with modal data (what should happen when user clicks "–û—Ñ–æ—Ä–º–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
        print("\nüî∏ –®–ê–ì 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (/complete)")
        print("   –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–û—Ñ–æ—Ä–º–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
        
        # Prepare modal data as it would come from the frontend modal
        modal_data = {
            "sender_full_name": notification.get('sender_full_name', '–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'),
            "sender_phone": notification.get('sender_phone', '+79999999999'),
            "sender_address": notification.get('pickup_address', '–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞'),
            "recipient_full_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã–π",
            "recipient_phone": "+79888888888",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123",
            "payment_method": "cash",
            "payment_status": "paid",
            "delivery_method": "pickup",
            "cargo_items": [
                {
                    "name": f"–ì—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ ‚Ññ{request_number}",
                    "weight": 12.5,
                    "price": 3500.0
                }
            ]
        }
        
        print(f"   üì¶ –î–∞–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:")
        print(f"      - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {modal_data['sender_full_name']}")
        print(f"      - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {modal_data['recipient_full_name']}")
        print(f"      - –ì—Ä—É–∑: {modal_data['cargo_items'][0]['name']} ({modal_data['cargo_items'][0]['weight']} –∫–≥)")
        print(f"      - –°—Ç–æ–∏–º–æ—Å—Ç—å: {modal_data['cargo_items'][0]['price']} —Ä—É–±.")
        
        complete_response = self.session.post(
            f"{API_BASE}/operator/warehouse-notifications/{notification_id}/complete",
            json=modal_data
        )
        
        if complete_response.status_code == 200:
            complete_data = complete_response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"      - –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–∑–æ–≤: {complete_data.get('created_count', 0)}")
            print(f"      - –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {complete_data.get('notification_status', 'unknown')}")
            
            if 'created_cargos' in complete_data:
                for cargo in complete_data['created_cargos']:
                    print(f"      - –ì—Ä—É–∑: {cargo.get('cargo_number')} (—Å—Ç–∞—Ç—É—Å: {cargo.get('status')})")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: HTTP {complete_response.status_code}")
            print(f"   –î–µ—Ç–∞–ª–∏: {complete_response.text}")
            return False
    
    def demonstrate_wrong_workflow(self):
        """Demonstrate what happens with wrong workflow (what frontend might be doing)"""
        print("\nüö® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û WORKFLOW (–í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê FRONTEND)")
        print("=" * 70)
        
        # Get a fresh notification
        notification = self.get_fresh_notification()
        if not notification:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        notification_id = notification.get('id')
        request_number = notification.get('request_number')
        
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É ‚Ññ{request_number} (ID: {notification_id})")
        
        # WRONG: Try to send modal data to /accept endpoint
        print("\nüî∏ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞ /accept endpoint")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –µ—Å–ª–∏ frontend –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        modal_data = {
            "sender_full_name": notification.get('sender_full_name', '–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'),
            "recipient_full_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã–π",
            "cargo_items": [
                {
                    "name": f"–ì—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ ‚Ññ{request_number}",
                    "weight": 12.5,
                    "price": 3500.0
                }
            ]
        }
        
        wrong_response = self.session.post(
            f"{API_BASE}/operator/warehouse-notifications/{notification_id}/accept",
            json=modal_data
        )
        
        if wrong_response.status_code == 200:
            wrong_data = wrong_response.json()
            print(f"   ‚ö†Ô∏è  Endpoint –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å, –Ω–æ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ò–ì–ù–û–†–ò–†–£–Æ–¢–°–Ø!")
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ç–∞—Ç—É—Å = {wrong_data.get('status')}")
            print(f"   üö® –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å –Ω–∞ 'in_processing', –Ω–æ –≥—Ä—É–∑—ã –ù–ï –°–û–ó–î–ê–ù–´!")
            print(f"   üí° –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É –∑–∞—è–≤–∫–∞ '–æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ' - –æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
            return True
        else:
            print(f"   ‚úÖ Endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: HTTP {wrong_response.status_code}")
            return False
    
    def check_notification_status_after_wrong_workflow(self):
        """Check what happens to notifications after wrong workflow"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–û–°–õ–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û WORKFLOW")
        print("=" * 70)
        
        response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
        
        if response.status_code == 200:
            data = response.json()
            notifications = data.get('notifications', [])
            
            pending_count = len([n for n in notifications if n.get('status') == 'pending_acceptance'])
            in_processing_count = len([n for n in notifications if n.get('status') == 'in_processing'])
            
            print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            print(f"   - –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏–Ω—è—Ç–∏—è (pending_acceptance): {pending_count}")
            print(f"   - –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (in_processing): {in_processing_count}")
            
            if in_processing_count > 0:
                print(f"\nüö® –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê:")
                print(f"   {in_processing_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'in_processing'!")
                print(f"   –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ frontend –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ /accept, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç /complete")
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —á—Ç–æ –∑–∞—è–≤–∫–∞ '–æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ' –ø–æ—Ç–æ–º—É —á—Ç–æ:")
                print(f"   1. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å 'pending_acceptance' –Ω–∞ 'in_processing'")
                print(f"   2. –ù–æ –≥—Ä—É–∑—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã (–Ω–µ –≤—ã–∑–≤–∞–Ω /complete)")
                print(f"   3. –ó–∞—è–≤–∫–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–æ –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
                
                # Show stuck notifications
                stuck_notifications = [n for n in notifications if n.get('status') == 'in_processing']
                print(f"\nüìã –ó–∞—Å—Ç—Ä—è–≤—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
                for notif in stuck_notifications[:3]:  # Show first 3
                    print(f"   - ‚Ññ{notif.get('request_number')} (ID: {notif.get('id')}, —Å—Ç–∞—Ç—É—Å: {notif.get('status')})")
                
                return True
            else:
                print("‚úÖ –ù–µ—Ç –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: HTTP {response.status_code}")
        return False
    
    def run_diagnosis(self):
        """Run complete diagnosis"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –ø—Ä–∏–µ–º–∫–∏ –≥—Ä—É–∑–∞ –≤ TAJLINE.TJ")
        print("=" * 80)
        
        if not self.authenticate():
            return
        
        # Demonstrate correct workflow
        print("\n" + "="*80)
        correct_result = self.demonstrate_correct_workflow()
        
        # Demonstrate wrong workflow
        print("\n" + "="*80)
        wrong_result = self.demonstrate_wrong_workflow()
        
        # Check stuck notifications
        print("\n" + "="*80)
        stuck_result = self.check_notification_status_after_wrong_workflow()
        
        # Final diagnosis
        print("\n" + "="*80)
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
        print("=" * 80)
        
        if correct_result:
            print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô WORKFLOW –†–ê–ë–û–¢–ê–ï–¢:")
            print("   1. /accept - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å ‚Üí in_processing)")
            print("   2. /complete - —Å–æ–∑–¥–∞–µ—Ç –≥—Ä—É–∑—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            print("   3. –ó–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –∏—Å—á–µ–∑–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
        
        if wrong_result:
            print("\nüö® –ù–ê–ô–î–ï–ù–ê –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´:")
            print("   Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞ /accept endpoint!")
            print("   –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - /accept –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            print("   –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è, –Ω–æ –≥—Ä—É–∑—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
        
        if stuck_result:
            print("\n‚ö†Ô∏è  –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("   –ù–∞–π–¥–µ–Ω—ã –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ 'in_processing'")
            print("   –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ frontend –≤—ã–∑—ã–≤–∞–µ—Ç /accept, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç /complete")
        
        print("\nüí° –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        print("   Frontend –¥–æ–ª–∂–µ–Ω:")
        print("   1. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ü—Ä–∏–Ω—è—Ç—å' ‚Üí –≤—ã–∑–≤–∞—Ç—å /accept")
        print("   2. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–û—Ñ–æ—Ä–º–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' ‚Üí –≤—ã–∑–≤–∞—Ç—å /complete —Å –¥–∞–Ω–Ω—ã–º–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        print("   3. –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞ /accept endpoint")
        
        print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

def main():
    diagnoser = WarehouseModalDiagnoser()
    diagnoser.run_diagnosis()

if __name__ == "__main__":
    main()