#!/usr/bin/env python3
"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤

**–¶–ï–õ–¨:** –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å API layout-with-cargo —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

**–¢–ï–°–¢:**
1. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
3. –í—ã–∑–≤–∞—Ç—å API `/api/warehouses/{warehouse_id}/layout-with-cargo`
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ –æ:
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞
   - –û–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ placement_records –≤ –±–∞–∑–µ
   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö 25082235/01/01 –∏ 25082235/01/02
   - –ò—Ö warehouse_id –∏ location –∑–Ω–∞—á–µ–Ω–∏—è—Ö

**–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:**
- –í –ª–æ–≥–∞—Ö —É–≤–∏–¥–∏–º –ø–æ—á–µ–º—É API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ö–µ–º—É
- –û–ø—Ä–µ–¥–µ–ª–∏–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å warehouse_id –≤ placement_records
- –ù–∞–π–¥–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø–æ—á–µ–º—É –≥—Ä—É–∑—ã 25082235/01/01 –∏ 25082235/01/02 –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è

**–ö–†–ò–¢–ò–ß–ù–û:** –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ print –ª–æ–≥–∏
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Test credentials
TEST_CREDENTIALS = {
    "phone": WAREHOUSE_OPERATOR_PHONE,
    "password": WAREHOUSE_OPERATOR_PASSWORD
}

# Global variables
auth_token = None
test_results = []
warehouse_id = None
moscow_warehouse_name = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
target_cargo_numbers = ["25082235/01/01", "25082235/01/02"]  # –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

def log_test_result(test_name, success, details, response_time_ms=None):
    """Log test result with details"""
    status = "‚úÖ PASSED" if success else "‚ùå FAILED"
    result = {
        "test": test_name,
        "status": status,
        "success": success,
        "details": details,
        "timestamp": datetime.now().isoformat(),
        "response_time_ms": response_time_ms
    }
    test_results.append(result)
    
    time_info = f" ({response_time_ms}ms)" if response_time_ms else ""
    print(f"{status}: {test_name}{time_info}")
    print(f"   Details: {details}")
    print()

def make_request(method, endpoint, data=None, headers=None):
    """Make HTTP request with error handling and timing"""
    url = f"{BACKEND_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        
        return response, response_time_ms
    
    except requests.exceptions.RequestException as e:
        response_time_ms = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time_ms

def test_warehouse_operator_authentication():
    """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
    global auth_token
    
    response, response_time = make_request("POST", "/auth/login", TEST_CREDENTIALS)
    
    if not response:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
            False, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            auth_token = data.get("access_token")
            user_info = data.get("user", {})
            
            if auth_token and user_info.get("role") == "warehouse_operator":
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('role')} (–æ–∂–∏–¥–∞–ª–∞—Å—å warehouse_operator)",
                    response_time
                )
                return False
        except Exception as e:
            log_test_result(
                "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_get_warehouse_id():
    """Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" """
    global warehouse_id
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            warehouses = response.json()
            
            if not warehouses:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
                    False,
                    "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç",
                    response_time
                )
                return False
            
            # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
            moscow_warehouse = None
            for warehouse in warehouses:
                if moscow_warehouse_name in warehouse.get("name", ""):
                    moscow_warehouse = warehouse
                    warehouse_id = warehouse.get("id")
                    break
            
            if moscow_warehouse:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
                    True,
                    f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' (ID: {warehouse_id})",
                    response_time
                )
                return True
            else:
                warehouse_names = [w.get("name") for w in warehouses]
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
                    False,
                    f"–°–∫–ª–∞–¥ '{moscow_warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {warehouse_names}",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_check_placement_records():
    """Test 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤"""
    if not warehouse_id:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
            False,
            "warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º placement_records —á–µ—Ä–µ–∑ API individual-units-for-placement
    response, response_time = make_request("GET", "/operator/cargo/individual-units-for-placement")
    
    if not response:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            items = data.get("items", [])
            
            # –ò—â–µ–º —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã
            found_target_cargo = []
            all_cargo = []
            
            for item in items:
                individual_number = item.get("individual_number", "")
                all_cargo.append(individual_number)
                
                if individual_number in target_cargo_numbers:
                    found_target_cargo.append({
                        "individual_number": individual_number,
                        "status": item.get("status", "unknown"),
                        "placement_info": item.get("placement_info", "unknown")
                    })
            
            if found_target_cargo:
                details = f"–ù–∞–π–¥–µ–Ω–æ {len(found_target_cargo)} –∏–∑ {len(target_cargo_numbers)} —Ü–µ–ª–µ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü: {found_target_cargo}"
            else:
                details = f"–¶–µ–ª–µ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã {target_cargo_numbers} –ù–ï –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ {len(items)} –µ–¥–∏–Ω–∏—Ü"
            
            log_test_result(
                "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
                len(found_target_cargo) > 0,
                details,
                response_time
            )
            return len(found_target_cargo) > 0
            
        except Exception as e:
            log_test_result(
                "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_layout_with_cargo_diagnostic():
    """Test 4: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê - API layout-with-cargo –ù–ï –†–ê–ë–û–¢–ê–ï–¢"""
    if not warehouse_id:
        log_test_result(
            "4. API layout-with-cargo –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            False,
            "warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        log_test_result(
            "4. API layout-with-cargo –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            layout_data = response.json()
            
            total_cells = layout_data.get("total_cells", 0)
            occupied_cells = layout_data.get("occupied_cells", 0)
            total_cargo = layout_data.get("total_cargo", 0)
            loading_percentage = layout_data.get("occupancy_percentage", 0)
            
            warehouse_info = layout_data.get("warehouse", {})
            layout = warehouse_info.get("layout", {})
            blocks = layout.get("blocks", [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤ —Å—Ö–µ–º–µ
            if occupied_cells == 0 and total_cargo == 0:
                log_test_result(
                    "4. API layout-with-cargo –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                    False,
                    f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê - API –ù–ï –†–ê–ë–û–¢–ê–ï–¢: –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}, –ó–∞–≥—Ä—É–∑–∫–∞: {loading_percentage}%, –ë–ª–æ–∫–æ–≤: {len(blocks)} - API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ö–µ–º—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã",
                    response_time
                )
                return False
            else:
                log_test_result(
                    "4. API layout-with-cargo –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                    True,
                    f"API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}, –ó–∞–≥—Ä—É–∑–∫–∞: {loading_percentage}%, –ë–ª–æ–∫–æ–≤: {len(blocks)}",
                    response_time
                )
                return True
            
        except Exception as e:
            log_test_result(
                "4. API layout-with-cargo –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "4. API layout-with-cargo –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_target_cargo_in_layout():
    """Test 5: –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞"""
    if not warehouse_id:
        log_test_result(
            "5. –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ",
            False,
            "warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response or response.status_code != 200:
        log_test_result(
            "5. –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É —Å–∫–ª–∞–¥–∞",
            response_time
        )
        return False
    
    try:
        layout_data = response.json()
        warehouse_info = layout_data.get("warehouse", {})
        layout = warehouse_info.get("layout", {})
        blocks = layout.get("blocks", [])
        
        # –ò—â–µ–º —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –≤ —Å—Ö–µ–º–µ
        found_cargo = []
        all_cargo_in_layout = []
        
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied", False):
                        cargo_list = cell.get("cargo", [])
                        location_code = cell.get("location_code", "")
                        
                        if cargo_list:
                            for cargo_info in cargo_list:
                                individual_number = cargo_info.get("individual_number", "")
                                all_cargo_in_layout.append(individual_number)
                                
                                if individual_number in target_cargo_numbers:
                                    found_cargo.append({
                                        "individual_number": individual_number,
                                        "location": location_code,
                                        "cargo_number": cargo_info.get("cargo_number", "")
                                    })
        
        if found_cargo:
            log_test_result(
                "5. –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ",
                True,
                f"–ù–∞–π–¥–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã: {found_cargo}",
                0
            )
            return True
        else:
            log_test_result(
                "5. –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ",
                False,
                f"–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã {target_cargo_numbers} –ù–ï –ù–ê–ô–î–ï–ù–´ - —Å—Ö–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {len(all_cargo_in_layout)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫",
                0
            )
            return False
        
    except Exception as e:
        log_test_result(
            "5. –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ",
            False,
            f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã: {e}",
            0
        )
        return False

def test_data_synchronization_issue():
    """Test 6: –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É placement_records –∏ —Å—Ö–µ–º–æ–π —Å–∫–ª–∞–¥–∞
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º individual-units-for-placement
    response1, response_time1 = make_request("GET", "/operator/cargo/individual-units-for-placement")
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º layout-with-cargo
    if warehouse_id:
        response2, response_time2 = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    else:
        response2 = None
        response_time2 = 0
    
    if not response1 or not response2:
        log_test_result(
            "6. –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
            response_time1 + response_time2
        )
        return False
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º individual-units-for-placement
        units_data = response1.json()
        units_items = units_data.get("items", [])
        
        target_units_in_placement = []
        for item in units_items:
            individual_number = item.get("individual_number", "")
            if individual_number in target_cargo_numbers:
                target_units_in_placement.append({
                    "individual_number": individual_number,
                    "status": item.get("status", "unknown")
                })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º layout-with-cargo
        layout_data = response2.json()
        occupied_cells = layout_data.get("occupied_cells", 0)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if target_units_in_placement and occupied_cells == 0:
            log_test_result(
                "6. –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –î–ò–ê–ì–ù–û–°–¢–ò–†–û–í–ê–ù–ê: ‚úÖ {len(target_units_in_placement)} –µ–¥–∏–Ω–∏—Ü –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö; ‚ùå –°—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {occupied_cells} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫; ‚ùå –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞; –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å API layout-with-cargo - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã",
                0
            )
            return False
        elif not target_units_in_placement and occupied_cells == 0:
            log_test_result(
                "6. –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã: placement_records={len(target_units_in_placement)}, occupied_cells={occupied_cells}",
                0
            )
            return False
        else:
            log_test_result(
                "6. –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                True,
                f"–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: placement_records={len(target_units_in_placement)}, occupied_cells={occupied_cells}",
                0
            )
            return True
        
    except Exception as e:
        log_test_result(
            "6. –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            False,
            f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}",
            0
        )
        return False

def print_diagnostic_summary():
    """Print comprehensive diagnostic summary"""
    print("\n" + "="*80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = len([r for r in test_results if r["success"]])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   Success Rate: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status_icon = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time_ms']}ms)" if result.get('response_time_ms') else ""
        print(f"   {i}. {status_icon} {result['test']}{time_info}")
        print(f"      {result['details']}")
    
    print(f"\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    auth_success = any("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in r["test"] and r["success"] for r in test_results)
    warehouse_found = any("warehouse_id" in r["test"] and r["success"] for r in test_results)
    placement_records_found = any("placement_records" in r["test"] and r["success"] for r in test_results)
    layout_api_works = any("layout-with-cargo" in r["test"] and r["success"] for r in test_results)
    cargo_in_layout = any("—Å—Ö–µ–º–µ" in r["test"] and r["success"] for r in test_results)
    sync_issue = any("—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏" in r["test"] and not r["success"] for r in test_results)
    
    print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'–†–ê–ë–û–¢–ê–ï–¢' if auth_success else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id: {'–†–ê–ë–û–¢–ê–ï–¢' if warehouse_found else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"   ‚úÖ Placement records –Ω–∞–π–¥–µ–Ω—ã: {'–î–ê' if placement_records_found else '–ù–ï–¢'}")
    print(f"   ‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç: {'–î–ê' if layout_api_works else '–ù–ï–¢'}")
    print(f"   ‚úÖ –¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –≤ —Å—Ö–µ–º–µ: {'–ù–ê–ô–î–ï–ù–´' if cargo_in_layout else '–ù–ï –ù–ê–ô–î–ï–ù–´'}")
    print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {'–û–ë–ù–ê–†–£–ñ–ï–ù–ê' if sync_issue else '–ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ê'}")
    
    print(f"\nüèÜ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if not layout_api_works:
        print("   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
        print("   API layout-with-cargo –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —è—á–µ–µ–∫.")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend –ª–æ–≥–∏–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å placement_records.")
    elif sync_issue:
        print("   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•!")
        print("   –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –Ω–æ API –∏—Ö –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç.")
    else:
        print("   ‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("   –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    
    print("="*80)

def main():
    """Main diagnostic execution"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
    print("="*80)
    print("–ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º—ã —Å API layout-with-cargo...")
    print()
    
    # Test 1: Authentication
    if not test_warehouse_operator_authentication():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_diagnostic_summary()
        return
    
    # Test 2: Get warehouse_id
    if not test_get_warehouse_id():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å warehouse_id. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_diagnostic_summary()
        return
    
    # Test 3: Check placement_records
    test_check_placement_records()
    
    # Test 4: Layout API diagnostic
    test_layout_with_cargo_diagnostic()
    
    # Test 5: Target cargo in layout
    test_target_cargo_in_layout()
    
    # Test 6: Data synchronization issue
    test_data_synchronization_issue()
    
    # Print final diagnostic summary
    print_diagnostic_summary()

if __name__ == "__main__":
    main()