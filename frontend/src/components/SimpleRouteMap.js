import React, { useEffect, useRef, useState } from 'react';
import { Navigation, AlertCircle } from 'lucide-react';

const SimpleRouteMap = ({ fromAddress, toAddress, warehouseName }) => {
  const mapRef = useRef(null);
  const [status, setStatus] = useState('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
  const [error, setError] = useState('');

  useEffect(() => {
    const initSimpleMap = async () => {
      try {
        setStatus('–ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á...');
        
        const apiKey = process.env.REACT_APP_YANDEX_MAPS_API_KEY;
        console.log('üîë API –∫–ª—é—á Yandex Maps:', apiKey ? `${apiKey.substring(0, 8)}...` : '–ù–ï –ù–ê–ô–î–ï–ù');
        
        if (!apiKey) {
          throw new Error('API –∫–ª—é—á Yandex Maps –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        setStatus('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex Maps
        const testUrl = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;
        console.log('üåê URL —Å–∫—Ä–∏–ø—Ç–∞:', testUrl);

        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
        const script = document.createElement('script');
        script.src = testUrl;
        script.async = true;
        
        const loadPromise = new Promise((resolve, reject) => {
          script.onload = resolve;
          script.onerror = () => reject(new Error('–°–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'));
          setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ (20 —Å–µ–∫)')), 20000);
        });
        
        document.head.appendChild(script);
        await loadPromise;
        
        setStatus('–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º API...');
        console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, window.ymaps:', !!window.ymaps);

        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API
        await new Promise((resolve, reject) => {
          const timeout = setTimeout(() => {
            reject(new Error('API –Ω–µ –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥'));
          }, 10000);
          
          if (window.ymaps) {
            window.ymaps.ready(() => {
              clearTimeout(timeout);
              console.log('‚úÖ Yandex Maps API –≥–æ—Ç–æ–≤');
              resolve();
            });
          } else {
            clearTimeout(timeout);
            reject(new Error('window.ymaps –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞'));
          }
        });

        setStatus('–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É...');
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        const ymaps = window.ymaps;
        const map = new ymaps.Map(mapRef.current, {
          center: [55.7558, 37.6173], // –ú–æ—Å–∫–≤–∞
          zoom: 10,
          controls: []
        });

        setStatus('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥—Ä–µ—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
        if (fromAddress && toAddress) {
          setStatus('–î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã...');
          
          // –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞
          const geocoder = ymaps.geocode(fromAddress);
          geocoder.then((res) => {
            const firstGeoObject = res.geoObjects.get(0);
            const coords = firstGeoObject.geometry.getCoordinates();
            
            const placemark = new ymaps.Placemark(coords, {
              balloonContent: `–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞: ${fromAddress}`
            }, {
              preset: 'islands#redIcon'
            });
            
            map.geoObjects.add(placemark);
            setStatus('‚úÖ –ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏!');
          }).catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            setStatus('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤');
          });
        }

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–∞—Ä—Ç—ã:', error);
        setError(`–û—à–∏–±–∫–∞: ${error.message}`);
        setStatus(`‚ùå ${error.message}`);
      }
    };

    if (mapRef.current) {
      initSimpleMap();
    }
  }, [fromAddress, toAddress]);

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <div className="flex items-center mb-2">
          <AlertCircle className="h-5 w-5 text-red-500 mr-2" />
          <span className="text-red-700 font-medium">–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: –û—à–∏–±–∫–∞</span>
        </div>
        <p className="text-red-600 text-sm">{error}</p>
        <div className="text-xs text-gray-600 mt-2">
          –°—Ç–∞—Ç—É—Å: {status}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-3">
      <div className="bg-green-50 border border-green-200 rounded-lg p-3">
        <div className="flex items-center mb-2">
          <Navigation className="h-4 w-4 text-green-600 mr-2" />
          <span className="font-medium text-green-900">–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞</span>
        </div>
        <div className="text-sm text-green-700">
          –°—Ç–∞—Ç—É—Å: {status}
        </div>
        {fromAddress && toAddress && (
          <div className="text-xs text-gray-600 mt-2">
            –û—Ç: {fromAddress} ‚Üí –î–æ: {toAddress}
          </div>
        )}
      </div>
      
      <div className="border border-gray-300 rounded-lg overflow-hidden">
        <div
          ref={mapRef}
          style={{ width: '100%', height: '250px' }}
          className="bg-gray-100"
        />
      </div>
    </div>
  );
};

export default SimpleRouteMap;