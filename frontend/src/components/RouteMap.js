import React, { useEffect, useRef, useState } from 'react';
import { MapPin, Navigation, Clock, Calculator } from 'lucide-react';

const RouteMap = ({ fromAddress, toAddress, warehouseName, onRouteCalculated }) => {
  const mapRef = useRef(null);
  const [map, setMap] = useState(null);
  const [route, setRoute] = useState(null);
  const [distance, setDistance] = useState('');
  const [duration, setDuration] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!mapRef.current || map) return;

    const initMap = async () => {
      try {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API
        await new Promise((resolve) => {
          if (window.ymaps && window.ymaps.ready) {
            window.ymaps.ready(resolve);
          } else {
            // –ï—Å–ª–∏ API –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            const script = document.createElement('script');
            script.src = `https://api-maps.yandex.ru/2.1/?apikey=${process.env.REACT_APP_YANDEX_MAPS_API_KEY}&lang=ru_RU`;
            script.onload = () => {
              window.ymaps.ready(resolve);
            };
            document.head.appendChild(script);
          }
        });

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        const ymaps = window.ymaps;
        const newMap = new ymaps.Map(mapRef.current, {
          center: [38.5736, 68.7870], // –¶–µ–Ω—Ç—Ä –î—É—à–∞–Ω–±–µ
          zoom: 10,
          controls: ['zoomControl', 'fullscreenControl']
        });

        setMap(newMap);
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
      }
    };

    initMap();
  }, []);

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    if (!map || !fromAddress || !toAddress) return;

    const buildRoute = async () => {
      setLoading(true);
      setError('');
      setDistance('');
      setDuration('');

      try {
        const ymaps = window.ymaps;

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
        if (route) {
          map.geoObjects.remove(route);
        }

        console.log(`üó∫Ô∏è –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç "${fromAddress}" –¥–æ "${toAddress}"`);

        // –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–º–∞—Ä—à—Ä—É—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        const multiRoute = new ymaps.multiRouter.MultiRoute({
          referencePoints: [fromAddress, toAddress],
          params: {
            routingMode: 'auto', // –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
            avoidTrafficJams: false
          }
        }, {
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞
          boundsAutoApply: true,
          routeActiveStrokeWidth: 4,
          routeActiveStrokeColor: '#3B82F6', // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
          routeInactiveStrokeWidth: 3,
          routeInactiveStrokeColor: '#94A3B8', // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
          wayPointDraggable: false,
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–æ—á–µ–∫
          wayPointIconLayout: 'default#imageWithContent',
          wayPointIconImageHref: '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
          wayPointIconImageSize: [30, 42],
          wayPointIconImageOffset: [-15, -42],
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π –º–∞—Ä–∫–µ—Ä–æ–≤
          wayPointIconContentLayout: ymaps.templateLayoutFactory.createClass(
            '<div style="color: #fff; font-weight: bold; text-align: center; margin-top: 5px;">{{ properties.iconContent }}</div>'
          )
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç—É
        map.geoObjects.add(multiRoute);
        setRoute(multiRoute);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        multiRoute.model.events.add('requestsuccess', () => {
          console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω');
          const activeRoute = multiRoute.getActiveRoute();
          if (activeRoute) {
            // –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—Ä—à—Ä—É—Ç–∞
            const distanceValue = activeRoute.properties.get('distance');
            const durationObj = activeRoute.properties.get('duration');

            console.log('üìè –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞:', { 
              distance: distanceValue, 
              duration: durationObj 
            });

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            let distanceText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            if (typeof distanceValue === 'number' && !isNaN(distanceValue)) {
              distanceText = distanceValue >= 1000 
                ? `${(distanceValue / 1000).toFixed(1)} –∫–º`
                : `${Math.round(distanceValue)} –º`;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            let durationText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            if (durationObj && typeof durationObj.value === 'number') {
              const totalMinutes = Math.round(durationObj.value / 60);
              const hours = Math.floor(totalMinutes / 60);
              const minutes = totalMinutes % 60;
              durationText = hours > 0 
                ? `${hours} —á ${minutes} –º–∏–Ω`
                : `${minutes} –º–∏–Ω`;
            } else if (durationObj && typeof durationObj.text === 'string') {
              durationText = durationObj.text;
            }

            setDistance(distanceText);
            setDuration(durationText);

            // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
            if (onRouteCalculated) {
              onRouteCalculated({
                distance: distanceText,
                duration: durationText,
                distanceValue: distanceValue || 0,
                durationValue: durationObj?.value || 0
              });
            }

            console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç: ${distanceText}, –≤—Ä–µ–º—è: ${durationText}`);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            const startPlacemark = new ymaps.Placemark(activeRoute.geometry.get(0), {
              balloonContent: `<strong>–¢–æ—á–∫–∞ –ê:</strong><br/>${fromAddress}`,
              iconContent: '–ê'
            }, {
              preset: 'islands#redStretchyIcon',
              iconColor: '#ff0000'
            });

            const endPoint = activeRoute.geometry.get(activeRoute.geometry.getLength() - 1);
            const endPlacemark = new ymaps.Placemark(endPoint, {
              balloonContent: `<strong>–¢–æ—á–∫–∞ –ë:</strong><br/>${toAddress}`,
              iconContent: '–ë'
            }, {
              preset: 'islands#greenStretchyIcon', 
              iconColor: '#00ff00'
            });

            map.geoObjects.add(startPlacemark);
            map.geoObjects.add(endPlacemark);
          }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        multiRoute.model.events.add('requestfail', (e) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', e);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤.');
        });

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        setError('–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
      } finally {
        setLoading(false);
      }
    };

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const debounceTimer = setTimeout(buildRoute, 1000);
    return () => clearTimeout(debounceTimer);
  }, [map, fromAddress, toAddress, route]);

  return (
    <div className="space-y-3">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
        <div className="flex items-center mb-2">
          <Navigation className="h-4 w-4 text-blue-600 mr-2" />
          <span className="font-medium text-blue-900">–ú–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏</span>
        </div>
        
        <div className="space-y-2 text-sm">
          <div className="flex items-start">
            <div className="bg-red-100 text-red-700 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2 mt-0.5">
              –ê
            </div>
            <div>
              <span className="font-medium text-red-800">–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞:</span>
              <p className="text-gray-700">{fromAddress}</p>
            </div>
          </div>
          
          <div className="flex items-start">
            <div className="bg-green-100 text-green-700 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mr-2 mt-0.5">
              –ë
            </div>
            <div>
              <span className="font-medium text-green-800">{warehouseName}:</span>
              <p className="text-gray-700">{toAddress}</p>
            </div>
          </div>
        </div>

        {loading && (
          <div className="flex items-center mt-3 text-blue-600">
            <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-600 border-t-transparent mr-2"></div>
            <span className="text-sm">–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞...</span>
          </div>
        )}

        {error && (
          <div className="mt-3 text-red-600 text-sm">
            ‚ö†Ô∏è {error}
          </div>
        )}

        {distance && duration && !loading && !error && (
          <div className="flex items-center justify-between mt-3 pt-3 border-t border-blue-200">
            <div className="flex items-center text-blue-700">
              <Calculator className="h-4 w-4 mr-1" />
              <span className="font-medium">{distance}</span>
            </div>
            <div className="flex items-center text-blue-700">
              <Clock className="h-4 w-4 mr-1" />
              <span className="font-medium">{duration}</span>
            </div>
          </div>
        )}
      </div>

      {/* –ö–∞—Ä—Ç–∞ */}
      <div className="border border-gray-300 rounded-lg overflow-hidden">
        <div
          ref={mapRef}
          style={{ width: '100%', height: '300px' }}
          className="bg-gray-100"
        />
      </div>
    </div>
  );
};

export default RouteMap;