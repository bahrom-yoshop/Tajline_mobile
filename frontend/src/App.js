import React, { useState, useEffect, useRef } from 'react';
import { Html5QrcodeScanner, Html5Qrcode, Html5QrcodeScannerState, Html5QrcodeScanType } from "html5-qrcode";
import './App.css';
import { Button } from './components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Input } from './components/ui/input';
import { Label } from './components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';
import { Badge } from './components/ui/badge';
import { Alert, AlertDescription } from './components/ui/alert';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from './components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './components/ui/select';
import { Textarea } from './components/ui/textarea';
import { Checkbox } from './components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './components/ui/table';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from './components/ui/dropdown-menu';
import DataPagination from './components/DataPagination'; // Новый компонент пагинации
import YandexMap from './components/YandexMap'; // Компонент Яндекс.Карт
import CourierGPSTracker from './components/CourierGPSTracker'; // Компонент GPS отслеживания
import CourierTrackingMap from './components/CourierTrackingMap'; // Компонент карты отслеживания курьеров
import CourierHistoryAnalytics from './components/CourierHistoryAnalytics'; // Компонент истории и аналитики курьеров
import RouteMap from './components/RouteMap'; // Компонент карты маршрута для оформления груза
import SimpleRouteMap from './components/SimpleRouteMap'; // Простая тестовая карта
import { 
  Truck, Package, Users, Bell, Search, Plus, Edit, Trash2, CheckCircle, 
  Clock, MapPin, User, Shield, Warehouse, Menu, X, Building, 
  DollarSign, FileText, Grid3X3, Package2, Home, CreditCard, Printer, Zap, MessageCircle,
  QrCode, Camera, Download, Calculator, ShoppingCart, RefreshCw, Eye, XCircle, Save, Filter,
  ArrowUp, Ban, Settings, Copy, Minus, Palette, UserCheck, BarChart, Maximize, ArrowLeft, Edit3, BarChart3,
  Scan, Target, MousePointer, Phone, MessageSquare, Send, ExternalLink, UserX, Lock, Grid, List
} from 'lucide-react';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;

function App() {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('token'));
  // Navigation states
  const [activeTab, setActiveTab] = useState('dashboard');
  const [activeSection, setActiveSection] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [currentPage, setCurrentPage] = useState('main'); // 'main', 'cargo-placement'
  
  // НОВОЕ: Состояние для предотвращения показа старых данных при перезагрузке
  const [isInitializing, setIsInitializing] = useState(true);
  const [dataLoaded, setDataLoaded] = useState(false);
  
  const [notifications, setNotifications] = useState([]);
  const [warehouseNotifications, setWarehouseNotifications] = useState([]);
  const [allPickupRequests, setAllPickupRequests] = useState([]);
  const [pickupRequestsHistory, setPickupRequestsHistory] = useState([]);
  const [showCargoAcceptanceModal, setShowCargoAcceptanceModal] = useState(false);
  const [currentCargoNotification, setCurrentCargoNotification] = useState(null);
  const [showAllNotifications, setShowAllNotifications] = useState(false);
  const [showAllNewRequests, setShowAllNewRequests] = useState(false);
  const [showAllAcceptedRequests, setShowAllAcceptedRequests] = useState(false);
  const [cargoAcceptanceForm, setCargoAcceptanceForm] = useState({
    sender_full_name: '',
    sender_phone: '',
    sender_address: '',
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    cargo_items: [{ name: '', weight: '', price: '' }],
    payment_method: '',
    delivery_method: '',
    payment_status: 'not_paid',
    amount_paid: '',
    payment_notes: ''
  });

  // НОВОЕ: Состояние для информации о маршруте при оформлении груза
  const [routeInfo, setRouteInfo] = useState({
    distance: '',
    duration: '',
    distanceValue: 0,
    durationValue: 0
  });

  const [cargo, setCargo] = useState([]);
  const [users, setUsers] = useState([]);
  const [usersPagination, setUsersPagination] = useState({}); // Пагинация для пользователей
  const [usersPage, setUsersPage] = useState(1);
  const [usersPerPage, setUsersPerPage] = useState(25);
  const [warehouses, setWarehouses] = useState([]);
  const [warehousesStatistics, setWarehousesStatistics] = useState({}); // Статистика складов
  const [warehouseCargo, setWarehouseCargo] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [trackingNumber, setTrackingNumber] = useState('');
  const [trackingResult, setTrackingResult] = useState(null);
  
  // Состояние для модального окна статуса пользователя
  const [userStatusModal, setUserStatusModal] = useState(false);
  const [userStatusData, setUserStatusData] = useState(null);
  
  // Состояние для модального окна ошибок авторизации
  const [loginErrorModal, setLoginErrorModal] = useState(false);
  const [loginErrorData, setLoginErrorData] = useState(null);
  
  // Тестовое состояние для простого модального окна (для диагностики)
  const [testModal, setTestModal] = useState(false);
  
  // Ref для предотвращения React state batching при ошибках авторизации
  const loginErrorRef = useRef({ modal: false, data: null });

  // Новые состояния для клиентского дашборда (Функция 1)
  const [clientDashboard, setClientDashboard] = useState(null);
  const [clientCargo, setClientCargo] = useState([]);
  const [clientCargoDetails, setClientCargoDetails] = useState(null);

  // Новые состояния для создания оператора (Функция 2)
  const [operatorCreateForm, setOperatorCreateForm] = useState({
    full_name: '',
    phone: '',
    address: '',
    password: '',
    warehouse_id: ''
  });
  const [operatorCreationModal, setOperatorCreationModal] = useState(false);
  const [allOperators, setAllOperators] = useState([]);

  // НОВЫЕ СОСТОЯНИЯ ДЛЯ КУРЬЕРСКОЙ СЛУЖБЫ (ЭТАП 2)
  const [couriers, setCouriers] = useState([]);
  const [inactiveCouriers, setInactiveCouriers] = useState([]);
  const [couriersPagination, setCouriersPagination] = useState({});
  const [couriersPage, setCouriersPage] = useState(1);
  const [couriersPerPage, setCouriersPerPage] = useState(25);
  const [showInactiveCouriers, setShowInactiveCouriers] = useState(false); // Новое состояние для показа неактивных курьеров
  const [courierCreateForm, setCourierCreateForm] = useState({
    full_name: '',
    phone: '',
    password: '',
    address: '',
    transport_type: 'car',
    transport_number: '',
    transport_capacity: '',
    assigned_warehouse_id: ''
  });
  const [courierCreateModal, setCourierCreateModal] = useState(false);
  const [selectedCourier, setSelectedCourier] = useState(null);
  const [courierProfileModal, setCourierProfileModal] = useState(false);
  
  // НОВЫЕ СОСТОЯНИЯ ДЛЯ МОДАЛЬНЫХ ОКОН ПРОСМОТРА И РЕДАКТИРОВАНИЯ ЗАЯВОК
  const [requestViewModal, setRequestViewModal] = useState(false);
  const [requestEditModal, setRequestEditModal] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [senderContactModal, setSenderContactModal] = useState(false);
  const [contactSender, setContactSender] = useState(null);
  const [requestEditForm, setRequestEditForm] = useState({
    sender_full_name: '',
    sender_phone: '',
    sender_address: '',
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    cargo_items: [{
      name: '',
      weight: '',
      price_per_kg: '',
      total_price: ''
    }],
    total_weight: '',
    total_value: '',
    payment_method: 'not_paid',
    payment_received: false,
    delivery_method: 'pickup',
    pickup_address: '',
    pickup_date: '',
    pickup_time: '',
    special_instructions: ''
  });
  const [courierEditForm, setCourierEditForm] = useState({}); 
  const [courierEditModal, setCourierEditModal] = useState(false);
  const [courierRequests, setCourierRequests] = useState([]);
  const [availableCouriers, setAvailableCouriers] = useState([]);
  
  // НОВОЕ: Состояние для мобильного меню курьера
  const [courierMobileMenuOpen, setCourierMobileMenuOpen] = useState(false);
  
  // НОВОЕ: Состояние для интерактивной карты
  const [isMapOpen, setIsMapOpen] = useState(false);
  
  // НОВОЕ: Состояния для модального окна управления ячейками
  const [cellManagementModal, setCellManagementModal] = useState(false);
  const [selectedWarehouseForCells, setSelectedWarehouseForCells] = useState(null);
  const [cellsLoading, setCellsLoading] = useState(false);
  const [cellEditForm, setCellEditForm] = useState({
    blocks_count: '',
    shelves_per_block: '',
    cells_per_shelf: ''
  });
  
  // НОВОЕ: Состояние для модального окна QR кода ячейки
  const [cellQRModal, setCellQRModal] = useState(false);
  const [isAcceptedMapOpen, setIsAcceptedMapOpen] = useState(false);
  
  // НОВОЕ: Состояние для GPS отслеживания курьера
  const [courierTracking, setCourierTracking] = useState({
    isTracking: false,
    status: 'offline', // offline, online, on_route, at_pickup, at_delivery, busy
    lastUpdate: null,
    coordinates: null,
    accuracy: null,
    watchId: null,
    error: null,
    updateInterval: null
  });

  // НОВОЕ: Состояние для режима забора груза
  const [isPickupMode, setIsPickupMode] = useState(false);
  // НОВОЕ: Состояние для формы приёма груза через оператора
  const [showOperatorCargoForm, setShowOperatorCargoForm] = useState(false);
  const [senderPhones, setSenderPhones] = useState(['']); // Массив телефонов отправителя
  
  // НОВЫЕ СОСТОЯНИЯ ДЛЯ УЛУЧШЕНИЙ ИНТЕРФЕЙСА КУРЬЕРА
  const [courierChatModal, setCourierChatModal] = useState(false);
  const [courierProfileEditForm, setCourierProfileEditForm] = useState({
    full_name: '',
    phone: '',
    address: '',
    current_password: '',
    new_password: '',
    confirm_password: ''
  });

  // Новые состояния для оформления груза клиентами
  const [cargoOrderForm, setCargoOrderForm] = useState({
    cargo_name: '',
    description: '',
    weight: '',
    declared_value: '80', // По умолчанию для Москва → Душанбе
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    recipient_city: '',
    route: 'moscow_dushanbe',
    delivery_type: 'standard',
    insurance_requested: false,
    insurance_value: '',
    packaging_service: false,
    home_pickup: false,
    home_delivery: false,
    fragile: false,
    temperature_sensitive: false,
    special_instructions: ''
  });
  const [deliveryOptions, setDeliveryOptions] = useState(null);
  const [costCalculation, setCostCalculation] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);
  const [cargoOrderResult, setCargoOrderResult] = useState(null);

  // НОВЫЕ ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ЗАКАЗАМИ КЛИЕНТОВ

  // Функция для установки объявленной стоимости по умолчанию в зависимости от маршрута
  const getDefaultDeclaredValue = (route) => {
    switch(route) {
      case 'moscow_khujand':
        return '60'; // Москва → Худжанд: 60 рублей
      case 'moscow_dushanbe':
        return '80'; // Москва → Душанбе: 80 рублей
      case 'moscow_kulob':
        return '80'; // Москва → Кулоб: 80 рублей 
      case 'moscow_kurgantyube':
        return '80'; // Москва → Курган-Тюбе: 80 рублей
      case 'moscow_to_tajikistan':
        return '80'; // По умолчанию для общего маршрута
      default:
        return '80'; // По умолчанию
    }
  };

  // ФУНКЦИЯ ОЧИСТКИ ВСЕХ ДАННЫХ ПРИЛОЖЕНИЯ
  const clearAllAppData = () => {
    console.log('🧹 Clearing all app data...');
    setCargo([]);
    setUsers([]);
    setWarehouses([]);
    setOperatorCargo([]);
    setAvailableCargo([]);
    setCargoHistory([]);
    setUnpaidCargo([]);
    setPaymentHistory([]);
    setNotifications([]);
    setWarehouseNotifications([]);
    setAllPickupRequests([]);
    setPickupRequestsHistory([]);
    setUsersByRole({ user: [], admin: [], warehouse_operator: [] });
    setTransports([]);
    setSelectedTransport(null);
    setTransportCargoList([]);
    setAvailableCargoForTransport([]);
    setSelectedCargoForPlacement([]);
    setOperatorWarehouseBindings([]);
    setCouriers([]);
    setAcceptedRequests([]);
    setPickedRequests([]);
    setCancelledRequests([]);
    setAvailableCouriers([]);
    setCourierRequests([]);
    setClientCargo([]);
    setClientDashboard(null);
    setAllOperators([]);
    setCargoBreakdown([]);
    setDebtorsList([]);
    setWarehouseSchemeData([]);
    setWarehouseCells([]);
    // ИСПРАВЛЕНИЕ: Очистка аналитики оператора для предотвращения показа старых данных
    setOperatorDashboardAnalytics(null);
    setAdminDashboardAnalytics(null);
    setDataLoaded(false);
  };

  // ФУНКЦИИ УПРАВЛЕНИЯ ЯЧЕЙКАМИ СКЛАДА
  const openCellManagement = (warehouse) => {
    setSelectedWarehouseForCells(warehouse);
    setCellEditForm({
      blocks_count: warehouse.blocks_count || '',
      shelves_per_block: warehouse.shelves_per_block || '',
      cells_per_shelf: warehouse.cells_per_shelf || ''
    });
    setCellManagementModal(true);
    fetchWarehouseCells(warehouse.id);
  };

  const fetchWarehouseCells = async (warehouseId) => {
    setCellsLoading(true);
    try {
      const response = await apiCall(`/api/warehouses/${warehouseId}/cells`, 'GET');
      setWarehouseCells(response.cells || []);
    } catch (error) {
      console.error('Error fetching warehouse cells:', error);
      showAlert('Ошибка загрузки ячеек: ' + error.message, 'error');
      setWarehouseCells([]);
    } finally {
      setCellsLoading(false);
    }
  };

  const handleUpdateWarehouseStructure = async () => {
    if (!selectedWarehouseForCells) return;
    
    try {
      const updateData = {
        blocks_count: parseInt(cellEditForm.blocks_count),
        shelves_per_block: parseInt(cellEditForm.shelves_per_block),
        cells_per_shelf: parseInt(cellEditForm.cells_per_shelf)
      };
      
      await apiCall(`/api/warehouses/${selectedWarehouseForCells.id}/structure`, 'PUT', updateData);
      
      showAlert('Структура склада успешно обновлена', 'success');
      
      // Обновляем данные
      fetchWarehouses();
      fetchWarehouseCells(selectedWarehouseForCells.id);
      
    } catch (error) {
      console.error('Error updating warehouse structure:', error);
      showAlert('Ошибка обновления структуры: ' + error.message, 'error');
    }
  };

  const handleGenerateCellQR = async (cellId, cellLocation) => {
    try {
      setGeneratingSelectedCellQR(true);
      const response = await apiCall(`/api/warehouses/cells/${cellId}/qr`, 'GET');
      
      // Устанавливаем данные для модального окна
      setSelectedCellQR({
        cellId: cellId,
        cellLocation: cellLocation,
        warehouseName: selectedWarehouseForCells?.name || 'Склад',
        qrCode: response.qr_code,
        qrData: response.qr_data
      });
      
      setCellQRModal(true);
      
    } catch (error) {
      console.error('Error generating cell QR:', error);
      showAlert('Ошибка генерации QR кода: ' + error.message, 'error');
    } finally {
      setGeneratingSelectedCellQR(false);
    }
  };
  
  const handlePrintCellQR = () => {
    if (!selectedCellQR) return;
    
    // Создаем улучшенный шаблон печати с минимальными отступами
    const qrWindow = window.open('', '_blank');
    if (qrWindow) {
      qrWindow.document.write(`
        <html>
          <head>
            <title>QR код ячейки ${selectedCellQR.cellLocation}</title>
            <style>
              body { 
                font-family: Arial, sans-serif; 
                text-align: center; 
                margin: 0;
                padding: 10px;
                background: white;
              }
              .qr-container { 
                display: inline-block;
                border: 1px solid #ddd;
                padding: 15px;
                background: white;
              }
              .cell-location { 
                font-size: 24px; 
                font-weight: bold; 
                margin-bottom: 5px;
                color: #333;
              }
              .qr-code { 
                margin: 5px 0;
              }
              .qr-data {
                font-size: 14px;
                color: #666;
                margin-top: 5px;
              }
              @media print {
                body { margin: 0; padding: 5px; }
                .qr-container { border: none; }
              }
            </style>
          </head>
          <body>
            <div class="qr-container">
              <div class="cell-location">${selectedCellQR.cellLocation}</div>
              <div class="qr-code">
                <img src="${selectedCellQR.qrCode}" alt="QR код ячейки" style="width: 200px; height: 200px;" />
              </div>
              <div class="qr-data">Код: ${selectedCellQR.qrData || 'N/A'}</div>
            </div>
            <script>
              window.onload = function() {
                setTimeout(function() {
                  window.print();
                }, 500);
              }
            </script>
          </body>
        </html>
      `);
      qrWindow.document.close();
    }
  };

  const handleGenerateAllCellsQR = async () => {
    if (!selectedWarehouseForCells) return;
    
    try {
      const response = await apiCall(`/api/warehouses/${selectedWarehouseForCells.id}/cells/qr-batch`, 'GET');
      
      // Открываем окно с массовыми QR кодами
      const qrWindow = window.open('', '_blank');
      if (qrWindow) {
        let qrContent = `
          <html>
            <head>
              <title>QR коды всех ячеек - ${selectedWarehouseForCells.name}</title>
              <style>
                body { 
                  font-family: Arial, sans-serif; 
                  padding: 20px; 
                }
                .warehouse-title { 
                  text-align: center; 
                  font-size: 24px; 
                  font-weight: bold; 
                  margin-bottom: 30px; 
                }
                .qr-grid { 
                  display: grid; 
                  grid-template-columns: repeat(3, 1fr); 
                  gap: 20px; 
                  page-break-inside: avoid; 
                }
                .qr-item { 
                  text-align: center; 
                  border: 1px solid #ddd; 
                  padding: 10px; 
                  page-break-inside: avoid; 
                }
                .cell-label { 
                  font-weight: bold; 
                  margin-bottom: 5px; 
                }
                @media print { 
                  .qr-grid { grid-template-columns: repeat(2, 1fr); } 
                }
              </style>
            </head>
            <body>
              <div class="warehouse-title">QR коды ячеек - ${selectedWarehouseForCells.name}</div>
              <div class="qr-grid">
        `;
        
        response.qr_codes.forEach(item => {
          qrContent += `
            <div class="qr-item">
              <div class="cell-label">${item.cell_location}</div>
              <img src="${item.qr_code}" alt="QR код ${item.cell_location}" style="max-width: 150px; height: auto;" />
            </div>
          `;
        });
        
        qrContent += `
              </div>
              <div style="text-align: center; margin-top: 20px;">
                <button onclick="window.print()">Печать всех QR кодов</button>
              </div>
            </body>
          </html>
        `;
        
        qrWindow.document.write(qrContent);
        qrWindow.document.close();
      }
      
    } catch (error) {
      console.error('Error generating batch QR codes:', error);
      showAlert('Ошибка массовой генерации QR кодов: ' + error.message, 'error');
    }
  };

  const handleDeleteSelectedCells = async () => {
    if (selectedCells.length === 0) {
      showAlert('Выберите ячейки для удаления', 'warning');
      return;
    }
    
    if (!confirm(`Удалить ${selectedCells.length} выбранных ячеек?`)) {
      return;
    }
    
    try {
      await apiCall(`/api/warehouses/${selectedWarehouseForCells.id}/cells/batch-delete`, 'POST', {
        cell_ids: selectedCells
      });
      
      showAlert(`Удалено ${selectedCells.length} ячеек`, 'success');
      
      // Обновляем данные
      fetchWarehouseCells(selectedWarehouseForCells.id);
      fetchWarehouses();
      setSelectedCells([]);
      
    } catch (error) {
      console.error('Error deleting cells:', error);
      showAlert('Ошибка удаления ячеек: ' + error.message, 'error');
    }
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ КУРЬЕРСКОЙ СЛУЖБЫ (ЭТАП 2)
  const fetchCouriers = async (page = 1, perPage = 25) => {
    try {
      // ОБНОВЛЕНО: Добавляем параметр show_inactive для показа неактивных курьеров
      const params = new URLSearchParams({
        page: page.toString(),
        per_page: perPage.toString()
      });
      
      // Только админы могут видеть неактивных курьеров
      if (showInactiveCouriers && user?.role === 'admin') {
        params.append('show_inactive', 'true');
      }
      
      const data = await apiCall(`/api/admin/couriers/list?${params.toString()}`);
      setCouriers(data.items || []);
      setCouriersPagination(data.pagination || {});
      
      console.log(`📋 Загружены курьеры (стр. ${page}): ${(data.items || []).length} курьеров${showInactiveCouriers ? ' (включая неактивных)' : ' (только активные)'}`);
    } catch (error) {
      console.error('Error fetching couriers:', error);
      showAlert('Ошибка загрузки курьеров: ' + error.message, 'error');
    }
  };

  const handleCreateCourier = async (e) => {
    e.preventDefault();
    
    // Валидация формы
    if (!courierCreateForm.full_name.trim()) {
      showAlert('Заполните ФИО курьера', 'error');
      return;
    }
    
    if (!courierCreateForm.phone.trim()) {
      showAlert('Заполните телефон курьера', 'error');
      return;
    }
    
    if (!courierCreateForm.password.trim()) {
      showAlert('Заполните пароль курьера', 'error');
      return;
    }
    
    if (!courierCreateForm.assigned_warehouse_id) {
      showAlert('Выберите склад для курьера', 'error');
      return;
    }

    try {
      const response = await apiCall('/api/admin/couriers/create', 'POST', courierCreateForm);
      
      showAlert('Курьер успешно создан!', 'success');
      
      // Показать учетные данные
      if (response.login_credentials) {
        showAlert(`Учетные данные курьера: ${response.login_credentials.phone} / ${response.login_credentials.password}`, 'info');
      }
      
      // Сброс формы
      setCourierCreateForm({
        full_name: '',
        phone: '',
        password: '',
        address: '',
        transport_type: 'car',
        transport_number: '',
        transport_capacity: '',
        assigned_warehouse_id: ''
      });
      
      setCourierCreateModal(false);
      fetchCouriers(couriersPage, couriersPerPage);
      
    } catch (error) {
      console.error('Error creating courier:', error);
      showAlert('Ошибка создания курьера: ' + error.message, 'error');
    }
  };

  const handleViewCourierProfile = async (courierId) => {
    try {
      const data = await apiCall(`/api/admin/couriers/${courierId}`);
      setSelectedCourier(data);
      setCourierProfileModal(true);
    } catch (error) {
      console.error('Error fetching courier profile:', error);
      showAlert('Ошибка загрузки профиля курьера: ' + error.message, 'error');
    }
  };

  const handleEditCourier = (courier) => {
    setCourierEditForm({
      full_name: courier.full_name,
      phone: courier.phone,
      address: courier.address,
      transport_type: courier.transport_type,
      transport_number: courier.transport_number,
      transport_capacity: courier.transport_capacity,
      assigned_warehouse_id: courier.assigned_warehouse_id,
      password: 'unchanged' // Пароль не показываем для безопасности
    });
    setSelectedCourier(courier);
    setCourierEditModal(true);
  };

  const handleUpdateCourier = async (e) => {
    e.preventDefault();
    if (!selectedCourier) return;

    try {
      // Убираем пароль если он не изменился
      const updateData = { ...courierEditForm };
      if (updateData.password === 'unchanged') {
        delete updateData.password;
      }

      await apiCall(`/api/admin/couriers/${selectedCourier.id}`, 'PUT', updateData);
      
      showAlert('Профиль курьера обновлен!', 'success');
      setCourierEditModal(false);
      fetchCouriers(couriersPage, couriersPerPage);
      
      // Если открыт профиль, обновляем его
      if (courierProfileModal) {
        handleViewCourierProfile(selectedCourier.id);
      }
      
    } catch (error) {
      console.error('Error updating courier:', error);
      showAlert('Ошибка обновления курьера: ' + error.message, 'error');
    }
  };

  // Функция для получения неактивных курьеров
  const fetchInactiveCouriers = async () => {
    try {
      console.log('📋 Загружаем список неактивных курьеров...');
      const data = await apiCall('/api/admin/couriers/inactive');
      setInactiveCouriers(data.inactive_couriers || []);
      console.log(`📋 Загружены неактивные курьеры: ${(data.inactive_couriers || []).length} курьеров`);
    } catch (error) {
      console.error('Ошибка при загрузке неактивных курьеров:', error);
      setInactiveCouriers([]);
      showAlert('Ошибка при загрузке неактивных курьеров', 'error');
    }
  };

  // Функция активации курьера
  const handleActivateCourier = async (courierId, courierName) => {
    if (!window.confirm(`Вы уверены, что хотите активировать курьера "${courierName}"? После активации курьер сможет снова принимать заявки.`)) {
      return;
    }

    try {
      const response = await apiCall(`/api/admin/couriers/${courierId}/activate`, 'POST');
      showAlert(response.message || `Курьер "${courierName}" успешно активирован`, 'success');
      
      // ИСПРАВЛЕНИЕ: Принудительно обновляем список активных курьеров без неактивных
      const currentShowInactive = showInactiveCouriers;
      if (currentShowInactive) {
        // Временно отключаем показ неактивных для загрузки только активных
        setShowInactiveCouriers(false);
        
        // Ждем обновления состояния, затем загружаем активных курьеров
        setTimeout(async () => {
          await fetchCouriers();
          // Восстанавливаем предыдущую настройку
          setShowInactiveCouriers(currentShowInactive);
        }, 100);
      } else {
        // Если неактивные не показывались, просто обновляем список
        await fetchCouriers();
      }
      
      // Обновляем список неактивных курьеров
      await fetchInactiveCouriers();
      
      console.log(`✅ Курьер ${courierName} активирован и списки обновлены`);
    } catch (error) {
      console.error('Ошибка при активации курьера:', error);
      showAlert(`Ошибка при активации курьера: ${error.message}`, 'error');
    }
  };

  // Функция полного удаления курьера
  const handlePermanentDeleteCourier = async (courierId, courierName) => {
    if (!window.confirm(`⚠️ ВНИМАНИЕ: Полное удаление курьера "${courierName}"!\n\nЭто действие НЕОБРАТИМО и полностью удалит:\n• Данные курьера из системы\n• Связанного пользователя\n• Историю местоположений\n\nВы уверены?`)) {
      return;
    }

    // Двойное подтверждение для критического действия
    if (!window.confirm(`Последнее подтверждение: удалить курьера "${courierName}" НАВСЕГДА?`)) {
      return;
    }

    try {
      const response = await apiCall(`/api/admin/couriers/${courierId}/permanent`, 'DELETE');
      showAlert(response.message || `Курьер "${courierName}" полностью удален из системы`, 'success');
      
      // ИСПРАВЛЕНИЕ: Корректное обновление списков
      const currentShowInactive = showInactiveCouriers;
      if (currentShowInactive) {
        // Временно отключаем показ неактивных для загрузки только активных
        setShowInactiveCouriers(false);
        
        // Ждем обновления состояния, затем загружаем активных курьеров
        setTimeout(async () => {
          await fetchCouriers();
          // Восстанавливаем предыдущую настройку
          setShowInactiveCouriers(currentShowInactive);
        }, 100);
      } else {
        // Если неактивные не показывались, просто обновляем список
        await fetchCouriers();
      }
      
      // Обновляем список неактивных курьеров
      await fetchInactiveCouriers();
      
      console.log(`✅ Курьер ${courierName} полностью удален и списки обновлены`);
    } catch (error) {
      console.error('Ошибка при удалении курьера:', error);
      showAlert(`Ошибка при удалении курьера: ${error.message}`, 'error');
    }
  };
  const handleDeleteCourier = async (courier) => {
    try {
      console.log('🗑️ Начинаем удаление курьера:', courier.full_name);
      
      // Подтверждение удаления
      const confirmDelete = window.confirm(
        `Вы уверены, что хотите удалить курьера "${courier.full_name}"?\n\n` +
        `Телефон: ${courier.phone}\n` +
        `Транспорт: ${courier.transport_type} ${courier.transport_number}\n` +
        `Склад: ${courier.assigned_warehouse_name}\n\n` +
        `Это действие нельзя отменить.`
      );
      
      if (!confirmDelete) {
        console.log('❌ Удаление курьера отменено пользователем');
        return;
      }
      
      console.log('🔄 Выполняем запрос удаления курьера с ID:', courier.id);
      
      // Выполняем удаление
      await apiCall(`/api/admin/couriers/${courier.id}`, 'DELETE');
      
      console.log('✅ Курьер успешно удален:', courier.full_name);
      showAlert(`Курьер "${courier.full_name}" успешно удален!`, 'success');
      
      // Обновляем список курьеров
      await fetchCouriers(couriersPage, couriersPerPage);
      
      // Если был открыт профиль удаленного курьера, закрываем его
      if (courierProfileModal && selectedCourier?.id === courier.id) {
        setCourierProfileModal(false);
        setSelectedCourier(null);
      }
      
      // Если был открыт редактор удаленного курьера, закрываем его
      if (courierEditModal && selectedCourier?.id === courier.id) {
        setCourierEditModal(false);
        setSelectedCourier(null);
      }
      
    } catch (error) {
      console.error('❌ Error deleting courier:', error);
      showAlert(`Ошибка удаления курьера: ${error.message}`, 'error');
    }
  };

  const fetchAvailableCouriersForWarehouse = async (warehouseId) => {
    try {
      const data = await apiCall(`/api/admin/couriers/available/${warehouseId}`);
      setAvailableCouriers(data.couriers || []);
    } catch (error) {
      console.error('Error fetching available couriers:', error);
      showAlert('Ошибка загрузки доступных курьеров: ' + error.message, 'error');
    }
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ ЛИЧНОГО КАБИНЕТА КУРЬЕРА (ЭТАП 3)
  const fetchCourierNewRequests = async () => {
    try {
      const data = await apiCall('/api/courier/requests/new');
      setCourierRequests(data.new_requests || []);
      
      // Обновляем информацию о курьере
      if (data.courier_info) {
        setSelectedCourier(data.courier_info);
      }
    } catch (error) {
      console.error('Error fetching courier new requests:', error);
      showAlert('Ошибка загрузки новых заявок: ' + error.message, 'error');
    }
  };

  const handleAcceptCourierRequest = async (requestId) => {
    try {
      const response = await apiCall(`/api/courier/requests/${requestId}/accept`, 'POST');
      
      showAlert('Заявка принята! Теперь вы можете забрать груз.', 'success');
      
      // Автоматически обновляем все списки заявок для реактивного обновления
      await Promise.all([
        fetchCourierNewRequests(),     // Обновляем новые заявки (заявка исчезнет отсюда)
        fetchAcceptedRequests(),       // Обновляем принятые заявки (заявка появится здесь)
        fetchPickedRequests(),         // Обновляем забранные заявки
        fetchCancelledRequests()       // Обновляем отмененные заявки
      ]);
      
      // Если это заявка на забор груза, показываем дополнительную информацию
      if (response?.request_type === 'pickup') {
        showAlert('Заявка на забор груза принята! Вы можете найти её в разделе "Принятые заявки".', 'success');
      }
      
    } catch (error) {
      console.error('Error accepting courier request:', error);
      showAlert('Ошибка принятия заявки: ' + error.message, 'error');
    }
  };

  const handleCancelCourierRequest = async (requestId, reason = 'Отменено курьером') => {
    try {
      await apiCall(`/api/courier/requests/${requestId}/cancel`, 'POST', {
        reason: reason
      });
      
      showAlert('Заявка отменена. Оператор получит уведомление.', 'warning');
      
      // Обновляем список заявок
      fetchCourierNewRequests();
      
    } catch (error) {
      console.error('Error cancelling courier request:', error);
      showAlert('Ошибка отмены заявки: ' + error.message, 'error');
    }
  };

  const fetchCourierRequestsHistory = async (page = 1, perPage = 20) => {
    try {
      const data = await apiCall(`/api/courier/requests/history?page=${page}&per_page=${perPage}`);
      return data;
    } catch (error) {
      console.error('Error fetching courier requests history:', error);
      showAlert('Ошибка загрузки истории заявок: ' + error.message, 'error');
      return { items: [], pagination: {} };
    }
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ РАСШИРЕННОГО WORKFLOW КУРЬЕРА (ЭТАП 2)
  const [acceptedRequests, setAcceptedRequests] = useState([]);
  const [pickedRequests, setPickedRequests] = useState([]);
  const [cancelledRequests, setCancelledRequests] = useState([]);
  const [selectedCargoForEdit, setSelectedCargoForEdit] = useState(null);
  const [courierCargoEditForm, setCourierCargoEditForm] = useState({
    cargo_name: '',
    weight: '',
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    delivery_method: 'pickup',
    payment_method: 'not_paid',
    declared_value: ''
  });

  const fetchAcceptedRequests = async () => {
    try {
      const data = await apiCall('/api/courier/requests/accepted');
      setAcceptedRequests(data.accepted_requests || []);
    } catch (error) {
      console.error('Error fetching accepted requests:', error);
      showAlert('Ошибка загрузки принятых заявок: ' + error.message, 'error');
    }
  };

  const fetchPickedRequests = async () => {
    try {
      const data = await apiCall('/api/courier/requests/picked');
      setPickedRequests(data.picked_requests || []);
    } catch (error) {
      console.error('Error fetching picked requests:', error);
      showAlert('Ошибка загрузки забранных грузов: ' + error.message, 'error');
    }
  };
  
  const fetchCancelledRequests = async () => {
    try {
      const data = await apiCall('/api/courier/requests/cancelled');
      setCancelledRequests(data.cancelled_requests || []);
    } catch (error) {
      console.error('Error fetching cancelled requests:', error);
      showAlert('Ошибка загрузки отмененных заявок: ' + error.message, 'error');
    }
  };

  const handlePickupCargo = async (requestId) => {
    try {
      const response = await apiCall(`/api/courier/requests/${requestId}/pickup`, 'POST');
      
      showAlert('Груз забран! Статус обновлен.', 'success');
      
      // Автоматически обновляем все списки заявок для реактивного обновления
      await Promise.all([
        fetchAcceptedRequests(),       // Обновляем принятые заявки (заявка исчезнет отсюда)
        fetchPickedRequests(),         // Обновляем забранные заявки (заявка появится здесь)  
        fetchCourierNewRequests(),     // Обновляем новые заявки
        fetchCancelledRequests()       // Обновляем отмененные заявки
      ]);
      
      // Если это заявка на забор груза, показываем дополнительную информацию
      if (response?.request_type === 'pickup') {
        showAlert('Груз по заявке на забор забран! Теперь вы можете сдать его на склад в разделе "Забранные грузы".', 'success');
      }
      
    } catch (error) {
      console.error('Error picking up cargo:', error);
      showAlert('Ошибка при заборе груза: ' + error.message, 'error');
    }
  };

  const handleDeliverToWarehouse = async (requestId) => {
    try {
      const response = await apiCall(`/api/courier/requests/${requestId}/deliver-to-warehouse`, 'POST');
      
      showAlert('Груз сдан на склад! Заказ выполнен.', 'success');
      
      // Автоматически обновляем все списки заявок для реактивного обновления
      await Promise.all([
        fetchPickedRequests(),         // Обновляем забранные заявки (заявка исчезнет отсюда)
        fetchAcceptedRequests(),       // Обновляем принятые заявки
        fetchCourierNewRequests(),     // Обновляем новые заявки
        fetchCancelledRequests()       // Обновляем отмененные заявки
      ]);
      
      // Если это заявка на забор груза, показываем дополнительную информацию
      if (response?.request_type === 'pickup') {
        showAlert('Груз по заявке на забор сдан на склад! Оператор получит уведомление о поступлении груза.', 'success');
      } else {
        showAlert('Груз сдан на склад! Заказ выполнен.', 'success');
      }
      
    } catch (error) {
      console.error('Error delivering to warehouse:', error);
      showAlert('Ошибка при сдаче груза: ' + error.message, 'error');
    }
  };

  const handleEditCargoInfo = (request) => {
    setSelectedCargoForEdit(request);
    setCourierCargoEditForm({
      cargo_name: request.cargo_name || '',
      weight: '', // Будем заполнять курьером
      recipient_full_name: '', // Будем заполнять курьером
      recipient_phone: '', // Будем заполнять курьером
      recipient_address: '', // Будем заполнять курьером
      delivery_method: request.delivery_method || 'pickup',
      payment_method: 'not_paid', // Будем заполнять курьером
      declared_value: ''
    });
    setCargoEditModal(true);
  };

  const handleUpdateCargoInfo = async (e) => {
    e.preventDefault();
    if (!selectedCargoForEdit || !selectedCargoForEdit.id) return;

    try {
      // Подготавливаем данные в формате, ожидаемом backend
      const updateData = {
        cargo_items: [{
          name: courierCargoEditForm.cargo_name,
          weight: courierCargoEditForm.weight,
          total_price: courierCargoEditForm.declared_value || 0
        }],
        recipient_full_name: courierCargoEditForm.recipient_full_name,
        recipient_phone: courierCargoEditForm.recipient_phone,
        recipient_address: courierCargoEditForm.recipient_address,
        delivery_method: courierCargoEditForm.delivery_method,
        payment_method: courierCargoEditForm.payment_method
      };

      await apiCall(`/api/courier/requests/${selectedCargoForEdit.id}/update`, 'PUT', updateData);
      
      showAlert('Информация о заявке обновлена!', 'success');
      setCargoEditModal(false);
      
      // Обновляем списки заявок
      fetchAcceptedRequests();
      fetchPickedRequests();
      
    } catch (error) {
      console.error('Error updating request info:', error);
      showAlert('Ошибка обновления информации: ' + error.message, 'error');
    }
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ УЛУЧШЕНИЙ ИНТЕРФЕЙСА КУРЬЕРА
  const handleOpenCourierProfile = () => {
    if (user) {
      setCourierProfileEditForm({
        full_name: user.full_name || '',
        phone: user.phone || '',
        address: user.address || '',
        current_password: '',
        new_password: '',
        confirm_password: ''
      });
      setCourierProfileModal(true);
    }
  };

  const handleUpdateCourierProfile = async (e) => {
    e.preventDefault();
    
    // Валидация
    if (courierProfileEditForm.new_password && courierProfileEditForm.new_password !== courierProfileEditForm.confirm_password) {
      showAlert('Новые пароли не совпадают', 'error');
      return;
    }
    
    try {
      const updateData = {
        full_name: courierProfileEditForm.full_name,
        phone: courierProfileEditForm.phone,
        address: courierProfileEditForm.address
      };
      
      // Добавляем пароль если указан
      if (courierProfileEditForm.new_password) {
        updateData.current_password = courierProfileEditForm.current_password;
        updateData.new_password = courierProfileEditForm.new_password;
      }
      
      await apiCall('/api/auth/profile/update', 'PUT', updateData);
      
      showAlert('Профиль обновлен успешно!', 'success');
      setCourierProfileModal(false);
      
      // Обновляем данные пользователя
      fetchUserData();
      
    } catch (error) {
      console.error('Error updating profile:', error);
      showAlert('Ошибка обновления профиля: ' + error.message, 'error');
    }
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ GPS ОТСЛЕЖИВАНИЯ КУРЬЕРА

  // Запуск GPS отслеживания
  const startCourierTracking = async () => {
    if (!navigator.geolocation) {
      showAlert('Геолокация не поддерживается браузером', 'error');
      return;
    }

    try {
      // Сначала получить разрешение пользователя
      const position = await getCurrentPosition();
      
      // Обновить статус отслеживания
      setCourierTracking(prev => ({
        ...prev,
        isTracking: true,
        status: 'online',
        coordinates: {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude
        },
        accuracy: position.coords.accuracy,
        lastUpdate: new Date(),
        error: null
      }));

      // Отправить первое обновление местоположения
      await sendLocationUpdate(position.coords, 'online');

      // Запустить постоянное отслеживание каждые 30 секунд
      const watchId = navigator.geolocation.watchPosition(
        async (position) => {
          const coords = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          };
          
          setCourierTracking(prev => ({
            ...prev,
            coordinates: coords,
            accuracy: position.coords.accuracy,
            lastUpdate: new Date(),
            error: null
          }));

          // Отправить обновление на сервер
          await sendLocationUpdate(position.coords, courierTracking.status);
        },
        (error) => {
          console.error('Geolocation error:', error);
          setCourierTracking(prev => ({
            ...prev,
            error: `Ошибка геолокации: ${error.message}`
          }));
        },
        {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 30000
        }
      );

      // Настроить интервальное обновление каждые 30 секунд
      const updateInterval = setInterval(async () => {
        if (courierTracking.coordinates) {
          await sendLocationUpdate(
            { 
              latitude: courierTracking.coordinates.latitude, 
              longitude: courierTracking.coordinates.longitude,
              accuracy: courierTracking.accuracy 
            }, 
            courierTracking.status
          );
        }
      }, 30000); // 30 секунд

      setCourierTracking(prev => ({
        ...prev,
        watchId,
        updateInterval
      }));

      showAlert('GPS отслеживание запущено', 'success');

    } catch (error) {
      console.error('Error starting tracking:', error);
      showAlert(`Ошибка запуска отслеживания: ${error.message}`, 'error');
      setCourierTracking(prev => ({
        ...prev,
        error: error.message
      }));
    }
  };

  // Остановка GPS отслеживания
  const stopCourierTracking = async () => {
    // Остановить geolocation watch
    if (courierTracking.watchId) {
      navigator.geolocation.clearWatch(courierTracking.watchId);
    }

    // Остановить интервальное обновление
    if (courierTracking.updateInterval) {
      clearInterval(courierTracking.updateInterval);
    }

    // Отправить финальный статус offline
    if (courierTracking.coordinates) {
      await sendLocationUpdate(
        { 
          latitude: courierTracking.coordinates.latitude, 
          longitude: courierTracking.coordinates.longitude,
          accuracy: courierTracking.accuracy 
        }, 
        'offline'
      );
    }

    // Сбросить состояние отслеживания
    setCourierTracking({
      isTracking: false,
      status: 'offline',
      lastUpdate: null,
      coordinates: null,
      accuracy: null,
      watchId: null,
      error: null,
      updateInterval: null
    });

    showAlert('GPS отслеживание остановлено', 'info');
  };

  // Изменение статуса курьера
  const changeCourierStatus = async (newStatus) => {
    setCourierTracking(prev => ({
      ...prev,
      status: newStatus
    }));

    // Отправить обновление с новым статусом
    if (courierTracking.coordinates) {
      await sendLocationUpdate(
        { 
          latitude: courierTracking.coordinates.latitude, 
          longitude: courierTracking.coordinates.longitude,
          accuracy: courierTracking.accuracy 
        }, 
        newStatus
      );
    }

    const statusNames = {
      'online': 'Свободен',
      'on_route': 'Едет к клиенту', 
      'at_pickup': 'На месте забора',
      'at_delivery': 'На месте доставки',
      'busy': 'Занят'
    };

    showAlert(`Статус изменен на: ${statusNames[newStatus]}`, 'info');
  };

  // Получить текущую позицию (Promise wrapper)
  const getCurrentPosition = () => {
    return new Promise((resolve, reject) => {
      navigator.geolocation.getCurrentPosition(resolve, reject, {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 60000
      });
    });
  };

  // Отправить обновление местоположения на сервер
  const sendLocationUpdate = async (coords, status) => {
    try {
      const locationData = {
        latitude: coords.latitude,
        longitude: coords.longitude,
        status: status,
        accuracy: coords.accuracy || null,
        speed: coords.speed || null,
        heading: coords.heading || null,
        current_address: null // Можно добавить reverse geocoding позже
      };

      const response = await apiCall('/api/courier/location/update', 'POST', locationData);
      
      if (response) {
        console.log('Location updated successfully:', response);
      }
    } catch (error) {
      console.error('Error updating location:', error);
      setCourierTracking(prev => ({
        ...prev,
        error: `Ошибка отправки местоположения: ${error.message}`
      }));
    }
  };

  // Проверить статус отслеживания при загрузке
  const checkTrackingStatus = async () => {
    try {
      const response = await apiCall('/api/courier/location/status', 'GET');
      if (response && response.tracking_enabled) {
        setCourierTracking(prev => ({
          ...prev,
          status: response.status || 'offline',
          lastUpdate: response.last_updated ? new Date(response.last_updated) : null
        }));
      }
    } catch (error) {
      console.error('Error checking tracking status:', error);
    }
  };

  // useEffect для проверки статуса отслеживания при входе курьера
  useEffect(() => {
    if (user && user.role === 'courier') {
      checkTrackingStatus();
    }
  }, [user]);

  // useEffect для автоматической остановки отслеживания при размонтировании
  useEffect(() => {
    return () => {
      if (courierTracking.watchId) {
        navigator.geolocation.clearWatch(courierTracking.watchId);
      }
      if (courierTracking.updateInterval) {
        clearInterval(courierTracking.updateInterval);
      }
    };
  }, [courierTracking.watchId, courierTracking.updateInterval]);

  // НОВЫЕ ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ РЕЖИМОМ ЗАБОРА ГРУЗА

  // Переключение режима забора груза
  const togglePickupMode = () => {
    setIsPickupMode(!isPickupMode);
    if (!isPickupMode) {
      // При включении режима забора - очистить форму и установить значения по умолчанию
      setOperatorCargoForm(prev => ({
        ...prev,
        pickup_required: true,
        delivery_method: 'courier_pickup',
        payment_method: 'not_paid'
      }));
      setSenderPhones(['']);
    } else {
      // При выключении режима забора - вернуть обычные значения
      setOperatorCargoForm(prev => ({
        ...prev,
        pickup_required: false,
        delivery_method: 'pickup'
      }));
      setSenderPhones(['']);
    }
  };

  // Добавить номер телефона отправителя
  const addSenderPhone = () => {
    setSenderPhones([...senderPhones, '']);
  };

  // Удалить номер телефона отправителя
  const removeSenderPhone = (index) => {
    if (senderPhones.length > 1) {
      const newPhones = senderPhones.filter((_, i) => i !== index);
      setSenderPhones(newPhones);
      // Обновить основное поле телефона
      setOperatorCargoForm(prev => ({
        ...prev,
        sender_phone: newPhones.join(', ')
      }));
    }
  };

  // Обновить номер телефона отправителя
  const updateSenderPhone = (index, value) => {
    const newPhones = [...senderPhones];
    newPhones[index] = value;
    setSenderPhones(newPhones);
    // Обновить основное поле телефона
    setOperatorCargoForm(prev => ({
      ...prev,
      sender_phone: newPhones.filter(phone => phone.trim()).join(', ')
    }));
  };

  // Обработка отправки заявки на забор груза
  const handlePickupCargoSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // Подготовить данные заявки на забор
      const pickupRequestData = {
        sender_full_name: operatorCargoForm.sender_full_name,
        sender_phone: senderPhones.filter(phone => phone.trim()).join(', '),
        pickup_address: operatorCargoForm.pickup_address,
        pickup_date: operatorCargoForm.pickup_date,
        pickup_time_from: operatorCargoForm.pickup_time_from,
        pickup_time_to: operatorCargoForm.pickup_time_to,
        destination: operatorCargoForm.cargo_name || 'Не указано', // Используем cargo_name как destination
        courier_fee: operatorCargoForm.courier_fee,
        payment_method: operatorCargoForm.payment_method
      };

      const response = await apiCall('/api/admin/courier/pickup-request', 'POST', pickupRequestData);
      
      if (response && response.success) {
        showAlert(`Заявка на забор груза успешно создана! Номер заявки: ${response.request_id}`, 'success');
        
        // Очистить форму
        setOperatorCargoForm(prev => ({
          ...prev,
          sender_full_name: '',
          cargo_name: '',  // Очищаем новое поле
          pickup_address: '',
          pickup_date: '',
          pickup_time_from: '',
          pickup_time_to: '',
          courier_fee: '',
          payment_method: 'not_paid'
        }));
        setSenderPhones(['']);
        
        // Выйти из режима забора
        setIsPickupMode(false);
      }
    } catch (error) {
      console.error('Error creating pickup request:', error);
      showAlert('Ошибка при создании заявки на забор груза: ' + error.message, 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ: Обработка отправки формы приёма груза через оператора
  const handleOperatorCargoSubmit = async (e) => {
    e.preventDefault();
    
    try {
      console.log('🏢 Отправка формы приёма груза через оператора');
      
      // Подготовить данные для приёма груза напрямую на склад
      const operatorCargoData = {
        // Основные данные груза
        sender_full_name: operatorCargoForm.sender_full_name,
        sender_phone: operatorCargoForm.sender_phone,
        sender_address: operatorCargoForm.sender_address,
        recipient_full_name: operatorCargoForm.recipient_full_name,
        recipient_phone: operatorCargoForm.recipient_phone,
        recipient_address: operatorCargoForm.recipient_address,
        
        // Данные грузов
        cargo_items: operatorCargoForm.cargo_items,
        total_weight: parseFloat(operatorCargoForm.total_weight) || 0,
        total_cost: parseFloat(operatorCargoForm.total_cost) || 0,
        
        // Специфичные данные для приёма через оператора
        warehouse_id: operatorCargoForm.warehouse_id || user?.warehouse_id,
        processing_status: 'paid', // Статус оплаченного груза
        status: 'awaiting_placement', // Готов к размещению
        received_by_operator: user?.full_name || user?.user_number,
        received_at: new Date().toISOString(),
        
        // Дополнительные данные
        route: operatorCargoForm.route,
        special_instructions: operatorCargoForm.special_instructions || 'Принят через оператора на складе',
        
        // НОВОЕ: Информация о маршруте доставки
        delivery_route_info: routeInfo.distance ? {
          distance: routeInfo.distance,
          duration: routeInfo.duration,
          distance_value: routeInfo.distanceValue,
          duration_value: routeInfo.durationValue,
          calculated_at: new Date().toISOString(),
          warehouse_location: operatorWarehouses[0]?.location || 'Душанбе',
          warehouse_name: operatorWarehouses[0]?.name || 'Склад'
        } : null
      };
      
      console.log('📦 Данные для приёма груза через оператора:', operatorCargoData);
      
      // Отправляем запрос на создание груза напрямую через оператора
      const response = await apiCall('/api/operator/cargo/direct-accept', 'POST', operatorCargoData);
      
      if (response.success) {
        showAlert(`Груз успешно принят через оператора! Номер груза: ${response.cargo_number}`, 'success');
        
        // Сбрасываем форму
        setOperatorCargoForm({
          sender_full_name: '',
          sender_phone: '',
          sender_address: '',
          recipient_full_name: '',
          recipient_phone: '',
          recipient_address: '',
          cargo_items: [{ name: '', weight: '', size: '', declared_value: '' }],
          total_weight: 0,
          total_cost: 0,
          warehouse_id: user?.warehouse_id || '',
          route: 'moscow_to_tajikistan',
          special_instructions: ''
        });
        
        // НОВОЕ: Сбрасываем информацию о маршруте
        setRouteInfo({
          distance: '',
          duration: '',
          distanceValue: 0,
          durationValue: 0
        });
        
        // Закрываем форму оператора
        setShowOperatorCargoForm(false);
        
        // Обновляем списки
        await fetchAvailableCargoForPlacement();
        await fetchOperatorCargo();
        
      } else {
        showAlert(`Ошибка при приёме груза: ${response.message}`, 'error');
      }
      
    } catch (error) {
      console.error('❌ Ошибка при приёме груза через оператора:', error);
      showAlert(`Ошибка при приёме груза: ${error.message}`, 'error');
    }
  };

  const handleOpenCourierChat = () => {
    setCourierChatModal(true);
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ УВЕДОМЛЕНИЙ О ПОСТУПИВШИХ ГРУЗАХ
  const fetchWarehouseNotifications = async () => {
    try {
      const data = await apiCall('/api/operator/warehouse-notifications', 'GET');
      const notifications = data.notifications || [];
      
      // Фильтруем уведомления, чтобы исключить некорректные данные
      const validNotifications = notifications.filter(notification => 
        notification && 
        notification.id && 
        typeof notification.id === 'string' &&
        notification.status !== 'sent_to_placement' // Исключаем уже отправленные на размещение
      );
      
      setWarehouseNotifications(validNotifications);
    } catch (error) {
      console.error('Error fetching warehouse notifications:', error);
      // В случае ошибки не очищаем состояние полностью
      if (warehouseNotifications.length === 0) {
        setWarehouseNotifications([]);
      }
    }
  };

  const handleAcceptWarehouseDelivery = async (notificationId) => {
    try {
      const response = await apiCall(`/api/operator/warehouse-notifications/${notificationId}/accept`, 'POST');
      
      showAlert('Уведомление принято для оформления!', 'success');
      
      // Получаем данные уведомления
      const notification = response.notification_data || warehouseNotifications.find(n => n.id === notificationId);
      
      if (notification) {
        // Получаем полную информацию о заявке на забор груза
        try {
          const modalResponse = await apiCall(`/api/operator/pickup-requests/${notification.pickup_request_id}`, 'GET');
          const modalData = modalResponse;
          
          console.log('Enhanced pickup request modal data:', modalData);
          
          // Используем структурированные данные из modal_data
          const senderData = modalData.sender_data || {};
          const recipientData = modalData.recipient_data || {};
          const cargoInfo = modalData.cargo_info || {};
          const paymentInfo = modalData.payment_info || {};
          const requestInfo = modalData.request_info || {};
          
          // Заполняем форму структурированными данными
          let processedCargoItems = [];
          
          // Обработка данных о грузах - создаем отдельные контейнеры для каждого груза
          if (cargoInfo.cargo_items && cargoInfo.cargo_items.length > 0) {
            // ИСПРАВЛЕНИЕ: Если есть массив cargo_items из backend, используем его напрямую
            processedCargoItems = cargoInfo.cargo_items.map((item, index) => ({
              name: item.name || `Груз ${index + 1}`,
              weight: item.weight ? String(item.weight) : '',
              price: item.price || item.total_price || item.value || ''
            }));
            console.log(`✅ Используем cargo_items из backend: ${processedCargoItems.length} грузов`);
          } else if (cargoInfo.cargo_name) {
            // Если есть cargo_name, попробуем разбить по запятым на отдельные грузы
            const cargoNames = cargoInfo.cargo_name.split(',').map(name => name.trim()).filter(name => name);
            if (cargoNames.length > 1) {
              // Несколько грузов - создаем отдельный контейнер для каждого
              processedCargoItems = cargoNames.map((name, index) => ({
                name: name,
                weight: index === 0 && cargoInfo.weight ? String(cargoInfo.weight) : '', // Вес только для первого груза
                price: index === 0 && (cargoInfo.total_value || cargoInfo.declared_value) ? String(cargoInfo.total_value || cargoInfo.declared_value) : '' // Цена только для первого груза
              }));
            } else {
              // Один груз
              processedCargoItems = [{
                name: cargoInfo.cargo_name,
                weight: cargoInfo.weight ? String(cargoInfo.weight) : '',
                price: cargoInfo.total_value ? String(cargoInfo.total_value) : cargoInfo.declared_value ? String(cargoInfo.declared_value) : ''
              }];
            }
          } else if (cargoInfo.destination) {
            // Если есть только destination, также попробуем разбить на отдельные грузы
            const destinations = cargoInfo.destination.split(',').map(dest => dest.trim()).filter(dest => dest);
            if (destinations.length > 1) {
              processedCargoItems = destinations.map((name, index) => ({
                name: name,
                weight: index === 0 && cargoInfo.weight ? String(cargoInfo.weight) : '',
                price: index === 0 && (cargoInfo.total_value || cargoInfo.declared_value) ? String(cargoInfo.total_value || cargoInfo.declared_value) : ''
              }));
            } else {
              processedCargoItems = [{
                name: cargoInfo.destination,
                weight: cargoInfo.weight ? String(cargoInfo.weight) : '',
                price: cargoInfo.total_value ? String(cargoInfo.total_value) : cargoInfo.declared_value ? String(cargoInfo.declared_value) : ''
              }];
            }
          } else {
            // Fallback - создаем один пустой груз
            processedCargoItems = [{
              name: 'Наименование груза не указано',
              weight: '',
              price: ''
            }];
          }
          
          setCargoAcceptanceForm({
            sender_full_name: senderData.sender_full_name || notification.sender_full_name || '',
            sender_phone: senderData.sender_phone || notification.sender_phone || '',
            sender_address: senderData.pickup_address || notification.pickup_address || '',
            recipient_full_name: recipientData.recipient_full_name || '',
            recipient_phone: recipientData.recipient_phone || '',
            recipient_address: recipientData.recipient_address || '',
            cargo_items: processedCargoItems,
            payment_method: paymentInfo.payment_method || notification.payment_method || 'cash',
            delivery_method: recipientData.delivery_method || 'pickup',
            payment_status: paymentInfo.payment_status || 'not_paid', // ИСПРАВЛЕНИЕ: Используем статус оплаты от курьера
            amount_paid: '',
            payment_notes: ''
          });
          
          console.log('=== ОТЛАДКА ЗАПОЛНЕНИЯ ФОРМЫ ===');
          console.log('modalData:', modalData);
          console.log('cargoInfo:', cargoInfo);
          console.log('processedCargoItems:', processedCargoItems);
          console.log('recipientData:', recipientData);
          console.log('senderData:', senderData);
          console.log('paymentInfo:', paymentInfo);
          console.log('СТАТУС ОПЛАТЫ ОТ КУРЬЕРА:', paymentInfo.payment_status);
          
          // Сохраняем обогащенные данные уведомления для отображения
          const enrichedNotification = {
            ...notification,
            // Добавляем структурированные данные
            modal_data: modalData,
            sender_data: senderData,
            recipient_data: recipientData,
            cargo_info: cargoInfo,
            payment_info: paymentInfo,
            request_info: requestInfo,
            // Сохраняем оригинальные поля уведомления
            id: notification.id,
            request_number: notification.request_number,
            courier_name: notification.courier_name,
            delivered_at: notification.delivered_at,
            courier_fee: notification.courier_fee
          };
          
          setCurrentCargoNotification(enrichedNotification);
          
        } catch (requestError) {
          console.error('Error fetching full pickup request:', requestError);
          // Если не удалось получить полную заявку, используем данные из уведомления
          console.log('=== ОТЛАДКА: Используем данные из уведомления ===');
          console.log('notification:', notification);
          
          setCargoAcceptanceForm({
            sender_full_name: notification.sender_full_name || '',
            sender_phone: notification.sender_phone || '',
            sender_address: notification.pickup_address || '',
            recipient_full_name: '',
            recipient_phone: '',
            recipient_address: '',
            cargo_items: [{ 
              name: notification.destination || 'Наименование груза не указано', 
              weight: '', 
              price: '' 
            }],
            payment_method: notification.payment_method || 'cash',
            delivery_method: 'pickup',
            payment_status: notification.payment_status || 'not_paid', // ИСПРАВЛЕНИЕ: Используем статус из уведомления
            amount_paid: '',
            payment_notes: ''
          });
          
          setCurrentCargoNotification(notification);
        }
      }
      
      // Открываем форму полного оформления груза
      setShowCargoAcceptanceModal(true);
      
      // Обновляем уведомления
      await fetchWarehouseNotifications();
      
    } catch (error) {
      console.error('Error accepting warehouse delivery:', error);
      showAlert('Ошибка при приемке груза: ' + error.message, 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ ДЛЯ ПОЛУЧЕНИЯ ВСЕХ ЗАЯВОК НА ЗАБОР
  const fetchAllPickupRequests = async () => {
    try {
      const data = await apiCall('/api/operator/pickup-requests', 'GET');
      const pickupRequests = data.pickup_requests || [];
      
      // Валидация и очистка данных заявок на забор
      const validatedRequests = pickupRequests.filter(request => {
        // Фильтруем заявки с некорректными данными
        if (!request || !request.id) {
          console.warn('Найдена заявка без ID, пропускаем:', request);
          return false;
        }
        
        // Исправляем некорректные номера заявок
        if (!request.request_number || 
            request.request_number === 'undefined' || 
            request.request_number === 'null' ||
            request.request_number === '000000/00') {
          console.warn(`Заявка ${request.id} имеет некорректный номер: ${request.request_number}, исправляем`);
          request.request_number = `REQ-${request.id.slice(0, 8)}`;
        }
        
        return true;
      });
      
      setAllPickupRequests(validatedRequests);
      console.log(`Загружено ${validatedRequests.length} валидных заявок на забор`);
    } catch (error) {
      console.error('Error fetching all pickup requests:', error);
      showAlert('Ошибка загрузки заявок на забор: ' + error.message, 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ ДЛЯ ПОЛУЧЕНИЯ ИСТОРИИ ЗАБОРА ГРУЗА
  const fetchPickupRequestsHistory = async () => {
    try {
      const data = await apiCall('/api/operator/pickup-requests/history', 'GET');
      setPickupRequestsHistory(data.history_requests || []);
    } catch (error) {
      console.error('Error fetching pickup requests history:', error);
      showAlert('Ошибка загрузки истории заявок на забор: ' + error.message, 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ ДЛЯ ЗАВЕРШЕНИЯ ОФОРМЛЕНИЯ ГРУЗА
  const handleCompleteCargoProcessing = async (notificationId, cargoDetails) => {
    try {
      console.log('🚀 Starting cargo processing completion:', { notificationId, cargoDetails });
      
      const response = await apiCall(`/api/operator/warehouse-notifications/${notificationId}/complete`, 'POST', cargoDetails);
      
      console.log('✅ Server response:', response);
      
      showAlert('Груз успешно оформлен и добавлен в систему!', 'success');
      
      // Закрываем модал
      setShowCargoAcceptanceModal(false);
      setCurrentCargoNotification(null);
      
      // Сбрасываем форму
      setCargoAcceptanceForm({
        sender_full_name: '',
        sender_phone: '',
        sender_address: '',
        recipient_full_name: '',
        recipient_phone: '',
        recipient_address: '',
        cargo_items: [{ name: '', weight: '', price: '' }],
        payment_method: '',
        delivery_method: '',
        payment_status: 'not_paid'
      });
      
      console.log('🔄 Starting data refresh...');
      
      // Обновляем данные
      await Promise.all([
        fetchWarehouseNotifications(),
        fetchOperatorCargo(),
        fetchPickupRequestsHistory(),
        fetchAvailableCargoForPlacement() // Обновляем список для размещения
      ]);
      
      console.log('✅ Data refresh completed');
      
      // Показываем информацию о созданных грузах
      if (response?.created_cargos?.length > 0) {
        const cargoNumbers = response.created_cargos.map(c => c.cargo_number).join(', ');
        showAlert(`Создано грузов: ${response.total_items}. Номера: ${cargoNumbers}. Грузы доступны в разделе "Размещение груза".`, 'success');
      }
      
    } catch (error) {
      console.error('❌ Error completing cargo processing:', error);
      showAlert('Ошибка при завершении оформления: ' + error.message, 'error');
    }
  };
  
  // НОВЫЕ ФУНКЦИИ ДЛЯ ОБРАБОТКИ ЗАЯВОК НА ЗАБОР ГРУЗА
  const handlePrintPickupQR = (notification) => {
    try {
      // Проверяем наличие необходимых данных
      if (!notification || !notification.request_number) {
        showAlert('Недостаточно данных для создания QR кода', 'error');
        return;
      }

      // Упрощаем QR код - только номер заявки
      const qrData = notification.request_number;

      // Создаем новое окно для печати QR кода
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
        return;
      }
      
      printWindow.document.write(`
        <html>
          <head>
            <title>QR код заявки ${notification.request_number || 'N/A'}</title>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
              .qr-container { margin: 20px auto; }
              .request-info { margin: 10px 0; font-size: 14px; }
              #qrcode { margin: 20px auto; display: block; }
              .print-btn { 
                margin: 20px; 
                padding: 10px 20px; 
                font-size: 16px; 
                background: #007bff; 
                color: white; 
                border: none; 
                border-radius: 5px; 
                cursor: pointer; 
              }
              @media print { 
                body { margin: 0; }
                .print-btn { display: none; }
              }
            </style>
          </head>
          <body>
            <h2>QR код заявки на забор груза</h2>
            <div class="request-info">
              <strong>Заявка №:</strong> ${notification.request_number || 'N/A'}<br>
              <strong>Отправитель:</strong> ${notification.sender_full_name || 'Не указан'}<br>
              <strong>Адрес забора:</strong> ${notification.pickup_address || 'Не указан'}<br>
              <strong>Курьер:</strong> ${notification.courier_name || 'Не указан'}<br>
              <strong>Сдано на склад:</strong> ${notification.delivered_at ? new Date(notification.delivered_at).toLocaleString('ru-RU') : 'Не указано'}
            </div>
            <div class="qr-container">
              <canvas id="qrcode" width="200" height="200"></canvas>
            </div>
            <button class="print-btn" onclick="window.print()">Печать</button>
            <div id="error-message" style="color: red; margin-top: 20px;"></div>
            
            <script>
              const qrData = "${qrData}";
              
              function generateQR() {
                try {
                  if (typeof QRious !== 'undefined') {
                    console.log('QRious library loaded, generating QR code...');
                    var qr = new QRious({
                      element: document.getElementById('qrcode'),
                      value: qrData,
                      size: 200
                    });
                    console.log('QR Code generated successfully for:', qrData);
                  } else {
                    console.log('QRious not loaded yet, retrying...');
                    setTimeout(generateQR, 200);
                  }
                } catch (error) {
                  console.error('Error generating QR code:', error);
                  document.getElementById('error-message').innerHTML = 
                    '<p>Ошибка создания QR кода: ' + error.message + '</p>' +
                    '<p>Данные для QR: <strong>' + qrData + '</strong></p>';
                }
              }
              
              // Начинаем генерацию после загрузки страницы
              setTimeout(generateQR, 300);
              
              // Fallback - показываем данные если QR не сгенерировался
              setTimeout(function() {
                var canvas = document.getElementById('qrcode');
                var ctx = canvas.getContext('2d');
                if (!ctx.getImageData(0, 0, 1, 1).data.some(channel => channel !== 0)) {
                  document.getElementById('error-message').innerHTML = 
                    '<p style="color: orange;">QR код не сгенерирован. Данные заявки:</p>' +
                    '<p style="font-size: 18px; font-weight: bold;">' + qrData + '</p>';
                }
              }, 3000);
            </script>
          </body>
        </html>
      `);
      printWindow.document.close();
      
      showAlert('QR код заявки отправлен на печать', 'success');
    } catch (error) {
      console.error('Error printing pickup QR:', error);
      showAlert('Ошибка при печати QR кода: ' + error.message, 'error');
    }
  };

  const handlePrintPickupInvoice = (notification) => {
    try {
      // Создаем новое окно для печати накладной
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
        return;
      }
      
      printWindow.document.write(`
        <html>
          <head>
            <title>Накладная заявки ${notification.request_number}</title>
            <style>
              body { font-family: Arial, sans-serif; font-size: 12px; margin: 20px; }
              h1 { font-size: 16px; text-align: center; margin-bottom: 20px; }
              .section { margin: 15px 0; }
              .section h3 { font-size: 14px; margin: 10px 0 5px 0; border-bottom: 1px solid #333; }
              .info-row { margin: 5px 0; }
              .info-label { font-weight: bold; display: inline-block; width: 150px; }
              .company-header { text-align: center; margin-bottom: 30px; }
              .signatures { margin-top: 40px; display: flex; justify-content: space-between; }
              .signature { text-align: center; }
              @media print { body { margin: 0; } }
            </style>
          </head>
          <body>
            <div class="company-header">
              <h1>TAJLINE.TJ</h1>
              <p>Грузоперевозки Москва-Таджикистан</p>
            </div>
            
            <h1>НАКЛАДНАЯ ЗАЯВКИ НА ЗАБОР ГРУЗА №${notification.request_number}</h1>
            
            <div class="section">
              <h3>Информация о заявке</h3>
              <div class="info-row">
                <span class="info-label">Номер заявки:</span> ${notification.request_number}
              </div>
              <div class="info-row">
                <span class="info-label">Дата создания:</span> ${new Date(notification.created_at || Date.now()).toLocaleString('ru-RU')}
              </div>
              <div class="info-row">
                <span class="info-label">Сдано на склад:</span> ${new Date(notification.delivered_at).toLocaleString('ru-RU')}
              </div>
            </div>
            
            <div class="section">
              <h3>Отправитель</h3>
              <div class="info-row">
                <span class="info-label">ФИО:</span> ${notification.sender_full_name}
              </div>
              <div class="info-row">
                <span class="info-label">Телефон:</span> ${notification.sender_phone}
              </div>
              <div class="info-row">
                <span class="info-label">Адрес забора:</span> ${notification.pickup_address}
              </div>
            </div>
            
            <div class="section">
              <h3>Курьер</h3>
              <div class="info-row">
                <span class="info-label">ФИО курьера:</span> ${notification.courier_name}
              </div>
              <div class="info-row">
                <span class="info-label">Плата курьеру:</span> ${notification.courier_fee || 0} ₽
              </div>
            </div>
            
            <div class="section">
              <h3>Дополнительная информация</h3>
              <div class="info-row">
                <span class="info-label">Наименование груза:</span> ${notification.destination || 'Не указано'}
              </div>
              <div class="info-row">
                <span class="info-label">Статус:</span> ${notification.status === 'in_processing' ? 'Обрабатывается' : notification.status}
              </div>
            </div>
            
            <div class="signatures">
              <div class="signature">
                <p>Принял оператор:</p>
                <p>_________________</p>
                <p>(подпись)</p>
              </div>
              <div class="signature">
                <p>Дата: ${new Date().toLocaleDateString('ru-RU')}</p>
                <p>_________________</p>
                <p>(дата)</p>
              </div>
            </div>
            
            <script>window.print();</script>
          </body>
        </html>
      `);
      printWindow.document.close();
      
      showAlert('Накладная заявки отправлена на печать', 'success');
    } catch (error) {
      console.error('Error printing pickup invoice:', error);
      showAlert('Ошибка при печати накладной: ' + error.message, 'error');
    }
  };

  // Функция для открытия модального окна просмотра/редактирования уведомления
  const handleViewNotification = async (notification) => {
    try {
      console.log('🔍 Открываем просмотр принятого уведомления:', notification);
      
      // Получаем полную информацию о заявке на забор груза (если есть pickup_request_id)
      let modalData = null;
      if (notification.pickup_request_id) {
        try {
          const modalResponse = await apiCall(`/api/operator/pickup-requests/${notification.pickup_request_id}`, 'GET');
          modalData = modalResponse;
          console.log('📋 Получены данные заявки на забор:', modalData);
        } catch (requestError) {
          console.error('Ошибка при получении данных заявки:', requestError);
        }
      }
      
      // Заполняем форму принятия груза данными из уведомления
      if (modalData) {
        // Используем структурированные данные из modal_data
        const senderData = modalData.sender_data || {};
        const recipientData = modalData.recipient_data || {};
        const cargoInfo = modalData.cargo_info || {};
        const paymentInfo = modalData.payment_info || {};
        
        // Обработка данных о грузах - правильно извлекаем цену ЗА КГ от курьера
        let processedCargoItems = [];
        if (cargoInfo.cargo_items && cargoInfo.cargo_items.length > 0) {
          processedCargoItems = cargoInfo.cargo_items.map((item, index) => ({
            name: item.name || item.cargo_name || `Груз ${index + 1}`,
            weight: item.weight ? String(item.weight) : '',
            // ИСПРАВЛЕНИЕ: Используем price_per_kg (цену за кг), а не общую стоимость
            price: item.price_per_kg ? String(item.price_per_kg) : (item.price || '')
          }));
          console.log('✅ Используем cargo_items с price_per_kg от курьера:', processedCargoItems);
        } else {
          // Создаем один элемент груза из доступных данных
          const cargoName = cargoInfo.cargo_name || cargoInfo.destination || notification.destination || 'Наименование груза не указано';
          const cargoWeight = cargoInfo.weight ? String(cargoInfo.weight) : '';
          // ИСПРАВЛЕНИЕ: Используем price_per_kg (цену за кг), которую заполнил курьер
          const cargoPricePerKg = cargoInfo.price_per_kg || '';
          
          processedCargoItems = [{
            name: cargoName,
            weight: cargoWeight,
            price: cargoPricePerKg ? String(cargoPricePerKg) : ''
          }];
          
          console.log('✅ Создан груз из данных курьера с price_per_kg:', {
            name: cargoName,
            weight: cargoWeight, 
            price_per_kg: cargoPricePerKg,
            source: 'cargoInfo.price_per_kg от курьера'
          });
        }
        
        // ИСПРАВЛЕНИЕ: Правильно извлекаем способ оплаты от курьера
        const courierPaymentMethod = paymentInfo.payment_method || notification.payment_method || 'cash';
        const courierPaymentStatus = paymentInfo.payment_status || notification.payment_status || 'not_paid';
        
        console.log('💰 Данные об оплате от курьера:', {
          payment_method: courierPaymentMethod,
          payment_status: courierPaymentStatus,
          courier_fee: paymentInfo.courier_fee
        });
        
        console.log('📅 Данные о заборе от курьера:', {
          pickup_date: senderData.pickup_date,
          pickup_time_from: senderData.pickup_time_from,
          pickup_time_to: senderData.pickup_time_to,
          pickup_address: senderData.pickup_address
        });
        
        setCargoAcceptanceForm({
          sender_full_name: senderData.sender_full_name || notification.sender_full_name || '',
          sender_phone: senderData.sender_phone || notification.sender_phone || '',
          sender_address: senderData.pickup_address || notification.pickup_address || '',
          recipient_full_name: recipientData.recipient_full_name || '',
          recipient_phone: recipientData.recipient_phone || '',
          recipient_address: recipientData.recipient_address || '',
          cargo_items: processedCargoItems,
          payment_method: courierPaymentMethod, // ИСПРАВЛЕНИЕ: Используем способ оплаты от курьера
          delivery_method: recipientData.delivery_method || 'pickup',
          payment_status: courierPaymentStatus, // ИСПРАВЛЕНИЕ: Используем статус оплаты от курьера
          amount_paid: '',
          payment_notes: ''
        });
        
        // Сохраняем обогащенные данные уведомления
        const enrichedNotification = {
          ...notification,
          modal_data: modalData,
          sender_data: senderData,
          recipient_data: recipientData,
          cargo_info: cargoInfo,
          payment_info: paymentInfo,
          isViewMode: true, // Флаг для указания режима просмотра
          // ИСПРАВЛЕНИЕ: Добавляем данные о заборе для отображения
          pickup_date: senderData.pickup_date,
          pickup_time_from: senderData.pickup_time_from, 
          pickup_time_to: senderData.pickup_time_to,
          courier_payment_method: courierPaymentMethod,
          courier_payment_status: courierPaymentStatus
        };
        
        setCurrentCargoNotification(enrichedNotification);
      } else {
        // Используем данные из уведомления напрямую
        console.log('📋 Используем данные напрямую из уведомления:', notification);
        
        setCargoAcceptanceForm({
          sender_full_name: notification.sender_full_name || '',
          sender_phone: notification.sender_phone || '',
          sender_address: notification.pickup_address || '',
          recipient_full_name: '',
          recipient_phone: '',
          recipient_address: '',
          cargo_items: [{ 
            name: notification.destination || 'Наименование груза не указано', 
            weight: '', 
            price: notification.price_per_kg || '' // ИСПРАВЛЕНИЕ: Используем price_per_kg вместо total_value
          }],
          payment_method: notification.payment_method || 'cash', // ИСПРАВЛЕНИЕ: Используем способ оплаты из уведомления
          delivery_method: 'pickup',
          payment_status: notification.payment_status || 'not_paid', // ИСПРАВЛЕНИЕ: Используем статус оплаты из уведомления
          amount_paid: '',
          payment_notes: ''
        });
        
        setCurrentCargoNotification({
          ...notification,
          isViewMode: true, // Флаг для указания режима просмотра
          courier_payment_method: notification.payment_method,
          courier_payment_status: notification.payment_status
        });
      }
      
      // Открываем существующее модальное окно принятия груза
      setShowCargoAcceptanceModal(true);
      
    } catch (error) {
      console.error('Error opening notification view:', error);
      showAlert('Ошибка при открытии просмотра уведомления: ' + error.message, 'error');
    }
  };

  // Функция для открытия модального окна просмотра/редактирования груза
  const handleViewCargo = async (cargoItem) => {
    try {
      console.log('🔍 Открываем просмотр груза:', cargoItem);
      
      // Создаем объект, похожий на уведомление, но с данными груза
      const mockNotification = {
        id: cargoItem.id || cargoItem.cargo_number,
        request_number: cargoItem.cargo_number,
        courier_name: cargoItem.courier_name || 'Не указан',
        delivered_at: cargoItem.created_at || new Date().toISOString(),
        pickup_address: cargoItem.sender_address || 'Не указан',
        sender_full_name: cargoItem.sender_name || cargoItem.sender_full_name || '',
        sender_phone: cargoItem.sender_phone || '',
        recipient_full_name: cargoItem.recipient_name || cargoItem.recipient_full_name || '',
        recipient_phone: cargoItem.recipient_phone || '',
        destination: cargoItem.destination || cargoItem.recipient_address || '',
        courier_fee: cargoItem.courier_fee || 0,
        payment_method: cargoItem.payment_method || 'cash',
        isViewMode: true,
        isCargoMode: true // Флаг для указания, что это просмотр груза (не уведомления)
      };
      
      // Заполняем форму данными груза
      setCargoAcceptanceForm({
        sender_full_name: cargoItem.sender_name || cargoItem.sender_full_name || '',
        sender_phone: cargoItem.sender_phone || '',
        sender_address: cargoItem.sender_address || cargoItem.pickup_address || '',
        recipient_full_name: cargoItem.recipient_name || cargoItem.recipient_full_name || '',
        recipient_phone: cargoItem.recipient_phone || '',
        recipient_address: cargoItem.recipient_address || cargoItem.destination || '',
        cargo_items: [{
          name: cargoItem.cargo_name || cargoItem.destination || 'Груз',
          weight: cargoItem.weight ? String(cargoItem.weight) : '',
          price: cargoItem.price_per_kg ? String(cargoItem.price_per_kg) : ''  // ИСПРАВЛЕНИЕ: Только price_per_kg, без declared_value
        }],
        payment_method: cargoItem.payment_method || 'cash',
        delivery_method: cargoItem.delivery_method || 'pickup',
        payment_status: cargoItem.payment_status || 'not_paid',
        amount_paid: cargoItem.amount_paid || '',
        payment_notes: cargoItem.notes || ''
      });
      
      setCurrentCargoNotification(mockNotification);
      setShowCargoAcceptanceModal(true);
      
    } catch (error) {
      console.error('Error opening cargo view:', error);
      showAlert('Ошибка при открытии просмотра груза: ' + error.message, 'error');
    }
  };

  // Функция для автоматического обновления номеров складов при загрузке приложения
  const ensureWarehouseNumbers = async () => {
    if (user?.role === 'admin') {
      try {
        console.log('🔧 Проверяем и обновляем номера складов для уникальности QR кодов...');
        const response = await apiCall('/api/admin/warehouses/update-id-numbers', 'POST');
        if (response.updated_count > 0) {
          console.log(`✅ Обновлены номера ${response.updated_count} складов для уникальности QR кодов`);
        }
      } catch (error) {
        console.warn('Не удалось обновить номера складов:', error.message);
      }
    }
  };

  // НОВЫЕ ФУНКЦИИ: Генерация QR кодов для модального окна
  const generateSpecificCellQR = async () => {
    if (!qrCellCode.block || !qrCellCode.shelf || !qrCellCode.cell) {
      showAlert('Заполните все поля: Блок, Полка, Ячейка', 'error');
      return;
    }

    try {
      const response = await apiCall('/api/warehouse/cell/generate-qr', 'POST', {
        warehouse_id: selectedWarehouseForQR.id,
        block: parseInt(qrCellCode.block),
        shelf: parseInt(qrCellCode.shelf),
        cell: parseInt(qrCellCode.cell),
        format: 'id' // Используем новый ID формат с уникальными номерами складов
      });
      
      if (response && response.success && response.qr_code) {
        setGeneratedCellQR(response.qr_code);
        showAlert(`QR код для ячейки ${response.readable_name} создан успешно! Код: ${response.cell_code}`, 'success');
      } else {
        showAlert('Не удалось создать QR код', 'error');
      }
    } catch (error) {
      console.error('Error generating specific cell QR:', error);
      showAlert(`Ошибка создания QR кода: ${error.message}`, 'error');
    }
  };

  const generateAllCellsQR = async () => {
    if (!selectedWarehouseForQR) {
      showAlert('Склад не выбран', 'error');
      return;
    }

    try {
      // Сбрасываем состояние
      setMassQRGeneration({
        isGenerating: true,
        progress: 0,
        total: 0,
        current: 0,
        results: []
      });

      showAlert('Начинается генерация QR кодов для всех ячеек склада...', 'info');
      
      // Получаем структуру склада
      console.log('🏗️ Получаем структуру склада для массовой генерации...');
      const structureResponse = await apiCall(`/api/warehouses/${selectedWarehouseForQR.id}/structure`, 'GET');
      
      if (!structureResponse || !structureResponse.blocks) {
        throw new Error('Не удалось получить структуру склада');
      }

      const { blocks, shelves_per_block, cells_per_shelf } = structureResponse;
      const totalCells = blocks * shelves_per_block * cells_per_shelf;
      
      console.log(`📊 Структура склада: ${blocks} блоков, ${shelves_per_block} полок на блок, ${cells_per_shelf} ячеек на полку`);
      console.log(`🎯 Всего ячеек для генерации: ${totalCells}`);

      setMassQRGeneration(prev => ({
        ...prev,
        total: totalCells
      }));

      const results = [];
      let currentCell = 0;

      // Генерируем QR коды для всех ячеек
      for (let block = 1; block <= blocks; block++) {
        for (let shelf = 1; shelf <= shelves_per_block; shelf++) {
          for (let cell = 1; cell <= cells_per_shelf; cell++) {
            currentCell++;
            
            try {
              console.log(`🔄 Генерируем QR код ${currentCell}/${totalCells}: Блок ${block}, Полка ${shelf}, Ячейка ${cell}`);
              
              const response = await apiCall('/api/warehouse/cell/generate-qr', 'POST', {
                warehouse_id: selectedWarehouseForQR.id,
                block: block,
                shelf: shelf,
                cell: cell,
                format: 'id' // Используем ID формат с уникальными номерами складов
              });

              if (response && response.success) {
                results.push({
                  location: `Б${block}-П${shelf}-Я${cell}`,
                  code: response.cell_code,
                  qr_image: response.qr_code,
                  readable_name: response.readable_name
                });
                
                console.log(`✅ QR код сгенерирован: ${response.cell_code}`);
              } else {
                console.warn(`⚠️ Ошибка генерации QR для Б${block}-П${shelf}-Я${cell}`);
              }

            } catch (cellError) {
              console.error(`❌ Ошибка при генерации QR для Б${block}-П${shelf}-Я${cell}:`, cellError);
            }

            // Обновляем прогресс
            const progress = Math.round((currentCell / totalCells) * 100);
            setMassQRGeneration(prev => ({
              ...prev,
              current: currentCell,
              progress: progress,
              results: [...results]
            }));

            // Небольшая задержка чтобы не перегружать сервер
            await new Promise(resolve => setTimeout(resolve, 100));
          }
        }
      }

      // Завершение генерации
      setMassQRGeneration(prev => ({
        ...prev,
        isGenerating: false
      }));

      showAlert(`Массовая генерация завершена! Сгенерировано ${results.length} QR кодов из ${totalCells} ячеек.`, 'success');
      console.log(`🎉 Массовая генерация завершена: ${results.length}/${totalCells} QR кодов`);

    } catch (error) {
      console.error('Error generating all cells QR:', error);
      setMassQRGeneration(prev => ({
        ...prev,
        isGenerating: false
      }));
      showAlert(`Ошибка массовой генерации QR кодов: ${error.message}`, 'error');
    }
  };

  const generateRangeQR = async () => {
    showAlert('Функция генерации по диапазону будет реализована в следующем обновлении', 'info');
  };

  const downloadQRCode = (qrCodeData, filename) => {
    try {
      const link = document.createElement('a');
      link.href = qrCodeData;
      link.download = `${filename}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      showAlert(`QR код ${filename} скачан успешно!`, 'success');
    } catch (error) {
      console.error('Error downloading QR code:', error);
      showAlert('Ошибка при скачивании QR кода', 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ: Скачивание всех QR кодов как ZIP архива
  const downloadAllQRCodes = async (results) => {
    try {
      showAlert('Подготовка архива с QR кодами...', 'info');
      
      // Создаем ZIP архив с помощью JSZip (если доступно) или просто скачиваем один за другим
      for (let i = 0; i < results.length && i < 50; i++) { // Ограничиваем до 50 QR кодов
        const result = results[i];
        const filename = `${selectedWarehouseForQR?.name}-${result.code}`;
        
        setTimeout(() => {
          downloadQRCode(result.qr_image, filename);
        }, i * 200); // Задержка между скачиваниями
      }
      
      if (results.length > 50) {
        showAlert(`Скачано первых 50 QR кодов из ${results.length}. Для скачивания остальных повторите операцию.`, 'info');
      } else {
        showAlert(`Скачивание ${results.length} QR кодов начато!`, 'success');
      }
      
    } catch (error) {
      console.error('Error downloading all QR codes:', error);
      showAlert('Ошибка при скачивании QR кодов', 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ: Массовая печать QR кодов
  const printAllQRCodes = (results) => {
    try {
      console.log('🖨️ Начинаем массовую печать QR кодов:', results.length);
      
      // Создаем HTML страницу для печати
      const printWindow = window.open('', '_blank');
      
      let htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>QR коды склада ${selectedWarehouseForQR?.name}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 20px;
              print-color-adjust: exact;
              -webkit-print-color-adjust: exact;
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
              border-bottom: 2px solid #333;
              padding-bottom: 10px;
            }
            .qr-grid {
              display: grid;
              grid-template-columns: repeat(4, 1fr);
              gap: 20px;
              page-break-inside: avoid;
            }
            .qr-item {
              text-align: center;
              border: 1px solid #ddd;
              padding: 15px;
              border-radius: 8px;
              page-break-inside: avoid;
            }
            .qr-designation {
              font-weight: bold;
              font-size: 16px;
              color: #333;
              margin-bottom: 10px;
              background-color: #f0f8ff;
              padding: 5px;
              border-radius: 4px;
            }
            .qr-code {
              margin: 10px 0;
            }
            .qr-details {
              font-size: 12px;
              color: #666;
              margin-top: 8px;
            }
            .warehouse-info {
              background-color: #e8f4fd;
              padding: 10px;
              border-radius: 6px;
              margin-bottom: 10px;
              font-size: 14px;
            }
            @media print {
              .qr-grid {
                grid-template-columns: repeat(3, 1fr);
              }
              .qr-item {
                break-inside: avoid;
              }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>QR коды склада: ${selectedWarehouseForQR?.name}</h1>
            <div class="warehouse-info">
              <strong>Адрес:</strong> ${selectedWarehouseForQR?.address || 'Не указан'}<br>
              <strong>Уникальный номер склада:</strong> ${selectedWarehouseForQR?.warehouse_id_number || 'Не указан'}<br>
              <strong>Всего QR кодов:</strong> ${results.length}<br>
              <strong>Дата печати:</strong> ${new Date().toLocaleString('ru-RU')}
            </div>
          </div>
          <div class="qr-grid">
      `;

      // Добавляем каждый QR код с обозначением
      results.forEach((result, index) => {
        // Извлекаем блок, полку, ячейку из location (например "Б1-П2-Я3")
        const locationMatch = result.location.match(/Б(\d+)-П(\d+)-Я(\d+)/);
        const designation = locationMatch ? `Б${locationMatch[1]}-П${locationMatch[2]}-Я${locationMatch[3]}` : result.location;
        
        htmlContent += `
          <div class="qr-item">
            <div class="qr-designation">${designation}</div>
            <div class="qr-code">
              <img src="${result.qr_image}" alt="QR Code ${result.code}" width="120" height="120">
            </div>
            <div class="qr-details">
              <strong>Код:</strong> ${result.code}<br>
              <strong>Ячейка:</strong> ${result.readable_name || designation}
            </div>
          </div>
        `;
      });

      htmlContent += `
          </div>
        </body>
        </html>
      `;

      printWindow.document.write(htmlContent);
      printWindow.document.close();

      // Ждем загрузки изображений и запускаем печать
      setTimeout(() => {
        printWindow.focus();
        printWindow.print();
        
        // Закрываем окно после печати
        setTimeout(() => {
          printWindow.close();
        }, 1000);
      }, 2000);

      showAlert(`Подготовлен документ для печати ${results.length} QR кодов`, 'success');
      
    } catch (error) {
      console.error('Error printing all QR codes:', error);
      showAlert('Ошибка при подготовке печати QR кодов', 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ: Печать отдельного QR кода
  const printSingleQRCode = () => {
    try {
      if (!generatedCellQR || !qrCellCode.block || !qrCellCode.shelf || !qrCellCode.cell) {
        showAlert('QR код не сгенерирован или отсутствуют данные ячейки', 'error');
        return;
      }

      console.log('🖨️ Печать отдельного QR кода для ячейки:', `Б${qrCellCode.block}-П${qrCellCode.shelf}-Я${qrCellCode.cell}`);
      
      const designation = `Б${qrCellCode.block}-П${qrCellCode.shelf}-Я${qrCellCode.cell}`;
      
      // Создаем HTML страницу для печати
      const printWindow = window.open('', '_blank');
      
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>QR код ячейки ${designation}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 40px;
              text-align: center;
              print-color-adjust: exact;
              -webkit-print-color-adjust: exact;
            }
            .header {
              margin-bottom: 30px;
              border-bottom: 2px solid #333;
              padding-bottom: 15px;
            }
            .warehouse-info {
              background-color: #e8f4fd;
              padding: 15px;
              border-radius: 8px;
              margin-bottom: 30px;
              font-size: 14px;
            }
            .qr-container {
              margin: 30px 0;
              padding: 20px;
              border: 2px solid #ddd;
              border-radius: 12px;
              display: inline-block;
            }
            .qr-designation {
              font-weight: bold;
              font-size: 24px;
              color: #333;
              margin-bottom: 20px;
              background-color: #f0f8ff;
              padding: 10px 20px;
              border-radius: 8px;
              border: 2px solid #4a90e2;
            }
            .qr-code {
              margin: 20px 0;
            }
            .qr-details {
              font-size: 14px;
              color: #666;
              margin-top: 15px;
            }
            .generated-code {
              font-family: monospace;
              background-color: #f5f5f5;
              padding: 8px 12px;
              border-radius: 4px;
              font-weight: bold;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>QR код ячейки склада</h1>
          </div>
          
          <div class="warehouse-info">
            <strong>Склад:</strong> ${selectedWarehouseForQR?.name || 'Не указан'}<br>
            <strong>Адрес:</strong> ${selectedWarehouseForQR?.address || 'Не указан'}<br>
            <strong>Уникальный номер склада:</strong> ${selectedWarehouseForQR?.warehouse_id_number || 'Не указан'}<br>
            <strong>Дата печати:</strong> ${new Date().toLocaleString('ru-RU')}
          </div>
          
          <div class="qr-container">
            <div class="qr-designation">${designation}</div>
            <div class="qr-code">
              <img src="${generatedCellQR}" alt="QR Code ${designation}" width="200" height="200">
            </div>
            <div class="qr-details">
              <div class="generated-code">
                Код: ${selectedWarehouseForQR?.warehouse_id_number || '000'}-${String(qrCellCode.block).padStart(2, '0')}-${String(qrCellCode.shelf).padStart(2, '0')}-${String(qrCellCode.cell).padStart(3, '0')}
              </div>
            </div>
          </div>
        </body>
        </html>
      `;

      printWindow.document.write(htmlContent);
      printWindow.document.close();

      // Ждем загрузки изображения и запускаем печать
      setTimeout(() => {
        printWindow.focus();
        printWindow.print();
        
        // Закрываем окно после печати
        setTimeout(() => {
          printWindow.close();
        }, 1000);
      }, 1500);

      showAlert(`Подготовлен документ для печати QR кода ячейки ${designation}`, 'success');
      
    } catch (error) {
      console.error('Error printing single QR code:', error);
      showAlert('Ошибка при подготовке печати QR кода', 'error');
    }
  };

  const handleSendToPlacement = async (notification) => {
    try {
      // Подтверждение действия
      const confirm = window.confirm(`Отправить заявку №${notification.request_number} на размещение? После этого заявка будет исключена из текущего списка.`);
      if (!confirm) return;

      // Отправляем запрос на backend для изменения статуса
      const response = await apiCall(`/api/operator/warehouse-notifications/${notification.id}/send-to-placement`, 'POST');
      
      showAlert('Заявка успешно отправлена на размещение!', 'success');
      
      // Сначала обновляем состояние локально для мгновенной реакции
      setWarehouseNotifications(prevNotifications => 
        prevNotifications.filter(n => n.id !== notification.id)
      );
      
      // Затем делаем полное обновление с сервера
      setTimeout(async () => {
        try {
          await Promise.all([
            fetchWarehouseNotifications(),
            fetchAvailableCargoForPlacement()
          ]);
        } catch (error) {
          // В случае ошибки молча обновляем данные
          console.error('Error refreshing data:', error);
        }
      }, 500);
      
    } catch (error) {
      console.error('Error sending to placement:', error);
      showAlert('Ошибка при отправке на размещение: ' + error.message, 'error');
    }
  };
  
  // НОВЫЕ ФУНКЦИИ ДЛЯ МОДАЛЬНЫХ ОКОН ПРОСМОТРА И РЕДАКТИРОВАНИЯ ЗАЯВОК
  const handleViewRequest = (request) => {
    setSelectedRequest(request);
    setRequestViewModal(true);
  };
  
  const handleEditRequest = (request) => {
    setSelectedRequest(request);
    // Предзаполняем форму данными заявки
    setRequestEditForm({
      sender_full_name: request.sender_full_name || '',
      sender_phone: request.sender_phone || '',
      sender_address: request.pickup_address || '',
      recipient_full_name: request.recipient_full_name || '',
      recipient_phone: request.recipient_phone || '',
      recipient_address: request.recipient_address || '',
      cargo_items: [{
        name: request.cargo_name || '',
        weight: request.weight || '',
        price_per_kg: request.price_per_kg || '80',
        total_price: ((parseFloat(request.weight) || 0) * (parseFloat(request.price_per_kg) || 80)).toString()
      }],
      total_weight: request.weight || '',
      total_value: request.declared_value || '',
      payment_method: request.payment_method || 'not_paid',
      payment_received: request.payment_received || false,
      delivery_method: request.delivery_method || 'pickup',
      pickup_address: request.pickup_address || '',
      pickup_date: request.pickup_date || '',
      pickup_time: request.pickup_time || '',
      special_instructions: request.special_instructions || ''
    });
    setRequestEditModal(true);
  };
  
  const handleSaveEditedRequest = async (e) => {
    e.preventDefault();
    
    try {
      // Рассчитываем общий вес и стоимость в рублях
      const totalWeight = requestEditForm.cargo_items.reduce((sum, item) => sum + (parseFloat(item.weight) || 0), 0);
      const totalValue = requestEditForm.cargo_items.reduce((sum, item) => sum + (parseFloat(item.total_price) || 0), 0);
      
      const updateData = {
        ...requestEditForm,
        total_weight: totalWeight,
        total_value: totalValue
      };
      
      // Используем правильный endpoint для обновления заявки курьером
      await apiCall(`/api/courier/requests/${selectedRequest.id}/update`, 'PUT', updateData);
      
      showAlert('Заявка обновлена успешно!', 'success');
      setRequestEditModal(false);
      
      // Обновляем списки заявок
      fetchAcceptedRequests();
      fetchPickedRequests();
      fetchCourierNewRequests();
      
    } catch (error) {
      console.error('Error updating request:', error);
      showAlert('Ошибка обновления заявки: ' + error.message, 'error');
    }
  };
  
  const addRequestCargoItem = () => {
    setRequestEditForm({
      ...requestEditForm,
      cargo_items: [...requestEditForm.cargo_items, { name: '', weight: '', price_per_kg: '80', total_price: '' }]
    });
  };
  
  const removeRequestCargoItem = (index) => {
    const newItems = requestEditForm.cargo_items.filter((_, i) => i !== index);
    setRequestEditForm({
      ...requestEditForm,
      cargo_items: newItems
    });
  };
  
  const updateRequestCargoItem = (index, field, value) => {
    const newItems = [...requestEditForm.cargo_items];
    newItems[index][field] = value;
    
    // Автоматический расчет общей стоимости при изменении веса или цены за кг
    if (field === 'weight' || field === 'price_per_kg') {
      const weight = parseFloat(field === 'weight' ? value : newItems[index].weight) || 0;
      const pricePerKg = parseFloat(field === 'price_per_kg' ? value : newItems[index].price_per_kg) || 0;
      newItems[index].total_price = (weight * pricePerKg).toFixed(2);
    }
    
    setRequestEditForm({
      ...requestEditForm,
      cargo_items: newItems
    });
  };
  
  const handlePrintLabel = () => {
    if (selectedRequest) {
      // Генерируем накладную
      const labelContent = `
        НАКЛАДНАЯ №${selectedRequest.id}
        
        ОТПРАВИТЕЛЬ:
        ФИО: ${selectedRequest.sender_full_name}
        Телефон: ${selectedRequest.sender_phone}
        Адрес: ${selectedRequest.pickup_address || selectedRequest.sender_address || ''}
        
        ПОЛУЧАТЕЛЬ:
        ФИО: ${selectedRequest.recipient_full_name || 'Не указан'}
        Телефон: ${selectedRequest.recipient_phone || 'Не указан'}
        Адрес: ${selectedRequest.recipient_address || 'Не указан'}
        
        ГРУЗ:
        Наименование: ${selectedRequest.cargo_name}
        Вес: ${selectedRequest.weight || 'Не указан'} кг
        
        ЗАБОР:
        Дата: ${selectedRequest.pickup_date 
          ? new Date(selectedRequest.pickup_date).toLocaleDateString('ru-RU')
          : 'Не указана'
        }
        Время: ${selectedRequest.pickup_time_from && selectedRequest.pickup_time_to 
          ? `${selectedRequest.pickup_time_from} - ${selectedRequest.pickup_time_to}`
          : (selectedRequest.pickup_time || 'Не указано')
        }
        Адрес: ${selectedRequest.pickup_address}
        
        КУРЬЕР: ${user?.full_name}
        Телефон курьера: ${user?.phone}
        
        Дата создания: ${new Date().toLocaleString('ru-RU')}
      `;
      
      // Создаем новое окно для печати
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
        return;
      }
      printWindow.document.write(`
        <html>
        <head>
          <title>Накладная №${selectedRequest.id}</title>
          <style>
            body { font-family: Arial, sans-serif; font-size: 12px; margin: 20px; }
            h1 { font-size: 16px; text-align: center; }
            .section { margin: 10px 0; }
            .section h3 { font-size: 14px; margin: 5px 0; }
          </style>
        </head>
        <body>
          <h1>НАКЛАДНАЯ №${selectedRequest.id}</h1>
          <hr>
          <pre style="white-space: pre-wrap; font-family: Arial;">${labelContent}</pre>
          <script>window.print();</script>
        </body>
        </html>
      `);
      printWindow.document.close();
      
      showAlert('Накладная отправлена на печать', 'success');
    }
  };
  
  const handlePrintQR = () => {
    if (selectedRequest) {
      // Генерируем QR код ТОЛЬКО с номером заявки в цифрах
      const requestNumber = selectedRequest.request_number || selectedRequest.id;
      const qrData = requestNumber; // Только номер заявки без префиксов
      
      // Создаем QR код (используем простую библиотеку или API)
      const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;
      
      // Создаем новое окно для печати QR кода
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
        return;
      }
      printWindow.document.write(`
        <html>
        <head>
          <title>QR Код - Заявка №${requestNumber}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              text-align: center; 
              margin: 20px;
            }
            .qr-container {
              display: inline-block;
              border: 2px solid #333;
              padding: 20px;
              margin: 20px;
            }
            .qr-info {
              margin: 10px 0;
              font-size: 12px;
            }
          </style>
        </head>
        <body>
          <div class="qr-container">
            <h2>QR КОД ЗАЯВКИ</h2>
            <img src="${qrApiUrl}" alt="QR Code" />
            <div class="qr-info">
              <strong>Номер заявки: ${requestNumber}</strong><br>
              <strong>Отправитель:</strong> ${selectedRequest.sender_full_name}<br>
              <strong>Телефон:</strong> ${selectedRequest.sender_phone}<br>
              <strong>Груз:</strong> ${selectedRequest.cargo_name}<br>
              <strong>Курьер:</strong> ${user?.full_name}<br>
              <strong>Статус оплаты:</strong> ${selectedRequest.payment_status === 'paid' ? 'Оплачено' : 
                                             selectedRequest.payment_status === 'not_paid' ? 'Не оплачено' : 
                                             'При получении'}
            </div>
          </div>
          <script>window.print();</script>
        </body>
        </html>
      `);
      printWindow.document.close();
      
      showAlert('QR код отправлен на печать', 'success');
    }
  };
  
  // НОВЫЕ ФУНКЦИИ ДЛЯ СВЯЗИ С ОТПРАВИТЕЛЕМ
  const handleContactSender = (request) => {
    setContactSender({
      full_name: request.sender_full_name,
      phone: request.sender_phone,
      cargo_name: request.cargo_name,
      pickup_address: request.pickup_address
    });
    setSenderContactModal(true);
  };
  
  const handleWhatsApp = () => {
    if (contactSender?.phone) {
      const cleanPhone = contactSender.phone.replace(/[^\d]/g, '');
      const message = encodeURIComponent(
        `Здравствуйте! Я курьер, приеду забрать груз "${contactSender.cargo_name}" по адресу: ${contactSender.pickup_address}`
      );
      const whatsappUrl = `https://wa.me/${cleanPhone}?text=${message}`;
      window.open(whatsappUrl, '_blank');
      setSenderContactModal(false);
    }
  };
  
  const handleTelegram = () => {
    if (contactSender?.phone) {
      const cleanPhone = contactSender.phone.replace(/[^\d]/g, '');
      const message = encodeURIComponent(
        `Здравствуйте! Я курьер, приеду забрать груз "${contactSender.cargo_name}" по адресу: ${contactSender.pickup_address}`
      );
      const telegramUrl = `https://t.me/+${cleanPhone}?text=${message}`;
      window.open(telegramUrl, '_blank');
      setSenderContactModal(false);
    }
  };
  
  const handleSenderOnlineChat = () => {
    // Здесь можно реализовать встроенный чат или перенаправить на страницу чата
    showAlert(`Онлайн чат с ${contactSender?.full_name} будет доступен в ближайшее время`, 'info');
    setSenderContactModal(false);
  };
  
  const handlePhoneCall = () => {
    if (contactSender?.phone) {
      const phoneUrl = `tel:${contactSender.phone}`;
      window.location.href = phoneUrl;
      setSenderContactModal(false);
    }
  };
  
  // НОВАЯ ФУНКЦИЯ ДЛЯ ВОССТАНОВЛЕНИЯ ОТМЕНЕННОЙ ЗАЯВКИ
  const handleRestoreRequest = async (requestId) => {
    try {
      await apiCall(`/api/courier/requests/${requestId}/restore`, 'PUT');
      
      showAlert('Заявка успешно восстановлена и перемещена в новые заявки!', 'success');
      
      // Обновляем все списки заявок
      fetchCourierNewRequests();
      fetchCancelledRequests();
      
    } catch (error) {
      console.error('Error restoring request:', error);
      showAlert('Ошибка восстановления заявки: ' + error.message, 'error');
    }
  };

  // Функция для генерации QR кода отдельной ячейки
  const generateSingleCellQR = async () => {
    if (!singleCellBlock || !singleCellShelf || !singleCellNumber) {
      showAlert('Пожалуйста, заполните все поля (Блок, Полка, Ячейка)', 'error');
      return;
    }

    // Проверяем что введены только цифры
    if (!/^\d+$/.test(singleCellBlock) || !/^\d+$/.test(singleCellShelf) || !/^\d+$/.test(singleCellNumber)) {
      showAlert('Пожалуйста, вводите только цифры в поля Блок, Полка и Ячейка', 'error');
      return;
    }

    setSingleCellQRLoading(true);
    try {
      console.log('🏗️ Генерация QR кода для ячейки:', `Б${singleCellBlock}-П${singleCellShelf}-Я${singleCellNumber}`);
      
      const response = await apiCall('/api/warehouse/cell/generate-qr', 'POST', {
        warehouse_id: selectedWarehouseForManagement?.id || 'default',
        block: parseInt(singleCellBlock),
        shelf: parseInt(singleCellShelf),
        cell: parseInt(singleCellNumber),
        format: 'id' // Используем новый ID формат по умолчанию
      });
      
      if (response && response.success) {
        setSingleCellQRResult({
          location: response.readable_name || `Б${singleCellBlock}-П${singleCellShelf}-Я${singleCellNumber}`,
          readable_name: response.readable_name || `Б${singleCellBlock}-П${singleCellShelf}-Я${singleCellNumber}`,
          cell_code: response.cell_code,
          warehouse_id_number: response.warehouse_id_number,
          format_type: response.format_type,
          qr_code: response.qr_code,
          success: true
        });
        console.log('✅ QR код создан:', response.cell_code, 'для печати:', response.readable_name);
        showAlert(`QR код для ячейки ${response.readable_name || `Б${singleCellBlock}-П${singleCellShelf}-Я${singleCellNumber}`} создан успешно!`, 'success');
      } else {
        setSingleCellQRResult({
          location: `Б${singleCellBlock}-П${singleCellShelf}-Я${singleCellNumber}`,
          success: false,
          error: 'Не удалось создать QR код'
        });
        showAlert('Ошибка создания QR кода', 'error');
      }
    } catch (error) {
      console.error('Error generating single cell QR:', error);
      setSingleCellQRResult({
        location: `Б${singleCellBlock}-П${singleCellShelf}-Я${singleCellNumber}`,
        success: false,
        error: error.message
      });
      showAlert(`Ошибка создания QR кода: ${error.message}`, 'error');
    } finally {
      setSingleCellQRLoading(false);
    }
  };

  // Функция для сброса формы отдельной ячейки
  const resetSingleCellForm = () => {
    setSingleCellBlock('');
    setSingleCellShelf('');
    setSingleCellNumber('');
    setSingleCellQRResult(null);
    setSingleCellQRLoading(false);
  };

  // Функция для остановки мобильного сканирования
  const stopMobileScanning = async () => {
    try {
      // Останавливаем все активные сканеры
      setSearchScannerActive(false);
      setPlacementActive(false);
      setScannerActive(false);
      setScannerMode('none');
      setScannerError(null);
      
      // Сбрасываем состояния
      setMobilePlacementStep('start');
      setReceiveStep('start');
      setScannedCargo(null);
      setScannedCell(null);
      setReceivedCargo(null);
      setNewCell(null);
      setSearchResult(null);
      setPlacementInfoMessage('');
      
      // Останавливаем камеру
      await stopCameraScanner();
      await completeQrCleanup("Mobile scanning stopped");
      
      showAlert('Сканирование остановлено', 'info');
    } catch (error) {
      console.error('Error stopping mobile scanning:', error);
    }
  };

  // Функция выполнения мобильного размещения с автоматической статистикой
  const performMobilePlacement = async (cargo, cell) => {
    try {
      // Выполняем размещение
      await handlePlaceCargo(
        cargo.id,
        cell.warehouse_id,
        cell.block_number,
        cell.shelf_number,
        cell.cell_number
      );
      
      // Формируем информацию о размещенном грузе
      const placementInfo = `Груз: ${cargo.cargo_number} - Б${cell.block_number}-П${cell.shelf_number}-Я${cell.cell_number}`;
      
      // Добавляем в список размещений текущей сессии
      setSessionPlacements(prev => [...prev, placementInfo]);
      setSessionPlacementCount(prev => prev + 1);
      
      // Обновляем информационное сообщение с успехом (без дублирования уведомлений)
      setPlacementInfoMessage(`🎉 Груз ${cargo.cargo_number} успешно размещен на Б${cell.block_number}-П${cell.shelf_number}-Я${cell.cell_number}! Приступите к следующему грузу.`);
      
      // Сбрасываем состояние для следующего размещения  
      setMobilePlacementStep('scan-cargo');
      setScannerMode('mobile-placement-cargo');
      setScannedCargo(null);
      setScannedCell(null);
      
      // Показываем единое уведомление о успешном размещении (вместо двойного)
      showAlert(`🎉 Груз ${cargo.cargo_number} размещен на Б${cell.block_number}-П${cell.shelf_number}-Я${cell.cell_number}!`, 'success');
      
      // Автоматически продолжаем сканирование для следующего груза
      setTimeout(() => {
        setPlacementInfoMessage('Отсканируйте QR код следующего груза для размещения.');
      }, 4000); // Увеличили время показа до 4 секунд
      
    } catch (error) {
      console.error('Error in mobile placement:', error);
      setPlacementInfoMessage(`❌ Ошибка размещения груза ${cargo.cargo_number}: ${error.message}`);
      throw error;
    }
  };

  // New function: Validate cargo number
  const validateCargoNumber = async (cargoNumber) => {
    if (!cargoNumber.trim()) {
      setCargoValidation({ isValid: false, cargoInfo: null, isLoading: false });
      return;
    }

    setCargoValidation({ isValid: false, cargoInfo: null, isLoading: true });

    try {
      // Check if cargo exists by scanning QR endpoint
      const response = await apiCall('/api/qr/scan', 'POST', {
        qr_text: cargoNumber.trim()
      });
      
      if (response && response.type === 'cargo') {
        setCargoValidation({
          isValid: true,
          cargoInfo: {
            cargo_number: response.cargo_number,
            cargo_name: response.cargo_name,
            weight: response.weight,
            sender: response.sender,
            recipient: response.recipient
          },
          isLoading: false
        });
      } else {
        setCargoValidation({
          isValid: false,
          cargoInfo: null,
          isLoading: false
        });
      }
    } catch (error) {
      console.error('Error validating cargo:', error);
      setCargoValidation({
        isValid: false,
        cargoInfo: null,
        isLoading: false
      });
    }
  };

  // New function: Get available warehouse cells
  const getAvailableWarehouseCells = async () => {
    setCellValidation({ availableCells: [], selectedWarehouse: null, isLoading: true });

    try {
      // Get user's assigned warehouses
      const warehousesResponse = await apiCall('/api/warehouses');
      
      if (warehousesResponse && warehousesResponse.length > 0) {
        const warehouse = warehousesResponse[0]; // Use first available warehouse
        
        // Get warehouse structure
        const structureResponse = await apiCall(`/api/warehouses/${warehouse.id}/structure`);
        
        if (structureResponse) {
          // Generate available cells (free cells only)
          const availableCells = [];
          
          for (let block = 1; block <= structureResponse.blocks; block++) {
            for (let shelf = 1; shelf <= structureResponse.shelves_per_block; shelf++) {
              for (let cell = 1; cell <= structureResponse.cells_per_shelf; cell++) {
                // Check if cell is occupied
                const isOccupied = structureResponse.cells.some(c => 
                  c.block === block && c.shelf === shelf && c.cell === cell && c.is_occupied
                );
                
                if (!isOccupied) {
                  availableCells.push({
                    warehouse_id: warehouse.id,
                    warehouse_name: warehouse.name,
                    block: block,
                    shelf: shelf,
                    cell: cell,
                    code: `${warehouse.id}-Б${block}-П${shelf}-Я${cell}`,
                    display: `Блок ${block}, Полка ${shelf}, Ячейка ${cell}`
                  });
                }
              }
            }
          }
          
          setCellValidation({
            availableCells: availableCells.slice(0, 20), // Show first 20 available cells
            selectedWarehouse: warehouse,
            isLoading: false
          });
        }
      }
    } catch (error) {
      console.error('Error getting available cells:', error);
      setCellValidation({ availableCells: [], selectedWarehouse: null, isLoading: false });
    }
  };

  // New function: Manual cargo placement
  const handleManualPlacement = async () => {
    if (!manualCargoNumber.trim() || !manualCellCode.trim()) {
      showAlert('Введите номер груза и код ячейки', 'error');
      return;
    }

    try {
      const success = await placeCargoInCell(manualCargoNumber.trim(), manualCellCode.trim());
      
      if (success) {
        showAlert('Груз успешно размещен вручную!', 'success');
        setManualCargoNumber('');
        setManualCellCode('');
        await fetchPlacementStatistics();
      }
    } catch (error) {
      console.error('Error in manual placement:', error);
      showAlert(`Ошибка размещения: ${error.message}`, 'error');
    }
  };

  // Функция для запуска размещения с внешним сканером
  const startExternalScannerPlacement = async () => {
    try {
      console.log('🖥️ Запуск размещения груза с внешним сканером...');
      
      setExternalScannerActive(true);
      setExternalScannerStep('cargo');
      setExternalCargoInput('');
      setExternalCellInput('');
      setExternalScannedCargo(null);
      setExternalScannedCell(null);
      setScannerMode('external-scanner');
      setScannerMessage('Отсканируйте QR код груза с помощью внешнего сканера');
      
      // Fetch statistics and available cells
      await fetchPlacementStatistics();
      await getAvailableWarehouseCells();
      
      showAlert('🖥️ Режим внешнего сканера активирован! Отсканируйте QR код груза.', 'info');
      
    } catch (error) {
      console.error('Ошибка запуска внешнего сканера:', error);
      showAlert('Ошибка при запуске внешнего сканера', 'error');
    }
  };

  // Функция для остановки внешнего сканера
  const stopExternalScannerPlacement = () => {
    console.log('🛑 Остановка размещения с внешним сканером...');
    
    setExternalScannerActive(false);
    setExternalScannerStep('cargo');
    setExternalCargoInput('');
    setExternalCellInput('');
    setExternalScannedCargo(null);
    setExternalScannedCell(null);
    setScannerMode('none');
    setScannerMessage('');
    
    showAlert('Размещение с внешним сканером остановлено', 'info');
  };

  // Функция обработки ввода от внешнего сканера для груза
  const handleExternalCargoScan = async (cargoData) => {
    try {
      const cargoNumber = extractCargoNumber(cargoData);
      console.log('🖥️ Сканирование груза внешним сканером:', cargoNumber);
      
      // Ищем груз в списке ожидающих размещение
      const cargo = availableCargoForPlacement.find(item => 
        item.cargo_number === cargoNumber || 
        item.id === cargoNumber ||
        cargoData.includes(cargoNumber)
      );

      if (cargo) {
        setExternalScannedCargo(cargo);
        setScannerMessage(`✅ Груз ${cargo.cargo_number} найден! Переходим к сканированию ячейки.`);
        showAlert(`Груз ${cargo.cargo_number} найден! Отсканируйте ячейку.`, 'success');
        
        // УЛУЧШЕНИЕ: МГНОВЕННЫЙ переход к сканированию ячейки без задержек
        setExternalScannerStep('cell');
        setScannerMessage(`📍 Отсканируйте QR код ячейки для размещения груза ${cargo.cargo_number}`);
        
        // Мгновенно фокусируемся на поле ячейки
        setTimeout(() => {
          const cellInput = document.querySelector('input[placeholder*="QR код ячейки"]');
          if (cellInput) {
            cellInput.focus();
          }
        }, 50); // Минимальная задержка только для DOM
        
      } else {
        setScannerError('Груз не найден в списке ожидающих размещение');
        showAlert('Груз не найден в списке ожидающих размещение. Проверьте номер груза.', 'error');
      }
    } catch (error) {
      console.error('Ошибка обработки сканирования груза:', error);
      setScannerError('Ошибка обработки данных груза');
      showAlert('Ошибка обработки данных груза', 'error');
    }
  };

  // Функция обработки ввода от внешнего сканера для ячейки
  const handleExternalCellScan = async (cellData) => {
    try {
      console.log('🖥️ Сканирование ячейки внешним сканером:', cellData);
      
      const cellInfo = parseCellQRCode(cellData);
      if (cellInfo) {
        // Используем читаемое имя ячейки для отображения
        // ИСПРАВЛЕНИЕ: Отображаем цифровой код QR вместо читаемого формата
        const cellDisplayFormat = cellInfo.cell_code || cellInfo.readable_name;
        
        // Вводим данные в поле для сканирования ячейки
        setExternalCellInput(cellDisplayFormat);
        
        console.log('📍 Отсканированы данные ячейки:', cellDisplayFormat);
        console.log('📍 Формат данных:', cellInfo.format);
        console.log('📍 Код для размещения:', cellInfo.cell_code);
        
        // Проверяем занятость ячейки перед размещением
        try {
          console.log('🔍 Проверка занятости ячейки:', cellDisplayFormat);
          
          let cellStatusPayload = {};
          
          // Формируем payload в зависимости от формата
          if (cellInfo.format === 'id') {
            cellStatusPayload = {
              warehouse_id_number: cellInfo.warehouse_id_number,
              block_id_number: cellInfo.block_id_number,
              shelf_id_number: cellInfo.shelf_id_number,
              cell_id_number: cellInfo.cell_id_number
            };
          } else {
            cellStatusPayload = {
              warehouse_id: cellInfo.warehouse_id,
              block_number: cellInfo.block_number,
              shelf_number: cellInfo.shelf_number,
              cell_number: cellInfo.cell_number
            };
          }
          
          const cellStatusResponse = await apiCall(`/api/warehouse/cell/status`, 'POST', cellStatusPayload);

          if (cellStatusResponse && cellStatusResponse.is_occupied) {
            // Ячейка занята - показываем предупреждение
            setScannerError(`Ячейка ${cellDisplayFormat} уже занята`);
            setScannerMessage(`⚠️ Ячейка ${cellDisplayFormat} уже забронирована грузом: ${cellStatusResponse.cargo_number || 'Неизвестный груз'}`);
            showAlert(`⚠️ Ячейка ${cellDisplayFormat} уже забронирована грузом: ${cellStatusResponse.cargo_number || 'Неизвестный груз'}`, 'warning');
            return;
          }

          // Ячейка свободна - продолжаем размещение
          setExternalScannedCell(cellInfo);
          setScannerMessage(`✅ Ячейка отсканирована: ${cellDisplayFormat}. Ячейка свободна. Выполняем размещение...`);
          
          // Автоматически выполняем размещение
          if (externalScannedCargo) {
            await performExternalScannerPlacement(externalScannedCargo, cellInfo);
          }

        } catch (statusError) {
          console.warn('Не удалось проверить статус ячейки, продолжаем размещение:', statusError);
          // Если не удалось проверить статус ячейки, продолжаем размещение (fallback)
          setExternalScannedCell(cellInfo);
          setScannerMessage(`✅ Ячейка отсканирована: ${cellDisplayFormat}. Выполняем размещение...`);
          
          if (externalScannedCargo) {
            await performExternalScannerPlacement(externalScannedCargo, cellInfo);
          }
        }
      } else {
        setScannerError('Неверный формат QR-кода ячейки');
        setScannerMessage('❌ Неверный формат QR-кода ячейки. Ожидается формат: Б1-П2-Я3');
        showAlert('Неверный формат QR-кода ячейки. Попробуйте еще раз.', 'error');
      }
    } catch (error) {
      console.error('Ошибка обработки сканирования ячейки:', error);
      setScannerError('Ошибка обработки данных ячейки');
      setScannerMessage('❌ Ошибка обработки данных ячейки');
      showAlert('Ошибка обработки данных ячейки', 'error');
    }
  };

  // Функция выполнения размещения с внешним сканером
  const performExternalScannerPlacement = async (cargo, cell) => {
    try {
      console.log('🖥️ Выполняем размещение груза:', cargo.cargo_number, 'в ячейку:', cell.readable_name);
      console.log('🖥️ Формат ячейки:', cell.format);
      console.log('🖥️ Код ячейки для размещения:', cell.cell_code);
      
      // API call для размещения груза
      const response = await apiCall('/api/cargo/place-in-cell', 'POST', {
        cargo_number: cargo.cargo_number,
        cell_code: cell.cell_code  // Используем новый cell_code который поддерживает ID формат
      });
      
      if (response && response.success) {
        setExternalScannerStep('complete');
        setScannerMessage(`🎉 Груз ${cargo.cargo_number} успешно размещен на ${cell.readable_name}!`);
        
        showAlert(`🎉 Груз ${cargo.cargo_number} размещен на ${cell.readable_name}!`, 'success');
        
        // НОВОЕ: Добавляем информацию о размещенном грузе в список сессии
        const placedCargoInfo = {
          cargo_number: cargo.cargo_number,
          location: cell.readable_name,
          warehouse_name: cell.warehouse_name || `Склад №${cell.warehouse_number}`,
          placed_at: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
        };
        
        setSessionPlacedCargo(prev => [...prev, placedCargoInfo]);
        setSessionPlacedCount(prev => prev + 1);
        
        // Обновляем статистику размещения
        await fetchPlacementStatistics();
        
        // УЛУЧШЕНИЕ: МГНОВЕННЫЙ переход к сканированию следующего груза для непрерывного процесса
        // Сбрасываем состояние и сразу переходим к сканированию следующего груза
        setExternalScannerStep('cargo');
        setExternalCargoInput('');
        setExternalCellInput('');
        setExternalScannedCargo(null);
        setExternalScannedCell(null);
        setScannerMessage('🔄 Груз размещен! Отсканируйте следующий груз для размещения.');
        
        // Мгновенно фокусируемся на поле груза для непрерывной работы
        setTimeout(() => {
          const cargoInput = document.querySelector('input[placeholder*="QR код груза"]');
          if (cargoInput) {
            cargoInput.focus();
          }
        }, 100);
      } else {
        throw new Error(response?.message || 'Неизвестная ошибка размещения');
      }
      
    } catch (error) {
      console.error('Ошибка размещения с внешним сканером:', error);
      setScannerError(`Ошибка при размещении груза: ${error.message}`);
      showAlert(`Ошибка при размещении груза: ${error.message}`, 'error');
    }
  };

  // Обработчик изменения маршрута с автоматическим обновлением стоимости
  const handleRouteChange = (newRoute) => {
    const defaultValue = getDefaultDeclaredValue(newRoute);
    setCargoOrderForm(prevForm => ({
      ...prevForm,
      route: newRoute,
      declared_value: defaultValue
    }));
  };

  // Новые состояния для управления заказами клиентов
  const [pendingOrders, setPendingOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [orderDetailsModal, setOrderDetailsModal] = useState(false);
  const [editOrderModal, setEditOrderModal] = useState(false);
  const [newOrdersCount, setNewOrdersCount] = useState(0);
  const [orderEditForm, setOrderEditForm] = useState({
    sender_full_name: '',
    sender_phone: '',
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    pickup_address: '',
    cargo_name: '',
    weight: '',
    declared_value: '',
    description: '',
    route: '',
    admin_notes: ''
  });

  // Form states
  const [loginForm, setLoginForm] = useState({ phone: '', password: '' });
  const [registerForm, setRegisterForm] = useState({ full_name: '', phone: '', password: '' }); // Убрана роль (Функция 3)
  const [cargoForm, setCargoForm] = useState({
    recipient_name: '',
    recipient_phone: '',
    route: 'moscow_to_tajikistan',
    weight: '',
    description: '',
    declared_value: '',
    sender_address: '',
    recipient_address: ''
  });
  const [warehouseForm, setWarehouseForm] = useState({
    name: '',
    location: '',
    blocks_count: 1,
    shelves_per_block: 1,
    cells_per_shelf: 10,
    assigned_operator_id: 'none' // Новое поле для выбора оператора
  });
  
  // Новые состояния для улучшенного создания склада
  const [showWarehouseCreationPage, setShowWarehouseCreationPage] = useState(false);
  const [availableOperators, setAvailableOperators] = useState([]);
  const [warehouseCreationStep, setWarehouseCreationStep] = useState('form'); // 'form', 'qr-generation'
  const [generatingAllQRs, setGeneratingAllQRs] = useState(false);
  const [allQRProgress, setAllQRProgress] = useState(0);
  const [generatedQRs, setGeneratedQRs] = useState([]);
  const [selectedCellQR, setSelectedCellQR] = useState({
    block: '',
    shelf: '',
    cell: ''
  });
  const [selectedCellQRResult, setSelectedCellQRResult] = useState(null);
  const [generatingSelectedCellQR, setGeneratingSelectedCellQR] = useState(false);
  const [createdWarehouseInfo, setCreatedWarehouseInfo] = useState(null);
  const [operatorCargoForm, setOperatorCargoForm] = useState({
    sender_full_name: '',
    sender_phone: '',
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    weight: '',  // Сохраняем для совместимости со старой формой
    cargo_name: '',  // Сохраняем для совместимости со старой формой
    declared_value: '',  // Теперь будет использоваться как price_per_kg для старой формы
    description: '',
    route: 'moscow_to_tajikistan',
    // Новые поля для множественных грузов с индивидуальными ценами
    cargo_items: [{ cargo_name: '', quantity: 1, weight: '', price_per_kg: '', total_amount: '' }],  // Каждый груз имеет свою цену + количество и общую сумму
    price_per_kg: '',  // Общая цена за кг (для совместимости)
    use_multi_cargo: true,  // Флаг для переключения между режимами (включён по умолчанию)
    // НОВЫЕ ПОЛЯ ДЛЯ УЛУЧШЕННОЙ СИСТЕМЫ
    warehouse_id: '',  // Выбранный склад
    payment_method: 'not_paid',  // Способ оплаты
    payment_amount: '',  // Сумма оплаты
    debt_due_date: '',  // Дата погашения долга
    // НОВЫЕ ПОЛЯ ДЛЯ КУРЬЕРСКОЙ СЛУЖБЫ
    pickup_required: false,  // Требуется забор груза
    pickup_address: '',  // Адрес забора груза
    pickup_date: '',  // Дата забора (YYYY-MM-DD)
    pickup_time_from: '',  // Время забора с (HH:MM)
    pickup_time_to: '',  // Время забора до (HH:MM)
    delivery_method: 'pickup',  // Способ получения груза (pickup/home_delivery)
    courier_fee: '',  // Стоимость курьерских услуг
    // НОВЫЕ ПОЛЯ ДЛЯ РЕЖИМА ЗАБОРА ГРУЗА
    pickup_time_from: '',  // Время забора с (HH:MM)
    pickup_time_to: ''     // Время забора до (HH:MM)
  });
  // Operator cargo management states
  const [operatorCargo, setOperatorCargo] = useState([]);
  
  // Calculator states for multi-cargo functionality with individual prices
  const [totalWeight, setTotalWeight] = useState(0);
  const [totalCost, setTotalCost] = useState(0);
  const [cargoBreakdown, setCargoBreakdown] = useState([]);  // Детальная разбивка по каждому грузу

  // НОВЫЕ СОСТОЯНИЯ ДЛЯ УЛУЧШЕННОЙ СИСТЕМЫ  
  const [debtorsList, setDebtorsList] = useState([]);  // Список задолжников

  // Personal dashboard states
  const [personalDashboardData, setPersonalDashboardData] = useState(null);
  const [dashboardLoading, setDashboardLoading] = useState(false);
  
  // Admin dashboard analytics states
  const [adminDashboardAnalytics, setAdminDashboardAnalytics] = useState(null);
  const [adminAnalyticsLoading, setAdminAnalyticsLoading] = useState(false);
  
  // Operator dashboard analytics states
  const [operatorDashboardAnalytics, setOperatorDashboardAnalytics] = useState(null);
  const [operatorAnalyticsLoading, setOperatorAnalyticsLoading] = useState(false);
  
  // QR codes and invoice states
  const [cargoNumbers, setCargoNumbers] = useState('');
  const [generatedQRCodes, setGeneratedQRCodes] = useState([]);
  const [generatedInvoice, setGeneratedInvoice] = useState(null);
  const [qrCodeLoading, setQrCodeLoading] = useState(false);
  const [invoiceLoading, setInvoiceLoading] = useState(false);
  const [showQRCodesModal, setShowQRCodesModal] = useState(false);
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  
  // New QR Generation Modal states
  const [showQRGenerateModal, setShowQRGenerateModal] = useState(false);
  const [qrGenerateCargoNumber, setQrGenerateCargoNumber] = useState('');
  const [generatedSingleQR, setGeneratedSingleQR] = useState(null);
  const [qrGenerateLoading, setQrGenerateLoading] = useState(false);
  
  // Bulk QR Generation states
  const [showBulkQRModal, setBulkQRModal] = useState(false);
  const [selectedSender, setSelectedSender] = useState(null);
  const [senderCargos, setSenderCargos] = useState([]);
  const [bulkQRResults, setBulkQRResults] = useState([]);
  const [bulkQRLoading, setBulkQRLoading] = useState(false);
  
  // New Cargo Placement Modal states  
  const [showCargoPlacementModal, setShowCargoPlacementModal] = useState(false);
  const [placementActive, setPlacementActive] = useState(false);
  const [placementStep, setPlacementStep] = useState('idle'); // 'idle', 'scan-cargo', 'scan-cell'
  const [scannedCargoForPlacement, setScannedCargoForPlacement] = useState(null);
  const [placementStatistics, setPlacementStatistics] = useState(null);
  const [sessionPlacedCount, setSessionPlacedCount] = useState(0); // Счетчик размещенных грузов в текущей сессии
  const [targetWarehouseStats, setTargetWarehouseStats] = useState(null); // Статистика целевого склада для размещения
  const [sessionPlacedCargo, setSessionPlacedCargo] = useState([]); // Список размещенных грузов в текущей сессии
  const [selectedCargoForDeletion, setSelectedCargoForDeletion] = useState([]); // Выбранные грузы для массового удаления
  
  
  // Warehouse Management Modal states
  const [showWarehouseManagementModal, setShowWarehouseManagementModal] = useState(false);
  const [selectedWarehouseForManagement, setSelectedWarehouseForManagement] = useState(null);
  const [warehouseStructure, setWarehouseStructure] = useState(null);
  const [warehouseManagementLoading, setWarehouseManagementLoading] = useState(false);
  const [selectedCells, setSelectedCells] = useState([]);
  const [cellQRResults, setCellQRResults] = useState([]);
  const [cellQRLoading, setCellQRLoading] = useState(false);
  
  // Warehouse cities management states
  const [showWarehouseCitiesModal, setShowWarehouseCitiesModal] = useState(false);
  const [selectedWarehouseForCities, setSelectedWarehouseForCities] = useState(null);
  const [warehouseCities, setWarehouseCities] = useState([]);
  const [citiesLoading, setCitiesLoading] = useState(false);
  const [newCityName, setNewCityName] = useState('');
  const [bulkCitiesText, setBulkCitiesText] = useState('');
  
  // New cargo form fields states
  const [allWarehouseCities, setAllWarehouseCities] = useState([]);
  const [selectedDeliveryCity, setSelectedDeliveryCity] = useState('');
  const [selectedDeliveryWarehouse, setSelectedDeliveryWarehouse] = useState('');
  const [availableWarehousesForCity, setAvailableWarehousesForCity] = useState([]);
  const [allCitiesLoading, setAllCitiesLoading] = useState(false);
  const [citySearchQuery, setCitySearchQuery] = useState('');
  const [filteredCities, setFilteredCities] = useState([]);
  const [showCityDropdown, setShowCityDropdown] = useState(false);
  
  // Confirmation modal for cargo acceptance states
  const [showCargoConfirmationModal, setShowCargoConfirmationModal] = useState(false);
  const [confirmationCargoData, setConfirmationCargoData] = useState(null);
  const [qrGenerationInProgress, setQrGenerationInProgress] = useState(false);
  
  // Manual placement states
  const [manualCargoNumber, setManualCargoNumber] = useState('');
  const [manualCellCode, setManualCellCode] = useState('');
  
  // Validation states for manual input
  const [cargoValidation, setCargoValidation] = useState({ isValid: false, cargoInfo: null, isLoading: false });
  const [cellValidation, setCellValidation] = useState({ availableCells: [], selectedWarehouse: null, isLoading: false });
  
  // Camera management states
  const [availablePlacementCameras, setAvailablePlacementCameras] = useState([]);
  const [currentPlacementCameraIndex, setCurrentPlacementCameraIndex] = useState(0);
  
  // Application QR code states
  const [applicationQRCode, setApplicationQRCode] = useState(null);
  const [showApplicationQRModal, setShowApplicationQRModal] = useState(false);
  const [applicationQRLoading, setApplicationQRLoading] = useState(false);
  
  // Cargo creation QR code states
  const [createdCargoQR, setCreatedCargoQR] = useState(null);
  const [showCreatedCargoQRModal, setShowCreatedCargoQRModal] = useState(false);
  
  // Modal QR scanner state
  const [modalCameraIndex, setModalCameraIndex] = useState(0);
  const [modalCameras, setModalCameras] = useState([]);
  
  // QR Scanner states
  const [showQRScannerModal, setShowQRScannerModal] = useState(false);
  const [scannerActive, setScannerActive] = useState(false);
  const [scannedCargoInfo, setScannedCargoInfo] = useState(null);
  const [showScannedCargoModal, setShowScannedCargoModal] = useState(false);
  
  // Role management states
  const [showRoleModal, setShowRoleModal] = useState(false);
  const [selectedUserForRole, setSelectedUserForRole] = useState(null);
  const [newRole, setNewRole] = useState('');

  // Advanced search states
  const [advancedSearchOpen, setAdvancedSearchOpen] = useState(false);
  const [searchFilters, setSearchFilters] = useState({
    cargo_status: 'any',
    payment_status: 'any',
    processing_status: '',
    route: 'any',
    sender_phone: '',
    recipient_phone: '',
    date_from: '',
    date_to: '',
    user_role: '',
    user_status: null,
    sort_by: 'created_at',
    sort_order: 'desc'
  });
  const [searchSuggestions, setSearchSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [searchLoading, setSearchLoading] = useState(false);
  const [searchTime, setSearchTime] = useState(0);

  // Profile management states
  const [showOperatorProfile, setShowOperatorProfile] = useState(false);
  const [showUserProfile, setShowUserProfile] = useState(false);
  const [selectedOperatorProfile, setSelectedOperatorProfile] = useState(null);
  const [selectedUserProfile, setSelectedUserProfile] = useState(null);
  const [profileLoading, setProfileLoading] = useState(false);
  
  // Quick cargo creation states
  const [showQuickCargoModal, setShowQuickCargoModal] = useState(false);
  const [quickCargoForm, setQuickCargoForm] = useState({
    sender_id: '',
    recipient_data: {},
    cargo_items: [{ cargo_name: '', weight: '', price_per_kg: '' }],
    route: 'moscow_to_tajikistan',
    description: ''
  });
  const [frequentRecipients, setFrequentRecipients] = useState([]);
  const [selectedRecipient, setSelectedRecipient] = useState(null);
  const [operatorCargoFilter, setOperatorCargoFilter] = useState(''); // Фильтр для списка грузов
  const [operatorCargoPagination, setOperatorCargoPagination] = useState({}); // Пагинация для списка грузов
  const [operatorCargoPage, setOperatorCargoPage] = useState(1);
  const [operatorCargoPerPage, setOperatorCargoPerPage] = useState(25);
  
  const [availableCargo, setAvailableCargo] = useState([]);
  const [availableCargoForPlacement, setAvailableCargoForPlacement] = useState([]); // Грузы для размещения
  const [availableCargoPagination, setAvailableCargoPagination] = useState({}); // Пагинация для размещения
  const [availableCargoPage, setAvailableCargoPage] = useState(1);
  const [availableCargoPerPage, setAvailableCargoPerPage] = useState(25);
  
  const [selectedCargoForDetailView, setSelectedCargoForDetailView] = useState(null); // Выбранный груз для просмотра деталей
  const [cargoDetailsModal, setCargoDetailsModal] = useState(false); // Модальное окно деталей груза
  const [quickPlacementModal, setQuickPlacementModal] = useState(false); // Быстрое размещение
  const [warehouseNumbersUpdated, setWarehouseNumbersUpdated] = useState(false); // Флаг обновления номеров складов
  const [qrGenerationModal, setQrGenerationModal] = useState(false); // Модальное окно генерации QR кодов
  const [selectedWarehouseForQR, setSelectedWarehouseForQR] = useState(null); // Выбранный склад для генерации QR
  const [warehouseSelectionModal, setWarehouseSelectionModal] = useState(false); // Модальное окно выбора склада для QR
  const [massQRGeneration, setMassQRGeneration] = useState({
    isGenerating: false,
    progress: 0,
    total: 0,
    current: 0,
    results: []
  }); // Состояние массовой генерации QR кодов
  
  // ИСПРАВЛЕНИЕ: Глобальный обработчик ошибок removeChild
  useEffect(() => {
    const handleGlobalError = (event) => {
      if (event.error && event.error.message && 
          (event.error.message.includes('removeChild') || event.error.message.includes('Node'))) {
        console.warn('🔧 Глобальная ошибка removeChild перехвачена и обработана:', event.error.message);
        event.preventDefault(); // Предотвращаем показ ошибки пользователю
      }
    };
    
    window.addEventListener('error', handleGlobalError);
    
    return () => {
      window.removeEventListener('error', handleGlobalError);
    };
  }, []);
  const [quickPlacementForm, setQuickPlacementForm] = useState({
    block_number: 1,
    shelf_number: 1,
    cell_number: 1
  });
  const [cargoHistory, setCargoHistory] = useState([]);
  const [selectedWarehouse, setSelectedWarehouse] = useState('');
  const [availableCells, setAvailableCells] = useState([]);
  const [historyFilters, setHistoryFilters] = useState({
    status: 'all',
    search: ''
  });
  const [unpaidCargo, setUnpaidCargo] = useState([]);
  const [paymentHistory, setPaymentHistory] = useState([]);
  const [paymentModal, setPaymentModal] = useState(false);
  const [cargoForPayment, setCargoForPayment] = useState(null);
  const [paymentForm, setPaymentForm] = useState({
    cargo_number: '',
    amount_paid: '',
    transaction_type: 'cash',
    notes: ''
  });
  const [warehouseLayout, setWarehouseLayout] = useState(null);
  const [selectedWarehouseForLayout, setSelectedWarehouseForLayout] = useState(null);
  const [layoutModal, setLayoutModal] = useState(false);
  const [usersByRole, setUsersByRole] = useState({
    user: [],
    admin: [],
    warehouse_operator: []
  });
  const [cargoRequests, setCargoRequests] = useState([]);
  const [myRequests, setMyRequests] = useState([]);

  const [requestForm, setRequestForm] = useState({
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    pickup_address: '',
    cargo_name: '',
    weight: '',
    declared_value: '80', // По умолчанию для общего маршрута moscow_to_tajikistan
    description: '',
    route: 'moscow_to_tajikistan'
  });

  // Transport states
  const [transports, setTransports] = useState([]);
  const [transportForm, setTransportForm] = useState({
    driver_name: '',
    driver_phone: '',
    transport_number: '',
    capacity_kg: '',
    direction: ''
  });
  const [selectedTransport, setSelectedTransport] = useState(null);
  const [transportManagementModal, setTransportManagementModal] = useState(false);
  const [availableCargoForTransport, setAvailableCargoForTransport] = useState([]);
  const [selectedCargoForPlacement, setSelectedCargoForPlacement] = useState([]);
  const [transportCargoList, setTransportCargoList] = useState([]);
  const [contactModal, setContactModal] = useState(false);

  // Notification management states
  const [notificationDetailsModal, setNotificationDetailsModal] = useState(false);
  const [selectedNotificationDetails, setSelectedNotificationDetails] = useState(null);

  // Search and header states
  const [searchType, setSearchType] = useState('all');
  const [showSearchResults, setShowSearchResults] = useState(false);

  // Operator-warehouse management states
  const [operatorWarehouseBindings, setOperatorWarehouseBindings] = useState([]);
  const [operatorBindingModal, setOperatorBindingModal] = useState(false);
  const [selectedOperatorForBinding, setSelectedOperatorForBinding] = useState('');
  const [selectedWarehouseForBinding, setSelectedWarehouseForBinding] = useState('');

  // Warehouse cell management states
  const [selectedCellCargo, setSelectedCellCargo] = useState(null);
  const [cargoDetailModal, setCargoDetailModal] = useState(false);
  const [cargoEditModal, setCargoEditModal] = useState(false);
  const [cargoMoveModal, setCargoMoveModal] = useState(false);
  const [editingCargo, setEditingCargo] = useState(null);
  const [cargoEditForm, setCargoEditForm] = useState({});
  const [cargoMoveForm, setCargoMoveForm] = useState({
    warehouse_id: '',
    block_number: '',
    shelf_number: '',
    cell_number: ''
  });

  // QR Code states
  const [qrScannerModal, setQrScannerModal] = useState(false);
  const [qrPrintModal, setQrPrintModal] = useState(false);
  const [selectedCargoForQr, setSelectedCargoForQr] = useState(null);
  const [selectedWarehouseForQr, setSelectedWarehouseForQr] = useState(null);
  const [qrScanResult, setQrScanResult] = useState(null);

  // Arrived transport and cargo placement states
  const [arrivedTransports, setArrivedTransports] = useState([]);
  const [selectedArrivedTransport, setSelectedArrivedTransport] = useState(null);
  const [arrivedTransportModal, setArrivedTransportModal] = useState(false);
  const [arrivedCargoList, setArrivedCargoList] = useState([]);
  const [cargoPlacementModal, setCargoPlacementModal] = useState(false);
  const [selectedCargoForWarehouse, setSelectedCargoForWarehouse] = useState(null);
  const [placementForm, setPlacementForm] = useState({
    warehouse_id: '',
    block_number: 1,
    shelf_number: 1,
    cell_number: 1
  });

  // Transport visualization states
  const [transportVisualizationModal, setTransportVisualizationModal] = useState(false);
  const [selectedTransportForVisualization, setSelectedTransportForVisualization] = useState(null);
  const [transportVisualizationData, setTransportVisualizationData] = useState(null);

  // QR/Number cargo placement states
  const [qrPlacementModal, setQrPlacementModal] = useState(false);
  const [qrPlacementForm, setQrPlacementForm] = useState({
    cargo_number: '',
    qr_data: '',
    cell_qr_data: '',
    block_number: 1,
    shelf_number: 1,
    cell_number: 1
  });

  // Operator-specific states
  const [operatorWarehouses, setOperatorWarehouses] = useState([]);
  const [routeWarehouses, setRouteWarehouses] = useState([]);  // Склады по выбранному маршруту
  const [showWarehouseScheme, setShowWarehouseScheme] = useState(null); // ID склада для показа схемы
  const [warehouseSchemeData, setWarehouseSchemeData] = useState([]); // Данные схемы склада
  const [warehouseSchemeLoading, setWarehouseSchemeLoading] = useState(false); // Загрузка схемы склада
  const [warehouseCells, setWarehouseCells] = useState([]); // Ячейки склада
  const [showCargoManagementModal, setShowCargoManagementModal] = useState(false); // Модальное окно управления грузом
  const [selectedCargoForManagement, setSelectedCargoForManagement] = useState(null); // Выбранный груз для управления
  const [showWarehouseReport, setShowWarehouseReport] = useState(null); // ID склада для отчета
  const [warehouseReportData, setWarehouseReportData] = useState([]); // Данные отчета по складу
  const [warehouseDetailedAnalytics, setWarehouseDetailedAnalytics] = useState({}); // Детальная аналитика складов
  const [interwarehouseTransportModal, setInterwarehouseTransportModal] = useState(false);
  const [interwarehouseForm, setInterwarehouseForm] = useState({
    source_warehouse_id: '',
    destination_warehouse_id: '',
    driver_name: '',
    driver_phone: '',
    capacity_kg: 1000
  });

  const [alerts, setAlerts] = useState([]);
  
  // Состояние для предотвращения множественных logout'ов
  const [isLoggingOut, setIsLoggingOut] = useState(false);
  
  // Состояние для отслеживания процесса логина
  const [isLoggingIn, setIsLoggingIn] = useState(false);

  // Новые состояния для расширенного профиля пользователя
  const [showEditProfile, setShowEditProfile] = useState(false);
  const [editProfileForm, setEditProfileForm] = useState({
    full_name: '',
    phone: '',
    email: '',
    address: ''
  });
  const [showRepeatOrderModal, setShowRepeatOrderModal] = useState(false);
  const [repeatOrderData, setRepeatOrderData] = useState(null);
  const [repeatOrderForm, setRepeatOrderForm] = useState({
    cargo_items: [{ cargo_name: '', weight: '', price_per_kg: '' }],
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    route: 'moscow_dushanbe',
    delivery_type: 'standard',
    insurance_requested: false,
    special_instructions: '',
    use_multi_cargo: true
  });
  
  // Состояния для мульти-груз калькулятора в повторном заказе
  const [repeatOrderTotalWeight, setRepeatOrderTotalWeight] = useState(0);
  const [repeatOrderTotalCost, setRepeatOrderTotalCost] = useState(0);
  const [repeatOrderBreakdown, setRepeatOrderBreakdown] = useState([]);

  // Новые состояния для админ функций
  const [showAdminEditUser, setShowAdminEditUser] = useState(false);
  const [adminEditUserForm, setAdminEditUserForm] = useState({
    id: '',
    full_name: '',
    phone: '',
    email: '',
    address: '',
    role: 'user',
    is_active: true
  });
  const [selectedUserForEdit, setSelectedUserForEdit] = useState(null);
  
  // Состояния для повторного заказа админом/оператором
  const [showAdminRepeatOrderModal, setShowAdminRepeatOrderModal] = useState(false);
  const [adminRepeatOrderData, setAdminRepeatOrderData] = useState(null);
  const [adminRepeatOrderForm, setAdminRepeatOrderForm] = useState({
    sender_id: '',
    sender_full_name: '',
    sender_phone: '',
    cargo_items: [{ cargo_name: '', weight: '', price_per_kg: '' }],
    recipient_full_name: '',
    recipient_phone: '',
    recipient_address: '',
    route: 'moscow_dushanbe',
    delivery_type: 'standard',
    insurance_requested: false,
    special_instructions: '',
    use_multi_cargo: true
  });
  
  // Состояния для мульти-груз калькулятора админа/оператора
  const [adminRepeatOrderTotalWeight, setAdminRepeatOrderTotalWeight] = useState(0);
  const [adminRepeatOrderTotalCost, setAdminRepeatOrderTotalCost] = useState(0);
  const [adminRepeatOrderBreakdown, setAdminRepeatOrderBreakdown] = useState([]);

  // Состояние для отслеживания автозаполнения из профиля
  const [isFilledFromProfile, setIsFilledFromProfile] = useState(false);
  const [profileSourceUser, setProfileSourceUser] = useState(null);

  // Состояния для сканирования штрих-кодов и QR-кодов при размещении
  const [scannerMode, setScannerMode] = useState('none'); // 'none', 'cargo-barcode', 'cell-qr', 'cargo-qr-search', 'external-scanner'
  const [scannedCargoData, setScannedCargoData] = useState(null);
  const [scannedCellData, setScannedCellData] = useState(null);
  const [placementInProgress, setPlacementInProgress] = useState(false);
  const [scannerError, setScannerError] = useState(null);
  
  // Состояния для внешнего сканера
  const [externalScannerActive, setExternalScannerActive] = useState(false);
  const [externalScannerStep, setExternalScannerStep] = useState('cargo'); // 'cargo', 'cell', 'complete'
  const [externalCargoInput, setExternalCargoInput] = useState('');
  const [externalCellInput, setExternalCellInput] = useState('');
  const [externalScannedCargo, setExternalScannedCargo] = useState(null);
  const [externalScannedCell, setExternalScannedCell] = useState(null);
  const [scannerMessage, setScannerMessage] = useState('');
  
  // Состояния для камеры - разделены для каждого сканера
  const [html5QrCode, setHtml5QrCode] = useState(null);  // Основной сканер
  const [html5QrCodePlacement, setHtml5QrCodePlacement] = useState(null);  // Сканер размещения
  const [html5QrCodeModal, setHtml5QrCodeModal] = useState(null);  // Модальный сканер
  const scannerRef = useRef(null);
  const modalScannerRef = useRef(null);  // Ref для модального сканера
  
  // Enhanced refs for React-safe QR scanner isolation
  const placementQrReaderRef = useRef(null);
  const html5QrCodePlacementRef = useRef(null);
  const qrContainerRef = useRef(null);
  const isInitializingRef = useRef(false);

  // Complete isolation of Html5Qrcode from React DOM to prevent removeChild errors
  const [qrScannerContainer, setQrScannerContainer] = useState(null);
  
  // Мобильные операции состояния
  // Поиск груза
  const [searchScannerActive, setSearchScannerActive] = useState(false);
  const [searchResult, setSearchResult] = useState(null);
  
  // Генерация QR кодов
  const [qrCargoNumber, setQrCargoNumber] = useState('');
  const [qrCellCode, setQrCellCode] = useState({ block: '', shelf: '', cell: '', code: '' }); // Поддержка объектов и строк
  const [generatedCargoQR, setGeneratedCargoQR] = useState(null);
  const [generatedCellQR, setGeneratedCellQR] = useState(null);
  
  // Мобильное размещение
  const [mobilePlacementStep, setMobilePlacementStep] = useState('start'); // 'start', 'scan-cargo', 'scan-cell', 'confirm'
  const [scannedCargo, setScannedCargo] = useState(null);
  const [scannedCell, setScannedCell] = useState(null);
  
  // Состояние для предотвращения множественных уведомлений
  const [lastScannedData, setLastScannedData] = useState('');
  const [lastScanTime, setLastScanTime] = useState(0);
  
  // Состояния для генерации QR отдельных ячеек
  const [showSingleCellQRModal, setShowSingleCellQRModal] = useState(false);
  const [singleCellBlock, setSingleCellBlock] = useState('');
  const [singleCellShelf, setSingleCellShelf] = useState('');
  const [singleCellNumber, setSingleCellNumber] = useState('');
  const [singleCellQRResult, setSingleCellQRResult] = useState(null);
  const [singleCellQRLoading, setSingleCellQRLoading] = useState(false);
  
  // Статистика сессии размещения
  const [sessionPlacements, setSessionPlacements] = useState([]);
  const [sessionPlacementCount, setSessionPlacementCount] = useState(0);
  const [placementInfoMessage, setPlacementInfoMessage] = useState('');
  
  // Мобильный приём груза
  const [receiveStep, setReceiveStep] = useState('start'); // 'start', 'scan-cargo', 'scan-new-cell', 'confirm'
  const [receivedCargo, setReceivedCargo] = useState(null);
  const [newCell, setNewCell] = useState(null);

  // Переключение камер
  const [availableCameras, setAvailableCameras] = useState([]);
  const [currentCameraIndex, setCurrentCameraIndex] = useState(0);

  // Refs для мобильных QR сканеров
  const searchQrReaderRef = useRef(null);
  const mobilePlacementQrReaderRef = useRef(null);
  const mobileCellQrReaderRef = useRef(null);
  const receiveCargoQrReaderRef = useRef(null);
  const receiveNewCellQrReaderRef = useRef(null);
  
  // Create isolated container for QR scanner to avoid React conflicts
  const createIsolatedQrContainer = () => {
    if (qrContainerRef.current && !qrContainerRef.current.innerHTML.includes('qr-reader-placement-isolated')) {
      // Create completely isolated container
      const isolatedDiv = document.createElement('div');
      isolatedDiv.id = 'qr-reader-placement-isolated';
      isolatedDiv.style.cssText = `
        width: 100%;
        min-height: 400px;
        background-color: #000000;
        border-radius: 8px;
        position: relative;
        overflow: hidden;
      `;
      
      // Clear any existing content safely without React DOM conflicts
      while (qrContainerRef.current.firstChild) {
        qrContainerRef.current.firstChild.remove();
      }
      
      qrContainerRef.current.appendChild(isolatedDiv);
      console.log('🔧 Создан изолированный контейнер для QR сканера');
      return 'qr-reader-placement-isolated';
    }
    return 'qr-reader-placement-isolated';
  };

  // Enhanced cleanup with complete DOM isolation
  const completeQrCleanup = async (context = "Unknown") => {
    try {
      console.log(`🧹 ${context}: Полная изоляционная очистка QR сканера...`);
      
      // Stop scanner instance first
      if (html5QrCodePlacementRef.current) {
        try {
          const state = html5QrCodePlacementRef.current.getState();
          if (state === Html5QrcodeScannerState.SCANNING) {
            console.log(`⏹️ ${context}: Остановка активного сканера...`);
            await html5QrCodePlacementRef.current.stop();
          }
          
          // Clear scanner instance
          await html5QrCodePlacementRef.current.clear();
          console.log(`✅ ${context}: Сканер очищен`);
        } catch (error) {
          console.warn(`⚠️ ${context}: Ошибка при очистке сканера:`, error.message);
        }
        
        html5QrCodePlacementRef.current = null;
        setHtml5QrCodePlacement(null);
      }
      
      // Force cleanup isolated container
      const isolatedContainer = document.getElementById('qr-reader-placement-isolated');
      if (isolatedContainer) {
        console.log(`🔧 ${context}: Очистка изолированного контейнера...`);
        
        // Remove all Html5Qrcode elements safely without React DOM conflicts
        const qrElements = isolatedContainer.querySelectorAll('video, canvas, div[id*="html5"], img[id*="qr"]');
        qrElements.forEach(element => {
          try {
            // Use React-safe removal method
            element.remove();
          } catch (removeError) {
            console.debug(`Debug: Элемент уже удален`);
          }
        });
        
        // Clear container content
        isolatedContainer.innerHTML = '';
        console.log(`✅ ${context}: Изолированный контейнер очищен`);
      }
      
      // Reset states
      setScannerActive(false);
      isInitializingRef.current = false;
      
      console.log(`✅ ${context}: Полная очистка завершена`);
      
    } catch (error) {
      console.error(`💥 ${context}: Критическая ошибка при полной очистке:`, error);
      // Force reset everything
      html5QrCodePlacementRef.current = null;
      setHtml5QrCodePlacement(null);
      setScannerActive(false);
      isInitializingRef.current = false;
    }
  };
  const [cameraPermission, setCameraPermission] = useState(null);
  const [camerasAvailable, setCamerasAvailable] = useState([]);
  const [selectedCamera, setSelectedCamera] = useState(null);

  // Новые состояния для улучшенного размещения груза
  const [enhancedPlacementModal, setEnhancedPlacementModal] = useState(false);
  const [selectedCargoForEnhancedPlacement, setSelectedCargoForEnhancedPlacement] = useState(null);
  const [warehouseAnalytics, setWarehouseAnalytics] = useState(null);
  const [selectedWarehouseForPlacement, setSelectedWarehouseForPlacement] = useState('');
  const [selectedBlockForPlacement, setSelectedBlockForPlacement] = useState(1);
  const [selectedShelfForPlacement, setSelectedShelfForPlacement] = useState(1);
  const [selectedCellForPlacement, setSelectedCellForPlacement] = useState(1);
  const [availableCellsForPlacement, setAvailableCellsForPlacement] = useState([]);
  const [placementLoading, setPlacementLoading] = useState(false);

  // Состояния для детальной структуры склада
  const [warehouseDetailedStructure, setWarehouseDetailedStructure] = useState(null);
  const [structureLoading, setStructureLoading] = useState(false);
  const [selectedCellForVisualization, setSelectedCellForVisualization] = useState(null);

  // Состояния для размещенных грузов
  const [placedCargoList, setPlacedCargoList] = useState([]);
  const [placedCargoPagination, setPlacedCargoPagination] = useState({});
  const [placedCargoPage, setPlacedCargoPage] = useState(1);
  const [placedCargoPerPage, setPlacedCargoPerPage] = useState(25);

  // Состояния для массового удаления (административные функции)
  const [selectedWarehouses, setSelectedWarehouses] = useState([]);
  const [selectedCargo, setSelectedCargo] = useState([]);
  const [selectedUsers, setSelectedUsers] = useState([]);
  const [selectedRequests, setSelectedRequests] = useState([]); // Выбранные заявки
  const [selectedPickupRequests, setSelectedPickupRequests] = useState([]); // Выбранные заявки на забор
  const [selectedOperators, setSelectedOperators] = useState([]); // Выбранные операторы
  const [selectedTransports, setSelectedTransports] = useState([]); // Выбранные транспорты
  const [bulkDeleteLoading, setBulkDeleteLoading] = useState(false);
  const [deleteConfirmModal, setDeleteConfirmModal] = useState(false);
  const [deleteConfirmData, setDeleteConfirmData] = useState(null);
  const [selectAllWarehouses, setSelectAllWarehouses] = useState(false);
  const [selectAllCargo, setSelectAllCargo] = useState(false);
  const [selectAllUsers, setSelectAllUsers] = useState(false);
  const [selectAllRequests, setSelectAllRequests] = useState(false); // Выбрать все заявки
  const [selectAllPickupRequests, setSelectAllPickupRequests] = useState(false); // Выбрать все заявки на забор
  const [selectAllOperators, setSelectAllOperators] = useState(false); // Выбрать всех операторов
  const [selectAllTransports, setSelectAllTransports] = useState(false); // Выбрать все транспорты

  // Enhanced QR Scanner cleanup to prevent React removeChild errors
  const safeStopQrScanner = async (qrCodeInstance, elementId, context = "Unknown") => {
    if (!qrCodeInstance) {
      console.log(`⚠️ ${context}: QR scanner instance is null, no cleanup needed`);
      return;
    }
    
    try {
      console.log(`🛑 ${context}: Safely stopping QR scanner...`);
      
      // ИСПРАВЛЕНИЕ: Дополнительная проверка DOM элемента перед работой со сканером
      const element = document.getElementById(elementId);
      if (!element || !element.parentNode) {
        console.warn(`⚠️ ${context}: DOM element not found or not attached, skipping cleanup`);
        return;
      }
      
      // Check if scanner is actually running
      const state = qrCodeInstance.getState();
      console.log(`📊 ${context}: Scanner state before stop: ${state}`);
      
      if (state === Html5QrcodeScannerState.SCANNING) {
        console.log(`⏹️ ${context}: Scanner is running, stopping...`);
        await qrCodeInstance.stop();
        console.log(`✅ ${context}: Scanner stopped successfully`);
      } else {
        console.log(`ℹ️ ${context}: Scanner not running (state: ${state}), no stop needed`);
      }
      
      // Clear the scanner instance to avoid React conflicts - с дополнительной защитой
      setTimeout(() => {
        try {
          // ИСПРАВЛЕНИЕ: Проверяем, что элемент все еще существует перед clear
          const currentElement = document.getElementById(elementId);
          if (qrCodeInstance && currentElement && currentElement.parentNode) {
            qrCodeInstance.clear();
            console.log(`🧹 ${context}: Scanner cleared successfully`);
          } else {
            console.log(`ℹ️ ${context}: Element removed from DOM, skipping clear`);
          }
        } catch (clearError) {
          console.warn(`⚠️ ${context}: Error during clear (non-critical):`, clearError);
        }
      }, 100);
      
    } catch (error) {
      // Enhanced error handling for React conflicts
      console.warn(`⚠️ ${context}: Safe cleanup error:`, error);
      
      if (error.message.includes('removeChild') || error.message.includes('Node')) {
        console.log(`🔧 ${context}: React DOM conflict detected, forcing cleanup`);
        try {
          // Force cleanup the DOM element to avoid React conflicts - с дополнительной защитой
          const element = document.getElementById(elementId);
          if (element && element.parentNode) {
            // ИСПРАВЛЕНИЕ: Проверяем parentNode перед удалением дочерних элементов
            const children = element.querySelectorAll('video, canvas, div[id*="qr-"]');
            children.forEach(child => {
              try {
                // Use React-safe removal method - проверяем что элемент все еще в DOM
                if (child.parentNode) {
                  child.remove();
                }
              } catch (childError) {
                console.debug(`Debug: Child removal handled:`, childError);
              }
            });
            
            // Safely clear the container
            if (element.parentNode) {
              element.innerHTML = '';
            }
            console.log(`🧹 ${context}: Forced DOM cleanup completed`);
          }
        } catch (forceError) {
          console.debug(`Debug: Force cleanup handled:`, forceError);
        }
      }
    }
  };

  const showAlert = (message, type = 'info') => {
    const id = Date.now();
    setAlerts(prev => [...prev, { id, message, type }]);
    setTimeout(() => {
      setAlerts(prev => prev.filter(alert => alert.id !== id));
    }, 5000);
  };

  // Enhanced QR Scanner lifecycle management with complete isolation
  useEffect(() => {
    // Cleanup function to prevent React removeChild errors when component unmounts
    return () => {
      console.log('🧹 Component cleanup: Полная изолированная очистка QR сканеров...');
      
      // Use isolated cleanup method
      completeQrCleanup("Component Cleanup").catch(error => {
        console.error('Ошибка при очистке компонента:', error);
      });
      
      console.log('✅ Component cleanup завершен');
    };
  }, []); // Empty dependency array - only run on mount/unmount

  // Enhanced page navigation cleanup with isolation
  useEffect(() => {
    if (currentPage !== 'cargo-placement') {
      // Clean up placement scanner when leaving placement page
      console.log('🔄 Page change: Изолированная очистка сканера размещения...');
      completeQrCleanup("Page Navigation").catch(error => {
        console.error('Ошибка при очистке при навигации:', error);
      });
    }
  }, [currentPage]);

  // Функции для работы с камерой и сканированием
  const initializeCamera = async () => {
    try {
      // Проверяем доступные камеры
      const cameras = await Html5Qrcode.getCameras();
      setCamerasAvailable(cameras);
      
      if (cameras && cameras.length > 0) {
        setCameraPermission(true);
        
        // Улучшенная логика выбора задней камеры
        console.log('Available cameras:', cameras.map(c => ({ id: c.id, label: c.label })));
        
        let backCamera = cameras.find(camera => {
          const label = camera.label.toLowerCase();
          return label.includes('back') || 
                 label.includes('rear') ||
                 label.includes('environment') ||
                 label.includes('0') || // Часто задняя камера имеет индекс 0
                 label.includes('facing back');
        });

        // Если не найдена задняя камера по названию, берем последнюю (часто это задняя)
        if (!backCamera && cameras.length > 1) {
          backCamera = cameras[cameras.length - 1];
        }

        // Если все еще не найдена, берем первую
        if (!backCamera) {
          backCamera = cameras[0];
        }

        console.log('Selected camera for QR scanning:', backCamera.label);
        setSelectedCamera(backCamera.id);
        return true;
      } else {
        setCameraPermission(false);
        setScannerError('Камера недоступна');
        return false;
      }
    } catch (error) {
      console.error('Camera initialization error:', error);
      setCameraPermission(false);
      setScannerError('Ошибка доступа к камере. Проверьте разрешения.');
      return false;
    }
  };

  const startCameraScanner = async () => {
    try {
      const cameraInitialized = await initializeCamera();
      if (!cameraInitialized) return;

      const qrCodeInstance = new Html5Qrcode("qr-reader");
      setHtml5QrCode(qrCodeInstance);

      const config = {
        fps: 10,
        qrbox: { width: 250, height: 250 },
        aspectRatio: 1.0,
        disableFlip: false,
      };

      await qrCodeInstance.start(
        selectedCamera,
        config,
        (decodedText, decodedResult) => {
          console.log('QR Code scanned:', decodedText);
          handleBarcodeScan(decodedText);
          stopCameraScanner();
        },
        (errorMessage) => {
          // Игнорируем постоянные ошибки сканирования
          console.debug('QR scan error:', errorMessage);
        }
      );

      showAlert(scannerMode === 'cargo-barcode' ? 
        'Камера активирована. Наведите на штрих-код груза' : 
        'Камера активирована. Наведите на QR-код ячейки', 'info');
    } catch (error) {
      console.error('Camera start error:', error);
      setScannerError('Не удалось запустить камеру');
      showAlert('Не удалось запустить камеру. Проверьте разрешения.', 'error');
    }
  };

  const stopCameraScanner = async () => {
    if (html5QrCode) {
      await safeStopQrScanner(html5QrCode, "qr-reader", "Main Scanner");
      setHtml5QrCode(null);
    }
  };

  // Функции для сканирования штрих-кодов и QR-кодов
  const startCargoScanner = async () => {
    setScannerMode('cargo-barcode');
    setScannerActive(true);
    setScannerError(null);
    setScannedCargoData(null);
    await startCameraScanner();
  };

  const startCellScanner = async () => {
    setScannerMode('cell-qr');
    setScannerActive(true);
    setScannerError(null);
    setScannedCellData(null);
    await startCameraScanner();
  };

  const stopScanner = async () => {
    setScannerMode('none');
    setScannerActive(false);
    setScannerError(null);
    await stopCameraScanner();
  };

  // Мобильные функции
  const startCargoSearch = async () => {
    setSearchScannerActive(true);
    setSearchResult(null);
    setScannerMode('cargo-qr-search');
    
    // Используем специальную функцию для мобильных операций
    setPlacementActive(true);
    setScannerActive(true);
    setScannerError(null);
    await startMobileQRScanner();
  };

  const startMobilePlacement = async () => {
    setMobilePlacementStep('scan-cargo');
    setScannedCargo(null);
    setScannedCell(null);
    setScannerMode('mobile-placement-cargo');
    setPlacementInfoMessage('Отсканируйте QR код груза для размещения.');
    
    // Используем специальную функцию для мобильных операций
    setPlacementActive(true);
    setScannerActive(true);  
    setScannerError(null);
    await startMobileQRScanner();
  };

  const startCargoReceive = async () => {
    setReceiveStep('scan-cargo');
    setReceivedCargo(null);
    setNewCell(null);
    setScannerMode('mobile-receive-cargo');
    
    // Используем специальную функцию для мобильных операций
    setPlacementActive(true);
    setScannerActive(true);
    setScannerError(null);
    await startMobileQRScanner();
  };

  const startMobileReceive = async () => {
    setReceiveStep('scan-cargo');
    setReceivedCargo(null);
    setNewCell(null);
    setScannerMode('mobile-receive-cargo');
    
    // Используем специальную функцию для мобильных операций
    setPlacementActive(true);
    setScannerActive(true);
    setScannerError(null);
    await startMobileQRScanner();
  };

  // Специальная функция QR сканера для мобильных операций
  const startMobileQRScanner = async () => {
    try {
      console.log('📱 Запуск мобильного QR сканера...');
      
      // Prevent multiple simultaneous initializations
      if (isInitializingRef.current) {
        console.log('⚠️ Сканер уже инициализируется, пропуск...');
        return;
      }
      
      isInitializingRef.current = true;
      
      // Complete cleanup first
      await completeQrCleanup("Mobile Scanner Start");
      
      // Use existing container instead of creating isolated one
      const possibleContainerIds = [
        'qr-reader-placement-main',
        'qr-reader-placement-cargo', 
        'qr-reader-placement-mobile',
        'qr-reader-placement-edit',
        'qr-reader-placement-receive',
        'qr-reader-placement-update',
        'qr-reader-placement-search'
      ];
      
      let containerId = null;
      let qrElement = null;
      
      // Найти первый доступный контейнер
      for (const id of possibleContainerIds) {
        const element = document.getElementById(id);
        if (element && element.offsetParent !== null) { // элемент видим на странице
          containerId = id;
          qrElement = element;
          console.log(`✅ Найден доступный QR контейнер: ${containerId}`);
          break;
        }
      }
      
      if (!qrElement) {
        throw new Error('QR контейнер не найден среди доступных вариантов');
      }

      // Get cameras with retry logic
      let cameras = [];
      let cameraAttempts = 0;
      const maxCameraAttempts = 3;
      
      while (cameras.length === 0 && cameraAttempts < maxCameraAttempts) {
        try {
          cameraAttempts++;
          console.log(`🎥 Получение камер для мобильного сканера (попытка ${cameraAttempts}/${maxCameraAttempts})...`);
          cameras = await Html5Qrcode.getCameras();
          
          if (cameras.length === 0 && cameraAttempts < maxCameraAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        } catch (error) {
          console.error(`❌ Ошибка получения камер (попытка ${cameraAttempts}):`, error);
          if (cameraAttempts < maxCameraAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      }
      
      if (!cameras || cameras.length === 0) {
        throw new Error('Камеры не найдены');
      }
      
      console.log(`✅ Найдено камер: ${cameras.length}`);
      
      // Сохраняем список доступных камер для переключения
      setAvailableCameras(cameras);
      
      // Выбор задней камеры приоритетно
      let selectedCameraIndex = 0; // fallback на первую камеру
      
      // Поиск задней камеры по label
      const backCameraIndex = cameras.findIndex(camera => 
        camera.label && (
          camera.label.toLowerCase().includes('back') ||
          camera.label.toLowerCase().includes('rear') ||
          camera.label.toLowerCase().includes('environment') ||
          camera.label.toLowerCase().includes('основная') ||
          camera.label.toLowerCase().includes('задняя')
        )
      );
      
      if (backCameraIndex !== -1) {
        selectedCameraIndex = backCameraIndex;
        console.log(`📷 Выбрана задняя камера: ${cameras[backCameraIndex].label}`);
      } else {
        // Если задняя камера не найдена по label, попробуем последнюю камеру (обычно задняя)
        if (cameras.length > 1) {
          selectedCameraIndex = cameras.length - 1;
          console.log(`📷 Выбрана последняя камера (предположительно задняя): ${cameras[cameras.length - 1].label}`);
        } else {
          console.log(`📷 Используется первая доступная камера: ${cameras[0].label}`);
        }
      }
      
      // Устанавливаем индекс текущей камеры
      setCurrentCameraIndex(selectedCameraIndex);
      const selectedCameraId = cameras[selectedCameraIndex].id;
      
      // Initialize Html5Qrcode
      const html5QrCode = new Html5Qrcode(containerId);
      html5QrCodePlacementRef.current = html5QrCode;
      
      // Enhanced camera configuration for mobile with FIXED dimensions
      const cameraConfig = {
        width: 300,  // Фиксированная ширина
        height: 300, // Фиксированная высота
        facingMode: "environment" // Мягкий режим для лучшей совместимости
      };
      
      const scannerConfig = {
        fps: 10,
        qrbox: {
          width: 200,  // Фиксированные размеры для qrbox
          height: 200
        },
        aspectRatio: 1.0,
        // Дополнительные настройки для лучшего сканирования на мобильных
        supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],
        rememberLastUsedCamera: true,
        showTorchButtonIfSupported: true
      };
      
      // Start scanning with enhanced error handling and selected camera
      try {
        await html5QrCode.start(
          selectedCameraId, // Используем выбранную заднюю камеру
          cameraConfig,
          (decodedText) => {
            console.log('📱 Мобильное сканирование успешно:', decodedText);
            handleBarcodeScan(decodedText);
          },
          (error) => {
            // Suppress frequent scanning errors but log important ones
            if (!error.includes('NotFoundException') && !error.includes('No MultiFormat Readers')) {
              console.debug('Сканирование...', error);
            }
          },
          scannerConfig
        );
        
        console.log('✅ Мобильный QR сканер запущен с задней камерой');
        
        // Добавляем задержку для стабилизации камеры
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log('📷 Камера стабилизирована, готова к сканированию');
        
      } catch (cameraError) {
        console.warn('⚠️ Не удалось запустить с задней камерой, пробуем первую доступную...', cameraError);
        
        // Fallback: попробуем с первой доступной камерой
        const fallbackConfig = {
          width: 300,
          height: 300,
          facingMode: "environment"
        };
        
        try {
          await html5QrCode.start(
            cameras[0].id, // Используем первую доступную камеру
            fallbackConfig,
            (decodedText) => {
              console.log('📱 Мобильное сканирование (fallback):', decodedText);
              handleBarcodeScan(decodedText);
            },
            (error) => {
              if (!error.includes('NotFoundException') && !error.includes('No MultiFormat Readers')) {
                console.debug('Сканирование...', error);
              }
            },
            scannerConfig
          );
          
          console.log('✅ Мобильный QR сканер запущен в fallback режиме');
          
          // Добавляем задержку для стабилизации
          await new Promise(resolve => setTimeout(resolve, 1000));
          console.log('📷 Камера стабилизирована (fallback), готова к сканированию');
          
        } catch (fallbackError) {
          console.error('❌ Не удалось запустить сканер:', fallbackError);
          throw fallbackError;
        }
      }
      isInitializingRef.current = false;
      
    } catch (error) {
      console.error('❌ Ошибка запуска мобильного QR сканера:', error);
      isInitializingRef.current = false;
      
      setScannerError('Ошибка запуска камеры');
      showAlert(
        'Не удалось запустить камеру. Проверьте разрешения или используйте ручной ввод.',
        'error'
      );
      
      // Fallback to manual input
      setPlacementActive(false);
      setScannerActive(false);
    }
  };

  // Функция переключения камер
  const switchCamera = async () => {
    if (!availableCameras || availableCameras.length <= 1) {
      showAlert('Доступна только одна камера', 'info');
      return;
    }

    try {
      // Остановим текущий сканер
      if (html5QrCodePlacementRef.current) {
        await html5QrCodePlacementRef.current.stop();
      }

      // Переключаем на следующую камеру
      const nextCameraIndex = (currentCameraIndex + 1) % availableCameras.length;
      setCurrentCameraIndex(nextCameraIndex);

      const nextCamera = availableCameras[nextCameraIndex];
      console.log(`🔄 Переключение на камеру: ${nextCamera.label}`);

      // Перезапускаем сканер с новой камерой
      const possibleContainerIds = [
        'qr-reader-placement-main',
        'qr-reader-placement-cargo', 
        'qr-reader-placement-mobile',
        'qr-reader-placement-edit',
        'qr-reader-placement-receive',
        'qr-reader-placement-update',
        'qr-reader-placement-search'
      ];
      
      let containerId = null;
      
      // Найти первый доступный контейнер
      for (const id of possibleContainerIds) {
        const element = document.getElementById(id);
        if (element && element.offsetParent !== null) { // элемент видим на странице
          containerId = id;
          console.log(`✅ Найден доступный QR контейнер для переключения камеры: ${containerId}`);
          break;
        }
      }
      
      if (!containerId) {
        throw new Error('QR контейнер не найден для переключения камеры');
      }
      
      const html5QrCode = new Html5Qrcode(containerId);
      html5QrCodePlacementRef.current = html5QrCode;

      // Конфигурация для переключенной камеры
      const cameraConfig = {
        width: { ideal: 1280, min: 640 },
        height: { ideal: 720, min: 480 },
        aspectRatio: 1.777777778
      };

      const scannerConfig = {
        fps: 5,
        qrbox: function(viewfinderWidth, viewfinderHeight) {
          const minEdge = Math.min(viewfinderWidth, viewfinderHeight);
          const boxSize = Math.floor(minEdge * 0.8);
          return {
            width: boxSize,
            height: boxSize
          };
        },
        aspectRatio: 1.0
      };

      await html5QrCode.start(
        nextCamera.id,
        cameraConfig,
        (decodedText) => {
          console.log('📱 Сканирование с переключенной камеры:', decodedText);
          handleBarcodeScan(decodedText);
        },
        (error) => {
          if (!error.includes('NotFoundException')) {
            console.debug('Сканирование...', error);
          }
        },
        scannerConfig
      );

      const cameraType = nextCamera.label && (
        nextCamera.label.toLowerCase().includes('back') ||
        nextCamera.label.toLowerCase().includes('rear') ||
        nextCamera.label.toLowerCase().includes('environment')
      ) ? 'задняя' : 'передняя';

      showAlert(`Камера переключена на ${cameraType}`, 'success');
      console.log(`✅ Переключение на ${cameraType} камеру завершено`);

    } catch (error) {
      console.error('❌ Ошибка переключения камеры:', error);
      showAlert('Ошибка переключения камеры. Попробуйте еще раз.', 'error');
    }
  };

  // Функции генерации QR кодов
  const generateCargoQR = async () => {
    if (!qrCargoNumber.trim()) {
      showAlert('Введите номер груза', 'error');
      return;
    }

    try {
      const response = await apiCall('/api/cargo/generate-qr', 'POST', {
        cargo_number: qrCargoNumber.trim()
      });
      
      if (response && response.qr_code) {
        setGeneratedCargoQR(response.qr_code);
        showAlert('QR код груза создан успешно!', 'success');
      }
    } catch (error) {
      console.error('Error generating cargo QR:', error);
      showAlert(`Ошибка создания QR кода: ${error.message}`, 'error');
    }
  };

  const generateCellQR = async () => {
    const cellCode = qrCellCode.code || ''; // Используем поле code для старого формата
    if (!cellCode.trim()) {
      showAlert('Введите код ячейки в формате: Б1-П1-Я1', 'error');
      return;
    }

    try {
      // Парсим введенный код ячейки для извлечения блока, полки, ячейки
      const cellParts = cellCode.trim().match(/^Б(\d+)-П(\d+)-Я(\d+)$/);
      if (!cellParts) {
        showAlert('Неверный формат. Введите код в формате: Б1-П1-Я1', 'error');
        return;
      }
      
      const block = parseInt(cellParts[1]);
      const shelf = parseInt(cellParts[2]);
      const cell = parseInt(cellParts[3]);
      
      // Нужно определить склад - используем выбранный или текущий
      const warehouse_id = selectedWarehouseForManagement?.id || user?.assigned_warehouse_id;
      if (!warehouse_id) {
        showAlert('Не выбран склад для генерации QR кода', 'error');
        return;
      }

      const response = await apiCall('/api/warehouse/cell/generate-qr', 'POST', {
        warehouse_id: warehouse_id,
        block: block,
        shelf: shelf,
        cell: cell,
        format: 'id' // ИСПРАВЛЕНИЕ: Используем новый ID формат с уникальными номерами складов
      });
      
      if (response && response.success && response.qr_code) {
        setGeneratedCellQR(response.qr_code);
        showAlert(`QR код для ячейки ${response.readable_name || cellCode} создан успешно! Код: ${response.cell_code}`, 'success');
      } else {
        showAlert('Не удалось создать QR код', 'error');
      }
    } catch (error) {
      console.error('Error generating cell QR:', error);
      showAlert(`Ошибка создания QR кода: ${error.message}`, 'error');
    }
  };

  // Функции подтверждения мобильных операций
  const confirmMobilePlacement = async () => {
    if (!scannedCargo || !scannedCell) {
      showAlert('Недостаточно данных для размещения', 'error');
      return;
    }

    try {
      await handlePlaceCargo(
        scannedCargo.id,
        scannedCell.warehouse_id,
        scannedCell.block_number,
        scannedCell.shelf_number,
        scannedCell.cell_number
      );
      
      showAlert('Груз успешно размещен!', 'success');
      setMobilePlacementStep('start');
      setScannedCargo(null);
      setScannedCell(null);
      setPlacementActive(false);
      setScannerActive(false);
      await completeQrCleanup("Mobile Placement Complete");
    } catch (error) {
      console.error('Error confirming placement:', error);
      showAlert(`Ошибка размещения: ${error.message}`, 'error');
    }
  };

  const confirmCargoReceive = async () => {
    if (!receivedCargo || !newCell) {
      showAlert('Недостаточно данных для приёма груза', 'error');
      return;
    }

    try {
      await handlePlaceCargo(
        receivedCargo.id,
        newCell.warehouse_id,
        newCell.block_number,
        newCell.shelf_number,
        newCell.cell_number
      );
      
      showAlert('Груз успешно принят и размещен!', 'success');
      setReceiveStep('start');
      setReceivedCargo(null);
      setNewCell(null);
      setPlacementActive(false);
      setScannerActive(false);
      await completeQrCleanup("Cargo Receive Complete");
    } catch (error) {
      console.error('Error confirming receive:', error);
      showAlert(`Ошибка приёма груза: ${error.message}`, 'error');
    }
  };

  const confirmMobileReceive = async () => {
    if (!receivedCargo || !newCell) {
      showAlert('Недостаточно данных для приёма груза', 'error');
      return;
    }

    try {
      await handlePlaceCargo(
        receivedCargo.id,
        newCell.warehouse_id,
        newCell.block_number,
        newCell.shelf_number,
        newCell.cell_number
      );
      
      showAlert('Груз успешно принят и размещен!', 'success');
      setReceiveStep('start');
      setReceivedCargo(null);
      setNewCell(null);
      setPlacementActive(false);
      setScannerActive(false);
      await completeQrCleanup("Mobile Receive Complete");
    } catch (error) {
      console.error('Error confirming mobile receive:', error);
      showAlert(`Ошибка приёма груза: ${error.message}`, 'error');
    }
  };

  // Функция печати QR кода
  const printQR = (qrCodeData, title) => {
    if (!qrCodeData) {
      showAlert('QR код не найден', 'error');
      return;
    }

    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
      return;
    }
    printWindow.document.write(`
      <html>
        <head>
          <title>Печать QR кода - ${title}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              text-align: center; 
              padding: 20px; 
            }
            .qr-container { 
              margin: 20px auto; 
              max-width: 300px; 
            }
            .qr-title { 
              font-size: 18px; 
              font-weight: bold; 
              margin-bottom: 10px; 
            }
            img { 
              max-width: 100%; 
              height: auto; 
            }
          </style>
        </head>
        <body>
          <div class="qr-container">
            <div class="qr-title">${title}</div>
            <img src="${qrCodeData}" alt="QR Code" />
          </div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  // Функции сброса мобильных операций
  const resetMobilePlacement = async () => {
    setMobilePlacementStep('start');
    setScannedCargo(null);
    setScannedCell(null);
    setPlacementActive(false);
    setScannerActive(false);
    await completeQrCleanup("Mobile Placement Reset");
  };

  const resetCargoReceive = async () => {
    setReceiveStep('start');
    setReceivedCargo(null);
    setNewCell(null);
    setPlacementActive(false);
    setScannerActive(false);
    await completeQrCleanup("Cargo Receive Reset");
  };

  const resetMobileReceive = async () => {
    setReceiveStep('start');
    setReceivedCargo(null);
    setNewCell(null);
    setPlacementActive(false);
    setScannerActive(false);
    await completeQrCleanup("Mobile Receive Reset");
  };

  const resetCargoSearch = async () => {
    setSearchScannerActive(false);
    setSearchResult(null);
    setPlacementActive(false);
    setScannerActive(false);
    await completeQrCleanup("Cargo Search Reset");
  };

  // Функция для получения информации о грузе по номеру
  const getCargoByNumber = async (cargoNumber) => {
    try {
      const response = await apiCall(`/api/cargo/track/${cargoNumber}`, 'GET');
      return response;
    } catch (error) {
      console.error('Error getting cargo by number:', error);
      return null;
    }
  };

  const handleBarcodeScan = async (scannedData) => {
    try {
      // Защита от множественных сканирований одного и того же QR кода
      const currentTime = Date.now();
      if (scannedData === lastScannedData && (currentTime - lastScanTime) < 3000) {
        console.log('Ignoring duplicate scan within 3 seconds:', scannedData);
        return;
      }
      
      // Обновляем информацию о последнем сканировании
      setLastScannedData(scannedData);
      setLastScanTime(currentTime);
      
      if (scannerMode === 'cargo-barcode') {
        // Ищем груз по отсканированному номеру
        const cargoNumber = extractCargoNumber(scannedData);
        console.log('🔍 Поиск груза с номером:', cargoNumber);
        
        // ИСПРАВЛЕНИЕ: Улучшенный поиск груза с поддержкой различных форматов
        const cargo = availableCargoForPlacement.find(item => {
          // Точное совпадение номера груза
          if (item.cargo_number === cargoNumber) return true;
          
          // Поиск по ID
          if (item.id === cargoNumber) return true;
          
          // Поиск по номеру заявки (для грузов забора)
          if (item.request_number === cargoNumber) return true;
          
          // Частичное совпадение в сканированных данных
          if (scannedData.includes(item.cargo_number)) return true;
          if (item.request_number && scannedData.includes(item.request_number)) return true;
          
          // Поиск в исходных JSON данных, если они есть
          if (scannedData.includes(item.id)) return true;
          
          return false;
        });

        if (cargo) {
          console.log('✅ Груз найден:', cargo);
          setScannedCargoData(cargo);
          setScannerActive(false);
          showAlert(`Груз ${cargo.cargo_number} найден! Автоматический переход к сканированию ячейки...`, 'success');
          
          // УЛУЧШЕНИЕ: МГНОВЕННЫЙ автоматический переход к сканированию ячейки
          setTimeout(() => {
            startCellScanner();
          }, 100); // Минимальная задержка только для плавности UI
        } else {
          console.log('❌ Груз не найден. Доступные грузы:', availableCargoForPlacement.map(c => c.cargo_number));
          setScannerError('Груз не найден в списке ожидающих размещение');
          showAlert(`Груз с номером "${cargoNumber}" не найден в списке ожидающих размещение. Проверьте номер груза.`, 'error');
        }
      } else if (scannerMode === 'cell-qr') {
        // Парсим QR-код ячейки
        const cellData = parseCellQRCode(scannedData);
        if (cellData) {
          console.log('✅ Ячейка успешно распознана:', cellData);
          setScannedCellData(cellData);
          setScannerActive(false);
          
          // НОВОЕ: Получаем статистику целевого склада
          if (cellData.warehouse_id) {
            await fetchWarehouseStatistics(cellData.warehouse_id);
          }
          
          // ИСПРАВЛЕНИЕ: Улучшенное сообщение с информацией о складе
          let successMessage = '';
          if (cellData.format === 'compact' && cellData.full_address) {
            successMessage = `Ячейка найдена: ${cellData.full_address}`;
          } else if (cellData.format === 'compact') {
            successMessage = `Ячейка найдена: ${cellData.readable_name} (склад №${cellData.warehouse_number})`;
          } else {
            successMessage = `Ячейка найдена: ${cellData.readable_name}`;
          }
          
          showAlert(successMessage, 'success');
          
          // Автоматически размещаем груз
          if (scannedCargoData) {
            await performAutoPlacement();
          }
        } else {
          console.log('❌ Неверный формат QR-кода ячейки:', scannedData);
          setScannerError('Неверный формат QR-кода ячейки');
          showAlert(`Неверный формат QR-кода ячейки: "${scannedData}". Ожидается формат: '003010101' (9 цифр), '03010101' (8 цифр), '001-01-01-001' или 'Б1-П1-Я1'`, 'error');
        }
      } else if (scannerMode === 'cargo-qr-search') {
        // Режим поиска груза
        const cargoNumber = extractCargoNumber(scannedData);
        const cargoInfo = await getCargoByNumber(cargoNumber);
        
        if (cargoInfo) {
          setSearchResult(cargoInfo);
          setSearchScannerActive(false);
          setPlacementActive(false);
          setScannerActive(false);
          await completeQrCleanup("Cargo Search Complete");
          showAlert(`Груз ${cargoInfo.cargo_number} найден!`, 'success');
        } else {
          setScannerError('Груз не найден');
          showAlert('Груз не найден в системе', 'error');
        }
      } else if (scannerMode === 'mobile-placement-cargo') {
        // Мобильное размещение - сканирование груза
        const cargoNumber = extractCargoNumber(scannedData);
        const cargoInfo = await getCargoByNumber(cargoNumber);
        
        if (cargoInfo) {
          setScannedCargo(cargoInfo);
          setMobilePlacementStep('scan-cell');
          setScannerMode('mobile-placement-cell');
          
          // Обновляем информационное сообщение
          setPlacementInfoMessage(`✅ Груз отсканирован: ${cargoInfo.cargo_number} - ${cargoInfo.cargo_name || 'Груз'}. Теперь отсканируйте QR код ячейки для размещения.`);
          
          // Не останавливаем сканер, переходим к сканированию ячейки
          showAlert(`Груз ${cargoInfo.cargo_number} отсканирован. Теперь отсканируйте ячейку.`, 'success');
        } else {
          setScannerError('Груз не найден');
          showAlert('Груз не найден в системе', 'error');
        }
      } else if (scannerMode === 'mobile-placement-cell') {
        // Мобильное размещение - сканирование ячейки
        const cellData = parseCellQRCode(scannedData);
        if (cellData) {
          setScannedCell(cellData);
          
          // Обновляем информационное сообщение перед размещением
          setPlacementInfoMessage(`📦 Ячейка отсканирована: Б${cellData.block_number}-П${cellData.shelf_number}-Я${cellData.cell_number}. Размещаем груз...`);
          
          // Выполняем размещение автоматически (уведомление будет показано в performMobilePlacement)
          try {
            await performMobilePlacement(scannedCargo, cellData);
          } catch (error) {
            console.error('Ошибка размещения:', error);
            showAlert('Ошибка при размещении груза', 'error');
          }
        } else {
          setScannerError('Неверный формат QR-кода ячейки');
          showAlert('Неверный формат QR-кода ячейки. Попробуйте еще раз.', 'error');
        }
      } else if (scannerMode === 'mobile-receive-cargo') {
        // Мобильный приём - сканирование груза
        const cargoNumber = extractCargoNumber(scannedData);
        const cargoInfo = await getCargoByNumber(cargoNumber);
        
        if (cargoInfo) {
          setReceivedCargo(cargoInfo);
          setReceiveStep('scan-new-cell');
          setScannerMode('mobile-receive-cell');
          // Не останавливаем сканер, переходим к сканированию новой ячейки
          showAlert(`Груз ${cargoInfo.cargo_number} готов к приёму. Отсканируйте новую ячейку.`, 'success');
        } else {
          setScannerError('Груз не найден');
          showAlert('Груз не найден в системе', 'error');
        }
      } else if (scannerMode === 'mobile-receive-cell') {
        // Мобильный приём - сканирование новой ячейки
        const cellData = parseCellQRCode(scannedData);
        if (cellData) {
          setNewCell(cellData);
          setReceiveStep('confirm');
          setPlacementActive(false);
          setScannerActive(false);
          await completeQrCleanup("New Cell Scanned");
          showAlert('Новая ячейка отсканирована. Подтвердите приём груза.', 'success');
        } else {
          setScannerError('Неверный формат QR-кода ячейки');
          showAlert('Неверный формат QR-кода ячейки. Попробуйте еще раз.', 'error');
        }
      }
    } catch (error) {
      console.error('Barcode scan error:', error);
      setScannerError('Ошибка обработки отсканированных данных');
      showAlert('Ошибка обработки отсканированных данных', 'error');
    }
  };

  const extractCargoNumber = (scannedData) => {
    console.log('🔍 Извлечение номера груза из:', scannedData);
    
    // ИСПРАВЛЕНИЕ: Поддержка различных форматов QR кодов грузов
    try {
      // Если это JSON данные (например, из QR кода забора)
      if (scannedData.includes('{') && scannedData.includes('}')) {
        const parsed = JSON.parse(scannedData);
        if (parsed.cargo_number) {
          console.log('✅ Найден номер груза в JSON:', parsed.cargo_number);
          return parsed.cargo_number;
        }
        if (parsed.request_number) {
          console.log('✅ Найден номер заявки в JSON:', parsed.request_number);
          return parsed.request_number;
        }
      }
      
      // Поддерживаем различные форматы номеров: TEMP-123456, REQ-123456, и т.д.
      const tempMatch = scannedData.match(/(?:TEMP-|REQ-)?\d+/);
      if (tempMatch) {
        console.log('✅ Найден номер груза по паттерну:', tempMatch[0]);
        return tempMatch[0];
      }
      
      // Если это просто номер
      const numberMatch = scannedData.match(/\d+/);
      if (numberMatch) {
        console.log('✅ Найден числовой номер:', numberMatch[0]);
        return numberMatch[0];
      }
      
      // Возвращаем исходные данные если не удалось распарсить
      console.log('⚠️ Используем исходные данные как номер груза:', scannedData);
      return scannedData;
      
    } catch (error) {
      console.error('❌ Ошибка парсинга номера груза:', error);
      return scannedData;
    }
  };

  const parseCellQRCode = (qrData) => {
    try {
      console.log('🔍 Парсинг QR кода ячейки:', qrData);
      
      // ОБНОВЛЕНИЕ: Новый формат 9 цифр: 003010101 (склад блок полка ячейка)
      const newCompactFormatMatch = qrData.match(/^(\d{3})(\d{2})(\d{2})(\d{2})$/);
      if (newCompactFormatMatch) {
        console.log('✅ Найден НОВЫЙ компактный формат QR кода (9 цифр):', newCompactFormatMatch);
        const warehouseNum = parseInt(newCompactFormatMatch[1]);
        const blockNum = parseInt(newCompactFormatMatch[2]);
        const shelfNum = parseInt(newCompactFormatMatch[3]);
        const cellNum = parseInt(newCompactFormatMatch[4]);
        
        // Находим склад по warehouse_number
        const targetWarehouse = warehouses.find(w => w.warehouse_number === warehouseNum);
        if (!targetWarehouse) {
          console.error(`❌ Склад с номером ${warehouseNum} не найден`);
          return null;
        }
        
        console.log(`🏢 Найден целевой склад: ${targetWarehouse.name} (ID: ${targetWarehouse.id})`);
        
        return {
          format: 'compact-new',
          warehouse_number: warehouseNum,
          warehouse_id: targetWarehouse.id,
          warehouse_name: targetWarehouse.name,
          warehouse_location: targetWarehouse.location,
          block_number: blockNum,
          shelf_number: shelfNum,
          cell_number: cellNum,
          readable_name: `Б${blockNum}-П${shelfNum}-Я${cellNum}`,
          full_address: `${targetWarehouse.name} - Б${blockNum}-П${shelfNum}-Я${cellNum}`,
          cell_code: qrData // Полный код для размещения
        };
      }

      // СТАРЫЙ: Формат 8 цифр: 03010101 (для обратной совместимости)
      const oldCompactFormatMatch = qrData.match(/^(\d{2})(\d{2})(\d{2})(\d{2})$/);
      if (oldCompactFormatMatch) {
        console.log('✅ Найден СТАРЫЙ компактный формат QR кода (8 цифр):', oldCompactFormatMatch);
        const warehouseNum = parseInt(oldCompactFormatMatch[1]);
        const blockNum = parseInt(oldCompactFormatMatch[2]);
        const shelfNum = parseInt(oldCompactFormatMatch[3]);
        const cellNum = parseInt(oldCompactFormatMatch[4]);
        
        // Находим склад по warehouse_number
        const targetWarehouse = warehouses.find(w => w.warehouse_number === warehouseNum);
        if (!targetWarehouse) {
          console.error(`❌ Склад с номером ${warehouseNum} не найден`);
          return null;
        }
        
        console.log(`🏢 Найден целевой склад: ${targetWarehouse.name} (ID: ${targetWarehouse.id})`);
        
        return {
          format: 'compact-old',
          warehouse_number: warehouseNum,
          warehouse_id: targetWarehouse.id,
          warehouse_name: targetWarehouse.name,
          warehouse_location: targetWarehouse.location,
          block_number: blockNum,
          shelf_number: shelfNum,
          cell_number: cellNum,
          readable_name: `Б${blockNum}-П${shelfNum}-Я${cellNum}`,
          full_address: `${targetWarehouse.name} - Б${blockNum}-П${shelfNum}-Я${cellNum}`,
          cell_code: qrData // Полный код для размещения
        };
      }
      
      // Старый формат с ID номерами: 001-01-01-001 (для совместимости)
      const idFormatMatch = qrData.match(/^(\d{3})-(\d{2})-(\d{2})-(\d{3})$/);
      if (idFormatMatch) {
        console.log('✅ Найден ID формат QR кода:', idFormatMatch);
        return {
          format: 'id',
          warehouse_id_number: idFormatMatch[1],
          block_id_number: idFormatMatch[2],
          shelf_id_number: idFormatMatch[3],
          cell_id_number: idFormatMatch[4],
          // Генерируем читаемое имя для отображения
          readable_name: `Б${parseInt(idFormatMatch[2])}-П${parseInt(idFormatMatch[3])}-Я${parseInt(idFormatMatch[4])}`,
          cell_code: qrData // Полный код для размещения
        };
      }

      // Формат с читаемыми названиями: Б1-П1-Я1 (для совместимости с существующими QR)
      const simpleFormatMatch = qrData.match(/^Б(\d+)-П(\d+)-Я(\d+)$/);
      if (simpleFormatMatch) {
        console.log('✅ Найден простой формат QR кода:', simpleFormatMatch);
        
        // ИСПРАВЛЕНИЕ: Для простого формата нужно определить warehouse_id из контекста
        // Используем первый доступный склад оператора как warehouse_id по умолчанию
        let defaultWarehouseId = null;
        if (operatorWarehouses && operatorWarehouses.length > 0) {
          defaultWarehouseId = operatorWarehouses[0].id;
          console.log(`🏢 Используем склад по умолчанию для простого формата: ${operatorWarehouses[0].name} (ID: ${defaultWarehouseId})`);
        } else if (warehouses && warehouses.length > 0) {
          defaultWarehouseId = warehouses[0].id;
          console.log(`🏢 Используем первый склад для простого формата: ${warehouses[0].name} (ID: ${defaultWarehouseId})`);
        }
        
        return {
          format: 'simple',
          warehouse_id: defaultWarehouseId, // Используем реальный warehouse_id
          block_number: parseInt(simpleFormatMatch[1]),
          shelf_number: parseInt(simpleFormatMatch[2]),
          cell_number: parseInt(simpleFormatMatch[3]),
          readable_name: qrData, // Уже в читаемом формате
          cell_code: defaultWarehouseId ? `${defaultWarehouseId}-${qrData}` : qrData // Формируем правильный cell_code для backend
        };
      }

      // JSON формат (старый)
      if (qrData.includes('{')) {
        console.log('🔍 Обработка JSON формата QR кода');
        const parsed = JSON.parse(qrData);
        return {
          format: 'json',
          warehouse_id: parsed.warehouse_id,
          block_number: parseInt(parsed.block_number),
          shelf_number: parseInt(parsed.shelf_number),
          cell_number: parseInt(parsed.cell_number),
          readable_name: `Б${parsed.block_number}-П${parsed.shelf_number}-Я${parsed.cell_number}`,
          cell_code: `${parsed.warehouse_id}-Б${parsed.block_number}-П${parsed.shelf_number}-Я${parsed.cell_number}`
        };
      } 
      
      // Формат с разделителями warehouse_id:block_number:shelf_number:cell_number (старый)
      const parts = qrData.split(':');
      if (parts.length === 4) {
        console.log('🔍 Обработка формата с разделителями');
        return {
          format: 'colon_separated',
          warehouse_id: parts[0],
          block_number: parseInt(parts[1]),
          shelf_number: parseInt(parts[2]),
          cell_number: parseInt(parts[3]),
          readable_name: `Б${parts[1]}-П${parts[2]}-Я${parts[3]}`,
          cell_code: `${parts[0]}-Б${parts[1]}-П${parts[2]}-Я${parts[3]}`
        };
      }
      
      console.warn('❌ Неизвестный формат QR кода ячейки:', qrData);
      return null;
    } catch (error) {
      console.error('QR parsing error:', error);
      return null;
    }
  };

  // Функция для получения статистики размещения за сегодня
  const fetchTodayPlacementStats = async () => {
    try {
      const stats = await apiCall('/api/operator/placement-statistics/today');
      return stats?.today_placements || 0;
    } catch (error) {
      console.error('Ошибка получения статистики за сегодня:', error);
      return 0;
    }
  };

  // Функция для получения статистики склада при сканировании ячейки
  const fetchWarehouseStatistics = async (warehouseId) => {
    try {
      console.log(`📊 Получение статистики склада: ${warehouseId}`);
      const stats = await apiCall(`/api/warehouses/${warehouseId}/statistics`);
      setTargetWarehouseStats(stats);
      console.log('✅ Статистика склада получена:', stats);
      return stats;
    } catch (error) {
      console.error('❌ Ошибка получения статистики склада:', error);
      return null;
    }
  };

  // Функция для открытия модального окна размещения груза
  const openCargoPlacementModal = async () => {
    setSessionPlacedCount(0); // Счетчик размещенных грузов в сессии
    setTargetWarehouseStats(null); // Статистика целевого склада
    setPlacementStatistics(null); // Очищаем статистику размещения
    setSessionPlacedCargo([]); // Очищаем список размещенных грузов в сессии
    
    // Загружаем актуальную статистику размещения
    await fetchPlacementStatistics();
    
    setShowCargoPlacementModal(true);
  };

  // ОБНОВЛЕНО: Универсальная функция для полного удаления груза из системы
  const handleDeleteCargoCompletely = async (cargoId, cargoNumber, cargoList = null) => {
    // Ищем груз в переданном списке или в доступных для размещения
    let cargoItem = null;
    if (cargoList) {
      cargoItem = cargoList.find(item => item.id === cargoId);
    } else {
      cargoItem = availableCargoForPlacement.find(item => item.id === cargoId);
    }
    
    if (cargoItem) {
      openDeleteConfirmModal('cargo-placement', cargoItem, false);
    } else {
      // Если не нашли в списках, создаем объект груза для удаления
      cargoItem = { id: cargoId, cargo_number: cargoNumber };
      openDeleteConfirmModal('cargo-placement', cargoItem, false);
    }
  };

  // Сохраняем старое название для совместимости
  const handleDeleteCargoFromPlacement = handleDeleteCargoCompletely;

  // НОВОЕ: Функции для массового удаления грузов
  const handleSelectCargoForDeletion = (cargoId) => {
    setSelectedCargoForDeletion(prev => {
      if (prev.includes(cargoId)) {
        return prev.filter(id => id !== cargoId);
      } else {
        return [...prev, cargoId];
      }
    });
  };

  const handleSelectAllCargoForDeletion = () => {
    if (selectedCargoForDeletion.length === availableCargoForPlacement.length) {
      // Снимаем выделение со всех
      setSelectedCargoForDeletion([]);
    } else {
      // Выделяем все грузы
      setSelectedCargoForDeletion(availableCargoForPlacement.map(cargo => cargo.id));
    }
  };

  // ОБНОВЛЕНО: Универсальная функция массового удаления грузов полностью из системы
  const handleBulkDeleteCargoCompletely = async (selectedIds = null, cargoList = null) => {
    const idsToDelete = selectedIds || selectedCargoForDeletion;
    
    if (idsToDelete.length === 0) {
      showAlert('Выберите грузы для удаления', 'warning');
      return;
    }

    // Найдем грузы для удаления из переданного списка или из доступных для размещения
    let selectedCargoItems = [];
    if (cargoList) {
      selectedCargoItems = cargoList.filter(cargo => idsToDelete.includes(cargo.id));
    } else {
      selectedCargoItems = availableCargoForPlacement.filter(cargo => idsToDelete.includes(cargo.id));
    }
    
    // Если не все грузы найдены в списке, дополняем недостающие
    if (selectedCargoItems.length < idsToDelete.length) {
      const foundIds = selectedCargoItems.map(item => item.id);
      const missingIds = idsToDelete.filter(id => !foundIds.includes(id));
      
      missingIds.forEach(id => {
        selectedCargoItems.push({ id: id, cargo_number: `ID: ${id}` });
      });
    }
    
    // КРИТИЧЕСКИ ВАЖНО: Очищаем выбранные элементы ПЕРЕД открытием модального окна
    // чтобы избежать React ошибок с DOM манипуляциями
    if (!selectedIds) { // Только если используем глобальное состояние
      setSelectedCargoForDeletion([]);
    }
    
    openDeleteConfirmModal('cargo-placement', selectedCargoItems, true);
  };

  // Сохраняем старое название для совместимости
  const handleBulkDeleteCargoFromPlacement = () => handleBulkDeleteCargoCompletely();

  const performAutoPlacement = async () => {
    if (!scannedCargoData || !scannedCellData) {
      showAlert('Недостаточно данных для размещения груза', 'error');
      return;
    }

    setPlacementInProgress(true);
    try {
      // ИСПРАВЛЕНИЕ: Определяем warehouse_id в зависимости от формата QR кода
      let warehouseId;
      
      console.log('🔍 Отладка размещения груза:');
      console.log('- Данные ячейки:', scannedCellData);
      console.log('- Доступные склады:', warehouses.map(w => ({id: w.id, name: w.name, warehouse_number: w.warehouse_number})));
      
      if (scannedCellData.format === 'compact-new' || scannedCellData.format === 'compact-old' || scannedCellData.format === 'compact') {
        // Для всех компактных форматов используем уже определенный warehouse_id
        warehouseId = scannedCellData.warehouse_id;
        const formatType = scannedCellData.format === 'compact-new' ? 'НОВЫЙ (9 цифр)' : 'СТАРЫЙ (8 цифр)';
        console.log(`✅ Используем ${formatType} компактный формат - склад: ${scannedCellData.warehouse_name} (ID: ${warehouseId})`);
      } else if (scannedCellData.format === 'simple') {
        // Для простого формата уже определен warehouse_id в parseCellQRCode
        warehouseId = scannedCellData.warehouse_id;
        console.log(`✅ Используем warehouse_id для простого формата: ${warehouseId}`);
      } else {
        // Для других форматов используем существующий warehouse_id
        warehouseId = scannedCellData.warehouse_id;
        console.log(`✅ Используем warehouse_id из данных ячейки (${scannedCellData.format}): ${warehouseId}`);
      }
      
      if (!warehouseId) {
        showAlert('Не удалось определить склад для размещения груза', 'error');
        return;
      }
      
      console.log('🚀 Отправляем запрос на размещение груза:');
      console.log('- Cargo ID:', scannedCargoData.id);
      console.log('- Warehouse ID:', warehouseId);
      console.log('- Block Number:', scannedCellData.block_number);
      console.log('- Shelf Number:', scannedCellData.shelf_number);
      console.log('- Cell Number:', scannedCellData.cell_number);

      await handlePlaceCargo(
        scannedCargoData.id,
        warehouseId,
        scannedCellData.block_number,
        scannedCellData.shelf_number,
        scannedCellData.cell_number
      );
      
      showAlert(
        `Груз ${scannedCargoData.cargo_number} успешно размещен в ячейке ${scannedCellData.readable_name || `${scannedCellData.block_number}-${scannedCellData.shelf_number}-${scannedCellData.cell_number}`}!`,
        'success'
      );
      
      // Увеличиваем счетчик размещенных грузов в сессии
      setSessionPlacedCount(prev => prev + 1);
      
      // НОВОЕ: Добавляем информацию о размещенном грузе в список сессии
      const placedCargoInfo = {
        cargo_number: scannedCargoData.cargo_number,
        location: scannedCellData.readable_name || `Б${scannedCellData.block_number}-П${scannedCellData.shelf_number}-Я${scannedCellData.cell_number}`,
        warehouse_name: scannedCellData.warehouse_name || `Склад №${scannedCellData.warehouse_number}`,
        placed_at: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
      };
      
      setSessionPlacedCargo(prev => [...prev, placedCargoInfo]);
      
      // НОВОЕ: Обновляем статистику склада после размещения
      if (scannedCellData.warehouse_id) {
        console.log('🔄 Обновляем статистику склада после размещения...');
        await fetchWarehouseStatistics(scannedCellData.warehouse_id);
      }
      
      // ИСПРАВЛЕНИЕ: Автоматический переход к сканированию следующего груза
      // Сбрасываем состояние предыдущего сканирования, но сохраняем список размещенных грузов
      setScannedCargoData(null);
      setScannedCellData(null);
      setScannerError(null);
      setTargetWarehouseStats(null); // Сбрасываем статистику склада для следующего размещения
      // НЕ сбрасываем sessionPlacedCargo - он накапливается в течение сессии
      
      // Обновляем списки
      await fetchAvailableCargoForPlacement();
      
      // УЛУЧШЕНИЕ: МГНОВЕННЫЙ АВТОМАТИЧЕСКИЙ ПЕРЕХОД к сканированию следующего груза
      const remainingCargo = availableCargoForPlacement.length;
      if (remainingCargo > 0) {
        console.log(`🔄 Найдено еще ${remainingCargo} грузов для размещения. МГНОВЕННО переходим к сканированию следующего груза.`);
        
        // МГНОВЕННО запускаем сканирование следующего груза без задержек
        setScannerMode('cargo-barcode');
        setScannerActive(true);
        setScannerError(null);
        
        showAlert(`🔄 Груз размещен! Отсканируйте следующий груз (осталось: ${remainingCargo})`, 'info');
      } else {
        console.log('✅ Все грузы размещены. Закрываем сканер.');
        showAlert('🎉 Все грузы успешно размещены!', 'success');
        
        // Закрываем модальное окно через минимальную задержку
        setTimeout(() => {
          resetScannerState();
        }, 1000);
      }
      
    } catch (error) {
      console.error('Auto placement error:', error);
      showAlert('Ошибка автоматического размещения груза', 'error');
    } finally {
      setPlacementInProgress(false);
    }
  };

  const resetScannerState = async () => {
    setScannerMode('none');
    setScannerActive(false);
    setScannedCargoData(null);
    setScannedCellData(null);
    setScannerError(null);
    await stopCameraScanner();
  };

  // New functions for warehouse management
  const openWarehouseManagement = async (warehouse) => {
    try {
      setSelectedWarehouseForManagement(warehouse);
      setWarehouseManagementLoading(true);
      setShowWarehouseManagementModal(true);
      
      // Fetch detailed warehouse structure
      const response = await apiCall(`/api/warehouses/${warehouse.id}/structure`);
      setWarehouseStructure(response);
      
    } catch (error) {
      console.error('Error loading warehouse structure:', error);
      showAlert(`Ошибка загрузки структуры склада: ${error.message}`, 'error');
    } finally {
      setWarehouseManagementLoading(false);
    }
  };

  // Generate QR codes for selected cells
  const generateCellQRCodes = async (selectedCells = null) => {
    if (!selectedWarehouseForManagement || !warehouseStructure) return;
    
    setCellQRLoading(true);
    try {
      const cellsToProcess = selectedCells || getAllCells();
      const qrResults = [];
      
      for (const cell of cellsToProcess) {
        try {
          const response = await apiCall('/api/warehouse/cell/generate-qr', 'POST', {
            warehouse_id: selectedWarehouseForManagement.id,
            block: cell.block,
            shelf: cell.shelf,
            cell: cell.cell,
            format: 'id' // ИСПРАВЛЕНИЕ: Используем новый ID формат с уникальными номерами складов
          });
          
          if (response && response.success) {
            qrResults.push({
              location: `Б${cell.block}-П${cell.shelf}-Я${cell.cell}`,
              qr_code: response.qr_code,
              success: true
            });
          } else {
            qrResults.push({
              location: `Б${cell.block}-П${cell.shelf}-Я${cell.cell}`,
              success: false,
              error: 'Не удалось создать QR код'
            });
          }
        } catch (error) {
          qrResults.push({
            location: `Б${cell.block}-П${cell.shelf}-Я${cell.cell}`,
            success: false,
            error: error.message
          });
        }
      }
      
      setCellQRResults(qrResults);
      showAlert(`Создано QR кодов для ячеек: ${qrResults.filter(r => r.success).length}/${qrResults.length}`, 'success');
      
    } catch (error) {
      console.error('Error generating cell QR codes:', error);
      showAlert(`Ошибка создания QR кодов: ${error.message}`, 'error');
    } finally {
      setCellQRLoading(false);
    }
  };

  // Get all cells from warehouse structure
  const getAllCells = () => {
    if (!warehouseStructure) return [];
    
    const allCells = [];
    for (let block = 1; block <= warehouseStructure.blocks; block++) {
      for (let shelf = 1; shelf <= warehouseStructure.shelves_per_block; shelf++) {
        for (let cell = 1; cell <= warehouseStructure.cells_per_shelf; cell++) {
          allCells.push({ block, shelf, cell });
        }
      }
    }
    return allCells;
  };

  // Add new block to warehouse
  const addWarehouseBlock = async () => {
    try {
      const response = await apiCall(`/api/warehouses/${selectedWarehouseForManagement.id}/add-block`, 'POST');
      
      if (response && response.success) {
        showAlert('Блок успешно добавлен', 'success');
        // Refresh warehouse structure
        openWarehouseManagement(selectedWarehouseForManagement);
      }
    } catch (error) {
      console.error('Error adding block:', error);
      showAlert(`Ошибка добавления блока: ${error.message}`, 'error');
    }
  };

  // Delete warehouse block
  const deleteWarehouseBlock = async (blockNumber) => {
    try {
      const response = await apiCall(`/api/warehouses/${selectedWarehouseForManagement.id}/delete-block`, 'POST', {
        block_number: blockNumber
      });
      
      if (response && response.success) {
        showAlert('Блок успешно удален', 'success');
        // Refresh warehouse structure
        openWarehouseManagement(selectedWarehouseForManagement);
      }
    } catch (error) {
      console.error('Error deleting block:', error);
      showAlert(`Ошибка удаления блока: ${error.message}`, 'error');
    }
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ГОРОДАМИ СКЛАДОВ
  
  // Открыть модальное окно для управления городами склада
  const openWarehouseCitiesManagement = async (warehouse) => {
    try {
      setSelectedWarehouseForCities(warehouse);
      setCitiesLoading(true);
      setShowWarehouseCitiesModal(true);
      
      // Загружаем текущий список городов
      const response = await apiCall(`/api/warehouses/${warehouse.id}/cities`);
      setWarehouseCities(response.cities || []);
      
    } catch (error) {
      console.error('Error loading warehouse cities:', error);
      showAlert(`Ошибка загрузки городов склада: ${error.message}`, 'error');
    } finally {
      setCitiesLoading(false);
    }
  };

  // Добавить один город к складу
  const addWarehouseCity = async () => {
    if (!newCityName.trim()) {
      showAlert('Введите название города', 'warning');
      return;
    }

    try {
      setCitiesLoading(true);
      
      const response = await apiCall(
        `/api/warehouses/${selectedWarehouseForCities.id}/cities`,
        'POST',
        { city_name: newCityName.trim() }
      );
      
      if (response && response.message) {
        showAlert(response.message, 'success');
        setNewCityName(''); // Очистить поле ввода
        
        // Обновить список городов
        const updatedResponse = await apiCall(`/api/warehouses/${selectedWarehouseForCities.id}/cities`);
        setWarehouseCities(updatedResponse.cities || []);
      }
    } catch (error) {
      console.error('Error adding city to warehouse:', error);
      showAlert(`Ошибка добавления города: ${error.message}`, 'error');
    } finally {
      setCitiesLoading(false);
    }
  };

  // Массовое добавление городов к складу
  const addWarehouseCitiesBulk = async () => {
    const citiesText = bulkCitiesText.trim();
    if (!citiesText) {
      showAlert('Введите названия городов', 'warning');
      return;
    }

    // Разбиваем текст на отдельные города (по запятым, точкам с запятой или новым строкам)
    const cityNames = citiesText
      .split(/[,;\n]/)
      .map(city => city.trim())
      .filter(city => city.length > 0);

    if (cityNames.length === 0) {
      showAlert('Не найдено валидных названий городов', 'warning');
      return;
    }

    try {
      setCitiesLoading(true);
      
      const response = await apiCall(
        `/api/warehouses/${selectedWarehouseForCities.id}/cities/bulk`,
        'POST',
        { city_names: cityNames }
      );
      
      if (response && response.message) {
        const summary = `${response.message}. Добавлено: ${response.added_count}, пропущено: ${response.skipped_count}`;
        showAlert(summary, 'success');
        setBulkCitiesText(''); // Очистить поле ввода
        
        // Обновить список городов
        const updatedResponse = await apiCall(`/api/warehouses/${selectedWarehouseForCities.id}/cities`);
        setWarehouseCities(updatedResponse.cities || []);
      }
    } catch (error) {
      console.error('Error bulk adding cities to warehouse:', error);
      showAlert(`Ошибка массового добавления городов: ${error.message}`, 'error');
    } finally {
      setCitiesLoading(false);
    }
  };

  // Удалить город из склада
  const removeWarehouseCity = async (cityName) => {
    const confirmDelete = window.confirm(
      `Вы уверены, что хотите удалить город "${cityName}" из списка доставки этого склада?`
    );
    
    if (!confirmDelete) return;

    try {
      setCitiesLoading(true);
      
      const response = await apiCall(
        `/api/warehouses/${selectedWarehouseForCities.id}/cities`,
        'DELETE',
        { city_name: cityName }
      );
      
      if (response && response.message) {
        showAlert(response.message, 'success');
        
        // Обновить список городов
        const updatedResponse = await apiCall(`/api/warehouses/${selectedWarehouseForCities.id}/cities`);
        setWarehouseCities(updatedResponse.cities || []);
      }
    } catch (error) {
      console.error('Error removing city from warehouse:', error);
      showAlert(`Ошибка удаления города: ${error.message}`, 'error');
    } finally {
      setCitiesLoading(false);
    }
  };

  // Закрыть модальное окно управления городами
  const closeWarehouseCitiesModal = () => {
    setShowWarehouseCitiesModal(false);
    setSelectedWarehouseForCities(null);
    setWarehouseCities([]);
    setNewCityName('');
    setBulkCitiesText('');
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ФОРМОЙ ПРИЁМА ГРУЗА
  
  // Загрузить все города из всех складов
  const fetchAllWarehouseCities = async () => {
    try {
      setAllCitiesLoading(true);
      const response = await apiCall('/api/warehouses/all-cities');
      setAllWarehouseCities(response.cities || []);
    } catch (error) {
      console.error('Error fetching all warehouse cities:', error);
      showAlert(`Ошибка загрузки городов: ${error.message}`, 'error');
    } finally {
      setAllCitiesLoading(false);
    }
  };

  // Обработка выбора города доставки
  const handleDeliveryCityChange = (cityName) => {
    setSelectedDeliveryCity(cityName);
    setCitySearchQuery(cityName);
    setSelectedDeliveryWarehouse(''); // Очищаем выбранный склад
    setShowCityDropdown(false);
    
    // Находим доступные склады для выбранного города
    const cityData = allWarehouseCities.find(city => city.city_name === cityName);
    if (cityData && cityData.available_warehouses.length > 0) {
      setAvailableWarehousesForCity(cityData.available_warehouses);
      
      // Автоматически выбираем первый доступный склад
      const firstWarehouse = cityData.available_warehouses[0];
      setSelectedDeliveryWarehouse(firstWarehouse.warehouse_id);
      
      // Обновляем operatorCargoForm
      setOperatorCargoForm(prev => ({
        ...prev,
        destination_warehouse_id: firstWarehouse.warehouse_id,
        destination_warehouse_name: firstWarehouse.warehouse_name,
        delivery_city: cityName
      }));
      
      console.log(`✅ Автоматически выбран склад: ${firstWarehouse.warehouse_name} для города ${cityName}`);
    } else {
      setAvailableWarehousesForCity([]);
      console.log(`⚠️ Нет доступных складов для города ${cityName}`);
    }
  };

  // Обработка поиска городов (автодополнение)
  const handleCitySearchChange = (query) => {
    setCitySearchQuery(query);
    
    if (query.length === 0) {
      setFilteredCities([]);
      setShowCityDropdown(false);
      setSelectedDeliveryCity('');
      setSelectedDeliveryWarehouse('');
      setAvailableWarehousesForCity([]);
      return;
    }
    
    // Фильтруем города по введенному тексту
    const filtered = allWarehouseCities.filter(cityData => 
      cityData.city_name.toLowerCase().includes(query.toLowerCase())
    );
    
    setFilteredCities(filtered);
    setShowCityDropdown(filtered.length > 0);
    
    // Если точное совпадение найдено, автоматически выбираем город
    const exactMatch = allWarehouseCities.find(cityData => 
      cityData.city_name.toLowerCase() === query.toLowerCase()
    );
    
    if (exactMatch) {
      setSelectedDeliveryCity(exactMatch.city_name);
      setAvailableWarehousesForCity(exactMatch.available_warehouses || []);
    } else {
      setSelectedDeliveryCity('');
      setAvailableWarehousesForCity([]);
    }
  };

  // Обработка выбора склада для доставки
  const handleDeliveryWarehouseChange = (warehouseId) => {
    setSelectedDeliveryWarehouse(warehouseId);
    
    // Обновляем operatorCargoForm
    const warehouseInfo = availableWarehousesForCity.find(w => w.warehouse_id === warehouseId);
    if (warehouseInfo) {
      setOperatorCargoForm(prev => ({
        ...prev,
        destination_warehouse_id: warehouseId,
        destination_warehouse_name: warehouseInfo.warehouse_name,
        delivery_city: selectedDeliveryCity
      }));
    }
  };

  // Очистка всех камер при размонтировании компонента - улучшенная версия
  useEffect(() => {
    return () => {
      // Очищаем основной сканер
      if (html5QrCode) {
        safeStopQrScanner(html5QrCode, "qr-reader", "Main Scanner").catch(console.error);
      }
      
      // Очищаем сканер размещения
      if (html5QrCodePlacement) {
        safeStopQrScanner(html5QrCodePlacement, "qr-reader-placement", "Placement Scanner").catch(console.error);
      }
      
      // Очищаем модальный сканер
      if (modalScannerRef.current) {
        safeStopQrScanner(modalScannerRef.current, "qr-reader-modal", "Modal Scanner").catch(console.error);
      }
    };
  }, [html5QrCode, html5QrCodePlacement]);

  const simulateBarcodeScan = (testData) => {
    // Функция для тестирования без реальной камеры
    handleBarcodeScan(testData);
  };

  const apiCall = async (endpoint, method = 'GET', data = null, params = null, retryCount = 0) => {
    try {
      // Build URL with query parameters if provided
      let url = `${BACKEND_URL}${endpoint}`;
      if (params) {
        const urlParams = new URLSearchParams(params);
        url += `?${urlParams.toString()}`;
      }

      const config = {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
      };

      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }

      if (data) {
        config.body = JSON.stringify(data);
      }

      const response = await fetch(url, config);
      
      // Проверяем есть ли контент для парсинга
      const contentType = response.headers.get('content-type');
      let result = {};
      
      if (contentType && contentType.includes('application/json')) {
        const responseText = await response.text();
        if (responseText.trim()) {
          try {
            result = JSON.parse(responseText);
          } catch (jsonError) {
            console.error('JSON parsing error:', jsonError);
            console.error('Response text:', responseText);
            result = { error: 'Invalid JSON response', rawResponse: responseText };
          }
        }
      } else {
        // Если не JSON, читаем как текст
        const responseText = await response.text();
        result = { message: responseText || 'Empty response' };
      }

      if (!response.ok) {
        // СНАЧАЛА проверяем структурированные ошибки авторизации (401 с error_type)
        if (response.status === 401 && result.detail && typeof result.detail === 'object' && result.detail.error_type) {
          console.log('🔍 Detected structured auth error:', result.detail.error_type);
          // Создаем расширенную ошибку для структурированных ошибок авторизации
          const enhancedError = new Error(result.detail.message || result.detail.status_message || 'Authentication error');
          enhancedError.status = response.status;
          enhancedError.detail = result.detail;
          enhancedError.response = result;
          throw enhancedError;
        }
        
        // Обработка 401 ошибки (unauthorized) - токен истек или невалиден (только для НЕструктурированных ошибок)
        if (response.status === 401 && !isLoggingOut && !isLoggingIn) {
          console.log('Received 401 response, checking if logout is needed');
          
          // Проверяем, действительно ли токен истек перед logout
          if (token && !isTokenValid(token)) {
            console.log('Token expired, initiating logout after delay');
            // Добавляем небольшую задержку перед logout для предотвращения race conditions
            setTimeout(() => {
              if (!isLoggingOut && !isLoggingIn) {
                handleLogout();
              }
            }, 5000); // Увеличили задержку с 2s до 5s для стабильности
          } else {
            console.log('Token still valid, 401 might be temporary - retrying after delay');
            // Если токен валиден, возможно это временная ошибка - повторяем запрос через 2 секунды
            await new Promise(resolve => setTimeout(resolve, 2000));
            // Повторный запрос только один раз
            if (retryCount === 0) {
              console.log('Retrying API call after 401 with valid token');
              return apiCall(endpoint, method, data, params, retryCount + 1);
            }
          }
          
          throw new Error('Unauthorized access');
        }
        
        // Правильная обработка detail - может быть строкой, объектом или массивом
        let errorMessage = 'Произошла ошибка';
        let errorDetails = null;
        
        if (result.detail) {
          if (Array.isArray(result.detail)) {
            // Если detail - массив объектов ошибок валидации, извлекаем msg из каждого
            errorMessage = result.detail.map(err => err.msg || err.message || JSON.stringify(err)).join(', ');
          } else if (typeof result.detail === 'string') {
            // Если detail - строка, используем как есть
            errorMessage = result.detail;
          } else {
            // Если detail - объект (новые структурированные ошибки), сохраняем всю структуру
            errorDetails = result.detail;
            errorMessage = result.detail.message || result.detail.status_message || JSON.stringify(result.detail);
          }
        } else if (result.message) {
          errorMessage = result.message;
        }
        
        // Создаем расширенную ошибку с дополнительными деталями
        const enhancedError = new Error(errorMessage);
        enhancedError.status = response.status;
        enhancedError.detail = errorDetails || result.detail;
        enhancedError.response = result;
        
        throw enhancedError;
      }

      return result;
    } catch (error) {
      // Не показываем alert для структурированных ошибок авторизации - они обрабатываются модальными окнами
      const isAuthError = error.status === 401 || error.status === 403;
      const hasStructuredError = error.detail && typeof error.detail === 'object' && error.detail.error_type;
      
      // Показываем alert только если это не ошибка истечения сессии и не структурированная ошибка авторизации
      if (error.message !== 'Session expired' && !(isAuthError && hasStructuredError)) {
        showAlert(error.message, 'error');
      }
      throw error;
    }
  };

  // Новые функции для клиентского дашборда (Функция 1)
  const fetchClientDashboard = async () => {
    try {
      const data = await apiCall('/api/client/dashboard');
      setClientDashboard(data);
    } catch (error) {
      console.error('Error fetching client dashboard:', error);
    }
  };

  const fetchClientCargo = async (status = null) => {
    try {
      const params = status ? `?status=${status}` : '';
      const data = await apiCall(`/api/client/cargo${params}`);
      setClientCargo(data.cargo || []);
    } catch (error) {
      console.error('Error fetching client cargo:', error);
    }
  };

  const fetchClientCargoDetails = async (cargoId) => {
    try {
      const data = await apiCall(`/api/client/cargo/${cargoId}/details`);
      setClientCargoDetails(data);
    } catch (error) {
      console.error('Error fetching client cargo details:', error);
    }
  };

  // Новые функции для создания операторов (Функция 2)
  const fetchAllOperators = async () => {
    try {
      const data = await apiCall('/api/admin/operators');
      setAllOperators(data.operators || []);
    } catch (error) {
      console.error('Error fetching operators:', error);
    }
  };

  const handleCreateOperator = async (e) => {
    e.preventDefault();
    
    // ОТЛАДКА: Проверяем данные формы перед отправкой
    console.log('🔧 Создание оператора - данные формы:', operatorCreateForm);
    console.log('🔧 Список складов:', warehouses?.length || 0, warehouses);
    
    // Проверяем, что выбран склад
    if (!operatorCreateForm.warehouse_id) {
      showAlert('Выберите склад для оператора', 'error');
      return;
    }
    
    // Проверяем, что склад существует в списке
    const selectedWarehouse = warehouses.find(w => w.id === operatorCreateForm.warehouse_id);
    if (!selectedWarehouse) {
      showAlert('Выбранный склад не найден в списке доступных складов', 'error');
      console.error('🔧 Склад не найден:', operatorCreateForm.warehouse_id, 'в списке:', warehouses);
      return;
    }
    
    try {
      console.log('📤 Отправка запроса создания оператора:', operatorCreateForm);
      const response = await apiCall('/api/admin/create-operator', 'POST', operatorCreateForm);
      console.log('✅ Ответ сервера:', response);
      
      // Сброс формы
      setOperatorCreateForm({
        full_name: '',
        phone: '',
        address: '',
        password: '',
        warehouse_id: ''
      });
      
      // Обновление данных
      fetchAllOperators();
      fetchOperatorWarehouseBindings();
      fetchUsersByRole();
      
      // Показать уведомление об успехе
      showAlert('Оператор успешно создан!', 'success');
      
    } catch (error) {
      console.error('❌ Error creating operator:', error);
      showAlert(error.message || 'Ошибка создания оператора', 'error');
    }
  };

  // Новые функции для оформления груза
  const fetchDeliveryOptions = async () => {
    try {
      const data = await apiCall('/api/client/cargo/delivery-options');
      setDeliveryOptions(data);
    } catch (error) {
      console.error('Error fetching delivery options:', error);
    }
  };

  const calculateCargoCost = async () => {
    if (!cargoOrderForm.weight || !cargoOrderForm.declared_value || !cargoOrderForm.cargo_name) {
      return;
    }

    setIsCalculating(true);
    try {
      // Подготавливаем данные для расчета
      const calculationData = {
        ...cargoOrderForm,
        weight: parseFloat(cargoOrderForm.weight),
        declared_value: parseFloat(cargoOrderForm.declared_value),
        insurance_value: cargoOrderForm.insurance_requested ? parseFloat(cargoOrderForm.insurance_value || cargoOrderForm.declared_value) : null
      };

      const data = await apiCall('/api/client/cargo/calculate', 'POST', calculationData);
      setCostCalculation(data);
    } catch (error) {
      console.error('Error calculating cost:', error);
      alert('Ошибка расчета стоимости: ' + (error.message || 'Неизвестная ошибка'));
    } finally {
      setIsCalculating(false);
    }
  };

  const handleCreateCargoOrder = async (e) => {
    e.preventDefault();
    
    if (!costCalculation) {
      showAlert('Сначала рассчитайте стоимость доставки', 'error');
      return;
    }

    try {
      // Подготавливаем данные для создания груза
      const orderData = {
        ...cargoOrderForm,
        weight: parseFloat(cargoOrderForm.weight),
        declared_value: parseFloat(cargoOrderForm.declared_value),
        insurance_value: cargoOrderForm.insurance_requested ? parseFloat(cargoOrderForm.insurance_value || cargoOrderForm.declared_value) : null
      };

      const result = await apiCall('/api/client/cargo/create', 'POST', orderData);
      setCargoOrderResult(result);
      
      // Сброс формы
      setCargoOrderForm({
        cargo_name: '',
        description: '',
        weight: '',
        declared_value: getDefaultDeclaredValue('moscow_dushanbe'), // Используем значение по умолчанию
        recipient_full_name: '',
        recipient_phone: '',
        recipient_address: '',
        recipient_city: '',
        route: 'moscow_dushanbe',
        delivery_type: 'standard',
        insurance_requested: false,
        insurance_value: '',
        packaging_service: false,
        home_pickup: false,
        home_delivery: false,
        fragile: false,
        temperature_sensitive: false,
        special_instructions: ''
      });
      setCostCalculation(null);
      
      // Обновляем данные клиента
      fetchClientDashboard();
      fetchClientCargo();
      
      // Показываем успешное сообщение
      showAlert(`Груз успешно оформлен! Номер: ${result.cargo_number}, Трекинг: ${result.tracking_code}`, 'success');
      
    } catch (error) {
      console.error('Error creating cargo order:', error);
      
      // Правильная обработка ошибок
      let errorMessage = 'Неизвестная ошибка при оформлении груза';
      
      if (error.message) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      } else if (error.detail) {
        errorMessage = error.detail;
      }
      
      showAlert('Ошибка оформления груза: ' + errorMessage, 'error');
    }
  };

  useEffect(() => {
    console.log('🔄 App initialization useEffect triggered');
    
    if (token && !isLoggingOut && !isLoggingIn) {
      // Проверяем валидность токена перед использованием
      if (isTokenValid(token)) {
        console.log('✅ Valid token found, initializing app...');
        
        // Устанавливаем флаг инициализации
        setIsInitializing(true);
        setDataLoaded(false);
        
        // Очищаем старые данные чтобы избежать показа устаревшей информации
        clearAllAppData();
        
        // Попытка получить информацию о пользователе при загрузке только если у нас нет пользователя
        if (!user) {
          console.log('👤 No user data, fetching user info...');
          // Добавляем небольшую задержку, чтобы избежать race condition
          setTimeout(() => {
            if (token && !isLoggingIn && !user && !isLoggingOut) {
              fetchUserData().then(() => {
                console.log('✅ User data loaded, initialization complete');
                setIsInitializing(false);
              }).catch(error => {
                console.error('❌ Error loading user data:', error);
                setIsInitializing(false);
                handleLogout();
              });
            }
          }, 100);
        } else {
          console.log('👤 User data already available, skipping fetch');
          setIsInitializing(false);
        }
      } else {
        // Токен истек, очищаем его
        console.log('❌ Token expired on startup, clearing session');
        setIsInitializing(false);
        clearAllAppData();
        handleLogout();
        showAlert('Ваша сессия истекла. Пожалуйста, войдите в систему снова.', 'warning');
      }
    } else if (!token) {
      console.log('🚫 No token found, showing login screen');
      setIsInitializing(false);
      setDataLoaded(false);
      clearAllAppData();
    }
  }, [token]); // Убираем user из зависимостей чтобы избежать цикла

  // useEffect для автоматической активации внешнего сканера при открытии модального окна
  useEffect(() => {
    if (showCargoPlacementModal && !externalScannerActive) {
      console.log('🖥️ Автоматическая активация внешнего сканера...');
      // Используем setTimeout для обеспечения корректной инициализации
      setTimeout(() => {
        startExternalScannerPlacement();
      }, 100);
    }
    
    // Останавливаем сканер при закрытии модального окна
    if (!showCargoPlacementModal && externalScannerActive) {
      console.log('🛑 Автоматическая остановка внешнего сканера...');
      stopExternalScannerPlacement();
    }
  }, [showCargoPlacementModal]);

  // Периодическая проверка валидности токена - увеличим интервал
  useEffect(() => {
    let interval;
    if (token && user && !isLoggingOut && !isLoggingIn) {
      interval = setInterval(() => {
        if (!isTokenValid(token)) {
          console.log('Token expired during session, logging out');
          handleLogout();
        }
      }, 300000); // Проверяем каждые 5 минут вместо каждой минуты
    }

    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [token, user, isLoggingOut, isLoggingIn]);

  // НОВЫЙ USEEFFECT: Автоматический выбор склада если он один у оператора
  useEffect(() => {
    if (operatorWarehouses.length === 1 && user?.role === 'warehouse_operator') {
      setOperatorCargoForm(prev => ({
        ...prev,
        warehouse_id: operatorWarehouses[0].id
      }));
    }
  }, [operatorWarehouses, user]);

  // НОВЫЙ USEEFFECT: Загрузка складов по маршруту
  useEffect(() => {
    const loadRouteWarehouses = async () => {
      if (operatorCargoForm.route && user) {
        const warehouses = await fetchWarehousesByRoute(operatorCargoForm.route);
        setRouteWarehouses(warehouses);
        
        // Сброс выбранного склада при смене маршрута
        if (operatorCargoForm.warehouse_id && !warehouses.find(w => w.id === operatorCargoForm.warehouse_id)) {
          setOperatorCargoForm(prev => ({
            ...prev,
            warehouse_id: ''
          }));
        }
      }
    };
    
    loadRouteWarehouses();
  }, [operatorCargoForm.route, user]);

  // НОВЫЙ USEEFFECT: Загрузка схемы склада при открытии модального окна
  useEffect(() => {
    const loadWarehouseScheme = async () => {
      if (showWarehouseScheme) {
        setWarehouseSchemeLoading(true);
        try {
          // Для администратора используем общий список warehouses, для оператора - operatorWarehouses
          const warehousesList = user?.role === 'admin' ? warehouses : operatorWarehouses;
          const warehouse = warehousesList.find(w => w.id === showWarehouseScheme);
          
          if (warehouse && typeof warehouse === 'object') {
            console.log('Loading scheme for warehouse:', warehouse.name, warehouse);
            const scheme = await generateWarehouseScheme(warehouse);
            setWarehouseSchemeData(scheme || []);
          } else {
            console.warn('Warehouse not found for scheme:', showWarehouseScheme);
            setWarehouseSchemeData([]);
          }
        } catch (error) {
          console.error('Error loading warehouse scheme:', error);
          showAlert('Ошибка загрузки схемы склада', 'error');
          setWarehouseSchemeData([]);
        } finally {
          setWarehouseSchemeLoading(false);
        }
      } else {
        setWarehouseSchemeData([]);
      }
    };

    loadWarehouseScheme();
  }, [showWarehouseScheme, operatorWarehouses, warehouses, user]);

  useEffect(() => {
    // ИСПРАВЛЕНИЕ: Проверяем и token и user для избежания race condition
    if (user && token && !isLoggingOut && !isLoggingIn) {
      if (user.role === 'admin') {
        fetchNotifications();
        fetchUsers();
        fetchUsers();
        fetchAllCargo();
        fetchWarehouses();
        fetchOperatorCargo();
        fetchUsersByRole();
        fetchUnpaidCargo();
        fetchPaymentHistory();
        fetchCargoRequests();
        fetchTransports();
        fetchOperatorWarehouseBindings();
        fetchAllOperators(); // Функция 2 - загрузка операторов для админа
        fetchCouriers(1, 25); // НОВОЕ: Загрузка курьеров для админа
        fetchNewOrdersCount(); // Загрузка количества новых заказов
        fetchPlacedCargo(); // Добавляем загрузку размещенных грузов для админа
        fetchDebtorsList(); // Загрузка списка задолжников
        fetchAdminDashboardAnalytics(); // Загрузка расширенной аналитики дашборда
        fetchWarehouseNotifications(); // НОВОЕ: Загрузка уведомлений о поступивших грузах
        fetchAllPickupRequests(); // НОВОЕ: Загрузка всех заявок на забор
        fetchPickupRequestsHistory(); // НОВОЕ: Загрузка истории заявок на забор
        fetchPickupRequestsHistory(); // НОВОЕ: Загрузка истории заявок на забор
        fetchAllWarehouseCities(); // НОВОЕ: Загрузка всех городов для формы приёма груза
      } else if (user.role === 'warehouse_operator') {
        fetchNotifications();
        fetchWarehouseCargo();
        fetchWarehouses();
        fetchOperatorCargo('', 1, 25);
        fetchAvailableCargoForPlacement(1, 25); // Добавляем загрузку грузов для размещения
        fetchPlacedCargo(1, 25); // Добавляем загрузку размещенных грузов
        fetchWarehouseNotifications(); // НОВОЕ: Загрузка уведомлений о поступивших грузах
        fetchAllPickupRequests(); // НОВОЕ: Загрузка всех заявок на забор
        fetchPickupRequestsHistory(); // НОВОЕ: Загрузка истории заявок на забор
        fetchUnpaidCargo();
        fetchPaymentHistory();
        fetchCargoRequests();
        fetchTransportsList(); // Обновлено для операторов
        fetchArrivedTransports();
        fetchOperatorWarehouses(); // Добавлено для операторов
        fetchCouriers(1, 25); // НОВОЕ: Операторы тоже могут видеть курьеров своих складов
        fetchNewOrdersCount(); // Загрузка количества новых заказов для операторов
        fetchOperatorDashboardAnalytics(); // Загрузка аналитики дашборда оператора
        fetchAllWarehouseCities(); // НОВОЕ: Загрузка всех городов для формы приёма груза
      } else if (user.role === 'courier') {
        // ИСПРАВЛЕНО: Загрузка данных для курьера без fetchNotifications
        console.log('🚛 Загрузка данных курьера...');
        fetchCourierNewRequests(); // Загрузка новых заявок
        fetchAcceptedRequests(); // Загрузка принятых заявок
        fetchPickedRequests(); // Загрузка забранных грузов
        fetchCancelledRequests(); // Загрузка отмененных заявок
      } else {
        fetchNotifications(); // Уведомления для обычных пользователей
        fetchMyCargo();
        fetchMyRequests();
        fetchNotifications(); // Новая система уведомлений
        // Новые функции для клиентского дашборда (Функция 1)
        fetchClientDashboard();
        fetchClientCargo();
        // Загружаем опции доставки для оформления грузов
        fetchDeliveryOptions();
      }
      
      // ИСПРАВЛЕНИЕ: Устанавливаем флаг завершения загрузки всех данных
      setDataLoaded(true);
    }
  }, [user, token, isLoggingOut, isLoggingIn]); // Добавляем зависимости для правильной последовательности

  // НОВЫЙ USEEFFECT: Устанавливаем правильную секцию для курьеров
  useEffect(() => {
    if (user && user.role === 'courier' && activeSection === 'dashboard') {
      setActiveSection('courier-dashboard');
    }
  }, [user, activeSection]);

  // Effect для автоматической загрузки неактивных курьеров при переключении на вкладку
  useEffect(() => {
    if (activeSection === 'couriers-tracking' && activeTab === 'couriers-inactive' && user?.role === 'admin') {
      fetchInactiveCouriers();
    }
  }, [activeSection, activeTab, user?.role]);

  // НОВЫЙ USEEFFECT: Обновляем список курьеров при изменении фильтра неактивных
  useEffect(() => {
    if (user && (user.role === 'admin' || user.role === 'warehouse_operator')) {
      console.log(`🔄 Обновляем список курьеров - показать неактивных: ${showInactiveCouriers}`);
      fetchCouriers(couriersPage, couriersPerPage);
    }
  }, [showInactiveCouriers, user]);

  // НОВЫЙ USEEFFECT: Обновление номеров складов при загрузке приложения для админов
  useEffect(() => {
    if (user?.role === 'admin' && !warehouseNumbersUpdated) {
      ensureWarehouseNumbers();
      setWarehouseNumbersUpdated(true);
    }
  }, [user?.role]);

  // НОВЫЙ USEEFFECT: Скрытие выпадающего списка городов при клике вне области
  useEffect(() => {
    const handleClickOutside = (event) => {
      // Проверяем, что клик был вне области автодополнения городов
      if (!event.target.closest('.city-autocomplete')) {
        setShowCityDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // НОВЫЙ USEEFFECT: Очистка QR сканеров при переключении вкладок/секций
  useEffect(() => {
    console.log(`🔄 Переключение на секцию: ${activeSection}, вкладка: ${activeTab}`);
    
    // Очищаем все QR сканеры при любом переключении
    cleanupAllQrScanners();
    
  }, [activeSection, activeTab]); // Зависимости от активной секции и вкладки

  // Функция загрузки данных личного кабинета
  const fetchPersonalDashboard = async () => {
    setDashboardLoading(true);
    try {
      const response = await apiCall('/api/user/dashboard', 'GET');
      setPersonalDashboardData(response);
    } catch (error) {
      console.error('Error fetching personal dashboard:', error);
      showAlert('Ошибка загрузки личного кабинета', 'error');
    } finally {
      setDashboardLoading(false);
    }
  };

  // Функция загрузки аналитики админского дашборда
  const fetchAdminDashboardAnalytics = async () => {
    if (user?.role !== 'admin') return;
    
    setAdminAnalyticsLoading(true);
    try {
      const response = await apiCall('/api/admin/dashboard/analytics', 'GET');
      setAdminDashboardAnalytics(response);
    } catch (error) {
      console.error('Error fetching admin dashboard analytics:', error);
      showAlert('Ошибка загрузки аналитики дашборда', 'error');
    } finally {
      setAdminAnalyticsLoading(false);
    }
  };

  // Функция загрузки аналитики дашборда оператора
  const fetchOperatorDashboardAnalytics = async () => {
    if (!user || user.role !== 'warehouse_operator') return;
    
    // ИСПРАВЛЕНИЕ: Принудительная очистка старых данных перед загрузкой новых
    setOperatorDashboardAnalytics(null);
    
    setOperatorAnalyticsLoading(true);
    try {
      console.log('🔄 Загрузка аналитики дашборда оператора...');
      
      // ИСПРАВЛЕНИЕ: Добавляем timestamp для избежания кэширования
      const timestamp = new Date().getTime();
      const response = await apiCall(`/api/operator/dashboard/analytics?_t=${timestamp}`);
      console.log('📊 Получена аналитика оператора:', response);
      
      // ОТЛАДКА: Детальный вывод статистики каждого склада
      if (response?.warehouses_details) {
        response.warehouses_details.forEach((warehouse, index) => {
          console.log(`🏢 Склад ${index + 1}: ${warehouse.warehouse_name}`);
          console.log('  📈 Статистика ячеек:', {
            total: warehouse.warehouse_structure?.total_cells,
            occupied: warehouse.cargo_stats?.occupied_cells,
            free: warehouse.cargo_stats?.free_cells,
            occupancy_rate: warehouse.cargo_stats?.occupancy_rate
          });
          console.log('  📦 Статистика грузов:', {
            total_cargo: warehouse.cargo_stats?.total_cargo,
            total_weight_kg: warehouse.cargo_stats?.total_weight_kg,
            total_value_rub: warehouse.cargo_stats?.total_value_rub
          });
        });
      }
      
      setOperatorDashboardAnalytics(response);
    } catch (error) {
      console.error('❌ Error fetching operator dashboard analytics:', error);
      showAlert(`Ошибка загрузки аналитики: ${error.message}`, 'error');
    } finally {
      setOperatorAnalyticsLoading(false);
    }
  };

  // QR Codes and Invoice functions - simplified version for now
  const generateBatchQRCodes = async (numbers) => {
    try {
      const response = await apiCall(`/api/cargo/batch/${encodeURIComponent(numbers)}/qr-codes`);
      return response;
    } catch (error) {
      console.error('Error generating QR codes:', error);
      throw error;
    }
  };

  const generateCargoInvoice = async (numbers) => {
    try {
      const response = await apiCall(`/api/cargo/invoice/${encodeURIComponent(numbers)}`);
      return response;
    } catch (error) {
      console.error('Error generating invoice:', error);
      throw error;
    }
  };

  // Generate QR code for application number
  const generateApplicationQR = async (cargoNumber) => {
    if (!cargoNumber.trim()) {
      showAlert('Введите номер заявки', 'error');
      return;
    }

    setApplicationQRLoading(true);
    try {
      const response = await apiCall(`/api/cargo/generate-application-qr/${encodeURIComponent(cargoNumber)}`);
      setApplicationQRCode(response);
      setShowApplicationQRModal(true);
      showAlert('QR код заявки сгенерирован успешно!', 'success');
    } catch (error) {
      console.error('Error generating application QR:', error);
      showAlert(`Ошибка генерации QR кода: ${error.message}`, 'error');
    } finally {
      setApplicationQRLoading(false);
    }
  };

  // New function: Generate QR by cargo number with validation
  const generateQRByCargoNumber = async () => {
    if (!qrGenerateCargoNumber.trim()) {
      showAlert('Введите номер груза', 'error');
      return;
    }

    setQrGenerateLoading(true);
    try {
      // First, check if cargo exists by trying to scan it
      const checkResponse = await apiCall('/api/qr/scan', 'POST', {
        qr_text: qrGenerateCargoNumber.trim()
      });
      
      if (!checkResponse || checkResponse.type !== 'cargo') {
        showAlert(`Груз с номером "${qrGenerateCargoNumber}" не существует в системе`, 'error');
        return;
      }
      
      // If cargo exists, generate QR code
      const response = await apiCall('/api/cargo/generate-qr-by-number', 'POST', {
        cargo_number: qrGenerateCargoNumber.trim()
      });
      
      if (response && response.success) {
        setGeneratedSingleQR(response);
        showAlert(`QR код создан для груза ${response.cargo_number}`, 'success');
      }
    } catch (error) {
      console.error('Error generating QR by number:', error);
      
      // Check if error is about cargo not found
      if (error.message && (
          error.message.includes('not found') || 
          error.message.includes('не найден') || 
          error.message.includes('404')
        )) {
        showAlert(`Груз с номером "${qrGenerateCargoNumber}" не существует в системе`, 'error');
      } else {
        showAlert(`Ошибка создания QR кода: ${error.message}`, 'error');
      }
    } finally {
      setQrGenerateLoading(false);
    }
  };

  // New function: Generate QR codes for all cargo from same sender
  const generateBulkQRForSender = async (senderData) => {
    try {
      setBulkQRModal(true);
      setSelectedSender(senderData);
      setBulkQRLoading(true);
      
      // Find all cargo for this sender
      const senderCargoList = operatorCargo.filter(cargo => 
        cargo.sender_phone === senderData.sender_phone || 
        cargo.sender_full_name === senderData.sender_full_name
      );
      
      setSenderCargos(senderCargoList);
      
      // Generate QR codes for each cargo
      const qrResults = [];
      for (const cargo of senderCargoList) {
        try {
          const response = await apiCall('/api/cargo/generate-qr-by-number', 'POST', {
            cargo_number: cargo.cargo_number
          });
          
          if (response && response.success) {
            qrResults.push({
              cargo_number: cargo.cargo_number,
              cargo_name: cargo.cargo_name,
              qr_code: response.qr_code,
              success: true
            });
          } else {
            qrResults.push({
              cargo_number: cargo.cargo_number,
              cargo_name: cargo.cargo_name,
              success: false,
              error: 'Не удалось создать QR код'
            });
          }
        } catch (error) {
          qrResults.push({
            cargo_number: cargo.cargo_number,
            cargo_name: cargo.cargo_name,
            success: false,
            error: error.message
          });
        }
      }
      
      setBulkQRResults(qrResults);
      showAlert(`Создано QR кодов: ${qrResults.filter(r => r.success).length}/${qrResults.length}`, 'success');
      
    } catch (error) {
      console.error('Error generating bulk QR codes:', error);
      showAlert(`Ошибка создания QR кодов: ${error.message}`, 'error');
    } finally {
      setBulkQRLoading(false);
    }
  };

  // New function: Place cargo in cell
  const placeCargoInCell = async (cargoNumber, cellCode) => {
    try {
      const response = await apiCall('/api/cargo/place-in-cell', 'POST', {
        cargo_number: cargoNumber,
        cell_code: cellCode
      });
      
      if (response && response.success) {
        showAlert(`Груз ${cargoNumber} успешно размещен в ячейке`, 'success');
        await fetchPlacementStatistics(); // Update statistics
        return true;
      }
    } catch (error) {
      console.error('Error placing cargo in cell:', error);
      showAlert(`Ошибка размещения груза: ${error.message}`, 'error');
      return false;
    }
  };

  // New function: Get placement statistics
  const fetchPlacementStatistics = async () => {
    try {
      const response = await apiCall('/api/operator/placement-statistics');
      setPlacementStatistics(response);
    } catch (error) {
      console.error('Error fetching placement statistics:', error);
    }
  };

  // Enhanced camera availability check for mobile devices
  const checkCameraAvailability = async () => {
    try {
      console.log('🔍 Улучшенная проверка камеры для мобильных устройств...');
      
      // Check basic support
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        console.log('❌ MediaDevices API не поддерживается');
        return false;
      }
      
      // Mobile-specific camera constraints with multiple fallbacks
      const mobileConstraints = [
        // Primary: Back camera with high quality
        {
          video: {
            facingMode: { exact: "environment" },
            width: { ideal: 1920, max: 1920, min: 640 },
            height: { ideal: 1080, max: 1080, min: 480 },
            frameRate: { ideal: 30, min: 15 }
          }
        },
        // Fallback 1: Back camera with relaxed constraints
        {
          video: {
            facingMode: "environment",
            width: { ideal: 1280, min: 640 },
            height: { ideal: 720, min: 480 }
          }
        },
        // Fallback 2: Any camera with basic constraints
        {
          video: {
            width: { ideal: 1280, min: 640 },
            height: { ideal: 720, min: 480 }
          }
        },
        // Fallback 3: Minimal constraints
        {
          video: true
        }
      ];
      
      console.log('🔐 Тестирование камеры с различными constraints...');
      
      let stream = null;
      let constraintsUsed = null;
      
      // Try each constraint set until one works
      for (let i = 0; i < mobileConstraints.length; i++) {
        try {
          console.log(`🔄 Попытка ${i + 1}/${mobileConstraints.length}...`);
          
          stream = await Promise.race([
            navigator.mediaDevices.getUserMedia(mobileConstraints[i]),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error('Timeout')), 15000) // 15 second timeout for mobile
            )
          ]);
          
          constraintsUsed = mobileConstraints[i];
          console.log(`✅ Успех с constraints ${i + 1}`);
          break;
          
        } catch (error) {
          console.log(`❌ Попытка ${i + 1} неудачна: ${error.name} - ${error.message}`);
          if (i === mobileConstraints.length - 1) {
            throw error; // Last attempt failed
          }
        }
      }
      
      if (!stream) {
        throw new Error('Все попытки получить камеру неудачны');
      }
      
      // Get detailed camera info
      const videoTrack = stream.getVideoTracks()[0];
      if (videoTrack) {
        const capabilities = videoTrack.getCapabilities?.() || {};
        const settings = videoTrack.getSettings();
        console.log('📹 Информация о камере:', {
          label: videoTrack.label,
          facingMode: settings.facingMode || 'unknown',
          width: settings.width,
          height: settings.height,
          frameRate: settings.frameRate,
          capabilities: Object.keys(capabilities)
        });
      }
      
      // Stop test stream
      stream.getTracks().forEach(track => {
        track.stop();
        console.log('⏹️ Тестовый поток остановлен');
      });
      
      // Additional mobile stability wait
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Verify Html5Qrcode can detect cameras
      try {
        console.log('🎥 Проверка Html5Qrcode совместимости...');
        const cameras = await Html5Qrcode.getCameras();
        console.log(`📱 Html5Qrcode нашел камер: ${cameras.length}`);
        
        if (cameras.length === 0) {
          console.log('⚠️ Html5Qrcode не нашел камеры, но getUserMedia работает');
          return false;
        }
        
        cameras.forEach((camera, index) => {
          console.log(`  📷 Камера ${index + 1}: "${camera.label || 'Без названия'}" (${camera.id})`);
        });
        
        return true;
        
      } catch (qrError) {
        console.error('❌ Html5Qrcode ошибка:', qrError);
        return false;
      }
      
    } catch (error) {
      console.error('💥 Критическая ошибка проверки камеры:', error.name, error.message);
      
      // Enhanced mobile error handling with user instructions
      if (error.name === 'NotAllowedError') {
        console.log('🚫 ИНСТРУКЦИЯ: Разрешите доступ к камере');
        showAlert('📱 Разрешите доступ к камере в браузере:\n1. Нажмите на иконку замка/камеры в адресной строке\n2. Выберите "Разрешить" для камеры\n3. Обновите страницу', 'warning');
      } else if (error.name === 'NotFoundError') {
        console.log('📵 Камера не обнаружена на устройстве');
        showAlert('📵 Камера не найдена. Проверьте:\n1. Камера не используется другим приложением\n2. Физический доступ к камере открыт\n3. Перезагрузите браузер', 'info');
      } else if (error.name === 'NotReadableError') {
        console.log('🔒 Камера заблокирована системой или другим приложением');
        showAlert('🔒 Камера занята. Закройте другие приложения камеры и попробуйте снова.', 'warning');
      } else if (error.message === 'Timeout') {
        console.log('⏱️ Превышен timeout инициализации камеры');
        showAlert('⏱️ Камера слишком долго инициализируется. Попробуйте:\n1. Перезагрузить страницу\n2. Использовать другой браузер\n3. Перезагрузить устройство', 'info');
      }
      
      return false;
    }
  };

  // Open cargo placement page
  const openCargoPlacementPage = () => {
    console.log('🚀 Открытие страницы размещения груза...');
    setCurrentPage('cargo-placement');
    
    // Reset placement state when opening page
    setPlacementActive(false);
    setPlacementStep('idle');
    setScannerActive(false);
    setManualCargoNumber('');
    setManualCellCode('');
    
    // Initialize placement page with longer delay for React rendering completion
    setTimeout(async () => {
      await startCargoPlacement();
    }, 1500);
  };

  // Close cargo placement page
  const closeCargoPlacementPage = () => {
    console.log('🔙 Закрытие страницы размещения груза...');
    
    // Stop any active scanners
    cleanupAllQrScanners();
    
    // Reset all placement states
    setPlacementActive(false);
    setPlacementStep('idle');
    setScannerActive(false);
    setShowCargoPlacementModal(false);
    
    // Return to main page
    setCurrentPage('main');
  };
  
  // НОВАЯ ФУНКЦИЯ: Универсальная очистка всех QR сканеров
  const cleanupAllQrScanners = () => {
    console.log('🧹 Очистка всех QR сканеров...');
    
    const scannerIds = [
      'qr-reader-placement-main',
      'qr-reader-placement-cargo', 
      'qr-reader-placement-mobile',
      'qr-reader-placement-edit',
      'qr-reader-placement-receive',
      'qr-reader-placement-update',
      'qr-reader-placement-search',
      'qr-reader-placement-isolated'
    ];
    
    // Остановка всех активных сканеров с таймаутом
    if (html5QrCodePlacement) {
      try {
        safeStopQrScanner(html5QrCodePlacement, "qr-reader-placement-main", "Tab Switch Cleanup");
        setHtml5QrCodePlacement(null);
      } catch (e) {
        console.warn('Ошибка при остановке QR сканера:', e);
      }
    }
    
    // Очистка DOM элементов всех сканеров с защитой от ошибок
    scannerIds.forEach(scannerId => {
      try {
        const element = document.getElementById(scannerId);
        if (element && element.parentNode) {
          // ИСПРАВЛЕНИЕ: Проверяем, что элемент все еще в DOM
          element.innerHTML = '';
          console.log(`✅ Очищен сканер: ${scannerId}`);
        }
      } catch (e) {
        console.warn(`⚠️ Ошибка при очистке сканера ${scannerId}:`, e);
      }
    });
    
    // Сброс состояний сканеров
    setScannerActive(false);
    setExternalScannerActive(false);
    setSearchScannerActive(false);
  };  
  const startCargoPlacement = async () => {
    try {
      console.log('🚀 Запуск процесса размещения груза...');
      
      setPlacementActive(true);
      setPlacementStep('scan-cargo');
      
      // First fetch statistics and available cells
      await fetchPlacementStatistics();
      await getAvailableWarehouseCells();
      
      // Show loading indicator for mobile users
      showAlert('⏳ Инициализация камеры...', 'info');
      
      // Check camera availability with enhanced mobile support
      console.log('📱 Проверка камеры для мобильного устройства...');
      const cameraAvailable = await checkCameraAvailability();
      
      if (cameraAvailable) {
        // Camera is available, proceed with QR scanner
        console.log('✅ Камера доступна, запуск сканера...');
        showAlert('📹 Камера активирована! Наведите на QR код груза.', 'success');
        
        // Extended wait for modal to fully render on mobile
        console.log('⏳ Ожидание полной загрузки интерфейса...');
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Then start QR scanner with retry mechanism
        let scannerStarted = false;
        let attempts = 0;
        const maxAttempts = 3;
        
        while (!scannerStarted && attempts < maxAttempts) {
          try {
            attempts++;
            console.log(`🔄 Попытка запуска сканера ${attempts}/${maxAttempts}...`);
            await startQRScannerForPlacement();
            scannerStarted = true;
            console.log('✅ Сканер успешно запущен');
          } catch (error) {
            console.warn(`⚠️ Попытка ${attempts} не удалась:`, error.message);
            if (attempts < maxAttempts) {
              console.log('⏳ Ожидание перед следующей попыткой...');
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
          }
        }
        
        if (!scannerStarted) {
          console.error('❌ Не удалось запустить сканер после всех попыток');
          throw new Error('Не удалось запустить камеру после нескольких попыток');
        }
        
      } else {
        // Camera not available, show manual input mode
        console.log('📝 Камера недоступна, переход к ручному режиму');
        showAlert('📝 Камера недоступна. Используйте ручной ввод данных ниже.', 'warning');
        setScannerActive(false); // Ensure scanner is marked as inactive
      }
      
    } catch (error) {
      console.error('💥 Ошибка запуска размещения груза:', error);
      showAlert(`❌ Ошибка: ${error.message}. Используйте ручной ввод.`, 'error');
      // Don't reset placement active - allow manual input to work
      setScannerActive(false);
    }
  };

  // Completely isolated QR Scanner to prevent React removeChild conflicts
  const startQRScannerForPlacement = async () => {
    try {
      console.log('🔧 Запуск изолированного QR сканера для мобильных устройств...');
      
      // Prevent multiple simultaneous initializations
      if (isInitializingRef.current) {
        console.log('⚠️ Сканер уже инициализируется, пропуск...');
        return;
      }
      
      isInitializingRef.current = true;
      
      // Complete cleanup first using isolated method
      await completeQrCleanup("Isolated Scanner Start");
      
      // Create isolated container to avoid React conflicts
      const isolatedElementId = createIsolatedQrContainer();
      
      // Wait for isolated container to be ready
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Verify isolated element exists
      const isolatedElement = document.getElementById(isolatedElementId);
      if (!isolatedElement) {
        throw new Error('Изолированный контейнер не создан');
      }
      
      console.log('✅ Изолированный контейнер готов для QR сканера');

      // Get cameras with enhanced retry
      let cameras = [];
      let cameraAttempts = 0;
      const maxCameraAttempts = 3;
      
      while (cameras.length === 0 && cameraAttempts < maxCameraAttempts) {
        try {
          cameraAttempts++;
          console.log(`🎥 Получение камер (попытка ${cameraAttempts}/${maxCameraAttempts})...`);
          cameras = await Html5Qrcode.getCameras();
          
          if (cameras.length === 0 && cameraAttempts < maxCameraAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1500));
          }
        } catch (error) {
          console.error(`❌ Ошибка получения камер (попытка ${cameraAttempts}):`, error);
          if (cameraAttempts < maxCameraAttempts) {
            await new Promise(resolve => setTimeout(resolve, 1500));
          }
        }
      }
      
      if (!cameras || cameras.length === 0) {
        throw new Error('Камеры не найдены для изолированного сканера');
      }

      console.log(`📹 Найдено камер для изолированного сканера: ${cameras.length}`);
      setAvailablePlacementCameras(cameras);

      // Select best camera
      let selectedCamera = cameras[currentPlacementCameraIndex] || cameras[cameras.length - 1];
      console.log(`🎬 Выбрана изолированная камера: "${selectedCamera.label}"`);

      // Initialize Html5Qrcode with isolated element
      console.log('🚀 Создание изолированного Html5Qrcode экземпляра...');
      const qrCodeInstance = new Html5Qrcode(isolatedElementId);
      
      // Store instance in ref for safe cleanup
      html5QrCodePlacementRef.current = qrCodeInstance;
      setHtml5QrCodePlacement(qrCodeInstance);

      // Mobile-optimized configuration
      const isolatedConfig = {
        fps: 15,
        qrbox: function(viewfinderWidth, viewfinderHeight) {
          const minEdge = Math.min(viewfinderWidth, viewfinderHeight);
          const boxSize = Math.floor(minEdge * 0.8);
          console.log(`📐 Изолированный QR box: ${boxSize}x${boxSize}`);
          return { width: boxSize, height: boxSize };
        },
        aspectRatio: 1.0,
        disableFlip: false,
        videoConstraints: {
          facingMode: "environment",
          width: { ideal: 1280, max: 1920, min: 640 },
          height: { ideal: 720, max: 1080, min: 480 },
          frameRate: { ideal: 20, min: 10 }
        },
        experimentalFeatures: { useBarCodeDetectorIfSupported: true },
        rememberLastUsedCamera: true
      };

      console.log('🎯 Запуск изолированного сканера с защитой от React конфликтов...');
      
      await qrCodeInstance.start(
        selectedCamera.id,
        isolatedConfig,
        (decodedText, decodedResult) => {
          console.log('📱 QR код отсканирован изолированным сканером:', decodedText);
          handlePlacementQRScan(decodedText);
        },
        (errorMessage) => {
          if (!errorMessage.includes('No QR code found') && 
              !errorMessage.includes('NotFoundException')) {
            console.debug('🔍 Изолированное сканирование:', errorMessage);
          }
        }
      );
      
      setScannerActive(true);
      isInitializingRef.current = false;
      
      console.log('✅ Изолированный QR сканер успешно запущен без React конфликтов');
      showAlert('📱 Изолированная камера готова! Наведите на QR код.', 'success');
      
    } catch (error) {
      console.error('💥 Критическая ошибка изолированного QR сканера:', error);
      
      // Complete cleanup on error
      await completeQrCleanup("Isolated Scanner Error");
      
      let userMessage = '📵 Не удалось запустить изолированную камеру';
      
      if (error.message.includes('Камеры не найдены')) {
        userMessage = '📵 Камеры не обнаружены. Проверьте подключение камеры.';
      } else if (error.message.includes('Изолированный контейнер')) {
        userMessage = '🔄 Ошибка создания изолированного интерфейса. Попробуйте обновить страницу.';
      }
      
      showAlert(`${userMessage}\n\nИспользуйте ручной ввод ниже.`, 'warning');
    }
  };

  // New function: Handle QR scan during placement
  const handlePlacementQRScan = async (scannedData) => {
    try {
      // Останавливаем сканер размещения безопасно
      if (html5QrCodePlacement) {
        await safeStopQrScanner(html5QrCodePlacement, "qr-reader-placement", "Placement Scanner");
        setHtml5QrCodePlacement(null);
      }
      setScannerActive(false);

      if (placementStep === 'scan-cargo') {
        // Scanned cargo QR code
        const response = await apiCall('/api/qr/scan', 'POST', { qr_text: scannedData });
        
        if (response && response.type === 'cargo') {
          setScannedCargoForPlacement(response);
          setPlacementStep('scan-cell');
          showAlert(`Груз найден: ${response.cargo_number}. Теперь отсканируйте ячейку.`, 'success');
          setTimeout(() => startQRScannerForPlacement(), 1000);
        } else {
          showAlert('Отсканированный код не является кодом груза', 'error');
        }
        
      } else if (placementStep === 'scan-cell') {
        // Scanned cell QR code
        const response = await apiCall('/api/qr/scan', 'POST', { qr_text: scannedData });
        
        if (response && response.type === 'warehouse_cell') {
          if (response.is_occupied) {
            showAlert(`Ячейка занята грузом ${response.cargo_number}`, 'error');
            setTimeout(() => startQRScannerForPlacement(), 1000);
          } else {
            // Place cargo in cell
            const success = await placeCargoInCell(
              scannedCargoForPlacement.cargo_number,
              scannedData
            );
            
            if (success) {
              // Reset to scan next cargo
              setScannedCargoForPlacement(null);
              setPlacementStep('scan-cargo');
              showAlert('Груз размещен! Можете сканировать следующий груз.', 'success');
              setTimeout(() => startQRScannerForPlacement(), 1000);
            }
          }
        } else {
          showAlert('Отсканированный код не является кодом ячейки', 'error');
          setTimeout(() => startQRScannerForPlacement(), 1000);
        }
      }
    } catch (error) {
      console.error('Error handling placement QR scan:', error);
      showAlert(`Ошибка сканирования: ${error.message}`, 'error');
      setTimeout(() => startQRScannerForPlacement(), 1000);
    }
  };

  // New function: Stop placement process
  const stopCargoPlacement = async () => {
    if (html5QrCodePlacement) {
      await safeStopQrScanner(html5QrCodePlacement, "qr-reader-placement", "Placement Scanner");
      setHtml5QrCodePlacement(null);
    }
    
    setPlacementActive(false);
    setPlacementStep('idle');
    setScannedCargoForPlacement(null);
    setScannerActive(false);
  };

  // New function: Switch camera for placement scanner
  const switchPlacementCamera = async () => {
    if (availablePlacementCameras.length <= 1) {
      showAlert('На устройстве найдена только одна камера', 'info');
      return;
    }

    try {
      // Stop current scanner
      if (html5QrCodePlacement) {
        await safeStopQrScanner(html5QrCodePlacement, "qr-reader-placement", "Placement Scanner");
        setHtml5QrCodePlacement(null);
      }

      // Switch to next camera
      const nextCameraIndex = (currentPlacementCameraIndex + 1) % availablePlacementCameras.length;
      setCurrentPlacementCameraIndex(nextCameraIndex);
      
      // Restart scanner with new camera
      setTimeout(() => {
        startQRScannerForPlacement();
      }, 500);

      showAlert(`Переключение на камеру: ${availablePlacementCameras[nextCameraIndex]?.label || 'Неизвестная'}`, 'info');

    } catch (error) {
      console.error('Error switching camera:', error);
      showAlert('Ошибка переключения камеры', 'error');
    }
  };

  // Scan QR code to find cargo
  const scanCargoQRCode = async (qrText) => {
    try {
      const response = await apiCall('/api/cargo/scan-qr', 'POST', { qr_text: qrText });
      
      if (response && response.success) {
        setScannedCargoInfo(response.cargo);
        setShowScannedCargoModal(true);
        showAlert(`Груз найден: ${response.cargo.cargo_number}`, 'success');
        return response.cargo;
      }
    } catch (error) {
      console.error('Error scanning cargo QR:', error);
      showAlert(`Ошибка сканирования QR кода: ${error.message}`, 'error');
      return null;
    }
  };

  // Start QR scanner for cargo search
  const startCargoQRScanner = () => {
    setScannerMode('cargo-qr-search');
    setScannerActive(true);
    setScannerError(null);
    setShowQRScannerModal(true);
  };

  // Stop QR scanner
  const stopCargoQRScanner = () => {
    setScannerMode('none');
    setScannerActive(false);
    setScannerError(null);
    setShowQRScannerModal(false);
  };

  // Switch camera for modal QR scanner
  const switchModalCamera = async () => {
    try {
      if (modalCameras.length > 1) {
        // Переключаем на следующую камеру
        const nextIndex = (modalCameraIndex + 1) % modalCameras.length;
        setModalCameraIndex(nextIndex);
        
        // Перезапускаем сканер с новой камерой
        setScannerActive(false);
        setTimeout(() => {
          setScannerActive(true);
        }, 500);
        
        const cameraName = modalCameras[nextIndex]?.label || 'Неизвестная камера';
        showAlert(`Переключено на: ${cameraName}`, 'info');
      } else {
        showAlert('Доступна только одна камера', 'warning');
      }
    } catch (error) {
      console.error('Error switching camera:', error);
      showAlert('Ошибка переключения камеры', 'error');
    }
  };

  // useEffect for QR scanner modal - improved with useRef
  useEffect(() => {
    // Функция для выбора лучшей камеры (предпочтение задней камере)
    const getBestCamera = (cameras) => {
      if (!cameras || cameras.length === 0) return null;

      // Ищем заднюю камеру (environment-facing)
      const backCamera = cameras.find(camera => 
        camera.label.toLowerCase().includes('back') ||
        camera.label.toLowerCase().includes('rear') ||
        camera.label.toLowerCase().includes('environment') ||
        camera.label.toLowerCase().includes('0') // Часто задняя камера имеет индекс 0 в названии
      );

      if (backCamera) {
        console.log('Selected back camera:', backCamera.label);
        return backCamera;
      }

      // Если задняя не найдена, используем последнюю (часто это задняя)
      console.log('Back camera not found, using camera:', cameras[cameras.length - 1].label);
      return cameras[cameras.length - 1];
    };

    const initializeModalQRScanner = async () => {
      if (showQRScannerModal && scannerMode === 'cargo-qr-search' && scannerActive) {
        try {
          // Останавливаем предыдущий экземпляр безопасно
          if (modalScannerRef.current) {
            await safeStopQrScanner(modalScannerRef.current, "qr-reader-modal", "Modal Scanner");
            modalScannerRef.current = null;
          }

          // Проверяем существование элемента
          const modalElement = document.getElementById('qr-reader-modal');
          if (!modalElement) {
            console.log('QR reader modal element not found, waiting...');
            return;
          }

          // Инициализируем камеру
          const cameras = await Html5Qrcode.getCameras();
          if (cameras && cameras.length > 0) {
            // Сохраняем список камер для переключения
            setModalCameras(cameras);
            
            modalScannerRef.current = new Html5Qrcode("qr-reader-modal");
            
            // Выбираем камеру по индексу, либо лучшую при первом запуске
            let selectedCamera;
            if (modalCameraIndex < cameras.length) {
              selectedCamera = cameras[modalCameraIndex];
            } else {
              // При первом запуске выбираем лучшую камеру
              selectedCamera = getBestCamera(cameras);
              const selectedIndex = cameras.findIndex(c => c.id === selectedCamera.id);
              setModalCameraIndex(selectedIndex >= 0 ? selectedIndex : 0);
            }
            
            console.log(`Using camera: ${selectedCamera.label} (index: ${modalCameraIndex})`);
            
            const config = {
              fps: 10,
              qrbox: { width: 200, height: 200 },
              aspectRatio: 1.0,
              disableFlip: false,
              // Дополнительные настройки для лучшего сканирования
              videoConstraints: {
                facingMode: "environment" // Принудительно задняя камера
              }
            };

            await modalScannerRef.current.start(
              selectedCamera.id, // Используем выбранную камеру
              config,
              async (decodedText, decodedResult) => {
                console.log('Cargo QR Code scanned:', decodedText);
                
                // Останавливаем сканер безопасно
                if (modalScannerRef.current) {
                  await safeStopQrScanner(modalScannerRef.current, "qr-reader-modal", "Modal Scanner");
                  modalScannerRef.current = null;
                }
                
                // Обрабатываем отсканированный QR код
                await scanCargoQRCode(decodedText);
                
                // Закрываем модальное окно
                stopCargoQRScanner();
              },
              (errorMessage) => {
                // Игнорируем постоянные ошибки сканирования для уменьшения логов
                console.debug('Modal QR scan error:', errorMessage);
              }
            );
            
            console.log('Modal QR scanner initialized successfully');
          } else {
            console.error('No cameras available for modal QR scanner');
            setScannerError('Камеры не обнаружены');
          }
        } catch (error) {
          console.error('Modal QR scanner initialization error:', error);
          setScannerError('Не удалось инициализировать сканер');
        }
      }
    };

    if (showQRScannerModal && scannerMode === 'cargo-qr-search' && scannerActive) {
      // Добавляем небольшую задержку для корректной инициализации DOM
      setTimeout(initializeModalQRScanner, 500);
    }

    // Очистка при размонтировании или изменении зависимостей
    return () => {
      if (modalScannerRef.current) {
        safeStopQrScanner(modalScannerRef.current, "qr-reader-modal", "Modal Scanner").catch(console.error);
        modalScannerRef.current = null;
      }
    };
  }, [showQRScannerModal, scannerMode, scannerActive, modalCameraIndex]);

  const printApplicationQR = () => {
    if (!applicationQRCode) return;

    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
      return;
    }
    const printContent = `
      <html>
        <head>
          <title>QR код заявки ${applicationQRCode.cargo_number}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              text-align: center; 
              line-height: 1.6; 
            }
            .qr-container { 
              border: 2px solid #333; 
              padding: 20px; 
              margin: 20px auto; 
              max-width: 400px; 
              border-radius: 10px; 
            }
            .qr-code { 
              margin: 15px 0; 
            }
            .cargo-info { 
              margin: 15px 0; 
              text-align: left; 
            }
            .cargo-info div { 
              margin: 5px 0; 
            }
            .header { 
              font-size: 18px; 
              font-weight: bold; 
              margin-bottom: 15px; 
            }
            @media print {
              .qr-container { page-break-inside: avoid; }
            }
          </style>
        </head>
        <body>
          <div class="qr-container">
            <div class="header">ЗАЯВКА TAJLINE.TJ</div>
            <div class="qr-code">
              <img src="${applicationQRCode.qr_code}" alt="QR код заявки" style="width: 200px; height: 200px;" />
            </div>
            <div class="cargo-info">
              <div><strong>Номер заявки:</strong> ${applicationQRCode.cargo_number}</div>
              <div><strong>Наименование:</strong> ${applicationQRCode.cargo_info.cargo_name}</div>
              <div><strong>Вес:</strong> ${applicationQRCode.cargo_info.weight} кг</div>
              <div><strong>Отправитель:</strong> ${applicationQRCode.cargo_info.sender_name}</div>
              <div><strong>Получатель:</strong> ${applicationQRCode.cargo_info.recipient_name}</div>
              <div><strong>Дата создания:</strong> ${applicationQRCode.cargo_info.created_at}</div>
            </div>
            <div style="margin-top: 20px; font-size: 12px; color: #666;">
              Отсканируйте для получения информации о заявке
            </div>
          </div>
        </body>
      </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
  };

  const getPaymentMethodText = (method) => {
    const methods = {
      'not_paid': 'Не оплачено',
      'cash': 'Наличные',
      'card_transfer': 'Перевод на карту',
      'cash_on_delivery': 'При получении',
      'credit': 'В долг'
    };
    return methods[method] || method;
  };

  const getStatusText = (status) => {
    const statuses = {
      'accepted': 'Принят',
      'placed_in_warehouse': 'На складе',
      'on_transport': 'На транспорте',
      'in_transit': 'В пути',
      'ready_for_delivery': 'Готов к выдаче',
      'delivered': 'Доставлен'
    };
    return statuses[status] || status;
  };

  const getProcessingStatusText = (status) => {
    const statuses = {
      'payment_pending': 'Ожидает оплаты',
      'paid': 'Оплачен',
      'placed': 'Размещен',
      'ready_for_pickup': 'Готов к выдаче'
    };
    return statuses[status] || status;
  };

  const getPaymentStatusText = (status) => {
    const statuses = {
      'pending': 'Ожидается',
      'paid': 'Оплачен',
      'unpaid': 'Не оплачен',
      'partial': 'Частично'
    };
    return statuses[status] || status;
  };

  const getOperationText = (operation) => {
    const operations = {
      'view_details': 'Подробности',
      'edit_cargo': 'Редактировать',
      'print_label': 'Печать этикетки',
      'generate_qr': 'QR код',
      'track_history': 'История',
      'accept_payment': 'Принять оплату',
      'place_in_warehouse': 'Разместить',
      'move_cargo': 'Переместить',
      'prepare_delivery': 'Подготовить выдачу',
      'deliver_cargo': 'Выдать груз',
      'make_payment': 'Оплатить',
      'print_receipt': 'Квитанция'
    };
    return operations[operation] || operation;
  };

  const handleCargoOperation = (operation, cargoInfo) => {
    switch (operation) {
      case 'view_details':
        // Показать подробную информацию
        showAlert(`Подробности груза ${cargoInfo.cargo_number}`, 'info');
        break;
      case 'print_label':
        // Печать этикетки
        printCargoLabel(cargoInfo);
        break;
      case 'generate_qr':
        // Генерация QR кода
        generateApplicationQR(cargoInfo.cargo_number);
        break;
      default:
        showAlert(`Операция "${getOperationText(operation)}" будет реализована`, 'info');
    }
  };

  const printCargoLabel = (cargoInfo) => {
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
      return;
    }
    const printContent = `
      <html>
        <head>
          <title>Этикетка груза ${cargoInfo.cargo_number}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 10px; }
            .label { border: 2px solid #000; padding: 10px; max-width: 300px; }
            .header { text-align: center; font-weight: bold; font-size: 16px; margin-bottom: 10px; }
            .info { font-size: 12px; line-height: 1.3; }
          </style>
        </head>
        <body>
          <div class="label">
            <div class="header">TAJLINE.TJ</div>
            <div class="info">
              <div><strong>Номер:</strong> ${cargoInfo.cargo_number}</div>
              <div><strong>Груз:</strong> ${cargoInfo.cargo_name}</div>
              <div><strong>Вес:</strong> ${cargoInfo.weight} кг</div>
              <div><strong>От:</strong> ${cargoInfo.sender_name}</div>
              <div><strong>Кому:</strong> ${cargoInfo.recipient_name}</div>
              <div><strong>Тел:</strong> ${cargoInfo.recipient_phone}</div>
            </div>
          </div>
        </body>
      </html>
    `;
    printWindow.document.write(printContent);
    printWindow.document.close();
    printWindow.print();
  };

  // Функция управления ролями
  const handleRoleChange = async () => {
    if (!selectedUserForRole || !newRole) return;
    
    try {
      await apiCall(`/api/admin/users/${selectedUserForRole.id}/role`, 'PUT', {
        user_id: selectedUserForRole.id,
        new_role: newRole
      });
      
      showAlert(`Роль пользователя изменена на ${getRoleLabel(newRole)}`, 'success');
      setShowRoleModal(false);
      setSelectedUserForRole(null);
      setNewRole('');
      fetchUsers(); // Обновляем список пользователей
    } catch (error) {
      showAlert(error.message || 'Ошибка изменения роли', 'error');
    }
  };

  // Открытие модального окна изменения роли
  const openRoleModal = (user) => {
    setSelectedUserForRole(user);
    setNewRole(user.role);
    setShowRoleModal(true);
  };

  const fetchUserData = async () => {
    // Предотвращаем множественные запросы данных пользователя
    if (isLoggingIn || isLoggingOut || user) {
      console.log('Skipping fetchUserData - login/logout in progress or user already loaded');
      return;
    }

    try {
      console.log('Fetching user data...');
      // Get user data from backend using the token
      const userData = await apiCall('/api/auth/me', 'GET');
      console.log('User data received:', userData.full_name, userData.role);
      setUser(userData);
      
      // ИСПРАВЛЕНИЕ: Устанавливаем флаг завершения загрузки данных
      setDataLoaded(true);
      
      // Сбрасываем флаг логина если он был установлен
      if (isLoggingIn) {
        setIsLoggingIn(false);
      }
    } catch (error) {
      console.error('Failed to fetch user data:', error);
      // Не очищаем токен автоматически - позволяем apiCall обработать это
      if (error.message !== 'Session expired') {
        showAlert('Ошибка загрузки данных пользователя', 'error');
      }
      throw error;
    }
  };

  const fetchNotifications = async () => {
    try {
      const data = await apiCall('/api/notifications?status=all&limit=50');
      setNotifications(data || []);
    } catch (error) {
      console.error('Error fetching notifications:', error);
    }
  };

  const fetchMyCargo = async () => {
    try {
      const data = await apiCall('/api/cargo/my');
      setCargo(data);
    } catch (error) {
      console.error('Error fetching cargo:', error);
    }
  };

  const fetchAllCargo = async () => {
    try {
      const data = await apiCall('/api/cargo/all');
      setCargo(data);
    } catch (error) {
      console.error('Error fetching all cargo:', error);
    }
  };

  const fetchUsers = async (page = usersPage, perPage = usersPerPage) => {
    try {
      const params = {
        page: page,
        per_page: perPage
      };
      
      const response = await apiCall('/api/admin/users', 'GET', null, params);
      
      // Проверяем новый формат ответа с пагинацией
      if (response.items) {
        setUsers(response.items); // Используем items из пагинированного ответа
        setUsersPagination(response.pagination);
      } else {
        // Обратная совместимость со старым форматом
        setUsers(response);
        setUsersPagination({});
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      setUsers([]); // Устанавливаем пустой массив в случае ошибки
      setUsersPagination({});
    }
  };

  const fetchWarehouseCargo = async () => {
    try {
      const data = await apiCall('/api/warehouse/cargo');
      setWarehouseCargo(data);
    } catch (error) {
      console.error('Error fetching warehouse cargo:', error);
    }
  };

  // НОВЫЙ КОМПОНЕНТ: Статистика склада с lazy loading
  const WarehouseStatistics = ({ warehouse }) => {
    const [statistics, setStatistics] = useState(null);
    const [loading, setLoading] = useState(false);
    
    // Загружаем статистику при монтировании компонента
    useEffect(() => {
      const loadStatistics = async () => {
        // Проверяем, есть ли уже загруженная статистика
        if (warehousesStatistics[warehouse.id]) {
          setStatistics(warehousesStatistics[warehouse.id]);
          return;
        }
        
        setLoading(true);
        try {
          const stats = await fetchWarehouseStatisticsLazy(warehouse.id);
          setStatistics(stats);
        } catch (error) {
          console.error(`Error loading statistics for warehouse ${warehouse.id}:`, error);
        } finally {
          setLoading(false);
        }
      };
      
      loadStatistics();
    }, [warehouse.id]);
    
    // Если загрузка идет, показываем placeholder
    if (loading || !statistics) {
      return (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
          {[1, 2, 3, 4].map(i => (
            <div key={i} className="bg-white p-3 rounded-lg border shadow-sm animate-pulse">
              <div className="flex items-center justify-between">
                <div>
                  <div className="h-3 bg-gray-200 rounded w-16 mb-2"></div>
                  <div className="h-6 bg-gray-200 rounded w-8"></div>
                </div>
                <div className="h-6 w-6 bg-gray-200 rounded"></div>
              </div>
            </div>
          ))}
        </div>
      );
    }
    
    return (
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
        <div className="bg-white p-3 rounded-lg border shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-gray-500">Всего ячеек</p>
              <p className="text-xl font-bold text-blue-600">
                {statistics?.total_cells || 
                 (warehouse.blocks_count || 0) * (warehouse.shelves_per_block || 0) * (warehouse.cells_per_shelf || 0)}
              </p>
            </div>
            <Grid3X3 className="h-6 w-6 text-blue-500" />
          </div>
        </div>
        
        <div className="bg-white p-3 rounded-lg border shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-gray-500">Занято</p>
              <p className="text-xl font-bold text-red-600">
                {statistics?.occupied_cells || 0}
              </p>
            </div>
            <Package className="h-6 w-6 text-red-500" />
          </div>
        </div>
        
        <div className="bg-white p-3 rounded-lg border shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-gray-500">Свободно</p>
              <p className="text-xl font-bold text-green-600">
                {statistics?.free_cells || 
                 ((warehouse.blocks_count || 0) * (warehouse.shelves_per_block || 0) * (warehouse.cells_per_shelf || 0))}
              </p>
            </div>
            <CheckCircle className="h-6 w-6 text-green-500" />
          </div>
        </div>
        
        <div className="bg-white p-3 rounded-lg border shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-gray-500">Загрузка</p>
              <p className="text-xl font-bold text-orange-600">
                {statistics?.utilization_percent?.toFixed(1) || '0.0'}%
              </p>
            </div>
            <DollarSign className="h-6 w-6 text-orange-500" />
          </div>
        </div>
      </div>
    );
  };

  // НОВЫЙ КОМПОНЕНТ: Дополнительная статистика склада с lazy loading
  const WarehouseExtendedStatistics = ({ warehouse }) => {
    const [statistics, setStatistics] = useState(null);
    const [loading, setLoading] = useState(false);
    
    // Загружаем статистику при монтировании компонента
    useEffect(() => {
      const loadStatistics = async () => {
        // Проверяем, есть ли уже загруженная статистика
        if (warehousesStatistics[warehouse.id]) {
          setStatistics(warehousesStatistics[warehouse.id]);
          return;
        }
        
        setLoading(true);
        try {
          const stats = await fetchWarehouseStatisticsLazy(warehouse.id);
          setStatistics(stats);
        } catch (error) {
          console.error(`Error loading statistics for warehouse ${warehouse.id}:`, error);
        } finally {
          setLoading(false);
        }
      };
      
      loadStatistics();
    }, [warehouse.id]);
    
    // Если загрузка идет, показываем placeholder
    if (loading || !statistics) {
      return (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
          {[1, 2, 3, 4].map(i => (
            <div key={i} className="bg-gradient-to-r from-gray-50 to-gray-100 p-3 rounded-lg border animate-pulse">
              <div className="flex items-center justify-between">
                <div>
                  <div className="h-3 bg-gray-200 rounded w-12 mb-2"></div>
                  <div className="h-5 bg-gray-200 rounded w-10"></div>
                </div>
                <div className="h-5 w-5 bg-gray-200 rounded"></div>
              </div>
            </div>
          ))}
        </div>
      );
    }
    
    return (
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
        <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-3 rounded-lg border border-purple-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-purple-700">Вес (кг)</p>
              <p className="text-lg font-bold text-purple-900">
                {statistics?.total_weight || 0}
              </p>
            </div>
            <Package2 className="h-5 w-5 text-purple-600" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-blue-50 to-cyan-50 p-3 rounded-lg border border-blue-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-blue-700">Кол-во грузов</p>
              <p className="text-lg font-bold text-blue-900">
                {statistics?.total_cargo_count || 0}
              </p>
            </div>
            <FileText className="h-5 w-5 text-blue-600" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-3 rounded-lg border border-green-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-green-700">Всего грузов</p>
              <p className="text-lg font-bold text-green-900">
                {statistics?.total_cargo_count || 0}
              </p>
            </div>
            <Package className="h-5 w-5 text-green-600" />
          </div>
        </div>
        
        <div className="bg-gradient-to-r from-yellow-50 to-orange-50 p-3 rounded-lg border border-yellow-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-xs font-medium text-yellow-700">Общий вес (кг)</p>
              <p className="text-lg font-bold text-yellow-900">
                {statistics?.total_weight || 0}
              </p>
            </div>
            <Package2 className="h-5 w-5 text-yellow-600" />
          </div>
        </div>
      </div>
    );
  };

  // НОВАЯ ФУНКЦИЯ: Ленивая загрузка статистики склада по требованию
  const fetchWarehouseStatisticsLazy = async (warehouseId) => {
    // Проверяем, есть ли уже загруженная статистика
    if (warehousesStatistics[warehouseId]) {
      return warehousesStatistics[warehouseId];
    }
    
    try {
      console.log(`📊 Загрузка статистики склада: ${warehouseId}`);
      const stats = await apiCall(`/api/warehouses/${warehouseId}/statistics`, 'GET');
      
      // Обновляем общий объект статистики
      setWarehousesStatistics(prev => ({
        ...prev,
        [warehouseId]: stats
      }));
      
      return stats;
    } catch (error) {
      console.error(`Error loading statistics for warehouse ${warehouseId}:`, error);
      return null;
    }
  };

  const fetchWarehouses = async () => {
    try {
      console.log('📦 Загрузка списка складов...');
      const startTime = performance.now();
      
      const data = await apiCall('/api/warehouses', 'GET');
      // ИСПРАВЛЕНИЕ: API возвращает прямой массив складов, а не объект с полем warehouses
      const warehousesArray = Array.isArray(data) ? data : (data.warehouses || []);
      setWarehouses(warehousesArray);
      
      const endTime = performance.now();
      console.log(`✅ Загружено ${warehousesArray.length} складов за ${Math.round(endTime - startTime)}ms`);
      
      // ОПТИМИЗАЦИЯ: Убрали автоматическую загрузку статистики для всех складов
      // Статистика будет загружаться по требованию (lazy loading)
      console.log('⚡ Статистика складов будет загружаться по требованию для улучшения производительности');
      
    } catch (error) {
      console.error('Error fetching warehouses:', error);
      setWarehouses([]);
    }
  };

  const fetchAvailableCargoForPlacement = async (page = availableCargoPage, perPage = availableCargoPerPage) => {
    try {
      const params = {
        page: page,
        per_page: perPage
      };
      
      const response = await apiCall('/api/operator/cargo/available-for-placement', 'GET', null, params);
      
      // Проверяем новый формат ответа с пагинацией
      if (response.items) {
        // Фильтруем невалидные элементы для предотвращения React ошибок
        const validItems = response.items.filter(item => item && item.id);
        setAvailableCargoForPlacement(validItems);
        setAvailableCargoPagination(response.pagination);
      } else {
        // Обратная совместимость со старым форматом
        const cargoData = response.cargo_list || response || [];
        const validItems = cargoData.filter(item => item && item.id);
        setAvailableCargoForPlacement(validItems);
        setAvailableCargoPagination({});
      }
    } catch (error) {
      console.error('Error fetching available cargo for placement:', error);
      setAvailableCargoForPlacement([]);
      setAvailableCargoPagination({});
    }
  };

  // Обработчики пагинации для списка грузов
  const handleOperatorCargoPageChange = (newPage) => {
    setOperatorCargoPage(newPage);
    fetchOperatorCargo(operatorCargoFilter, newPage, operatorCargoPerPage);
  };

  const handleOperatorCargoPerPageChange = (newPerPage) => {
    const perPage = parseInt(newPerPage);
    setOperatorCargoPerPage(perPage);
    setOperatorCargoPage(1); // Сбрасываем на первую страницу
    fetchOperatorCargo(operatorCargoFilter, 1, perPage);
  };

  // Обработчики пагинации для пользователей
  const handleUsersPageChange = (newPage) => {
    setUsersPage(newPage);
    fetchUsers(newPage, usersPerPage);
  };

  const handleUsersPerPageChange = (newPerPage) => {
    const perPage = parseInt(newPerPage);
    setUsersPerPage(perPage);
    setUsersPage(1); // Сбрасываем на первую страницу
    fetchUsers(1, perPage);
  };

  // Обработчики пагинации для размещения грузов
  const handleAvailableCargoPageChange = (newPage) => {
    setAvailableCargoPage(newPage);
    fetchAvailableCargoForPlacement(newPage, availableCargoPerPage);
  };

  const handleAvailableCargoPerPageChange = (newPerPage) => {
    const perPage = parseInt(newPerPage);
    setAvailableCargoPerPage(perPage);
    setAvailableCargoPage(1); // Сбрасываем на первую страницу
    fetchAvailableCargoForPlacement(1, perPage);
  };

  const fetchWarehouseLayoutWithCargo = async (warehouseId) => {
    try {
      console.log('Fetching warehouse layout for ID:', warehouseId);
      const response = await apiCall(`/api/warehouses/${warehouseId}/layout-with-cargo`);
      console.log('Warehouse layout response:', response);
      setWarehouseLayout(response);
      setSelectedWarehouseForLayout(warehouseId);
    } catch (error) {
      console.error('Error fetching warehouse layout with cargo:', error);
      showAlert('Ошибка при загрузке схемы склада: ' + error.message, 'error');
    }
  };

  const handleCargoMove = async () => {
    if (!selectedCargoForWarehouse) return;
    
    try {
      const moveData = {
        cargo_id: selectedCargoForWarehouse.id,
        from_block: selectedCargoForWarehouse.block_number,
        from_shelf: selectedCargoForWarehouse.shelf_number,
        from_cell: selectedCargoForWarehouse.cell_number,
        to_block: cargoMoveForm.to_block,
        to_shelf: cargoMoveForm.to_shelf,
        to_cell: cargoMoveForm.to_cell
      };

      const response = await apiCall(`/api/warehouses/${selectedWarehouseForLayout}/move-cargo`, 'POST', moveData);
      
      showAlert(`Груз ${response.cargo_number} успешно перемещен с ${response.old_location} на ${response.new_location}`, 'success');
      
      // Обновляем схему склада
      fetchWarehouseLayoutWithCargo(selectedWarehouseForLayout);
      
      // Закрываем модальное окно
      setCargoMoveModal(false);
      setSelectedCargoForWarehouse(null);
      setCargoMoveForm({
        to_block: 1,
        to_shelf: 1,
        to_cell: 1
      });
      
    } catch (error) {
      console.error('Error moving cargo:', error);
      showAlert('Ошибка при перемещении груза: ' + error.message, 'error');
    }
  };

  const handleCleanupTestData = async () => {
    if (!confirm('⚠️ ВНИМАНИЕ!\n\nЭто действие удалит ВСЕ тестовые данные из системы:\n- Тестовых пользователей\n- Тестовые грузы и заявки\n- Связанные уведомления\n- Данные о ячейках\n\nДействие НЕОБРАТИМО!\n\nВы уверены, что хотите продолжить?')) {
      return;
    }
    
    try {
      const response = await apiCall('/api/admin/cleanup-test-data', 'POST');
      
      // Показываем детальный отчет об очистке
      const report = response.cleanup_report;
      const summaryMessage = `
🧹 Очистка тестовых данных завершена!

📊 Отчет об удалении:
• Пользователи: ${report.users_deleted}
• Заявки на грузы: ${report.cargo_requests_deleted}  
• Грузы операторов: ${report.operator_cargo_deleted}
• Грузы пользователей: ${report.user_cargo_deleted}
• Неоплаченные заказы: ${report.unpaid_orders_deleted}
• Уведомления: ${report.notifications_deleted}
• Ячейки склада: ${report.warehouse_cells_deleted}

Время очистки: ${new Date(response.cleanup_time).toLocaleString('ru-RU')}
      `.trim();
      
      showAlert(summaryMessage, 'success');
      
      // Обновляем списки
      fetchOperatorCargo(operatorCargoFilter, operatorCargoPage, operatorCargoPerPage);
      fetchAvailableCargoForPlacement(availableCargoPage, availableCargoPerPage);
      fetchUsersByRole();
      fetchNotifications();
      fetchUnpaidCargo();
      
    } catch (error) {
      console.error('Error cleaning test data:', error);
      showAlert('Ошибка при очистке тестовых данных: ' + error.message, 'error');
    }
  };

  const handleQuickPlacement = async (cargoId) => {
    try {
      const response = await apiCall(`/api/cargo/${cargoId}/quick-placement`, 'POST', quickPlacementForm);
      showAlert(`Груз успешно размещен: ${response.location}`, 'success');
      
      // Обновляем списки
      fetchOperatorCargo(operatorCargoFilter);
      fetchAvailableCargoForPlacement();
      
      // Закрываем модальные окна
      setQuickPlacementModal(false);
      setSelectedCargoForDetailView(null);
      
      // Сбрасываем форму
      setQuickPlacementForm({
        block_number: 1,
        shelf_number: 1,
        cell_number: 1
      });
    } catch (error) {
      console.error('Error placing cargo:', error);
      showAlert('Ошибка при размещении груза: ' + error.message, 'error');
    }
  };

  const handlePaymentAcceptance = async (cargoId, cargoNumber) => {
    try {
      // Обновляем статус на оплачено
      await apiCall(`/api/cargo/${cargoId}/processing-status`, 'PUT', { new_status: 'paid' });
      
      showAlert(`✅ Оплата принята для груза ${cargoNumber}`, 'success');
      showAlert('📦 Груз автоматически перемещен в раздел "Ожидает размещение"', 'info');
      
      // Обновляем все списки и статусы во ВСЕХ таблицах и категориях
      fetchOperatorCargo(operatorCargoFilter);
      fetchAvailableCargoForPlacement();
      fetchAllCargo(); // Админский список
      fetchUnpaidCargo(); // Касса
      fetchPaymentHistory(); // История платежей
      fetchPlacedCargo(); // Размещенные грузы
      
    } catch (error) {
      console.error('Error accepting payment:', error);
      showAlert('Ошибка при принятии оплаты: ' + error.message, 'error');
    }
  };

  // Новые функции для улучшенного размещения

  // Получение аналитики по складам
  const fetchWarehouseAnalytics = async () => {
    try {
      const data = await apiCall('/api/warehouses/analytics');
      setWarehouseAnalytics(data);
      return data;
    } catch (error) {
      console.error('Error fetching warehouse analytics:', error);
      showAlert('Ошибка загрузки аналитики складов', 'error');
      return null;
    }
  };

  // Получение доступных ячеек для размещения (старый метод для совместимости)
  const fetchAvailableCellsForEnhancedPlacement = async (warehouseId, blockNumber, shelfNumber) => {
    try {
      const data = await apiCall(`/api/warehouses/${warehouseId}/available-cells/${blockNumber}/${shelfNumber}`);
      setAvailableCellsForPlacement(data.available_cells || []);
      return data.available_cells || [];
    } catch (error) {
      console.error('Error fetching available cells:', error);
      setAvailableCellsForPlacement([]);
      return [];
    }
  };

  // Получение детальной структуры склада
  const fetchWarehouseDetailedStructure = async (warehouseId) => {
    setStructureLoading(true);
    try {
      const data = await apiCall(`/api/warehouses/${warehouseId}/detailed-structure`);
      setWarehouseDetailedStructure(data);
      return data;
    } catch (error) {
      console.error('Error fetching warehouse detailed structure:', error);
      showAlert('Ошибка загрузки структуры склада', 'error');
      return null;
    } finally {
      setStructureLoading(false);
    }
  };

  // Обработка выбора склада для размещения с загрузкой структуры
  const handleWarehouseSelectionForPlacement = async (warehouseId) => {
    setSelectedWarehouseForPlacement(warehouseId);
    setSelectedBlockForPlacement(1);
    setSelectedShelfForPlacement(1);
    setSelectedCellForPlacement(1);
    setSelectedCellForVisualization(null);
    
    // Загружаем детальную структуру склада
    await fetchWarehouseDetailedStructure(warehouseId);
    
    // Также загружаем доступные ячейки для совместимости
    await fetchAvailableCellsForEnhancedPlacement(warehouseId, 1, 1);
  };

  // Проверка доступности ячейки
  const isCellAvailable = (blockNumber, shelfNumber, cellNumber) => {
    if (!warehouseDetailedStructure) return true;
    
    const block = warehouseDetailedStructure.blocks?.find(b => b.block_number === blockNumber);
    if (!block) return true;
    
    const shelf = block.shelves?.find(s => s.shelf_number === shelfNumber);
    if (!shelf) return true;
    
    const cell = shelf.cells?.find(c => c.cell_number === cellNumber);
    return cell?.status === 'available';
  };

  // Получение информации о занятости ячейки
  const getCellInfo = (blockNumber, shelfNumber, cellNumber) => {
    if (!warehouseDetailedStructure) return null;
    
    const block = warehouseDetailedStructure.blocks?.find(b => b.block_number === blockNumber);
    if (!block) return null;
    
    const shelf = block.shelves?.find(s => s.shelf_number === shelfNumber);
    if (!shelf) return null;
    
    const cell = shelf.cells?.find(c => c.cell_number === cellNumber);
    return cell;
  };

  // Обработка выбора блока и полки с проверкой доступности ячеек
  const handleBlockShelfSelection = async (blockNumber, shelfNumber) => {
    setSelectedBlockForPlacement(blockNumber);
    setSelectedShelfForPlacement(shelfNumber);
    
    if (selectedWarehouseForPlacement) {
      // Загружаем доступные ячейки для совместимости
      await fetchAvailableCellsForEnhancedPlacement(selectedWarehouseForPlacement, blockNumber, shelfNumber);
      
      // Находим первую доступную ячейку в выбранном блоке/полке
      if (warehouseDetailedStructure) {
        const block = warehouseDetailedStructure.blocks?.find(b => b.block_number === blockNumber);
        const shelf = block?.shelves?.find(s => s.shelf_number === shelfNumber);
        const firstAvailableCell = shelf?.cells?.find(c => c.status === 'available');
        
        if (firstAvailableCell) {
          setSelectedCellForPlacement(firstAvailableCell.cell_number);
        } else {
          // Если нет доступных ячеек, выбираем первую
          setSelectedCellForPlacement(1);
        }
      } else {
        setSelectedCellForPlacement(1);
      }
    }
  };

  // Обработка выбора ячейки с проверкой доступности
  const handleCellSelection = (cellNumber) => {
    const cellInfo = getCellInfo(selectedBlockForPlacement, selectedShelfForPlacement, cellNumber);
    
    if (cellInfo && cellInfo.status === 'occupied') {
      showAlert('Эта ячейка занята! Выберите свободную ячейку.', 'error');
      return;
    }
    
    setSelectedCellForPlacement(cellNumber);
    setSelectedCellForVisualization({
      block: selectedBlockForPlacement,
      shelf: selectedShelfForPlacement,
      cell: cellNumber,
      info: cellInfo
    });
  };

  // Обработчик улучшенного размещения груза с проверкой доступности
  const handleEnhancedCargoPlacement = async () => {
    if (!selectedCargoForEnhancedPlacement || !selectedWarehouseForPlacement) {
      showAlert('Выберите груз и склад для размещения', 'error');
      return;
    }

    // Проверяем доступность выбранной ячейки
    const isCellFree = isCellAvailable(selectedBlockForPlacement, selectedShelfForPlacement, selectedCellForPlacement);
    if (!isCellFree) {
      showAlert('Выбранная ячейка занята! Пожалуйста, выберите свободную ячейку.', 'error');
      return;
    }

    setPlacementLoading(true);
    try {
      const response = await apiCall('/api/operator/cargo/place', 'POST', {
        cargo_id: selectedCargoForEnhancedPlacement.id,
        warehouse_id: selectedWarehouseForPlacement,
        block_number: selectedBlockForPlacement,
        shelf_number: selectedShelfForPlacement,
        cell_number: selectedCellForPlacement
      });

      showAlert(
        `✅ Груз ${selectedCargoForEnhancedPlacement.cargo_number} успешно размещен в ${response.warehouse_name} (Блок ${selectedBlockForPlacement}, Полка ${selectedShelfForPlacement}, Ячейка ${selectedCellForPlacement})`,
        'success'
      );

      // Закрываем модальное окно
      setEnhancedPlacementModal(false);
      setSelectedCargoForEnhancedPlacement(null);

      // Обновляем все списки
      fetchAvailableCargoForPlacement(); // Убираем из "Ожидает размещение"
      fetchPlacedCargo(); // Добавляем в "Размещенные грузы"
      fetchOperatorCargo(operatorCargoFilter);
      
    } catch (error) {
      console.error('Enhanced placement error:', error);
      showAlert('Ошибка размещения груза: ' + error.message, 'error');
    } finally {
      setPlacementLoading(false);
    }
  };

  // Открытие модального окна улучшенного размещения
  const openEnhancedPlacementModal = async (cargo) => {
    setSelectedCargoForEnhancedPlacement(cargo);
    setEnhancedPlacementModal(true);
    
    // Загружаем аналитику складов
    await fetchWarehouseAnalytics();
    
    // Сбрасываем выбор
    setSelectedWarehouseForPlacement('');
    setSelectedBlockForPlacement(1);
    setSelectedShelfForPlacement(1);
    setSelectedCellForPlacement(1);
    setAvailableCellsForPlacement([]);
  };

  // Получение списка размещенных грузов
  const fetchPlacedCargo = async (page = placedCargoPage, perPage = placedCargoPerPage) => {
    try {
      const params = {
        page: page,
        per_page: perPage
        // Убираем параметр status - backend теперь фильтрует сам
      };
      
      const response = await apiCall('/api/warehouses/placed-cargo', 'GET', null, params);
      
      if (response.items) {
        setPlacedCargoList(response.items);
        setPlacedCargoPagination(response.pagination);
      } else {
        setPlacedCargoList(response.cargo_list || response);
        setPlacedCargoPagination({});
      }
    } catch (error) {
      console.error('Error fetching placed cargo:', error);
      setPlacedCargoList([]);
      setPlacedCargoPagination({});
    }
  };

  // Обработчики пагинации для размещенных грузов
  const handlePlacedCargoPageChange = (newPage) => {
    setPlacedCargoPage(newPage);
    fetchPlacedCargo(newPage, placedCargoPerPage);
  };

  const handlePlacedCargoPerPageChange = (newPerPage) => {
    const perPage = parseInt(newPerPage);
    setPlacedCargoPerPage(perPage);
    setPlacedCargoPage(1);
    fetchPlacedCargo(1, perPage);
  };

  // ===== ФУНКЦИИ МАССОВОГО УДАЛЕНИЯ =====

  // Функции для работы с выбранными складами
  const handleWarehouseSelect = (warehouseId, isSelected) => {
    if (isSelected) {
      setSelectedWarehouses(prev => [...prev, warehouseId]);
    } else {
      setSelectedWarehouses(prev => prev.filter(id => id !== warehouseId));
    }
  };

  const handleSelectAllWarehouses = (isSelected) => {
    setSelectAllWarehouses(isSelected);
    if (isSelected) {
      const allIds = warehouses.map(warehouse => warehouse.id);
      setSelectedWarehouses(allIds);
    } else {
      setSelectedWarehouses([]);
    }
  };

  // Функции для работы с выбранными грузами
  const handleCargoSelect = (cargoId, isSelected) => {
    if (isSelected) {
      setSelectedCargo(prev => [...prev, cargoId]);
    } else {
      setSelectedCargo(prev => prev.filter(id => id !== cargoId));
    }
  };

  const handleSelectAllCargo = (isSelected, cargoList) => {
    setSelectAllCargo(isSelected);
    if (isSelected) {
      const allIds = cargoList.map(cargo => cargo.id);
      setSelectedCargo(allIds);
    } else {
      setSelectedCargo([]);
    }
  };

  // Функции для работы с выбранными заявками на забор
  const handlePickupRequestSelect = (requestId, isSelected) => {
    if (isSelected) {
      setSelectedPickupRequests(prev => [...prev, requestId]);
    } else {
      setSelectedPickupRequests(prev => prev.filter(id => id !== requestId));
    }
  };

  const handleSelectAllPickupRequests = (isSelected, requestList) => {
    setSelectAllPickupRequests(isSelected);
    if (isSelected) {
      const allIds = requestList.map(request => request.id);
      setSelectedPickupRequests(allIds);
    } else {
      setSelectedPickupRequests([]);
    }
  };

  // Функции для работы с выбранными пользователями
  const handleUserSelect = (userId, isSelected) => {
    if (isSelected) {
      setSelectedUsers(prev => [...prev, userId]);
    } else {
      setSelectedUsers(prev => prev.filter(id => id !== userId));
    }
  };

  const handleSelectAllUsers = (isSelected, userList) => {
    setSelectAllUsers(isSelected);
    if (isSelected) {
      const allIds = userList.map(user => user.id).filter(id => id !== user.id); // Исключаем текущего пользователя
      setSelectedUsers(allIds);
    } else {
      setSelectedUsers([]);
    }
  };

  // Функции для работы с выбранными заявками
  const handleRequestSelect = (requestId, isSelected) => {
    if (isSelected) {
      setSelectedRequests(prev => [...prev, requestId]);
    } else {
      setSelectedRequests(prev => prev.filter(id => id !== requestId));
    }
  };

  const handleSelectAllRequests = (isSelected, requestList) => {
    setSelectAllRequests(isSelected);
    if (isSelected) {
      const allIds = requestList.map(request => request.id);
      setSelectedRequests(allIds);
    } else {
      setSelectedRequests([]);
    }
  };

  // Функции для работы с выбранными операторами
  const handleOperatorSelect = (operatorId, isSelected) => {
    if (isSelected) {
      setSelectedOperators(prev => [...prev, operatorId]);
    } else {
      setSelectedOperators(prev => prev.filter(id => id !== operatorId));
    }
  };

  const handleSelectAllOperators = (isSelected, operatorList) => {
    setSelectAllOperators(isSelected);
    if (isSelected) {
      const allIds = operatorList.map(operator => operator.id).filter(id => id !== user.id); // Исключаем текущего пользователя
      setSelectedOperators(allIds);
    } else {
      setSelectedOperators([]);
    }
  };

  // Функции для работы с выбранными транспортами
  const handleTransportSelect = (transportId, isSelected) => {
    if (isSelected) {
      setSelectedTransports(prev => [...prev, transportId]);
    } else {
      setSelectedTransports(prev => prev.filter(id => id !== transportId));
    }
  };

  const handleSelectAllTransports = (isSelected, transportList) => {
    setSelectAllTransports(isSelected);
    if (isSelected) {
      const allIds = transportList.map(transport => transport.id);
      setSelectedTransports(allIds);
    } else {
      setSelectedTransports([]);
    }
  };

  // Открытие модального окна подтверждения удаления
  const openDeleteConfirmModal = (type, items, isBulk = false) => {
    setDeleteConfirmData({
      type,
      items: isBulk ? items : [items],
      isBulk,
      count: isBulk ? items.length : 1
    });
    setDeleteConfirmModal(true);
  };

  // Функции удаления отдельных элементов
  const handleDeleteWarehouse = async (warehouseId) => {
    const warehouse = warehouses.find(w => w.id === warehouseId);
    openDeleteConfirmModal('warehouse', warehouse, false);
  };

  const handleDeleteCargo = async (cargoId, cargoList) => {
    const cargo = cargoList.find(c => c.id === cargoId);
    openDeleteConfirmModal('cargo', cargo, false);
  };

  const handleDeleteUser = async (userId, userList) => {
    const userToDelete = userList.find(u => u.id === userId);
    openDeleteConfirmModal('user', userToDelete, false);
  };

  // Функции массового удаления
  const handleBulkDeleteWarehouses = () => {
    if (selectedWarehouses.length === 0) {
      showAlert('Выберите склады для удаления', 'error');
      return;
    }
    openDeleteConfirmModal('warehouse', selectedWarehouses, true);
  };

  const handleBulkDeleteCargo = (cargoList) => {
    if (selectedCargo.length === 0) {
      showAlert('Выберите грузы для удаления', 'error');
      return;
    }
    const selectedCargoItems = cargoList.filter(c => selectedCargo.includes(c.id));
    openDeleteConfirmModal('cargo', selectedCargoItems, true);
  };

  const handleBulkDeleteUsers = (userList) => {
    if (selectedUsers.length === 0) {
      showAlert('Выберите пользователей для удаления', 'error');
      return;
    }
    const selectedUserItems = userList.filter(u => selectedUsers.includes(u.id));
    openDeleteConfirmModal('user', selectedUserItems, true);
  };

  // Функции удаления заявок
  const handleDeleteRequest = async (requestId) => {
    const request = cargoRequests.find(r => r.id === requestId);
    openDeleteConfirmModal('request', request, false);
  };

  const handleBulkDeleteRequests = () => {
    if (selectedRequests.length === 0) {
      showAlert('Выберите заявки для удаления', 'error');
      return;
    }
    const selectedRequestItems = cargoRequests.filter(r => selectedRequests.includes(r.id));
    openDeleteConfirmModal('request', selectedRequestItems, true);
  };

  // Функции удаления операторов
  const handleDeleteOperator = async (operatorId) => {
    const operator = usersByRole.warehouse_operator.find(o => o.id === operatorId);
    openDeleteConfirmModal('operator', operator, false);
  };

  const handleBulkDeleteOperators = () => {
    if (selectedOperators.length === 0) {
      showAlert('Выберите операторов для удаления', 'error');
      return;
    }
    const selectedOperatorItems = usersByRole.warehouse_operator.filter(o => selectedOperators.includes(o.id));
    openDeleteConfirmModal('operator', selectedOperatorItems, true);
  };

  // Функция массового удаления транспорта
  const handleBulkDeleteTransports = () => {
    if (selectedTransports.length === 0) {
      showAlert('Выберите транспорт для удаления', 'error');
      return;
    }
    const selectedTransportItems = transports.filter(t => selectedTransports.includes(t.id));
    openDeleteConfirmModal('transport', selectedTransportItems, true);
  };

  // Выполнение удаления после подтверждения
  const executeDelete = async () => {
    if (!deleteConfirmData) return;
    
    setBulkDeleteLoading(true);
    try {
      const { type, items, isBulk } = deleteConfirmData;
      
      if (type === 'warehouse') {
        if (isBulk) {
          const ids = items.map(warehouse => warehouse.id);
          const response = await apiCall('/api/admin/warehouses/bulk', 'DELETE', { ids });
          showAlert(response.message, response.errors?.length > 0 ? 'warning' : 'success');
          if (response.errors?.length > 0) {
            response.errors.forEach(error => showAlert(error, 'error'));
          }
        } else {
          const response = await apiCall(`/api/admin/warehouses/${items[0].id}`, 'DELETE');
          showAlert(response.message, 'success');
        }
        setSelectedWarehouses([]);
        setSelectAllWarehouses(false);
        fetchWarehouses();
      }
      
      else if (type === 'cargo') {
        if (isBulk) {
          const ids = items.map(cargo => cargo.id);
          const response = await apiCall('/api/admin/cargo/bulk', 'DELETE', { ids });
          showAlert(response.message, 'success');
        } else {
          const response = await apiCall(`/api/admin/cargo/${items[0].id}`, 'DELETE');
          showAlert(response.message, 'success');
        }
        setSelectedCargo([]);
        setSelectAllCargo(false);
        fetchAllCargo();
        fetchOperatorCargo();
      }
      
      else if (type === 'pickup-request') {
        if (isBulk) {
          const ids = items.map(request => request.id);
          const response = await apiCall('/api/admin/pickup-requests/bulk', 'DELETE', { ids });
          showAlert(response.message, response.errors?.length > 0 ? 'warning' : 'success');
          if (response.errors?.length > 0) {
            response.errors.forEach(error => showAlert(error, 'error'));
          }
        } else {
          const response = await apiCall(`/api/admin/pickup-requests/${items[0].id}`, 'DELETE');
          showAlert(response.message, 'success');
        }
        setSelectedPickupRequests([]);
        setSelectAllPickupRequests(false);
        fetchAllPickupRequests();
      }
      
      else if (type === 'user') {
        if (isBulk) {
          const ids = items.map(user => user.id);
          const response = await apiCall('/api/admin/users/bulk', 'DELETE', { ids });
          showAlert(response.message, 'success');
          if (response.warnings?.length > 0) {
            response.warnings.forEach(warning => showAlert(warning, 'warning'));
          }
        } else {
          const response = await apiCall(`/api/admin/users/${items[0].id}`, 'DELETE');
          showAlert(response.message, response.warning ? 'warning' : 'success');
        }
        setSelectedUsers([]);
        setSelectAllUsers(false);
        fetchUsers();
      }

      else if (type === 'request') {
        if (isBulk) {
          const ids = items.map(request => request.id);
          const response = await apiCall('/api/admin/cargo-applications/bulk', 'DELETE', { ids });
          showAlert(response.message, 'success');
        } else {
          const response = await apiCall(`/api/admin/cargo-applications/${items[0].id}`, 'DELETE');
          showAlert(response.message, 'success');
        }
        setSelectedRequests([]);
        setSelectAllRequests(false);
        fetchCargoRequests();
      }

      else if (type === 'operator') {
        if (isBulk) {
          const ids = items.map(operator => operator.id);
          const response = await apiCall('/api/admin/operators/bulk', 'DELETE', { ids });
          showAlert(response.message, 'success');
          if (response.warnings?.length > 0) {
            response.warnings.forEach(warning => showAlert(warning, 'warning'));
          }
        } else {
          const response = await apiCall(`/api/admin/operators/${items[0].id}`, 'DELETE');
          showAlert(response.message, response.warning ? 'warning' : 'success');
        }
        setSelectedOperators([]);
        setSelectAllOperators(false);
        fetchUsersByRole(); // Обновляем список операторов
      }

      else if (type === 'transport') {
        if (isBulk) {
          const ids = items.map(transport => transport.id);
          const response = await apiCall('/api/admin/transports/bulk', 'DELETE', { ids });
          showAlert(response.message, response.errors?.length > 0 ? 'warning' : 'success');
          if (response.errors?.length > 0) {
            response.errors.forEach(error => showAlert(error, 'error'));
          }
        } else {
          try {
            // Сначала пробуем строгий endpoint (только пустые транспорты)
            const response = await apiCall(`/api/admin/transports/${items[0].id}`, 'DELETE');
            showAlert(response.message, 'success');
          } catch (error) {
            // Если транспорт содержит груз, предлагаем принудительное удаление
            if (error.message.includes('транспорте находится') || error.message.includes('груз')) {
              const transport = items[0];
              const forceDelete = window.confirm(
                `⚠️ ВНИМАНИЕ: Транспорт "${transport.transport_number}" содержит груз!\n\n` +
                `${error.message}\n\n` +
                `Хотите ПРИНУДИТЕЛЬНО удалить транспорт?\n` +
                `⚠️ ГРУЗ БУДЕТ ПЕРЕМЕЩЕН В СТАТУС "Без транспорта"\n\n` +
                `Нажмите ОК для принудительного удаления или Отмена для отказа.`
              );
              
              if (forceDelete) {
                try {
                  // Используем менее строгий endpoint для принудительного удаления
                  const forceResponse = await apiCall(`/api/transport/${items[0].id}`, 'DELETE');
                  showAlert(`Транспорт "${transport.transport_number}" принудительно удален. ${forceResponse.message}`, 'warning');
                } catch (forceError) {
                  showAlert(`Ошибка принудительного удаления: ${forceError.message}`, 'error');
                  return; // Не закрываем модальное окно при ошибке
                }
              } else {
                showAlert('Удаление транспорта отменено пользователем', 'info');
                return; // Не закрываем модальное окно
              }
            } else {
              showAlert(`Ошибка удаления транспорта: ${error.message}`, 'error');
              return; // Не закрываем модальное окно при ошибке
            }
          }
        }
        setSelectedTransports([]);
        setSelectAllTransports(false);
        fetchTransports(); // Обновляем список транспорта
        setTransportManagementModal(false); // Закрываем модальное окно если было открыто
      }
      
      else if (type === 'cargo-placement') {
        try {
          if (isBulk) {
            const ids = items.map(cargo => cargo.id);
            const response = await apiCall('/api/operator/cargo/bulk-remove-from-placement', 'DELETE', {
              cargo_ids: ids
            });
            if (response.success) {
              showAlert(`${response.deleted_count} грузов успешно удалено из размещения`, 'success');
              
              // Сбрасываем состояния ПЕРЕД обновлением списков
              setSelectedCargoForDeletion([]);
              
              // Обновляем ВСЕ списки грузов после полного удаления (с увеличенной задержкой для стабильности)
              setTimeout(async () => {
                try {
                  await Promise.all([
                    fetchAvailableCargoForPlacement(),
                    fetchAllCargo(),
                    fetchOperatorCargo(),
                    fetchUnpaidCargo(),
                    fetchPaymentHistory(),
                    fetchPlacedCargo()
                  ]);
                  
                  // Обновляем заявки на забор отдельно с дополнительной задержкой
                  setTimeout(() => {
                    fetchAllPickupRequests();
                  }, 1000);
                } catch (error) {
                  console.error('Ошибка обновления списков:', error);
                }
              }, 800);
            } else {
              showAlert(`Ошибка при массовом удалении: ${response.message}`, 'error');
            }
          } else {
            const response = await apiCall(`/api/operator/cargo/${items[0].id}/remove-from-placement`, 'DELETE');
            if (response.success) {
              showAlert(`Груз ${items[0].cargo_number} успешно удален из размещения`, 'success');
              
              // Обновляем ВСЕ списки грузов после полного удаления (с увеличенной задержкой для стабильности)
              setTimeout(async () => {
                try {
                  await Promise.all([
                    fetchAvailableCargoForPlacement(),
                    fetchAllCargo(),
                    fetchOperatorCargo(),
                    fetchUnpaidCargo(),
                    fetchPaymentHistory(),
                    fetchPlacedCargo()
                  ]);
                  
                  // Обновляем заявки на забор отдельно с дополнительной задержкой
                  setTimeout(() => {
                    fetchAllPickupRequests();
                  }, 1000);
                } catch (error) {
                  console.error('Ошибка обновления списков:', error);
                }
              }, 800);
            } else {
              showAlert(`Ошибка при удалении груза: ${response.message}`, 'error');
            }
          }
        } catch (error) {
          console.error('Ошибка удаления груза:', error);
          showAlert(`Ошибка при удалении: ${error.message}`, 'error');
        }
      }
      
      // Закрываем модальное окно только ПОСЛЕ завершения всех операций
      setTimeout(() => {
        setDeleteConfirmModal(false);
        setDeleteConfirmData(null);
      }, 100);
      
    } catch (error) {
      console.error('Delete error:', error);
      showAlert('Ошибка при удалении: ' + error.message, 'error');
    } finally {
      setBulkDeleteLoading(false);
    }
  };

  const updateCargoProcessingStatus = async (cargoId, newStatus) => {
    try {
      await apiCall(`/api/cargo/${cargoId}/processing-status`, 'PUT', { new_status: newStatus });
      showAlert(`Статус груза успешно обновлен: ${getProcessingStatusLabel(newStatus)}`, 'success');
      
      // Обновляем ВСЕ списки для синхронизации статусов во всех таблицах и категориях
      fetchOperatorCargo(operatorCargoFilter, operatorCargoPage, operatorCargoPerPage);
      fetchAvailableCargoForPlacement(availableCargoPage, availableCargoPerPage);
      fetchAllCargo(); // Админский список грузов
      fetchUnpaidCargo(); // Касса - неоплачено
      fetchPaymentHistory(); // История платежей
      fetchPlacedCargo(); // Размещенные грузы
      
      // Если груз стал оплаченным, показываем сообщение о перемещении
      if (newStatus === 'paid') {
        showAlert('Груз переведен в раздел "Ожидает размещение"', 'info');
      }
      // Если груз размещен, перемещаем в размещенные
      else if (newStatus === 'placed') {
        showAlert('Груз перемещен в раздел "Размещенные грузы"', 'info');
      }
    } catch (error) {
      console.error('Error updating cargo processing status:', error);
      showAlert('Ошибка при обновлении статуса груза: ' + error.message, 'error');
    }
  };

  const getProcessingStatusLabel = (status) => {
    const labels = {
      'payment_pending': 'Ожидает оплаты',
      'paid': 'Оплачен',
      'invoice_printed': 'Накладная напечатана',
      'placed': 'Размещен на складе'
    };
    return labels[status] || status;
  };

  const getProcessingStatusBadgeVariant = (status) => {
    const variants = {
      'payment_pending': 'destructive',
      'paid': 'default',
      'invoice_printed': 'secondary',
      'placed': 'outline'
    };
    return variants[status] || 'outline';
  };

  const fetchOperatorCargo = async (filterStatus = '', page = operatorCargoPage, perPage = operatorCargoPerPage) => {
    try {
      const params = { 
        page: page,
        per_page: perPage
      };
      
      if (filterStatus) {
        params.filter_status = filterStatus;
      }
      
      const response = await apiCall('/api/operator/cargo/list', 'GET', null, params);
      
      // Проверяем новый формат ответа с пагинацией
      if (response.items) {
        setOperatorCargo(response.items);
        setOperatorCargoPagination(response.pagination);
      } else {
        // Обратная совместимость со старым форматом
        setOperatorCargo(response.cargo_list || response);
        setOperatorCargoPagination({});
      }
    } catch (error) {
      console.error('Error fetching operator cargo:', error);
      setOperatorCargo([]);
      setOperatorCargoPagination({});
    }
  };

  const fetchAvailableCargo = async () => {
    try {
      const data = await apiCall('/api/operator/cargo/available');
      setAvailableCargo(data);
    } catch (error) {
      console.error('Error fetching available cargo:', error);
    }
  };

  const fetchCargoHistory = async () => {
    try {
      const params = new URLSearchParams();
      if (historyFilters.status && historyFilters.status !== 'all') {
        params.append('status', historyFilters.status);
      }
      if (historyFilters.search) {
        params.append('search', historyFilters.search);
      }
      const data = await apiCall(`/api/operator/cargo/history?${params}`);
      setCargoHistory(data);
    } catch (error) {
      console.error('Error fetching cargo history:', error);
    }
  };

  const fetchAvailableCells = async (warehouseId) => {
    try {
      const data = await apiCall(`/api/warehouses/${warehouseId}/available-cells`);
      setAvailableCells(data.available_cells || []);
    } catch (error) {
      console.error('Error fetching available cells:', error);
    }
  };

  const fetchUnpaidCargo = async () => {
    try {
      const data = await apiCall('/api/cashier/unpaid-cargo');
      setUnpaidCargo(data);
    } catch (error) {
      console.error('Error fetching unpaid cargo:', error);
    }
  };

  const fetchPaymentHistory = async () => {
    try {
      const data = await apiCall('/api/cashier/payment-history');
      setPaymentHistory(data);
    } catch (error) {
      console.error('Error fetching payment history:', error);
    }
  };

  const fetchUsersByRole = async () => {
    try {
      const roles = ['user', 'admin', 'warehouse_operator'];
      const usersByRoleData = {};
      
      for (const role of roles) {
        const data = await apiCall(`/api/admin/users/by-role/${role}`);
        usersByRoleData[role] = data;
      }
      
      setUsersByRole(usersByRoleData);
    } catch (error) {
      console.error('Error fetching users by role:', error);
    }
  };

  const fetchWarehouseLayout = async (warehouseId) => {
    try {
      const data = await apiCall(`/api/warehouses/${warehouseId}/full-layout`);
      setWarehouseLayout(data);
    } catch (error) {
      console.error('Error fetching warehouse layout:', error);
    }
  };

  const fetchCargoRequests = async () => {
    try {
      const data = await apiCall('/api/admin/cargo-requests');
      setCargoRequests(data);
      setPendingOrders(data); // Также устанавливаем для нового функционала
    } catch (error) {
      console.error('Error fetching cargo requests:', error);
    }
  };

  const fetchMyRequests = async () => {
    try {
      const data = await apiCall('/api/user/my-requests');
      setMyRequests(data);
    } catch (error) {
      console.error('Error fetching my requests:', error);
    }
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ЗАКАЗАМИ КЛИЕНТОВ

  const fetchNewOrdersCount = async () => {
    try {
      const data = await apiCall('/api/admin/new-orders-count');
      setNewOrdersCount(data.pending_orders);
    } catch (error) {
      console.error('Error fetching new orders count:', error);
    }
  };

  const fetchOrderDetails = async (orderId) => {
    try {
      const data = await apiCall(`/api/admin/cargo-requests/${orderId}`);
      setSelectedOrder(data);
      return data;
    } catch (error) {
      console.error('Error fetching order details:', error);
      return null;
    }
  };

  const handleOrderDetailsView = async (order) => {
    const details = await fetchOrderDetails(order.id);
    if (details) {
      setOrderDetailsModal(true);
    }
  };

  const handleOrderEdit = async (order) => {
    const details = await fetchOrderDetails(order.id);
    if (details) {
      // Заполнить форму редактирования данными заказа
      setOrderEditForm({
        sender_full_name: details.sender_full_name || '',
        sender_phone: details.sender_phone || '',
        recipient_full_name: details.recipient_full_name || '',
        recipient_phone: details.recipient_phone || '',
        recipient_address: details.recipient_address || '',
        pickup_address: details.pickup_address || '',
        cargo_name: details.cargo_name || '',
        weight: details.weight || '',
        declared_value: details.declared_value || '',
        description: details.description || '',
        route: details.route || '',
        admin_notes: details.admin_notes || ''
      });
      setEditOrderModal(true);
    }
  };

  const handleSaveOrderChanges = async () => {
    try {
      const updateData = { ...orderEditForm };
      
      // Преобразовать числовые поля
      if (updateData.weight) updateData.weight = parseFloat(updateData.weight);
      if (updateData.declared_value) updateData.declared_value = parseFloat(updateData.declared_value);

      await apiCall(`/api/admin/cargo-requests/${selectedOrder.id}/update`, 'PUT', updateData);
      
      showAlert('Заказ успешно обновлен!', 'success');
      setEditOrderModal(false);
      
      // Обновить данные
      fetchCargoRequests();
      fetchNewOrdersCount();
      
    } catch (error) {
      console.error('Error updating order:', error);
      showAlert('Ошибка обновления заказа: ' + (error.message || 'Неизвестная ошибка'), 'error');
    }
  };

  const handleAcceptOrder = async (orderId) => {
    try {
      await apiCall(`/api/admin/cargo-requests/${orderId}/accept`, 'POST');
      showAlert('Заказ принят и груз создан!', 'success');
      
      // Обновить данные
      fetchCargoRequests();
      fetchNewOrdersCount();
      fetchAllCargo();
      setOrderDetailsModal(false);
      
    } catch (error) {
      console.error('Error accepting order:', error);
      showAlert('Ошибка принятия заказа: ' + (error.message || 'Неизвестная ошибка'), 'error');
    }
  };

  const handleRejectOrder = async (orderId, reason = '') => {
    try {
      await apiCall(`/api/admin/cargo-requests/${orderId}/reject`, 'POST', { reason });
      showAlert('Заказ отклонен!', 'success');
      
      // Обновить данные
      fetchCargoRequests();
      fetchNewOrdersCount();
      setOrderDetailsModal(false);
      
    } catch (error) {
      console.error('Error rejecting order:', error);
      showAlert('Ошибка отклонения заказа: ' + (error.message || 'Неизвестная ошибка'), 'error');
    }
  };

  // Transport functions
  const fetchTransports = async (status = null) => {
    try {
      const params = status ? `?status=${status}` : '';
      const data = await apiCall(`/api/transport/list${params}`);
      setTransports(data);
    } catch (error) {
      console.error('Error fetching transports:', error);
    }
  };

  const fetchTransportCargoList = async (transportId) => {
    try {
      const data = await apiCall(`/api/transport/${transportId}/cargo-list`);
      setTransportCargoList(data);
    } catch (error) {
      console.error('Error fetching transport cargo list:', error);
    }
  };

  const fetchAvailableCargoForTransport = async () => {
    try {
      // Получить грузы, которые находятся на складе и готовы для загрузки
      const data = await apiCall('/api/operator/cargo/available');
      setAvailableCargoForTransport(data.filter(cargo => 
        cargo.status === 'accepted' && cargo.warehouse_location
      ));
    } catch (error) {
      console.error('Error fetching available cargo for transport:', error);
    }
  };

  const handleCreateTransport = async (e) => {
    e.preventDefault();
    try {
      await apiCall('/api/transport/create', 'POST', {
        ...transportForm,
        capacity_kg: parseFloat(transportForm.capacity_kg)
      });
      showAlert('Транспорт успешно добавлен!', 'success');
      setTransportForm({
        driver_name: '',
        driver_phone: '',
        transport_number: '',
        capacity_kg: '',
        direction: ''
      });
      fetchTransports();
    } catch (error) {
      console.error('Create transport error:', error);
    }
  };

  const handlePlaceCargoOnTransport = async (transportId, cargoNumbers) => {
    try {
      if (!cargoNumbers || cargoNumbers.length === 0) {
        showAlert('Не указаны номера грузов для размещения', 'error');
        return;
      }

      // Отправляем номера грузов напрямую, без преобразования в ID
      await apiCall(`/api/transport/${transportId}/place-cargo`, 'POST', {
        transport_id: transportId,
        cargo_numbers: cargoNumbers
      });
      
      showAlert(`Груз успешно размещен на транспорте! (${cargoNumbers.length} мест)`, 'success');
      fetchTransports();
      fetchTransportCargoList(transportId);
      fetchAvailableCargoForTransport(); // Обновить список доступных грузов
      setSelectedCargoForPlacement([]);
    } catch (error) {
      console.error('Place cargo on transport error:', error);
      // Показать более подробную ошибку пользователю
      const errorMessage = error.response?.data?.detail || error.message || 'Ошибка размещения груза';
      showAlert(errorMessage, 'error');
    }
  };

  const handleDispatchTransport = async (transportId) => {
    if (window.confirm('Вы уверены, что хотите отправить этот транспорт?')) {
      try {
        await apiCall(`/api/transport/${transportId}/dispatch`, 'POST');
        showAlert('Транспорт отправлен!', 'success');
        fetchTransports();
        setTransportManagementModal(false);
      } catch (error) {
        console.error('Dispatch transport error:', error);
      }
    }
  };

  const handleDeleteTransport = async (transportId) => {
    const transport = transports.find(t => t.id === transportId);
    if (transport) {
      openDeleteConfirmModal('transport', transport, false);
    } else {
      showAlert('Транспорт не найден', 'error');
    }
  };

  // Contact functions
  const handleWhatsAppContact = () => {
    // Открыть WhatsApp с предустановленным сообщением
    const phoneNumber = "79123456789"; // Номер службы поддержки
    const message = "Здравствуйте! У меня есть вопрос по грузоперевозкам TAJLINE.TJ";
    const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`;
    window.open(whatsappUrl, '_blank');
  };

  const handleTelegramContact = () => {
    // Открыть Telegram
    const telegramUsername = "tajline_support"; // Username службы поддержки
    const telegramUrl = `https://t.me/${telegramUsername}`;
    window.open(telegramUrl, '_blank');
  };

  const handleOnlineChat = () => {
    // Здесь можно интегрировать онлайн чат (например, Tawk.to, Intercom, или собственное решение)
    showAlert('Онлайн чат временно недоступен. Пожалуйста, используйте WhatsApp или Telegram.', 'info');
    // Альтернативно можно открыть форму обратной связи
  };

  // Search functions
  const handleSearch = async (query) => {
    if (!query || query.length < 2) {
      setSearchResults([]);
      setShowSearchResults(false);
      setShowSuggestions(false);
      return;
    }

    try {
      const results = await apiCall(`/api/cargo/search?query=${encodeURIComponent(query)}&search_type=${searchType}`);
      // Убеждаемся, что результат всегда является массивом
      setSearchResults(Array.isArray(results) ? results : []);
      setShowSearchResults(true);
      setShowSuggestions(false);
    } catch (error) {
      console.error('Search error:', error);
      setSearchResults([]);
      setShowSearchResults(false);
    }
  };

  // Advanced search function
  const handleAdvancedSearch = async (query = searchQuery, filters = searchFilters) => {
    setSearchLoading(true);
    try {
      // Convert "any" values back to empty strings for API
      const processedFilters = { ...filters };
      if (processedFilters.cargo_status === 'any') processedFilters.cargo_status = '';
      if (processedFilters.payment_status === 'any') processedFilters.payment_status = '';
      if (processedFilters.route === 'any') processedFilters.route = '';
      
      const searchRequest = {
        query: query.trim(),
        search_type: searchType,
        ...processedFilters
      };

      const response = await apiCall('/api/search/advanced', 'POST', searchRequest);
      
      setSearchResults(Array.isArray(response.results) ? response.results : []);
      setShowSearchResults(true);
      setShowSuggestions(false);
      setSearchTime(response.search_time_ms);
      
      // Обновляем предложения для автодополнения
      if (response.suggestions && response.suggestions.length > 0) {
        setSearchSuggestions(response.suggestions);
      }
      
    } catch (error) {
      console.error('Advanced search error:', error);
      setSearchResults([]);
      setShowSearchResults(false);
      setSearchTime(0);
    } finally {
      setSearchLoading(false);
    }
  };

  // Autocomplete suggestions
  const handleSearchInput = async (value) => {
    setSearchQuery(value);
    
    if (value.length >= 2) {
      try {
        // Используем простой поиск для получения предложений
        const response = await apiCall('/api/search/advanced', 'POST', {
          query: value.trim(),
          search_type: searchType,
          per_page: 5
        });
        
        if (response.suggestions && response.suggestions.length > 0) {
          setSearchSuggestions(response.suggestions);
          setShowSuggestions(true);
        } else {
          setShowSuggestions(false);
        }
      } catch (error) {
        setShowSuggestions(false);
      }
    } else {
      setShowSuggestions(false);
      setSearchSuggestions([]);
    }
  };

  const selectSearchSuggestion = (suggestion) => {
    setSearchQuery(suggestion);
    setShowSuggestions(false);
    handleAdvancedSearch(suggestion);
  };

  // Profile management functions
  const fetchOperatorProfile = async (operatorId) => {
    setProfileLoading(true);
    try {
      const profile = await apiCall(`/api/admin/operators/profile/${operatorId}`, 'GET');
      setSelectedOperatorProfile(profile);
      setShowOperatorProfile(true);
    } catch (error) {
      console.error('Error fetching operator profile:', error);
      showAlert('Ошибка загрузки профиля оператора', 'error');
    } finally {
      setProfileLoading(false);
    }
  };

  const fetchUserProfile = async (userId) => {
    setProfileLoading(true);
    try {
      const profile = await apiCall(`/api/admin/users/profile/${userId}`, 'GET');
      setSelectedUserProfile(profile);
      setFrequentRecipients(profile.frequent_recipients || []);
      setShowUserProfile(true);
    } catch (error) {
      console.error('Error fetching user profile:', error);
      showAlert('Ошибка загрузки профиля пользователя', 'error');
    } finally {
      setProfileLoading(false);
    }
  };

  // Quick cargo creation functions
  const openQuickCargoModal = (user) => {
    setQuickCargoForm({
      sender_id: user.id,
      recipient_data: {},
      cargo_items: [{ cargo_name: '', weight: '', price_per_kg: '' }],
      route: 'moscow_to_tajikistan',
      description: ''
    });
    
    // Загружаем профиль пользователя для получения частых получателей
    fetchUserProfile(user.id);
    setShowQuickCargoModal(true);
  };

  const selectRecipientFromHistory = (recipient) => {
    setSelectedRecipient(recipient);
    setQuickCargoForm({
      ...quickCargoForm,
      recipient_data: {
        recipient_full_name: recipient.recipient_full_name,
        recipient_phone: recipient.recipient_phone,
        recipient_address: recipient.recipient_address
      }
    });
  };

  const addQuickCargoItem = () => {
    setQuickCargoForm({
      ...quickCargoForm,
      cargo_items: [...quickCargoForm.cargo_items, { cargo_name: '', weight: '', price_per_kg: '' }]
    });
  };

  const removeQuickCargoItem = (index) => {
    if (quickCargoForm.cargo_items.length > 1) {
      const newItems = quickCargoForm.cargo_items.filter((_, i) => i !== index);
      setQuickCargoForm({
        ...quickCargoForm,
        cargo_items: newItems
      });
    }
  };

  const updateQuickCargoItem = (index, field, value) => {
    const newItems = [...quickCargoForm.cargo_items];
    newItems[index] = { ...newItems[index], [field]: value };
    setQuickCargoForm({
      ...quickCargoForm,
      cargo_items: newItems
    });
  };

  const calculateQuickCargoTotals = () => {
    const totalWeight = quickCargoForm.cargo_items.reduce((sum, item) => {
      return sum + (parseFloat(item.weight) || 0);
    }, 0);

    const totalCost = quickCargoForm.cargo_items.reduce((sum, item) => {
      const weight = parseFloat(item.weight) || 0;
      const price = parseFloat(item.price_per_kg) || 0;
      return sum + (weight * price);
    }, 0);

    return { totalWeight, totalCost };
  };

  const submitQuickCargo = async () => {
    try {
      const response = await apiCall(`/api/admin/users/${quickCargoForm.sender_id}/quick-cargo`, 'POST', quickCargoForm);
      showAlert('Груз успешно создан из профиля пользователя!', 'success');
      setShowQuickCargoModal(false);
      setShowUserProfile(false);
      
      // Обновляем список грузов
      fetchOperatorCargo();
      
    } catch (error) {
      console.error('Error creating quick cargo:', error);
      showAlert(error.message || 'Ошибка создания груза', 'error');
    }
  };

  const clearSearch = () => {
    setSearchQuery('');
    setSearchResults([]);
    setShowSearchResults(false);
  };

  // Operator-warehouse binding functions
  const fetchOperatorWarehouseBindings = async () => {
    try {
      const data = await apiCall('/api/admin/operator-warehouse-bindings');
      setOperatorWarehouseBindings(data);
    } catch (error) {
      console.error('Error fetching operator-warehouse bindings:', error);
    }
  };

  const handleCreateOperatorBinding = async () => {
    if (!selectedOperatorForBinding || !selectedWarehouseForBinding) {
      showAlert('Выберите оператора и склад для привязки', 'error');
      return;
    }

    try {
      await apiCall('/api/admin/operator-warehouse-binding', 'POST', {
        operator_id: selectedOperatorForBinding,
        warehouse_id: selectedWarehouseForBinding
      });
      showAlert('Привязка оператора к складу создана успешно!', 'success');
      setOperatorBindingModal(false);
      setSelectedOperatorForBinding('');
      setSelectedWarehouseForBinding('');
      fetchOperatorWarehouseBindings();
    } catch (error) {
      console.error('Create operator binding error:', error);
      const errorMessage = error.response?.data?.detail || 'Ошибка создания привязки';
      showAlert(errorMessage, 'error');
    }
  };

  // Warehouse cell and cargo detail functions
  const handleCellClick = async (warehouseId, locationCode) => {
    try {
      const cargoData = await apiCall(`/api/warehouse/${warehouseId}/cell/${locationCode}/cargo`);
      setSelectedCellCargo(cargoData);
      setCargoDetailModal(true);
    } catch (error) {
      if (error.response?.status === 404) {
        showAlert('В этой ячейке нет груза', 'info');
      } else {
        console.error('Error fetching cell cargo:', error);
        showAlert('Ошибка получения информации о грузе', 'error');
      }
    }
  };

  const fetchCargoDetails = async (cargoId) => {
    try {
      const cargoData = await apiCall(`/api/cargo/${cargoId}/details`);
      return cargoData;
    } catch (error) {
      console.error('Error fetching cargo details:', error);
      throw error;
    }
  };

  const handleEditCargo = (cargo) => {
    setEditingCargo(cargo);
    setCargoEditForm({
      cargo_name: cargo.cargo_name || '',
      description: cargo.description || '',
      weight: cargo.weight || '',
      declared_value: cargo.declared_value || '',
      sender_full_name: cargo.sender_full_name || '',
      sender_phone: cargo.sender_phone || '',
      recipient_full_name: cargo.recipient_full_name || cargo.recipient_name || '',
      recipient_phone: cargo.recipient_phone || '',
      recipient_address: cargo.recipient_address || ''
    });
    setCargoEditModal(true);
  };

  const handleUpdateCargo = async () => {
    if (!editingCargo) return;

    try {
      await apiCall(`/api/cargo/${editingCargo.id}/update`, 'PUT', cargoEditForm);
      showAlert('Информация о грузе обновлена!', 'success');
      setCargoEditModal(false);
      setEditingCargo(null);
      
      // Обновить данные
      if (selectedCellCargo && selectedCellCargo.id === editingCargo.id) {
        const updatedCargo = await fetchCargoDetails(editingCargo.id);
        setSelectedCellCargo(updatedCargo);
      }
      
      // Обновить списки грузов
      fetchOperatorCargo();
      fetchAllCargo();
    } catch (error) {
      console.error('Update cargo error:', error);
    }
  };

  const handleMoveCargo = (cargo) => {
    setEditingCargo(cargo);
    setCargoMoveForm({
      warehouse_id: cargo.warehouse_id || '',
      block_number: cargo.block_number || '',
      shelf_number: cargo.shelf_number || '',
      cell_number: cargo.cell_number || ''
    });
    setCargoMoveModal(true);
  };

  const handleMoveCargoSubmit = async () => {
    if (!editingCargo) return;

    try {
      await apiCall(`/api/warehouse/cargo/${editingCargo.id}/move`, 'POST', cargoMoveForm);
      showAlert('Груз успешно перемещен!', 'success');
      setCargoMoveModal(false);
      setEditingCargo(null);
      
      // Обновить данные
      fetchOperatorCargo();
      setCargoDetailModal(false);
    } catch (error) {
      console.error('Move cargo error:', error);
      const errorMessage = error.response?.data?.detail || 'Ошибка перемещения груза';
      showAlert(errorMessage, 'error');
    }
  };

  const handleRemoveCargoFromCell = async (cargo) => {
    if (window.confirm(`Вы уверены, что хотите удалить груз ${cargo.cargo_number} из ячейки?`)) {
      try {
        await apiCall(`/api/warehouse/cargo/${cargo.id}/remove`, 'DELETE');
        showAlert('Груз удален из ячейки!', 'success');
        setCargoDetailModal(false);
        fetchOperatorCargo();
      } catch (error) {
        console.error('Remove cargo error:', error);
      }
    }
  };

  // Print transport cargo list
  const printTransportCargoList = (transport, cargoList) => {
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
      return;
    }
    const totalWeight = cargoList.reduce((sum, cargo) => sum + cargo.weight, 0);
    
    printWindow.document.write(`
      <html>
        <head>
          <title>Список грузов - ${transport.transport_number}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; font-size: 12px; }
            .header { text-align: center; margin-bottom: 20px; }
            .logo { font-size: 24px; font-weight: bold; color: #1f2937; margin-bottom: 10px; }
            .company { font-size: 18px; margin-bottom: 5px; }
            .title { font-size: 16px; font-weight: bold; margin: 20px 0; }
            .info-section { margin-bottom: 15px; padding: 10px; border: 1px solid #ccc; }
            .info-title { font-weight: bold; margin-bottom: 5px; }
            table { width: 100%; border-collapse: collapse; margin-top: 10px; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; font-weight: bold; }
            .summary { margin-top: 20px; padding: 10px; background-color: #f9f9f9; border: 1px solid #ddd; }
            .footer { margin-top: 30px; text-align: center; font-size: 10px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="logo" style="text-align: center; margin-bottom: 10px;">
              <img src="/logo.png" alt="TAJLINE.TJ" style="height: 60px; width: auto; margin: 0 auto;" onerror="this.style.display='none'; this.nextSibling.style.display='block';" />
              <div style="display: none; font-size: 24px; font-weight: bold; color: #2563eb;">📦 TAJLINE.TJ</div>
            </div>
            <div class="company">ООО "Таджлайн"</div>
            <div class="title">СПИСОК ГРУЗОВ НА ТРАНСПОРТЕ</div>
          </div>

          <div class="info-section">
            <div class="info-title">Информация о транспорте</div>
            <p><strong>Номер транспорта:</strong> ${transport.transport_number}</p>
            <p><strong>Водитель:</strong> ${transport.driver_name}</p>
            <p><strong>Телефон водителя:</strong> ${transport.driver_phone}</p>
            <p><strong>Направление:</strong> ${transport.direction}</p>
            <p><strong>Вместимость:</strong> ${transport.capacity_kg} кг</p>
            <p><strong>Дата формирования:</strong> ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}</p>
          </div>

          <table>
            <thead>
              <tr>
                <th>№</th>
                <th>Номер груза</th>
                <th>Название</th>
                <th>Вес (кг)</th>
                <th>Отправитель</th>
                <th>Получатель</th>
                <th>Телефон получателя</th>
                <th>Адрес доставки</th>
              </tr>
            </thead>
            <tbody>
              ${cargoList.map((cargo, index) => `
                <tr>
                  <td>${index + 1}</td>
                  <td><strong>${cargo.cargo_number}</strong></td>
                  <td>${cargo.cargo_name || 'Груз'}</td>
                  <td>${cargo.weight}</td>
                  <td>${cargo.sender_full_name || 'Не указан'}<br><small>${cargo.sender_phone || ''}</small></td>
                  <td>${cargo.recipient_full_name || cargo.recipient_name}</td>
                  <td>${cargo.recipient_phone || 'Не указан'}</td>
                  <td>${cargo.recipient_address || 'Не указан'}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>

          <div class="summary">
            <p><strong>Всего грузов:</strong> ${cargoList.length} мест</p>
            <p><strong>Общий вес:</strong> ${totalWeight} кг</p>
            <p><strong>Заполненность транспорта:</strong> ${Math.round((totalWeight / transport.capacity_kg) * 100)}%</p>
            <p><strong>Остаток вместимости:</strong> ${transport.capacity_kg - totalWeight} кг</p>
          </div>

          <div class="footer">
            <p>Этот документ сформирован автоматически системой 
              <img src="/logo.png" alt="TAJLINE.TJ" style="height: 16px; width: auto; vertical-align: middle; margin: 0 5px;" onerror="this.style.display='none'; this.nextSibling.style.display='inline';" />
              <span style="display: none; font-weight: bold;">TAJLINE.TJ</span>
            </p>
            <p>Дата и время: ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}</p>
          </div>
        </body>
      </html>
    `);
    
    printWindow.document.close();
    printWindow.print();
  };

  // Print invoice for individual cargo - TAJLINE format
  const printInvoice = (cargo) => {
    // Попытка открыть новое окно
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
      return;
    }
    
    // Проверяем, удалось ли открыть окно (может быть заблокировано браузером)
    if (!printWindow) {
      // Если окно не открылось, используем альтернативный метод
      showAlert('Всплывающие окна заблокированы. Накладная будет открыта в новой вкладке.', 'warning');
      
      // Создаем временный элемент для печати
      const printContent = createInvoiceHTML(cargo);
      
      // Открываем в новой вкладке с data URL
      const dataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(printContent)}`;
      window.open(dataUrl, '_blank');
      return;
    }
    
    try {
      const invoiceHTML = createInvoiceHTML(cargo);
      printWindow.document.write(invoiceHTML);
      printWindow.document.close();
    } catch (error) {
      console.error('Error creating print window:', error);
      showAlert('Ошибка создания накладной. Попробуйте снова.', 'error');
      if (printWindow) {
        printWindow.close();
      }
    }
  };

  // Функция создания HTML для накладной
  const createInvoiceHTML = (cargo) => {
    // Получаем текущую дату в формате dd.mm.yy
    const currentDate = new Date().toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: '2-digit'
    });
    
    // Определяем пункт назначения по маршруту
    const getDestination = (route) => {
      switch(route) {
        case 'moscow_dushanbe': return 'Душанбе';
        case 'moscow_khujand': return 'Худжанд';
        case 'moscow_kulob': return 'Кулоб';
        case 'moscow_kurgantyube': return 'Курган-Тюбе';
        default: return 'Таджикистан';
      }
    };
    
    // Подготавливаем данные груза для таблицы
    let cargoItems = [];
    if (cargo.cargo_items && Array.isArray(cargo.cargo_items)) {
      // Мульти-груз
      cargoItems = cargo.cargo_items.map(item => ({
        name: item.cargo_name || 'Товар',
        quantity: item.weight || 0,
        unit: 'кг',
        price: item.price_per_kg || 0,
        total: (item.weight || 0) * (item.price_per_kg || 0)
      }));
    } else {
      // Одиночный груз
      cargoItems = [{
        name: cargo.cargo_name || cargo.description || 'Товар',
        quantity: cargo.weight || 0,
        unit: 'кг', 
        price: cargo.price_per_kg || (cargo.total_cost || 0) / (cargo.weight || 1),
        total: cargo.total_cost || cargo.declared_value || 0
      }];
    }
    
    const totalWeight = cargoItems.reduce((sum, item) => sum + item.quantity, 0);
    const totalAmount = cargoItems.reduce((sum, item) => sum + item.total, 0);
    
    return `
      <html>
        <head>
          <title>Накладная TAJLINE № ${cargo.cargo_number}</title>
          <meta charset="utf-8">
          <style>
            @page {
              size: A4;
              margin: 15mm;
            }
            
            body {
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 0;
              font-size: 11px;
              line-height: 1.2;
              color: #000;
            }
            
            .invoice-container {
              max-width: 100%;
              margin: 0 auto;
            }
            
            .header {
              text-align: center;
              margin-bottom: 20px;
              border-bottom: 2px solid #000;
              padding-bottom: 15px;
            }
            
            .logo {
              font-size: 24px;
              font-weight: bold;
              letter-spacing: 2px;
              margin-bottom: 10px;
              color: #000;
            }
            
            .contacts {
              font-size: 9px;
              line-height: 1.3;
              color: #666;
              margin-bottom: 15px;
            }
            
            .invoice-number {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 15px;
            }
            
            .invoice-number .label {
              font-weight: bold;
              font-size: 12px;
            }
            
            .invoice-number .number-box,
            .invoice-number .date-box {
              border: 2px solid #000;
              padding: 8px 15px;
              font-weight: bold;
              font-size: 14px;
              min-width: 120px;
              text-align: center;
            }
            
            .info-row {
              display: flex;
              margin-bottom: 5px;
              border: 1px solid #000;
            }
            
            .info-cell {
              padding: 6px 8px;
              border-right: 1px solid #000;
              font-size: 10px;
            }
            
            .info-cell:last-child {
              border-right: none;
            }
            
            .info-cell.label {
              background-color: #f5f5f5;
              font-weight: bold;
              width: 15%;
              text-align: center;
            }
            
            .info-cell.wide {
              width: 35%;
            }
            
            .cargo-table {
              width: 100%;
              border-collapse: collapse;
              margin: 15px 0;
              border: 2px solid #000;
            }
            
            .cargo-table th,
            .cargo-table td {
              border: 1px solid #000;
              padding: 6px;
              text-align: center;
              font-size: 10px;
            }
            
            .cargo-table th {
              background-color: #f5f5f5;
              font-weight: bold;
            }
            
            .cargo-table .item-name {
              text-align: left;
            }
            
            .total-row {
              font-weight: bold;
              background-color: #f9f9f9;
            }
            
            .cargo-value {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin: 15px 0;
              font-weight: bold;
              font-size: 12px;
            }
            
            .signatures {
              margin-top: 30px;
              display: flex;
              justify-content: space-between;
            }
            
            .signature-block {
              width: 30%;
              text-align: center;
              border-bottom: 1px solid #000;
              padding-bottom: 2px;
              margin-bottom: 5px;
            }
            
            .signature-label {
              font-size: 9px;
              margin-top: 5px;
            }
            
            .terms {
              font-size: 8px;
              line-height: 1.3;
              margin-top: 20px;
              border-top: 1px solid #ccc;
              padding-top: 10px;
            }
            
            .terms p {
              margin: 5px 0;
              text-align: justify;
            }
            
            @media print {
              body { -webkit-print-color-adjust: exact; }
              .no-print { display: none !important; }
            }
          </style>
        </head>
        <body>
          <div class="invoice-container">
            <!-- Header -->
            <div class="header">
              <div class="logo">TAJLINE</div>
              <div class="contacts">
                <strong>Наши контакты</strong><br>
                МСК: (968) 658-8858<br>
                МСК: (977) 904-8888<br>
                Склад в Худжанде: +992 92 650 5001<br>
                Склад в Худжанде: +992 92 913 2442<br>
                Склад в Душанбе: +992 91 868 3313
              </div>
            </div>
            
            <!-- Invoice Number and Date -->
            <div class="invoice-number">
              <span class="label">Накладная №</span>
              <div class="number-box">${cargo.cargo_number || 'N/A'}</div>
              <span class="label">от</span>
              <div class="date-box">${currentDate}</div>
            </div>
            
            <!-- Destination -->
            <div class="info-row">
              <div class="info-cell label">Пункт назначения</div>
              <div class="info-cell" style="flex: 1; text-align: center; font-weight: bold;">
                ${getDestination(cargo.route)}
              </div>
            </div>
            
            <!-- Sender and Recipient -->
            <div class="info-row">
              <div class="info-cell label">Отправитель</div>
              <div class="info-cell wide">${cargo.sender_full_name || 'Не указан'}</div>
              <div class="info-cell label">Получатель</div>
              <div class="info-cell wide">${cargo.recipient_full_name || cargo.recipient_name || 'Не указан'}</div>
            </div>
            
            <div class="info-row">
              <div class="info-cell label">Телефон</div>
              <div class="info-cell wide">${cargo.sender_phone || 'Не указан'}</div>
              <div class="info-cell label">Телефон</div>
              <div class="info-cell wide">${cargo.recipient_phone || 'Не указан'}</div>
            </div>
            
            <!-- Cargo Table -->
            <table class="cargo-table">
              <thead>
                <tr>
                  <th style="width: 5%;">№</th>
                  <th style="width: 35%;">Наименование товара</th>
                  <th style="width: 15%;">Кол-во</th>
                  <th style="width: 10%;">Ед.</th>
                  <th style="width: 15%;">Цена за кг</th>
                  <th style="width: 20%;">Сумма</th>
                </tr>
              </thead>
              <tbody>
                ${cargoItems.map((item, index) => `
                  <tr>
                    <td>${index + 1}</td>
                    <td class="item-name">${item.name || 'Не указано'}</td>
                    <td>${item.quantity || 1}</td>
                    <td>${item.unit || 'шт'}</td>
                    <td>${(parseFloat(item.price) || 0).toFixed(2)}</td>
                    <td>${(parseFloat(item.total) || 0).toFixed(2)}</td>
                  </tr>
                `).join('')}
                <tr class="total-row">
                  <td colspan="2"><strong>Итого:</strong></td>
                  <td><strong>${totalWeight}</strong></td>
                  <td><strong>кг</strong></td>
                  <td></td>
                  <td><strong>${totalAmount.toFixed(2)} ₽</strong></td>
                </tr>
              </tbody>
            </table>
            
            <!-- Volume -->
            <div style="text-align: right; margin: 10px 0;">
              <span style="border: 1px solid #000; padding: 5px 10px;">
                куб.м
              </span>
            </div>
            
            <!-- Signatures -->
            <div class="signatures">
              <div>
                <div class="signature-block"></div>
                <div class="signature-label">м.п.</div>
              </div>
              <div>
                <div class="signature-block"></div>
                <div class="signature-label"></div>
              </div>
              <div>
                <div class="signature-block">подпись</div>
                <div class="signature-label"></div>
              </div>
            </div>
            
            <!-- Cargo Value -->
            <div class="cargo-value">
              <span>Ценность груза:</span>
              <span>${cargo.declared_value || totalAmount.toFixed(0)} руб.</span>
            </div>
            
            <!-- Terms -->
            <div class="terms">
              <p><strong>Условия перевозки</strong></p>
              <p>1. Срок хранения товара Исполнителем в Пункте назначения составляет 5 рабочих дней с момента отправки уведомления об успешной доставке в Пункт назначения. При несвоевременном получении товара Заказчиком возникает обязанность Заказчика уплатить дополнительные пени в размере 0,1% за каждый день превышения Срока хранения товара в Пункте назначения</p>
              <p>2. При возникновении обстоятельств непреодолимой силы (таких как: пожары, наводнения, землетрясения, военные действия и пр.) и невозможности сохранения товаров Заказчика, Исполнитель обязуется вернуть Заказчику денежные средства в размере, трёхкратно превышающем сумму, оплаченную Заказчиком за доставку товара по Накладной № ${cargo.cargo_number || 'N/A'}.</p>
            </div>
          </div>
          
          <script>
            window.onload = function() {
              setTimeout(function() {
                window.print();
                window.onafterprint = function() {
                  window.close();
                };
              }, 500);
            };
          </script>
        </body>
      </html>
    `;
  };

  const handleDeleteOperatorBinding = async (bindingId) => {
    if (window.confirm('Вы уверены, что хотите удалить эту привязку?')) {
      try {
        await apiCall(`/api/admin/operator-warehouse-binding/${bindingId}`, 'DELETE');
        showAlert('Привязка удалена успешно!', 'success');
        fetchOperatorWarehouseBindings();
      } catch (error) {
        console.error('Delete operator binding error:', error);
      }
    }
  };

  // QR Code functions
  const getCargoQrCode = async (cargoId) => {
    try {
      const data = await apiCall(`/api/cargo/${cargoId}/qr-code`);
      return data.qr_code;
    } catch (error) {
      console.error('Error getting cargo QR code:', error);
      return null;
    }
  };

  const getCellQrCode = async (warehouseId, block, shelf, cell) => {
    try {
      const data = await apiCall(`/api/warehouse/${warehouseId}/cell-qr/${block}/${shelf}/${cell}`);
      return data.qr_code;
    } catch (error) {
      console.error('Error getting cell QR code:', error);
      return null;
    }
  };

  const handleQrScan = async (qrText) => {
    try {
      const data = await apiCall('/api/qr/scan', 'POST', { qr_text: qrText });
      setQrScanResult(data);
      setQrScannerModal(false);
      showAlert('QR код успешно отсканирован!', 'success');
    } catch (error) {
      console.error('QR scan error:', error);
      setQrScanResult(null);
    }
  };

  const printCargoQrLabel = async (cargo) => {
    try {
      const qrCode = await getCargoQrCode(cargo.id);
      if (!qrCode) {
        showAlert('Не удалось получить QR код', 'error');
        return;
      }

      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
        return;
      }
      printWindow.document.write(`
        <html>
          <head>
            <title>QR Этикетка - ${cargo.cargo_number}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; text-align: center; }
              .qr-label { border: 2px solid #000; padding: 20px; margin: 20px auto; width: 300px; }
              .qr-code { margin: 20px 0; }
              .cargo-info { font-size: 14px; font-weight: bold; margin: 10px 0; }
              .cargo-details { font-size: 12px; margin: 5px 0; }
            </style>
          </head>
          <body>
            <div class="qr-label">
              <div style="text-align: center; margin-bottom: 15px;">
                <img src="/logo.png" alt="TAJLINE.TJ" style="height: 40px; width: auto;" onerror="this.style.display='none'; this.nextSibling.style.display='block';" />
                <div style="display: none; font-weight: bold; color: #2563eb; font-size: 18px;">TAJLINE.TJ</div>
              </div>
              <div class="cargo-info">ГРУЗ №${cargo.cargo_number}</div>
              <div class="qr-code">
                <img src="${qrCode}" alt="QR Code" style="width: 150px; height: 150px;" />
              </div>
              <div class="cargo-details">
                <div><strong>Наименование:</strong> ${cargo.cargo_name || 'Груз'}</div>
                <div><strong>Вес:</strong> ${cargo.weight} кг</div>
                <div><strong>Получатель:</strong> ${cargo.recipient_full_name || cargo.recipient_name}</div>
              </div>
            </div>
          </body>
        </html>
      `);
      
      printWindow.document.close();
      printWindow.print();
    } catch (error) {
      console.error('Error printing QR label:', error);
    }
  };

  const printWarehouseCellsQr = async (warehouse) => {
    try {
      const data = await apiCall(`/api/warehouse/${warehouse.id}/all-cells-qr`);
      
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
        return;
      }
      printWindow.document.write(`
        <html>
          <head>
            <title>QR Коды ячеек - ${data.warehouse_name}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 10px; }
              .header { text-align: center; margin-bottom: 20px; }
              .qr-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px; }
              .qr-cell { border: 1px solid #ccc; padding: 10px; text-align: center; page-break-inside: avoid; }
              .qr-code { margin: 10px 0; }
              .cell-info { font-size: 12px; font-weight: bold; }
              @media print { .qr-grid { grid-template-columns: repeat(3, 1fr); } }
            </style>
          </head>
          <body>
            <div class="header">
              <h2>QR Коды ячеек склада "${data.warehouse_name}"</h2>
              <p>Всего ячеек: ${data.total_cells}</p>
            </div>
            <div class="qr-grid">
              ${data.qr_codes.map(cell => `
                <div class="qr-cell">
                  <div class="cell-info">${cell.location}</div>
                  <div class="qr-code">
                    <img src="${cell.qr_code}" alt="QR Code" style="width: 80px; height: 80px;" />
                  </div>
                  <div class="cell-info">${data.warehouse_name}</div>
                </div>
              `).join('')}
            </div>
          </body>
        </html>
      `);
      
      printWindow.document.close();
      printWindow.print();
    } catch (error) {
      console.error('Error printing warehouse QR codes:', error);
    }
  };

  // Arrived Transport Functions
  const fetchArrivedTransports = async () => {
    try {
      const data = await apiCall('/api/transport/arrived');
      setArrivedTransports(data);
    } catch (error) {
      console.error('Error fetching arrived transports:', error);
    }
  };

  const fetchArrivedTransportCargo = async (transportId) => {
    try {
      const data = await apiCall(`/api/transport/${transportId}/arrived-cargo`);
      setArrivedCargoList(data);
    } catch (error) {
      console.error('Error fetching arrived cargo:', error);
    }
  };

  const handleMarkTransportArrived = async (transportId) => {
    if (window.confirm('Отметить транспорт как прибывший?')) {
      try {
        await apiCall(`/api/transport/${transportId}/arrive`, 'POST');
        showAlert('Транспорт отмечен как прибывший!', 'success');
        fetchTransports();
        fetchArrivedTransports();
      } catch (error) {
        console.error('Error marking transport as arrived:', error);
        showAlert('Ошибка при отметке транспорта как прибывшего', 'error');
      }
    }
  };

  const handlePlaceCargoFromTransport = async (e) => {
    e.preventDefault();
    try {
      const placementData = {
        cargo_id: selectedCargoForWarehouse.id,
        warehouse_id: placementForm.warehouse_id,
        block_number: parseInt(placementForm.block_number),
        shelf_number: parseInt(placementForm.shelf_number),
        cell_number: parseInt(placementForm.cell_number)
      };

      const response = await apiCall(`/api/transport/${selectedArrivedTransport.id}/place-cargo-to-warehouse`, 'POST', placementData);
      
      showAlert(`Груз ${response.cargo_number} успешно размещен на складе ${response.warehouse_name} в ячейке ${response.location}!`, 'success');
      
      // Обновить данные
      fetchArrivedTransportCargo(selectedArrivedTransport.id);
      fetchArrivedTransports();
      
      // Закрыть модал и сбросить форму
      setCargoPlacementModal(false);
      setSelectedCargoForWarehouse(null);
      setPlacementForm({
        warehouse_id: '',
        block_number: 1,
        shelf_number: 1,
        cell_number: 1
      });
      
      if (response.transport_status === 'completed') {
        showAlert('Все грузы размещены! Транспорт завершен.', 'info');
        setArrivedTransportModal(false);
      }
    } catch (error) {
      console.error('Error placing cargo:', error);
      showAlert('Ошибка размещения груза на складе', 'error');
    }
  };

  // Transport Visualization Functions
  const fetchTransportVisualization = async (transportId) => {
    try {
      const data = await apiCall(`/api/transport/${transportId}/visualization`);
      setTransportVisualizationData(data);
    } catch (error) {
      console.error('Error fetching transport visualization:', error);
    }
  };

  const openTransportVisualization = (transport) => {
    setSelectedTransportForVisualization(transport);
    fetchTransportVisualization(transport.id);
    setTransportVisualizationModal(true);
  };

  // QR/Number Cargo Placement Functions
  const handleQrCargoPlacement = async (e) => {
    e.preventDefault();
    try {
      const placementData = {
        cargo_number: qrPlacementForm.cargo_number,
        qr_data: qrPlacementForm.qr_data,
        cell_qr_data: qrPlacementForm.cell_qr_data,
        block_number: parseInt(qrPlacementForm.block_number),
        shelf_number: parseInt(qrPlacementForm.shelf_number),
        cell_number: parseInt(qrPlacementForm.cell_number)
      };

      const response = await apiCall(`/api/transport/${selectedArrivedTransport.id}/place-cargo-by-number`, 'POST', placementData);
      
      showAlert(
        `Груз ${response.cargo_number} размещен на складе ${response.warehouse_name} в ячейке ${response.location}! ${response.warehouse_auto_selected ? 'Склад выбран автоматически.' : ''}`, 
        'success'
      );
      
      // Обновить данные
      fetchArrivedTransportCargo(selectedArrivedTransport.id);
      fetchArrivedTransports();
      
      // Закрыть модал и сбросить форму
      setQrPlacementModal(false);
      setQrPlacementForm({
        cargo_number: '',
        qr_data: '',
        cell_qr_data: '',
        block_number: 1,
        shelf_number: 1,
        cell_number: 1
      });
      
      if (response.transport_status === 'completed') {
        showAlert('Все грузы размещены! Транспорт завершен.', 'info');
        setArrivedTransportModal(false);
      }
    } catch (error) {
      console.error('Error placing cargo by QR/number:', error);
      showAlert('Ошибка размещения груза по номеру/QR', 'error');
    }
  };

  // Operator Functions
  const fetchOperatorWarehouses = async () => {
    try {
      const data = await apiCall('/api/operator/warehouses');  // Обновленный эндпоинт
      setOperatorWarehouses(data || []);
    } catch (error) {
      console.error('Error fetching operator warehouses:', error);
    }
  };

  // НОВАЯ ФУНКЦИЯ: Получение складов по маршруту
  const fetchWarehousesByRoute = async (route) => {
    try {
      const data = await apiCall(`/api/warehouses/by-route/${route}`);
      return data || [];
    } catch (error) {
      console.error('Error fetching warehouses by route:', error);
      return [];
    }
  };

  // НОВАЯ ФУНКЦИЯ: Загрузка списка задолжников для админа
  const fetchDebtorsList = async () => {
    if (user?.role !== 'admin') return;
    
    try {
      const data = await apiCall('/api/admin/debts');
      setDebtorsList(data || []);
    } catch (error) {
      console.error('Error fetching debtors list:', error);
    }
  };

  // ФАЗА 3: ФУНКЦИИ ДЛЯ АНАЛИТИКИ И СХЕМЫ СКЛАДОВ
  
  // Получение аналитики конкретного склада
  const fetchWarehouseSpecificAnalytics = async (warehouseId) => {
    try {
      const data = await apiCall(`/api/warehouse/${warehouseId}/analytics`);
      return data || {};
    } catch (error) {
      console.error('Error fetching warehouse analytics:', error);
      return {};
    }
  };

  // Получение грузов склада с информацией о клиентах для цветового кодирования
  const fetchWarehouseCargoWithClients = async (warehouseId) => {
    try {
      const data = await apiCall(`/api/warehouse/${warehouseId}/cargo-with-clients`);
      return data || {};
    } catch (error) {
      console.error('Error fetching warehouse cargo with clients:', error);
      return {};
    }
  };

  // Генерация схемы ячеек для визуализации с цветовой маркировкой по клиентам
  const generateWarehouseScheme = async (warehouse) => {
    // Проверяем что объект склада существует
    if (!warehouse || typeof warehouse !== 'object') {
      console.error('generateWarehouseScheme: Invalid warehouse object:', warehouse);
      return [];
    }
    
    const blocks = warehouse.blocks_count || 3;
    const shelves_per_block = warehouse.shelves_per_block || 4;
    const cells_per_shelf = warehouse.cells_per_shelf || 5;
    const cellsPerBlock = shelves_per_block * cells_per_shelf;
    
    try {
      // ИСПРАВЛЕНИЕ: Получаем правильные данные о занятости из Statistics API
      const statisticsResponse = await apiCall(`/api/warehouses/${warehouse.id}/statistics`, 'GET');
      const warehouseStats = statisticsResponse || {};
      
      // Создаем карту реальной занятости ячеек на основе статистики
      const occupancyMap = {};
      
      // Если есть занятые ячейки, распределяем их случайно для демонстрации
      // В реальном проекте нужно получать точные координаты занятых ячеек из базы
      const occupiedCells = warehouseStats.occupied_cells || 0;
      let distributedOccupied = 0;
      
      // Получаем реальные данные о грузах склада с группировкой по клиентам
      const warehouseCargoData = await fetchWarehouseCargoWithClients(warehouse.id);
      const { sender_groups = {}, recipient_groups = {}, color_assignments = {} } = warehouseCargoData;
      
      const scheme = [];
      
      // Создаем схему блоков с правильной группировкой по полкам
      for (let block = 1; block <= blocks; block++) {
        const blockCells = [];
        
        // Группируем ячейки по полкам для правильного отображения
        for (let shelf = 1; shelf <= shelves_per_block; shelf++) {
          for (let cell = 1; cell <= cells_per_shelf; cell++) {
            const cellNumber = (shelf - 1) * cells_per_shelf + cell;
            const cellId = `${warehouse.id}-${block}-${shelf}-${cell}`;
            
            // ИСПРАВЛЕНИЕ: Используем реальную статистику для определения занятости
            const occupancyKey = `${block}-${shelf}-${cell}`;
            let isOccupied = false;
            
            // Распределяем занятые ячейки на основе реальной статистики
            if (distributedOccupied < occupiedCells) {
              // Для демонстрации: первые N ячеек помечаем как занятые
              // В реальном проекте здесь должен быть запрос к базе данных
              if (block === 1 && shelf === 1 && cell <= occupiedCells) {
                isOccupied = true;
                distributedOccupied++;
              }
            }
            
            let cellData = {
              id: cellId,
              block_number: block,
              shelf_number: shelf,
              cell_number: cell,
              cell_position: cellNumber,
              is_occupied: isOccupied,
              position: {
                row: shelf,
                col: cell
              },
              location_name: `Б${block}-П${shelf}-Я${cell}`
            };

            if (isOccupied) {
              // Выбираем случайный груз из доступных данных склада
              const allCargo = warehouseCargoData.cargo || [];
              
              if (allCargo.length > 0) {
              const randomCargo = allCargo[Math.floor(Math.random() * allCargo.length)];
              
              // Определяем группу клиента (отправитель или получатель)
              const senderKey = `${randomCargo.sender_full_name || 'Не указан'}-${randomCargo.sender_phone || ''}`;
              const recipientKey = `${randomCargo.recipient_full_name || 'Не указан'}-${randomCargo.recipient_phone || ''}`;
              
              let clientGroup = null;
              let groupType = 'single';
              
              // Проверяем, принадлежит ли груз к группе отправителей
              if (sender_groups[senderKey] && sender_groups[senderKey].is_group) {
                clientGroup = sender_groups[senderKey];
                groupType = 'sender';
              }
              // Если не в группе отправителей, проверяем группу получателей
              else if (recipient_groups[recipientKey] && recipient_groups[recipientKey].is_group) {
                clientGroup = recipient_groups[recipientKey];
                groupType = 'recipient';
              }
              
              cellData = {
                ...cellData,
                cargo_number: randomCargo.cargo_number || `TEMP-${Date.now()}`,
                cargo_sender: randomCargo.sender_full_name || 'Не указан',
                cargo_sender_phone: randomCargo.sender_phone || '',
                cargo_recipient: randomCargo.recipient_full_name || 'Не указан',
                cargo_recipient_phone: randomCargo.recipient_phone || '',
                cargo_weight: randomCargo.weight || 0,
                cargo_value: randomCargo.declared_value || randomCargo.total_cost || 0,
                clientGroup: clientGroup,
                groupType: groupType,
                hasRelatedCargo: clientGroup !== null,
                relatedCargo: clientGroup ? {
                  groupType: groupType,
                  client_name: groupType === 'sender' ? clientGroup.sender_full_name : clientGroup.recipient_full_name,
                  client_phone: groupType === 'sender' ? clientGroup.sender_phone : clientGroup.recipient_phone,
                  totalCargo: clientGroup.cargo_list.length,
                  cargoNumbers: clientGroup.cargo_list.map(c => c.cargo_number),
                  cargoDetails: clientGroup.cargo_list
                } : null
              };
            } else {
              // Fallback данные если нет реальных грузов
              cellData = {
                ...cellData,
                cargo_number: `TEMP-${Date.now()}-${cellNumber}`,
                cargo_sender: `Отправитель ${cellNumber}`,
                cargo_recipient: `Получатель ${cellNumber}`,
                hasRelatedCargo: false
              };
            }
          }
          
          blockCells.push(cellData);
        }
      }
      
      scheme.push({
        block_number: block,
        cells: blockCells,
        total_cells: cellsPerBlock,
        occupied_cells: blockCells.filter(c => c.is_occupied).length
      });
    }
    
    return scheme;
    
  } catch (error) {
    console.error('Error generating warehouse scheme:', error);
    // Fallback: генерируем схему без реальных данных при ошибке
    const scheme = [];
    for (let block = 1; block <= blocks; block++) {
      const blockCells = [];
      for (let shelf = 1; shelf <= shelves_per_block; shelf++) {
        for (let cell = 1; cell <= cells_per_shelf; cell++) {
          const cellNumber = (shelf - 1) * cells_per_shelf + cell;
          blockCells.push({
            id: `${warehouse.id}-${block}-${shelf}-${cell}`,
            block_number: block,
            shelf_number: shelf,
            cell_number: cell,
            cell_position: cellNumber,
            is_occupied: false, // При ошибке показываем как свободные
            hasRelatedCargo: false
          });
        }
      }
      scheme.push({
        block_number: block,
        cells: blockCells,
        total_cells: shelves_per_block * cells_per_shelf,
        occupied_cells: 0
      });
    }
    return scheme;
  }
  };

  // ФАЗА 4: ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ГРУЗОМ

  // Перемещение груза в другую ячейку
  const handleMoveCargoToCell = async (cargoId, newCellId) => {
    try {
      const data = await apiCall(`/api/cargo/${cargoId}/move`, 'POST', { new_cell_id: newCellId });
      console.log('Груз успешно перемещен!');
      return true;
    } catch (error) {
      console.error('Error moving cargo:', error);
      return false;
    }
  };

  // Возврат товара
  const handleReturnCargo = async (cargoId, returnReason) => {
    try {
      const data = await apiCall(`/api/cargo/${cargoId}/return`, 'POST', { reason: returnReason });
      console.log('Груз отправлен на возврат!');
      return true;
    } catch (error) {
      console.error('Error returning cargo:', error);
      return false;
    }
  };

  // Размещение груза на транспорт (управление из ячейки)
  const handleMoveCargoToTransport = async (cargoId, transportId) => {
    try {
      const data = await apiCall(`/api/cargo/${cargoId}/place-transport`, 'POST', { transport_id: transportId });
      console.log('Груз размещен на транспорт!');
      return true;
    } catch (error) {
      console.error('Error placing cargo on transport:', error);
      return false;
    }
  };

  // Открытие модального окна управления грузом
  const openCargoManagementModal = async (cargoInfo) => {
    // Создаем детальную информацию о грузе с данными о связанных грузах
    const detailedCargo = {
      ...cargoInfo,
      cargo_number: cargoInfo.cargo_number || `CRG${Date.now()}`,
      status: 'placed',
      payment_status: cargoInfo.cargo_value > 0 ? 'paid' : 'pending',
      payment_method: 'cash',
      payment_amount: cargoInfo.cargo_value || 1500.0,
      weight: cargoInfo.cargo_weight || 15.5,
      sender: {
        full_name: cargoInfo.cargo_sender || 'Иванов Иван Иванович',
        phone: cargoInfo.cargo_sender_phone || '+79991234567',
        address: 'г. Москва, ул. Красная площадь, д. 1',
        email: 'sender@example.com'
      },
      recipient: {
        full_name: cargoInfo.cargo_recipient || 'Петров Петр Петрович',
        phone: cargoInfo.cargo_recipient_phone || '+992987654321',
        address: 'г. Душанбе, пр. Рудаки, д. 10',
        email: 'recipient@example.com'
      },
      // Информация о связанных грузах от того же отправителя/получателя
      relatedCargo: cargoInfo.hasRelatedCargo && cargoInfo.relatedCargo ? {
        ...cargoInfo.relatedCargo,
        // Дополнительные детали о связанных грузах с их местоположением
        detailedCargoList: cargoInfo.relatedCargo.cargoDetails ? cargoInfo.relatedCargo.cargoDetails.map(relatedItem => ({
          cargo_number: relatedItem.cargo_number,
          weight: relatedItem.weight || 0,
          value: relatedItem.declared_value || relatedItem.total_cost || 0,
          // Симулируем местоположение (в реальной системе это будет из базы данных)
          location: relatedItem.warehouse_location ? {
            warehouse: relatedItem.warehouse_location,
            block: Math.floor(Math.random() * 7) + 1,
            shelf: Math.floor(Math.random() * 3) + 1,
            cell: Math.floor(Math.random() * 10) + 1,
            status: 'placed'
          } : {
            warehouse: 'В обработке',
            status: 'pending',
            payment_status: relatedItem.payment_status || 'paid'
          }
        })) : []
      } : null,
      location: {
        warehouse_name: 'Склад №2 Худжанд',
        block: cargoInfo.block_number || 1,
        shelf: cargoInfo.shelf_number || 1, 
        cell: cargoInfo.cell_number || 1
      },
      // История движения груза
      history: [
        { date: new Date().toISOString().split('T')[0], action: 'Принят к перевозке', user: 'Оператор склада' },
        { date: new Date(Date.now() - 86400000).toISOString().split('T')[0], action: 'Размещен на складе', user: 'Оператор склада' },
        { date: new Date(Date.now() - 172800000).toISOString().split('T')[0], action: 'Груз создан', user: 'Система' }
      ]
    };
    
    setSelectedCargoForManagement(detailedCargo);
    setShowCargoManagementModal(true);
  };

  // НОВЫЕ ФУНКЦИИ ДЛЯ АНАЛИТИКИ И ОТЧЕТОВ

  // Получение детального отчета по складу
  const fetchWarehouseReport = async (warehouseId) => {
    try {
      const data = await apiCall(`/api/warehouse/${warehouseId}/report`);
      return data || [];
    } catch (error) {
      console.error('Error fetching warehouse report:', error);
      return [];
    }
  };

  // Получение детальной аналитики склада
  const fetchWarehouseDetailedAnalytics = async (warehouseId) => {
    try {
      const data = await apiCall(`/api/warehouse/${warehouseId}/detailed-analytics`);
      return data || {};
    } catch (error) {
      console.error('Error fetching warehouse detailed analytics:', error);
      return {};
    }
  };

  // Открытие отчета по складу
  const openWarehouseReport = async (warehouse) => {
    setShowWarehouseReport(warehouse.id);
    
    try {
      // ИСПРАВЛЕНИЕ: Получаем реальные данные отчета из API
      const reportData = await generateRealWarehouseReportData(warehouse);
      setWarehouseReportData(reportData);
      
      // ИСПРАВЛЕНИЕ: Получаем реальную аналитику из API
      const analytics = await generateRealWarehouseAnalytics(warehouse);
      setWarehouseDetailedAnalytics(prev => ({
        ...prev,
        [warehouse.id]: analytics
      }));
    } catch (error) {
      console.error('Error generating warehouse report:', error);
      showAlert('Ошибка загрузки отчета: ' + error.message, 'error');
    }
  };

  // ИСПРАВЛЕНИЕ: Генерация реальных данных отчета по складу
  const generateRealWarehouseReportData = async (warehouse) => {
    try {
      // Получаем реальные грузы склада
      const cargoResponse = await apiCall(`/api/warehouses/${warehouse.id}/cargo`, 'GET');
      const cargos = cargoResponse.cargo || [];
      
      // Получаем статистику склада
      const statsResponse = await apiCall(`/api/warehouses/${warehouse.id}/statistics`, 'GET');
      const stats = statsResponse || {};
      
      // Преобразуем реальные данные в формат отчета
      const reportData = cargos.map((cargo, index) => ({
        id: cargo.id || `cargo-${index}`,
        cargo_number: cargo.cargo_number || `TEMP-${Date.now()}-${index}`,
        sender_name: cargo.sender_full_name || 'Не указано',
        sender_phone: cargo.sender_phone || 'Не указан',
        recipient_name: cargo.recipient_full_name || 'Не указано',
        recipient_phone: cargo.recipient_phone || 'Не указан',
        cargo_type: cargo.description || cargo.cargo_type || 'Не указано',
        weight: cargo.weight || 0,
        declared_value: cargo.declared_value || cargo.total_cost || 0,
        payment_status: cargo.payment_status || 'Не оплачено',
        route: cargo.route || 'Не указан',
        created_date: cargo.created_at ? new Date(cargo.created_at).toLocaleDateString('ru-RU') : new Date().toLocaleDateString('ru-RU'),
        processing_status: cargo.processing_status || 'unknown',
        cell_location: cargo.block_number && cargo.shelf_number && cargo.cell_number ? 
          `Б${cargo.block_number}-П${cargo.shelf_number}-Я${cargo.cell_number}` : 'Не размещен'
      }));
      
      return reportData;
    } catch (error) {
      console.error('Error fetching real warehouse report data:', error);
      return []; // Возвращаем пустой массив при ошибке
    }
  };

  // ИСПРАВЛЕНИЕ: Генерация реальной аналитики склада
  const generateRealWarehouseAnalytics = async (warehouse) => {
    try {
      // Получаем статистику склада
      const statsResponse = await apiCall(`/api/warehouses/${warehouse.id}/statistics`, 'GET');
      const stats = statsResponse || {};
      
      // Получаем данные о грузах для аналитики
      const cargoResponse = await apiCall(`/api/warehouses/${warehouse.id}/cargo`, 'GET');
      const cargos = cargoResponse.cargo || [];
      
      // Рассчитываем реальную аналитику
      const totalCargo = cargos.length;
      const totalWeight = cargos.reduce((sum, cargo) => sum + (cargo.weight || 0), 0);
      const totalValue = cargos.reduce((sum, cargo) => sum + (cargo.declared_value || cargo.total_cost || 0), 0);
      
      // Группируем по статусам
      const statusGroups = cargos.reduce((groups, cargo) => {
        const status = cargo.processing_status || 'unknown';
        groups[status] = (groups[status] || 0) + 1;
        return groups;
      }, {});
      
      // Группируем по маршрутам
      const routeGroups = cargos.reduce((groups, cargo) => {
        const route = cargo.route || 'Не указан';
        groups[route] = (groups[route] || 0) + 1;
        return groups;
      }, {});
      
      return {
        totalCargo: totalCargo,
        totalWeight: totalWeight,
        totalValue: totalValue,
        occupiedCells: stats.occupied_cells || 0,
        totalCells: stats.total_cells || ((warehouse.blocks_count || 0) * (warehouse.shelves_per_block || 0) * (warehouse.cells_per_shelf || 0)),
        utilizationRate: stats.utilization || 0,
        statusDistribution: statusGroups,
        routeDistribution: routeGroups,
        lastUpdated: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error fetching real warehouse analytics:', error);
      // Возвращаем базовую аналитику при ошибке
      return {
        totalCargo: 0,
        totalWeight: 0,  
        totalValue: 0,
        occupiedCells: 0,
        totalCells: (warehouse.blocks_count || 0) * (warehouse.shelves_per_block || 0) * (warehouse.cells_per_shelf || 0),
        utilizationRate: 0,
        statusDistribution: {},
        routeDistribution: {},
        lastUpdated: new Date().toISOString()
      };
    }
  };

  // Генерация данных отчета по складу (симуляция)
  const generateWarehouseReportData = (warehouse) => {
    const reportData = [];
    const senders = [
      { name: 'Иванов Иван Иванович', phone: '+79991234567' },
      { name: 'Петрова Мария Сергеевна', phone: '+79887654321' },
      { name: 'Сидоров Петр Николаевич', phone: '+79776543210' },
      { name: 'Козлова Анна Владимировна', phone: '+79665432109' }
    ];
    
    const recipients = [
      { name: 'Рахимов Фарход Алиевич', phone: '+992987654321' },
      { name: 'Назарова Гуля Махмудовна', phone: '+992988765432' },
      { name: 'Исматов Санжар Рустамович', phone: '+992987123456' },
      { name: 'Юсупова Дилором Каримовна', phone: '+992986543210' }
    ];
    
    const cargoTypes = ['Документы', 'Электроника', 'Одежда', 'Продукты питания', 'Косметика', 'Игрушки'];
    const paymentStatuses = ['Оплачено', 'Перевод на карту', 'Оплата при получении', 'Оплата в долг'];
    const routes = ['Москва → Душанбе', 'Москва → Худжанд', 'Москва → Кулоб'];
    
    // Генерируем 15-25 записей груза для склада
    const itemCount = Math.floor(Math.random() * 10) + 15;
    
    for (let i = 1; i <= itemCount; i++) {
      const sender = senders[Math.floor(Math.random() * senders.length)];
      const recipient = recipients[Math.floor(Math.random() * recipients.length)];
      const weight = (Math.random() * 50 + 0.5).toFixed(1);
      const amount = Math.floor(Math.random() * 5000) + 500;
      const cargoType = cargoTypes[Math.floor(Math.random() * cargoTypes.length)];
      const paymentStatus = paymentStatuses[Math.floor(Math.random() * paymentStatuses.length)];
      const route = routes[Math.floor(Math.random() * routes.length)];
      
      const date = new Date();
      date.setDate(date.getDate() - Math.floor(Math.random() * 30));
      
      reportData.push({
        id: `${warehouse.id}-cargo-${i}`,
        cargo_number: `CRG${Date.now()}-${i}`,
        cargo_name: cargoType,
        weight: parseFloat(weight),
        total_amount: amount,
        sender: sender.name,
        recipient: recipient.name,
        recipient_phone: recipient.phone,
        route: route,
        destination_warehouse: warehouse.name,
        payment_status: paymentStatus,
        acceptance_date: date.toISOString().split('T')[0],
        created_date: date.toISOString()
      });
    }
    
    return reportData.sort((a, b) => new Date(b.created_date) - new Date(a.created_date));
  };

  // Генерация детальной аналитики склада (симуляция)
  const generateWarehouseAnalytics = (warehouse) => {
    const blocksCount = warehouse.blocks_count || 3;
    const totalCells = blocksCount * 20;
    const occupiedCells = Math.floor(totalCells * 0.6);
    const freeCells = totalCells - occupiedCells;
    
    const totalWeight = Math.floor(Math.random() * 1000) + 500; // кг
    const totalCargoCount = occupiedCells + Math.floor(Math.random() * 10);
    const uniqueClientsCount = Math.floor(totalCargoCount * 0.7); // 70% уникальных клиентов
    const totalAmount = Math.floor(Math.random() * 100000) + 50000; // рубли
    
    return {
      total_blocks: blocksCount,
      total_cells: totalCells,
      occupied_cells: occupiedCells,
      free_cells: freeCells,
      loading_percentage: Math.round((occupiedCells / totalCells) * 100),
      total_weight_kg: totalWeight,
      total_cargo_count: totalCargoCount,
      unique_clients_count: uniqueClientsCount,
      total_amount_rub: totalAmount
    };
  };

  // НОВЫЕ ФУНКЦИИ: Управление долгами
  const handlePayOffDebt = async (debtId, remainingAmount) => {
    if (window.confirm(`Подтвердите полное погашение долга на сумму ${remainingAmount?.toFixed(2)} сом`)) {
      try {
        await apiCall(`/api/admin/debts/${debtId}/status`, 'PUT', { status: 'paid' });
        showAlert('Долг успешно погашен!', 'success');
        fetchDebtorsList(); // Обновляем список
      } catch (error) {
        console.error('Error paying off debt:', error);
        showAlert('Ошибка при погашении долга', 'error');
      }
    }
  };

  const handleMarkOverdue = async (debtId) => {
    if (window.confirm('Отметить долг как просроченный?')) {
      try {
        await apiCall(`/api/admin/debts/${debtId}/status`, 'PUT', { status: 'overdue' });
        showAlert('Долг отмечен как просроченный', 'success');
        fetchDebtorsList(); // Обновляем список
      } catch (error) {
        console.error('Error marking debt overdue:', error);
        showAlert('Ошибка при обновлении статуса долга', 'error');
      }
    }
  };

  // НОВЫЕ ФУНКЦИИ: Управление уведомлениями
  const handleMarkNotificationAsRead = async (notificationId) => {
    try {
      await apiCall(`/api/notifications/${notificationId}/status`, 'PUT', { status: 'read' });
      // Обновляем локальное состояние
      setNotifications(prev => 
        prev.map(n => n.id === notificationId ? {...n, status: 'read'} : n)
      );
      showAlert('Уведомление отмечено как прочитанное', 'success');
    } catch (error) {
      console.error('Error marking notification as read:', error);
      showAlert('Ошибка при обновлении уведомления', 'error');
    }
  };

  const handleDeleteNotification = async (notificationId) => {
    if (window.confirm('Удалить это уведомление?')) {
      try {
        await apiCall(`/api/notifications/${notificationId}`, 'DELETE');
        // Удаляем из локального состояния
        setNotifications(prev => prev.filter(n => n.id !== notificationId));
        showAlert('Уведомление удалено', 'success');
      } catch (error) {
        console.error('Error deleting notification:', error);
        showAlert('Ошибка при удалении уведомления', 'error');
      }
    }
  };

  const handleViewNotificationDetails = async (notificationId) => {
    try {
      const data = await apiCall(`/api/notifications/${notificationId}/details`);
      setSelectedNotificationDetails(data);
      setNotificationDetailsModal(true);
      
      // Обновляем статус в локальном состоянии
      setNotifications(prev => 
        prev.map(n => n.id === notificationId ? {...n, status: 'read'} : n)
      );
    } catch (error) {
      console.error('Error fetching notification details:', error);
      showAlert('Ошибка при загрузке деталей уведомления', 'error');
    }
  };

  const fetchTransportsList = async () => {
    try {
      const data = await apiCall('/api/transport/list');
      setTransports(data);
    } catch (error) {
      console.error('Error fetching transports list:', error);
    }
  };

  const handleCreateInterwarehouseTransport = async (e) => {
    e.preventDefault();
    try {
      const response = await apiCall('/api/transport/create-interwarehouse', 'POST', interwarehouseForm);
      
      showAlert(
        `Межскладской транспорт ${response.transport_number} создан успешно! Направление: ${response.direction}`, 
        'success'
      );
      
      // Обновить данные и закрыть модал
      fetchTransportsList();
      setInterwarehouseTransportModal(false);
      setInterwarehouseForm({
        source_warehouse_id: '',
        destination_warehouse_id: '',
        driver_name: '',
        driver_phone: '',
        capacity_kg: 1000
      });
    } catch (error) {
      console.error('Error creating interwarehouse transport:', error);
      showAlert('Ошибка создания межскладского транспорта', 'error');
    }
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoggingIn(true);
    try {
      const data = await apiCall('/api/auth/login', 'POST', loginForm);
      
      // Устанавливаем токен и пользователя одновременно
      setToken(data.access_token);
      setUser(data.user);
      localStorage.setItem('token', data.access_token);
      
      showAlert('Успешный вход в систему!', 'success');
      
      // Сбрасываем флаг логина после небольшой задержки
      setTimeout(() => {
        setIsLoggingIn(false);
      }, 1000);
      
    } catch (error) {
      console.error('Login error:', error);
      console.log('Error status:', error.status);
      console.log('Error detail:', error.detail);
      setIsLoggingIn(false);
      
      // Обработка заблокированного/удаленного пользователя
      if (error.status === 403 && error.detail?.error_type === 'account_disabled') {
        console.log('🔒 Handling account_disabled error');
        const statusInfo = error.detail;
        setUserStatusData({
          statusMessage: statusInfo.status_message,
          statusDetails: statusInfo.status_details,
          userRole: statusInfo.user_role,
          userName: statusInfo.user_name,
          userPhone: statusInfo.user_phone,
          isDeleted: statusInfo.is_deleted
        });
        setUserStatusModal(true);
        console.log('✅ UserStatus modal should be shown');
      } 
      // Обработка ошибок авторизации (неправильный номер или пароль)
      else if (error.status === 401 && error.detail?.error_type) {
        console.log('🚫 Handling login error:', error.detail.error_type);
        const errorInfo = error.detail;
        
        // Добавляем отладочную информацию
        const errorData = {
          errorType: errorInfo.error_type,
          message: errorInfo.message,
          details: errorInfo.details,
          userRole: errorInfo.user_role,
          userName: errorInfo.user_name,
          userPhone: errorInfo.user_phone,
          phoneFormat: errorInfo.phone_format,
          passwordRequirements: errorInfo.password_requirements,
          availableActions: errorInfo.available_actions || []
        };
        
        console.log('📊 Setting loginErrorData:', errorData);
        
        // Используем ref для немедленного обновления
        loginErrorRef.current = { modal: true, data: errorData };
        
        // Устанавливаем состояние
        setLoginErrorData(errorData);
        
        console.log('🔍 Setting loginErrorModal to TRUE');
        
        // Используем setTimeout для предотвращения React state batching
        setTimeout(() => {
          setLoginErrorModal(true);
          console.log('⏰ TIMEOUT: loginErrorModal set to TRUE');
          console.log('🎯 REF CHECK: loginErrorRef.current:', loginErrorRef.current);
          
          // Дополнительная проверка через небольшую задержку
          setTimeout(() => {
            console.log('🎯 DELAYED CHECK: Current loginErrorModal state:', loginErrorModal);
            console.log('🎯 DELAYED CHECK: Current loginErrorData state:', loginErrorData);
          }, 50);
        }, 10);
        
        console.log('✅ LoginError modal should be shown');
      } else {
        // Обычная ошибка авторизации (fallback)
        console.log('❌ Fallback error handling:', error.message);
        showAlert(error.message || 'Ошибка входа в систему', 'error');
      }
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setIsLoggingIn(true);
    try {
      const data = await apiCall('/api/auth/register', 'POST', registerForm);
      
      // Устанавливаем токен и пользователя одновременно
      setToken(data.access_token);
      setUser(data.user);
      localStorage.setItem('token', data.access_token);
      
      showAlert('Регистрация прошла успешно!', 'success');
      
      // Сбрасываем флаг логина после небольшой задержки
      setTimeout(() => {
        setIsLoggingIn(false);
      }, 1000);
      
    } catch (error) {
      console.error('Registration error:', error);
      setIsLoggingIn(false);
    }
  };

  const handleCreateCargo = async (e) => {
    e.preventDefault();
    try {
      await apiCall('/api/cargo/create', 'POST', {
        ...cargoForm,
        weight: parseFloat(cargoForm.weight),
        declared_value: parseFloat(cargoForm.declared_value)
      });
      showAlert('Груз успешно создан!', 'success');
      setCargoForm({
        recipient_name: '',
        recipient_phone: '',
        route: 'moscow_to_tajikistan',
        weight: '',
        description: '',
        declared_value: '',
        sender_address: '',
        recipient_address: ''
      });
      fetchMyCargo();
    } catch (error) {
      console.error('Create cargo error:', error);
    }
  };

  const handleTrackCargo = async (e) => {
    e.preventDefault();
    try {
      const data = await apiCall(`/api/cargo/track/${trackingNumber}`);
      setTrackingResult(data);
      showAlert('Груз найден!', 'success');
    } catch (error) {
      setTrackingResult(null);
      console.error('Track cargo error:', error);
    }
  };

  const handleWarehouseSearch = async () => {
    if (!searchQuery.trim()) return;
    try {
      const data = await apiCall(`/api/warehouse/search?query=${encodeURIComponent(searchQuery)}`);
      // Убеждаемся, что результат всегда является массивом
      setSearchResults(Array.isArray(data) ? data : []);
      setShowSearchResults(true);
    } catch (error) {
      console.error('Search error:', error);
      setSearchResults([]);
      setShowSearchResults(false);
    }
  };

  const handleCreateWarehouse = async (e) => {
    e.preventDefault();
    try {
      const response = await apiCall('/api/warehouses/create', 'POST', {
        ...warehouseForm,
        blocks_count: parseInt(warehouseForm.blocks_count),
        shelves_per_block: parseInt(warehouseForm.shelves_per_block),
        cells_per_shelf: parseInt(warehouseForm.cells_per_shelf)
      });
      
      showAlert('Склад успешно создан!', 'success');
      
      // Сохраняем информацию о созданном складе для генерации QR кодов
      setCreatedWarehouseInfo(response);
      
      // Если выбран оператор, создаем привязку
      if (warehouseForm.assigned_operator_id && warehouseForm.assigned_operator_id !== 'none') {
        try {
          await apiCall('/api/admin/operator-warehouse-binding/create', 'POST', {
            operator_id: warehouseForm.assigned_operator_id,
            warehouse_id: response.id
          });
          showAlert('Оператор успешно назначен на склад!', 'success');
        } catch (bindingError) {
          console.error('Operator binding error:', bindingError);
          showAlert('Склад создан, но не удалось назначить оператора', 'warning');
        }
      }
      
      // Переходим к шагу генерации QR кодов
      setWarehouseCreationStep('qr-generation');
      
      setWarehouseForm({
        name: '',
        location: '',
        blocks_count: 1,
        shelves_per_block: 1,
        cells_per_shelf: 10,
        assigned_operator_id: 'none'
      });
      fetchWarehouses();
    } catch (error) {
      console.error('Create warehouse error:', error);
      showAlert(`Ошибка создания склада: ${error.message}`, 'error');
    }
  };

  // Функция для загрузки доступных операторов
  const fetchAvailableOperators = async () => {
    try {
      const response = await apiCall('/api/admin/users/operators', 'GET');
      setAvailableOperators(response || []);
    } catch (error) {
      console.error('Error fetching operators:', error);
      setAvailableOperators([]);
    }
  };

  // Функция для открытия страницы создания склада
  const openWarehouseCreationPage = async () => {
    setShowWarehouseCreationPage(true);
    setWarehouseCreationStep('form');
    setCreatedWarehouseInfo(null);
    setGeneratedQRs([]);
    await fetchAvailableOperators();
  };

  // Функция для закрытия страницы создания склада
  const closeWarehouseCreationPage = () => {
    setShowWarehouseCreationPage(false);
    setWarehouseCreationStep('form');
    setCreatedWarehouseInfo(null);
    setGeneratedQRs([]);
    setWarehouseForm({
      name: '',
      location: '',
      blocks_count: 1,
      shelves_per_block: 1,
      cells_per_shelf: 10,
      assigned_operator_id: 'none'
    });
  };

  // Функция для генерации QR кодов для всех ячеек
  const generateAllCellQRs = async () => {
    if (!createdWarehouseInfo) {
      showAlert('Информация о складе недоступна', 'error');
      return;
    }

    setGeneratingAllQRs(true);
    setAllQRProgress(0);
    setGeneratedQRs([]);

    const { blocks_count, shelves_per_block, cells_per_shelf } = createdWarehouseInfo;
    const totalCells = blocks_count * shelves_per_block * cells_per_shelf;
    let processedCells = 0;
    const qrResults = [];

    try {
      for (let block = 1; block <= blocks_count; block++) {
        for (let shelf = 1; shelf <= shelves_per_block; shelf++) {
          for (let cell = 1; cell <= cells_per_shelf; cell++) {
            try {
              const qrResponse = await apiCall('/api/warehouse/cell/generate-qr', 'POST', {
                warehouse_id: createdWarehouseInfo.id,
                block: block,
                shelf: shelf,
                cell: cell,
                format: 'id' // Используем ID формат
              });

              if (qrResponse && qrResponse.success) {
                qrResults.push({
                  block,
                  shelf,
                  cell,
                  readable_name: qrResponse.readable_name || `Б${block}-П${shelf}-Я${cell}`,
                  cell_code: qrResponse.cell_code,
                  qr_code: qrResponse.qr_code,
                  success: true
                });
              } else {
                qrResults.push({
                  block,
                  shelf,
                  cell,
                  readable_name: `Б${block}-П${shelf}-Я${cell}`,
                  success: false,
                  error: 'Не удалось создать QR код'
                });
              }
            } catch (error) {
              console.error(`Error generating QR for cell ${block}-${shelf}-${cell}:`, error);
              qrResults.push({
                block,
                shelf,
                cell,
                readable_name: `Б${block}-П${shelf}-Я${cell}`,
                success: false,
                error: error.message
              });
            }

            processedCells++;
            setAllQRProgress((processedCells / totalCells) * 100);
          }
        }
      }

      setGeneratedQRs(qrResults);
      const successCount = qrResults.filter(qr => qr.success).length;
      showAlert(`Генерация завершена! Успешно создано ${successCount} из ${totalCells} QR кодов`, successCount === totalCells ? 'success' : 'warning');

    } catch (error) {
      console.error('Error generating all QRs:', error);
      showAlert(`Ошибка генерации QR кодов: ${error.message}`, 'error');
    } finally {
      setGeneratingAllQRs(false);
    }
  };

  // Функция для генерации QR кода выбранной ячейки
  const generateSelectedCellQR = async () => {
    if (!createdWarehouseInfo) {
      showAlert('Информация о складе недоступна', 'error');
      return;
    }

    if (!selectedCellQR.block || !selectedCellQR.shelf || !selectedCellQR.cell) {
      showAlert('Пожалуйста, заполните все поля (Блок, Полка, Ячейка)', 'error');
      return;
    }

    // Проверяем что введены только цифры
    if (!/^\d+$/.test(selectedCellQR.block) || !/^\d+$/.test(selectedCellQR.shelf) || !/^\d+$/.test(selectedCellQR.cell)) {
      showAlert('Пожалуйста, вводите только цифры', 'error');
      return;
    }

    const block = parseInt(selectedCellQR.block);
    const shelf = parseInt(selectedCellQR.shelf);
    const cell = parseInt(selectedCellQR.cell);

    // Проверяем диапазоны
    if (block < 1 || block > createdWarehouseInfo.blocks_count) {
      showAlert(`Номер блока должен быть от 1 до ${createdWarehouseInfo.blocks_count}`, 'error');
      return;
    }
    if (shelf < 1 || shelf > createdWarehouseInfo.shelves_per_block) {
      showAlert(`Номер полки должен быть от 1 до ${createdWarehouseInfo.shelves_per_block}`, 'error');
      return;
    }
    if (cell < 1 || cell > createdWarehouseInfo.cells_per_shelf) {
      showAlert(`Номер ячейки должен быть от 1 до ${createdWarehouseInfo.cells_per_shelf}`, 'error');
      return;
    }

    setGeneratingSelectedCellQR(true);
    try {
      const qrResponse = await apiCall('/api/warehouse/cell/generate-qr', 'POST', {
        warehouse_id: createdWarehouseInfo.id,
        block: block,
        shelf: shelf,
        cell: cell,
        format: 'id' // Используем ID формат
      });

      if (qrResponse && qrResponse.success) {
        setSelectedCellQRResult({
          readable_name: qrResponse.readable_name || `Б${block}-П${shelf}-Я${cell}`,
          cell_code: qrResponse.cell_code,
          qr_code: qrResponse.qr_code,
          success: true
        });
        showAlert(`QR код для ячейки ${qrResponse.readable_name || `Б${block}-П${shelf}-Я${cell}`} создан успешно!`, 'success');
      } else {
        setSelectedCellQRResult({
          readable_name: `Б${block}-П${shelf}-Я${cell}`,
          success: false,
          error: 'Не удалось создать QR код'
        });
        showAlert('Ошибка создания QR кода', 'error');
      }
    } catch (error) {
      console.error('Error generating selected cell QR:', error);
      setSelectedCellQRResult({
        readable_name: `Б${block}-П${shelf}-Я${cell}`,
        success: false,
        error: error.message
      });
      showAlert(`Ошибка создания QR кода: ${error.message}`, 'error');
    } finally {
      setGeneratingSelectedCellQR(false);
    }
  };

  // Функции для управления множественными грузами с индивидуальными ценами
  const addCargoItem = () => {
    setOperatorCargoForm({
      ...operatorCargoForm,
      cargo_items: [...operatorCargoForm.cargo_items, { cargo_name: '', quantity: 1, weight: '', price_per_kg: '', total_amount: '' }]
    });
  };

  const removeCargoItem = (index) => {
    if (operatorCargoForm.cargo_items.length > 1) {
      const newItems = operatorCargoForm.cargo_items.filter((_, i) => i !== index);
      setOperatorCargoForm({
        ...operatorCargoForm,
        cargo_items: newItems
      });
      calculateTotalsWithIndividualPrices(newItems);
    }
  };

  const updateCargoItem = (index, field, value) => {
    const newItems = [...operatorCargoForm.cargo_items];
    newItems[index] = { ...newItems[index], [field]: value };
    
    // Автоматически пересчитываем total_amount если изменились количество, вес или цена
    if (field === 'quantity' || field === 'weight' || field === 'price_per_kg') {
      const item = newItems[index];
      const quantity = parseFloat(item.quantity) || 0;
      const weight = parseFloat(item.weight) || 0;
      const pricePerKg = parseFloat(item.price_per_kg) || 0;
      newItems[index].total_amount = (quantity * weight * pricePerKg).toFixed(2);
    }
    
    setOperatorCargoForm(prev => ({
      ...prev,
      cargo_items: newItems
    }));
    
    // Debounce пересчет итогов только для числовых полей
    if (field === 'quantity' || field === 'weight' || field === 'price_per_kg') {
      setTimeout(() => calculateTotalsWithIndividualPrices(newItems), 100);
    }
  };

  const calculateTotalsWithIndividualPrices = (cargoItems = operatorCargoForm.cargo_items) => {
    let totalWeightSum = 0;
    let totalCostSum = 0;
    const breakdown = [];
    
    cargoItems.forEach((item, index) => {
      const quantity = parseFloat(item.quantity) || 1;
      const weight = parseFloat(item.weight) || 0;
      const pricePerKg = parseFloat(item.price_per_kg) || 0;
      const itemCost = quantity * weight * pricePerKg;
      const totalWeight = quantity * weight;
      
      totalWeightSum += totalWeight;
      totalCostSum += itemCost;
      
      if (weight > 0 && pricePerKg > 0) {
        breakdown.push({
          index: index + 1,
          name: item.cargo_name || `Груз ${index + 1}`,
          quantity,
          weight: totalWeight,
          pricePerKg,
          cost: itemCost
        });
      }
    });
    
    setTotalWeight(totalWeightSum);
    setTotalCost(totalCostSum);
    setCargoBreakdown(breakdown);
  };

  // Старая функция calculateTotals для совместимости с режимом общей цены
  const calculateTotals = (cargoItems = operatorCargoForm.cargo_items, pricePerKg = operatorCargoForm.price_per_kg) => {
    const weight = cargoItems.reduce((sum, item) => {
      const itemWeight = parseFloat(item.weight) || 0;
      return sum + itemWeight;
    }, 0);
    
    const cost = weight * (parseFloat(pricePerKg) || 0);
    
    setTotalWeight(weight);
    setTotalCost(cost);
  };

  const handleAcceptCargo = async (e) => {
    e.preventDefault();
    
    // Подготавливаем данные и показываем модальное окно подтверждения
    try {
      // Проверяем и устанавливаем warehouse_id
      let selectedWarehouseId = operatorCargoForm.warehouse_id;
      
      // Если не выбран склад, выбираем автоматически первый доступный
      if (!selectedWarehouseId && operatorWarehouses.length > 0) {
        selectedWarehouseId = operatorWarehouses[0].id;
        console.log('Auto-selected warehouse:', selectedWarehouseId);
      }
      
      // Проверяем что выбранный склад принадлежит оператору
      if (selectedWarehouseId && !operatorWarehouses.find(w => w.id === selectedWarehouseId)) {
        // Если выбранный склад не принадлежит оператору, выбираем первый доступный
        selectedWarehouseId = operatorWarehouses.length > 0 ? operatorWarehouses[0].id : null;
        console.log('Corrected warehouse selection:', selectedWarehouseId);
      }
      
      if (!selectedWarehouseId) {
        showAlert('Ошибка: Не удалось определить склад для размещения груза. Обратитесь к администратору.', 'error');
        return;
      }
      
      // Подготавливаем данные для подтверждения
      const confirmationData = {
        sender_info: {
          full_name: operatorCargoForm.sender_full_name,
          phone: operatorCargoForm.sender_phone
        },
        recipient_info: {
          full_name: operatorCargoForm.recipient_full_name,
          phone: operatorCargoForm.recipient_phone,
          address: operatorCargoForm.recipient_address
        },
        delivery_info: {
          city: selectedDeliveryCity,
          warehouse: availableWarehousesForCity.find(w => w.warehouse_id === selectedDeliveryWarehouse)?.warehouse_name || 'Не выбран',
          method: operatorCargoForm.delivery_method
        },
        cargo_items: operatorCargoForm.cargo_items.map(item => ({
          name: item.cargo_name,
          quantity: parseInt(item.quantity) || 1,
          weight: parseFloat(item.weight) || 0,
          price_per_kg: parseFloat(item.price_per_kg) || 0,
          total_amount: parseFloat(item.total_amount) || 0
        })),
        payment_info: {
          method: operatorCargoForm.payment_method,
          amount: operatorCargoForm.payment_amount,
          due_date: operatorCargoForm.debt_due_date
        },
        totals: {
          total_weight: totalWeight,
          total_cost: totalCost
        }
      };
      
      setConfirmationCargoData(confirmationData);
      setShowCargoConfirmationModal(true);
      
    } catch (error) {
      console.error('Error preparing cargo confirmation:', error);
      showAlert(`Ошибка при подготовке данных: ${error.message}`, 'error');
    }
  };

  // НОВАЯ ФУНКЦИЯ: Фактическая отправка груза после подтверждения
  const handleConfirmCargoAcceptance = async () => {
    try {
      setQrGenerationInProgress(true);
      
      // Получаем данные из подтвержденной формы
      const data = confirmationCargoData;
      
      // Подготавливаем данные для отправки как раньше
      let selectedWarehouseId = operatorWarehouses.length > 0 ? operatorWarehouses[0].id : null;
      
      const requestData = {
        sender_full_name: data.sender_info.full_name,
        sender_phone: data.sender_info.phone,
        recipient_full_name: data.recipient_info.full_name,
        recipient_phone: data.recipient_info.phone,
        recipient_address: data.recipient_info.address,
        description: operatorCargoForm.description,
        route: operatorCargoForm.route,
        cargo_items: data.cargo_items.map(item => ({
          cargo_name: item.name,
          quantity: item.quantity,
          weight: item.weight,
          price_per_kg: item.price_per_kg,
          total_amount: item.total_amount
        })),
        warehouse_id: selectedWarehouseId,
        delivery_city: data.delivery_info.city,
        delivery_warehouse_id: selectedDeliveryWarehouse,
        payment_method: data.payment_info.method,
        payment_amount: data.payment_info.amount ? parseFloat(data.payment_info.amount) : null,
        debt_due_date: data.payment_info.due_date || null,
        delivery_method: data.delivery_info.method
      };
      
      // Отправляем данные в backend
      const response = await apiCall('/api/operator/cargo/accept', 'POST', requestData);
      
      // Генерируем QR коды для каждой единицы груза
      const qrCodes = [];
      const application_number = response.cargo_number || '000000000';
      
      data.cargo_items.forEach((item, cargoIndex) => {
        const cargo_id = `${application_number}/${String(cargoIndex + 1).padStart(2, '0')}`;
        
        for (let i = 1; i <= item.quantity; i++) {
          const item_id = `${cargo_id}/${i}`;
          qrCodes.push({
            id: item_id,
            cargo_name: item.name,
            cargo_index: cargoIndex + 1,
            item_number: i,
            total_items: item.quantity,
            qr_code: `QR_CODE_${item_id}` // В реальности здесь будет настоящий QR код
          });
        }
      });
      
      setGeneratedQRCodes(qrCodes);
      setQrGenerationInProgress(false);
      
      showAlert('Груз успешно принят и QR коды сгенерированы!', 'success');
      
      // Сброс формы
      const warehouseId = operatorWarehouses.length === 1 ? operatorWarehouses[0].id : '';
      setOperatorCargoForm({
        sender_full_name: '',
        sender_phone: '',
        recipient_full_name: '',
        recipient_phone: '',
        recipient_address: '',
        weight: '',
        cargo_name: '',
        declared_value: '',
        description: '',
        route: 'moscow_to_tajikistan',
        cargo_items: [{ cargo_name: '', quantity: 1, weight: '', price_per_kg: '', total_amount: '' }],
        price_per_kg: '',
        use_multi_cargo: true,
        warehouse_id: warehouseId,
        payment_method: 'not_paid',
        payment_amount: '',
        debt_due_date: '',
        delivery_method: 'pickup'
      });
      
      // Сброс состояний
      setSelectedDeliveryCity('');
      setSelectedDeliveryWarehouse('');
      setCitySearchQuery('');
      setTotalWeight(0);
      setTotalCost(0);
      setCargoBreakdown([]);
      
      fetchOperatorCargo();
      fetchAvailableCargo();
      
    } catch (error) {
      console.error('Error confirming cargo acceptance:', error);
      showAlert(`Ошибка при создании груза: ${error.message}`, 'error');
      setQrGenerationInProgress(false);
    }
  };

  // Закрыть модальное окно подтверждения
  const closeCargoConfirmationModal = () => {
    setShowCargoConfirmationModal(false);
    setConfirmationCargoData(null);
    setGeneratedQRCodes([]);
    setQrGenerationInProgress(false);
  };

  // НОВАЯ ФУНКЦИЯ: Отправка груза курьером
  const handleSendToCourier = async () => {
    if (!operatorCargoForm.pickup_required) {
      showAlert('Необходимо включить опцию "Требуется забор груза"', 'error');
      return;
    }

    // Валидация обязательных полей для курьерского забора
    if (!operatorCargoForm.sender_full_name.trim()) {
      showAlert('Заполните ФИО отправителя', 'error');
      return;
    }
    
    if (!operatorCargoForm.sender_phone.trim()) {
      showAlert('Заполните контакт отправителя', 'error');
      return;
    }
    
    if (!operatorCargoForm.cargo_name.trim()) {
      showAlert('Заполните наименование груза', 'error');
      return;
    }
    
    if (!operatorCargoForm.pickup_address.trim()) {
      showAlert('Заполните адрес забора груза', 'error');
      return;
    }
    
    if (!operatorCargoForm.pickup_date) {
      showAlert('Выберите дату забора', 'error');
      return;
    }
    
    if (!operatorCargoForm.pickup_time_from || !operatorCargoForm.pickup_time_to) {
      showAlert('Укажите время забора (с и до)', 'error');
      return;
    }

    try {
      setQrCodeLoading(true);
      
      // Готовим данные для отправки курьером (упрощенная форма)
      const courierCargoData = {
        sender_full_name: operatorCargoForm.sender_full_name,
        sender_phone: operatorCargoForm.sender_phone,
        recipient_full_name: operatorCargoForm.recipient_full_name || "Не указан",
        recipient_phone: operatorCargoForm.recipient_phone || "Не указан", 
        recipient_address: operatorCargoForm.recipient_address || "Не указан",
        weight: parseFloat(operatorCargoForm.weight) || 0,
        cargo_name: operatorCargoForm.cargo_name,
        declared_value: parseFloat(operatorCargoForm.declared_value) || 0,
        description: operatorCargoForm.description || "Курьерский забор",
        route: operatorCargoForm.route,
        pickup_required: true,
        pickup_address: operatorCargoForm.pickup_address,
        pickup_date: operatorCargoForm.pickup_date,
        pickup_time_from: operatorCargoForm.pickup_time_from,
        pickup_time_to: operatorCargoForm.pickup_time_to,
        delivery_method: operatorCargoForm.delivery_method,
        courier_fee: parseFloat(operatorCargoForm.courier_fee) || 0
      };

      const response = await apiCall('/api/operator/cargo/create-for-courier', 'POST', courierCargoData);
      
      if (response) {
        showAlert(`✅ Заявка для курьерского забора создана! Груз ${response.cargo_number}`, 'success');
        
        // Сбрасываем форму
        setOperatorCargoForm({
          sender_full_name: '',
          sender_phone: '',
          recipient_full_name: '',
          recipient_phone: '',
          recipient_address: '',
          weight: '',
          cargo_name: '',
          declared_value: '',
          description: '',
          route: 'moscow_to_tajikistan',
          cargo_items: [{ cargo_name: '', weight: '', price_per_kg: '' }],
          price_per_kg: '',
          use_multi_cargo: false,
          warehouse_id: '',
          payment_method: 'not_paid',
          payment_amount: '',
          debt_due_date: '',
          pickup_required: false,
          pickup_address: '',
          pickup_date: '',
          pickup_time_from: '',
          pickup_time_to: '',
          delivery_method: 'pickup',
          courier_fee: ''
        });
        
        // Обновляем списки
        fetchOperatorCargo();
      }
    } catch (error) {
      console.error('Send to courier error:', error);
      showAlert('Ошибка создания заявки для курьера: ' + error.message, 'error');
    } finally {
      setQrCodeLoading(false);
    }
  };

  const handlePlaceCargo = async (cargoId, warehouseId, blockNumber, shelfNumber, cellNumber) => {
    try {
      console.log('📤 API запрос на размещение груза:');
      const requestData = {
        cargo_id: cargoId,
        warehouse_id: warehouseId,
        block_number: parseInt(blockNumber),
        shelf_number: parseInt(shelfNumber),
        cell_number: parseInt(cellNumber)
      };
      console.log('Данные запроса:', requestData);
      
      const response = await apiCall('/api/operator/cargo/place', 'POST', requestData);
      
      console.log('✅ Ответ от API размещения:', response);

      // ИСПРАВЛЕНИЕ: Правильно обрабатываем объект ответа от API
      let successMessage = '✅ Груз успешно размещен';
      if (response && typeof response === 'object') {
        if (response.warehouse_name && response.location_code) {
          successMessage = `✅ Груз успешно размещен в ${response.warehouse_name} (${response.location_code})`;
        } else if (response.warehouse_name) {
          successMessage = `✅ Груз успешно размещен в ${response.warehouse_name}`;
        } else if (response.location_code) {
          successMessage = `✅ Груз успешно размещен в ячейке ${response.location_code}`;
        }
      }
      
      showAlert(successMessage, 'success');
      
      // Обновляем статус груза на "размещен" во ВСЕХ таблицах
      await updateCargoProcessingStatus(cargoId, 'placed');
      
      // Обновляем все списки для синхронизации
      fetchAvailableCargoForPlacement(); // Убираем из "Ожидает размещение"
      fetchPlacedCargo(); // Добавляем в "Размещенные грузы"
      fetchOperatorCargo(operatorCargoFilter, operatorCargoPage, operatorCargoPerPage);
      fetchAllCargo(); // Админский список
      
      return response;
    } catch (error) {
      console.error('Error placing cargo:', error);
      showAlert('Ошибка размещения груза: ' + error.message, 'error');
      throw error;
    }
  };

  const handleSearchCargoForPayment = async () => {
    if (!paymentForm.cargo_number.trim()) return;
    
    try {
      const data = await apiCall(`/api/cashier/search-cargo/${paymentForm.cargo_number}`);
      setCargoForPayment(data);
      setPaymentForm({...paymentForm, amount_paid: data.declared_value.toString()});
    } catch (error) {
      setCargoForPayment(null);
      console.error('Search cargo for payment error:', error);
    }
  };

  const handleProcessPayment = async () => {
    try {
      await apiCall('/api/cashier/process-payment', 'POST', {
        cargo_number: paymentForm.cargo_number,
        amount_paid: parseFloat(paymentForm.amount_paid),
        transaction_type: paymentForm.transaction_type,
        notes: paymentForm.notes
      });
      showAlert('Оплата успешно принята!', 'success');
      setPaymentModal(false);
      setCargoForPayment(null);
      setPaymentForm({
        cargo_number: '',
        amount_paid: '',
        transaction_type: 'cash',
        notes: ''
      });
      fetchUnpaidCargo();
      fetchPaymentHistory();
      fetchOperatorCargo();
    } catch (error) {
      console.error('Process payment error:', error);
    }
  };

  const handleOpenWarehouseLayout = async (warehouse) => {
    console.log('Opening warehouse layout for:', warehouse);
    setSelectedWarehouseForLayout(warehouse);
    
    // Используем новый API для получения схемы с информацией о грузах
    try {
      await fetchWarehouseLayoutWithCargo(warehouse.id);
      console.log('Layout fetched, opening modal...');
      setLayoutModal(true);
    } catch (error) {
      console.error('Error opening warehouse layout:', error);
      showAlert('Ошибка при открытии схемы склада: ' + error.message, 'error');
    }
  };

  const printCargoInvoice = (cargo) => {
    // Используем тот же формат, что и printInvoice
    printInvoice(cargo);
  };

  const handleCreateRequest = async (e) => {
    e.preventDefault();
    try {
      await apiCall('/api/user/cargo-request', 'POST', {
        ...requestForm,
        weight: parseFloat(requestForm.weight),
        declared_value: parseFloat(requestForm.declared_value)
      });
      showAlert('Заявка на груз успешно подана!', 'success');
      setRequestForm({
        recipient_full_name: '',
        recipient_phone: '',
        recipient_address: '',
        pickup_address: '',
        cargo_name: '',
        weight: '',
        declared_value: getDefaultDeclaredValue('moscow_to_tajikistan'), // Используем значение по умолчанию
        description: '',
        route: 'moscow_to_tajikistan'
      });
      fetchMyRequests();
    } catch (error) {
      console.error('Create request error:', error);
      
      // Правильная обработка ошибок
      let errorMessage = 'Неизвестная ошибка при подаче заявки';
      
      if (error.message) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      } else if (error.detail) {
        errorMessage = error.detail;
      }
      
      showAlert('Ошибка подачи заявки: ' + errorMessage, 'error');
    }
  };

  const handleAcceptRequest = async (requestId) => {
    try {
      await apiCall(`/api/admin/cargo-requests/${requestId}/accept`, 'POST');
      showAlert('Заявка принята и груз создан!', 'success');
      fetchCargoRequests();
      fetchOperatorCargo();
      fetchNotifications();
    } catch (error) {
      console.error('Accept request error:', error);
    }
  };

  const handleRejectRequest = async (requestId, reason = '') => {
    try {
      await apiCall(`/api/admin/cargo-requests/${requestId}/reject`, 'POST', { reason });
      showAlert('Заявка отклонена', 'info');
      fetchCargoRequests();
      fetchNotifications();
    } catch (error) {
      console.error('Reject request error:', error);
    }
  };

  const updateCargoStatus = async (cargoId, status, warehouseLocation = null) => {
    try {
      const params = new URLSearchParams({ status });
      if (warehouseLocation) {
        params.append('warehouse_location', warehouseLocation);
      }
      
      await apiCall(`/api/cargo/${cargoId}/status?${params}`, 'PUT');
      showAlert('Статус груза обновлен!', 'success');
      
      if (user.role === 'admin') {
        fetchAllCargo();
      } else if (user.role === 'warehouse_operator') {
        fetchWarehouseCargo();
      }
    } catch (error) {
      console.error('Update status error:', error);
    }
  };

  const toggleUserStatus = async (userId, isActive) => {
    try {
      await apiCall(`/api/admin/users/${userId}/status`, 'PUT', { is_active: !isActive });
      showAlert('Статус пользователя изменен!', 'success');
      fetchUsers();
    } catch (error) {
      console.error('Toggle user status error:', error);
    }
  };

  const deleteUser = async (userId) => {
    if (window.confirm('Вы уверены, что хотите удалить этого пользователя?')) {
      try {
        await apiCall(`/api/admin/users/${userId}`, 'DELETE');
        showAlert('Пользователь удален!', 'success');
        fetchUsers();
      } catch (error) {
        console.error('Delete user error:', error);
      }
    }
  };

  // Функция для проверки валидности токена
  const isTokenValid = (tokenString) => {
    if (!tokenString) return false;
    
    try {
      // Декодируем JWT токен без проверки подписи (только для получения exp)
      const base64Url = tokenString.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
      }).join(''));
      
      const decoded = JSON.parse(jsonPayload);
      const currentTime = Date.now() / 1000;
      
      // Добавляем буферное время в 5 минут (300 секунд) перед истечением токена
      const bufferTime = 300;
      
      // Проверяем, не истек ли токен (с учетом буферного времени)
      return decoded.exp && decoded.exp > (currentTime + bufferTime);
    } catch (error) {
      console.error('Token validation error:', error);
      return false;
    }
  };

  const handleLogout = () => {
    // Предотвращаем множественные logout'ы
    if (isLoggingOut) {
      console.log('Logout already in progress, skipping...');
      return;
    }
    
    console.log('Starting logout process...');
    setIsLoggingOut(true);
    
    localStorage.removeItem('token');
    setToken(null);
    setUser(null);
    
    // Очищаем все данные приложения
    clearAllAppData();
    
    // Сбрасываем состояния инициализации
    setIsInitializing(false);
    setDataLoaded(false);
    
    // Сбрасываем все остальные состояния
    setActiveTab('dashboard');
    setActiveSection('dashboard');
    setSidebarOpen(true);
    setCurrentPage('main');
    setShowCargoAcceptanceModal(false);
    setEditingCargo(null);
    setScannerActive(false);
    setScannedCargoInfo(null);
    setShowWarehouseManagementModal(false);
    setSelectedWarehouseForManagement(null);
    
    console.log('Logout completed');
    setIsLoggingOut(false);
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      created: { label: 'Создан', variant: 'secondary' },
      accepted: { label: 'Принят', variant: 'default' },
      in_transit: { label: 'В пути', variant: 'default' },
      arrived_destination: { label: 'Прибыл', variant: 'default' },
      completed: { label: 'Доставлен', variant: 'default' }
    };
    
    const config = statusConfig[status] || { label: status, variant: 'secondary' };
    return <Badge variant={config.variant}>{config.label}</Badge>;
  };

  const getRoleIcon = (role) => {
    switch (role) {
      case 'admin':
        return <Shield className="h-4 w-4" />;
      case 'warehouse_operator':
        return <Warehouse className="h-4 w-4" />;
      default:
        return <User className="h-4 w-4" />;
    }
  };

  const getRoleLabel = (role) => {
    const labels = {
      user: 'Пользователь',
      admin: 'Администратор',
      warehouse_operator: 'Оператор склада'
    };
    return labels[role] || role;
  };

  // Функция для назначения цветов складам
  const getWarehouseColor = (warehouseName) => {
    if (!warehouseName) return { bg: 'bg-gray-100', border: 'border-gray-300', text: 'text-gray-700' };
    
    // Нормализуем название склада для поиска ключевых слов
    const name = warehouseName.toLowerCase();
    
    // Цветовая схема на основе ключевых слов в названии склада
    if (name.includes('худжанд') || name.includes('khujand')) {
      return { bg: 'bg-blue-50', border: 'border-l-blue-500', text: 'text-blue-800', badge: 'bg-blue-100' };
    } else if (name.includes('душанбе') || name.includes('dushanbe')) {
      return { bg: 'bg-green-50', border: 'border-l-green-500', text: 'text-green-800', badge: 'bg-green-100' };
    } else if (name.includes('кулоб') || name.includes('kulob')) {
      return { bg: 'bg-purple-50', border: 'border-l-purple-500', text: 'text-purple-800', badge: 'bg-purple-100' };
    } else if (name.includes('курган') || name.includes('kurgan')) {
      return { bg: 'bg-orange-50', border: 'border-l-orange-500', text: 'text-orange-800', badge: 'bg-orange-100' };
    } else if (name.includes('москва') || name.includes('moscow')) {
      return { bg: 'bg-red-50', border: 'border-l-red-500', text: 'text-red-800', badge: 'bg-red-100' };
    } else {
      // Для других складов используем случайный цвет на основе хеша названия
      const colors = [
        { bg: 'bg-yellow-50', border: 'border-l-yellow-500', text: 'text-yellow-800', badge: 'bg-yellow-100' },
        { bg: 'bg-pink-50', border: 'border-l-pink-500', text: 'text-pink-800', badge: 'bg-pink-100' },
        { bg: 'bg-indigo-50', border: 'border-l-indigo-500', text: 'text-indigo-800', badge: 'bg-indigo-100' },
        { bg: 'bg-teal-50', border: 'border-l-teal-500', text: 'text-teal-800', badge: 'bg-teal-100' }
      ];
      
      // Простой хеш для консистентного выбора цвета
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = ((hash << 5) - hash + name.charCodeAt(i)) & 0xffffffff;
      }
      const colorIndex = Math.abs(hash) % colors.length;
      return colors[colorIndex];
    }
  };

  // Функция для получения легенды цветов складов
  const getWarehouseLegend = () => {
    const legend = [
      { name: 'Склады Худжанда', color: 'bg-blue-500', textColor: 'text-blue-800' },
      { name: 'Склады Душанбе', color: 'bg-green-500', textColor: 'text-green-800' },
      { name: 'Склады Кулоба', color: 'bg-purple-500', textColor: 'text-purple-800' },
      { name: 'Склады Курган-Тюбе', color: 'bg-orange-500', textColor: 'text-orange-800' },
      { name: 'Склады Москвы', color: 'bg-red-500', textColor: 'text-red-800' }
    ];
    return legend;
  };

  // Функция для редактирования профиля пользователя
  const openEditProfile = () => {
    setEditProfileForm({
      full_name: user.full_name || '',
      phone: user.phone || '',
      email: user.email || '',
      address: user.address || ''
    });
    setShowEditProfile(true);
  };

  const saveProfile = async () => {
    try {
      const updatedUser = await apiCall('/api/user/profile', 'PUT', editProfileForm);
      setUser(updatedUser);
      setShowEditProfile(false);
      showAlert('Профиль обновлен успешно!', 'success');
    } catch (error) {
      showAlert('Ошибка обновления профиля: ' + error.message, 'error');
    }
  };

  // Функция для открытия модального окна повторного заказа
  const openRepeatOrder = (cargo) => {
    setRepeatOrderData(cargo);
    setRepeatOrderForm({
      cargo_items: [{ 
        cargo_name: cargo.cargo_name || cargo.description || 'Груз', 
        weight: cargo.weight || '', 
        price_per_kg: cargo.price_per_kg || '50' 
      }],
      recipient_full_name: cargo.recipient_full_name || '',
      recipient_phone: cargo.recipient_phone || '',
      recipient_address: cargo.recipient_address || '',
      route: cargo.route || 'moscow_dushanbe',
      delivery_type: 'standard',
      insurance_requested: false,
      special_instructions: '',
      use_multi_cargo: true
    });
    setShowRepeatOrderModal(true);
    calculateRepeatOrderTotals([{ 
      cargo_name: cargo.cargo_name || cargo.description || 'Груз', 
      weight: cargo.weight || '', 
      price_per_kg: cargo.price_per_kg || '50' 
    }]);
  };

  // Функция для расчета итогов повторного заказа
  const calculateRepeatOrderTotals = (cargoItems) => {
    let totalWeight = 0;
    let totalCost = 0;
    const breakdown = [];

    cargoItems.forEach((item, index) => {
      const weight = parseFloat(item.weight) || 0;
      const pricePerKg = parseFloat(item.price_per_kg) || 0;
      const itemCost = weight * pricePerKg;

      totalWeight += weight;
      totalCost += itemCost;

      breakdown.push({
        index: index,
        cargo_name: item.cargo_name || `Груз ${index + 1}`,
        weight: weight,
        price_per_kg: pricePerKg,
        cost: itemCost
      });
    });

    setRepeatOrderTotalWeight(totalWeight);
    setRepeatOrderTotalCost(totalCost);
    setRepeatOrderBreakdown(breakdown);
  };

  // Обработчик изменения элементов груза в повторном заказе
  const handleRepeatOrderItemChange = (index, field, value) => {
    const updatedItems = [...repeatOrderForm.cargo_items];
    updatedItems[index] = { ...updatedItems[index], [field]: value };
    setRepeatOrderForm({ ...repeatOrderForm, cargo_items: updatedItems });
    calculateRepeatOrderTotals(updatedItems);
  };

  // Добавление нового элемента груза в повторный заказ
  const addRepeatOrderItem = () => {
    const newItems = [...repeatOrderForm.cargo_items, { cargo_name: '', weight: '', price_per_kg: '50' }];
    setRepeatOrderForm({ ...repeatOrderForm, cargo_items: newItems });
    calculateRepeatOrderTotals(newItems);
  };

  // Удаление элемента груза из повторного заказа
  const removeRepeatOrderItem = (index) => {
    if (repeatOrderForm.cargo_items.length > 1) {
      const newItems = repeatOrderForm.cargo_items.filter((_, i) => i !== index);
      setRepeatOrderForm({ ...repeatOrderForm, cargo_items: newItems });
      calculateRepeatOrderTotals(newItems);
    }
  };

  // Отправка повторного заказа
  const submitRepeatOrder = async () => {
    try {
      if (repeatOrderForm.cargo_items.some(item => !item.cargo_name || !item.weight || !item.price_per_kg)) {
        showAlert('Пожалуйста, заполните все поля для всех грузов', 'error');
        return;
      }

      if (!repeatOrderForm.recipient_full_name || !repeatOrderForm.recipient_phone) {
        showAlert('Пожалуйста, заполните данные получателя', 'error');
        return;
      }

      const orderData = {
        ...repeatOrderForm,
        sender_full_name: user.full_name,
        sender_phone: user.phone,
        total_weight: repeatOrderTotalWeight,
        total_cost: repeatOrderTotalCost
      };

      const result = await apiCall('/api/operator/cargo/accept', 'POST', orderData);
      
      setShowRepeatOrderModal(false);
      setRepeatOrderData(null);
      
      // Обновляем данные клиента
      fetchClientDashboard();
      fetchClientCargo();
      
      showAlert(`Повторный заказ успешно создан! Номер: ${result.cargo_number}`, 'success');
      
    } catch (error) {
      console.error('Error creating repeat order:', error);
      showAlert('Ошибка создания заказа: ' + error.message, 'error');
    }
  };

  // Функции для редактирования пользователей админом
  const openAdminEditUser = (user) => {
    setSelectedUserForEdit(user);
    setAdminEditUserForm({
      id: user.id,
      full_name: user.full_name || '',
      phone: user.phone || '',
      email: user.email || '',
      address: user.address || '',
      role: user.role || 'user',
      is_active: user.is_active !== undefined ? user.is_active : true
    });
    setShowAdminEditUser(true);
  };

  const saveAdminUserEdit = async () => {
    try {
      const updatedUser = await apiCall(`/api/admin/users/${adminEditUserForm.id}/update`, 'PUT', adminEditUserForm);
      setShowAdminEditUser(false);
      setSelectedUserForEdit(null);
      
      // Обновляем списки пользователей
      fetchUsers();
      fetchUsersByRole();
      
      showAlert('Данные пользователя обновлены успешно!', 'success');
    } catch (error) {
      showAlert('Ошибка обновления данных пользователя: ' + error.message, 'error');
    }
  };

  // Функции для повторного заказа админом/оператором
  const openAdminRepeatOrder = (cargo) => {
    setAdminRepeatOrderData(cargo);
    setAdminRepeatOrderForm({
      sender_id: cargo.sender_id || '',
      sender_full_name: cargo.sender_full_name || '',
      sender_phone: cargo.sender_phone || '',
      cargo_items: [{ 
        cargo_name: '', // Админ должен заполнить заново
        weight: '', // Админ должен заполнить заново
        price_per_kg: '50' // Значение по умолчанию
      }],
      recipient_full_name: cargo.recipient_full_name || '',
      recipient_phone: cargo.recipient_phone || '',
      recipient_address: cargo.recipient_address || '',
      route: cargo.route || 'moscow_dushanbe',
      delivery_type: 'standard',
      insurance_requested: false,
      special_instructions: `Повтор груза №${cargo.cargo_number}`,
      use_multi_cargo: true
    });
    setShowAdminRepeatOrderModal(true);
    calculateAdminRepeatOrderTotals([{ 
      cargo_name: '', 
      weight: '', 
      price_per_kg: '50'
    }]);
  };

  // Функция для расчета итогов повторного заказа админа/оператора
  const calculateAdminRepeatOrderTotals = (cargoItems) => {
    let totalWeight = 0;
    let totalCost = 0;
    const breakdown = [];

    cargoItems.forEach((item, index) => {
      const weight = parseFloat(item.weight) || 0;
      const pricePerKg = parseFloat(item.price_per_kg) || 0;
      const itemCost = weight * pricePerKg;

      totalWeight += weight;
      totalCost += itemCost;

      breakdown.push({
        index: index,
        cargo_name: item.cargo_name || `Груз ${index + 1}`,
        weight: weight,
        price_per_kg: pricePerKg,
        cost: itemCost
      });
    });

    setAdminRepeatOrderTotalWeight(totalWeight);
    setAdminRepeatOrderTotalCost(totalCost);
    setAdminRepeatOrderBreakdown(breakdown);
  };

  // Обработчик изменения элементов груза в повторном заказе админа
  const handleAdminRepeatOrderItemChange = (index, field, value) => {
    const updatedItems = [...adminRepeatOrderForm.cargo_items];
    updatedItems[index] = { ...updatedItems[index], [field]: value };
    setAdminRepeatOrderForm({ ...adminRepeatOrderForm, cargo_items: updatedItems });
    calculateAdminRepeatOrderTotals(updatedItems);
  };

  // Добавление нового элемента груза в повторный заказ админа
  const addAdminRepeatOrderItem = () => {
    const newItems = [...adminRepeatOrderForm.cargo_items, { cargo_name: '', weight: '', price_per_kg: '50' }];
    setAdminRepeatOrderForm({ ...adminRepeatOrderForm, cargo_items: newItems });
    calculateAdminRepeatOrderTotals(newItems);
  };

  // Удаление элемента груза из повторного заказа админа
  const removeAdminRepeatOrderItem = (index) => {
    if (adminRepeatOrderForm.cargo_items.length > 1) {
      const newItems = adminRepeatOrderForm.cargo_items.filter((_, i) => i !== index);
      setAdminRepeatOrderForm({ ...adminRepeatOrderForm, cargo_items: newItems });
      calculateAdminRepeatOrderTotals(newItems);
    }
  };

  // Отправка повторного заказа админом/оператором
  const submitAdminRepeatOrder = async () => {
    try {
      if (adminRepeatOrderForm.cargo_items.some(item => !item.cargo_name || !item.weight || !item.price_per_kg)) {
        showAlert('Пожалуйста, заполните все поля для всех грузов', 'error');
        return;
      }

      if (!adminRepeatOrderForm.recipient_full_name || !adminRepeatOrderForm.recipient_phone) {
        showAlert('Пожалуйста, заполните данные получателя', 'error');
        return;
      }

      if (!adminRepeatOrderForm.sender_full_name || !adminRepeatOrderForm.sender_phone) {
        showAlert('Пожалуйста, заполните данные отправителя', 'error');
        return;
      }

      const orderData = {
        ...adminRepeatOrderForm,
        total_weight: adminRepeatOrderTotalWeight,
        total_cost: adminRepeatOrderTotalCost
      };

      const result = await apiCall('/api/operator/cargo/accept', 'POST', orderData);
      
      setShowAdminRepeatOrderModal(false);
      setAdminRepeatOrderData(null);
      
      // Обновляем данные
      if (user.role === 'admin') {
        fetchAllCargo();
      } else if (user.role === 'warehouse_operator') {
        fetchOperatorCargo();
      }
      
      showAlert(`Повторный заказ успешно создан! Номер: ${result.cargo_number}`, 'success');
      
    } catch (error) {
      console.error('Error creating admin repeat order:', error);
      showAlert('Ошибка создания заказа: ' + error.message, 'error');
    }
  };

  // Функция для открытия формы приема груза из профиля пользователя
  const openQuickCargoFromProfile = async (userInfo) => {
    try {
      // Закрываем модальное окно профиля
      setShowUserProfile(false);
      
      // Получаем историю отправлений пользователя для автозаполнения
      const historyData = selectedUserProfile?.sent_cargo || [];
      
      let senderData = {
        full_name: userInfo.full_name || '',
        phone: userInfo.phone || '',
        address: userInfo.address || ''
      };
      
      let recipientData = {
        full_name: '',
        phone: '',
        address: ''
      };
      
      // Если есть история отправлений, берем данные последнего отправления
      if (historyData.length > 0) {
        const lastCargo = historyData[0]; // Первый элемент - самый последний
        recipientData = {
          full_name: lastCargo.recipient_full_name || lastCargo.recipient_name || '',
          phone: lastCargo.recipient_phone || '',
          address: lastCargo.recipient_address || ''
        };
      }
      
      // Заполняем форму оператора с автозаполненными данными
      const formData = {
        sender_full_name: senderData.full_name,
        sender_phone: senderData.phone,
        sender_address: senderData.address,
        recipient_full_name: recipientData.full_name,
        recipient_phone: recipientData.phone,
        recipient_address: recipientData.address,
        cargo_items: [{ cargo_name: '', weight: '', price_per_kg: '50' }],
        route: historyData.length > 0 ? historyData[0].route || 'moscow_dushanbe' : 'moscow_dushanbe',
        delivery_type: 'standard',
        insurance_requested: false,
        special_instructions: `Груз для ${userInfo.full_name} (${userInfo.user_number})`,
        use_multi_cargo: true
      };
      
      setOperatorCargoForm(formData);
      
      // Устанавливаем флаг автозаполнения
      setIsFilledFromProfile(true);
      setProfileSourceUser(userInfo);
      
      // Рассчитываем калькулятор
      calculateTotalsWithIndividualPrices([{ cargo_name: '', weight: '', price_per_kg: '50' }]);
      
      // Переходим на страницу приема груза
      setActiveSection('cargo-management');
      setActiveTab('cargo-accept');
      
      if (historyData.length > 0) {
        showAlert(`Форма заполнена данными пользователя: ${userInfo.full_name}. Данные получателя взяты из последней отправки.`, 'info');
      } else {
        showAlert(`Форма заполнена данными пользователя: ${userInfo.full_name}. Данные получателя нужно заполнить вручную.`, 'warning');
      }
      
    } catch (error) {
      console.error('Error opening cargo form from profile:', error);
      showAlert('Ошибка открытия формы: ' + error.message, 'error');
    }
  };

  // Функции для печати накладной и штрих-кода текущей заявки
  const canPrintInvoice = () => {
    // Проверяем, что основные поля заполнены
    return (
      operatorCargoForm.sender_full_name && 
      operatorCargoForm.sender_phone && 
      operatorCargoForm.recipient_full_name && 
      operatorCargoForm.recipient_phone &&
      totalWeight > 0 &&
      totalCost > 0
    );
  };

  const handlePrintCurrentInvoice = () => {
    if (!canPrintInvoice()) {
      showAlert('Заполните все обязательные поля для печати накладной', 'warning');
      return;
    }

    // Создаем временный объект груза из текущей формы
    const tempCargo = {
      cargo_number: `TEMP-${Date.now()}`, // Временный номер
      route: operatorCargoForm.route,
      sender_full_name: operatorCargoForm.sender_full_name,
      sender_phone: operatorCargoForm.sender_phone,
      sender_address: operatorCargoForm.sender_address,
      recipient_full_name: operatorCargoForm.recipient_full_name,
      recipient_phone: operatorCargoForm.recipient_phone,
      recipient_address: operatorCargoForm.recipient_address,
      weight: totalWeight,
      total_cost: totalCost,
      declared_value: totalCost,
      cargo_items: operatorCargoForm.use_multi_cargo ? operatorCargoForm.cargo_items : [{
        cargo_name: operatorCargoForm.description || 'Груз',
        weight: operatorCargoForm.weight,
        price_per_kg: operatorCargoForm.declared_value / operatorCargoForm.weight
      }],
      created_at: new Date().toISOString()
    };

    // Печатаем накладную
    printInvoice(tempCargo);
  };

  const generateBarcodeData = (cargoData) => {
    // Генерируем данные для штрих-кода
    return {
      cargo_number: cargoData.cargo_number,
      sender: cargoData.sender_full_name,
      recipient: cargoData.recipient_full_name,
      weight: cargoData.weight,
      route: cargoData.route,
      date: new Date().toLocaleDateString('ru-RU')
    };
  };

  const handlePrintCurrentBarcode = () => {
    if (!canPrintInvoice()) {
      showAlert('Заполните все обязательные поля для печати штрих-кода', 'warning');
      return;
    }

    // Создаем временный объект груза
    const tempCargo = {
      cargo_number: `TEMP-${Date.now()}`,
      sender_full_name: operatorCargoForm.sender_full_name,
      recipient_full_name: operatorCargoForm.recipient_full_name,
      weight: totalWeight,
      route: operatorCargoForm.route
    };

    // Генерируем и печатаем штрих-код
    printBarcode(tempCargo);
  };

  const printBarcode = (cargo) => {
    const printWindow = window.open('', '_blank');
    
    if (!printWindow) {
      showAlert('Всплывающие окна заблокированы. Штрих-код будет открыт в новой вкладке.', 'warning');
      const barcodeContent = createBarcodeHTML(cargo);
      const dataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(barcodeContent)}`;
      window.open(dataUrl, '_blank');
      return;
    }

    try {
      const barcodeHTML = createBarcodeHTML(cargo);
      printWindow.document.write(barcodeHTML);
      printWindow.document.close();
    } catch (error) {
      console.error('Error creating barcode print:', error);
      showAlert('Ошибка создания штрих-кода. Попробуйте снова.', 'error');
      if (printWindow) {
        printWindow.close();
      }
    }
  };

  const createBarcodeHTML = (cargo) => {
    return `
      <html>
        <head>
          <title>Штрих-код TAJLINE № ${cargo.cargo_number}</title>
          <meta charset="utf-8">
          <style>
            @page {
              size: A5 landscape;
              margin: 10mm;
            }
            
            body {
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 20px;
              text-align: center;
            }
            
            .barcode-container {
              border: 3px solid #000;
              padding: 30px;
              margin: 20px auto;
              max-width: 500px;
              background: white;
            }
            
            .logo {
              font-size: 32px;
              font-weight: bold;
              letter-spacing: 3px;
              margin-bottom: 20px;
              color: #000;
            }
            
            .cargo-number {
              font-size: 24px;
              font-weight: bold;
              margin: 20px 0;
              padding: 15px;
              border: 2px solid #000;
              background: #f0f0f0;
            }
            
            .barcode-visual {
              margin: 30px 0;
              padding: 20px;
              border: 1px solid #ccc;
              background: white;
              font-family: 'Courier New', monospace;
              letter-spacing: 2px;
            }
            
            .barcode-lines {
              height: 60px;
              background: repeating-linear-gradient(
                90deg,
                #000 0px,
                #000 2px,
                #fff 2px,
                #fff 4px
              );
              margin: 10px 0;
            }
            
            .cargo-info {
              margin: 20px 0;
              text-align: left;
              font-size: 14px;
            }
            
            .cargo-info div {
              margin: 8px 0;
              display: flex;
              justify-content: space-between;
              border-bottom: 1px dotted #ccc;
              padding-bottom: 5px;
            }
            
            .cargo-info .label {
              font-weight: bold;
              width: 40%;
            }
            
            .cargo-info .value {
              width: 60%;
              text-align: right;
            }
            
            .print-date {
              font-size: 10px;
              color: #666;
              margin-top: 20px;
              border-top: 1px solid #ccc;
              padding-top: 10px;
            }

            @media print {
              body { -webkit-print-color-adjust: exact; }
            }
          </style>
        </head>
        <body>
          <div class="barcode-container">
            <div class="logo">TAJLINE</div>
            
            <div class="cargo-number">
              ${cargo.cargo_number}
            </div>
            
            <div class="barcode-visual">
              <div class="barcode-lines"></div>
              <div style="font-size: 16px; font-weight: bold;">${cargo.cargo_number}</div>
            </div>
            
            <div class="cargo-info">
              <div>
                <span class="label">Отправитель:</span>
                <span class="value">${cargo.sender_full_name}</span>
              </div>
              <div>
                <span class="label">Получатель:</span>
                <span class="value">${cargo.recipient_full_name}</span>
              </div>
              <div>
                <span class="label">Вес:</span>
                <span class="value">${cargo.weight} кг</span>
              </div>
              <div>
                <span class="label">Маршрут:</span>
                <span class="value">${cargo.route === 'moscow_dushanbe' ? 'Москва → Душанбе' : 
                                     cargo.route === 'moscow_khujand' ? 'Москва → Худжанд' : 
                                     cargo.route === 'moscow_kulob' ? 'Москва → Кулоб' : 
                                     cargo.route === 'moscow_kurgantyube' ? 'Москва → Курган-Тюбе' : 'Таджикистан'}</span>
              </div>
            </div>
            
            <div class="print-date">
              Дата печати: ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}
            </div>
          </div>
          
          <script>
            window.onload = function() {
              setTimeout(function() {
                window.print();
                window.onafterprint = function() {
                  window.close();
                };
              }, 500);
            };
          </script>
        </body>
      </html>
    `;
  };

  // НОВОЕ: Адаптивное боковое меню для курьера (УЛУЧШЕННАЯ ВЕРСИЯ)
  const CourierSidebarMenu = () => {
    if (user?.role !== 'courier') return null;

    const courierMenuItems = [
      {
        id: 'courier-dashboard',
        label: 'Главная',
        icon: <Home className="w-5 h-5" />,
        section: 'courier-dashboard'
      },
      {
        id: 'courier-requests',
        label: 'Новые заявки',
        icon: <Package className="w-5 h-5" />,
        section: 'courier-requests'
      },
      {
        id: 'courier-accepted',
        label: 'Принятые заявки',
        icon: <CheckCircle className="w-5 h-5" />,
        section: 'courier-accepted'
      },
      {
        id: 'courier-picked',
        label: 'Забранные грузы', 
        icon: <Truck className="w-5 h-5" />,
        section: 'courier-picked'
      },
      {
        id: 'courier-cancelled',
        label: 'Отмененные заявки',
        icon: <XCircle className="w-5 h-5" />,
        section: 'courier-cancelled'
      },
      {
        id: 'courier-chat',
        label: 'Чат с поддержкой',
        icon: <MessageCircle className="w-5 h-5" />,
        section: 'courier-chat'
      },
      {
        id: 'courier-history',
        label: 'История заявок',
        icon: <Clock className="w-5 h-5" />,
        section: 'courier-history'
      }
    ];

    return (
      <>
        {/* Мобильная версия меню */}
        <div className="md:hidden">
          {/* Мобильная шапка */}
          <div className="bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between">
            <div className="flex items-center">
              <img 
                src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                alt="Logo" 
                className="h-8 w-auto mr-2"
              />
              <div>
                <Badge className="bg-blue-100 text-blue-800 text-xs">КУРЬЕР</Badge>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              {/* Кнопка меню */}
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setCourierMobileMenuOpen(!courierMobileMenuOpen)}
                className="p-2"
              >
                {courierMobileMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
              </Button>
            </div>
          </div>

          {/* Выдвигающееся мобильное меню */}
          {courierMobileMenuOpen && (
            <>
              {/* Затемняющий фон */}
              <div 
                className="fixed inset-0 bg-black bg-opacity-50 z-40"
                onClick={() => setCourierMobileMenuOpen(false)}
              />
              
              {/* Само меню */}
              <div className="fixed top-0 left-0 h-full w-80 bg-white border-r border-gray-200 z-50 transform transition-transform duration-300">
                <div className="flex items-center h-16 px-6 border-b border-gray-200">
                  <img 
                    src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                    alt="Logo" 
                    className="h-10 w-auto mr-3"
                  />
                  <div>
                    <Badge className="bg-blue-100 text-blue-800 text-xs">КУРЬЕР</Badge>
                  </div>
                </div>

                <nav className="flex-1 px-4 py-4 space-y-2 overflow-y-auto">
                  {courierMenuItems.map((item) => (
                    <button
                      key={item.id}
                      onClick={() => {
                        if (item.id === 'courier-chat') {
                          handleOpenCourierChat();
                        } else {
                          setActiveSection(item.section);
                          setActiveTab(item.id);
                        }
                        setCourierMobileMenuOpen(false); // Закрываем меню после выбора
                      }}
                      className={`w-full flex items-center justify-between px-4 py-3 text-sm font-medium rounded-lg transition-colors ${
                        activeSection === item.section
                          ? 'bg-blue-100 text-blue-700 border border-blue-200'
                          : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
                      }`}
                    >
                      <div className="flex items-center">
                        {item.icon}
                        <span className="ml-3">{item.label}</span>
                      </div>
                      {item.id === 'courier-requests' && courierRequests.length > 0 && (
                        <Badge className="bg-red-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                          {courierRequests.length}
                        </Badge>
                      )}
                      {item.id === 'courier-accepted' && acceptedRequests.length > 0 && (
                        <Badge className="bg-blue-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                          {acceptedRequests.length}
                        </Badge>
                      )}
                      {item.id === 'courier-picked' && pickedRequests.length > 0 && (
                        <Badge className="bg-orange-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                          {pickedRequests.length}
                        </Badge>
                      )}
                    </button>
                  ))}
                </nav>

                {/* Информация о курьере в мобильном меню */}
                <div className="px-4 py-4 border-t border-gray-200">
                  <div className="flex items-center cursor-pointer hover:bg-gray-50 p-2 rounded-lg" onClick={() => {
                    handleOpenCourierProfile();
                    setCourierMobileMenuOpen(false);
                  }}>
                    <User className="h-8 w-8 text-gray-400" />
                    <div className="ml-3">
                      <p className="text-sm font-medium text-gray-900">{user?.full_name}</p>
                      <p className="text-xs text-gray-500">Нажмите для редактирования профиля</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => {
                      handleLogout();
                      setCourierMobileMenuOpen(false);
                    }}
                    variant="outline" 
                    size="sm"
                    className="w-full mt-3"
                  >
                    Выход
                  </Button>
                </div>
              </div>
            </>
          )}
        </div>

        {/* Десктопная версия меню */}
        <div className="hidden md:block h-full bg-white border-r border-gray-200 w-64 flex flex-col fixed left-0 top-0 z-30">
          <div className="flex items-center h-16 px-6 border-b border-gray-200">
            <div className="flex items-center">
              <img 
                src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                alt="Logo" 
                className="h-10 w-auto mr-3"
              />
              <div>
                <Badge className="bg-blue-100 text-blue-800 text-xs">КУРЬЕР</Badge>
              </div>
            </div>
          </div>

          <nav className="flex-1 px-4 py-4 space-y-2 overflow-y-auto">
            {courierMenuItems.map((item) => (
              <button
                key={item.id}
                onClick={() => {
                  if (item.id === 'courier-chat') {
                    handleOpenCourierChat();
                  } else {
                    setActiveSection(item.section);
                    setActiveTab(item.id);
                  }
                }}
                className={`w-full flex items-center justify-between px-4 py-3 text-sm font-medium rounded-lg transition-colors ${
                  activeSection === item.section
                    ? 'bg-blue-100 text-blue-700 border border-blue-200'
                    : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
                }`}
              >
                <div className="flex items-center">
                  {item.icon}
                  <span className="ml-3">{item.label}</span>
                </div>
                {item.id === 'courier-requests' && courierRequests.length > 0 && (
                  <Badge className="bg-red-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                    {courierRequests.length}
                  </Badge>
                )}
                {item.id === 'courier-accepted' && acceptedRequests.length > 0 && (
                  <Badge className="bg-blue-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                    {acceptedRequests.length}
                  </Badge>
                )}
                {item.id === 'courier-picked' && pickedRequests.length > 0 && (
                  <Badge className="bg-orange-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                    {pickedRequests.length}
                  </Badge>
                )}
              </button>
            ))}
          </nav>

          {/* Информация о курьере */}
          <div className="px-4 py-4 border-t border-gray-200">
            <div className="flex items-center cursor-pointer hover:bg-gray-50 p-2 rounded-lg" onClick={handleOpenCourierProfile}>
              <User className="h-8 w-8 text-gray-400" />
              <div className="ml-3">
                <p className="text-sm font-medium text-gray-900">{user?.full_name}</p>
                <p className="text-xs text-gray-500">Нажмите для редактирования</p>
              </div>
            </div>
            <Button
              onClick={handleLogout}
              variant="outline" 
              size="sm"
              className="w-full mt-3"
            >
              Выход
            </Button>
          </div>
        </div>
      </>
    );
  };

  // Боковое меню для админа и оператора склада - УЛУЧШЕННАЯ АДАПТИВНАЯ ВЕРСИЯ
  const SidebarMenu = () => {
    if (user?.role === 'user') return null;

    const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

    const menuItems = [
      {
        id: 'dashboard',
        label: 'Главная',
        icon: <Home className="w-5 h-5" />,
        section: 'dashboard'
      },
      {
        id: 'personal-dashboard',
        label: 'Личный кабинет',
        icon: <User className="w-5 h-5" />,
        section: 'personal-dashboard'
      },
      {
        id: 'users',
        label: 'Пользователи',
        icon: <Users className="w-5 h-5" />,
        section: 'users',
        adminOnly: true,
        subsections: [
          { id: 'users-regular', label: 'Пользователи' },
          { id: 'users-operators', label: 'Операторы склада' },
          { id: 'users-admins', label: 'Администраторы' },
          { id: 'users-couriers', label: 'Курьеры' },
          { id: 'users-create-operator', label: 'Создать оператора' },
          { id: 'users-operator-bindings', label: 'Привязка операторов' },
          { id: 'users-debtors', label: 'Список задолжников' }
        ]
      },
      {
        id: 'operations',
        label: 'Операции',
        icon: <Target className="w-5 h-5" />,
        section: 'operations',
        subsections: [
          { id: 'operations-search', label: 'Поиск груза' },
          { id: 'operations-qr-generate', label: 'Генерация QR кодов' },
          { id: 'operations-placement', label: 'Размещение' },
          { id: 'operations-receive', label: 'Приём груза' }
        ]
      },
      {
        id: 'cargo-management',
        label: 'Грузы',
        icon: <Package className="w-5 h-5" />,
        section: 'cargo-management',
        subsections: [
          { id: 'cargo-accept', label: 'Принимать новый груз' },
          { id: 'cargo-list', label: 'Список грузов' },
          { id: 'cargo-placement', label: 'Размещение груза' },
          { id: 'cargo-pickup-requests', label: 'На Забор' },
          { id: 'cargo-pickup-history', label: 'История забора груза' },
          { id: 'cargo-history', label: 'История грузов' }
        ]
      },
      {
        id: 'warehouses',
        label: 'Склады',
        icon: <Building className="w-5 h-5" />,
        section: 'warehouses',
        subsections: [
          { id: 'warehouses-list', label: 'Список складов' },
          { id: 'warehouses-create', label: 'Создать склад' },
          { id: 'warehouses-manage', label: 'Управление товарами' }
        ]
      },
      {
        id: 'couriers-tracking',
        label: 'Курьеры',
        icon: <Truck className="w-5 h-5" />,
        section: 'couriers-tracking',
        subsections: [
          { id: 'couriers-tracking-map', label: 'Карта отслеживания' },
          { id: 'couriers-tracking-list', label: 'Список курьеров', adminOnly: true },
          { id: 'couriers-inactive', label: 'Неактивные курьеры', adminOnly: true },
          { id: 'couriers-history-analytics', label: 'История и аналитика' }
        ]
      },
      {
        id: 'notifications-management',
        label: 'Уведомления',
        icon: <Bell className="w-5 h-5" />,
        section: 'notifications-management',
        subsections: [
          { id: 'notifications-client-orders', label: `Новые заказы (${newOrdersCount})` },
          { id: 'notifications-requests', label: 'Новые заявки' },
          { id: 'notifications-system', label: 'Уведомления' }
        ]
      },
      {
        id: 'cashier',
        label: 'Касса',
        icon: <DollarSign className="w-5 h-5" />,
        section: 'cashier',
        subsections: [
          { id: 'cashier-payment', label: 'Приём оплаты' },
          { id: 'cashier-unpaid', label: 'Не оплачено' },
          { id: 'cashier-history', label: 'История оплаты' }
        ]
      },
      {
        id: 'logistics',
        label: 'Логистика',
        icon: <Zap className="w-5 h-5" />,
        section: 'logistics',
        subsections: [
          { id: 'logistics-add-transport', label: 'Приём машину' },
          { id: 'logistics-transport-list', label: 'Список транспортов' },
          { id: 'logistics-in-transit', label: 'В пути' },
          { id: 'logistics-arrived', label: 'На место назначение' },
          { id: 'logistics-history', label: 'История Транспортировки' }
        ]
      },
      {
        id: 'finances',
        label: 'Финансы',
        icon: <DollarSign className="w-5 h-5" />,
        section: 'finances',
        adminOnly: true,
        subsections: [
          { id: 'finances-overview', label: 'Обзор' },
          { id: 'finances-transactions', label: 'Транзакции' }
        ]
      },
      {
        id: 'reports',
        label: 'Отчеты',
        icon: <FileText className="w-5 h-5" />,
        section: 'reports',
        subsections: [
          { id: 'reports-cargo', label: 'Отчеты по грузам' },
          { id: 'reports-performance', label: 'Производительность' }
        ]
      }
    ];

    const filteredItems = menuItems.filter(item => 
      !item.adminOnly || user?.role === 'admin'
    );

    return (
      <>
        {/* Мобильная версия меню */}
        <div className="md:hidden">
          {/* Мобильная шапка */}
          <div className="fixed top-0 left-0 right-0 bg-white border-b border-gray-200 p-4 flex items-center justify-between z-50">
            <div className="flex items-center">
              <img 
                src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                alt="Logo" 
                className="h-8 w-auto mr-2"
              />
              <div>
                <Badge className="bg-blue-100 text-blue-800 text-xs">
                  {user?.role === 'admin' ? 'АДМИН' : 'ОПЕРАТОР'}
                </Badge>
              </div>
            </div>
            
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              className="p-2"
            >
              {mobileMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
            </Button>
          </div>

          {/* Мобильное выдвижное меню */}
          {mobileMenuOpen && (
            <div 
              className="fixed inset-0 bg-black bg-opacity-50 z-40"
              onClick={() => setMobileMenuOpen(false)}
            >
              <div 
                className="fixed left-0 top-0 h-full bg-white w-80 shadow-2xl z-50 overflow-y-auto"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="p-6">
                  <div className="flex items-center justify-between mb-8">
                    <div className="flex items-center">
                      <img 
                        src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                        alt="Logo" 
                        className="h-10 w-auto mr-3"
                      />
                      <div>
                        <Badge className="bg-blue-100 text-blue-800 text-xs">
                          {user?.role === 'admin' ? 'АДМИН' : 'ОПЕРАТОР'}
                        </Badge>
                      </div>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setMobileMenuOpen(false)}
                      className="p-1"
                    >
                      <X className="h-5 w-5" />
                    </Button>
                  </div>

                  <nav className="space-y-2">
                    {filteredItems.map((item) => (
                      <div key={item.id}>
                        <button
                          onClick={() => {
                            setActiveSection(item.section);
                            if (item.section === 'warehouses' && user?.role === 'admin') {
                              setActiveTab('warehouses-list');
                            } else if (item.section === 'users' && user?.role === 'admin') {
                              setActiveTab('users-regular');
                            }
                            setMobileMenuOpen(false);
                          }}
                          className={`w-full flex items-center px-4 py-3 rounded-xl transition-colors ${
                            activeSection === item.section
                              ? 'bg-blue-100 text-blue-700 border border-blue-200'
                              : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
                          }`}
                        >
                          {item.icon}
                          <span className="ml-3 font-medium">{item.label}</span>
                        </button>
                        
                        {item.subsections && activeSection === item.section && (
                          <div className="ml-6 mt-2 space-y-1">
                            {item.subsections.map((sub) => (
                              <button
                                key={sub.id}
                                onClick={() => {
                                  setActiveTab(sub.id);
                                  setMobileMenuOpen(false);
                                }}
                                className={`block w-full text-left px-3 py-2 text-sm rounded-lg transition-colors ${
                                  activeTab === sub.id 
                                    ? 'bg-blue-50 text-blue-600 font-medium' 
                                    : 'text-gray-500 hover:text-gray-700 hover:bg-gray-50'
                                }`}
                              >
                                {sub.label}
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                    ))}
                  </nav>

                  {/* Профиль и выход */}
                  <div className="mt-8 pt-6 border-t border-gray-200">
                    <div className="bg-gray-50 p-4 rounded-xl mb-4">
                      <p className="text-sm font-medium text-gray-900">{user?.full_name}</p>
                      <p className="text-xs text-gray-500">{user?.phone}</p>
                    </div>
                    
                    <Button 
                      onClick={() => setContactModal(true)}
                      variant="outline"
                      className="w-full mb-3"
                    >
                      <MessageCircle className="w-4 h-4 mr-2" />
                      Связаться с нами
                    </Button>
                    
                    <Button 
                      onClick={handleLogout} 
                      variant="outline"
                      className="w-full text-red-600 border-red-200 hover:bg-red-50"
                    >
                      Выход
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Десктопная версия меню - улучшенная */}
        <div className={`hidden md:block fixed left-0 top-0 h-full bg-gradient-to-b from-gray-900 to-gray-800 text-white transition-all duration-300 z-40 shadow-2xl ${
          sidebarOpen ? 'w-72' : 'w-16'
        }`}>
          {/* Заголовок меню */}
          <div className="flex items-center justify-between h-16 px-6 bg-gradient-to-r from-blue-600 to-purple-600">
            {sidebarOpen && (
              <div className="flex items-center">
                <img 
                  src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                  alt="Logo" 
                  className="h-8 w-auto mr-3"
                />
                <div>
                  <Badge className="bg-white/20 text-white text-xs">
                    {user?.role === 'admin' ? 'АДМИН' : 'ОПЕРАТОР'}
                  </Badge>
                </div>
              </div>
            )}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="text-white hover:bg-white/10 p-2"
            >
              {sidebarOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
            </Button>
          </div>

          <div className="flex-1 overflow-y-auto">
            <nav className="p-4 space-y-2">
              {filteredItems.map((item) => (
                <div key={item.id}>
                  <button
                    onClick={() => {
                      setActiveSection(item.section);
                      if (item.section === 'warehouses' && user?.role === 'admin') {
                        setActiveTab('warehouses-list');
                      } else if (item.section === 'users' && user?.role === 'admin') {
                        setActiveTab('users-regular');
                      }
                    }}
                    className={`w-full flex items-center px-3 py-3 rounded-xl transition-all duration-200 ${
                      activeSection === item.section
                        ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                        : 'text-gray-300 hover:bg-white/10 hover:text-white'
                    }`}
                  >
                    {item.icon}
                    {sidebarOpen && <span className="ml-3 font-medium">{item.label}</span>}
                  </button>
                  
                  {sidebarOpen && item.subsections && activeSection === item.section && (
                    <div className="ml-4 mt-2 space-y-1 border-l-2 border-white/20 pl-4">
                      {item.subsections.map((sub) => (
                        <button
                          key={sub.id}
                          onClick={() => setActiveTab(sub.id)}
                          className={`block w-full text-left px-3 py-2 text-sm rounded-lg transition-colors ${
                            activeTab === sub.id 
                              ? 'bg-white/20 text-white font-medium' 
                              : 'text-gray-400 hover:text-white hover:bg-white/10'
                          }`}
                        >
                          {sub.label}
                        </button>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </nav>

            {/* Кнопки внизу меню */}
            <div className="p-4 border-t border-white/20">
              {sidebarOpen && (
                <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 mb-4">
                  <p className="text-sm font-medium text-white">{user?.full_name}</p>
                  <p className="text-xs text-gray-300">{user?.phone}</p>
                </div>
              )}
              
              <button
                onClick={() => setContactModal(true)}
                className="w-full flex items-center px-3 py-2 rounded-xl transition-colors text-gray-300 hover:bg-white/10 hover:text-white"
              >
                <MessageCircle className="w-5 h-5" />
                {sidebarOpen && <span className="ml-3">Связаться с нами</span>}
              </button>
              
              <button
                onClick={handleLogout}
                className="w-full flex items-center px-3 py-2 mt-2 rounded-xl transition-colors text-gray-300 hover:bg-red-600/20 hover:text-red-400"
              >
                <Shield className="w-5 h-5" />
                {sidebarOpen && <span className="ml-3">Выход</span>}
              </button>
            </div>
          </div>
        </div>
      </>
    );
  };

  // ИСПРАВЛЕНИЕ: Показ экрана загрузки при инициализации для предотвращения показа старых данных
  if (isInitializing && token) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="flex items-center justify-center mb-6">
            <div className="bg-blue-600 rounded-2xl p-4 shadow-2xl">
              <img 
                src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                alt="TAJLINE.TJ" 
                className="h-12 w-auto"
                onError={(e) => {
                  e.target.style.display = 'none';
                  e.target.nextSibling.style.display = 'block';
                }}
              />
              <div className="hidden">
                <Truck className="h-12 w-12 text-white" />
              </div>
            </div>
          </div>
          <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-800 mb-2">Загрузка...</h2>
          <p className="text-gray-600">Получение данных пользователя</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-800 flex items-center justify-center p-4">
        <div className="w-full max-w-md">
          {/* Заголовок с логотипом */}
          <div className="text-center mb-8">
            <div className="flex items-center justify-center mb-6">
              <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-4 shadow-2xl">
                <img 
                  src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                  alt="TAJLINE.TJ" 
                  className="h-12 w-auto"
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextSibling.style.display = 'block';
                  }}
                />
                <div className="hidden">
                  <Truck className="h-12 w-12 text-white" />
                </div>
              </div>
            </div>
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">TAJLINE</h1>
            <p className="text-blue-100 text-sm md:text-base">Грузоперевозки Москва-Таджикистан</p>
          </div>

          {/* Форма входа */}
          <div className="bg-white/95 backdrop-blur-xl rounded-2xl shadow-2xl overflow-hidden">
            <Tabs defaultValue="login" className="w-full">
              <TabsList className="grid w-full grid-cols-2 bg-gray-50/80 p-1 m-4 rounded-xl">
                <TabsTrigger 
                  value="login" 
                  className="rounded-lg data-[state=active]:bg-white data-[state=active]:shadow-sm font-medium"
                >
                  Вход
                </TabsTrigger>
                <TabsTrigger 
                  value="register"
                  className="rounded-lg data-[state=active]:bg-white data-[state=active]:shadow-sm font-medium"
                >
                  Регистрация
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="login" className="p-6 pt-2">
                <form onSubmit={handleLogin} className="space-y-5">
                  <div className="text-center mb-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">Добро пожаловать!</h2>
                    <p className="text-gray-600 text-sm">Войдите в свою учетную запись</p>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="login-phone" className="text-gray-700 font-medium">Номер телефона</Label>
                      <div className="relative mt-2">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <Phone className="h-5 w-5 text-gray-400" />
                        </div>
                        <Input
                          id="login-phone"
                          type="tel"
                          placeholder="+7XXXXXXXXXX"
                          value={loginForm.phone}
                          onChange={(e) => setLoginForm({...loginForm, phone: e.target.value})}
                          className="pl-10 h-12 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-blue-500"
                          required
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="login-password" className="text-gray-700 font-medium">Пароль</Label>
                      <div className="relative mt-2">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <Shield className="h-5 w-5 text-gray-400" />
                        </div>
                        <Input
                          id="login-password"
                          type="password"
                          placeholder="Введите пароль"
                          value={loginForm.password}
                          onChange={(e) => setLoginForm({...loginForm, password: e.target.value})}
                          className="pl-10 h-12 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-blue-500"
                          required
                        />
                      </div>
                    </div>
                  </div>
                  
                  <Button 
                    type="submit" 
                    disabled={isLoggingIn}
                    className="w-full h-12 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200"
                  >
                    {isLoggingIn ? (
                      <div className="flex items-center justify-center">
                        <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent mr-2"></div>
                        Вход...
                      </div>
                    ) : (
                      'Войти в систему'
                    )}
                  </Button>
                  
                  {/* Тестовая кнопка для проверки модальных окон */}
                  <Button 
                    type="button"
                    variant="outline"
                    className="w-full h-10 rounded-xl"
                    onClick={() => {
                      console.log('🧪 TEST: Opening test modal');
                      setTestModal(true);
                    }}
                  >
                    🧪 Тест модального окна
                  </Button>
                </form>
              </TabsContent>
              
              <TabsContent value="register" className="p-6 pt-2">
                <form onSubmit={handleRegister} className="space-y-5">
                  <div className="text-center mb-6">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">Создать аккаунт</h2>
                    <p className="text-gray-600 text-sm">Зарегистрируйтесь для начала работы</p>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="register-name" className="text-gray-700 font-medium">Полное имя</Label>
                      <div className="relative mt-2">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <User className="h-5 w-5 text-gray-400" />
                        </div>
                        <Input
                          id="register-name"
                          placeholder="Введите ФИО"
                          value={registerForm.full_name}
                          onChange={(e) => setRegisterForm({...registerForm, full_name: e.target.value})}
                          className="pl-10 h-12 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-blue-500"
                          required
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="register-phone" className="text-gray-700 font-medium">Номер телефона</Label>
                      <div className="relative mt-2">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <Phone className="h-5 w-5 text-gray-400" />
                        </div>
                        <Input
                          id="register-phone"
                          type="tel"
                          placeholder="+7XXXXXXXXXX"
                          value={registerForm.phone}
                          onChange={(e) => setRegisterForm({...registerForm, phone: e.target.value})}
                          className="pl-10 h-12 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-blue-500"
                          required
                        />
                      </div>
                    </div>
                    
                    <div>
                      <Label htmlFor="register-password" className="text-gray-700 font-medium">Пароль</Label>
                      <div className="relative mt-2">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <Shield className="h-5 w-5 text-gray-400" />
                        </div>
                        <Input
                          id="register-password"
                          type="password"
                          placeholder="Минимум 6 символов"
                          value={registerForm.password}
                          onChange={(e) => setRegisterForm({...registerForm, password: e.target.value})}
                          className="pl-10 h-12 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-blue-500"
                          required
                        />
                      </div>
                    </div>
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full h-12 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-[1.02] transition-all duration-200"
                  >
                    Создать аккаунт
                  </Button>
                </form>
              </TabsContent>
            </Tabs>
          </div>
          
          {/* Дополнительная информация */}
          <div className="text-center mt-8">
            <p className="text-blue-100 text-sm">
              © 2024 TAJLINE.TJ - Надежные грузоперевозки
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Боковое меню */}
      {user && (user.role === 'admin' || user.role === 'warehouse_operator') && <SidebarMenu />}
      {user && user.role === 'courier' && <CourierSidebarMenu />}
      
      {/* Основной контент */}
      <div className={`${
        user && (user.role === 'admin' || user.role === 'warehouse_operator') 
          ? 'md:ml-72 transition-all duration-300'  // На мобиле без отступов, на десктопе с отступом
          : user && user.role === 'courier'
            ? 'md:ml-64 pt-16 md:pt-0'  // Курьер: мобиле отступ сверху для header, десктоп с боковым меню
            : ''
      }`}>
        
        {/* Header - адаптивный для админов/операторов */}
        {user && user.role !== 'courier' && (
          <header className="bg-white shadow-sm border-b sticky top-0 z-30">
            <div className="px-4 md:px-6 py-4">
              <div className="flex items-center justify-between">
                {/* Логотип и название - скрыто на мобиле если есть боковое меню */}
                <div className="flex items-center">
                  <div className="md:flex items-center mr-6 hidden">
                    <img 
                      src="https://customer-assets.emergentagent.com/job_tajline-courier/artifacts/st3odbr7_Logo_line.png" 
                      alt="TAJLINE.TJ" 
                      className="h-10 w-auto mr-3"
                      onError={(e) => {
                        e.target.style.display = 'none';
                        e.target.nextSibling.style.display = 'flex';
                      }}
                    />
                    <div className="hidden">
                      <div className="bg-blue-600 text-white p-2 rounded-lg mr-3">
                        <Truck className="h-8 w-8" />
                      </div>
                      <div>
                        <h1 className="text-2xl font-bold text-blue-600">TAJLINE.TJ</h1>
                        <p className="text-sm text-gray-600">Грузоперевозки Москва-Таджикистан</p>
                      </div>
                    </div>
                  </div>
                  
                  {/* Заголовок страницы на мобиле */}
                  <div className="md:hidden">
                    <h1 className="text-lg font-semibold text-gray-900">
                      {activeSection === 'dashboard' ? 'Главная' :
                       activeSection === 'users' ? 'Пользователи' :
                       activeSection === 'cargo-management' ? 'Грузы' :
                       activeSection === 'warehouses' ? 'Склады' :
                       activeSection === 'operations' ? 'Операции' :
                       activeSection === 'notifications-management' ? 'Уведомления' :
                       activeSection === 'cashier' ? 'Касса' :
                       activeSection === 'logistics' ? 'Логистика' :
                       activeSection === 'finances' ? 'Финансы' :
                       activeSection === 'reports' ? 'Отчеты' :
                       'Панель управления'}
                    </h1>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2 md:space-x-4">
                  <div className="flex items-center space-x-2">
                    {getRoleIcon(user.role)}
                    <div className="hidden md:flex flex-col">
                      <span className="text-sm font-medium">{user.full_name}</span>
                      {user.user_number && (
                      <span className="text-xs text-gray-500">№ {user.user_number}</span>
                    )}
                  </div>
                  <Badge variant="outline">{getRoleLabel(user.role)}</Badge>
                </div>
                
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <div className="relative cursor-pointer">
                      <Bell className="h-5 w-5 text-gray-600 hover:text-gray-800 transition-colors" />
                      {notifications.filter(n => n.status === 'unread').length > 0 && (
                        <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                          {notifications.filter(n => n.status === 'unread').length}
                        </span>
                      )}
                    </div>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-80 max-h-96 overflow-y-auto">
                    <div className="px-3 py-2 border-b">
                      <h3 className="font-semibold text-sm">Уведомления</h3>
                    </div>
                    
                    {/* Уведомления с новой системой управления */}
                    {notifications.length > 0 && (
                      <>
                        <div className="px-3 py-1 bg-gray-50">
                          <p className="text-xs font-medium text-gray-600">Уведомления</p>
                        </div>
                        {notifications.slice(0, 8).map((notification) => (
                          <div key={`notification-${notification.id}`} className={`p-3 border-b hover:bg-gray-50 ${notification.status === 'unread' ? 'bg-blue-50 border-l-4 border-l-blue-400' : ''}`}>
                            <div className="w-full">
                              <p className={`text-sm leading-tight ${notification.status === 'unread' ? 'font-medium' : ''}`}>
                                {notification.message}
                              </p>
                              <p className="text-xs text-gray-500 mt-1">
                                {new Date(notification.created_at).toLocaleString('ru-RU')}
                              </p>
                              
                              {/* Функциональные кнопки */}
                              <div className="flex space-x-1 mt-2">
                                {notification.status === 'unread' && (
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleMarkNotificationAsRead(notification.id);
                                    }}
                                    className="text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200 transition-colors"
                                  >
                                    Прочитано
                                  </button>
                                )}
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    handleViewNotificationDetails(notification.id);
                                  }}
                                  className="text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
                                >
                                  Посмотреть
                                </button>
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    handleDeleteNotification(notification.id);
                                  }}
                                  className="text-xs px-2 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors"
                                >
                                  Удалить
                                </button>
                              </div>
                            </div>
                          </div>
                        ))}
                        {notifications.length > 8 && (
                          <div className="px-3 py-2 text-xs text-gray-500 text-center border-t">
                            И еще {notifications.length - 8} уведомлений...
                          </div>
                        )}
                      </>
                    )}
                    
                    {/* Пустое состояние */}
                    {notifications.length === 0 && (
                      <div className="p-4 text-center text-gray-500">
                        <Bell className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                        <p className="text-sm">Нет уведомлений</p>
                      </div>
                    )}
                  </DropdownMenuContent>
                </DropdownMenu>
                
                <Button variant="outline" onClick={handleLogout}>
                  Выйти
                </Button>
              </div>
            </div>
          </div>
        </header>
        )}

        {/* Main Content */}
        <main className="container mx-auto px-4 py-8">
          {/* Cargo Placement Page */}
          {currentPage === 'cargo-placement' ? (
            <div className="min-h-screen bg-gray-50">
              {/* Page Header */}
              <div className="bg-white shadow-sm rounded-lg mb-6 p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={closeCargoPlacementPage}
                      className="mr-4 text-gray-600 hover:text-gray-800"
                    >
                      <ArrowLeft className="h-4 w-4 mr-2" />
                      Назад
                    </Button>
                    <div>
                      <h1 className="text-2xl font-bold text-gray-900">Размещение груза</h1>
                      <p className="text-gray-600 mt-1">Сканируйте QR коды грузов и ячеек для размещения</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Cargo Placement Content */}
              <div className="max-w-4xl mx-auto">
                {/* Progress Steps */}
                <div className="mb-8">
                  <div className="flex items-center justify-center space-x-8">
                    <div className={`flex items-center ${placementStep === 'scan-cargo' || placementStep === 'scan-cell' ? 'text-blue-600' : 'text-gray-400'}`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${placementStep === 'scan-cargo' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
                        1
                      </div>
                      <span className="ml-2 font-medium">Сканировать груз</span>
                    </div>
                    <div className="h-px bg-gray-300 flex-1 max-w-32"></div>
                    <div className={`flex items-center ${placementStep === 'scan-cell' ? 'text-blue-600' : 'text-gray-400'}`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${placementStep === 'scan-cell' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
                        2
                      </div>
                      <span className="ml-2 font-medium">Сканировать ячейку</span>
                    </div>
                  </div>
                </div>

                {/* Current Step Content */}
                <>
                <Card 
                  className={`mb-6 ${placementStep === 'scan-cargo' ? 'react-visible' : 'react-hidden'}`}
                >
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <QrCode className="mr-2 h-5 w-5" />
                      Шаг 1: Сканирование груза
                    </CardTitle>
                    <CardDescription>
                      Наведите камеру на QR код груза для автоматического размещения
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                      {/* Isolated Camera Scanner Container to prevent React conflicts */}
                      <div className="relative">
                        <div className="bg-black rounded-lg p-4 mb-4">
                          <div 
                            ref={qrContainerRef}
                            className="w-full min-h-[400px] flex items-center justify-center"
                            style={{ 
                              display: 'block', 
                              minHeight: '400px', 
                              backgroundColor: '#000000',
                              borderRadius: '8px' 
                            }}
                          >
                            {!scannerActive && (
                              <div className="text-white text-center p-8">
                                <Camera className="mx-auto h-16 w-16 mb-4 text-gray-400" />
                                <p className="text-lg font-medium mb-2">Изолированная камера готова</p>
                                <p className="text-sm text-gray-300">
                                  Нажмите кнопку ниже для запуска изолированного сканера
                                </p>
                              </div>
                            )}
                          </div>
                        </div>
                        
                        {/* Camera Controls - isolated from React lifecycle */}
                        <div className="flex justify-center space-x-4 mb-4">
                          {availablePlacementCameras.length > 1 && scannerActive && (
                            <Button 
                              onClick={switchPlacementCamera}
                              variant="outline"
                              size="sm"
                            >
                              <Camera className="mr-2 h-4 w-4" />
                              Переключить камеру
                            </Button>
                          )}
                          
                          {scannerActive && (
                            <Button 
                              onClick={async () => {
                                await completeQrCleanup("User Stop");
                              }}
                              variant="outline"
                              size="sm"
                            >
                              <X className="mr-2 h-4 w-4" />
                              Остановить камеру
                            </Button>
                          )}
                        </div>
                      </div>

                      <div 
                        className={`space-y-4 ${!scannerActive ? 'react-visible' : 'react-hidden'}`}
                      >
                          {/* Camera unavailable message with enhanced mobile retry */}
                          <div 
                            className={`space-y-3 ${placementActive ? 'react-visible' : 'react-hidden'}`}
                          >
                              <div className="text-center p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                                <div className="text-yellow-800 font-medium mb-2">
                                  📱 Камера недоступна
                                </div>
                                <p className="text-sm text-yellow-700 mb-4">
                                  Для сканирования QR кодов на мобильном устройстве попробуйте:
                                </p>
                                
                                {/* Mobile-specific camera retry buttons */}
                                <div className="space-y-2">
                                  <Button 
                                    onClick={async () => {
                                      console.log('🔄 Обычная попытка с изолированной очисткой...');
                                      await completeQrCleanup("Normal Retry");
                                      
                                      await new Promise(resolve => setTimeout(resolve, 1000));
                                      
                                      const cameraAvailable = await checkCameraAvailability();
                                      if (cameraAvailable) {
                                        showAlert('✅ Камера найдена! Запуск изолированного сканера...', 'success');
                                        await new Promise(resolve => setTimeout(resolve, 2000));
                                        try {
                                          await startQRScannerForPlacement();
                                        } catch (error) {
                                          console.error('❌ Ошибка запуска изолированного сканера:', error);
                                        }
                                      }
                                    }}
                                    size="sm"
                                    variant="outline"
                                    className="w-full text-xs bg-white text-blue-600 border-blue-300 hover:bg-blue-50"
                                  >
                                    <RefreshCw className="mr-1 h-3 w-3" />
                                    Попробовать снова
                                  </Button>
                                  
                                  <Button 
                                    onClick={async () => {
                                      console.log('🔧 ИЗОЛИРОВАННЫЙ принудительный запуск мобильной камеры...');
                                      showAlert('🔧 Изолированный принудительный запуск...', 'info');
                                      
                                      // Complete isolation cleanup first
                                      await completeQrCleanup("Force Isolated Retry");
                                      
                                      // Wait longer for complete cleanup
                                      await new Promise(resolve => setTimeout(resolve, 3000));
                                      
                                      // Direct isolated scanner start without availability check
                                      try {
                                        console.log('🚀 Принудительный запуск изолированного сканера...');
                                        await startQRScannerForPlacement();
                                        showAlert('🎉 Изолированный принудительный запуск успешен!', 'success');
                                      } catch (error) {
                                        console.error('❌ Изолированный принудительный запуск не удался:', error);
                                        showAlert('❌ Изолированный принудительный запуск не удался. Используйте ручной ввод.', 'error');
                                      }
                                    }}
                                    size="sm"
                                    variant="default"
                                    className="w-full text-xs bg-green-600 text-white hover:bg-green-700"
                                  >
                                    <Camera className="mr-1 h-3 w-3" />
                                    Принудительный запуск
                                  </Button>
                                </div>
                                
                                <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded text-xs text-blue-800">
                                  💡 <strong>Инструкция для телефона:</strong>
                                  <br />• Нажмите "Разрешить" при запросе камеры
                                  <br />• Закройте другие приложения камеры
                                  <br />• Попробуйте обновить страницу (F5)
                                  <br />• Используйте Chrome или Safari
                                </div>
                              </div>
                            </div>

                          {/* Manual Input Section */}
                          {placementActive && (
                          <div className="bg-white border rounded-lg p-4">
                            <h3 className="font-medium mb-4 flex items-center">
                              <Edit3 className="mr-2 h-4 w-4" />
                              Ручной ввод данных
                            </h3>
                            
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                              {/* Cargo Number Input */}
                              <div>
                                <Label htmlFor="manual-cargo-full">Номер груза</Label>
                                <Input
                                  id="manual-cargo-full"
                                  placeholder="Например: TEMP-123456"
                                  value={manualCargoNumber}
                                  onChange={(e) => {
                                    setManualCargoNumber(e.target.value);
                                    // Add validation logic here if needed
                                  }}
                                  className="mt-1"
                                />
                              </div>
                              
                              {/* Cell Code Input */}
                              <div>
                                <Label htmlFor="manual-cell-full">Код ячейки</Label>
                                <Input
                                  id="manual-cell-full"
                                  placeholder="Например: W001-Б1-П1-Я1"
                                  value={manualCellCode}
                                  onChange={(e) => setManualCellCode(e.target.value)}
                                  className="mt-1"
                                />
                              </div>
                            </div>
                            
                            {/* Available Cells Display */}
                            {availableCellsForPlacement.length > 0 && (
                              <div className="mt-4">
                                <h4 className="font-medium mb-2">Доступные ячейки:</h4>
                                <div className="max-h-32 overflow-y-auto">
                                  {availableCellsForPlacement.slice(0, 10).map((cell, index) => (
                                    <div 
                                      key={index} 
                                      className="text-sm p-2 bg-gray-50 rounded border mb-1 cursor-pointer hover:bg-gray-100"
                                      onClick={() => setManualCellCode(cell.cell_code)}
                                    >
                                      <div className="font-mono">{cell.cell_code}</div>
                                      <div className="text-gray-600">{cell.location_description}</div>
                                    </div>
                                  ))}
                                  {availableCellsForPlacement.length > 10 && (
                                    <div className="text-sm text-gray-500 text-center">
                                      ... и еще {availableCellsForPlacement.length - 10} ячеек
                                    </div>
                                  )}
                                </div>
                              </div>
                            )}
                            
                            {/* Manual Placement Button */}
                            <div className="mt-4">
                              <Button 
                                onClick={handleManualPlacement}
                                className="w-full bg-green-600 hover:bg-green-700"
                                disabled={!manualCargoNumber.trim() || !manualCellCode.trim()}
                              >
                                <Package className="mr-2 h-4 w-4" />
                                Разместить вручную
                              </Button>
                            </div>
                          </div>
                          )}
                      </div>
                    </CardContent>
                  </Card>

                  {/* Placement Statistics */}
                  <Card 
                    className={`mb-6 ${placementStatistics ? 'react-visible' : 'react-hidden'}`}
                  >
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <BarChart3 className="mr-2 h-5 w-5" />
                        Статистика размещения
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div className="text-center p-3 bg-blue-50 rounded-lg">
                          <div className="text-2xl font-bold text-blue-600">{placementStatistics?.today_placements || 0}</div>
                          <div className="text-sm text-gray-600">Сегодня</div>
                        </div>
                        <div className="text-center p-3 bg-green-50 rounded-lg">
                          <div className="text-2xl font-bold text-green-600">{placementStatistics?.session_placements || 0}</div>
                          <div className="text-sm text-gray-600">За сессию</div>
                        </div>
                        <div className="text-center p-3 bg-orange-50 rounded-lg">
                          <div className="text-2xl font-bold text-orange-600">{placementStatistics?.recent_placements || 0}</div>
                          <div className="text-sm text-gray-600">Недавних</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                {/* Action Buttons */}
                <div className="flex justify-center space-x-4">
                  <Button 
                    onClick={closeCargoPlacementPage}
                    variant="outline"
                    size="lg"
                  >
                    <X className="mr-2 h-4 w-4" />
                    Завершить размещение
                  </Button>
                </div>
                </>
              </div>
            </div>
          ) : 
          
          /* Main content for different user roles */
          user?.role === 'user' ? (
            <div className="space-y-6">
              {/* Client Dashboard Header */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <img 
                    src="/logo.png" 
                    alt="TAJLINE.TJ" 
                    className="h-12 w-auto"
                    onError={(e) => {
                      e.target.style.display = 'none';
                      e.target.nextSibling.style.display = 'block';
                    }}
                  />
                  <div className="hidden">
                    <h1 className="text-3xl font-bold text-gray-900">TAJLINE.TJ</h1>
                  </div>
                  <div>
                    <h1 className="text-3xl font-bold text-gray-900">Добро пожаловать, {user.full_name}!</h1>
                    <p className="text-gray-600 mt-1">Ваш личный кабинет для управления грузами</p>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <Button 
                    variant="outline" 
                    onClick={openEditProfile}
                    className="text-blue-600 hover:text-blue-700"
                  >
                    <Settings className="mr-2 h-4 w-4" />
                    Редактировать профиль
                  </Button>
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      fetchClientDashboard();
                      fetchClientCargo();
                    }}
                  >
                    <Package className="mr-2 h-4 w-4" />
                    Обновить
                  </Button>
                </div>
              </div>

              {/* Client Dashboard Stats */}
              {clientDashboard && (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center">
                        <Package className="h-8 w-8 text-blue-600" />
                        <div className="ml-4">
                          <p className="text-sm font-medium text-gray-600">Всего грузов</p>
                          <p className="text-2xl font-bold text-gray-900">
                            {clientDashboard.cargo_summary?.total_cargo || 0}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center">
                        <Clock className="h-8 w-8 text-yellow-600" />
                        <div className="ml-4">
                          <p className="text-sm font-medium text-gray-600">В пути</p>
                          <p className="text-2xl font-bold text-gray-900">
                            {clientDashboard.cargo_summary?.status_breakdown?.in_transit || 0}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center">
                        <CheckCircle className="h-8 w-8 text-green-600" />
                        <div className="ml-4">  
                          <p className="text-sm font-medium text-gray-600">Доставлено</p>
                          <p className="text-2xl font-bold text-gray-900">
                            {clientDashboard.cargo_summary?.status_breakdown?.delivered || 0}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center">
                        <CreditCard className="h-8 w-8 text-red-600" />
                        <div className="ml-4">
                          <p className="text-sm font-medium text-gray-600">К оплате</p>
                          <p className="text-2xl font-bold text-gray-900">
                            {clientDashboard.cargo_summary?.unpaid_cargo_count || 0}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Client Navigation Tabs */}
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="grid w-full grid-cols-5">
                  <TabsTrigger value="dashboard" className="flex items-center">
                    <Home className="mr-2 h-4 w-4" />
                    Главная
                  </TabsTrigger>
                  <TabsTrigger value="create-order" className="flex items-center">
                    <Plus className="mr-2 h-4 w-4" />
                    Оформить груз
                  </TabsTrigger>
                  <TabsTrigger value="cargo" className="flex items-center">
                    <Package className="mr-2 h-4 w-4" />
                    Мои грузы
                  </TabsTrigger>
                  <TabsTrigger value="requests" className="flex items-center">
                    <FileText className="mr-2 h-4 w-4" />
                    Заявки
                  </TabsTrigger>
                  <TabsTrigger value="contact" className="flex items-center">
                    <MessageCircle className="mr-2 h-4 w-4" />
                    Связь
                  </TabsTrigger>
                </TabsList>

                {/* Dashboard Tab */}
                <TabsContent value="dashboard" className="space-y-6">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Recent Cargo */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Package className="mr-2 h-5 w-5" />
                          Последние грузы
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {clientDashboard?.recent_cargo && clientDashboard.recent_cargo.length > 0 ? (
                            clientDashboard.recent_cargo.slice(0, 3).map((cargo) => (
                              <div key={cargo.id} className="flex items-center justify-between p-3 border rounded-lg">
                                <div>
                                  <div className="font-medium">#{cargo.cargo_number}</div>
                                  <div className="text-sm text-gray-600">{cargo.cargo_name || 'Груз'}</div>
                                  <div className="text-xs text-gray-500">
                                    {cargo.recipient_full_name}
                                  </div>
                                </div>
                                <Badge variant={cargo.status === 'delivered' ? 'default' : 'outline'}>
                                  {cargo.status}
                                </Badge>
                              </div>
                            ))
                          ) : (
                            <p className="text-gray-500 text-center py-4">Нет последних грузов</p>
                          )}
                        </div>
                        <div className="mt-4">
                          <Button 
                            variant="outline" 
                            className="w-full" 
                            onClick={() => {
                              setActiveTab('cargo');
                              fetchClientCargo();
                            }}
                          >
                            Посмотреть все грузы
                          </Button>
                        </div>
                      </CardContent>
                    </Card>

                    {/* Unpaid Cargo */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <CreditCard className="mr-2 h-5 w-5 text-red-600" />
                          К оплате
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {clientDashboard?.unpaid_cargo && clientDashboard.unpaid_cargo.length > 0 ? (
                            clientDashboard.unpaid_cargo.slice(0, 3).map((cargo) => (
                              <div key={cargo.id} className="flex items-center justify-between p-3 border rounded-lg bg-red-50">
                                <div>
                                  <div className="font-medium">#{cargo.cargo_number}</div>
                                  <div className="text-sm text-gray-600">{cargo.cargo_name || 'Груз'}</div>
                                  <div className="text-sm font-medium text-red-600">
                                    {cargo.declared_value} ₽
                                  </div>
                                </div>
                                <Button size="sm" variant="outline">
                                  Оплатить
                                </Button>
                              </div>
                            ))
                          ) : (
                            <p className="text-gray-500 text-center py-4">Все грузы оплачены!</p>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Quick Actions */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Быстрые действия</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        <Button 
                          className="h-20 flex-col" 
                          variant="outline"
                          onClick={() => setActiveTab('create-order')}
                        >
                          <Plus className="h-6 w-6 mb-2" />
                          Оформить груз
                        </Button>
                        <Button 
                          className="h-20 flex-col" 
                          variant="outline"
                          onClick={() => setActiveTab('cargo')}
                        >
                          <Package className="h-6 w-6 mb-2" />
                          Отследить груз
                        </Button>
                        <Button 
                          className="h-20 flex-col" 
                          variant="outline"
                          onClick={() => setActiveTab('contact')}
                        >
                          <MessageCircle className="h-6 w-6 mb-2" />
                          Связаться с нами
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>

                {/* Create Cargo Order Tab */}
                <TabsContent value="create-order" className="space-y-6">
                  <div className="max-w-4xl mx-auto">
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Plus className="mr-2 h-5 w-5 text-blue-600" />
                          Оформление груза
                        </CardTitle>
                        <CardDescription>
                          Рассчитайте стоимость и оформите груз для доставки
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <form onSubmit={handleCreateCargoOrder} className="space-y-6">
                          {/* Основная информация о грузе */}
                          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-gray-900 border-b pb-2">
                                Информация о грузе
                              </h3>
                              
                              <div>
                                <Label htmlFor="cargo_name">Название груза *</Label>
                                <Input
                                  id="cargo_name"
                                  value={cargoOrderForm.cargo_name}
                                  onChange={(e) => setCargoOrderForm({...cargoOrderForm, cargo_name: e.target.value})}
                                  placeholder="Документы, одежда, подарки..."
                                  required
                                />
                              </div>

                              <div>
                                <Label htmlFor="description">Описание содержимого *</Label>
                                <Textarea
                                  id="description"
                                  value={cargoOrderForm.description}
                                  onChange={(e) => setCargoOrderForm({...cargoOrderForm, description: e.target.value})}
                                  placeholder="Подробное описание содержимого груза"
                                  required
                                />
                              </div>

                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <Label htmlFor="weight">Вес (кг) *</Label>
                                  <Input
                                    id="weight"
                                    type="number"
                                    step="0.1"
                                    min="0.1"
                                    max="10000"
                                    value={cargoOrderForm.weight}
                                    onChange={(e) => {
                                      setCargoOrderForm({...cargoOrderForm, weight: e.target.value});
                                      setCostCalculation(null);
                                    }}
                                    placeholder="5.0"
                                    required
                                  />
                                </div>
                                <div>
                                  <Label htmlFor="declared_value">Объявленная стоимость (₽) *</Label>
                                  <Input
                                    id="declared_value"
                                    type="number"
                                    min="100"
                                    max="10000000"
                                    value={cargoOrderForm.declared_value}
                                    onChange={(e) => {
                                      setCargoOrderForm({...cargoOrderForm, declared_value: e.target.value});
                                      setCostCalculation(null);
                                    }}
                                    placeholder="25000"
                                    required
                                  />
                                </div>
                              </div>

                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <Label htmlFor="route">Маршрут *</Label>
                                  <Select 
                                    value={cargoOrderForm.route} 
                                    onValueChange={(value) => {
                                      handleRouteChange(value); // Используем новую функцию
                                      setCostCalculation(null);
                                    }}
                                  >
                                    <SelectTrigger>
                                      <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                      {deliveryOptions?.routes?.map((route) => (
                                        <SelectItem key={route.value} value={route.value}>
                                          {route.label} ({route.base_days} дней)
                                        </SelectItem>
                                      ))}
                                    </SelectContent>
                                  </Select>
                                </div>
                                <div>
                                  <Label htmlFor="delivery_type">Тип доставки *</Label>
                                  <Select 
                                    value={cargoOrderForm.delivery_type} 
                                    onValueChange={(value) => {
                                      setCargoOrderForm({...cargoOrderForm, delivery_type: value});
                                      setCostCalculation(null);
                                    }}
                                  >
                                    <SelectTrigger>
                                      <SelectValue />
                                    </SelectTrigger>
                                    <SelectContent>
                                      {deliveryOptions?.delivery_types?.map((type) => (
                                        <SelectItem key={type.value} value={type.value}>
                                          {type.label}
                                        </SelectItem>
                                      ))}
                                    </SelectContent>
                                  </Select>
                                </div>
                              </div>
                            </div>

                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-gray-900 border-b pb-2">
                                Информация о получателе
                              </h3>
                              
                              <div>
                                <Label htmlFor="recipient_full_name">ФИО получателя *</Label>
                                <Input
                                  id="recipient_full_name"
                                  value={cargoOrderForm.recipient_full_name}
                                  onChange={(e) => setCargoOrderForm({...cargoOrderForm, recipient_full_name: e.target.value})}
                                  placeholder="Алиев Фарход Рахимович"
                                  required
                                />
                              </div>

                              <div>
                                <Label htmlFor="recipient_phone">Телефон получателя *</Label>
                                <Input
                                  id="recipient_phone"
                                  type="tel"
                                  value={cargoOrderForm.recipient_phone}
                                  onChange={(e) => setCargoOrderForm({...cargoOrderForm, recipient_phone: e.target.value})}
                                  placeholder="+992901234567"
                                  required
                                />
                              </div>

                              <div>
                                <Label htmlFor="recipient_address">Адрес получателя *</Label>
                                <Input
                                  id="recipient_address"
                                  value={cargoOrderForm.recipient_address}
                                  onChange={(e) => setCargoOrderForm({...cargoOrderForm, recipient_address: e.target.value})}
                                  placeholder="ул. Рудаки, 15, кв. 25"
                                  required
                                />
                              </div>

                              <div>
                                <Label htmlFor="recipient_city">Город получателя *</Label>
                                <Input
                                  id="recipient_city"
                                  value={cargoOrderForm.recipient_city}
                                  onChange={(e) => setCargoOrderForm({...cargoOrderForm, recipient_city: e.target.value})}
                                  placeholder="Душанбе"
                                  required
                                />
                              </div>
                            </div>
                          </div>

                          {/* Дополнительные услуги */}
                          <div className="border-t pt-6">
                            <h3 className="text-lg font-semibold text-gray-900 mb-4">
                              Дополнительные услуги
                            </h3>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                              {/* Страхование */}
                              <div className="flex items-center space-x-2 p-4 border rounded-lg">
                                <input
                                  type="checkbox"
                                  id="insurance_requested"
                                  checked={cargoOrderForm.insurance_requested}
                                  onChange={(e) => {
                                    setCargoOrderForm({
                                      ...cargoOrderForm, 
                                      insurance_requested: e.target.checked,
                                      insurance_value: e.target.checked ? cargoOrderForm.declared_value : ''
                                    });
                                    setCostCalculation(null);
                                  }}
                                  className="rounded"
                                />
                                <div className="flex-1">
                                  <Label htmlFor="insurance_requested" className="font-medium">
                                    Страхование
                                  </Label>
                                  <p className="text-sm text-gray-600">
                                    0.5% от стоимости, мин. 500 ₽
                                  </p>
                                  {cargoOrderForm.insurance_requested && (
                                    <Input
                                      type="number"
                                      value={cargoOrderForm.insurance_value}
                                      onChange={(e) => {
                                        setCargoOrderForm({...cargoOrderForm, insurance_value: e.target.value});
                                        setCostCalculation(null);
                                      }}
                                      placeholder="Сумма страхования"
                                      className="mt-2"
                                    />
                                  )}
                                </div>
                              </div>

                              {/* Упаковка */}
                              <div className="flex items-center space-x-2 p-4 border rounded-lg">
                                <input
                                  type="checkbox"
                                  id="packaging_service"
                                  checked={cargoOrderForm.packaging_service}
                                  onChange={(e) => {
                                    setCargoOrderForm({...cargoOrderForm, packaging_service: e.target.checked});
                                    setCostCalculation(null);
                                  }}
                                  className="rounded"
                                />
                                <div>
                                  <Label htmlFor="packaging_service" className="font-medium">
                                    Упаковка
                                  </Label>
                                  <p className="text-sm text-gray-600">
                                    Профессиональная упаковка - 800 ₽
                                  </p>
                                </div>
                              </div>

                              {/* Забор на дому */}
                              <div className="flex items-center space-x-2 p-4 border rounded-lg">
                                <input
                                  type="checkbox"
                                  id="home_pickup"
                                  checked={cargoOrderForm.home_pickup}
                                  onChange={(e) => {
                                    setCargoOrderForm({...cargoOrderForm, home_pickup: e.target.checked});
                                    setCostCalculation(null);
                                  }}
                                  className="rounded"
                                />
                                <div>
                                  <Label htmlFor="home_pickup" className="font-medium">
                                    Забор на дому
                                  </Label>
                                  <p className="text-sm text-gray-600">
                                    Заберем груз по адресу - 1500 ₽
                                  </p>
                                </div>
                              </div>

                              {/* Доставка на дом */}
                              <div className="flex items-center space-x-2 p-4 border rounded-lg">
                                <input
                                  type="checkbox"
                                  id="home_delivery"
                                  checked={cargoOrderForm.home_delivery}
                                  onChange={(e) => {
                                    setCargoOrderForm({...cargoOrderForm, home_delivery: e.target.checked});
                                    setCostCalculation(null);
                                  }}
                                  className="rounded"
                                />
                                <div>
                                  <Label htmlFor="home_delivery" className="font-medium">
                                    Доставка на дом
                                  </Label>
                                  <p className="text-sm text-gray-600">
                                    Доставим груз получателю - 1200 ₽
                                  </p>
                                </div>
                              </div>

                              {/* Хрупкий груз */}
                              <div className="flex items-center space-x-2 p-4 border rounded-lg">
                                <input
                                  type="checkbox"
                                  id="fragile"
                                  checked={cargoOrderForm.fragile}
                                  onChange={(e) => {
                                    setCargoOrderForm({...cargoOrderForm, fragile: e.target.checked});
                                    setCostCalculation(null);
                                  }}
                                  className="rounded"
                                />
                                <div>
                                  <Label htmlFor="fragile" className="font-medium">
                                    Хрупкий груз
                                  </Label>
                                  <p className="text-sm text-gray-600">
                                    Особая осторожность - 500 ₽
                                  </p>
                                </div>
                              </div>

                              {/* Температурный режим */}
                              <div className="flex items-center space-x-2 p-4 border rounded-lg">
                                <input
                                  type="checkbox"
                                  id="temperature_sensitive"
                                  checked={cargoOrderForm.temperature_sensitive}
                                  onChange={(e) => {
                                    setCargoOrderForm({...cargoOrderForm, temperature_sensitive: e.target.checked});
                                    setCostCalculation(null);
                                  }}
                                  className="rounded"
                                />
                                <div>
                                  <Label htmlFor="temperature_sensitive" className="font-medium">
                                    Температурный режим
                                  </Label>
                                  <p className="text-sm text-gray-600">
                                    Контроль температуры - 800 ₽
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Специальные инструкции */}
                          <div>
                            <Label htmlFor="special_instructions">Специальные инструкции</Label>
                            <Textarea
                              id="special_instructions"
                              value={cargoOrderForm.special_instructions}
                              onChange={(e) => setCargoOrderForm({...cargoOrderForm, special_instructions: e.target.value})}
                              placeholder="Дополнительные требования или инструкции..."
                            />
                          </div>

                          {/* Расчет стоимости */}
                          <div className="border-t pt-6">
                            <div className="flex items-center justify-between mb-4">
                              <h3 className="text-lg font-semibold text-gray-900">
                                Стоимость доставки
                              </h3>
                              <Button 
                                type="button"
                                variant="outline"
                                onClick={calculateCargoCost}
                                disabled={isCalculating || !cargoOrderForm.weight || !cargoOrderForm.declared_value || !cargoOrderForm.cargo_name}
                              >
                                <Calculator className="mr-2 h-4 w-4" />
                                {isCalculating ? 'Расчет...' : 'Рассчитать стоимость'}
                              </Button>
                            </div>

                            {costCalculation && (
                              <div className="bg-blue-50 p-6 rounded-lg">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                  <div>
                                    <h4 className="font-semibold mb-3">Детализация стоимости:</h4>
                                    <div className="space-y-2">
                                      {Object.entries(costCalculation.breakdown).map(([key, value]) => (
                                        <div key={key} className="flex justify-between text-sm">
                                          <span>{key}:</span>
                                          <span className="font-medium">{value}{typeof value === 'number' ? ' ₽' : ''}</span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                  <div className="text-center">
                                    <div className="text-3xl font-bold text-blue-600 mb-2">
                                      {costCalculation.calculation.total_cost} ₽
                                    </div>
                                    <div className="text-lg text-gray-600 mb-2">
                                      Срок доставки: {costCalculation.calculation.delivery_time_days} дней
                                    </div>
                                    <div className="text-sm text-gray-500">
                                      Маршрут: {costCalculation.route_info.route.replace('_', ' → ')}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>

                          {/* Кнопки */}
                          <div className="flex items-center justify-between pt-6 border-t">
                            <Button 
                              type="button" 
                              variant="outline"
                              onClick={() => {
                                setCargoOrderForm({
                                  cargo_name: '',
                                  description: '',
                                  weight: '',
                                  declared_value: '',
                                  recipient_full_name: '',
                                  recipient_phone: '',
                                  recipient_address: '',
                                  recipient_city: '',
                                  route: 'moscow_dushanbe',
                                  delivery_type: 'standard',
                                  insurance_requested: false,
                                  insurance_value: '',
                                  packaging_service: false,
                                  home_pickup: false,
                                  home_delivery: false,
                                  fragile: false,
                                  temperature_sensitive: false,
                                  special_instructions: ''
                                });
                                setCostCalculation(null);
                              }}
                            >
                              Очистить форму
                            </Button>
                            <Button 
                              type="submit" 
                              className="bg-blue-600 hover:bg-blue-700"
                              disabled={!costCalculation}
                            >
                              <Package className="mr-2 h-4 w-4" />
                              Оформить груз
                            </Button>
                          </div>
                        </form>
                      </CardContent>
                    </Card>
                  </div>
                </TabsContent>

                {/* Cargo Tab */}
                <TabsContent value="cargo" className="space-y-6">
                  <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold">Мои грузы</h2>
                    <div className="flex items-center space-x-2">
                      <Select defaultValue="all" onValueChange={(value) => fetchClientCargo(value === 'all' ? null : value)}>
                        <SelectTrigger className="w-40">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem key="all" value="all">Все статусы</SelectItem>
                          <SelectItem key="accepted" value="accepted">Принят</SelectItem>
                          <SelectItem key="placed_in_warehouse" value="placed_in_warehouse">На складе</SelectItem>
                          <SelectItem key="on_transport" value="on_transport">На транспорте</SelectItem>
                          <SelectItem key="in_transit" value="in_transit">В пути</SelectItem>
                          <SelectItem key="delivered" value="delivered">Доставлен</SelectItem>
                        </SelectContent>
                      </Select>
                      <Button 
                        variant="outline" 
                        onClick={() => fetchClientCargo()}
                      >
                        Обновить
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {clientCargo.length === 0 ? (
                      <Card>
                        <CardContent className="p-8 text-center">
                          <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                          <p className="text-gray-500">У вас пока нет грузов</p>
                          <Button 
                            className="mt-4" 
                            onClick={() => setActiveTab('requests')}
                          >
                            Подать заявку на груз
                          </Button>
                        </CardContent>
                      </Card>
                    ) : (
                      clientCargo.map((cargo) => (
                        <Card key={cargo.id}>
                          <CardContent className="p-6">
                            <div className="flex items-center justify-between mb-4">
                              <div>
                                <h3 className="font-semibold text-lg">#{cargo.cargo_number}</h3>
                                <p className="text-gray-600">{cargo.cargo_name || 'Груз'}</p>
                              </div>
                              <Badge variant={cargo.status === 'delivered' ? 'default' : 'outline'}>
                                {cargo.status}
                              </Badge>
                            </div>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                              <div>
                                <p className="text-sm text-gray-600">Получатель:</p>
                                <p className="font-medium">{cargo.recipient_full_name}</p>
                                <p className="text-sm text-gray-600">{cargo.recipient_phone}</p>
                              </div>
                              <div>
                                <p className="text-sm text-gray-600">Вес:</p>
                                <p className="font-medium">{cargo.weight} кг</p>
                                <p className="text-sm text-gray-600">Стоимость: {cargo.declared_value} ₽</p>
                              </div>
                            </div>

                            {cargo.location_description && (
                              <div className="mb-4">
                                <p className="text-sm text-gray-600">Местоположение:</p>
                                <p className="font-medium">{cargo.location_description}</p>
                              </div>
                            )}

                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-4 text-sm text-gray-600">
                                {cargo.tracking_code && (
                                  <span className="flex items-center">
                                    <QrCode className="mr-1 h-4 w-4" />
                                    Трекинг: {cargo.tracking_code}
                                  </span>
                                )}
                                {cargo.photo_count > 0 && (
                                  <span className="flex items-center">
                                    <Camera className="mr-1 h-4 w-4" />
                                    {cargo.photo_count} фото
                                  </span>
                                )}
                                {cargo.comment_count > 0 && (
                                  <span className="flex items-center">
                                    <MessageCircle className="mr-1 h-4 w-4" />
                                    {cargo.comment_count} комментариев
                                  </span>
                                )}
                              </div>
                              <div className="flex space-x-2">
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => openRepeatOrder(cargo)}
                                  className="text-green-600 hover:text-green-700"
                                  title="Повторить заказ с теми же данными"
                                >
                                  <Copy className="mr-1 h-4 w-4" />
                                  Повторить
                                </Button>
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => fetchClientCargoDetails(cargo.id)}
                                >
                                  <Eye className="mr-1 h-4 w-4" />
                                  Подробнее
                                </Button>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))
                    )}
                  </div>
                </TabsContent>

                {/* Keep existing Requests and Contact tabs */}
                <TabsContent value="requests" className="space-y-6">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Создание заявки */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Plus className="mr-2 h-5 w-5" />
                          Подать заявку на груз
                        </CardTitle>
                        <CardDescription>
                          Заполните форму для подачи заявки на отправку груза
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <form onSubmit={handleCreateRequest} className="space-y-4">
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="recipient_full_name">ФИО получателя</Label>
                              <Input
                                id="recipient_full_name"
                                value={requestForm.recipient_full_name}
                                onChange={(e) => setRequestForm({...requestForm, recipient_full_name: e.target.value})}
                                required
                              />
                            </div>
                            <div>
                              <Label htmlFor="recipient_phone">Телефон получателя</Label>
                              <Input
                                id="recipient_phone"
                                type="tel"
                                value={requestForm.recipient_phone}
                                onChange={(e) => setRequestForm({...requestForm, recipient_phone: e.target.value})}
                                required
                              />
                            </div>
                          </div>
                          <div>
                            <Label htmlFor="recipient_address">Адрес получателя</Label>
                            <Input
                              id="recipient_address"
                              value={requestForm.recipient_address}
                              onChange={(e) => setRequestForm({...requestForm, recipient_address: e.target.value})}
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="pickup_address">Адрес забора груза</Label>
                            <Input
                              id="pickup_address"
                              value={requestForm.pickup_address}
                              onChange={(e) => setRequestForm({...requestForm, pickup_address: e.target.value})}
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="cargo_name">Название груза</Label>
                            <Input
                              id="cargo_name"
                              value={requestForm.cargo_name}
                              onChange={(e) => setRequestForm({...requestForm, cargo_name: e.target.value})}
                              required
                            />
                          </div>
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="weight">Вес (кг)</Label>
                              <Input
                                id="weight"
                                type="number"
                                step="0.1"
                                value={requestForm.weight}
                                onChange={(e) => setRequestForm({...requestForm, weight: e.target.value})}
                                required
                              />
                            </div>
                            <div>
                              <Label htmlFor="declared_value">Объявленная стоимость (₽)</Label>
                              <Input
                                id="declared_value"
                                type="number"
                                value={requestForm.declared_value}
                                onChange={(e) => setRequestForm({...requestForm, declared_value: e.target.value})}
                                required
                              />
                            </div>
                          </div>
                          <div>
                            <Label htmlFor="description">Описание груза</Label>
                            <Textarea
                              id="description"
                              value={requestForm.description}
                              onChange={(e) => setRequestForm({...requestForm, description: e.target.value})}
                              required
                            />
                          </div>
                          <Button type="submit" className="w-full">
                            Подать заявку
                          </Button>
                        </form>
                      </CardContent>
                    </Card>

                    {/* Мои заявки */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <FileText className="mr-2 h-5 w-5" />
                          Мои заявки
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {myRequests.length === 0 ? (
                            <p className="text-gray-500 text-center py-4">У вас пока нет заявок</p>
                          ) : (
                            myRequests.map((request) => (
                              <div key={request.id} className="border rounded-lg p-4">
                                <div className="flex justify-between items-start mb-2">
                                  <div>
                                    <div className="font-medium">{request.recipient_full_name}</div>
                                    <div className="text-sm text-gray-600">{request.recipient_phone}</div>
                                  </div>
                                  <Badge variant={request.status === 'approved' ? 'default' : 'outline'}>
                                    {request.status}
                                  </Badge>
                                </div>
                                <div className="text-sm text-gray-600 mb-2">
                                  {request.description}
                                </div>
                                <div className="flex justify-between text-sm">
                                  <span>Вес: {request.weight} кг</span>
                                  <span>Стоимость: {request.declared_value} ₽</span>
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </TabsContent>

                <TabsContent value="contact" className="space-y-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <MessageCircle className="mr-2 h-5 w-5" />
                        Связаться с нами
                      </CardTitle>
                      <CardDescription>
                        Выберите удобный способ связи
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        <Button className="h-20 flex-col" variant="outline">
                          <MessageCircle className="h-6 w-6 mb-2" />
                          WhatsApp
                        </Button>
                        <Button className="h-20 flex-col" variant="outline">
                          <MessageCircle className="h-6 w-6 mb-2" />
                          Telegram
                        </Button>
                        <Button className="h-20 flex-col" variant="outline">
                          <MessageCircle className="h-6 w-6 mb-2" />
                          Онлайн чат
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
              </Tabs>
            </div>
          ) : (
            /* Для админа и оператора склада - новый интерфейс с боковым меню */
            <div className="space-y-6">
              
              {/* Шапка с поиском и уведомлениями - СКРЫТА ДЛЯ КУРЬЕРОВ */}
              {user.role !== 'courier' && (
                <Card>
                  <CardContent className="p-4">
                    <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                    
                    {/* Поиск с расширенными функциями */}
                    <div className="flex-1 max-w-md relative">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                        <Input
                          placeholder="Поиск по номеру, ФИО, телефону..."
                          value={searchQuery}
                          onChange={(e) => handleSearchInput(e.target.value)}
                          onKeyPress={(e) => {
                            if (e.key === 'Enter') {
                              handleAdvancedSearch(searchQuery);
                            }
                          }}
                          className="pl-10 pr-20"
                        />
                        
                        {/* Кнопка расширенного поиска */}
                        <Button
                          size="sm"
                          variant="outline"
                          className="absolute right-1 top-1/2 transform -translate-y-1/2"
                          onClick={() => setAdvancedSearchOpen(!advancedSearchOpen)}
                        >
                          <Filter className="h-4 w-4" />
                        </Button>
                        
                        {searchQuery && (
                          <Button
                            size="sm"
                            variant="ghost"
                            className="absolute right-12 top-1/2 transform -translate-y-1/2"
                            onClick={clearSearch}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        )}
                      </div>

                      {/* Автодополнение */}
                      {showSuggestions && searchSuggestions.length > 0 && (
                        <div className="absolute z-50 mt-1 w-full bg-white border rounded-lg shadow-lg">
                          {searchSuggestions.map((suggestion, index) => (
                            <div
                              key={`search-${index}-${suggestion.id || suggestion.name || index}`}
                              className="p-2 hover:bg-gray-100 cursor-pointer text-sm"
                              onClick={() => selectSearchSuggestion(suggestion)}
                            >
                              <Search className="inline mr-2 h-3 w-3 text-gray-400" />
                              {suggestion}
                            </div>
                          ))}
                        </div>
                      )}

                      {/* Расширенные фильтры */}
                      {advancedSearchOpen && (
                        <div className="absolute z-50 mt-2 w-96 bg-white border rounded-lg shadow-lg p-4">
                          <div className="space-y-4">
                            <h3 className="font-semibold text-sm">Расширенные фильтры</h3>
                            
                            {/* Фильтры для грузов */}
                            <div className="grid grid-cols-2 gap-2">
                              <div>
                                <Label className="text-xs">Статус груза</Label>
                                <Select 
                                  value={searchFilters.cargo_status} 
                                  onValueChange={(value) => setSearchFilters({...searchFilters, cargo_status: value})}
                                >
                                  <SelectTrigger className="h-8">
                                    <SelectValue placeholder="Любой" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="any">Любой</SelectItem>
                                    <SelectItem value="accepted">Принят</SelectItem>
                                    <SelectItem value="in_transit">В пути</SelectItem>
                                    <SelectItem value="delivered">Доставлен</SelectItem>
                                    <SelectItem value="returned">Возвращен</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div>
                                <Label className="text-xs">Оплата</Label>
                                <Select 
                                  value={searchFilters.payment_status} 
                                  onValueChange={(value) => setSearchFilters({...searchFilters, payment_status: value})}
                                >
                                  <SelectTrigger className="h-8">
                                    <SelectValue placeholder="Любая" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="any">Любая</SelectItem>
                                    <SelectItem value="pending">Ожидается</SelectItem>
                                    <SelectItem value="paid">Оплачен</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                            <div className="grid grid-cols-2 gap-2">
                              <div>
                                <Label className="text-xs">Маршрут</Label>
                                <Select 
                                  value={searchFilters.route} 
                                  onValueChange={(value) => setSearchFilters({...searchFilters, route: value})}
                                >
                                  <SelectTrigger className="h-8">
                                    <SelectValue placeholder="Любой" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="any">Любой</SelectItem>
                                    <SelectItem value="moscow_to_tajikistan">Москва → Таджикистан</SelectItem>
                                    <SelectItem value="tajikistan_to_moscow">Таджикистан → Москва</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              
                              <div>
                                <Label className="text-xs">Сортировка</Label>
                                <Select 
                                  value={searchFilters.sort_by} 
                                  onValueChange={(value) => setSearchFilters({...searchFilters, sort_by: value})}
                                >
                                  <SelectTrigger className="h-8">
                                    <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="created_at">По дате</SelectItem>
                                    <SelectItem value="relevance_score">По релевантности</SelectItem>
                                    <SelectItem value="weight">По весу</SelectItem>
                                    <SelectItem value="declared_value">По стоимости</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                            </div>

                            {/* Поля для телефонов */}
                            <div className="grid grid-cols-2 gap-2">
                              <div>
                                <Label className="text-xs">Телефон отправителя</Label>
                                <Input
                                  className="h-8"
                                  placeholder="+7..."
                                  value={searchFilters.sender_phone}
                                  onChange={(e) => setSearchFilters({...searchFilters, sender_phone: e.target.value})}
                                />
                              </div>
                              <div>
                                <Label className="text-xs">Телефон получателя</Label>
                                <Input
                                  className="h-8"
                                  placeholder="+992..."
                                  value={searchFilters.recipient_phone}
                                  onChange={(e) => setSearchFilters({...searchFilters, recipient_phone: e.target.value})}
                                />
                              </div>
                            </div>

                            {/* Диапазон дат */}
                            <div className="grid grid-cols-2 gap-2">
                              <div>
                                <Label className="text-xs">От даты</Label>
                                <Input
                                  type="date"
                                  className="h-8"
                                  value={searchFilters.date_from}
                                  onChange={(e) => setSearchFilters({...searchFilters, date_from: e.target.value})}
                                />
                              </div>
                              <div>
                                <Label className="text-xs">До даты</Label>
                                <Input
                                  type="date"
                                  className="h-8"
                                  value={searchFilters.date_to}
                                  onChange={(e) => setSearchFilters({...searchFilters, date_to: e.target.value})}
                                />
                              </div>
                            </div>

                            <div className="flex justify-between">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  setSearchFilters({
                                    cargo_status: '',
                                    payment_status: '',
                                    processing_status: '',
                                    route: '',
                                    sender_phone: '',
                                    recipient_phone: '',
                                    date_from: '',
                                    date_to: '',
                                    user_role: '',
                                    user_status: null,
                                    sort_by: 'created_at',
                                    sort_order: 'desc'
                                  });
                                }}
                              >
                                Сбросить
                              </Button>
                              <Button
                                size="sm"
                                onClick={() => {
                                  handleAdvancedSearch(searchQuery, searchFilters);
                                  setAdvancedSearchOpen(false);
                                }}
                                disabled={searchLoading}
                              >
                                {searchLoading ? 'Поиск...' : 'Применить'}
                              </Button>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {/* Результаты поиска */}
                      {showSearchResults && (
                        <div className="absolute z-40 mt-2 w-full bg-white border rounded-lg shadow-lg max-h-80 overflow-y-auto">
                          {/* Информация о поиске */}
                          {searchTime > 0 && (
                            <div className="px-3 py-2 bg-gray-50 border-b text-xs text-gray-600">
                              Найдено {searchResults.length} результатов за {searchTime}мс
                            </div>
                          )}
                          
                          {!Array.isArray(searchResults) || searchResults.length === 0 ? (
                            <div className="p-4 text-gray-500 text-center">Ничего не найдено</div>
                          ) : (
                            searchResults.map((result) => (
                              <div
                                key={result.id}
                                className="p-3 border-b hover:bg-gray-50 cursor-pointer"
                                onClick={() => {
                                  if (result.type === 'cargo') {
                                    fetchCargoDetails(result.id).then(cargoDetails => {
                                      setSelectedCellCargo(cargoDetails);
                                      setCargoDetailModal(true);
                                      clearSearch();
                                    });
                                  } else if (result.type === 'user') {
                                    // Открыть профиль пользователя
                                    console.log('Open user profile:', result.id);
                                  } else if (result.type === 'warehouse') {
                                    // Открыть склад
                                    console.log('Open warehouse:', result.id);
                                  }
                                }}
                              >
                                <div className="flex items-start justify-between">
                                  <div className="flex-1">
                                    <div className="font-medium text-sm">{result.title}</div>
                                    <div className="text-xs text-gray-600">{result.subtitle}</div>
                                    
                                    {/* Дополнительная информация в зависимости от типа */}
                                    {result.type === 'cargo' && (
                                      <div className="mt-1 text-xs text-gray-500">
                                        {result.details.weight && `${result.details.weight} кг`}
                                        {result.details.declared_value && ` • ${result.details.declared_value} руб`}
                                        {result.details.status && ` • ${result.details.status}`}
                                      </div>
                                    )}
                                    
                                    {result.type === 'warehouse' && (
                                      <div className="mt-1 text-xs text-gray-500">
                                        {result.details.cargo_count} грузов на складе
                                      </div>
                                    )}
                                  </div>
                                  
                                  <div className="ml-2 text-right">
                                    <Badge variant="outline" className="text-xs">
                                      {result.type === 'cargo' ? 'Груз' : 
                                       result.type === 'user' ? 'Пользователь' : 'Склад'}
                                    </Badge>
                                    {result.relevance_score && (
                                      <div className="text-xs text-gray-400 mt-1">
                                        {result.relevance_score.toFixed(0)}%
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                      )}
                    </div>
                    
                    {/* Фильтр поиска */}
                    <Select value={searchType} onValueChange={setSearchType}>
                      <SelectTrigger className="w-40">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Везде</SelectItem>
                        <SelectItem value="number">По номеру</SelectItem>
                        <SelectItem value="sender_name">По отправителю</SelectItem>
                        <SelectItem value="recipient_name">По получателю</SelectItem>
                        <SelectItem value="phone">По телефону</SelectItem>
                        <SelectItem value="cargo_name">По названию</SelectItem>
                      </SelectContent>
                    </Select>
                    
                    {/* Статистика и быстрый доступ */}
                    <div className="flex items-center space-x-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={startCargoQRScanner}
                        title="Сканировать QR код груза"
                      >
                        <Camera className="h-4 w-4 mr-2" />
                        Сканировать QR
                      </Button>
                      
                      <div className="text-sm text-gray-600">
                        Всего грузов: <span className="font-medium">{cargo.length}</span>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          fetchNotifications();
                          fetchNotifications();
                        }}
                      >
                        <Bell className="h-4 w-4 mr-2" />
                        Обновить
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
              )}

              {/* Dashboard - ТОЛЬКО ДЛЯ АДМИНОВ И ОПЕРАТОРОВ */}
              {activeSection === 'dashboard' && user.role !== 'courier' && (
                <div className="space-y-6">
                  {/* Кнопка обновления аналитики */}
                  <div className="flex justify-between items-center">
                    <h2 className="text-2xl font-bold">Аналитический дашборд</h2>
                    <Button 
                      onClick={fetchAdminDashboardAnalytics}
                      disabled={adminAnalyticsLoading}
                      variant="outline"
                    >
                      <RefreshCw className={`h-4 w-4 mr-2 ${adminAnalyticsLoading ? 'animate-spin' : ''}`} />
                      {adminAnalyticsLoading ? 'Загрузка...' : 'Обновить аналитику'}
                    </Button>
                  </div>

                  {adminDashboardAnalytics ? (
                    <>
                      {/* Основная статистика */}
                      <div>
                        <h3 className="text-lg font-semibold mb-4 text-gray-700">Основная статистика</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                          <Card className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Склады</CardTitle>
                              <Building className="h-4 w-4 text-blue-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-blue-700">{adminDashboardAnalytics.basic_stats.total_warehouses}</div>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Пользователи</CardTitle>
                              <Users className="h-4 w-4 text-green-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-green-700">{adminDashboardAnalytics.basic_stats.total_users}</div>
                              <p className="text-xs text-green-600 mt-1">
                                Админы: {adminDashboardAnalytics.basic_stats.total_admins}, 
                                Операторы: {adminDashboardAnalytics.basic_stats.total_operators}
                              </p>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Отправители</CardTitle>
                              <User className="h-4 w-4 text-purple-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-purple-700">{adminDashboardAnalytics.people_stats.unique_senders}</div>
                              <p className="text-xs text-purple-600 mt-1">Уникальных</p>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Получатели</CardTitle>
                              <User className="h-4 w-4 text-orange-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-orange-700">{adminDashboardAnalytics.people_stats.unique_recipients}</div>
                              <p className="text-xs text-orange-600 mt-1">Уникальных</p>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-teal-50 to-teal-100 border-teal-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Всего грузов</CardTitle>
                              <Package className="h-4 w-4 text-teal-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-teal-700">{adminDashboardAnalytics.cargo_stats.total_cargo}</div>
                            </CardContent>
                          </Card>
                        </div>
                      </div>

                      {/* Статистика грузов */}
                      <div>
                        <h3 className="text-lg font-semibold mb-4 text-gray-700">Статистика грузов</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                          <Card className="bg-gradient-to-br from-indigo-50 to-indigo-100 border-indigo-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Общий вес</CardTitle>
                              <Package2 className="h-4 w-4 text-indigo-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-indigo-700">{adminDashboardAnalytics.cargo_stats.total_weight_kg.toLocaleString()}</div>
                              <p className="text-xs text-indigo-600 mt-1">кг</p>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-emerald-50 to-emerald-100 border-emerald-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Общая сумма</CardTitle>
                              <DollarSign className="h-4 w-4 text-emerald-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-emerald-700">{adminDashboardAnalytics.cargo_stats.total_sum_rub.toLocaleString()}</div>
                              <p className="text-xs text-emerald-600 mt-1">₽</p>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-amber-50 to-amber-100 border-amber-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Ожидают получателя</CardTitle>
                              <Clock className="h-4 w-4 text-amber-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-amber-700">{adminDashboardAnalytics.cargo_stats.awaiting_recipient}</div>
                              <p className="text-xs text-amber-600 mt-1">грузов</p>
                            </CardContent>
                          </Card>
                        </div>
                      </div>

                      {/* Финансовая статистика */}
                      <div>
                        <h3 className="text-lg font-semibold mb-4 text-gray-700">Финансовая статистика</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <Card className="bg-gradient-to-br from-red-50 to-red-100 border-red-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Должники</CardTitle>
                              <CreditCard className="h-4 w-4 text-red-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-red-700">{adminDashboardAnalytics.financial_stats.debtors_count}</div>
                              <p className="text-xs text-red-600 mt-1">
                                Сумма задолженности: {adminDashboardAnalytics.financial_stats.total_debt_amount.toLocaleString()} ₽
                              </p>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-cyan-50 to-cyan-100 border-cyan-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Новые заявки</CardTitle>
                              <FileText className="h-4 w-4 text-cyan-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-cyan-700">{adminDashboardAnalytics.requests_stats.new_requests}</div>
                              <p className="text-xs text-cyan-600 mt-1">от пользователей</p>
                            </CardContent>
                          </Card>
                        </div>
                      </div>

                      {/* Статистика транспортов */}
                      <div>
                        <h3 className="text-lg font-semibold mb-4 text-gray-700">Транспорты по маршрутам</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                          <Card className="bg-gradient-to-br from-violet-50 to-violet-100 border-violet-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Всего транспортов</CardTitle>
                              <Truck className="h-4 w-4 text-violet-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-violet-700">{adminDashboardAnalytics.transport_stats.total_transports}</div>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-rose-50 to-rose-100 border-rose-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Москва → Таджикистан</CardTitle>
                              <MapPin className="h-4 w-4 text-rose-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-rose-700">{adminDashboardAnalytics.transport_stats.moscow_to_tajikistan}</div>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-lime-50 to-lime-100 border-lime-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Таджикистан → Москва</CardTitle>
                              <MapPin className="h-4 w-4 text-lime-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-lime-700">{adminDashboardAnalytics.transport_stats.tajikistan_to_moscow}</div>
                            </CardContent>
                          </Card>
                          
                          <Card className="bg-gradient-to-br from-sky-50 to-sky-100 border-sky-200">
                            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                              <CardTitle className="text-sm font-medium">Активные</CardTitle>
                              <Zap className="h-4 w-4 text-sky-600" />
                            </CardHeader>
                            <CardContent>
                              <div className="text-2xl font-bold text-sky-700">{adminDashboardAnalytics.transport_stats.active_transports}</div>
                              <p className="text-xs text-sky-600 mt-1">в пути</p>
                            </CardContent>
                          </Card>
                        </div>
                      </div>
                    </>
                  ) : (
                    // Старый базовый дашборд, если аналитика не загружена
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">Всего грузов</CardTitle>
                          <Package className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold">{cargo.length}</div>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">Активные пользователи</CardTitle>
                          <Users className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold">{users && Array.isArray(users) ? users.filter(u => u.is_active !== false).length : 0}</div>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">Склады</CardTitle>
                          <Building className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold">{warehouses.length}</div>
                        </CardContent>
                      </Card>
                      
                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">Непрочитанные уведомления</CardTitle>
                          <Bell className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold">{notifications.filter(n => !n.is_read).length}</div>
                        </CardContent>
                      </Card>
                    </div>
                  )}
                </div>
              )}

              {/* Личный кабинет */}
              {activeSection === 'personal-dashboard' && (
                <div className="space-y-6">
                  {/* Улучшенный аналитический дашборд для операторов склада */}
                  {user?.role === 'warehouse_operator' && (
                    <div className="space-y-6">
                      {/* Заголовок с информацией об операторе */}
                      <div className="flex justify-between items-center">
                        <div>
                          <h2 className="text-2xl font-bold">Мой дашборд склада</h2>
                          {operatorDashboardAnalytics && (
                            <p className="text-gray-600">
                              {operatorDashboardAnalytics.operator_info?.operator_name} • 
                              Назначено складов: {operatorDashboardAnalytics.operator_info?.assigned_warehouses_count || 0}
                            </p>
                          )}
                        </div>
                        <Button 
                          onClick={fetchOperatorDashboardAnalytics}
                          disabled={operatorAnalyticsLoading}
                          variant="outline"
                        >
                          <RefreshCw className={`h-4 w-4 mr-2 ${operatorAnalyticsLoading ? 'animate-spin' : ''}`} />
                          {operatorAnalyticsLoading ? 'Загрузка...' : 'Обновить'}
                        </Button>
                      </div>

                      {operatorDashboardAnalytics ? (
                        <div className="space-y-6">
                          {/* Общая сводка по всем складам оператора */}
                          <div>
                            <h3 className="text-lg font-semibold mb-4 text-gray-700">Общая сводка по моим складам</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                              <Card key="total-cargo-summary" className="bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                  <CardTitle className="text-sm font-medium">Всего грузов</CardTitle>
                                  <Package className="h-4 w-4 text-blue-600" />
                                </CardHeader>
                                <CardContent>
                                  <div className="text-2xl font-bold text-blue-700">
                                    {operatorDashboardAnalytics.summary_stats?.total_cargo_in_my_warehouses || 0}
                                  </div>
                                  <p className="text-xs text-blue-600 mt-1">на моих складах</p>
                                </CardContent>
                              </Card>
                              
                              <Card key="total-weight-summary" className="bg-gradient-to-br from-indigo-50 to-indigo-100 border-indigo-200">
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                  <CardTitle className="text-sm font-medium">Общий вес</CardTitle>
                                  <Package2 className="h-4 w-4 text-indigo-600" />
                                </CardHeader>
                                <CardContent>
                                  <div className="text-2xl font-bold text-indigo-700">
                                    {operatorDashboardAnalytics.summary_stats?.total_weight_kg?.toLocaleString() || '0'}
                                  </div>
                                  <p className="text-xs text-indigo-600 mt-1">кг</p>
                                </CardContent>
                              </Card>
                              
                              <Card key="total-value-summary" className="bg-gradient-to-br from-emerald-50 to-emerald-100 border-emerald-200">
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                  <CardTitle className="text-sm font-medium">Общая стоимость</CardTitle>
                                  <DollarSign className="h-4 w-4 text-emerald-600" />
                                </CardHeader>
                                <CardContent>
                                  <div className="text-2xl font-bold text-emerald-700">
                                    {operatorDashboardAnalytics.summary_stats?.total_value_rub?.toLocaleString() || '0'}
                                  </div>
                                  <p className="text-xs text-emerald-600 mt-1">₽</p>
                                </CardContent>
                              </Card>
                              
                              <Card key="occupancy-summary" className="bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
                                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                  <CardTitle className="text-sm font-medium">Заполненность</CardTitle>
                                  <BarChart className="h-4 w-4 text-purple-600" />
                                </CardHeader>
                                <CardContent>
                                  <div className="text-2xl font-bold text-purple-700">
                                    {operatorDashboardAnalytics.summary_stats?.average_occupancy_rate || 0}%
                                  </div>
                                  <p className="text-xs text-purple-600 mt-1">
                                    {operatorDashboardAnalytics.summary_stats?.occupied_cells || 0} из {operatorDashboardAnalytics.summary_stats?.total_cells || 0} ячеек
                                  </p>
                                </CardContent>
                              </Card>
                            </div>
                          </div>

                          {/* Детальная информация по каждому складу */}
                          <div>
                            <h3 className="text-lg font-semibold mb-4 text-gray-700">Мои склады - детальная информация</h3>
                            <div className="grid gap-6">
                              {operatorDashboardAnalytics.warehouses_details?.map((warehouse, index) => (
                                <Card key={`warehouse-detail-${warehouse.warehouse_id}`} className="border-l-4 border-l-blue-500">
                                  <CardHeader>
                                    <CardTitle className="flex items-center justify-between">
                                      <div className="flex items-center">
                                        <Building className="mr-3 h-5 w-5 text-blue-600" />
                                        <div>
                                          <h4 className="text-lg font-semibold">{warehouse.warehouse_name}</h4>
                                          <p className="text-sm text-gray-600">{warehouse.warehouse_location}</p>
                                        </div>
                                      </div>
                                      <Badge variant="secondary">
                                        {warehouse.cargo_stats?.occupancy_rate || 0}% заполнен
                                      </Badge>
                                    </CardTitle>
                                  </CardHeader>
                                  <CardContent>
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                                      {/* Структура склада */}
                                      <div className="bg-slate-50 p-3 rounded-lg">
                                        <h5 className="font-semibold text-slate-700 mb-2">Структура</h5>
                                        <div className="text-sm text-slate-600 space-y-1">
                                          <p>📦 Блоков: {warehouse.warehouse_structure?.blocks_count || 0}</p>
                                          <p>📚 Полок/блок: {warehouse.warehouse_structure?.shelves_per_block || 0}</p>
                                          <p>🔲 Ячеек/полка: {warehouse.warehouse_structure?.cells_per_shelf || 0}</p>
                                          <p className="font-semibold">
                                            🎯 Всего ячеек: {(() => {
                                              const total = warehouse.warehouse_structure?.total_cells || 0;
                                              console.log(`🔧 Всего ячеек для склада ${warehouse.warehouse_name}:`, total);
                                              return total;
                                            })()}
                                          </p>
                                        </div>
                                      </div>

                                      {/* Статистика грузов */}
                                      <div className="bg-blue-50 p-3 rounded-lg">
                                        <h5 className="font-semibold text-blue-700 mb-2">Грузы</h5>
                                        <div className="text-sm space-y-1">
                                          <p className="text-blue-900 font-bold text-lg">
                                            {(() => {
                                              const total = warehouse.cargo_stats?.total_cargo || 0;
                                              console.log(`🔧 Всего грузов для склада ${warehouse.warehouse_name}:`, total);
                                              return total;
                                            })()}
                                          </p>
                                          <p className="text-blue-600">📦 Всего грузов</p>
                                          <p className="text-blue-600">
                                            ⚖️ {(() => {
                                              const weight = warehouse.cargo_stats?.total_weight_kg?.toLocaleString() || 0;
                                              console.log(`🔧 Общий вес для склада ${warehouse.warehouse_name}:`, warehouse.cargo_stats?.total_weight_kg);
                                              return weight;
                                            })()} кг
                                          </p>
                                          <p className="text-blue-600">
                                            💰 {(() => {
                                              const value = warehouse.cargo_stats?.total_value_rub?.toLocaleString() || 0;
                                              console.log(`🔧 Общая стоимость для склада ${warehouse.warehouse_name}:`, warehouse.cargo_stats?.total_value_rub);
                                              return value;
                                            })()} ₽
                                          </p>
                                        </div>
                                      </div>

                                      {/* Заполненность */}
                                      <div className="bg-green-50 p-3 rounded-lg">
                                        <h5 className="font-semibold text-green-700 mb-2">Заполненность</h5>
                                        <div className="text-sm space-y-1">
                                          <p className="text-green-900 font-bold text-lg">
                                            {(() => {
                                              const rate = warehouse.cargo_stats?.occupancy_rate || 0;
                                              console.log(`🔧 Отображение заполненности для склада ${warehouse.warehouse_name}:`, rate);
                                              return rate;
                                            })()}%
                                          </p>
                                          <p className="text-green-600">
                                            🟢 Занято: {(() => {
                                              const occupied = warehouse.cargo_stats?.occupied_cells || 0;
                                              console.log(`🔧 Занято ячеек для склада ${warehouse.warehouse_name}:`, occupied);
                                              return occupied;
                                            })()}
                                          </p>
                                          <p className="text-green-600">
                                            ⚪ Свободно: {(() => {
                                              const free = warehouse.cargo_stats?.free_cells || 0;
                                              console.log(`🔧 Свободно ячеек для склада ${warehouse.warehouse_name}:`, free);
                                              return free;
                                            })()}
                                          </p>
                                        </div>
                                      </div>

                                      {/* Клиенты */}
                                      <div className="bg-orange-50 p-3 rounded-lg">
                                        <h5 className="font-semibold text-orange-700 mb-2">Клиенты</h5>
                                        <div className="text-sm space-y-1">
                                          <p className="text-orange-600">📤 Отправителей: {warehouse.clients?.unique_senders || 0}</p>
                                          <p className="text-orange-600">📥 Получателей: {warehouse.clients?.unique_recipients || 0}</p>
                                          <div className="mt-2 pt-2 border-t border-orange-200">
                                            <p className="text-orange-600">💳 Оплачено: {warehouse.financial?.paid_cargo || 0}</p>
                                            <p className="text-orange-600">⏳ Не оплачено: {warehouse.financial?.unpaid_cargo || 0}</p>
                                          </div>
                                        </div>
                                      </div>
                                    </div>

                                    {/* Кнопки действий для склада */}
                                    <div className="mt-4 flex flex-wrap gap-2">
                                      <Button 
                                        size="sm" 
                                        variant="outline"
                                        onClick={() => setShowWarehouseScheme(warehouse.warehouse_id)}
                                      >
                                        <MapPin className="mr-2 h-4 w-4" />
                                        Схема склада
                                      </Button>
                                      <Button size="sm" variant="outline">
                                        <FileText className="mr-2 h-4 w-4" />
                                        Отчет
                                      </Button>
                                      <Button size="sm" variant="outline">
                                        <Settings className="mr-2 h-4 w-4" />
                                        Управление
                                      </Button>
                                    </div>
                                  </CardContent>
                                </Card>
                              )) || (
                                <Card>
                                  <CardContent className="p-8 text-center">
                                    <Building className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                                    <p className="text-gray-500">У вас нет назначенных складов</p>
                                  </CardContent>
                                </Card>
                              )}
                            </div>
                          </div>

                          {/* Статистика клиентов и финансы по всем складам */}
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {/* Клиенты */}
                            <Card key="clients-summary">
                              <CardHeader>
                                <CardTitle className="flex items-center">
                                  <Users className="mr-2 h-5 w-5" />
                                  Мои клиенты
                                </CardTitle>
                              </CardHeader>
                              <CardContent>
                                <div className="space-y-3">
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">📤 Уникальных отправителей</span>
                                    <span className="font-semibold">{operatorDashboardAnalytics.clients_stats?.unique_senders || 0}</span>
                                  </div>
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">📥 Уникальных получателей</span>
                                    <span className="font-semibold">{operatorDashboardAnalytics.clients_stats?.unique_recipients || 0}</span>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>

                            {/* Финансы */}
                            <Card key="financial-summary">
                              <CardHeader>
                                <CardTitle className="flex items-center">
                                  <CreditCard className="mr-2 h-5 w-5" />
                                  Финансы
                                </CardTitle>
                              </CardHeader>
                              <CardContent>
                                <div className="space-y-3">
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">💳 Оплачено грузов</span>
                                    <span className="font-semibold text-green-600">{operatorDashboardAnalytics.financial_stats?.paid_cargo || 0}</span>
                                  </div>
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">⏳ Не оплачено</span>
                                    <span className="font-semibold text-red-600">{operatorDashboardAnalytics.financial_stats?.unpaid_cargo || 0}</span>
                                  </div>
                                  <div className="flex justify-between items-center">
                                    <span className="text-sm text-gray-600">💸 Сумма долгов</span>
                                    <span className="font-semibold text-red-600">{operatorDashboardAnalytics.financial_stats?.debt_amount?.toLocaleString() || 0} ₽</span>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                          </div>

                          {/* Информация об операторах на складах */}
                          <Card key="operators-summary">
                            <CardHeader>
                              <CardTitle className="flex items-center">
                                <UserCheck className="mr-2 h-5 w-5" />
                                Операторы на моих складах
                              </CardTitle>
                            </CardHeader>
                            <CardContent>
                              <div className="space-y-3">
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600">👥 Всего операторов</span>
                                  <span className="font-semibold">{operatorDashboardAnalytics.operator_info?.total_operators_on_my_warehouses || 0}</span>
                                </div>
                                <div className="flex justify-between items-center">
                                  <span className="text-sm text-gray-600">📋 Общее кол-во назначений</span>
                                  <span className="font-semibold">{operatorDashboardAnalytics.operator_info?.total_operators_assignments || 0}</span>
                                </div>
                              </div>
                            </CardContent>
                          </Card>

                          {/* Грузы по назначениям */}
                          {operatorDashboardAnalytics.cargo_by_destinations && Object.keys(operatorDashboardAnalytics.cargo_by_destinations).length > 0 && (
                            <Card key="cargo-destinations">
                              <CardHeader>
                                <CardTitle className="flex items-center">
                                  <MapPin className="mr-2 h-5 w-5" />
                                  Грузы, ожидающие отправки по направлениям
                                </CardTitle>
                                <CardDescription>
                                  Детальная разбивка грузов по пунктам назначения
                                </CardDescription>
                              </CardHeader>
                              <CardContent>
                                <div className="space-y-4">
                                  {Object.entries(operatorDashboardAnalytics.cargo_by_destinations).map(([destination, data]) => (
                                    <div key={destination} className="border rounded-lg p-4">
                                      <div className="flex justify-between items-center mb-3">
                                        <h4 className="font-semibold text-lg">
                                          {destination === 'Москва' && '🇷🇺 Москва'}
                                          {destination === 'Душанбе' && '🇹🇯 Душанбе'}
                                          {destination === 'Худжанд' && '🇹🇯 Худжанд'}
                                          {destination === 'Кулоб' && '🇹🇯 Кулоб'}
                                          {destination === 'Курган-Тюбе' && '🇹🇯 Курган-Тюбе'}
                                          {!['Москва', 'Душанбе', 'Худжанд', 'Кулоб', 'Курган-Тюбе'].includes(destination) && `📍 ${destination}`}
                                        </h4>
                                      </div>
                                      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                        <div className="text-center">
                                          <div className="text-2xl font-bold text-blue-600">
                                            {data.cargo_count || 0}
                                          </div>
                                          <div className="text-sm text-gray-600">грузов</div>
                                        </div>
                                        <div className="text-center">
                                          <div className="text-2xl font-bold text-indigo-600">
                                            {(data.total_weight || 0).toLocaleString()}
                                          </div>
                                          <div className="text-sm text-gray-600">кг</div>
                                        </div>
                                        <div className="text-center">
                                          <div className="text-2xl font-bold text-emerald-600">
                                            {(data.total_value || 0).toLocaleString()}
                                          </div>
                                          <div className="text-sm text-gray-600">₽</div>
                                        </div>
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              </CardContent>
                            </Card>
                          )}
                        </div>
                      ) : (
                        <Card key="loading-analytics">
                          <CardContent className="p-6">
                            <div className="text-center py-8">
                              <RefreshCw className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500 mb-4">Загружаем детальную аналитику по вашим складам...</p>
                              <Button onClick={fetchOperatorDashboardAnalytics} variant="outline">
                                <RefreshCw className="mr-2 h-4 w-4" />
                                Загрузить аналитику
                              </Button>
                            </div>
                          </CardContent>
                        </Card>
                      )}
                    </div>
                  )}

                  {/* Персональная информация */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <User className="mr-2 h-5 w-5" />
                        {user?.role === 'warehouse_operator' ? 'Профиль оператора склада' : 'Личный кабинет'}
                      </CardTitle>
                      <CardDescription>
                        {user?.role === 'warehouse_operator' ? 
                          'Ваша персональная информация и статистика работы' : 
                          'Ваша персональная информация и история операций'
                        }
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="flex items-center justify-between mb-6">
                        <Button 
                          onClick={fetchPersonalDashboard}
                          disabled={dashboardLoading}
                        >
                          {dashboardLoading ? 'Загрузка...' : 'Обновить данные'}
                        </Button>
                        
                        {/* Новые функции для операторов и админов */}
                        {(user?.role === 'admin' || user?.role === 'warehouse_operator') && (
                          <div className="flex gap-2">
                            <Dialog>
                              <DialogTrigger asChild>
                                <Button variant="outline">
                                  <QrCode className="mr-2 h-4 w-4" />
                                  Штрихкоды
                                </Button>
                              </DialogTrigger>
                              <DialogContent className="max-w-2xl">
                                <DialogHeader>
                                  <DialogTitle>Генерация штрихкодов для грузов</DialogTitle>
                                  <DialogDescription>
                                    Введите номера грузов через запятую для генерации QR-кодов
                                  </DialogDescription>
                                </DialogHeader>
                                <div className="space-y-4">
                                  <div>
                                    <Label htmlFor="cargo-numbers">Номера грузов</Label>
                                    <Textarea
                                      id="cargo-numbers"
                                      placeholder="CRG-001, CRG-002, CRG-003..."
                                      className="min-h-20"
                                    />
                                  </div>
                                  <div className="flex gap-2">
                                    <Button className="flex-1">
                                      <QrCode className="mr-2 h-4 w-4" />
                                      Генерировать штрихкоды
                                    </Button>
                                    <Button variant="outline" className="flex-1">
                                      <Printer className="mr-2 h-4 w-4" />
                                      Печать штрихкодов
                                    </Button>
                                  </div>
                                </div>
                              </DialogContent>
                            </Dialog>

                            <Dialog>
                              <DialogTrigger asChild>
                                <Button variant="outline">
                                  <FileText className="mr-2 h-4 w-4" />
                                  Накладная
                                </Button>
                              </DialogTrigger>
                              <DialogContent className="max-w-4xl">
                                <DialogHeader>
                                  <DialogTitle>Генерация накладной</DialogTitle>
                                  <DialogDescription>
                                    Создание накладной для группы грузов
                                  </DialogDescription>
                                </DialogHeader>
                                <div className="space-y-4">
                                  <div>
                                    <Label htmlFor="invoice-cargo-numbers">Номера грузов для накладной</Label>
                                    <Textarea
                                      id="invoice-cargo-numbers"
                                      placeholder="CRG-001, CRG-002, CRG-003..."
                                      className="min-h-20"
                                    />
                                  </div>
                                  <div className="flex gap-2">
                                    <Button className="flex-1">
                                      <FileText className="mr-2 h-4 w-4" />
                                      Сгенерировать накладную
                                    </Button>
                                    <Button variant="outline" className="flex-1">
                                      <Printer className="mr-2 h-4 w-4" />
                                      Печать накладной
                                    </Button>
                                  </div>
                                </div>
                              </DialogContent>
                            </Dialog>
                          </div>
                        )}
                      </div>
                      
                      {personalDashboardData && (
                        <div className="space-y-6">
                          {/* Информация о пользователе */}
                          <div className="bg-gray-50 p-6 rounded-lg">
                            <h3 className="text-lg font-semibold mb-4">Информация о пользователе</h3>
                            <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4">
                              <div>
                                <label className="text-sm font-medium text-gray-500">Номер пользователя</label>
                                <p className="text-lg">{personalDashboardData.user_info.user_number}</p>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-gray-500">ФИО</label>
                                <p className="text-lg">{personalDashboardData.user_info.full_name}</p>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-gray-500">Телефон</label>
                                <p className="text-lg">{personalDashboardData.user_info.phone}</p>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-gray-500">Роль</label>
                                <Badge variant="outline">{getRoleLabel(personalDashboardData.user_info.role)}</Badge>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-gray-500">Дата регистрации</label>
                                <p className="text-lg">{new Date(personalDashboardData.user_info.created_at).toLocaleDateString('ru-RU')}</p>
                              </div>
                            </div>
                          </div>

                          {/* Заявки на грузы */}
                          <div>
                            <h3 className="text-lg font-semibold mb-4 flex items-center">
                              <FileText className="mr-2 h-5 w-5" />
                              Мои заявки на грузы ({personalDashboardData.cargo_requests.length})
                            </h3>
                            {personalDashboardData.cargo_requests.length > 0 ? (
                              <div className="space-y-3">
                                {personalDashboardData.cargo_requests.slice(0, 10).map((request, index) => (
                                  <div key={`request-${request.id || index}-${request.cargo_name || index}`} className="bg-white border rounded-lg p-4">
                                    <div className="flex justify-between items-start">
                                      <div>
                                        <h4 className="font-medium">{request.cargo_name}</h4>
                                        <p className="text-sm text-gray-600">
                                          Вес: {request.weight} кг | Стоимость: {request.declared_value} руб
                                        </p>
                                        <p className="text-sm text-gray-600">
                                          Получатель: {request.recipient_name} ({request.recipient_phone})
                                        </p>
                                      </div>
                                      <div className="text-right">
                                        <Badge variant="secondary">{request.status}</Badge>
                                        <p className="text-xs text-gray-500 mt-1">
                                          {new Date(request.created_at).toLocaleDateString('ru-RU')}
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <p className="text-gray-500">У вас пока нет заявок на грузы</p>
                            )}
                          </div>

                          {/* Отправленные грузы */}
                          <div>
                            <h3 className="text-lg font-semibold mb-4 flex items-center">
                              <Package className="mr-2 h-5 w-5" />
                              Отправленные грузы ({personalDashboardData.sent_cargo.length})
                            </h3>
                            {personalDashboardData.sent_cargo.length > 0 ? (
                              <div className="space-y-3">
                                {personalDashboardData.sent_cargo.slice(0, 10).map((cargo, index) => (
                                  <div key={`sent-cargo-${cargo.id || index}-${cargo.cargo_number || index}`} className="bg-white border rounded-lg p-4">
                                    <div className="flex justify-between items-start">
                                      <div>
                                        <h4 className="font-medium">
                                          {cargo.cargo_number} - {cargo.cargo_name}
                                        </h4>
                                        <p className="text-sm text-gray-600">
                                          Вес: {cargo.weight} кг | Стоимость: {cargo.declared_value} руб
                                        </p>
                                        <p className="text-sm text-gray-600">
                                          Получатель: {cargo.recipient_name} ({cargo.recipient_phone})
                                        </p>
                                        {cargo.created_by_operator && (
                                          <p className="text-sm text-gray-500">
                                            Принято оператором: {cargo.created_by_operator}
                                          </p>
                                        )}
                                      </div>
                                      <div className="text-right">
                                        <div className="space-y-1">
                                          <Badge variant="default">{cargo.status}</Badge>
                                          {cargo.payment_status && (
                                            <Badge variant="secondary" className="block">
                                              {cargo.payment_status}
                                            </Badge>
                                          )}
                                          {cargo.processing_status && (
                                            <Badge variant="outline" className="block">
                                              {cargo.processing_status}
                                            </Badge>
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <p className="text-gray-500">У вас пока нет отправленных грузов</p>
                            )}
                          </div>

                          {/* Полученные грузы */}
                          <div>
                            <h3 className="text-lg font-semibold mb-4 flex items-center">
                              <Truck className="mr-2 h-5 w-5" />
                              Полученные грузы ({personalDashboardData.received_cargo.length})
                            </h3>
                            {personalDashboardData.received_cargo.length > 0 ? (
                              <div className="space-y-3">
                                {personalDashboardData.received_cargo.slice(0, 10).map((cargo, index) => (
                                  <div key={`received-cargo-${cargo.id || index}-${cargo.cargo_number || index}`} className="bg-white border rounded-lg p-4">
                                    <div className="flex justify-between items-start">
                                      <div>
                                        <h4 className="font-medium">
                                          {cargo.cargo_number} - {cargo.cargo_name}
                                        </h4>
                                        <p className="text-sm text-gray-600">
                                          Вес: {cargo.weight} кг | Стоимость: {cargo.declared_value} руб
                                        </p>
                                        <p className="text-sm text-gray-600">
                                          Отправитель: {cargo.sender_name} ({cargo.sender_phone})
                                        </p>
                                        {cargo.created_by_operator && (
                                          <p className="text-sm text-gray-500">
                                            Принято оператором: {cargo.created_by_operator}
                                          </p>
                                        )}
                                      </div>
                                      <div className="text-right">
                                        <div className="space-y-1">
                                          <Badge variant="default">{cargo.status}</Badge>
                                          {cargo.payment_status && (
                                            <Badge variant="secondary" className="block">
                                              {cargo.payment_status}
                                            </Badge>
                                          )}
                                          {cargo.processing_status && (
                                            <Badge variant="outline" className="block">
                                              {cargo.processing_status}
                                            </Badge>
                                          )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <p className="text-gray-500">У вас пока нет полученных грузов</p>
                            )}
                          </div>
                        </div>
                      )}
                      
                      {!personalDashboardData && !dashboardLoading && (
                        <div className="text-center py-8">
                          <User className="mx-auto h-12 w-12 text-gray-400" />
                          <h3 className="mt-4 text-sm font-medium text-gray-900">Данные не загружены</h3>
                          <p className="mt-1 text-sm text-gray-500">
                            Нажмите кнопку "Обновить данные" для загрузки информации
                          </p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Мобильные операции */}
              {activeSection === 'operations' && (
                <div className="space-y-6">
                  {/* Поиск груза */}
                  {activeTab === 'operations-search' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Search className="mr-2 h-5 w-5" />
                          Поиск груза по QR коду
                        </CardTitle>
                        <CardDescription>Сканируйте QR код груза для получения полной информации</CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {/* QR сканер контейнер с плейсхолдером */}
                          <div className="relative">
                            <div 
                              id="qr-reader-placement-search" 
                              className="w-full bg-black rounded-lg"
                              style={{
                                width: '300px',
                                height: '300px',
                                maxWidth: '300px',
                                maxHeight: '300px',
                                minWidth: '300px',
                                minHeight: '300px',
                                margin: '0 auto'
                              }}
                            />
                            
                            {/* Плейсхолдер отображается когда камера не активна */}
                            {!searchScannerActive && (
                              <div 
                                className="absolute inset-0 bg-black rounded-lg camera-placeholder"
                                style={{
                                  display: 'flex',
                                  alignItems: 'center',
                                  justifyContent: 'center',
                                  color: '#a0aec0',
                                  fontSize: '14px',
                                  fontWeight: '500'
                                }}
                              >
                                📷 Камера будет активна здесь
                              </div>
                            )}
                          </div>

                          {/* Кнопка запуска сканирования внизу */}
                          <div className="text-center">
                            <Button 
                              onClick={() => startCargoSearch()}
                              className="w-full bg-blue-600 hover:bg-blue-700 text-white"
                              size="lg"
                              disabled={searchScannerActive}
                            >
                              <Camera className="mr-2 h-5 w-5" />
                              {searchScannerActive ? 'Сканирование активно...' : 'Начать сканирование груза'}
                            </Button>
                          </div>

                          {/* Кнопка переключения камеры */}
                          {searchScannerActive && availableCameras.length > 1 && (
                            <div className="text-center">
                              <Button 
                                onClick={() => switchCamera()}
                                variant="outline"
                                size="sm"
                              >
                                <RefreshCw className="mr-2 h-4 w-4" />
                                Переключить камеру ({availableCameras.length > currentCameraIndex ? 
                                  (availableCameras[currentCameraIndex].label?.includes('back') || 
                                   availableCameras[currentCameraIndex].label?.includes('rear') ||
                                   availableCameras[currentCameraIndex].label?.includes('environment') ? 'задняя' : 'передняя') 
                                  : 'неизвестно'})
                              </Button>
                            </div>
                          )}

                          {/* Кнопка закрытия сканирования */}
                          {searchScannerActive && (
                            <div className="text-center mt-3">
                              <Button 
                                onClick={stopMobileScanning}
                                variant="destructive"
                                size="sm"
                              >
                                <X className="mr-2 h-4 w-4" />
                                Закрыть сканирование
                              </Button>
                            </div>
                          )}

                          {/* Результаты поиска */}
                          {searchResult && (
                            <Card className="mt-4">
                              <CardHeader>
                                <CardTitle className="text-lg text-green-600">
                                  Информация о грузе
                                </CardTitle>
                              </CardHeader>
                              <CardContent className="space-y-4">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                  <div>
                                    <Label className="font-semibold">Номер груза</Label>
                                    <p>{searchResult.cargo_number}</p>
                                  </div>
                                  <div>
                                    <Label className="font-semibold">Статус</Label>
                                    <Badge className={
                                      searchResult.status === 'delivered' ? 'bg-green-100 text-green-800' :
                                      searchResult.status === 'in_transit' ? 'bg-blue-100 text-blue-800' :
                                      'bg-yellow-100 text-yellow-800'
                                    }>
                                      {searchResult.status === 'delivered' ? 'Доставлен' :
                                       searchResult.status === 'in_transit' ? 'В пути' :
                                       'Принят'}
                                    </Badge>
                                  </div>
                                  <div>
                                    <Label className="font-semibold">Отправитель</Label>
                                    <p>{searchResult.sender_full_name}</p>
                                    <p className="text-sm text-gray-600">{searchResult.sender_phone}</p>
                                  </div>
                                  <div>
                                    <Label className="font-semibold">Получатель</Label>
                                    <p>{searchResult.recipient_full_name}</p>
                                    <p className="text-sm text-gray-600">{searchResult.recipient_phone}</p>
                                  </div>
                                  <div>
                                    <Label className="font-semibold">Статус оплаты</Label>
                                    <Badge className={
                                      searchResult.payment_status === 'paid' ? 'bg-green-100 text-green-800' :
                                      'bg-red-100 text-red-800'
                                    }>
                                      {searchResult.payment_status === 'paid' ? 'Оплачено' : 'Не оплачено'}
                                    </Badge>
                                  </div>
                                  <div>
                                    <Label className="font-semibold">Местонахождение</Label>
                                    <p>{searchResult.current_location || 'Не указано'}</p>
                                  </div>
                                </div>

                                {/* История груза */}
                                {searchResult.history && searchResult.history.length > 0 && (
                                  <div className="mt-4">
                                    <Label className="font-semibold">История груза</Label>
                                    <div className="mt-2 space-y-2">
                                      {searchResult.history.map((item, index) => (
                                        <div key={index} className="flex items-center text-sm bg-gray-50 p-2 rounded">
                                          <Clock className="mr-2 h-4 w-4 text-gray-500" />
                                          <span className="text-gray-600">{item.date}</span>
                                          <span className="ml-2">{item.action}</span>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </CardContent>
                            </Card>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* Генерация QR кодов */}
                  {activeTab === 'operations-qr-generate' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <QrCode className="mr-2 h-5 w-5" />
                          Генерация QR кодов
                        </CardTitle>
                        <CardDescription>Создание QR кодов для грузов и ячеек</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          {/* Генерация QR кода для груза */}
                          <div className="space-y-4">
                            <h3 className="font-semibold">QR код для груза</h3>
                            <div>
                              <Label htmlFor="cargo-number-qr">Номер груза</Label>
                              <Input
                                id="cargo-number-qr"
                                placeholder="Введите номер груза"
                                value={qrCargoNumber}
                                onChange={(e) => setQrCargoNumber(e.target.value)}
                              />
                            </div>
                            <Button 
                              onClick={() => generateCargoQR()}
                              className="w-full bg-green-600 hover:bg-green-700"
                              disabled={!qrCargoNumber.trim()}
                            >
                              <QrCode className="mr-2 h-4 w-4" />
                              Генерировать QR код груза
                            </Button>
                          </div>

                          {/* Генерация QR кода для ячейки */}
                          <div className="space-y-4">
                            <h3 className="font-semibold">QR код для ячейки</h3>
                            <div>
                              <Label htmlFor="cell-code-qr">Код ячейки</Label>
                              <Input
                                id="cell-code-qr"
                                placeholder="Например: Б1-П1-Я1"
                                value={qrCellCode.code || ''}
                                onChange={(e) => setQrCellCode({...qrCellCode, code: e.target.value})}
                              />
                            </div>
                            <Button 
                              onClick={() => generateCellQR()}
                              className="w-full bg-purple-600 hover:bg-purple-700"
                              disabled={!qrCellCode.code?.trim()}
                            >
                              <QrCode className="mr-2 h-4 w-4" />
                              Генерировать QR код ячейки
                            </Button>
                          </div>
                        </div>

                        {/* Показ сгенерированных QR кодов */}
                        {(generatedCargoQR || generatedCellQR) && (
                          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
                            {generatedCargoQR && (
                              <div className="text-center space-y-2">
                                <h4 className="font-semibold">QR код груза</h4>
                                <div className="bg-white p-4 rounded border inline-block">
                                  <img src={generatedCargoQR} alt="QR код груза" className="w-48 h-48" />
                                </div>
                                <Button 
                                  onClick={() => printQR(generatedCargoQR, `Груз: ${qrCargoNumber}`)}
                                  variant="outline"
                                  size="sm"
                                >
                                  <Printer className="mr-2 h-4 w-4" />
                                  Печать
                                </Button>
                              </div>
                            )}

                            {generatedCellQR && (
                              <div className="text-center space-y-2">
                                <h4 className="font-semibold">QR код ячейки</h4>
                                <div className="bg-white p-4 rounded border inline-block">
                                  <img src={generatedCellQR} alt="QR код ячейки" className="w-48 h-48" />
                                </div>
                                <Button 
                                  onClick={() => printQR(generatedCellQR, `Ячейка: ${qrCellCode}`)}
                                  variant="outline" 
                                  size="sm"
                                >
                                  <Printer className="mr-2 h-4 w-4" />
                                  Печать
                                </Button>
                              </div>
                            )}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* Размещение груза */}
                  {activeTab === 'operations-placement' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Target className="mr-2 h-5 w-5" />
                          Размещение груза
                        </CardTitle>
                        <CardDescription>Сканирование QR кода груза и ячейки для размещения</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        {mobilePlacementStep === 'start' && (
                          <div className="space-y-4">
                            {/* Показываем контейнер камеры сначала */}
                            <div 
                              id="qr-reader-placement-main" 
                              className="camera-placeholder w-full bg-black rounded-lg flex items-center justify-center"
                              style={{
                                width: '300px',
                                height: '300px',
                                maxWidth: '300px',
                                maxHeight: '300px',
                                minWidth: '300px',
                                minHeight: '300px',
                                margin: '0 auto',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                color: '#a0aec0',
                                fontSize: '14px',
                                fontWeight: '500'
                              }}
                            >
                              📷 Камера будет активна здесь
                            </div>

                            {/* Кнопка запуска размещения внизу */}
                            <div className="text-center">
                              <Button 
                                onClick={() => startMobilePlacement()}
                                className="w-full bg-blue-600 hover:bg-blue-700 text-white"
                                size="lg"
                              >
                                <Camera className="mr-2 h-5 w-5" />
                                Начать размещение
                              </Button>
                            </div>
                          </div>
                        )}

                        {mobilePlacementStep === 'scan-cargo' && (
                          <div className="space-y-4">
                            <div className="text-center">
                              <h3 className="font-semibold text-blue-600">Шаг 1: Сканирование груза</h3>
                              <p className="text-sm text-gray-600">Наведите камеру на QR код груза</p>
                            </div>
                            
                            <div 
                              id="qr-reader-placement-cargo" 
                              className="w-full bg-black rounded-lg"
                              style={{
                                width: '300px',
                                height: '300px',
                                maxWidth: '300px',
                                maxHeight: '300px',
                                minWidth: '300px',
                                minHeight: '300px',
                                margin: '0 auto'
                              }}
                            />

                            {/* Кнопка переключения камеры для размещения */}
                            {availableCameras.length > 1 && (
                              <div className="text-center mt-2">
                                <Button 
                                  onClick={() => switchCamera()}
                                  variant="outline"
                                  size="sm"
                                >
                                  <RefreshCw className="mr-2 h-4 w-4" />
                                  Переключить камеру
                                </Button>
                              </div>
                            )}

                            {/* Кнопка закрытия сканирования для размещения */}
                            {scannerActive && (
                              <div className="text-center mt-3">
                                <Button 
                                  onClick={stopMobileScanning}
                                  variant="destructive"
                                  size="sm"
                                >
                                  <X className="mr-2 h-4 w-4" />
                                  Закрыть сканирование
                                </Button>
                              </div>
                            )}

                            {/* Информационная панель размещения */}
                            {placementInfoMessage && (
                              <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                <p className="text-sm text-blue-800 text-center">
                                  {placementInfoMessage}
                                </p>
                              </div>
                            )}

                            {scannedCargo && (
                              <div className="p-3 bg-green-50 border border-green-200 rounded">
                                <p className="text-sm text-green-800">
                                  ✓ Груз отсканирован: {scannedCargo.cargo_number}
                                </p>
                              </div>
                            )}
                          </div>
                        )}

                        {mobilePlacementStep === 'scan-cell' && (
                          <div className="space-y-4">
                            <div className="text-center">
                              <h3 className="font-semibold text-purple-600">Шаг 2: Сканирование ячейки</h3>
                              <p className="text-sm text-gray-600">Наведите камеру на QR код свободной ячейки</p>
                            </div>
                            
                            <div 
                              id="qr-reader-placement-mobile" 
                              className="w-full bg-black rounded-lg"
                              style={{
                                width: '300px',
                                height: '300px',
                                maxWidth: '300px',
                                maxHeight: '300px',
                                minWidth: '300px',
                                minHeight: '300px',
                                margin: '0 auto'
                              }}
                            />

                            {/* Кнопка переключения камеры для сканирования ячейки */}
                            {availableCameras.length > 1 && (
                              <div className="text-center mt-2">
                                <Button 
                                  onClick={() => switchCamera()}
                                  variant="outline"
                                  size="sm"
                                >
                                  <RefreshCw className="mr-2 h-4 w-4" />
                                  Переключить камеру
                                </Button>
                              </div>
                            )}

                            {/* Кнопка закрытия сканирования */}
                            {scannerActive && (
                              <div className="text-center mt-3">
                                <Button 
                                  onClick={stopMobileScanning}
                                  variant="destructive"
                                  size="sm"
                                >
                                  <X className="mr-2 h-4 w-4" />
                                  Закрыть сканирование
                                </Button>
                              </div>
                            )}

                            {/* Информационная панель размещения для шага 2 */}
                            {placementInfoMessage && (
                              <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                                <p className="text-sm text-purple-800 text-center">
                                  {placementInfoMessage}
                                </p>
                              </div>
                            )}

                            {scannedCargo && (
                              <div className="p-3 bg-blue-50 border border-blue-200 rounded">
                                <p className="text-sm text-blue-800">
                                  Груз для размещения: {scannedCargo.cargo_number}
                                </p>
                              </div>
                            )}
                          </div>
                        )}

                        {mobilePlacementStep === 'confirm' && (
                          <div className="space-y-4">
                            <div className="text-center">
                              <h3 className="font-semibold text-green-600">Подтверждение размещения</h3>
                            </div>
                            
                            <div className="bg-gray-50 p-4 rounded space-y-2">
                              <div className="flex justify-between">
                                <span>Груз:</span>
                                <span className="font-medium">{scannedCargo?.cargo_number}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>Ячейка:</span>
                                <span className="font-medium">{scannedCell?.cell_code}</span>
                              </div>
                            </div>

                            <div className="flex space-x-2">
                              <Button 
                                onClick={() => confirmMobilePlacement()}
                                className="flex-1 bg-green-600 hover:bg-green-700"
                              >
                                <CheckCircle className="mr-2 h-4 w-4" />
                                Подтвердить размещение
                              </Button>
                              <Button 
                                onClick={() => resetMobilePlacement()}
                                variant="outline"
                                className="flex-1"
                              >
                                <X className="mr-2 h-4 w-4" />
                                Отменить
                              </Button>
                            </div>
                          </div>
                        )}

                        {/* Панель статистики сессии размещения */}
                        {(sessionPlacementCount > 0 || sessionPlacements.length > 0 || placementStatistics) && (
                          <div className="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                            <h4 className="font-semibold text-gray-800 mb-3 flex items-center">
                              <BarChart className="mr-2 h-4 w-4" />
                              Статистика размещения
                            </h4>
                            
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
                              <div className="text-center">
                                <div className="text-2xl font-bold text-blue-600">
                                  {sessionPlacementCount}
                                </div>
                                <div className="text-sm text-gray-600">За эту сессию</div>
                              </div>
                              <div className="text-center">
                                <div className="text-2xl font-bold text-green-600">
                                  {placementStatistics?.today_placements || 0}
                                </div>
                                <div className="text-sm text-gray-600">Сегодня размещено</div>
                              </div>
                              <div className="text-center">
                                <div className="text-2xl font-bold text-purple-600">
                                  {placementStatistics?.session_placements || sessionPlacementCount}
                                </div>
                                <div className="text-sm text-gray-600">Общее за сессию</div>
                              </div>
                            </div>

                            {/* Список размещенных грузов текущей сессии */}
                            {sessionPlacements.length > 0 && (
                              <div>
                                <h5 className="font-medium text-gray-700 mb-2">Размещено в этой сессии:</h5>
                                <div className="max-h-32 overflow-y-auto space-y-1">
                                  {sessionPlacements.map((placement, index) => (
                                    <div key={index} className="text-xs bg-white p-2 rounded border">
                                      {placement}
                                    </div>
                                  ))}
                                </div>
                              </div>
                            )}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* Приём груза */}
                  {activeTab === 'operations-receive' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Package className="mr-2 h-5 w-5" />
                          Приём груза на новый склад
                        </CardTitle>
                        <CardDescription>Сканирование груза и ячейки для обновления местоположения</CardDescription>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        {receiveStep === 'start' && (
                          <div className="space-y-4">
                            {/* Показываем контейнер камеры сначала */}
                            <div 
                              id="qr-reader-placement-edit" 
                              className="w-full bg-black rounded-lg camera-placeholder"
                              style={{
                                aspectRatio: '1',
                                maxWidth: '400px',
                                margin: '0 auto',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                color: '#a0aec0',
                                fontSize: '14px',
                                fontWeight: '500'
                              }}
                            >
                              📷 Камера будет активна здесь
                            </div>

                            {/* Кнопка запуска приёма внизу */}
                            <div className="text-center">
                              <Button 
                                onClick={() => startMobileReceive()}
                                className="w-full bg-orange-600 hover:bg-orange-700 text-white"
                                size="lg"
                              >
                                <Camera className="mr-2 h-5 w-5" />
                                Начать приём груза
                              </Button>
                            </div>
                          </div>
                        )}

                        {receiveStep === 'scan-cargo' && (
                          <div className="space-y-4">
                            <div className="text-center">
                              <h3 className="font-semibold text-orange-600">Шаг 1: Сканирование груза</h3>
                              <p className="text-sm text-gray-600">Наведите камеру на QR код груза для приёма</p>
                            </div>
                            
                            <div 
                              id="qr-reader-placement-receive" 
                              className="w-full bg-black rounded-lg"
                              style={{
                                aspectRatio: '1',
                                maxWidth: '400px',
                                margin: '0 auto'
                              }}
                            />

                            {/* Кнопка переключения камеры для приёма груза */}
                            {availableCameras.length > 1 && (
                              <div className="text-center mt-2">
                                <Button 
                                  onClick={() => switchCamera()}
                                  variant="outline"
                                  size="sm"
                                >
                                  <RefreshCw className="mr-2 h-4 w-4" />
                                  Переключить камеру
                                </Button>
                              </div>
                            )}

                            {/* Кнопка закрытия сканирования для приёма груза */}
                            {scannerActive && (
                              <div className="text-center mt-3">
                                <Button 
                                  onClick={stopMobileScanning}
                                  variant="destructive"
                                  size="sm"
                                >
                                  <X className="mr-2 h-4 w-4" />
                                  Закрыть сканирование
                                </Button>
                              </div>
                            )}

                            {receivedCargo && (
                              <div className="p-3 bg-orange-50 border border-orange-200 rounded">
                                <p className="text-sm text-orange-800">
                                  ✓ Груз для приёма: {receivedCargo.cargo_number}
                                </p>
                              </div>
                            )}
                          </div>
                        )}

                        {receiveStep === 'scan-new-cell' && (
                          <div className="space-y-4">
                            <div className="text-center">
                              <h3 className="font-semibold text-green-600">Шаг 2: Сканирование новой ячейки</h3>
                              <p className="text-sm text-gray-600">Наведите камеру на QR код ячейки нового склада</p>
                            </div>
                            
                            <div 
                              id="qr-reader-placement-update" 
                              className="w-full bg-black rounded-lg"
                              style={{
                                aspectRatio: '1',
                                maxWidth: '400px',
                                margin: '0 auto'
                              }}
                            />

                            {/* Кнопка переключения камеры для новой ячейки */}
                            {availableCameras.length > 1 && (
                              <div className="text-center mt-2">
                                <Button 
                                  onClick={() => switchCamera()}
                                  variant="outline"
                                  size="sm"
                                >
                                  <RefreshCw className="mr-2 h-4 w-4" />
                                  Переключить камеру
                                </Button>
                              </div>
                            )}

                            {/* Кнопка закрытия сканирования для новой ячейки */}
                            {scannerActive && (
                              <div className="text-center mt-3">
                                <Button 
                                  onClick={stopMobileScanning}
                                  variant="destructive"
                                  size="sm"
                                >
                                  <X className="mr-2 h-4 w-4" />
                                  Закрыть сканирование
                                </Button>
                              </div>
                            )}

                            {receivedCargo && (
                              <div className="p-3 bg-blue-50 border border-blue-200 rounded">
                                <p className="text-sm text-blue-800">
                                  Груз для размещения: {receivedCargo.cargo_number}
                                </p>
                              </div>
                            )}
                          </div>
                        )}

                        {receiveStep === 'confirm' && (
                          <div className="space-y-4">
                            <div className="text-center">
                              <h3 className="font-semibold text-green-600">Подтверждение приёма</h3>
                            </div>
                            
                            <div className="bg-gray-50 p-4 rounded space-y-2">
                              <div className="flex justify-between">
                                <span>Груз:</span>
                                <span className="font-medium">{receivedCargo?.cargo_number}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>Новая ячейка:</span>
                                <span className="font-medium">{newCell?.cell_code}</span>
                              </div>
                              <div className="flex justify-between">
                                <span>Новый склад:</span>
                                <span className="font-medium">{newCell?.warehouse_name}</span>
                              </div>
                            </div>

                            <div className="flex space-x-2">
                              <Button 
                                onClick={() => confirmMobileReceive()}
                                className="flex-1 bg-green-600 hover:bg-green-700"
                              >
                                <CheckCircle className="mr-2 h-4 w-4" />
                                Подтвердить приём
                              </Button>
                              <Button 
                                onClick={() => resetMobileReceive()}
                                variant="outline"
                                className="flex-1"
                              >
                                <X className="mr-2 h-4 w-4" />
                                Отменить
                              </Button>
                            </div>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* Управление грузами */}
              {activeSection === 'cargo-management' && (
                <div className="space-y-6">
                  {/* Принимать новый груз */}
                  {activeTab === 'cargo-accept' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Plus className="mr-2 h-5 w-5" />
                            Принимать новый груз
                          </div>
                          {/* УЛУЧШЕНИЕ: Две отдельные кнопки */}
                          <div className="flex space-x-3">
                            {/* Кнопка для забора груза */}
                            <Button
                              type="button"
                              onClick={togglePickupMode}
                              variant={isPickupMode ? "default" : "outline"}
                              className={`${isPickupMode 
                                ? 'bg-orange-600 hover:bg-orange-700 text-white' 
                                : 'border-orange-300 text-orange-700 hover:bg-orange-100'
                              }`}
                            >
                              <Truck className="mr-2 h-4 w-4" />
                              Забор груза
                            </Button>
                          </div>
                        </CardTitle>
                        <CardDescription>
                          {isPickupMode 
                            ? 'Упрощенная форма для заявки на забор груза курьером'
                            : 'Заполните форму для приема нового груза от клиента'
                          }
                        </CardDescription>
                        {isFilledFromProfile && profileSourceUser && (
                          <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                            <div className="flex items-center text-blue-800">
                              <User className="mr-2 h-4 w-4" />
                              <span className="text-sm font-medium">
                                Данные автозаполнены из профиля: {profileSourceUser.full_name} ({profileSourceUser.user_number})
                              </span>
                            </div>
                            <p className="text-xs text-blue-600 mt-1">
                              Данные отправителя и получателя заполнены автоматически. Заполните только грузы.
                            </p>
                          </div>
                        )}
                      </CardHeader>
                      <CardContent>
                        {/* Контейнер уведомлений о поступивших грузах для операторов */}
                        {(user?.role === 'warehouse_operator' || user?.role === 'admin') && warehouseNotifications.length > 0 && (
                          <Card className="mb-6 border-blue-200 bg-blue-50">
                            <CardHeader>
                              <CardTitle className="flex items-center justify-between">
                                <div className="flex items-center">
                                  <Bell className="mr-2 h-5 w-5 text-blue-700" />
                                  Поступившие грузы на склад ({warehouseNotifications.length})
                                </div>
                                {warehouseNotifications.length > 2 && (
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => setShowAllNotifications(!showAllNotifications)}
                                    className="text-blue-700 border-blue-300 hover:bg-blue-100"
                                  >
                                    {showAllNotifications ? 'Скрыть' : `Показать всех (${warehouseNotifications.length})`}
                                  </Button>
                                )}
                              </CardTitle>
                              <CardDescription className="text-blue-600">
                                Курьеры сдали следующие грузы на склад. Необходимо принять и оформить их в системе.
                                {!showAllNotifications && warehouseNotifications.length > 2 && 
                                  ` Показано ${Math.min(2, warehouseNotifications.length)} из ${warehouseNotifications.length} уведомлений.`
                                }
                              </CardDescription>
                            </CardHeader>
                            <CardContent>
                              <div className="space-y-3">
                                {(showAllNotifications ? warehouseNotifications : warehouseNotifications.slice(0, 2))
                                  .filter(notification => notification?.id) // Добавляем фильтр для безопасности
                                  .map((notification, index) => (
                                  <div
                                    key={`${notification.id}-${notification.status}-${index}`} // Более уникальный ключ
                                    className="bg-white p-4 rounded-lg border border-blue-200 shadow-sm"
                                  >
                                    <div className="flex items-start justify-between">
                                      <div className="flex-1">
                                        <div className="flex items-center space-x-4 mb-2">
                                          <Badge className="bg-orange-100 text-orange-700 border-orange-200">
                                            № {notification.request_number || 'N/A'}
                                          </Badge>
                                          <Badge className="bg-green-100 text-green-700 border-green-200">
                                            {notification.courier_name}
                                          </Badge>
                                          {/* Индикатор статуса уведомления */}
                                          <Badge variant={
                                            notification.status === 'pending_acceptance' ? 'default' :
                                            notification.status === 'in_processing' ? 'secondary' : 'outline'
                                          } className={
                                            notification.status === 'pending_acceptance' ? 'bg-blue-100 text-blue-800' :
                                            notification.status === 'in_processing' ? 'bg-yellow-100 text-yellow-800' : 
                                            'bg-gray-100 text-gray-800'
                                          }>
                                            {notification.status === 'pending_acceptance' ? '🔔 Новое' :
                                             notification.status === 'in_processing' ? '⏳ Обрабатывается' : 
                                             '✅ Обработано'}
                                          </Badge>
                                        </div>
                                        
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                                          <div>
                                            <span className="font-medium text-gray-700">Отправитель:</span>
                                            <span className="ml-1">{notification.sender_full_name}</span>
                                          </div>
                                          <div>
                                            <span className="font-medium text-gray-700">Телефон:</span>
                                            <span className="ml-1">{notification.sender_phone}</span>
                                          </div>
                                          <div>
                                            <span className="font-medium text-gray-700">Адрес забора:</span>
                                            <span className="ml-1">{notification.pickup_address}</span>
                                          </div>
                                          <div>
                                            <span className="font-medium text-gray-700">Наименование груза:</span>
                                            <span className="ml-1">{notification.destination || 'Не указано'}</span>
                                          </div>
                                          <div>
                                            <span className="font-medium text-gray-700">Плата курьеру:</span>
                                            <span className="ml-1 font-semibold text-green-600">{notification.courier_fee || 0} ₽</span>
                                          </div>
                                          <div>
                                            <span className="font-medium text-gray-700">Сдан на склад:</span>
                                            <span className="ml-1">{new Date(notification.delivered_at).toLocaleString('ru-RU')}</span>
                                          </div>
                                        </div>
                                      </div>
                                      
                                      <div className="ml-4">
                                        {/* Условные кнопки в зависимости от статуса */}
                                        {notification.status === 'pending_acceptance' && (
                                          <Button
                                            onClick={() => handleAcceptWarehouseDelivery(notification.id)}
                                            className="bg-blue-600 hover:bg-blue-700"
                                            size="sm"
                                          >
                                            <CheckCircle className="mr-2 h-4 w-4" />
                                            Принять груз
                                          </Button>
                                        )}
                                        
                                        {notification.status === 'in_processing' && (
                                          <div className="flex flex-col space-y-2">
                                            <div className="text-center mb-2">
                                              <div className="text-sm text-yellow-600 font-medium">Обрабатывается</div>
                                              <div className="text-xs text-gray-500 mt-1">
                                                {notification.processing_by}
                                              </div>
                                            </div>
                                            
                                            {/* Функциональные кнопки для обработки заявки */}
                                            <div className="flex flex-col space-y-1">
                                              <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={() => handlePrintPickupQR(notification)}
                                                className="text-blue-600 border-blue-300 hover:bg-blue-50"
                                              >
                                                <QrCode className="mr-1 h-3 w-3" />
                                                QR код
                                              </Button>
                                              
                                              <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={() => handlePrintPickupInvoice(notification)}
                                                className="text-purple-600 border-purple-300 hover:bg-purple-50"
                                              >
                                                <FileText className="mr-1 h-3 w-3" />
                                                Накладная
                                              </Button>
                                              
                                              <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={() => handleViewNotification(notification)}
                                                className="text-orange-600 border-orange-300 hover:bg-orange-50"
                                              >
                                                <Eye className="mr-1 h-3 w-3" />
                                                Просмотр
                                              </Button>
                                              
                                              <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={() => handleSendToPlacement(notification)}
                                                className="text-green-600 border-green-300 hover:bg-green-50"
                                              >
                                                <Package className="mr-1 h-3 w-3" />
                                                Отправить на размещение
                                              </Button>
                                            </div>
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </CardContent>
                          </Card>
                        )}
                        
                        <form onSubmit={isPickupMode ? handlePickupCargoSubmit : handleAcceptCargo} className="space-y-4 max-w-2xl">
                          {isPickupMode ? (
                            /* РЕЖИМ ЗАБОРА ГРУЗА - только необходимые поля */
                            <>
                              <div className="bg-orange-50 p-4 rounded-lg border border-orange-200 mb-6">
                                <h3 className="font-semibold text-orange-800 mb-2 flex items-center">
                                  <Truck className="mr-2 h-5 w-5" />
                                  Заявка на забор груза
                                </h3>
                                <p className="text-sm text-orange-700">
                                  Заполните только основные данные для отправки заявки курьеру на забор груза
                                </p>
                              </div>

                              <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4">
                                {/* ФИО отправителя */}
                                <div>
                                  <Label htmlFor="pickup_sender_name" className="text-orange-700 font-medium">
                                    ФИО отправителя *
                                  </Label>
                                  <Input
                                    id="pickup_sender_name"
                                    value={operatorCargoForm.sender_full_name}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, sender_full_name: e.target.value})}
                                    placeholder="Иванов Иван Иванович"
                                    className="border-orange-200 focus:border-orange-400"
                                    required
                                  />
                                </div>

                                {/* Наименование груза */}
                                <div>
                                  <Label htmlFor="pickup_cargo_name" className="text-orange-700 font-medium">
                                    Наименование груза *
                                  </Label>
                                  <Input
                                    id="pickup_cargo_name"
                                    value={operatorCargoForm.cargo_name || ''}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, cargo_name: e.target.value})}
                                    placeholder="Документы, одежда, подарки..."
                                    className="border-orange-200 focus:border-orange-400"
                                    required
                                  />
                                </div>
                              </div>

                              {/* Телефоны отправителя с возможностью добавления нескольких */}
                              <div>
                                <div className="flex items-center justify-between mb-2">
                                  <Label className="text-orange-700 font-medium">
                                    Телефоны отправителя *
                                  </Label>
                                  <Button
                                    type="button"
                                    onClick={addSenderPhone}
                                    variant="outline"
                                    size="sm"
                                    className="border-orange-300 text-orange-700 hover:bg-orange-100"
                                  >
                                    <Plus className="mr-1 h-3 w-3" />
                                    Добавить номер
                                  </Button>
                                </div>
                                <div className="space-y-2">
                                  {senderPhones.map((phone, index) => (
                                    <div key={index} className="flex gap-2">
                                      <Input
                                        type="tel"
                                        value={phone}
                                        onChange={(e) => updateSenderPhone(index, e.target.value)}
                                        placeholder={`Телефон ${index + 1}: +7XXXXXXXXXX`}
                                        className="border-orange-200 focus:border-orange-400"
                                        required={index === 0}
                                      />
                                      {senderPhones.length > 1 && (
                                        <Button
                                          type="button"
                                          onClick={() => removeSenderPhone(index)}
                                          variant="outline"
                                          size="sm"
                                          className="border-red-300 text-red-600 hover:bg-red-50"
                                        >
                                          <Minus className="h-3 w-3" />
                                        </Button>
                                      )}
                                    </div>
                                  ))}
                                </div>
                              </div>

                              {/* Адрес места нахождения груза */}
                              <div>
                                <Label htmlFor="pickup_address" className="text-orange-700 font-medium">
                                  Адрес места нахождения груза *
                                </Label>
                                <Textarea
                                  id="pickup_address"
                                  value={operatorCargoForm.pickup_address}
                                  onChange={(e) => setOperatorCargoForm({...operatorCargoForm, pickup_address: e.target.value})}
                                  placeholder="Укажите точный адрес, где находится груз для забора"
                                  className="border-orange-200 focus:border-orange-400"
                                  rows={2}
                                  required
                                />
                              </div>

                              {/* НОВОЕ: Карта маршрута для забора груза */}
                              {console.log('🔧 Отладка карты (режим забора):', {
                                pickup_address: operatorCargoForm.pickup_address,
                                operatorWarehouses: operatorWarehouses.length,
                                warehouseData: operatorWarehouses[0] // ОТЛАДКА: все данные склада
                              })}
                              {operatorCargoForm.pickup_address && operatorWarehouses.length > 0 && (
                                <div className="mt-4">
                                  <div className="mb-2 p-2 bg-orange-50 rounded border">
                                    <p className="text-sm text-orange-700">
                                      🗺️ <strong>Карта маршрута забора груза!</strong><br/>
                                      Маршрут: от <strong>{operatorCargoForm.pickup_address}</strong> до склада <strong>{operatorWarehouses[0]?.name}</strong>
                                    </p>
                                    <p className="text-xs text-gray-600 mt-1">
                                      🔧 Отладка адреса склада: location="{operatorWarehouses[0]?.location}", 
                                      address="{operatorWarehouses[0]?.address}",
                                      full_address="{operatorWarehouses[0]?.full_address}"
                                    </p>
                                  </div>
                                  {/* ТЕСТОВАЯ ПРОСТАЯ КАРТА */}
                                  <SimpleRouteMap
                                    fromAddress={operatorCargoForm.pickup_address}
                                    toAddress={operatorWarehouses[0]?.address || operatorWarehouses[0]?.location || 'Душанбе'}
                                    warehouseName={`Склад: ${operatorWarehouses[0]?.name || 'Склад'}`}
                                  />
                                  
                                  {/* ОСНОВНАЯ КАРТА */}
                                  <RouteMap
                                    fromAddress={operatorCargoForm.pickup_address}
                                    toAddress={operatorWarehouses[0]?.address || operatorWarehouses[0]?.location || 'Душанбе'}
                                    warehouseName={`Склад: ${operatorWarehouses[0]?.name || 'Склад'}`}
                                    onRouteCalculated={(routeData) => {
                                      setRouteInfo(routeData);
                                      console.log('📍 Информация о маршруте забора:', routeData);
                                    }}
                                  />
                                </div>
                              )}
                              
                              {/* Показываем почему карта не отображается */}
                              {!operatorCargoForm.pickup_address && (
                                <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded">
                                  <p className="text-sm text-yellow-800">
                                    ℹ️ Заполните "Адрес места нахождения груза" чтобы увидеть карту маршрута забора
                                  </p>
                                </div>
                              )}
                              
                              {operatorCargoForm.pickup_address && operatorWarehouses.length === 0 && (
                                <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded">
                                  <p className="text-sm text-red-800">
                                    ⚠️ Не найдены склады оператора для маршрута. Склады: {operatorWarehouses.length}
                                  </p>
                                </div>
                              )}

                              {/* Дата и время забора груза */}
                              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                <div>
                                  <Label htmlFor="pickup_date" className="text-orange-700 font-medium">
                                    Дата забора *
                                  </Label>
                                  <Input
                                    id="pickup_date"
                                    type="date"
                                    value={operatorCargoForm.pickup_date}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, pickup_date: e.target.value})}
                                    className="border-orange-200 focus:border-orange-400"
                                    min={new Date().toISOString().split('T')[0]}
                                    required
                                  />
                                </div>
                                <div>
                                  <Label htmlFor="pickup_time_from" className="text-orange-700 font-medium">
                                    Время с *
                                  </Label>
                                  <Input
                                    id="pickup_time_from"
                                    type="time"
                                    value={operatorCargoForm.pickup_time_from}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, pickup_time_from: e.target.value})}
                                    className="border-orange-200 focus:border-orange-400"
                                    required
                                  />
                                </div>
                                <div>
                                  <Label htmlFor="pickup_time_to" className="text-orange-700 font-medium">
                                    Время до *
                                  </Label>
                                  <Input
                                    id="pickup_time_to"
                                    type="time"
                                    value={operatorCargoForm.pickup_time_to}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, pickup_time_to: e.target.value})}
                                    className="border-orange-200 focus:border-orange-400"
                                    required
                                  />
                                </div>
                              </div>

                              {/* Оплата за курьерскую услугу */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <Label htmlFor="courier_fee" className="text-orange-700 font-medium">
                                    Стоимость курьерской услуги *
                                  </Label>
                                  <Input
                                    id="courier_fee"
                                    type="number"
                                    step="0.01"
                                    min="0"
                                    value={operatorCargoForm.courier_fee}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, courier_fee: e.target.value})}
                                    placeholder="1000.00"
                                    className="border-orange-200 focus:border-orange-400"
                                    required
                                  />
                                  <p className="text-xs text-orange-600 mt-1">Стоимость в рублях</p>
                                </div>

                                {/* Статус оплаты для курьерской службы */}
                                <div>
                                  <Label htmlFor="courier_payment_status" className="text-orange-700 font-medium">
                                    Статус оплаты курьеру *
                                  </Label>
                                  <Select
                                    value={operatorCargoForm.payment_method}
                                    onValueChange={(value) => setOperatorCargoForm({...operatorCargoForm, payment_method: value})}
                                  >
                                    <SelectTrigger className="border-orange-200 focus:border-orange-400">
                                      <SelectValue placeholder="Статус оплаты" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="paid">Оплачено</SelectItem>
                                      <SelectItem value="not_paid">Не оплачено</SelectItem>
                                      <SelectItem value="partial">Частично оплачено</SelectItem>
                                      <SelectItem value="on_delivery">Оплата при доставке</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </div>
                              </div>

                              {/* Кнопка отправки заявки на курьера */}
                              <div className="pt-6 border-t border-orange-200">
                                <Button
                                  type="submit"
                                  className="w-full bg-orange-600 hover:bg-orange-700 text-white"
                                  disabled={!operatorCargoForm.sender_full_name || 
                                           !operatorCargoForm.pickup_address || 
                                           !operatorCargoForm.pickup_date ||
                                           !operatorCargoForm.pickup_time_from ||
                                           !operatorCargoForm.pickup_time_to ||
                                           !operatorCargoForm.courier_fee ||
                                           senderPhones.filter(p => p.trim()).length === 0}
                                >
                                  <Truck className="mr-2 h-4 w-4" />
                                  Отправить заявку на курьера
                                </Button>
                                <p className="text-xs text-orange-600 text-center mt-2">
                                  Заявка будет отправлена доступным курьерам для забора груза
                                </p>
                              </div>
                            </>
                          ) : (
                            /* ОБЫЧНЫЙ РЕЖИМ - все поля как было */
                            <>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="sender_full_name">ФИО отправителя</Label>
                              <Input
                                id="sender_full_name"
                                value={operatorCargoForm.sender_full_name}
                                onChange={(e) => setOperatorCargoForm({...operatorCargoForm, sender_full_name: e.target.value})}
                                placeholder="Иванов Иван Иванович"
                                required
                              />
                            </div>
                            <div>
                              <Label htmlFor="sender_phone">Телефон отправителя</Label>
                              <Input
                                id="sender_phone"
                                type="tel"
                                value={operatorCargoForm.sender_phone}
                                onChange={(e) => setOperatorCargoForm({...operatorCargoForm, sender_phone: e.target.value})}
                                placeholder="+7XXXXXXXXXX"
                                required
                              />
                            </div>
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="recipient_full_name">ФИО получателя</Label>
                              <Input
                                id="recipient_full_name"
                                value={operatorCargoForm.recipient_full_name}
                                onChange={(e) => setOperatorCargoForm({...operatorCargoForm, recipient_full_name: e.target.value})}
                                placeholder="Петров Петр Петрович"
                                required
                              />
                            </div>
                            <div>
                              <Label htmlFor="recipient_phone">Телефон получателя</Label>
                              <Input
                                id="recipient_phone"
                                type="tel"
                                value={operatorCargoForm.recipient_phone}
                                onChange={(e) => setOperatorCargoForm({...operatorCargoForm, recipient_phone: e.target.value})}
                                placeholder="+992XXXXXXXXX"
                                required
                              />
                            </div>
                          </div>

                          <div>
                            <Label htmlFor="recipient_address">Адрес получения груза</Label>
                            <Input
                              id="recipient_address"
                              value={operatorCargoForm.recipient_address}
                              onChange={(e) => setOperatorCargoForm({...operatorCargoForm, recipient_address: e.target.value})}
                              placeholder="Душанбе, ул. Рудаки, 10, кв. 5"
                              required
                            />
                          </div>

                          {/* НОВЫЕ ПОЛЯ: Город и склад выдачи груза */}
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="delivery_city">Город выдачи груза *</Label>
                              {allCitiesLoading ? (
                                <div className="flex items-center px-3 py-2 border border-gray-300 rounded-md">
                                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                                  <span className="text-sm text-gray-500">Загрузка городов...</span>
                                </div>
                              ) : (
                                <div className="relative city-autocomplete">
                                  <Input
                                    id="delivery_city"
                                    type="text"
                                    value={citySearchQuery}
                                    onChange={(e) => handleCitySearchChange(e.target.value)}
                                    onFocus={() => {
                                      if (filteredCities.length > 0) setShowCityDropdown(true);
                                    }}
                                    placeholder="Начните вводить название города..."
                                    className="w-full"
                                    required
                                  />
                                  
                                  {/* Выпадающий список с найденными городами */}
                                  {showCityDropdown && filteredCities.length > 0 && (
                                    <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                      {filteredCities.map((cityData, index) => (
                                        <div
                                          key={index}
                                          onClick={() => handleDeliveryCityChange(cityData.city_name)}
                                          className="px-4 py-2 hover:bg-blue-50 cursor-pointer border-b border-gray-100 last:border-b-0"
                                        >
                                          <div className="font-medium text-gray-900">{cityData.city_name}</div>
                                          <div className="text-sm text-gray-500">
                                            {cityData.warehouses_count} {cityData.warehouses_count === 1 ? 'склад' : 'складов'}
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  )}
                                  
                                  {/* Показать сообщение если ничего не найдено */}
                                  {citySearchQuery.length > 0 && filteredCities.length === 0 && (
                                    <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg p-4 text-center text-gray-500">
                                      Городов не найдено
                                    </div>
                                  )}
                                </div>
                              )}
                            </div>
                            
                            <div>
                              <Label htmlFor="delivery_warehouse">Склад для выдачи груза *</Label>
                              {selectedDeliveryCity && availableWarehousesForCity.length > 0 ? (
                                <div className="space-y-2">
                                  <select
                                    id="delivery_warehouse"
                                    value={selectedDeliveryWarehouse}
                                    onChange={(e) => handleDeliveryWarehouseChange(e.target.value)}
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                  >
                                    {availableWarehousesForCity.map((warehouse, index) => (
                                      <option key={index} value={warehouse.warehouse_id}>
                                        {warehouse.warehouse_name} ({warehouse.warehouse_location})
                                      </option>
                                    ))}
                                  </select>
                                  {selectedDeliveryWarehouse && (
                                    <div className="bg-green-50 p-2 rounded-md border border-green-200">
                                      <div className="text-sm text-green-700 flex items-center">
                                        <CheckCircle className="h-4 w-4 mr-1" />
                                        Автоматически выбран: {availableWarehousesForCity.find(w => w.warehouse_id === selectedDeliveryWarehouse)?.warehouse_name}
                                      </div>
                                    </div>
                                  )}
                                </div>
                              ) : (
                                <div className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 text-gray-500">
                                  {!selectedDeliveryCity 
                                    ? 'Сначала выберите город' 
                                    : availableWarehousesForCity.length === 0 
                                      ? 'Нет доступных складов для выбранного города' 
                                      : 'Загрузка складов...'}
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Переключатель между режимами */}
                          <div className="mb-4 p-4 bg-gray-50 rounded-lg">
                            <Label className="flex items-center space-x-2 cursor-pointer">
                              <input
                                type="checkbox"
                                checked={operatorCargoForm.use_multi_cargo}
                                onChange={(e) => {
                                  setOperatorCargoForm({
                                    ...operatorCargoForm,
                                    use_multi_cargo: e.target.checked
                                  });
                                  if (!e.target.checked) {
                                    setTotalWeight(0);
                                    setTotalCost(0);
                                  }
                                }}
                                className="rounded"
                              />
                              <span className="text-sm font-medium">
                                Несколько видов груза (с калькулятором)
                              </span>
                            </Label>
                          </div>

                          {!operatorCargoForm.use_multi_cargo ? (
                            // Старая форма для одного груза
                            <>
                              <div>
                                <Label htmlFor="cargo_name">Название груза</Label>
                                <Input
                                  id="cargo_name"
                                  value={operatorCargoForm.cargo_name}
                                  onChange={(e) => setOperatorCargoForm({...operatorCargoForm, cargo_name: e.target.value})}
                                  placeholder="Документы, личные вещи, электроника"
                                  required
                                />
                              </div>

                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <Label htmlFor="weight">Вес груза (кг)</Label>
                                  <Input
                                    id="weight"
                                    type="number"
                                    step="0.1"
                                    value={operatorCargoForm.weight}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, weight: e.target.value})}
                                    placeholder="10.5"
                                    required
                                  />
                                </div>
                                <div>
                                  <Label htmlFor="declared_value">Стоимость груза (руб.)</Label>
                                  <Input
                                    id="declared_value"
                                    type="number"
                                    step="0.01"
                                    value={operatorCargoForm.declared_value}
                                    onChange={(e) => setOperatorCargoForm({...operatorCargoForm, declared_value: e.target.value})}
                                    placeholder="5000"
                                    required
                                  />
                                </div>
                              </div>
                            </>
                          ) : (
                            // Новая форма с множественными грузами и калькулятором
                            <>
                              <div className="bg-blue-50 p-4 rounded-lg">
                                <h3 className="font-semibold text-lg mb-3 flex items-center">
                                  <Package className="mr-2 h-5 w-5" />
                                  Список грузов
                                </h3>
                                
                                {operatorCargoForm.cargo_items.map((item, index) => (
                                  <div key={`cargo-item-${index}`} className="mb-4 p-4 bg-white rounded border">
                                    <div className="flex items-center justify-between mb-2">
                                      <span className="font-medium text-sm text-gray-600">
                                        Груз #{index + 1}
                                      </span>
                                      {operatorCargoForm.cargo_items.length > 1 && (
                                        <Button
                                          type="button"
                                          variant="outline"
                                          size="sm"
                                          onClick={() => removeCargoItem(index)}
                                        >
                                          <X className="h-4 w-4" />
                                        </Button>
                                      )}
                                    </div>
                                    
                                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-3">
                                      <div>
                                        <Label>Название груза</Label>
                                        <Input
                                          key={`cargo-name-${index}`}
                                          value={item.cargo_name || ''}
                                          onChange={(e) => {
                                            const newItems = [...operatorCargoForm.cargo_items];
                                            newItems[index] = { ...newItems[index], cargo_name: e.target.value };
                                            setOperatorCargoForm(prev => ({
                                              ...prev,
                                              cargo_items: newItems
                                            }));
                                          }}
                                          placeholder="Документы, одежда, электроника"
                                          required
                                        />
                                      </div>
                                      <div>
                                        <Label>Количество</Label>
                                        <Input
                                          type="number"
                                          min="1"
                                          step="1"
                                          value={item.quantity || 1}
                                          onChange={(e) => updateCargoItem(index, 'quantity', e.target.value)}
                                          placeholder="1"
                                          required
                                        />
                                      </div>
                                      <div>
                                        <Label>Вес (кг)</Label>
                                        <Input
                                          type="number"
                                          step="0.1"
                                          min="0"
                                          value={item.weight}
                                          onChange={(e) => updateCargoItem(index, 'weight', e.target.value)}
                                          placeholder="1.0"
                                          required
                                        />
                                      </div>
                                      <div>
                                        <Label>Цена за кг (₽)</Label>
                                        <Input
                                          type="number"
                                          step="0.01"
                                          min="0"
                                          value={item.price_per_kg}
                                          onChange={(e) => updateCargoItem(index, 'price_per_kg', e.target.value)}
                                          placeholder="50.00"
                                          required
                                        />
                                      </div>
                                      <div>
                                        <Label>Общая сумма (₽)</Label>
                                        <Input
                                          type="number"
                                          step="0.01"
                                          min="0"
                                          value={item.total_amount || '0.00'}
                                          readOnly
                                          className="bg-gray-100"
                                          placeholder="0.00"
                                        />
                                      </div>
                                    </div>
                                    
                                    {/* Показываем промежуточный расчет для каждого груза */}
                                    {item.weight && item.price_per_kg && (
                                      <div className="mt-2 p-2 bg-gray-50 rounded text-sm">
                                        <span className="text-gray-600">
                                          Стоимость: {parseFloat(item.weight)} кг × {parseFloat(item.price_per_kg)} руб/кг = 
                                          <span className="font-semibold text-green-600 ml-1">
                                            {(parseFloat(item.weight) * parseFloat(item.price_per_kg)).toFixed(2)} руб
                                          </span>
                                        </span>
                                      </div>
                                    )}
                                  </div>
                                ))}
                                
                                <Button
                                  type="button"
                                  variant="outline"
                                  onClick={addCargoItem}
                                  className="w-full"
                                >
                                  <Plus className="mr-2 h-4 w-4" />
                                  Добавить еще груз
                                </Button>
                              </div>

                              {/* Калькулятор стоимости с детальной разбивкой */}
                              <div className="bg-green-50 p-4 rounded-lg">
                                <h3 className="font-semibold text-lg mb-3 flex items-center">
                                  <Calculator className="mr-2 h-5 w-5" />
                                  Калькулятор стоимости
                                </h3>
                                
                                {/* Детальная разбивка по каждому грузу */}
                                {cargoBreakdown.length > 0 && (
                                  <div className="mb-4">
                                    <h4 className="font-medium text-sm text-gray-700 mb-2">Детальная разбивка:</h4>
                                    <div className="space-y-2">
                                      {cargoBreakdown.map((item, index) => (
                                        <div key={`breakdown-${index}-${item.name}`} className="bg-white p-3 rounded border-l-4 border-blue-400">
                                          <div className="flex justify-between items-center">
                                            <span className="text-sm font-medium text-gray-700">
                                              Груз #{item.index}: {item.name}
                                            </span>
                                            <span className="text-sm font-bold text-green-600">
                                              {item.cost.toFixed(2)} руб
                                            </span>
                                          </div>
                                          <div className="text-xs text-gray-500 mt-1">
                                            {item.quantity}шт × {(item.weight/item.quantity).toFixed(1)} кг × {item.pricePerKg.toFixed(2)} руб/кг
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                )}

                                {/* Общие итоги */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4">
                                  <div className="bg-white p-3 rounded border">
                                    <div className="text-sm text-gray-600">Общий вес</div>
                                    <div className="text-2xl font-bold text-blue-600">
                                      {totalWeight.toFixed(1)} кг
                                    </div>
                                  </div>
                                  <div className="bg-white p-3 rounded border">
                                    <div className="text-sm text-gray-600">Общая стоимость</div>
                                    <div className="text-2xl font-bold text-green-600">
                                      {totalCost.toFixed(2)} ₽
                                    </div>
                                  </div>
                                </div>

                                {/* Сводка расчетов */}
                                {cargoBreakdown.length > 1 && (
                                  <div className="mt-3 p-2 bg-white rounded text-sm border-t-2 border-green-400">
                                    <div className="font-medium text-gray-700 mb-1">ИТОГО:</div>
                                    {cargoBreakdown.map((item, index) => (
                                      <div key={`cost-${index}-${item.name}`} className="flex justify-between text-xs text-gray-600">
                                        <span>{item.name}: {item.weight.toFixed(1)}кг × {item.pricePerKg.toFixed(2)}руб</span>
                                        <span>{item.cost.toFixed(2)}руб</span>
                                      </div>
                                    ))}
                                    <div className="flex justify-between font-bold text-sm text-green-700 mt-1 pt-1 border-t">
                                      <span>Всего: {totalWeight.toFixed(1)} кг</span>
                                      <span>{totalCost.toFixed(2)} руб</span>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </>
                          )}

                          <div>
                            <Label htmlFor="route">Маршрут</Label>
                            <Select 
                              key="old-route-select"
                              value={operatorCargoForm.route} 
                              onValueChange={(value) => {
                                setOperatorCargoForm(prev => ({
                                  ...prev, 
                                  route: value
                                }));
                              }}
                            >
                              <SelectTrigger key="old-route-trigger">
                                <SelectValue placeholder="Выберите маршрут" />
                              </SelectTrigger>
                              <SelectContent key="old-route-content">
                                <SelectItem key="old-moscow-to-tajikistan" value="moscow_to_tajikistan">Москва → Таджикистан</SelectItem>
                                <SelectItem key="old-tajikistan-to-moscow" value="tajikistan_to_moscow">Таджикистан → Москва</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>

                          <div>
                            <Label htmlFor="description">Описание груза</Label>
                            <Textarea
                              id="description"
                              value={operatorCargoForm.description}
                              onChange={(e) => setOperatorCargoForm({...operatorCargoForm, description: e.target.value})}
                              placeholder="Личные вещи, документы, подарки..."
                              required
                            />
                          </div>

                          {/* Способ оплаты */}
                          <div>
                            <Label htmlFor="payment_method">Способ оплаты</Label>
                            <Select 
                              key="payment-method-select"
                              value={operatorCargoForm.payment_method} 
                              onValueChange={(value) => {
                                const newForm = { ...operatorCargoForm };
                                newForm.payment_method = value;
                                
                                // Сброс зависимых полей
                                if (value !== 'cash' && value !== 'card_transfer') {
                                  newForm.payment_amount = '';
                                }
                                if (value !== 'credit') {
                                  newForm.debt_due_date = '';
                                }
                                
                                setOperatorCargoForm(newForm);
                              }}
                            >
                              <SelectTrigger key="payment-method-trigger">
                                <SelectValue placeholder="Выберите способ оплаты" />
                              </SelectTrigger>
                              <SelectContent key="payment-method-content">
                                <SelectItem key="payment-not_paid" value="not_paid">Не оплачено</SelectItem>
                                <SelectItem key="payment-cash" value="cash">Оплата наличными</SelectItem>
                                <SelectItem key="payment-card_transfer" value="card_transfer">Перевод на карту</SelectItem>
                                <SelectItem key="payment-cash_on_delivery" value="cash_on_delivery">Оплата при получении</SelectItem>
                                <SelectItem key="payment-credit" value="credit">Оплата в долг</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>

                          {/* Поле суммы оплаты (только для наличных и карты) */}
                          {(operatorCargoForm.payment_method === 'cash' || operatorCargoForm.payment_method === 'card_transfer') && (
                            <div>
                              <Label htmlFor="payment_amount">Сумма оплаты (сом)</Label>
                              <Input
                                id="payment_amount"
                                type="number"
                                step="0.01"
                                value={operatorCargoForm.payment_amount}
                                onChange={(e) => setOperatorCargoForm({...operatorCargoForm, payment_amount: e.target.value})}
                                placeholder="Введите сумму оплаты"
                                required={operatorCargoForm.payment_method === 'cash' || operatorCargoForm.payment_method === 'card_transfer'}
                              />
                            </div>
                          )}

                          {/* Дата погашения долга (только для оплаты в долг) */}
                          {operatorCargoForm.payment_method === 'credit' && (
                            <div>
                              <Label htmlFor="debt_due_date">Дата погашения долга</Label>
                              <Input
                                id="debt_due_date"
                                type="date"
                                value={operatorCargoForm.debt_due_date}
                                onChange={(e) => setOperatorCargoForm({...operatorCargoForm, debt_due_date: e.target.value})}
                                required
                                min={new Date().toISOString().split('T')[0]}
                              />
                            </div>
                          )}

                          {/* Способ получения груза */}
                          <div>
                            <Label htmlFor="delivery_method">Способ получения груза *</Label>
                            <select
                              id="delivery_method"
                              value={operatorCargoForm.delivery_method}
                              onChange={(e) => setOperatorCargoForm({...operatorCargoForm, delivery_method: e.target.value})}
                              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              required
                            >
                              <option value="pickup">Самовывоз</option>
                              <option value="city_delivery">Доставка до города получателя</option>
                              <option value="home_delivery">Доставка до дома</option>
                            </select>
                          </div>

                          {/* Склад для размещения груза (только для админа) */}
                          {user?.role === 'admin' && (
                            <div>
                              <Label htmlFor="placement_warehouse">Склад для размещения груза *</Label>
                              <select
                                id="placement_warehouse"
                                value={operatorCargoForm.warehouse_id}
                                onChange={(e) => setOperatorCargoForm({...operatorCargoForm, warehouse_id: e.target.value})}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                              >
                                <option value="">Выберите склад</option>
                                {warehouses.map((warehouse) => (
                                  <option key={warehouse.id} value={warehouse.id}>
                                    {warehouse.name} - {warehouse.location}
                                  </option>
                                ))}
                              </select>
                            </div>
                          )}

                          {/* Информация о выбранном складе для оператора */}
                          {user?.role === 'warehouse_operator' && operatorWarehouses.length > 0 && (
                            <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
                              <Label className="text-sm font-medium text-blue-800">Склад для размещения груза</Label>
                              <div className="mt-1">
                                <span className="font-semibold text-blue-900">
                                  {operatorWarehouses[0]?.name} - {operatorWarehouses[0]?.location}
                                </span>
                              </div>
                              <p className="text-xs text-blue-600 mt-1">
                                Автоматически выбран склад, к которому вы привязаны
                              </p>
                            </div>
                          )}

                          {/* Кнопки действий - показываем только в обычном режиме */}
                          <div className="flex flex-col gap-4">
                            {/* Кнопки действий */}
                            <div className="flex flex-col space-y-3">
                              {/* Главная кнопка приема груза */}
                              <Button type="submit" className="w-full" size="lg" variant="default">
                                <Plus className="mr-2 h-4 w-4" />
                                Принять груз
                              </Button>
                              
                              {/* Кнопка для курьерского забора */}
                              {operatorCargoForm.pickup_required && (
                                <Button 
                                  type="button"
                                  onClick={() => handleSendToCourier()}
                                  className="w-full bg-blue-600 hover:bg-blue-700" 
                                  size="lg"
                                >
                                  <Truck className="mr-2 h-4 w-4" />
                                  Отправить курьером
                                </Button>
                              )}
                            </div>
                            
                            {/* Информация о статусе */}
                            <div className="text-sm text-gray-600 text-center bg-blue-50 p-3 rounded-lg">
                              <div className="flex items-center justify-center mb-2">
                                <Clock className="mr-2 h-4 w-4" />
                                <span className="font-medium">После приема груз поступает в:</span>
                              </div>
                              <div className="text-blue-800 font-semibold">
                                Касса → Не оплачено
                              </div>
                              <div className="text-xs text-gray-500 mt-1">
                                После оплаты груз автоматически переместится в "Размещение груза"
                              </div>
                            </div>
                          </div>
                          </>
                          )}
                        </form>
                      </CardContent>
                    </Card>
                  )}

                  {/* Список грузов */}
                  {(activeTab === 'cargo-list' || !activeTab || activeTab === 'cargo-management') && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Package className="mr-2 h-5 w-5" />
                            Список грузов
                          </div>
                          <div className="flex space-x-2">
                            {user?.role === 'admin' && selectedCargo.length > 0 && (
                              <Button
                                onClick={() => handleBulkDeleteCargo(operatorCargo)}
                                variant="outline"
                                className="text-red-600 border-red-300 hover:bg-red-50"
                              >
                                <Trash2 className="mr-2 h-4 w-4" />
                                Удалить выбранные ({selectedCargo.length})
                              </Button>
                            )}
                            <Button onClick={() => {setActiveTab('cargo-accept'); fetchOperatorCargo();}}>
                              <Plus className="mr-2 h-4 w-4" />
                              Принять груз
                            </Button>
                          </div>
                        </CardTitle>
                        
                        {/* Чекбокс "Выбрать все" для админа */}
                        {user?.role === 'admin' && operatorCargo.length > 0 && (
                          <div className="flex items-center space-x-2 mt-4 p-3 bg-gray-50 rounded-lg">
                            <input
                              type="checkbox"
                              checked={selectAllCargo}
                              onChange={(e) => handleSelectAllCargo(e.target.checked, operatorCargo)}
                              className="rounded border-gray-300"
                            />
                            <label className="text-sm font-medium text-gray-700">
                              Выбрать все ({operatorCargo.length})
                            </label>
                          </div>
                        )}
                        
                        {/* Фильтры */}
                        <div className="flex items-center space-x-4 mt-4">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm font-medium">Фильтр:</span>
                            <select 
                              value={operatorCargoFilter}
                              onChange={(e) => {
                                setOperatorCargoFilter(e.target.value);
                                setOperatorCargoPage(1); // Сбрасываем на первую страницу при изменении фильтра
                                fetchOperatorCargo(e.target.value, 1, operatorCargoPerPage);
                              }}
                              className="border border-gray-300 rounded-md px-3 py-1 text-sm"
                            >
                              <option value="">Все грузы</option>
                              <option value="new_request">Новые заявки</option>
                              <option value="awaiting_payment">Ожидается оплата</option>
                              <option value="awaiting_placement">Ожидает размещение</option>
                            </select>
                          </div>
                          <Button 
                            variant="outline" 
                            size="sm"
                            onClick={() => fetchOperatorCargo(operatorCargoFilter, operatorCargoPage, operatorCargoPerPage)}
                          >
                            <RefreshCw className="mr-2 h-4 w-4" />
                            Обновить
                          </Button>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {operatorCargo.length === 0 ? (
                            <div className="text-center py-8">
                              <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500 mb-4">
                                {operatorCargoFilter 
                                  ? `Нет грузов с фильтром "${operatorCargoFilter === 'new_request' ? 'Новые заявки' : operatorCargoFilter === 'awaiting_payment' ? 'Ожидается оплата' : 'Ожидает размещение'}"` 
                                  : 'Нет принятых грузов'
                                }
                              </p>
                              <Button onClick={() => setActiveTab('cargo-accept')}>
                                <Plus className="mr-2 h-4 w-4" />
                                Принять первый груз
                              </Button>
                            </div>
                          ) : (
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  {user?.role === 'admin' && (
                                    <TableHead className="w-12">
                                      <input
                                        type="checkbox"
                                        checked={selectAllCargo}
                                        onChange={(e) => handleSelectAllCargo(e.target.checked, operatorCargo)}
                                        className="rounded border-gray-300"
                                      />
                                    </TableHead>
                                  )}
                                  <TableHead>Номер груза</TableHead>
                                  <TableHead>Отправитель</TableHead>
                                  <TableHead>Получатель</TableHead>
                                  <TableHead>Вес</TableHead>
                                  <TableHead>Стоимость</TableHead>
                                  <TableHead>Статус обработки</TableHead>
                                  <TableHead>Расположение</TableHead>
                                  <TableHead>Дата приема</TableHead>
                                  <TableHead>Действия</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {operatorCargo.map((item) => (
                                  <TableRow key={item.id}>
                                    {user?.role === 'admin' && (
                                      <TableCell>
                                        <input
                                          type="checkbox"
                                          checked={selectedCargo.includes(item.id)}
                                          onChange={(e) => handleCargoSelect(item.id, e.target.checked)}
                                          className="rounded border-gray-300"
                                        />
                                      </TableCell>
                                    )}
                                    <TableCell className="font-medium">{item.cargo_number}</TableCell>
                                    <TableCell>
                                      <div>
                                        <div className="font-medium flex items-center justify-between">
                                          <span>{item.sender_full_name}</span>
                                          {/* Кнопка генерации QR для всех грузов отправителя */}
                                          {(user?.role === 'admin' || user?.role === 'warehouse_operator') && (
                                            <Button
                                              size="sm"
                                              variant="ghost"
                                              onClick={() => generateBulkQRForSender({
                                                sender_full_name: item.sender_full_name,
                                                sender_phone: item.sender_phone
                                              })}
                                              className="ml-2 text-blue-600 hover:bg-blue-50 p-1 h-auto"
                                              title="Создать QR коды для всех грузов этого отправителя"
                                            >
                                              <QrCode className="h-3 w-3" />
                                            </Button>
                                          )}
                                        </div>
                                        <div className="text-sm text-gray-500">{item.sender_phone}</div>
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      <div>
                                        <div className="font-medium">{item.recipient_full_name}</div>
                                        <div className="text-sm text-gray-500">{item.recipient_phone}</div>
                                        <div className="text-sm text-gray-500">{item.recipient_address}</div>
                                      </div>
                                    </TableCell>
                                    <TableCell>{item.weight} кг</TableCell>
                                    <TableCell>{item.declared_value} ₽</TableCell>
                                    <TableCell>
                                      <div className="flex flex-col space-y-1">
                                        <Badge variant={getProcessingStatusBadgeVariant(item.processing_status || 'payment_pending')}>
                                          {getProcessingStatusLabel(item.processing_status || 'payment_pending')}
                                        </Badge>
                                        {/* Кнопки для изменения статуса */}
                                        <div className="flex space-x-1">
                                          {item.processing_status === 'payment_pending' && (
                                            <Button
                                              size="sm"
                                              onClick={() => handlePaymentAcceptance(item.id, item.cargo_number)}
                                              className="text-xs px-3 py-1 bg-green-600 hover:bg-green-700 text-white font-medium"
                                            >
                                              💰 Оплачен
                                            </Button>
                                          )}
                                          {item.processing_status === 'paid' && (
                                            <Button
                                              size="sm"
                                              variant="outline"
                                              onClick={() => updateCargoProcessingStatus(item.id, 'invoice_printed')}
                                              className="text-xs px-2 py-1"
                                            >
                                              📄 Накладная
                                            </Button>
                                          )}
                                          {item.processing_status === 'invoice_printed' && (
                                            <Button
                                              size="sm"
                                              variant="outline"
                                              onClick={() => updateCargoProcessingStatus(item.id, 'placed')}
                                              className="text-xs px-2 py-1"
                                            >
                                              📦 Разместить
                                            </Button>
                                          )}
                                        </div>
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      {item.warehouse_location ? (
                                        <div className="text-sm">
                                          <div className="font-medium">{warehouses.find(w => w.id === item.warehouse_id)?.name || 'Склад'}</div>
                                          <div className="text-blue-600">{item.warehouse_location}</div>
                                        </div>
                                      ) : (
                                        <Badge variant="outline">Не размещен</Badge>
                                      )}
                                    </TableCell>
                                    <TableCell>
                                      {new Date(item.created_at).toLocaleDateString('ru-RU')} {new Date(item.created_at).toLocaleTimeString('ru-RU')}
                                    </TableCell>
                                    <TableCell>
                                      <div className="flex flex-col space-y-1">
                                        <Button
                                          size="sm"
                                          variant="outline"
                                          onClick={() => printCargoInvoice(item)}
                                          className="flex items-center"
                                          disabled={!item.processing_status || item.processing_status === 'payment_pending'}
                                        >
                                          <Printer className="mr-1 h-4 w-4" />
                                          Накладная
                                        </Button>
                                        {/* QR код доступен всегда */}
                                        <Button
                                          size="sm"
                                          variant="outline"
                                          onClick={() => {
                                            setQrGenerateCargoNumber(item.cargo_number);
                                            setShowQRGenerateModal(true);
                                          }}
                                          className="flex items-center text-xs px-2 py-1 text-blue-600 border-blue-300 hover:bg-blue-50"
                                        >
                                          <QrCode className="mr-1 h-3 w-3" />
                                          QR код
                                        </Button>
                                        
                                        {/* Кнопка быстрого размещения для оплаченных грузов */}
                                        {(item.processing_status === 'paid' || item.processing_status === 'invoice_printed') && !item.warehouse_location && (
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => {
                                              setSelectedCargoForDetailView(item);
                                              setQuickPlacementModal(true);
                                            }}
                                            className="flex items-center text-xs px-2 py-1 bg-green-50 hover:bg-green-100"
                                          >
                                            <Grid3X3 className="mr-1 h-3 w-3" />
                                            Разместить
                                          </Button>
                                        )}
                                        
                                        {/* Кнопка повторного заказа для админов и операторов */}
                                        {(user.role === 'admin' || user.role === 'warehouse_operator') && (
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => openAdminRepeatOrder(item)}
                                            className="flex items-center text-xs px-2 py-1 bg-blue-50 hover:bg-blue-100 text-blue-600 hover:text-blue-700"
                                            title="Повторить заказ с теми же данными отправителя и получателя"
                                          >
                                            <Copy className="mr-1 h-3 w-3" />
                                            Повторить
                                          </Button>
                                        )}

                                        {/* Кнопка удаления груза (только для администратора) */}
                                        {user?.role === 'admin' && (
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => handleDeleteCargo(item.id, operatorCargo)}
                                            className="flex items-center text-xs px-2 py-1 text-red-600 border-red-300 hover:bg-red-50"
                                            title="Удалить груз"
                                          >
                                            <Trash2 className="mr-1 h-3 w-3" />
                                            Удалить
                                          </Button>
                                        )}
                                      </div>
                                    </TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          )}
                        </div>
                        
                        {/* Пагинация для списка грузов */}
                        {operatorCargo.length > 0 && operatorCargoPagination && (
                          <DataPagination
                            pagination={operatorCargoPagination}
                            onPageChange={handleOperatorCargoPageChange}
                            onPerPageChange={handleOperatorCargoPerPageChange}
                          />
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* Размещение груза - Улучшенный интерфейс со сканером */}
                  {activeTab === 'cargo-placement' && (
                    <div className="space-y-6">
                      {/* Интерфейс сканирования */}
                      {(scannerActive || scannedCargoData || placementInProgress) && (
                        <Card className="border-2 border-blue-500 bg-blue-50">
                          <CardHeader>
                            <CardTitle className="flex items-center justify-between">
                              <div className="flex items-center">
                                <Camera className="mr-2 h-5 w-5 text-blue-600" />
                                {scannerMode === 'cargo-barcode' ? 'Сканирование штрих-кода груза' :
                                 scannerMode === 'cell-qr' ? 'Сканирование QR-кода ячейки' :
                                 placementInProgress ? 'Размещение груза...' : 'Готово к сканированию'}
                              </div>
                              {(scannerActive || scannedCargoData) && (
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={resetScannerState}
                                  className="text-red-600 hover:text-red-700"
                                >
                                  <X className="h-4 w-4" />
                                  Отменить
                                </Button>
                              )}
                            </CardTitle>
                            <CardDescription>
                              {scannerMode === 'cargo-barcode' && 'Наведите камеру на штрих-код груза для его идентификации'}
                              {scannerMode === 'cell-qr' && 'Наведите камеру на QR-код свободной ячейки для размещения'}
                              {placementInProgress && 'Выполняется размещение груза в выбранную ячейку...'}
                              {scannerMode === 'none' && scannedCargoData && !placementInProgress && 'Груз идентифицирован, ожидается выбор ячейки'}
                            </CardDescription>
                          </CardHeader>
                          <CardContent>
                            {/* Интерфейс камеры */}
                            {scannerActive && (
                              <div className="mb-6">
                                <div className="bg-black rounded-lg overflow-hidden" style={{maxWidth: '500px', margin: '0 auto'}}>
                                  <div 
                                    id="qr-reader" 
                                    className="w-full"
                                    style={{
                                      width: '100%',
                                      maxWidth: '500px',
                                      minHeight: '300px'
                                    }}
                                  />
                                </div>
                                <div className="text-center mt-4 space-y-2">
                                  <p className="text-sm text-gray-600">
                                    {scannerMode === 'cargo-barcode' ? 
                                      'Наведите камеру на штрих-код груза' : 
                                      'Наведите камеру на QR-код ячейки'}
                                  </p>
                                  {cameraPermission === false && (
                                    <p className="text-sm text-red-600">
                                      Для работы сканера необходимо разрешение на использование камеры
                                    </p>
                                  )}
                                </div>
                              </div>
                            )}

                            {/* Статус сканирования */}
                            <div className="space-y-4">
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Информация о отсканированном грузе */}
                                {scannedCargoData && (
                                  <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                                    <h4 className="font-medium text-green-800 mb-2 flex items-center">
                                      <CheckCircle className="mr-2 h-4 w-4" />
                                      Груз идентифицирован
                                    </h4>
                                    <p><strong>Номер:</strong> {scannedCargoData.cargo_number}</p>
                                    <p><strong>Описание:</strong> {scannedCargoData.description || scannedCargoData.cargo_name}</p>
                                    <p><strong>Вес:</strong> {scannedCargoData.weight} кг</p>
                                    <p><strong>Отправитель:</strong> {scannedCargoData.sender_full_name}</p>
                                  </div>
                                )}
                                
                                {/* Информация о выбранной ячейке */}
                                {scannedCellData && (
                                  <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                    <h4 className="font-medium text-blue-800 mb-2 flex items-center">
                                      <Grid3X3 className="mr-2 h-4 w-4" />
                                      Ячейка выбрана
                                    </h4>
                                    <p><strong>Склад:</strong> {scannedCellData.warehouse_id}</p>
                                    <p><strong>Блок:</strong> {scannedCellData.block_number}</p>
                                    <p><strong>Полка:</strong> {scannedCellData.shelf_number}</p>
                                    <p><strong>Ячейка:</strong> {scannedCellData.cell_number}</p>
                                  </div>
                                )}
                              </div>
                              
                              {/* Ошибки сканирования */}
                              {scannerError && (
                                <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                                  <p className="text-red-800 flex items-center">
                                    <XCircle className="mr-2 h-4 w-4" />
                                    {scannerError}
                                  </p>
                                </div>
                              )}
                              
                              {/* Прогресс размещения */}
                              {placementInProgress && (
                                <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                                  <p className="text-yellow-800 flex items-center">
                                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                                    Размещение груза в процессе...
                                  </p>
                                </div>
                              )}
                              
                              {/* Тестовые кнопки (для отладки) */}
                              {process.env.NODE_ENV === 'development' && (
                                <div className="flex flex-wrap gap-2 p-3 bg-gray-100 rounded-lg border-2 border-dashed">
                                  <Button 
                                    size="sm" 
                                    variant="outline"
                                    onClick={() => simulateBarcodeScan('2501999271')}
                                  >
                                    Тест штрих-кода груза
                                  </Button>
                                  <Button 
                                    size="sm" 
                                    variant="outline"
                                    onClick={() => simulateBarcodeScan('WH001:1:2:5')}
                                  >
                                    Тест QR-кода ячейки
                                  </Button>
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      )}

                      {/* Основной интерфейс */}
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center justify-between">
                            <div className="flex items-center">
                              <Grid3X3 className="mr-2 h-5 w-5" />
                              Размещение груза
                            </div>
                            <div className="flex space-x-2">
                              {/* Кнопка генерации QR кода */}
                              <Button 
                                onClick={() => setShowQRGenerateModal(true)}
                                variant="outline"
                                size="sm"
                                className="text-blue-600 border-blue-300 hover:bg-blue-50"
                              >
                                <QrCode className="mr-2 h-4 w-4" />
                                Генерировать QR
                              </Button>
                              
                              {/* Кнопки размещения груза - камера и внешний сканер */}
                              {!placementActive && !externalScannerActive && (
                                <>
                                  <Button 
                                    onClick={openCargoPlacementPage}
                                    className="bg-green-600 hover:bg-green-700"
                                    size="sm"
                                  >
                                    <Camera className="mr-2 h-4 w-4" />
                                    Размещение (Камера)
                                  </Button>
                                  <Button 
                                    onClick={openCargoPlacementModal}
                                    className="bg-blue-600 hover:bg-blue-700"
                                    size="sm"
                                  >
                                    <Scan className="mr-2 h-4 w-4" />
                                    Размещение (Сканер)
                                  </Button>
                                </>
                              )}
                              
                              {placementActive && (
                                <Button 
                                  onClick={stopCargoPlacement}
                                  variant="outline"
                                  size="sm"
                                  className="text-red-600 border-red-300 hover:bg-red-50"
                                >
                                  <X className="mr-2 h-4 w-4" />
                                  Остановить размещение
                                </Button>
                              )}

                              {externalScannerActive && (
                                <Button 
                                  onClick={stopExternalScannerPlacement}
                                  variant="outline"
                                  size="sm"
                                  className="text-red-600 border-red-300 hover:bg-red-50"
                                >
                                  <X className="mr-2 h-4 w-4" />
                                  Остановить сканер
                                </Button>
                              )}
                            </div>
                          </CardTitle>
                          <CardDescription>
                            Оплаченные грузы и грузы из заявок на забор, готовые к размещению на складе. 
                            Грузы с индикатором 🚚 поступили через курьерские заявки на забор. 
                            Используйте сканер для быстрого размещения.
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <Button onClick={() => fetchAvailableCargoForPlacement(availableCargoPage, availableCargoPerPage)} className="mb-4">
                            <RefreshCw className="mr-2 h-4 w-4" />
                            Обновить список грузов
                          </Button>
                          
                          {/* Легенда цветов складов */}
                          {availableCargoForPlacement.length > 0 && (
                            <div className="mb-6 p-4 bg-gray-50 rounded-lg border">
                              <h4 className="font-semibold text-sm text-gray-700 mb-3 flex items-center">
                                <Palette className="mr-2 h-4 w-4" />
                                Цветовая схема по складам
                              </h4>
                              <div className="flex flex-wrap gap-3">
                                {getWarehouseLegend().map((item, index) => (
                                  <div key={index} className="flex items-center space-x-2">
                                    <div className={`w-4 h-4 ${item.color} rounded`}></div>
                                    <span className={`text-sm font-medium ${item.textColor}`}>
                                      {item.name}
                                    </span>
                                  </div>
                                ))}
                              </div>
                              <p className="text-xs text-gray-500 mt-2">
                                Каждый груз окрашен в цвет своего склада назначения для удобства идентификации
                              </p>
                            </div>
                          )}
                          
                          {/* НОВОЕ: Панель массового удаления */}
                          {availableCargoForPlacement.length > 0 && (
                            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                              <h4 className="font-semibold text-sm text-red-700 mb-3 flex items-center">
                                <Trash2 className="mr-2 h-4 w-4" />
                                Массовое удаление грузов из размещения
                              </h4>
                              
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-4">
                                  <label className="flex items-center space-x-2 cursor-pointer">
                                    <input
                                      type="checkbox"
                                      checked={selectedCargoForDeletion.length === availableCargoForPlacement.length && availableCargoForPlacement.length > 0}
                                      onChange={handleSelectAllCargoForDeletion}
                                      className="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded"
                                    />
                                    <span className="text-sm text-gray-700">
                                      Выбрать все ({availableCargoForPlacement.length})
                                    </span>
                                  </label>
                                  
                                  {selectedCargoForDeletion.length > 0 && (
                                    <span className="text-sm text-red-600 font-medium">
                                      Выбrano: {selectedCargoForDeletion.length}
                                    </span>
                                  )}
                                </div>
                                
                                <div className="flex space-x-2">
                                  {selectedCargoForDeletion.length > 0 && (
                                    <>
                                      <Button
                                        onClick={() => setSelectedCargoForDeletion([])}
                                        variant="outline"
                                        size="sm"
                                        className="text-gray-600 border-gray-300"
                                      >
                                        Снять выделение
                                      </Button>
                                      
                                      <Button
                                        onClick={handleBulkDeleteCargoFromPlacement}
                                        size="sm"
                                        className="bg-red-600 hover:bg-red-700 text-white"
                                      >
                                        <Trash2 className="mr-2 h-4 w-4" />
                                        Удалить ({selectedCargoForDeletion.length})
                                      </Button>
                                    </>
                                  )}
                                </div>
                              </div>
                              
                              <p className="text-xs text-red-600 mt-2">
                                ⚠️ Удаленные грузы будут исключены из списка размещения и получат статус "removed_from_placement"
                              </p>
                            </div>
                          )}
                          
                          <div className="space-y-4">
                            {availableCargoForPlacement.length === 0 ? (
                              <div className="text-center py-8">
                                <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                                <p className="text-gray-500">Нет грузов, ожидающих размещения</p>
                                <p className="text-sm text-gray-400 mt-2">Оплаченные грузы из "Списка грузов" автоматически появятся здесь</p>
                                <Button 
                                  variant="outline" 
                                  className="mt-4"
                                  onClick={() => setActiveTab('cargo-list')}
                                >
                                  Перейти к списку грузов
                                </Button>
                              </div>
                            ) : (
                              <div className="grid gap-6">
                                {availableCargoForPlacement.filter(item => item && item.id).map((item) => {
                                  const warehouseColors = getWarehouseColor(item.warehouse_name);
                                  return (
                                    <Card key={`cargo-${item.id}`} className={`${warehouseColors.border} ${warehouseColors.bg} border-l-4`}>
                                      <CardContent className="p-6">
                                        <div className="flex justify-between items-start">
                                          {/* НОВОЕ: Чекбокс для выбора груза */}
                                          <div className="flex items-start space-x-4 flex-1">
                                            <label className="flex items-center mt-1">
                                              <input
                                                type="checkbox"
                                                checked={selectedCargoForDeletion.includes(item.id)}
                                                onChange={() => handleSelectCargoForDeletion(item.id)}
                                                className="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded"
                                              />
                                            </label>
                                            
                                            <div className="flex-1">
                                              <div className="flex items-center space-x-4 mb-4">
                                                <h3 className="font-bold text-xl text-blue-600">{item.cargo_number}</h3>
                                                <Badge variant={getProcessingStatusBadgeVariant(item.processing_status)}>
                                                  {getProcessingStatusLabel(item.processing_status)}
                                                </Badge>
                                              {/* Индикатор груза из заявки на забор */}
                                              {item.pickup_request_id && (
                                                <Badge className="bg-orange-100 text-orange-700 border-orange-200">
                                                  🚚 Забор груза
                                                </Badge>
                                              )}
                                              {/* Бейдж с названием склада */}
                                              {item.warehouse_name && (
                                                <Badge className={`${warehouseColors.badge} ${warehouseColors.text} border-0`}>
                                                  🏭 {item.warehouse_name}
                                                </Badge>
                                              )}
                                              
                                              {/* НОВОЕ: Информация о маршруте груза */}
                                              {item.route_info && (
                                                <Badge className="bg-blue-100 text-blue-700 border-blue-200">
                                                  📍 {item.route_info.from?.warehouse_name || 'Неизвестно'} → {item.route_info.to?.warehouse_name || item.warehouse_name}
                                                </Badge>
                                              )}
                                            </div>
                                          
                                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                            {/* Информация о грузе */}
                                            <div className="space-y-2">
                                              <h4 className="font-semibold text-lg text-gray-700 mb-3">📦 Информация о грузе</h4>
                                              <div className="space-y-1 text-sm">
                                                <p><strong>Наименование:</strong> {item.cargo_name}</p>
                                                <p><strong>Вес:</strong> {item.weight} кг</p>
                                                <p><strong>Стоимость:</strong> {item.declared_value} ₽</p>
                                                <p><strong>Статус:</strong> {getProcessingStatusLabel(item.processing_status)}</p>
                                              </div>
                                            </div>
                                            
                                            {/* Информация об оплате */}
                                            <div className="space-y-2">
                                              <h4 className="font-semibold text-lg text-gray-700 mb-3">💳 Оплата</h4>
                                              <div className="space-y-1 text-sm">
                                                <p><strong>Статус оплаты:</strong> 
                                                  <Badge 
                                                    variant={
                                                      item.payment_status === 'paid' ? 'default' : 
                                                      item.payment_status === 'not_paid' ? 'destructive' :
                                                      item.payment_status === 'partially_paid' ? 'secondary' :
                                                      item.payment_status === 'prepaid' ? 'outline' :
                                                      item.payment_status === 'debt' ? 'secondary' :
                                                      'secondary'
                                                    }
                                                    className="ml-2"
                                                  >
                                                    {
                                                      item.payment_status === 'paid' ? 'Полностью оплачено' :
                                                      item.payment_status === 'not_paid' ? 'Не оплачено' :
                                                      item.payment_status === 'partially_paid' ? 'Частично оплачено' :
                                                      item.payment_status === 'prepaid' ? 'Предоплачено' :
                                                      item.payment_status === 'debt' ? 'В долг' :
                                                      item.payment_status === 'payment_on_delivery' ? 'Оплата при получении' :
                                                      item.payment_status || 'Не указано'
                                                    }
                                                  </Badge>
                                                </p>
                                                <p><strong>Способ оплаты:</strong> {
                                                  item.payment_method === 'cash' ? 'Наличные' :
                                                  item.payment_method === 'card' ? 'Банковская карта' :
                                                  item.payment_method === 'transfer' ? 'Банковский перевод' :
                                                  item.payment_method === 'debt' ? 'В долг' :
                                                  item.payment_method === 'prepaid' ? 'Предоплачено' :
                                                  item.payment_method === 'online_payment' ? 'Онлайн оплата' :
                                                  item.payment_method || 'Не указан'
                                                }</p>
                                                {item.amount_paid && (
                                                  <p><strong>Получено:</strong> {item.amount_paid} ₽</p>
                                                )}
                                                {item.payment_notes && (
                                                  <p><strong>Заметки:</strong> {item.payment_notes}</p>
                                                )}
                                              </div>
                                            </div>
                                            
                                            {/* Информация об отправителе */}
                                            <div className="space-y-2">
                                              <h4 className="font-semibold text-lg text-gray-700 mb-3">👤 Отправитель</h4>
                                              <div className="space-y-1 text-sm">
                                                <p><strong>Имя:</strong> {item.sender_full_name}</p>
                                                <p><strong>Телефон:</strong> {item.sender_phone}</p>
                                                <p><strong>Принял:</strong> {item.accepting_operator}</p>
                                              </div>
                                            </div>
                                            
                                            {/* Информация о получателе */}
                                            <div className="space-y-2">
                                              <h4 className="font-semibold text-lg text-gray-700 mb-3">📍 Получатель</h4>
                                              <div className="space-y-1 text-sm">
                                                {/* Показываем информацию о получателе от курьера/оператора */}
                                                <p><strong>Имя:</strong> {
                                                  item.recipient_full_name || 
                                                  item.recipient_name || 
                                                  'Не указано'
                                                }</p>
                                                <p><strong>Телефон:</strong> {
                                                  item.recipient_phone || 
                                                  'Не указан'
                                                }</p>
                                                <p><strong>Адрес:</strong> {
                                                  item.recipient_address || 
                                                  'Не указан'
                                                }</p>
                                                {/* Дополнительная информация для грузов из забора */}
                                                {item.pickup_request_id && (
                                                  <p className="text-xs text-gray-500 mt-2">
                                                    💡 Данные получателя заполнены курьером/оператором при оформлении заявки на забор
                                                  </p>
                                                )}
                                              </div>
                                            </div>
                                            
                                            {/* Дополнительная информация */}
                                            <div className="space-y-2">
                                              <h4 className="font-semibold text-lg text-gray-700 mb-3">ℹ️ Дополнительно</h4>
                                              <div className="space-y-1 text-sm">
                                                <p><strong>Описание:</strong> {item.description}</p>
                                                <p><strong>Маршрут:</strong> {item.route}</p>
                                                <p><strong>Создан:</strong> {new Date(item.created_at).toLocaleDateString('ru-RU')}</p>
                                                {/* Информация о заявке на забор груза */}
                                                {item.pickup_request_id && (
                                                  <>
                                                    <p><strong>🚚 Заявка на забор:</strong> №{item.pickup_request_number || 'N/A'}</p>
                                                    <p><strong>📦 Доставил курьер:</strong> {item.courier_delivered_by || 'Не указано'}</p>
                                                    <p><strong>📅 Сдано на склад:</strong> {item.courier_delivered_at ? new Date(item.courier_delivered_at).toLocaleString('ru-RU') : 'Не указано'}</p>
                                                  </>
                                                )}
                                              </div>
                                            </div>
                                          </div>
                                        
                                        {/* Кнопки действий */}
                                        <div className="ml-6 flex flex-col space-y-2">
                                          <Button
                                            onClick={() => handleViewCargo(item)}
                                            variant="outline"
                                            className="flex items-center text-orange-600 border-orange-300 hover:bg-orange-50"
                                          >
                                            <Eye className="mr-2 h-4 w-4" />
                                            Просмотр груза
                                          </Button>
                                          
                                          <Button
                                            onClick={() => {
                                              setQrGenerateCargoNumber(item.cargo_number);
                                              setShowQRGenerateModal(true);
                                            }}
                                            variant="outline"
                                            className="flex items-center text-blue-600 border-blue-300 hover:bg-blue-50"
                                          >
                                            <QrCode className="mr-2 h-4 w-4" />
                                            QR код
                                          </Button>
                                          
                                          <Button
                                            onClick={() => openEnhancedPlacementModal(item)}
                                            className="bg-green-600 hover:bg-green-700 text-white flex items-center"
                                          >
                                            <Grid3X3 className="mr-2 h-4 w-4" />
                                            Разместить
                                          </Button>
                                          
                                          {/* НОВОЕ: Кнопка удаления груза из списка размещения */}
                                          <Button
                                            onClick={() => handleDeleteCargoFromPlacement(item.id, item.cargo_number)}
                                            variant="outline"
                                            className="flex items-center text-red-600 border-red-300 hover:bg-red-50 hover:border-red-400"
                                          >
                                            <Trash2 className="mr-2 h-4 w-4" />
                                            Удалить
                                          </Button>
                                        </div>
                                      </div>
                                      </div>
                                      </div>
                                      </CardContent>
                                  </Card>
                                )})}
                              </div>
                            )}
                          </div>
                        </CardContent>
                        
                        {/* Пагинация для размещения грузов */}
                        {availableCargoForPlacement.length > 0 && availableCargoPagination && (
                          <DataPagination
                            pagination={availableCargoPagination}
                            onPageChange={handleAvailableCargoPageChange}
                            onPerPageChange={handleAvailableCargoPerPageChange}
                          />
                        )}
                      </Card>
                    </div>
                  )}

                  {/* История грузов удален блок "Размещенные грузы" для оптимизации */}

                  {/* Заявки на забор груза */}
                  {activeTab === 'cargo-pickup-requests' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Truck className="mr-2 h-5 w-5" />
                            Заявки на забор груза
                          </div>
                          <Badge variant="secondary" className="bg-orange-100 text-orange-800">
                            {allPickupRequests.length} заявок
                          </Badge>
                        </CardTitle>
                        <CardDescription>
                          Активные заявки на забор груза со статусами и информацией о курьерах. 
                          Выполненные заявки перемещены в "Историю забора груза".
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        {/* Интерфейс массового удаления заявок на забор */}
                        {allPickupRequests.length > 0 && (
                          <div className="mb-4 flex items-center justify-between">
                            <div className="flex items-center space-x-4">
                              <div className="flex items-center space-x-2">
                                <Checkbox
                                  id="selectAllPickupRequests"
                                  checked={selectAllPickupRequests}
                                  onCheckedChange={(checked) => 
                                    handleSelectAllPickupRequests(checked, allPickupRequests)
                                  }
                                />
                                <Label htmlFor="selectAllPickupRequests" className="text-sm font-medium">
                                  Выбрать все
                                </Label>
                              </div>
                              {selectedPickupRequests.length > 0 && (
                                <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                                  {selectedPickupRequests.length} выбрано
                                </Badge>
                              )}
                            </div>
                            
                            {/* Кнопки массовых действий */}
                            {selectedPickupRequests.length > 0 && (
                              <div className="flex items-center space-x-2">
                                <Button
                                  variant="destructive"
                                  size="sm"
                                  onClick={() => {
                                    const requestsToDelete = allPickupRequests.filter(req => 
                                      selectedPickupRequests.includes(req.id)
                                    );
                                    openDeleteConfirmModal('pickup-request', requestsToDelete, true);
                                  }}
                                  className="flex items-center"
                                >
                                  <Trash2 className="mr-1 h-3 w-3" />
                                  Удалить заявки ({selectedPickupRequests.length})
                                </Button>
                                
                                {/* ИСПРАВЛЕНО: Массовое удаление заявок на груз */}
                                <Button
                                  variant="destructive"
                                  size="sm"
                                  onClick={async () => {
                                    if (window.confirm(`Вы уверены, что хотите удалить ${selectedPickupRequests.length} заявок на забор? Это действие необратимо!`)) {
                                      try {
                                        // Delete each selected request individually using new pickup endpoint
                                        let successCount = 0;
                                        let errorCount = 0;
                                        
                                        for (const requestId of selectedPickupRequests) {
                                          try {
                                            const response = await apiCall(`/api/admin/pickup-requests/${requestId}`, 'DELETE');
                                            if (response.message || response.success !== false) {
                                              successCount++;
                                            } else {
                                              errorCount++;
                                            }
                                          } catch (error) {
                                            console.error(`Ошибка удаления заявки ${requestId}:`, error);
                                            errorCount++;
                                          }
                                        }
                                        
                                        if (successCount > 0) {
                                          showAlert(`${successCount} заявок на забор успешно удалено`, 'success');
                                        }
                                        if (errorCount > 0) {
                                          showAlert(`${errorCount} заявок не удалось удалить`, 'error');
                                        }
                                        
                                        // Очищаем выбранные заявки и обновляем список
                                        setSelectedPickupRequests([]);
                                        await fetchAllPickupRequests();
                                        
                                      } catch (error) {
                                        console.error('Ошибка массового удаления заявок:', error);
                                        showAlert(`Ошибка при массовом удалении: ${error.message}`, 'error');
                                      }
                                    }
                                  }}
                                  className="flex items-center bg-red-700 hover:bg-red-800"
                                >
                                  <Trash2 className="mr-1 h-3 w-3" />
                                  Удалить заявки ({selectedPickupRequests.length})
                                </Button>
                              </div>
                            )}
                          </div>
                        )}
                        {allPickupRequests.length === 0 ? (
                          <div className="text-center py-8">
                            <Truck className="mx-auto h-12 w-12 text-gray-400" />
                            <h3 className="mt-2 text-sm font-medium text-gray-900">Нет заявок на забор</h3>
                            <p className="mt-1 text-sm text-gray-500">
                              Заявки на забор груза будут отображаться здесь после их создания.
                            </p>
                          </div>
                        ) : (
                          <div className="space-y-4">
                            {allPickupRequests.map((request) => (
                              <Card key={request.id} className="border border-gray-200">
                                <CardContent className="p-4">
                                  <div className="flex items-start space-x-3">
                                    {/* Чекбокс для выбора заявки */}
                                    <div className="mt-1">
                                      <Checkbox
                                        id={`pickup-request-${request.id}`}
                                        checked={selectedPickupRequests.includes(request.id)}
                                        onCheckedChange={(checked) => 
                                          handlePickupRequestSelect(request.id, checked)
                                        }
                                      />
                                    </div>
                                    
                                    <div className="flex-1">
                                      <div className="flex items-center justify-between">
                                        <div className="flex-1">
                                      <div className="flex items-center space-x-3 mb-2">
                                        <Badge className="bg-orange-100 text-orange-700 border-orange-200">
                                          № {request.request_number && request.request_number !== 'undefined' && request.request_number !== '' 
                                              ? request.request_number 
                                              : `ID-${request.id.slice(0, 8)}`}
                                        </Badge>
                                        <Badge variant={
                                          request.request_status === 'pending' ? 'secondary' :
                                          request.request_status === 'accepted' ? 'outline' :
                                          request.request_status === 'picked_up' ? 'default' :
                                          request.request_status === 'delivered_to_warehouse' ? 'default' :
                                          'destructive'
                                        } className={
                                          request.request_status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                          request.request_status === 'accepted' ? 'bg-blue-100 text-blue-800' :
                                          request.request_status === 'picked_up' ? 'bg-green-100 text-green-800' :
                                          request.request_status === 'delivered_to_warehouse' ? 'bg-purple-100 text-purple-800' :
                                          'bg-red-100 text-red-800'
                                        }>
                                          {request.request_status === 'pending' ? '⏳ Ожидает' :
                                           request.request_status === 'accepted' ? '✅ Принята' :
                                           request.request_status === 'picked_up' ? '📦 Забрана' :
                                           request.request_status === 'delivered_to_warehouse' ? '🏢 Сдана на склад' :
                                           '❌ Отменена'}
                                        </Badge>
                                        {request.assigned_courier_name && (
                                          <Badge className="bg-gray-100 text-gray-700">
                                            👤 {request.assigned_courier_name}
                                          </Badge>
                                        )}
                                      </div>
                                      
                                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                                        <div>
                                          <span className="font-medium text-gray-700">Отправитель:</span>
                                          <span className="ml-1">{request.sender_full_name}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Телефон:</span>
                                          <span className="ml-1">{request.sender_phone}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Адрес забора:</span>
                                          <span className="ml-1">{request.pickup_address}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Наименование груза:</span>
                                          <span className="ml-1">{request.destination || request.route || 'Не указано'}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Дата забора:</span>
                                          <span className="ml-1">
                                            {request.pickup_date 
                                              ? new Date(request.pickup_date).toLocaleDateString('ru-RU')
                                              : 'Не указана'
                                            }
                                          </span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Время:</span>
                                          <span className="ml-1">
                                            {request.pickup_time_from && request.pickup_time_to 
                                              ? `${request.pickup_time_from} - ${request.pickup_time_to}`
                                              : 'Не указано'
                                            }
                                          </span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Плата курьеру:</span>
                                          <span className="ml-1 font-semibold text-green-600">{request.courier_fee || 0} ₽</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Создана:</span>
                                          <span className="ml-1">{new Date(request.created_at).toLocaleString('ru-RU')}</span>
                                        </div>
                                      </div>
                                      
                                      {/* История действий если есть */}
                                      {request.action_history && request.action_history.length > 0 && (
                                        <div className="mt-3 p-2 bg-gray-50 rounded">
                                          <div className="text-xs font-medium text-gray-700 mb-1">История действий:</div>
                                          <div className="space-y-1">
                                            {request.action_history.slice(-3).map((action, index) => (
                                              <div key={index} className="text-xs text-gray-600">
                                                {new Date(action.timestamp).toLocaleString('ru-RU')}: {action.details} ({action.performed_by})
                                              </div>
                                            ))}
                                          </div>
                                        </div>
                                      )}
                                        </div>
                                        
                                        {/* ИСПРАВЛЕНО: Кнопки действий для груза */}
                                        <div className="mt-3 flex items-center space-x-2">
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={async () => {
                                              // Используем новый admin endpoint для удаления заявки на забор
                                              if (window.confirm(`Вы уверены, что хотите удалить заявку на забор "${request.request_number || request.cargo_name}"? Это действие необратимо!`)) {
                                                try {
                                                  // Используем новый endpoint для удаления pickup requests
                                                  const response = await apiCall(`/api/admin/pickup-requests/${request.id}`, 'DELETE');
                                                  
                                                  if (response.message || response.success !== false) {
                                                    showAlert(`Заявка на забор успешно удалена`, 'success');
                                                    // Обновляем список заявок на забор
                                                    await fetchAllPickupRequests();
                                                  } else {
                                                    showAlert(`Ошибка при удалении заявки: ${response.message || 'Неизвестная ошибка'}`, 'error');
                                                  }
                                                } catch (error) {
                                                  console.error('Ошибка удаления заявки на забор:', error);
                                                  showAlert(`Ошибка при удалении: ${error.message}`, 'error');
                                                }
                                              }
                                            }}
                                            className="flex items-center text-red-600 border-red-300 hover:bg-red-50 hover:border-red-400"
                                          >
                                            <Trash2 className="mr-1 h-3 w-3" />
                                            Удалить заявку
                                          </Button>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* История забора груза */}
                  {activeTab === 'cargo-pickup-history' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Package className="mr-2 h-5 w-5" />
                            История забора груза
                          </div>
                          <Badge variant="secondary" className="bg-purple-100 text-purple-800">
                            {pickupRequestsHistory.length} завершено
                          </Badge>
                        </CardTitle>
                        <CardDescription>
                          Завершенные заявки на забор груза с полной историей действий
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        {pickupRequestsHistory.length === 0 ? (
                          <div className="text-center py-8">
                            <Package className="mx-auto h-12 w-12 text-gray-400" />
                            <h3 className="mt-2 text-sm font-medium text-gray-900">Нет завершенных заявок</h3>
                            <p className="mt-1 text-sm text-gray-500">
                              Завершенные заявки на забор груза будут отображаться здесь.
                            </p>
                          </div>
                        ) : (
                          <div className="space-y-4">
                            {pickupRequestsHistory.map((request) => (
                              <Card key={request.id} className="border border-purple-200">
                                <CardContent className="p-4">
                                  <div className="flex items-start justify-between">
                                    <div className="flex-1">
                                      <div className="flex items-center space-x-3 mb-3">
                                        <Badge className="bg-purple-100 text-purple-700 border-purple-200">
                                          № {request.request_number || request.id.slice(0, 6)}
                                        </Badge>
                                        <Badge className="bg-green-100 text-green-800 border-green-200">
                                          ✅ Выполнено
                                        </Badge>
                                        {request.assigned_courier_name && (
                                          <Badge className="bg-blue-100 text-blue-700">
                                            👤 {request.assigned_courier_name}
                                          </Badge>
                                        )}
                                      </div>
                                      
                                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm mb-4">
                                        <div>
                                          <span className="font-medium text-gray-700">Отправитель:</span>
                                          <span className="ml-1">{request.sender_full_name}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Телефон:</span>
                                          <span className="ml-1">{request.sender_phone}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Адрес забора:</span>
                                          <span className="ml-1">{request.pickup_address}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Наименование груза:</span>
                                          <span className="ml-1">{request.destination || request.route || 'Не указано'}</span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Сдано на склад:</span>
                                          <span className="ml-1">
                                            {request.delivery_time 
                                              ? new Date(request.delivery_time).toLocaleString('ru-RU')
                                              : 'Не указано'
                                            }
                                          </span>
                                        </div>
                                        <div>
                                          <span className="font-medium text-gray-700">Обработал:</span>
                                          <span className="ml-1">{request.processed_by || 'Не указано'}</span>
                                        </div>
                                      </div>

                                      {/* Созданные грузы */}
                                      {request.created_cargos && request.created_cargos.length > 0 && (
                                        <div className="mt-3 p-3 bg-green-50 rounded border border-green-200">
                                          <div className="text-sm font-medium text-green-800 mb-2">
                                            📦 Созданные грузы ({request.created_cargos.length}):
                                          </div>
                                          <div className="flex flex-wrap gap-2">
                                            {request.created_cargos.map((cargo, index) => (
                                              <Badge key={index} className="bg-green-100 text-green-700 border-green-300">
                                                {cargo.cargo_number}
                                              </Badge>
                                            ))}
                                          </div>
                                        </div>
                                      )}
                                      
                                      {/* История действий */}
                                      {request.action_history && request.action_history.length > 0 && (
                                        <div className="mt-3 p-3 bg-gray-50 rounded">
                                          <div className="text-sm font-medium text-gray-700 mb-2">📋 История действий:</div>
                                          <div className="space-y-1">
                                            {request.action_history.map((action, index) => (
                                              <div key={index} className="text-xs text-gray-600 flex items-start space-x-2">
                                                <span className="w-2 h-2 bg-blue-400 rounded-full mt-1.5 flex-shrink-0"></span>
                                                <div>
                                                  <span className="font-medium">
                                                    {new Date(action.timestamp).toLocaleString('ru-RU')}:
                                                  </span>
                                                  <span className="ml-1">{action.details}</span>
                                                  <span className="text-gray-500"> ({action.performed_by})</span>
                                                </div>
                                              </div>
                                            ))}
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </CardContent>
                              </Card>
                            ))}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* История грузов */}
                  {activeTab === 'cargo-history' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <FileText className="mr-2 h-5 w-5" />
                          История грузов
                        </CardTitle>
                        <CardDescription>
                          Просмотр доставленных грузов с фильтрами и поиском
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="flex space-x-4 mb-6">
                          <div className="flex-1">
                            <Input
                              placeholder="Поиск по номеру груза, отправителю или получателю"
                              value={historyFilters.search}
                              onChange={(e) => setHistoryFilters({...historyFilters, search: e.target.value})}
                            />
                          </div>
                          <div>
                            <Select 
                              value={historyFilters.status} 
                              onValueChange={(value) => setHistoryFilters({...historyFilters, status: value})}
                            >
                              <SelectTrigger className="w-48">
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="all">Все статусы оплаты</SelectItem>
                                <SelectItem value="paid">Оплачено</SelectItem>
                                <SelectItem value="pending">Ожидает оплаты</SelectItem>
                                <SelectItem value="failed">Оплата не прошла</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <Button onClick={fetchCargoHistory}>
                            <Search className="mr-2 h-4 w-4" />
                            Найти
                          </Button>
                        </div>
                        
                        <div className="space-y-4">
                          {cargoHistory.length === 0 ? (
                            <div className="text-center py-8">
                              <FileText className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">История грузов пуста</p>
                            </div>
                          ) : (
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead>Номер</TableHead>
                                  <TableHead>Отправитель</TableHead>
                                  <TableHead>Получатель</TableHead>
                                  <TableHead>Вес</TableHead>
                                  <TableHead>Стоимость</TableHead>
                                  <TableHead>Статус оплаты</TableHead>
                                  <TableHead>Дата доставки</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {cargoHistory.map((item) => (
                                  <TableRow key={item.id}>
                                    <TableCell className="font-medium">{item.cargo_number}</TableCell>
                                    <TableCell>
                                      <div>
                                        <div className="font-medium">{item.sender_full_name}</div>
                                        <div className="text-sm text-gray-500">{item.sender_phone}</div>
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      <div>
                                        <div className="font-medium">{item.recipient_full_name}</div>
                                        <div className="text-sm text-gray-500">{item.recipient_phone}</div>
                                      </div>
                                    </TableCell>
                                    <TableCell>{item.weight} кг</TableCell>
                                    <TableCell>{item.declared_value} ₽</TableCell>
                                    <TableCell>
                                      <Badge variant={item.payment_status === 'paid' ? 'default' : 'secondary'}>
                                        {item.payment_status === 'paid' ? 'Оплачен' : 'Не оплачен'}
                                      </Badge>
                                    </TableCell>
                                    <TableCell>
                                      {new Date(item.updated_at).toLocaleDateString('ru-RU')}
                                    </TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}
              {/* Управление пользователями (только для админа) */}
              {activeSection === 'users' && user?.role === 'admin' && (
                <div className="space-y-6">
                  {/* Пользователи */}
                  {(activeTab === 'users-regular' || !activeTab || activeTab === 'users') && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <User className="mr-2 h-5 w-5" />
                          Пользователи ({usersByRole.user.length})
                        </CardTitle>
                        <CardDescription>Обычные пользователи системы</CardDescription>
                      </CardHeader>
                      <CardContent>
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Номер</TableHead>
                              <TableHead>ФИО</TableHead>
                              <TableHead>Телефон</TableHead>
                              <TableHead>Дата регистрации</TableHead>
                              <TableHead>Статус</TableHead>
                              <TableHead>Действия</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {usersByRole.user.map((u) => (
                              <TableRow key={u.id}>
                                <TableCell>
                                  <Badge variant="secondary" className="text-xs">
                                    {u.user_number || 'N/A'}
                                  </Badge>
                                </TableCell>
                                <TableCell className="font-medium">{u.full_name}</TableCell>
                                <TableCell>{u.phone}</TableCell>
                                <TableCell>{new Date(u.created_at).toLocaleDateString('ru-RU')}</TableCell>
                                <TableCell>
                                  <Badge variant={u.is_active ? 'default' : 'secondary'}>
                                    {u.is_active ? 'Активен' : 'Заблокирован'}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <div className="flex space-x-2">
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => openAdminEditUser(u)}
                                      className="text-orange-600 hover:text-orange-700"
                                      title="Редактировать профиль пользователя"
                                    >
                                      <Edit className="h-4 w-4" />
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => fetchUserProfile(u.id)}
                                      className="text-blue-600 hover:text-blue-700"
                                      title="Просмотр профиля и истории"
                                    >
                                      <Eye className="h-4 w-4" />
                                    </Button>
                                    {user.role === 'warehouse_operator' && (
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        onClick={() => openQuickCargoModal(u)}
                                        className="text-green-600 hover:text-green-700"
                                        title="Быстрое создание груза"
                                      >
                                        <Plus className="h-4 w-4" />
                                      </Button>
                                    )}
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => openRoleModal(u)}
                                      className="text-blue-600 hover:text-blue-700"
                                      title="Изменить роль"
                                    >
                                      <Shield className="h-4 w-4" />
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => toggleUserStatus(u.id, u.is_active)}
                                    >
                                      {u.is_active ? 'Заблокировать' : 'Разблокировать'}
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => deleteUser(u.id)}
                                      className="text-red-600 hover:text-red-700"
                                    >
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                  </div>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </CardContent>
                    </Card>
                  )}

                  {/* Операторы склада */}
                  {activeTab === 'users-operators' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Warehouse className="mr-2 h-5 w-5" />
                            Операторы складов ({usersByRole.warehouse_operator.length})
                          </div>
                          {selectedOperators.length > 0 && (
                            <Button
                              onClick={handleBulkDeleteOperators}
                              variant="outline"
                              className="text-red-600 border-red-300 hover:bg-red-50"
                            >
                              <Trash2 className="mr-2 h-4 w-4" />
                              Удалить выбранных ({selectedOperators.length})
                            </Button>
                          )}
                        </CardTitle>
                        <CardDescription>Операторы складов с детальной информацией и управлением ролями</CardDescription>
                      </CardHeader>
                      <CardContent>
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>
                                {usersByRole.warehouse_operator.length > 0 && (
                                  <input
                                    type="checkbox"
                                    checked={selectAllOperators}
                                    onChange={(e) => handleSelectAllOperators(e.target.checked, usersByRole.warehouse_operator)}
                                    className="rounded border-gray-300"
                                  />
                                )}
                              </TableHead>
                              <TableHead>Номер</TableHead>
                              <TableHead>ФИО</TableHead>
                              <TableHead>Телефон</TableHead>
                              <TableHead>Дата регистрации</TableHead>
                              <TableHead>Статус</TableHead>
                              <TableHead>Роль</TableHead>
                              <TableHead>Действия</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {usersByRole.warehouse_operator.map((u) => (
                              <TableRow key={u.id}>
                                <TableCell>
                                  <input
                                    type="checkbox"
                                    checked={selectedOperators.includes(u.id)}
                                    onChange={(e) => handleOperatorSelect(u.id, e.target.checked)}
                                    className="rounded border-gray-300"
                                  />
                                </TableCell>
                                <TableCell>
                                  <Badge variant="secondary" className="text-xs">
                                    {u.user_number || 'N/A'}
                                  </Badge>
                                </TableCell>
                                <TableCell className="font-medium">{u.full_name}</TableCell>
                                <TableCell>{u.phone}</TableCell>
                                <TableCell>{new Date(u.created_at).toLocaleDateString('ru-RU')}</TableCell>
                                <TableCell>
                                  <Badge variant={u.is_active ? 'default' : 'secondary'}>
                                    {u.is_active ? 'Активен' : 'Заблокирован'}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <Badge variant="outline" className="bg-orange-50 text-orange-700">
                                    Оператор склада
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <div className="flex space-x-2">
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => fetchOperatorProfile(u.id)}
                                      className="text-blue-600 hover:text-blue-700"
                                      title="Просмотр профиля и статистики"
                                    >
                                      <Eye className="h-4 w-4" />
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => {
                                        setSelectedUserForRole(u);
                                        setNewRole('admin');
                                        setShowRoleModal(true);
                                      }}
                                      className="text-purple-600 hover:text-purple-700"
                                      title="Повысить до администратора"
                                    >
                                      <ArrowUp className="h-4 w-4" />
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => toggleUserStatus(u.id, u.is_active)}
                                      className={u.is_active ? "text-red-600 hover:text-red-700" : "text-green-600 hover:text-green-700"}
                                      title={u.is_active ? "Заблокировать" : "Разблокировать"}
                                    >
                                      {u.is_active ? <Ban className="h-4 w-4" /> : <CheckCircle className="h-4 w-4" />}
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleDeleteOperator(u.id)}
                                      className="text-red-600 hover:text-red-700"
                                      title="Удалить оператора"
                                    >
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                  </div>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>

                        {usersByRole.warehouse_operator.length === 0 && (
                          <div className="text-center py-8">
                            <Warehouse className="mx-auto h-12 w-12 text-gray-400" />
                            <h3 className="mt-4 text-sm font-medium text-gray-900">Операторы не найдены</h3>
                            <p className="mt-1 text-sm text-gray-500">
                              Назначьте роль "Оператор склада" пользователям
                            </p>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* Администраторы */}
                  {activeTab === 'users-admins' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Shield className="mr-2 h-5 w-5" />
                          Администраторы ({usersByRole.admin.length})
                        </CardTitle>
                        <CardDescription>Администраторы системы</CardDescription>
                      </CardHeader>
                      <CardContent>
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>ФИО</TableHead>
                              <TableHead>Телефон</TableHead>
                              <TableHead>Дата регистрации</TableHead>
                              <TableHead>Статус</TableHead>
                              <TableHead>Действия</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {usersByRole.admin.map((u) => (
                              <TableRow key={u.id}>
                                <TableCell className="font-medium">{u.full_name}</TableCell>
                                <TableCell>{u.phone}</TableCell>
                                <TableCell>{new Date(u.created_at).toLocaleDateString('ru-RU')}</TableCell>
                                <TableCell>
                                  <Badge variant={u.is_active ? 'default' : 'secondary'}>
                                    {u.is_active ? 'Активен' : 'Заблокирован'}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <div className="flex space-x-2">
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => toggleUserStatus(u.id, u.is_active)}
                                    >
                                      {u.is_active ? 'Заблокировать' : 'Разблокировать'}
                                    </Button>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => deleteUser(u.id)}
                                      className="text-red-600 hover:text-red-700"
                                    >
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                  </div>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </CardContent>
                    </Card>
                  )}

                  {/* НОВАЯ СЕКЦИЯ: Курьеры */}
                  {activeTab === 'users-couriers' && (
                    <div className="space-y-6">
                      {/* Карта отслеживания курьеров */}
                      <CourierTrackingMap 
                        userRole={user?.role}
                        apiCall={apiCall}
                      />
                      
                      <Card>
                        <CardHeader>
                          <CardTitle className="flex items-center justify-between">
                            <div className="flex items-center">
                              <Truck className="mr-2 h-5 w-5" />
                              Курьеры ({couriers.length})
                            </div>
                            <Button onClick={() => setCourierCreateModal(true)}>
                              <Plus className="mr-2 h-4 w-4" />
                              Создать курьера
                            </Button>
                          </CardTitle>
                          <CardDescription>Управление курьерами и службой доставки</CardDescription>
                        </CardHeader>
                        <CardContent>
                          {couriers.length > 0 ? (
                            <div className="space-y-4">
                              <Table>
                                <TableHeader>
                                  <TableRow>
                                    <TableHead>ФИО</TableHead>
                                    <TableHead>Телефон</TableHead>
                                    <TableHead>Транспорт</TableHead>
                                    <TableHead>Грузоподъемность</TableHead>
                                    <TableHead>Склад</TableHead>
                                    <TableHead>Статус</TableHead>
                                    <TableHead>Действия</TableHead>
                                  </TableRow>
                                </TableHeader>
                                <TableBody>
                                  {couriers.map((courier) => (
                                    <TableRow key={courier.id}>
                                      <TableCell className="font-medium">{courier.full_name}</TableCell>
                                      <TableCell>{courier.phone}</TableCell>
                                      <TableCell>
                                        <div className="flex items-center">
                                          <Truck className="mr-2 h-4 w-4" />
                                          {courier.transport_type} {courier.transport_number}
                                        </div>
                                      </TableCell>
                                      <TableCell>{courier.transport_capacity} кг</TableCell>
                                      <TableCell>{courier.assigned_warehouse_name}</TableCell>
                                      <TableCell>
                                        <Badge variant={courier.is_active ? "default" : "secondary"}>
                                          {courier.is_active ? 'Активен' : 'Неактивен'}
                                        </Badge>
                                      </TableCell>
                                      <TableCell>
                                        <div className="flex space-x-2">
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => handleViewCourierProfile(courier.id)}
                                          >
                                            <Eye className="h-4 w-4" />
                                          </Button>
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => handleEditCourier(courier)}
                                          >
                                            <Edit className="h-4 w-4" />
                                          </Button>
                                        </div>
                                      </TableCell>
                                    </TableRow>
                                  ))}
                                </TableBody>
                              </Table>
                              
                              {/* Пагинация курьеров */}
                              {couriersPagination && couriersPagination.total_pages > 1 && (
                                <DataPagination 
                                  currentPage={couriersPage}
                                  totalPages={couriersPagination.total_pages}
                                  totalItems={couriersPagination.total_count}
                                  itemsPerPage={couriersPerPage}
                                  onPageChange={(page) => {
                                    setCouriersPage(page);
                                    fetchCouriers(page, couriersPerPage);
                                  }}
                                  onItemsPerPageChange={(perPage) => {
                                    setCouriersPerPage(perPage);
                                    setCouriersPage(1);
                                    fetchCouriers(1, perPage);
                                  }}
                                />
                              )}
                            </div>
                          ) : (
                            <div className="text-center py-8">
                              <Truck className="mx-auto h-12 w-12 text-gray-400" />
                              <h3 className="mt-4 text-sm font-medium text-gray-900">Курьеры не найдены</h3>
                              <p className="mt-1 text-sm text-gray-500">
                                Создайте первого курьера для начала работы службы доставки
                              </p>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </div>
                  )}

                  {/* Создание оператора склада (Функция 2) */}
                  {activeTab === 'users-create-operator' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Plus className="mr-2 h-5 w-5" />
                          Создать нового оператора склада
                        </CardTitle>
                        <CardDescription>
                          Создание оператора с автоматической привязкой к складу
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <form onSubmit={handleCreateOperator} className="space-y-4 max-w-md">
                          <div>
                            <Label htmlFor="operator-full-name">ФИО оператора</Label>
                            <Input
                              id="operator-full-name"
                              value={operatorCreateForm.full_name}
                              onChange={(e) => setOperatorCreateForm({...operatorCreateForm, full_name: e.target.value})}
                              placeholder="Иванов Иван Иванович"
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="operator-phone">Телефон</Label>
                            <Input
                              id="operator-phone"
                              type="tel"
                              value={operatorCreateForm.phone}
                              onChange={(e) => setOperatorCreateForm({...operatorCreateForm, phone: e.target.value})}
                              placeholder="+79XXXXXXXXX"
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="operator-address">Адрес проживания</Label>
                            <Input
                              id="operator-address"
                              value={operatorCreateForm.address}
                              onChange={(e) => setOperatorCreateForm({...operatorCreateForm, address: e.target.value})}
                              placeholder="Москва, ул. Примерная, 10, кв. 5"
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="operator-password">Пароль</Label>
                            <Input
                              id="operator-password"
                              type="password"
                              value={operatorCreateForm.password}
                              onChange={(e) => setOperatorCreateForm({...operatorCreateForm, password: e.target.value})}
                              placeholder="Минимум 6 символов"
                              minLength={6}
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="operator-warehouse">Назначить на склад</Label>
                            <Select 
                              value={operatorCreateForm.warehouse_id} 
                              onValueChange={(value) => {
                                console.log('Выбран склад:', value);
                                setOperatorCreateForm({...operatorCreateForm, warehouse_id: value});
                              }}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Выберите склад" />
                              </SelectTrigger>
                              <SelectContent>
                                {warehouses && warehouses.length > 0 ? (
                                  warehouses.map((warehouse) => (
                                    <SelectItem key={warehouse.id} value={warehouse.id}>
                                      {warehouse.name} - {warehouse.location}
                                    </SelectItem>
                                  ))
                                ) : (
                                  <SelectItem value="" disabled>
                                    {warehouses ? 'Нет доступных складов' : 'Загрузка складов...'}
                                  </SelectItem>
                                )}
                              </SelectContent>
                            </Select>
                            {warehouses && warehouses.length === 0 && (
                              <p className="text-sm text-red-600 mt-1">
                                ⚠️ Склады не загружены. Проверьте подключение к серверу.
                              </p>
                            )}
                          </div>
                          <Button type="submit" className="w-full">
                            <Plus className="mr-2 h-4 w-4" />
                            Создать оператора
                          </Button>
                        </form>

                        {/* Список созданных операторов */}
                        <div className="mt-8">
                          <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-semibold">Созданные операторы</h3>
                            <div className="flex space-x-2">
                              <Button 
                                variant="destructive"
                                size="sm"
                                onClick={handleCleanupTestData}
                                className="bg-red-600 hover:bg-red-700"
                              >
                                🧹 Очистить тестовые данные
                              </Button>
                              <Button 
                                variant="outline" 
                                onClick={fetchAllOperators}
                              >
                                Обновить список
                              </Button>
                            </div>
                          </div>
                          {allOperators.length === 0 ? (
                            <div className="text-center py-8">
                              <Users className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">Операторы не созданы</p>
                            </div>
                          ) : (
                            <div className="space-y-4">
                              {allOperators.map((operator) => (
                                <div key={operator.id} className="border rounded-lg p-4">
                                  <div className="flex items-center justify-between">
                                    <div>
                                      <h4 className="font-semibold">{operator.full_name}</h4>
                                      <p className="text-sm text-gray-600">{operator.phone}</p>
                                      <p className="text-sm text-gray-600">{operator.address}</p>
                                      <div className="flex items-center mt-2">
                                        <Badge variant="outline" className="mr-2">
                                          {operator.role}
                                        </Badge>
                                        <span className="text-xs text-gray-500">
                                          Создан: {new Date(operator.created_at).toLocaleDateString('ru-RU')}
                                        </span>
                                      </div>
                                    </div>
                                    <div className="text-right">
                                      <p className="text-sm font-medium">Склады ({operator.warehouses_count})</p>
                                      {operator.warehouses && operator.warehouses.length > 0 ? (
                                        <div className="text-xs text-gray-600">
                                          {operator.warehouses.map((warehouse) => (
                                            <div key={warehouse.id}>
                                              {warehouse.name}
                                            </div>
                                          ))}
                                        </div>
                                      ) : (
                                        <span className="text-xs text-red-600">Нет складов</span>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* Привязка операторов к складам */}
                  {activeTab === 'users-operator-bindings' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Users className="mr-2 h-5 w-5" />
                            Привязка операторов к складам ({operatorWarehouseBindings.length})
                          </div>
                          <Button onClick={() => setOperatorBindingModal(true)}>
                            <Plus className="mr-2 h-4 w-4" />
                            Создать привязку
                          </Button>
                        </CardTitle>
                        <CardDescription>
                          Управление доступом операторов к складам
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        {operatorWarehouseBindings.length === 0 ? (
                          <div className="text-center py-8">
                            <Users className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                            <p className="text-gray-500">Нет привязок операторов к складам</p>
                            <Button 
                              onClick={() => setOperatorBindingModal(true)}
                              className="mt-4"
                            >
                              Создать первую привязку
                            </Button>
                          </div>
                        ) : (
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>Оператор</TableHead>
                                <TableHead>Телефон</TableHead>
                                <TableHead>Склад</TableHead>
                                <TableHead>Дата создания</TableHead>
                                <TableHead>Действия</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {operatorWarehouseBindings.map((binding) => (
                                <TableRow key={binding.id}>
                                  <TableCell className="font-medium">{binding.operator_name}</TableCell>
                                  <TableCell>{binding.operator_phone}</TableCell>
                                  <TableCell>{binding.warehouse_name}</TableCell>
                                  <TableCell>
                                    {new Date(binding.created_at).toLocaleDateString('ru-RU')}
                                  </TableCell>
                                  <TableCell>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleDeleteOperatorBinding(binding.id)}
                                      className="text-red-600 hover:text-red-700"
                                    >
                                      <Trash2 className="h-4 w-4" />
                                      Удалить
                                    </Button>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* НОВАЯ ВКЛАДКА: Список задолжников */}
                  {activeTab === 'users-debtors' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <CreditCard className="mr-2 h-5 w-5" />
                            Список задолжников ({debtorsList.length})
                          </div>
                          <Button onClick={fetchDebtorsList}>
                            Обновить
                          </Button>
                        </CardTitle>
                        <CardDescription>
                          Грузы оформленные в долг с датами погашения
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        {debtorsList.length === 0 ? (
                          <div className="text-center py-8">
                            <CreditCard className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                            <p className="text-gray-500">Нет активных долгов</p>
                          </div>
                        ) : (
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>Номер груза</TableHead>
                                <TableHead>Должник</TableHead>
                                <TableHead>Телефон</TableHead>
                                <TableHead>Сумма долга</TableHead>
                                <TableHead>Оплачено</TableHead>
                                <TableHead>Остаток</TableHead>
                                <TableHead>Срок погашения</TableHead>
                                <TableHead>Склад</TableHead>
                                <TableHead>Статус</TableHead>
                                <TableHead>Действия</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {debtorsList.map((debt) => {
                                const isOverdue = new Date(debt.debt_due_date) < new Date();
                                return (
                                  <TableRow key={debt.id}>
                                    <TableCell className="font-medium">
                                      {debt.cargo_number}
                                    </TableCell>
                                    <TableCell>{debt.debtor_name}</TableCell>
                                    <TableCell>{debt.debtor_phone}</TableCell>
                                    <TableCell className="font-semibold">
                                      {debt.debt_amount?.toFixed(2)} сом
                                    </TableCell>
                                    <TableCell className="text-green-600">
                                      {debt.payment_amount?.toFixed(2) || 0} сом
                                    </TableCell>
                                    <TableCell className="font-semibold text-red-600">
                                      {debt.remaining_amount?.toFixed(2)} сом
                                    </TableCell>
                                    <TableCell className={isOverdue ? "text-red-600 font-semibold" : ""}>
                                      {new Date(debt.debt_due_date).toLocaleDateString('ru-RU')}
                                      {isOverdue && " (ПРОСРОЧЕН)"}
                                    </TableCell>
                                    <TableCell>{debt.warehouse_name}</TableCell>
                                    <TableCell>
                                      <Badge variant={
                                        debt.status === 'paid' ? 'default' : 
                                        isOverdue ? 'destructive' : 'secondary'
                                      }>
                                        {debt.status === 'paid' ? 'Оплачен' : 
                                         isOverdue ? 'Просрочен' : 'Активный'}
                                      </Badge>
                                    </TableCell>
                                    <TableCell>
                                      {debt.status === 'active' && (
                                        <div className="flex space-x-2">
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => handlePayOffDebt(debt.id, debt.remaining_amount)}
                                            className="text-green-600 hover:text-green-700"
                                          >
                                            Погасить
                                          </Button>
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => handleMarkOverdue(debt.id)}
                                            className="text-orange-600 hover:text-orange-700"
                                          >
                                            Просрочен
                                          </Button>
                                        </div>
                                      )}
                                    </TableCell>
                                  </TableRow>
                                );
                              })}
                            </TableBody>
                          </Table>
                        )}
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* Управление складами */}
              {activeSection === 'warehouses' && (
                <div className="space-y-6">
                  {/* РАСШИРЕННЫЙ ИНТЕРФЕЙС ДЛЯ ОПЕРАТОРОВ СКЛАДОВ (ФАЗА 3) */}
                  {user?.role === 'warehouse_operator' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Building className="mr-2 h-5 w-5" />
                            Мои назначенные склады ({operatorWarehouses.length})
                          </div>
                          <Button onClick={fetchOperatorWarehouses} variant="outline" size="sm">
                            <RefreshCw className="mr-2 h-4 w-4" />
                            Обновить
                          </Button>
                        </CardTitle>
                        <CardDescription>
                          Функциональные карточки складов с аналитикой и схемой размещения
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        {operatorWarehouses.length === 0 ? (
                          <div className="text-center py-8">
                            <Building className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                            <p className="text-gray-500 mb-4">Вам не назначены склады</p>
                            <p className="text-sm text-gray-400">Обратитесь к администратору для привязки к складам</p>
                          </div>
                        ) : (
                          <div className="space-y-6">
                            {operatorWarehouses.map((warehouse) => {
                              // ИСПРАВЛЕНИЕ: Компонент карточки склада с реальными данными
                              const WarehouseCard = ({ warehouse }) => {
                                const [statistics, setStatistics] = useState(null);
                                const [loading, setLoading] = useState(false);
                                
                                useEffect(() => {
                                  const loadStatistics = async () => {
                                    // Проверяем, есть ли уже загруженная статистика
                                    if (warehousesStatistics[warehouse.id]) {
                                      setStatistics(warehousesStatistics[warehouse.id]);
                                      return;
                                    }
                                    
                                    setLoading(true);
                                    try {
                                      const stats = await fetchWarehouseStatisticsLazy(warehouse.id);
                                      setStatistics(stats);
                                    } catch (error) {
                                      console.error(`Error loading statistics for warehouse ${warehouse.id}:`, error);
                                    } finally {
                                      setLoading(false);
                                    }
                                  };
                                  
                                  loadStatistics();
                                }, [warehouse.id]);
                                
                                if (loading) {
                                  return (
                                    <Card key={warehouse.id} className="border-l-4 border-l-blue-500 bg-gradient-to-r from-blue-50 to-white">
                                      <CardContent className="p-6">
                                        <div className="text-center py-8">
                                          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                                          <p className="text-gray-500">Загрузка статистики склада...</p>
                                        </div>
                                      </CardContent>
                                    </Card>
                                  );
                                }
                                
                                return (
                                  <Card key={warehouse.id} className="border-l-4 border-l-blue-500 bg-gradient-to-r from-blue-50 to-white">
                                    <CardContent className="p-6">
                                      {/* Заголовок склада */}
                                      <div className="flex items-start justify-between mb-6">
                                        <div>
                                          <h3 className="font-bold text-xl text-gray-900 mb-2">
                                            🏭 {warehouse.name}
                                          </h3>
                                          <p className="text-gray-600 flex items-center mb-1">
                                            <MapPin className="inline h-4 w-4 mr-2" />
                                            {warehouse.location}
                                          </p>
                                          <div className="flex flex-wrap gap-3 text-sm text-gray-500">
                                            <span>Блоков: {warehouse.blocks_count || 'Не указано'}</span>
                                            <span>Полок/блок: {warehouse.shelves_per_block || 'Не указано'}</span>
                                            <span>Ячеек/полка: {warehouse.cells_per_shelf || 'Не указано'}</span>
                                          </div>
                                          <p className="text-sm text-blue-600 font-medium mt-1">
                                            Общее количество ячеек: {statistics?.total_cells || 
                                             (warehouse.blocks_count || 0) * (warehouse.shelves_per_block || 0) * (warehouse.cells_per_shelf || 0)}
                                          </p>
                                        </div>
                                        <Badge className="bg-green-100 text-green-800 border-green-200">
                                          <CheckCircle className="w-3 h-3 mr-1" />
                                          Активный
                                        </Badge>
                                      </div>

                                      {/* ИСПРАВЛЕНО: Реальная статистика ячеек */}
                                      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
                                        <div className="bg-white p-3 rounded-lg border shadow-sm">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-gray-500">Всего ячеек</p>
                                              <p className="text-xl font-bold text-blue-600">
                                                {statistics?.total_cells || 
                                                 (warehouse.blocks_count || 0) * (warehouse.shelves_per_block || 0) * (warehouse.cells_per_shelf || 0)}
                                              </p>
                                            </div>
                                            <Grid3X3 className="h-6 w-6 text-blue-500" />
                                          </div>
                                        </div>
                                        
                                        <div className="bg-white p-3 rounded-lg border shadow-sm">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-gray-500">Занято</p>
                                              <p className="text-xl font-bold text-red-600">
                                                {statistics?.occupied_cells || 0}
                                              </p>
                                            </div>
                                            <Package className="h-6 w-6 text-red-500" />
                                          </div>
                                        </div>
                                        
                                        <div className="bg-white p-3 rounded-lg border shadow-sm">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-gray-500">Свободно</p>
                                              <p className="text-xl font-bold text-green-600">
                                                {statistics?.free_cells || ((statistics?.total_cells || 0) - (statistics?.occupied_cells || 0))}
                                              </p>
                                            </div>
                                            <CheckCircle className="h-6 w-6 text-green-500" />
                                          </div>
                                        </div>
                                        
                                        <div className="bg-white p-3 rounded-lg border shadow-sm">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-gray-500">Загрузка</p>
                                              <p className="text-xl font-bold text-purple-600">
                                                {statistics?.occupancy_rate || Math.round(((statistics?.occupied_cells || 0) / (statistics?.total_cells || 1)) * 100)}%
                                              </p>
                                            </div>
                                            <Calculator className="h-6 w-6 text-purple-500" />
                                          </div>
                                        </div>
                                      </div>

                                      {/* ИСПРАВЛЕНО: Реальная статистика грузов */}
                                      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-6">
                                        <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-3 rounded-lg border border-purple-200">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-purple-700">Вес (кг)</p>
                                              <p className="text-lg font-bold text-purple-900">
                                                {statistics?.total_weight_kg?.toLocaleString() || 0}
                                              </p>
                                            </div>
                                            <Package2 className="h-5 w-5 text-purple-600" />
                                          </div>
                                        </div>
                                        
                                        <div className="bg-gradient-to-r from-blue-50 to-cyan-50 p-3 rounded-lg border border-blue-200">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-blue-700">Кол-во грузов</p>
                                              <p className="text-lg font-bold text-blue-900">
                                                {statistics?.total_cargo || 0}
                                              </p>
                                            </div>
                                            <FileText className="h-5 w-5 text-blue-600" />
                                          </div>
                                        </div>
                                        
                                        <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-3 rounded-lg border border-green-200">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-green-700">Клиентов</p>
                                              <p className="text-lg font-bold text-green-900">
                                                {statistics?.unique_clients || 0}
                                              </p>
                                            </div>
                                            <Users className="h-5 w-5 text-green-600" />
                                          </div>
                                        </div>
                                        
                                        <div className="bg-gradient-to-r from-yellow-50 to-orange-50 p-3 rounded-lg border border-yellow-200">
                                          <div className="flex items-center justify-between">
                                            <div>
                                              <p className="text-xs font-medium text-yellow-700">Сумма (₽)</p>
                                              <p className="text-lg font-bold text-yellow-900">
                                                {statistics?.total_value_rub?.toLocaleString() || 0}
                                              </p>
                                            </div>
                                            <CreditCard className="h-5 w-5 text-yellow-600" />
                                          </div>
                                        </div>
                                      </div>

                                      {/* Кнопки управления */}
                                      <div className="flex flex-wrap gap-3">
                                        <Button 
                                          onClick={() => setShowWarehouseScheme(warehouse.id)}
                                          className="bg-blue-600 hover:bg-blue-700"
                                        >
                                          <Grid3X3 className="mr-2 h-4 w-4" />
                                          Просмотр схемы склада
                                        </Button>
                                        <Button 
                                          variant="outline"
                                          onClick={() => openWarehouseReport(warehouse)}
                                        >
                                          <FileText className="mr-2 h-4 w-4" />
                                          Отчет по складу
                                        </Button>
                                        <Button 
                                          variant="outline"
                                          onClick={async () => {
                                            setLoading(true);
                                            try {
                                              const stats = await fetchWarehouseStatisticsLazy(warehouse.id);
                                              setStatistics(stats);
                                              showAlert('Статистика склада обновлена!', 'success');
                                            } catch (error) {
                                              console.error('Error refreshing statistics:', error);
                                              showAlert('Ошибка обновления статистики', 'error');
                                            } finally {
                                              setLoading(false);
                                            }
                                          }}
                                          disabled={loading}
                                        >
                                          <RefreshCw className={`mr-2 h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
                                          Обновить
                                        </Button>
                                      </div>
                                    </CardContent>
                                  </Card>
                                );
                              };
                              
                              return <WarehouseCard key={warehouse.id} warehouse={warehouse} />;
                            })}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  )}

                  {/* АДМИНИСТРАТИВНЫЙ ИНТЕРФЕЙС (ТОЛЬКО ДЛЯ АДМИНОВ) */}
                  {/* Создание склада */}
                  {activeTab === 'warehouses-create' && user?.role === 'admin' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Plus className="mr-2 h-5 w-5" />
                          Создать новый склад
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <form onSubmit={handleCreateWarehouse} className="space-y-4 max-w-md">
                          <div>
                            <Label htmlFor="warehouse_name">Имя склада</Label>
                            <Input
                              id="warehouse_name"
                              value={warehouseForm.name}
                              onChange={(e) => setWarehouseForm({...warehouseForm, name: e.target.value})}
                              placeholder="Например: Склад Москва-1"
                              required
                            />
                          </div>

                          <div>
                            <Label htmlFor="warehouse_location">Местоположение склада</Label>
                            <Input
                              id="warehouse_location"
                              value={warehouseForm.location}
                              onChange={(e) => setWarehouseForm({...warehouseForm, location: e.target.value})}
                              placeholder="Например: Москва, ул. Складская, 1"
                              required
                            />
                          </div>

                          <div>
                            <Label htmlFor="blocks_count">Количество блоков на складе (1-9)</Label>
                            <Select 
                              key="warehouse-blocks-select"
                              value={warehouseForm.blocks_count.toString()} 
                              onValueChange={(value) => setWarehouseForm({...warehouseForm, blocks_count: parseInt(value)})}
                            >
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                {[1,2,3,4,5,6,7,8,9].map(num => (
                                  <SelectItem key={`warehouse-blocks-${num}`} value={num.toString()}>
                                    {num} блок{num > 1 ? (num < 5 ? 'а' : 'ов') : ''}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>

                          <div>
                            <Label htmlFor="shelves_per_block">Количество полок на каждом блоке (1-3)</Label>
                            <Select 
                              key="warehouse-shelves-select"
                              value={warehouseForm.shelves_per_block.toString()} 
                              onValueChange={(value) => setWarehouseForm({...warehouseForm, shelves_per_block: parseInt(value)})}
                            >
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem key="warehouse-shelves-1" value="1">1 полка</SelectItem>
                                <SelectItem key="warehouse-shelves-2" value="2">2 полки</SelectItem>
                                <SelectItem key="warehouse-shelves-3" value="3">3 полки</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>

                          <div>
                            <Label htmlFor="cells_per_shelf">Количество ячеек на каждой полке</Label>
                            <Input
                              key="warehouse-cells-input"
                              id="cells_per_shelf"
                              type="number"
                              min="1"
                              max="50"
                              value={warehouseForm.cells_per_shelf || ''}
                              onChange={(e) => setWarehouseForm({...warehouseForm, cells_per_shelf: parseInt(e.target.value) || 1})}
                              required
                            />
                          </div>

                          <div key="warehouse-params-display" className="bg-gray-50 p-4 rounded-lg">
                            <h4 className="font-medium mb-2">Параметры склада:</h4>
                            <div className="text-sm text-gray-600 space-y-1">
                              <p>Блоков: {warehouseForm.blocks_count || 1}</p>
                              <p>Полок в блоке: {warehouseForm.shelves_per_block || 1}</p>
                              <p>Ячеек на полке: {warehouseForm.cells_per_shelf || 1}</p>
                              <p className="font-medium text-gray-900">
                                Общая вместимость: {(warehouseForm.blocks_count || 1) * (warehouseForm.shelves_per_block || 1) * (warehouseForm.cells_per_shelf || 1)} ячеек
                              </p>
                            </div>
                          </div>

                          <Button type="submit" className="w-full">
                            <Plus className="mr-2 h-4 w-4" />
                            Создать склад
                          </Button>
                        </form>
                      </CardContent>
                    </Card>
                  )}

                  {/* Список складов */}
                  {(activeTab === 'warehouses-list' || !activeTab || activeTab === 'warehouses') && user?.role === 'admin' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Building className="mr-2 h-5 w-5" />
                            Список складов ({warehouses.length})
                          </div>
                          <div className="flex items-center space-x-2">
                            <Button 
                              variant="outline"
                              onClick={async () => {
                                try {
                                  const response = await apiCall('/api/admin/warehouses/update-id-numbers', 'POST');
                                  if (response.updated_count > 0) {
                                    showAlert(`Обновлены номера ${response.updated_count} складов для уникальности QR кодов`, 'success');
                                    // Обновляем список складов
                                    fetchWarehouses();
                                  } else {
                                    showAlert('Все склады уже имеют уникальные номера', 'info');
                                  }
                                } catch (error) {
                                  console.error('Error updating warehouse numbers:', error);
                                  showAlert('Ошибка при обновлении номеров складов: ' + error.message, 'error');
                                }
                              }}
                              className="text-blue-600 border-blue-300 hover:bg-blue-50"
                            >
                              <RefreshCw className="mr-2 h-4 w-4" />
                              Обновить номера складов
                            </Button>
                            {selectedWarehouses.length > 0 && (
                              <Button 
                                variant="destructive" 
                                onClick={handleBulkDeleteWarehouses}
                                disabled={bulkDeleteLoading}
                              >
                                <Trash2 className="mr-2 h-4 w-4" />
                                Удалить выбранные ({selectedWarehouses.length})
                              </Button>
                            )}
                            <Button onClick={openWarehouseCreationPage}>
                              <Plus className="mr-2 h-4 w-4" />
                              Создать склад
                            </Button>
                            
                            {/* НОВАЯ КНОПКА: Генерация QR кодов для всех складов */}
                            <Button 
                              onClick={() => setWarehouseSelectionModal(true)}
                              className="bg-orange-600 hover:bg-orange-700"
                            >
                              <QrCode className="mr-2 h-4 w-4" />
                              Генерация QR кодов
                            </Button>
                          </div>
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {warehouses.length === 0 ? (
                            <div className="text-center py-8">
                              <Building className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500 mb-4">Нет созданных складов</p>
                              <Button onClick={() => setActiveTab('warehouses-create')}>
                                <Plus className="mr-2 h-4 w-4" />
                                Создать первый склад
                              </Button>
                            </div>
                          ) : (
                            <>
                              {/* Панель массового выбора */}
                              <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border">
                                <div className="flex items-center space-x-2">
                                  <input
                                    type="checkbox"
                                    checked={selectAllWarehouses}
                                    onChange={(e) => handleSelectAllWarehouses(e.target.checked)}
                                    className="rounded"
                                  />
                                  <label className="text-sm font-medium">
                                    {selectAllWarehouses ? 'Отменить выбор всех' : 'Выбрать все склады'}
                                  </label>
                                </div>
                                <div className="text-sm text-gray-600">
                                  {selectedWarehouses.length > 0 ? (
                                    <span>Выбрано: {selectedWarehouses.length} из {warehouses.length}</span>
                                  ) : (
                                    <span>Всего складов: {warehouses.length}</span>
                                  )}
                                </div>
                              </div>

                              {warehouses.map((warehouse) => (
                                <Card key={warehouse.id} className="border-l-4 border-l-blue-500 bg-gradient-to-r from-blue-50 to-white">
                                  <CardContent className="p-6">
                                    {/* Чекбокс и заголовок склада */}
                                    <div className="flex items-start justify-between mb-6">
                                      <div className="flex items-start space-x-3">
                                        <input
                                          type="checkbox"
                                          checked={selectedWarehouses.includes(warehouse.id)}
                                          onChange={(e) => handleWarehouseSelect(warehouse.id, e.target.checked)}
                                          className="rounded mt-2"
                                        />
                                        <div>
                                          <h3 className="font-bold text-xl text-gray-900 mb-2">
                                            🏭 {warehouse.name}
                                          </h3>
                                          <p className="text-gray-600 flex items-center mb-1">
                                            <MapPin className="inline h-4 w-4 mr-2" />
                                            {warehouse.location}
                                          </p>
                                          <p className="text-sm text-gray-500">
                                            Блоков: {warehouse.blocks_count || 0} | Полок: {warehouse.shelves_per_block || 0} | Ячеек на полку: {warehouse.cells_per_shelf || 0}
                                          </p>
                                        </div>
                                      </div>
                                      <Badge className="bg-green-100 text-green-800 border-green-200">
                                        <CheckCircle className="w-3 h-3 mr-1" />
                                        Активный
                                      </Badge>
                                    </div>

                                    {/* Аналитика склада с lazy loading */}
                                    <WarehouseStatistics warehouse={warehouse} />

                                    {/* Дополнительная аналитика с lazy loading */}
                                    <WarehouseExtendedStatistics warehouse={warehouse} />

                                    {/* Кнопки управления */}
                                    <div className="flex flex-wrap gap-3">
                                      <Button 
                                        onClick={() => setShowWarehouseScheme(warehouse.id)}
                                        className="bg-blue-600 hover:bg-blue-700"
                                      >
                                        <Grid3X3 className="mr-2 h-4 w-4" />
                                        Просмотр схемы склада
                                      </Button>
                                      <Button 
                                        variant="outline"
                                        onClick={() => openWarehouseReport(warehouse)}
                                      >
                                        <FileText className="mr-2 h-4 w-4" />
                                        Отчет по складу
                                      </Button>
                                      <Button 
                                        variant="outline"
                                        onClick={() => openCellManagement(warehouse)}
                                      >
                                        <Settings className="mr-2 h-4 w-4" />
                                        Управление ячейками
                                      </Button>
                                      <Button 
                                        variant="outline" 
                                        onClick={() => {
                                          setSelectedWarehouse(warehouse);
                                          setActiveTab('warehouses-manage');
                                        }}
                                        className="text-blue-600 border-blue-200 hover:bg-blue-50"
                                      >
                                        <Edit className="mr-2 h-4 w-4" />
                                        Редактировать
                                      </Button>
                                      <Button 
                                        variant="outline" 
                                        onClick={() => openWarehouseCitiesManagement(warehouse)}
                                        className="text-green-600 border-green-200 hover:bg-green-50"
                                      >
                                        <MapPin className="mr-2 h-4 w-4" />
                                        Города доставки
                                      </Button>
                                      <Button 
                                        variant="destructive" 
                                        onClick={() => handleDeleteWarehouse(warehouse.id)}
                                        className="bg-red-600 hover:bg-red-700"
                                      >
                                        <Trash2 className="mr-2 h-4 w-4" />
                                        Удалить
                                      </Button>
                                    </div>
                                  </CardContent>
                                </Card>
                              ))}
                            </>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* Управление товарами на складе */}
                  {activeTab === 'warehouses-manage' && user?.role === 'admin' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Package2 className="mr-2 h-5 w-5" />
                          Управление товарами на складе
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex space-x-2 mb-4">
                          <Input
                            placeholder="Поиск по номеру груза или имени получателя"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            className="flex-1"
                          />
                          <Button onClick={handleWarehouseSearch}>
                            <Search className="h-4 w-4" />
                          </Button>
                        </div>
                        
                        <div className="space-y-4">
                          {warehouseCargo.map((item) => (
                            <div key={item.id} className="border rounded-lg p-4">
                              <div className="flex justify-between items-start mb-4">
                                <div>
                                  <h3 className="font-semibold">{item.cargo_number}</h3>
                                  <p className="text-sm text-gray-600">Получатель: {item.recipient_name}</p>
                                  <p className="text-sm text-gray-600">Вес: {item.weight} кг</p>
                                  {item.accepted_by_operator && (
                                    <p className="text-sm text-gray-500">Принял: {item.accepted_by_operator}</p>
                                  )}
                                  {item.placed_by_operator && (
                                    <p className="text-sm text-gray-500">Разместил: {item.placed_by_operator}</p>
                                  )}
                                </div>
                                {getStatusBadge(item.status)}
                              </div>
                              
                              <div className="flex space-x-2">
                                <Select onValueChange={(value) => updateCargoStatus(item.id, value)}>
                                  <SelectTrigger className="w-40">
                                    <SelectValue placeholder="Изменить статус" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="accepted">Принять</SelectItem>
                                    <SelectItem value="in_transit">Отправить</SelectItem>
                                    <SelectItem value="arrived_destination">Прибыл</SelectItem>
                                    <SelectItem value="completed">Выдать</SelectItem>
                                  </SelectContent>
                                </Select>
                                
                                <Input
                                  placeholder="Местоположение на складе"
                                  className="flex-1"
                                  onKeyPress={(e) => {
                                    if (e.key === 'Enter') {
                                      updateCargoStatus(item.id, item.status, e.target.value);
                                      e.target.value = '';
                                    }
                                  }}
                                />
                              </div>
                              
                              {item.warehouse_location && (
                                <p className="text-sm text-blue-600 mt-2">
                                  <MapPin className="inline h-4 w-4 mr-1" />
                                  Текущее расположение: {item.warehouse_location}
                                </p>
                              )}
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* Финансы (только для админа) */}
              {activeSection === 'finances' && user?.role === 'admin' && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <DollarSign className="mr-2 h-5 w-5" />
                      Финансовый обзор
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-500">Раздел финансов в разработке</p>
                  </CardContent>
                </Card>
              )}

              {/* Отчеты */}
              {activeSection === 'reports' && (
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <FileText className="mr-2 h-5 w-5" />
                      Отчеты
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-500">Раздел отчетов в разработке</p>
                  </CardContent>
                </Card>
              )}

              {/* Касса */}
              {activeSection === 'cashier' && (
                <div className="space-y-6">
                  {/* Приём оплаты */}
                  {activeTab === 'cashier-payment' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <CreditCard className="mr-2 h-5 w-5" />
                          Приём оплаты
                        </CardTitle>
                        <CardDescription>
                          Поиск груза по номеру и прием оплаты от клиента
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <Button onClick={() => setPaymentModal(true)} className="mb-4">
                          <Plus className="mr-2 h-4 w-4" />
                          Принять оплату
                        </Button>
                      </CardContent>
                    </Card>
                  )}

                  {/* Не оплачено */}
                  {(activeTab === 'cashier-unpaid' || !activeTab || activeTab === 'cashier') && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Package className="mr-2 h-5 w-5" />
                            Не оплачено ({unpaidCargo.length})
                          </div>
                          <Button onClick={fetchUnpaidCargo}>
                            Обновить
                          </Button>
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {unpaidCargo.length === 0 ? (
                            <div className="text-center py-8">
                              <CheckCircle className="mx-auto h-12 w-12 text-green-500 mb-4" />
                              <p className="text-gray-500">Все грузы оплачены!</p>
                            </div>
                          ) : (
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead>Номер груза</TableHead>
                                  <TableHead>Отправитель</TableHead>
                                  <TableHead>Сумма к оплате</TableHead>
                                  <TableHead>Дата приема</TableHead>
                                  <TableHead>Действия</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {unpaidCargo.map((item) => (
                                  <TableRow key={item.id}>
                                    <TableCell className="font-medium">{item.cargo_number}</TableCell>
                                    <TableCell>
                                      <div>
                                        <div className="font-medium">{item.sender_full_name}</div>
                                        <div className="text-sm text-gray-500">{item.sender_phone}</div>
                                      </div>
                                    </TableCell>
                                    <TableCell className="font-bold text-red-600">{item.declared_value} ₽</TableCell>
                                    <TableCell>{new Date(item.created_at).toLocaleDateString('ru-RU')}</TableCell>
                                    <TableCell>
                                      <Button
                                        size="sm"
                                        onClick={() => {
                                          setPaymentForm({...paymentForm, cargo_number: item.cargo_number});
                                          setPaymentModal(true);
                                        }}
                                      >
                                        <CreditCard className="mr-2 h-4 w-4" />
                                        Принять оплату
                                      </Button>
                                    </TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* История оплаты */}
                  {activeTab === 'cashier-history' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <FileText className="mr-2 h-5 w-5" />
                            История оплаты ({paymentHistory.length})
                          </div>
                          <Button onClick={fetchPaymentHistory}>
                            Обновить
                          </Button>
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {paymentHistory.length === 0 ? (
                            <div className="text-center py-8">
                              <FileText className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">История оплаты пуста</p>
                            </div>
                          ) : (
                            <Table>
                              <TableHeader>
                                <TableRow>
                                  <TableHead>Номер груза</TableHead>
                                  <TableHead>Клиент</TableHead>
                                  <TableHead>Сумма к оплате</TableHead>
                                  <TableHead>Оплачено</TableHead>
                                  <TableHead>Дата оплаты</TableHead>
                                  <TableHead>Кассир</TableHead>
                                </TableRow>
                              </TableHeader>
                              <TableBody>
                                {paymentHistory.map((transaction) => (
                                  <TableRow key={transaction.id}>
                                    <TableCell className="font-medium">{transaction.cargo_number}</TableCell>
                                    <TableCell>
                                      <div>
                                        <div className="font-medium">{transaction.customer_name}</div>
                                        <div className="text-sm text-gray-500">{transaction.customer_phone}</div>
                                      </div>
                                    </TableCell>
                                    <TableCell>{transaction.amount_due} ₽</TableCell>
                                    <TableCell className="font-bold text-green-600">{transaction.amount_paid} ₽</TableCell>
                                    <TableCell>{new Date(transaction.payment_date).toLocaleDateString('ru-RU')} {new Date(transaction.payment_date).toLocaleTimeString('ru-RU')}</TableCell>
                                    <TableCell>{transaction.processed_by}</TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* Логистика */}
              {activeSection === 'logistics' && (
                <div className="space-y-6">
                  {/* Приём машину */}
                  {activeTab === 'logistics-add-transport' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Plus className="mr-2 h-5 w-5" />
                          Приём машину
                        </CardTitle>
                        <CardDescription>
                          Добавить новый транспорт в систему логистики
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <form onSubmit={handleCreateTransport} className="space-y-4 max-w-2xl">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="driver_name">ФИО водителя</Label>
                              <Input
                                id="driver_name"
                                value={transportForm.driver_name}
                                onChange={(e) => setTransportForm({...transportForm, driver_name: e.target.value})}
                                placeholder="Иванов Иван Иванович"
                                required
                              />
                            </div>
                            <div>
                              <Label htmlFor="driver_phone">Телефон водителя</Label>
                              <Input
                                id="driver_phone"
                                type="tel"
                                value={transportForm.driver_phone}
                                onChange={(e) => setTransportForm({...transportForm, driver_phone: e.target.value})}
                                placeholder="+79123456789"
                                required
                              />
                            </div>
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <Label htmlFor="transport_number">Номер транспорта</Label>
                              <Input
                                id="transport_number"
                                value={transportForm.transport_number}
                                onChange={(e) => setTransportForm({...transportForm, transport_number: e.target.value})}
                                placeholder="А123БВ77"
                                required
                              />
                            </div>
                            <div>
                              <Label htmlFor="capacity_kg">Объём допускаемых грузов (кг)</Label>
                              <Input
                                id="capacity_kg"
                                type="number"
                                step="0.1"
                                value={transportForm.capacity_kg}
                                onChange={(e) => setTransportForm({...transportForm, capacity_kg: e.target.value})}
                                placeholder="5000"
                                required
                              />
                            </div>
                          </div>

                          <div>
                            <Label htmlFor="direction">Направление</Label>
                            <Input
                              id="direction"
                              value={transportForm.direction}
                              onChange={(e) => setTransportForm({...transportForm, direction: e.target.value})}
                              placeholder="Москва - Душанбе"
                              required
                            />
                          </div>

                          <Button type="submit" className="w-full">
                            <Plus className="mr-2 h-4 w-4" />
                            Сохранить транспорт
                          </Button>
                        </form>
                      </CardContent>
                    </Card>
                  )}

                  {/* Список транспортов */}
                  {activeTab === 'logistics-transport-list' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Truck className="mr-2 h-5 w-5" />
                            Список транспортов ({transports.filter(t => t.status === 'empty' || t.status === 'filled').length})
                          </div>
                          <div className="flex space-x-2">
                            {user?.role === 'admin' && selectedTransports.length > 0 && (
                              <Button
                                onClick={handleBulkDeleteTransports}
                                variant="outline"
                                className="text-red-600 border-red-300 hover:bg-red-50"
                              >
                                <Trash2 className="mr-2 h-4 w-4" />
                                Удалить выбранные ({selectedTransports.length})
                              </Button>
                            )}
                            <Button 
                              variant="outline" 
                              onClick={() => setInterwarehouseTransportModal(true)}
                              disabled={user?.role !== 'admin' && user?.role !== 'warehouse_operator'}
                            >
                              <Plus className="mr-2 h-4 w-4" />
                              Межскладской
                            </Button>
                            <Button onClick={() => fetchTransportsList()}>
                              Обновить
                            </Button>
                          </div>
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        {user?.role === 'admin' && transports.filter(t => t.status === 'empty' || t.status === 'filled').length > 0 && (
                          <div className="flex items-center space-x-2 mb-4 p-3 bg-gray-50 rounded-lg">
                            <input
                              type="checkbox"
                              checked={selectAllTransports}
                              onChange={(e) => handleSelectAllTransports(e.target.checked, transports.filter(t => t.status === 'empty' || t.status === 'filled'))}
                              className="rounded border-gray-300"
                            />
                            <label className="text-sm font-medium text-gray-700">
                              Выбрать все ({transports.filter(t => t.status === 'empty' || t.status === 'filled').length})
                            </label>
                          </div>
                        )}
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                          {transports.filter(transport => transport.status === 'empty' || transport.status === 'filled').length === 0 ? (
                            <div className="col-span-full text-center py-8">
                              <Truck className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">Нет доступных транспортов</p>
                            </div>
                          ) : (
                            transports.filter(transport => transport.status === 'empty' || transport.status === 'filled').map((transport) => (
                              <Card key={transport.id} className="p-4">
                                <div className="space-y-3">
                                  <div className="flex justify-between items-start">
                                    <div className="flex items-start space-x-2">
                                      {user?.role === 'admin' && (
                                        <input
                                          type="checkbox"
                                          checked={selectedTransports.includes(transport.id)}
                                          onChange={(e) => handleTransportSelect(transport.id, e.target.checked)}
                                          className="mt-1 rounded border-gray-300"
                                        />
                                      )}
                                      <h3 className="font-semibold text-lg">{transport.transport_number}</h3>
                                    </div>
                                    <Badge variant={transport.status === 'empty' ? 'secondary' : 'default'}>
                                      {transport.status === 'empty' ? 'Пустой' : 'Заполнено'}
                                    </Badge>
                                  </div>
                                  
                                  <div className="space-y-2 text-sm">
                                    <p><strong>ФИО водителя:</strong> {transport.driver_name}</p>
                                    <p><strong>Телефон водителя:</strong> {transport.driver_phone}</p>
                                    <p><strong>Направление:</strong> {transport.direction}</p>
                                    <p><strong>Объём:</strong> {transport.current_load_kg} / {transport.capacity_kg} кг</p>
                                  </div>
                                  
                                  <div className="flex space-x-2">
                                    <Button 
                                      onClick={() => {
                                        setSelectedTransport(transport);
                                        fetchTransportCargoList(transport.id);
                                        fetchAvailableCargoForTransport();
                                        setTransportManagementModal(true);
                                      }}
                                      className="flex-1"
                                      variant="outline"
                                    >
                                      <Truck className="mr-1 h-3 w-3" />
                                      Управление
                                    </Button>
                                    
                                    <Button 
                                      onClick={() => openTransportVisualization(transport)}
                                      variant="outline"
                                      size="sm"
                                      title="Схема загрузки транспорта"
                                    >
                                      <Grid3X3 className="h-3 w-3" />
                                    </Button>

                                    {user?.role === 'admin' && (
                                      <Button 
                                        onClick={() => handleDeleteTransport(transport.id)}
                                        variant="outline"
                                        size="sm"
                                        className="text-red-600 border-red-300 hover:bg-red-50"
                                        title="Удалить транспорт"
                                      >
                                        <Trash2 className="h-3 w-3" />
                                      </Button>
                                    )}
                                  </div>
                                </div>
                              </Card>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* В пути */}
                  {activeTab === 'logistics-in-transit' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <Clock className="mr-2 h-5 w-5" />
                          Транспорт в пути ({transports.filter(t => t.status === 'in_transit').length})
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {transports.filter(transport => transport.status === 'in_transit').length === 0 ? (
                            <div className="text-center py-8">
                              <Clock className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">Нет транспорта в пути</p>
                            </div>
                          ) : (
                            transports.filter(transport => transport.status === 'in_transit').map((transport) => (
                              <Card key={transport.id} className="p-4">
                                <div className="flex justify-between items-start">
                                  <div className="space-y-2 flex-1">
                                    <h3 className="font-semibold text-lg">{transport.transport_number}</h3>
                                    <p className="text-sm text-gray-600"><strong>Водитель:</strong> {transport.driver_name}</p>
                                    <p className="text-sm text-gray-600"><strong>Направление:</strong> {transport.direction}</p>
                                    <p className="text-sm text-gray-600"><strong>Груз:</strong> {transport.current_load_kg} кг ({transport.cargo_list.length} мест)</p>
                                    <p className="text-sm text-gray-600"><strong>Отправлен:</strong> {new Date(transport.dispatched_at).toLocaleDateString('ru-RU')} {new Date(transport.dispatched_at).toLocaleTimeString('ru-RU')}</p>
                                  </div>
                                  <div className="flex flex-col items-end space-y-2">
                                    <Badge className="bg-yellow-100 text-yellow-800">В пути</Badge>
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleMarkTransportArrived(transport.id)}
                                      className="text-green-600 hover:text-green-700"
                                    >
                                      <MapPin className="mr-1 h-3 w-3" />
                                      Прибыл
                                    </Button>
                                  </div>
                                </div>
                              </Card>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* На место назначения */}
                  {activeTab === 'logistics-arrived' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <MapPin className="mr-2 h-5 w-5" />
                          Прибывшие транспорты для размещения ({arrivedTransports.length})
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {arrivedTransports.length === 0 ? (
                            <div className="text-center py-8">
                              <MapPin className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">Нет прибывших транспортов для размещения</p>
                            </div>
                          ) : (
                            arrivedTransports.map((transport) => (
                              <Card key={transport.id} className="p-4 border-green-200">
                                <div className="flex justify-between items-start">
                                  <div className="space-y-2 flex-1">
                                    <h3 className="font-semibold text-lg text-green-800">{transport.transport_number}</h3>
                                    <p className="text-sm text-gray-600"><strong>Водитель:</strong> {transport.driver_name}</p>
                                    <p className="text-sm text-gray-600"><strong>Направление:</strong> {transport.direction}</p>
                                    <p className="text-sm text-gray-600"><strong>Груз:</strong> {transport.current_load_kg} кг ({transport.cargo_count} мест)</p>
                                    <p className="text-sm text-gray-600"><strong>Прибыл:</strong> {new Date(transport.arrived_at).toLocaleDateString('ru-RU')} {new Date(transport.arrived_at).toLocaleTimeString('ru-RU')}</p>
                                  </div>
                                  <div className="flex flex-col items-end space-y-2">
                                    <Badge className="bg-green-100 text-green-800">Прибыл</Badge>
                                    <Button
                                      size="sm"
                                      onClick={() => {
                                        setSelectedArrivedTransport(transport);
                                        fetchArrivedTransportCargo(transport.id);
                                        setArrivedTransportModal(true);
                                      }}
                                      className="bg-blue-600 hover:bg-blue-700 text-white"
                                    >
                                      <Package className="mr-1 h-3 w-3" />
                                      Разместить грузы
                                    </Button>
                                  </div>
                                </div>
                              </Card>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* История транспортировки */}
                  {activeTab === 'logistics-history' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center">
                          <FileText className="mr-2 h-5 w-5" />
                          История транспортировки
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {transports.filter(transport => transport.status === 'completed').map((transport) => (
                            <Card key={transport.id} className="p-4 bg-gray-50">
                              <div className="space-y-2">
                                <div className="flex justify-between items-start">
                                  <h3 className="font-semibold text-lg">{transport.transport_number}</h3>
                                  <Badge variant="outline">Завершено</Badge>
                                </div>
                                <p className="text-sm text-gray-600"><strong>Водитель:</strong> {transport.driver_name}</p>
                                <p className="text-sm text-gray-600"><strong>Направление:</strong> {transport.direction}</p>
                                <p className="text-sm text-gray-600"><strong>Груз:</strong> {transport.current_load_kg} кг ({transport.cargo_list.length} мест)</p>
                                <p className="text-sm text-gray-600"><strong>Завершен:</strong> {transport.completed_at && new Date(transport.completed_at).toLocaleDateString('ru-RU')} {transport.completed_at && new Date(transport.completed_at).toLocaleTimeString('ru-RU')}</p>
                              </div>
                            </Card>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* Уведомления */}
              {activeSection === 'notifications-management' && (
                <div className="space-y-6">
                  {/* НОВЫЕ ЗАКАЗЫ ОТ КЛИЕНТОВ */}
                  {(activeTab === 'notifications-client-orders' || !activeTab || activeTab === 'notifications-management') && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <ShoppingCart className="mr-2 h-5 w-5 text-orange-600" />
                            Новые заказы от клиентов ({newOrdersCount})
                          </div>
                          <div className="space-x-2">
                            <Button onClick={fetchNewOrdersCount} variant="outline" size="sm">
                              <RefreshCw className="w-4 h-4 mr-1" />
                              Обновить
                            </Button>
                          </div>
                        </CardTitle>
                        <CardDescription>
                          Заказы от клиентов через форму онлайн-заказа с возможностью редактирования
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {pendingOrders.length === 0 ? (
                            <div className="text-center py-8">
                              <ShoppingCart className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">Новых заказов от клиентов нет</p>
                            </div>
                          ) : (
                            pendingOrders.map((order) => (
                              <div key={order.id} className="border rounded-lg p-6 bg-orange-50 hover:bg-orange-100 transition-colors">
                                <div className="flex justify-between items-start mb-4">
                                  <div>
                                    <h3 className="text-lg font-semibold text-orange-800">
                                      Заказ №{order.request_number}
                                    </h3>
                                    <p className="text-sm text-gray-600">
                                      Создан: {new Date(order.created_at).toLocaleDateString('ru-RU')} {new Date(order.created_at).toLocaleTimeString('ru-RU')}
                                    </p>
                                  </div>
                                  <div className="flex flex-col items-end space-y-2">
                                    <Badge variant="destructive" className="bg-orange-100 text-orange-800 border-orange-200">
                                      Новый заказ
                                    </Badge>
                                    {order.admin_notes && (
                                      <Badge variant="outline" className="text-blue-600 border-blue-200">
                                        Есть заметки
                                      </Badge>
                                    )}
                                  </div>
                                </div>
                                
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                                  <div className="space-y-3">
                                    <h4 className="font-medium text-gray-900 flex items-center">
                                      <User className="w-4 h-4 mr-1" />
                                      Отправитель
                                    </h4>
                                    <div className="text-sm text-gray-600 space-y-1 pl-5">
                                      <p><strong>ФИО:</strong> {order.sender_full_name}</p>
                                      <p><strong>Телефон:</strong> {order.sender_phone}</p>
                                      <p><strong>Адрес забора:</strong> {order.pickup_address}</p>
                                    </div>
                                  </div>
                                  
                                  <div className="space-y-3">
                                    <h4 className="font-medium text-gray-900 flex items-center">
                                      <MapPin className="w-4 h-4 mr-1" />
                                      Получатель
                                    </h4>
                                    <div className="text-sm text-gray-600 space-y-1 pl-5">
                                      <p><strong>ФИО:</strong> {order.recipient_full_name}</p>
                                      <p><strong>Телефон:</strong> {order.recipient_phone}</p>
                                      <p><strong>Адрес доставки:</strong> {order.recipient_address}</p>
                                    </div>
                                  </div>
                                </div>

                                <div className="mb-4 p-4 bg-white/50 rounded-lg">
                                  <h4 className="font-medium text-gray-900 mb-2 flex items-center">
                                    <Package className="w-4 h-4 mr-1" />
                                    Информация о грузе
                                  </h4>
                                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 text-sm text-gray-600">
                                    <div>
                                      <p><strong>Название:</strong> {order.cargo_name}</p>
                                      <p><strong>Описание:</strong> {order.description}</p>
                                    </div>
                                    <div>
                                      <p><strong>Вес:</strong> {order.weight} кг</p>
                                      <p><strong>Стоимость:</strong> {order.declared_value} ₽</p>
                                    </div>
                                    <div>
                                      <p><strong>Маршрут:</strong> {order.route === 'moscow_to_tajikistan' ? 'Москва → Таджикистан' : 'Таджикистан → Москва'}</p>
                                    </div>
                                  </div>
                                </div>

                                {order.admin_notes && (
                                  <div className="mb-4 p-3 bg-blue-50 border-l-4 border-blue-400 rounded">
                                    <p className="text-sm text-blue-800">
                                      <strong>Заметки администратора:</strong> {order.admin_notes}
                                    </p>
                                  </div>
                                )}

                                <div className="flex flex-wrap gap-2 pt-4 border-t border-orange-200">
                                  <Button 
                                    onClick={() => handleOrderDetailsView(order)}
                                    variant="outline" 
                                    size="sm"
                                    className="flex items-center"
                                  >
                                    <Eye className="w-4 h-4 mr-1" />
                                    Просмотреть
                                  </Button>
                                  <Button 
                                    onClick={() => handleOrderEdit(order)}
                                    variant="outline" 
                                    size="sm"
                                    className="flex items-center text-blue-600 border-blue-200 hover:bg-blue-50"
                                  >
                                    <Edit className="w-4 h-4 mr-1" />
                                    Редактировать
                                  </Button>
                                  <Button 
                                    onClick={() => handleAcceptOrder(order.id)}
                                    size="sm"
                                    className="flex items-center bg-green-600 hover:bg-green-700"
                                  >
                                    <CheckCircle className="w-4 h-4 mr-1" />
                                    Принять заказ
                                  </Button>
                                  <Button 
                                    onClick={() => handleRejectOrder(order.id, 'Заказ отклонен администратором')}
                                    variant="destructive" 
                                    size="sm"
                                    className="flex items-center"
                                  >
                                    <XCircle className="w-4 h-4 mr-1" />
                                    Отклонить
                                  </Button>
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* Новые заявки */}
                  {(activeTab === 'notifications-requests' || !activeTab || activeTab === 'notifications-management') && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Bell className="mr-2 h-5 w-5" />
                            Новые заявки ({cargoRequests.length})
                          </div>
                          <div className="flex space-x-2">
                            {selectedRequests.length > 0 && (
                              <Button
                                onClick={handleBulkDeleteRequests}
                                variant="outline"
                                className="text-red-600 border-red-300 hover:bg-red-50"
                              >
                                <Trash2 className="mr-2 h-4 w-4" />
                                Удалить выбранные ({selectedRequests.length})
                              </Button>
                            )}
                            <Button onClick={fetchCargoRequests}>
                              Обновить
                            </Button>
                          </div>
                        </CardTitle>
                        <CardDescription>
                          Заявки от пользователей на отправку грузов
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        {cargoRequests.length > 0 && (
                          <div className="flex items-center space-x-2 mb-4 p-3 bg-gray-50 rounded-lg">
                            <input
                              type="checkbox"
                              checked={selectAllRequests}
                              onChange={(e) => handleSelectAllRequests(e.target.checked, cargoRequests)}
                              className="rounded border-gray-300"
                            />
                            <label className="text-sm font-medium text-gray-700">
                              Выбрать все ({cargoRequests.length})
                            </label>
                          </div>
                        )}
                        <div className="space-y-4">
                          {cargoRequests.length === 0 ? (
                            <div className="text-center py-8">
                              <Bell className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">Новых заявок нет</p>
                            </div>
                          ) : (
                            cargoRequests.map((request) => (
                              <div key={request.id} className="border rounded-lg p-6 bg-blue-50">
                                <div className="flex justify-between items-start mb-4">
                                  <div className="flex items-start space-x-3">
                                    <input
                                      type="checkbox"
                                      checked={selectedRequests.includes(request.id)}
                                      onChange={(e) => handleRequestSelect(request.id, e.target.checked)}
                                      className="mt-1 rounded border-gray-300"
                                    />
                                    <div>
                                      <h3 className="text-lg font-semibold text-blue-800">{request.request_number}</h3>
                                      <p className="text-sm text-gray-600">Подана: {new Date(request.created_at).toLocaleDateString('ru-RU')} {new Date(request.created_at).toLocaleTimeString('ru-RU')}</p>
                                    </div>
                                  </div>
                                  <div className="flex items-center space-x-2">
                                    <Button
                                      size="sm"
                                      variant="outline"
                                      onClick={() => handleDeleteRequest(request.id)}
                                      className="text-red-600 border-red-300 hover:bg-red-50"
                                      title="Удалить заявку"
                                    >
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                    <Badge variant="secondary">Новая заявка</Badge>
                                  </div>
                                </div>
                                
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                  <div className="space-y-2">
                                    <h4 className="font-medium text-gray-900">Отправитель</h4>
                                    <div className="text-sm text-gray-600">
                                      <p><strong>ФИО:</strong> {request.sender_full_name}</p>
                                      <p><strong>Телефон:</strong> {request.sender_phone}</p>
                                      <p><strong>Адрес отправки:</strong> {request.pickup_address}</p>
                                    </div>
                                  </div>
                                  
                                  <div className="space-y-2">
                                    <h4 className="font-medium text-gray-900">Получатель</h4>
                                    <div className="text-sm text-gray-600">
                                      <p><strong>ФИО:</strong> {request.recipient_full_name}</p>
                                      <p><strong>Телефон:</strong> {request.recipient_phone}</p>
                                      <p><strong>Адрес получения:</strong> {request.recipient_address}</p>
                                    </div>
                                  </div>
                                </div>

                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
                                  <div>
                                    <h4 className="font-medium text-gray-900">Информация о грузе</h4>
                                    <div className="text-sm text-gray-600">
                                      <p><strong>Название:</strong> {request.cargo_name}</p>
                                      <p><strong>Вес:</strong> {request.weight} кг</p>
                                      <p><strong>Стоимость:</strong> {request.declared_value} ₽</p>
                                    </div>
                                  </div>
                                  
                                  <div>
                                    <h4 className="font-medium text-gray-900">Маршрут</h4>
                                    <div className="text-sm text-gray-600">
                                      <p>{request.route === 'moscow_to_tajikistan' ? 'Москва → Таджикистан' : 'Таджикистан → Москва'}</p>
                                    </div>
                                  </div>
                                  
                                  <div>
                                    <h4 className="font-medium text-gray-900">Описание</h4>
                                    <div className="text-sm text-gray-600">
                                      <p>{request.description}</p>
                                    </div>
                                  </div>
                                </div>

                                <div className="flex space-x-3 pt-4 border-t">
                                  <Button
                                    onClick={() => handleAcceptRequest(request.id)}
                                    className="flex-1 bg-green-600 hover:bg-green-700"
                                  >
                                    <CheckCircle className="mr-2 h-4 w-4" />
                                    Принять заявку
                                  </Button>
                                  <Button
                                    variant="outline"
                                    onClick={() => {
                                      const reason = prompt('Причина отклонения (необязательно):');
                                      handleRejectRequest(request.id, reason || '');
                                    }}
                                    className="flex-1 text-red-600 border-red-300 hover:bg-red-50"
                                  >
                                    <X className="mr-2 h-4 w-4" />
                                    Отклонить
                                  </Button>
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* Системные уведомления */}
                  {activeTab === 'notifications-system' && (
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center">
                            <Bell className="mr-2 h-5 w-5" />
                            Системные уведомления ({notifications.length})
                          </div>
                          <Button onClick={fetchNotifications}>
                            Обновить
                          </Button>
                        </CardTitle>
                        <CardDescription>
                          Уведомления об изменениях статусов грузов и операциях
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {notifications.length === 0 ? (
                            <div className="text-center py-8">
                              <Bell className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                              <p className="text-gray-500">Системных уведомлений нет</p>
                            </div>
                          ) : (
                            notifications.map((notification) => (
                              <div
                                key={notification.id}
                                className={`border rounded-lg p-4 ${
                                  !notification.is_read ? 'bg-blue-50 border-blue-200' : 'bg-gray-50'
                                }`}
                              >
                                <div className="flex justify-between items-start">
                                  <div className="flex-1">
                                    <h4 className="font-semibold text-gray-900">{notification.title}</h4>
                                    <p className="text-sm text-gray-600 mt-1">{notification.message}</p>
                                    <div className="flex items-center mt-2 text-xs text-gray-500">
                                      <span>Тип: {
                                        notification.notification_type === 'request' ? 'Заявка' :
                                        notification.notification_type === 'cargo_status' ? 'Статус груза' :
                                        notification.notification_type === 'payment' ? 'Оплата' : 'Система'
                                      }</span>
                                      <span className="ml-4">
                                        {new Date(notification.created_at).toLocaleDateString('ru-RU')} {new Date(notification.created_at).toLocaleTimeString('ru-RU')}
                                      </span>
                                    </div>
                                  </div>
                                  {!notification.is_read && (
                                    <Badge variant="secondary" className="ml-2">Новое</Badge>
                                  )}
                                </div>
                              </div>
                            ))
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* НОВЫЕ СЕКЦИИ ДЛЯ КУРЬЕРА (ЭТАП 3) */}
              
              {/* УПРОЩЕННАЯ Главная страница курьера - ТОЛЬКО КНОПКИ */}
              {activeSection === 'courier-dashboard' && user?.role === 'courier' && (
                <div className="space-y-6 p-4 md:p-6">
                  {/* GPS Трекер - добавляем в начало дашборда */}
                  <CourierGPSTracker
                    courierTracking={courierTracking}
                    onStartTracking={startCourierTracking}
                    onStopTracking={stopCourierTracking}
                    onStatusChange={changeCourierStatus}
                  />
                  
                  <div className="flex flex-col md:flex-row md:justify-end md:items-center space-y-4 md:space-y-0">
                    <Button 
                      onClick={() => {
                        fetchCourierNewRequests();
                        fetchAcceptedRequests();
                        fetchPickedRequests();
                        fetchCancelledRequests();
                      }}
                      variant="outline"
                    >
                      <RefreshCw className="h-4 w-4 mr-2" />
                      Обновить данные
                    </Button>
                  </div>

                  {/* УЛУЧШЕННЫЙ Информационный контейнер с кнопками */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                    <Card className="hover:shadow-lg transition-shadow cursor-pointer" onClick={() => {
                      setActiveSection('courier-requests');
                      setActiveTab('courier-requests');
                    }}>
                      <CardContent className="p-4 text-center">
                        <div className="flex flex-col items-center space-y-2">
                          <div className="relative">
                            <Package className="h-8 w-8 text-blue-600" />
                            {courierRequests.length > 0 && (
                              <Badge className="absolute -top-2 -right-2 bg-red-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                                {courierRequests.length}
                              </Badge>
                            )}
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">Новые заявки</p>
                            <p className="text-xs text-gray-500">{courierRequests.length} заявок</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="hover:shadow-lg transition-shadow cursor-pointer" onClick={() => {
                      setActiveSection('courier-accepted');
                      setActiveTab('courier-accepted');
                    }}>
                      <CardContent className="p-4 text-center">
                        <div className="flex flex-col items-center space-y-2">
                          <div className="relative">
                            <CheckCircle className="h-8 w-8 text-green-600" />
                            {acceptedRequests.length > 0 && (
                              <Badge className="absolute -top-2 -right-2 bg-green-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                                {acceptedRequests.length}
                              </Badge>
                            )}
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">Принятые заявки</p>
                            <p className="text-xs text-gray-500">{acceptedRequests.length} заявок</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="hover:shadow-lg transition-shadow cursor-pointer" onClick={() => {
                      setActiveSection('courier-picked');
                      setActiveTab('courier-picked');
                    }}>
                      <CardContent className="p-4 text-center">
                        <div className="flex flex-col items-center space-y-2">
                          <div className="relative">
                            <Truck className="h-8 w-8 text-orange-600" />
                            {pickedRequests.length > 0 && (
                              <Badge className="absolute -top-2 -right-2 bg-orange-500 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                                {pickedRequests.length}
                              </Badge>
                            )}
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">К сдаче</p>
                            <p className="text-xs text-gray-500">{pickedRequests.length} грузов</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="hover:shadow-lg transition-shadow cursor-pointer" onClick={() => {
                      showAlert('Уведомления: У вас нет новых уведомлений', 'info');
                    }}>
                      <CardContent className="p-4 text-center">
                        <div className="flex flex-col items-center space-y-2">
                          <div className="relative">
                            <Bell className="h-8 w-8 text-purple-600" />
                            <Badge className="absolute -top-2 -right-2 bg-gray-400 text-white text-xs min-w-[20px] h-5 flex items-center justify-center rounded-full">
                              0
                            </Badge>
                          </div>
                          <div>
                            <p className="text-sm font-medium text-gray-900">Уведомления</p>
                            <p className="text-xs text-gray-500">Нет новых</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
              )}

              {/* Новые заявки курьера */}
              {activeSection === 'courier-requests' && user?.role === 'courier' && (
                <div className="space-y-6">
                  {/* Убрали кнопку обновления */}
                  
                  {/* ОБНОВЛЕННЫЙ БЛОК: Адреса заявок с ограничением отображения */}
                  {courierRequests.length > 0 && (
                    <Card className="border-blue-200 bg-blue-50">
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="flex items-center text-blue-800">
                            <MapPin className="mr-2 h-5 w-5" />
                            Адреса заявок ({courierRequests.length})
                          </div>
                          {courierRequests.length > 2 && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setShowAllNewRequests(!showAllNewRequests)}
                              className="text-blue-700 border-blue-300 hover:bg-blue-100"
                            >
                              {showAllNewRequests ? 'Скрыть' : `Показать все адреса (${courierRequests.length})`}
                            </Button>
                          )}
                        </CardTitle>
                        <CardDescription className="text-blue-600">
                          Нажмите на адрес, чтобы открыть в Яндекс Картах.
                          {!showAllNewRequests && courierRequests.length > 2 && 
                            ` Показано ${Math.min(2, courierRequests.length)} из ${courierRequests.length} адресов.`
                          }
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                          {(showAllNewRequests ? courierRequests : courierRequests.slice(0, 2)).map((request, index) => (
                            <div 
                              key={request.id}
                              className="bg-white p-3 rounded-lg border border-blue-200 hover:shadow-md transition-shadow cursor-pointer"
                              onClick={() => {
                                const address = encodeURIComponent(request.pickup_address);
                                const yandexMapsUrl = `https://yandex.ru/maps/?text=${address}&mode=search`;
                                window.open(yandexMapsUrl, '_blank');
                              }}
                            >
                              <div className="flex items-start space-x-3">
                                <div className="flex-shrink-0">
                                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                    <span className="text-sm font-semibold text-blue-600">{index + 1}</span>
                                  </div>
                                </div>
                                <div className="flex-1 min-w-0">
                                  <p className="text-sm font-medium text-gray-900 truncate">
                                    {request.sender_full_name}
                                  </p>
                                  <p className="text-xs text-blue-600 font-medium">
                                    №{request.request_number || request.id.slice(0, 6)}
                                  </p>
                                  <p className="text-xs text-gray-600 mt-1 leading-tight">
                                    {request.pickup_address}
                                  </p>
                                  <div className="flex items-center mt-2 space-x-2">
                                    <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                      {request.pickup_time_from} - {request.pickup_time_to}
                                    </span>
                                  </div>
                                </div>
                                <div className="flex-shrink-0">
                                  <MapPin className="h-4 w-4 text-blue-500" />
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                        
                        {/* Кнопка "Показать все на карте" */}
                        <div className="mt-4 pt-4 border-t border-blue-200 space-y-2">
                          <Button
                            onClick={() => setIsMapOpen(!isMapOpen)}
                            variant={isMapOpen ? "default" : "outline"}
                            className={`w-full ${isMapOpen 
                              ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                              : 'border-blue-300 text-blue-700 hover:bg-blue-100'
                            }`}
                          >
                            <MapPin className="mr-2 h-4 w-4" />
                            {isMapOpen ? 'Скрыть интерактивную карту' : 'Показать интерактивную карту'}
                          </Button>
                          
                          <Button
                            onClick={() => {
                              const allAddresses = courierRequests.map(req => req.pickup_address).join(' | ');
                              const encodedAddresses = encodeURIComponent(allAddresses);
                              const yandexMapsUrl = `https://yandex.ru/maps/?text=${encodedAddresses}&mode=search`;
                              window.open(yandexMapsUrl, '_blank');
                            }}
                            variant="outline"
                            className="w-full border-blue-300 text-blue-700 hover:bg-blue-100"
                          >
                            <MapPin className="mr-2 h-4 w-4" />
                            Открыть все адреса в Яндекс.Картах
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  )}
                  
                  {/* Интерактивная карта Яндекс */}
                  <YandexMap 
                    addresses={courierRequests}
                    isOpen={isMapOpen}
                    onToggle={() => setIsMapOpen(!isMapOpen)}
                  />

                  {courierRequests.length > 0 ? (
                    <div className="space-y-4">
                      {/* Кнопка для показа всех карточек */}
                      {courierRequests.length > 6 && (
                        <div className="text-center">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setShowAllNewRequests(!showAllNewRequests)}
                            className="text-blue-700 border-blue-300 hover:bg-blue-100"
                          >
                            {showAllNewRequests ? 'Показать только 6 заявок' : `Показать все заявки (${courierRequests.length})`}
                          </Button>
                          {!showAllNewRequests && (
                            <p className="text-sm text-gray-600 mt-2">
                              Показано 6 из {courierRequests.length} заявок
                            </p>
                          )}
                        </div>
                      )}
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {(showAllNewRequests ? courierRequests : courierRequests.slice(0, 6)).map((request) => (
                        <Card key={request.id} className="relative">
                          <CardHeader>
                            <div className="flex items-start justify-between">
                              <div>
                                <CardTitle className="text-lg">{request.sender_full_name}</CardTitle>
                                <CardDescription>{request.sender_phone}</CardDescription>
                              </div>
                              <div className="flex flex-col items-end space-y-1">
                                {/* Индикатор типа заявки */}
                                <Badge variant="outline" className={
                                  request.request_type === 'pickup' ? 'bg-orange-50 text-orange-700 border-orange-200' : 'bg-blue-50 text-blue-700 border-blue-200'
                                }>
                                  {request.request_type === 'pickup' ? '📦 Забор груза' : '🚚 Доставка'}
                                </Badge>
                                
                                {/* Статус заявки */}
                                <Badge variant={
                                  request.request_status === 'pending' ? 'default' :
                                  request.request_status === 'assigned' ? 'secondary' :
                                  request.request_status === 'accepted' ? 'outline' : 'destructive'
                                }>
                                  {request.request_status === 'pending' ? 'Новая' :
                                   request.request_status === 'assigned' ? 'Назначена' :
                                   request.request_status === 'accepted' ? 'Принята' : 'Отклонена'}
                                </Badge>
                              </div>
                            </div>
                          </CardHeader>
                          
                          <CardContent className="space-y-3">
                            {/* Номер заявки */}
                            <div>
                              <Label className="text-sm font-medium text-gray-500">№ Заявки</Label>
                              <p className="text-sm font-bold text-blue-600">#{request.request_number || request.id}</p>
                            </div>
                            
                            <div>
                              <Label className="text-sm font-medium text-gray-500">
                                {request.request_type === 'pickup' ? 'Наименование груза' : 'Груз'}
                              </Label>
                              <p className="text-sm">
                                {request.request_type === 'pickup' 
                                  ? (request.destination || request.route || 'Не указано')
                                  : (request.cargo_name || 'Не указано')
                                }
                              </p>
                            </div>
                            
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Адрес забора</Label>
                              <p className="text-sm text-gray-700">{request.pickup_address}</p>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Дата</Label>
                                <p className="text-sm">
                                  {request.pickup_date 
                                    ? new Date(request.pickup_date).toLocaleDateString('ru-RU')
                                    : 'Не указана'
                                  }
                                </p>
                              </div>
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Время</Label>
                                <p className="text-sm">
                                  {request.pickup_time_from && request.pickup_time_to 
                                    ? `${request.pickup_time_from} - ${request.pickup_time_to}`
                                    : (request.pickup_time || 'Не указано')
                                  }
                                </p>
                              </div>
                            </div>
                            
                            {/* Статус оплаты */}
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Статус оплаты</Label>
                              <Badge variant={request.payment_status === 'paid' ? 'default' : 'secondary'} className="ml-2">
                                {request.payment_status === 'paid' ? 'Оплачено' : 
                                 request.payment_status === 'not_paid' ? 'Не оплачено' : 
                                 request.payment_method === 'cash_on_delivery' ? 'При получении' : 'Не оплачено'}
                              </Badge>
                            </div>

                            {request.courier_fee && (
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Оплата</Label>
                                <p className="text-sm font-medium text-green-600">{request.courier_fee} ₽</p>
                              </div>
                            )}
                          </CardContent>

                          <div className="px-6 pb-6">
                            <div className="flex flex-col space-y-2">
                              {(request.request_status === 'assigned' || request.request_status === 'pending') && (
                                <>
                                  <Button 
                                    onClick={() => handleAcceptCourierRequest(request.id)}
                                    className="w-full bg-green-600 hover:bg-green-700"
                                  >
                                    <CheckCircle className="mr-2 h-4 w-4" />
                                    Принять заявку
                                  </Button>
                                  
                                  <Button 
                                    onClick={() => handleContactSender(request)}
                                    variant="outline"
                                    className="w-full bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200"
                                  >
                                    <Phone className="mr-2 h-4 w-4" />
                                    Связаться с отправителем
                                  </Button>
                                  
                                  <Button 
                                    variant="destructive" 
                                    size="sm"
                                    onClick={() => handleCancelCourierRequest(request.id)}
                                  >
                                    <XCircle className="mr-2 h-4 w-4" />
                                    Отменить заявку
                                  </Button>
                                </>
                              )}

                              {request.request_status === 'accepted' && (
                                <div className="text-center text-sm text-green-600 py-2 font-medium">
                                  ✅ Заявка принята
                                </div>
                              )}

                              {request.request_status === 'cancelled' && (
                                <div className="text-center text-sm text-red-600 py-2 font-medium">
                                  ❌ Заявка отменена
                                </div>
                              )}
                            </div>
                          </div>
                        </Card>
                        ))}
                      </div>
                    </div>
                  ) : (
                    <Card>
                      <CardContent>
                        <h3 className="text-lg font-medium text-gray-900 mb-2">Новых заявок нет</h3>
                        <p className="text-gray-500 text-center">
                          Пока нет новых заявок на забор груза. Они появятся здесь, когда операторы создадут заявки.
                        </p>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* НОВАЯ СЕКЦИЯ: Принятые грузы курьера */}
              {activeSection === 'courier-accepted' && user?.role === 'courier' && (
                <div className="space-y-6 p-4 md:p-6">
                  <div className="flex items-center justify-between">
                    <h2 className="text-2xl font-bold">Принятые заявки</h2>
                    <Badge variant="secondary" className="bg-green-100 text-green-800">
                      {acceptedRequests.length} заявок
                    </Badge>
                  </div>

                  {/* Карта адресов принятых заявок с ограничением */}
                  {acceptedRequests.length > 0 && (
                    <Card className="mb-6">
                      <CardHeader>
                        <CardTitle className="flex items-center justify-between">
                          <div className="text-lg text-green-700">
                            📍 Адреса принятых заявок ({acceptedRequests.length})
                          </div>
                          {acceptedRequests.length > 2 && (
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setShowAllAcceptedRequests(!showAllAcceptedRequests)}
                              className="text-green-700 border-green-300 hover:bg-green-100"
                            >
                              {showAllAcceptedRequests ? 'Скрыть' : `Показать все адреса (${acceptedRequests.length})`}
                            </Button>
                          )}
                        </CardTitle>
                        <CardDescription className="text-green-600">
                          Нажмите на адрес, чтобы открыть в Яндекс Картах.
                          {!showAllAcceptedRequests && acceptedRequests.length > 2 && 
                            ` Показано ${Math.min(2, acceptedRequests.length)} из ${acceptedRequests.length} адресов.`
                          }
                        </CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                          {(showAllAcceptedRequests ? acceptedRequests : acceptedRequests.slice(0, 2)).map((request, index) => (
                            <div 
                              key={request.id}
                              className="bg-white p-3 rounded-lg border border-green-200 hover:shadow-md transition-shadow cursor-pointer"
                              onClick={() => {
                                const address = encodeURIComponent(request.pickup_address);
                                const yandexMapsUrl = `https://yandex.ru/maps/?text=${address}&mode=search`;
                                window.open(yandexMapsUrl, '_blank');
                              }}
                            >
                              <div className="flex items-start space-x-3">
                                <div className="flex-shrink-0">
                                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                                    <span className="text-sm font-semibold text-green-600">{index + 1}</span>
                                  </div>
                                </div>
                                <div className="flex-1 min-w-0">
                                  <p className="text-sm font-medium text-gray-900 truncate">
                                    {request.sender_full_name}
                                  </p>
                                  <p className="text-xs text-green-600 font-medium">
                                    №{request.request_number || request.id.slice(0, 6)}
                                  </p>
                                  <p className="text-xs text-gray-600 mt-1 leading-tight">
                                    {request.pickup_address}
                                  </p>
                                  <div className="flex items-center mt-2 space-x-2">
                                    <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                                      Принято
                                    </span>
                                  </div>
                                </div>
                                <div className="flex-shrink-0">
                                  <MapPin className="h-4 w-4 text-green-500" />
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                        
                        {/* Кнопки для карты принятых заявок */}
                        <div className="mt-4 pt-4 border-t border-green-200 space-y-2">
                          <Button
                            onClick={() => setIsAcceptedMapOpen(!isAcceptedMapOpen)}
                            variant={isAcceptedMapOpen ? "default" : "outline"}
                            className={`w-full ${isAcceptedMapOpen 
                              ? 'bg-green-600 hover:bg-green-700 text-white' 
                              : 'border-green-300 text-green-700 hover:bg-green-100'
                            }`}
                          >
                            <MapPin className="mr-2 h-4 w-4" />
                            {isAcceptedMapOpen ? 'Скрыть интерактивную карту' : 'Показать интерактивную карту'}
                          </Button>
                          
                          <Button
                            onClick={() => {
                              const allAddresses = acceptedRequests.map(req => req.pickup_address).join(' | ');
                              const encodedAddresses = encodeURIComponent(allAddresses);
                              const yandexMapsUrl = `https://yandex.ru/maps/?text=${encodedAddresses}&mode=search`;
                              window.open(yandexMapsUrl, '_blank');
                            }}
                            variant="outline"
                            className="w-full border-green-300 text-green-700 hover:bg-green-100"
                          >
                            <ExternalLink className="mr-2 h-4 w-4" />
                            Открыть все адреса в Яндекс.Картах
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {/* Интерактивная карта для принятых заявок */}
                  {acceptedRequests.length > 0 && (
                    <YandexMap
                      addresses={acceptedRequests}
                      isOpen={isAcceptedMapOpen}
                      onToggle={() => setIsAcceptedMapOpen(!isAcceptedMapOpen)}
                    />
                  )}

                  {acceptedRequests.length > 0 ? (
                    <div className="space-y-4">
                      {/* Кнопка для показа всех карточек принятых заявок */}
                      {acceptedRequests.length > 6 && (
                        <div className="text-center">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setShowAllAcceptedRequests(!showAllAcceptedRequests)}
                            className="text-green-700 border-green-300 hover:bg-green-100"
                          >
                            {showAllAcceptedRequests ? 'Показать только 6 заявок' : `Показать все заявки (${acceptedRequests.length})`}
                          </Button>
                          {!showAllAcceptedRequests && (
                            <p className="text-sm text-gray-600 mt-2">
                              Показано 6 из {acceptedRequests.length} заявок
                            </p>
                          )}
                        </div>
                      )}
                      
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {(showAllAcceptedRequests ? acceptedRequests : acceptedRequests.slice(0, 6)).map((request) => (
                        <Card key={request.id} className="relative">
                          <CardHeader>
                            <div className="flex items-start justify-between">
                              <div>
                                <CardTitle className="text-lg">{request.sender_full_name}</CardTitle>
                                <CardDescription>{request.sender_phone}</CardDescription>
                              </div>
                              <Badge variant="secondary" className="bg-blue-100 text-blue-800">
                                Готов к забору
                              </Badge>
                            </div>
                          </CardHeader>
                          
                          <CardContent className="space-y-3">
                            {/* Номер заявки */}
                            <div>
                              <Label className="text-sm font-medium text-gray-500">№ Заявки</Label>
                              <p className="text-sm font-bold text-blue-600">#{request.request_number || request.id}</p>
                            </div>
                            
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Груз</Label>
                              <p className="text-sm font-medium">{request.cargo_name}</p>
                            </div>
                            
                            {/* Информация об отправителе */}
                            <div className="bg-gray-50 p-2 rounded">
                              <Label className="text-xs font-medium text-gray-500">Отправитель</Label>
                              <p className="text-xs font-medium">{request.sender_full_name}</p>
                              <p className="text-xs text-gray-600">{request.sender_phone}</p>
                            </div>
                            
                            {/* Получатель если есть */}
                            {(request.recipient_full_name || request.recipient_phone) && (
                              <div className="bg-blue-50 p-2 rounded">
                                <Label className="text-xs font-medium text-blue-600">Получатель</Label>
                                <p className="text-xs font-medium">{request.recipient_full_name || 'Не указан'}</p>
                                <p className="text-xs text-blue-600">{request.recipient_phone || 'Не указан'}</p>
                              </div>
                            )}
                            
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Адрес забора</Label>
                              <p className="text-sm text-gray-700">{request.pickup_address}</p>
                            </div>
                            
                            {/* Информация о грузах в таблице если есть несколько */}
                            {request.cargo_items && Array.isArray(request.cargo_items) && request.cargo_items.length > 1 ? (
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Грузы ({request.cargo_items.length})</Label>
                                <div className="mt-1 text-xs space-y-1 max-h-20 overflow-y-auto">
                                  {request.cargo_items.map((item, index) => (
                                    <div key={index} className="flex justify-between bg-gray-50 p-1 rounded">
                                      <span>{item.name}</span>
                                      <span>{item.weight}кг × {item.price_per_kg}₽ = {item.total_price}₽</span>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            ) : (
                              /* Отображение одного груза */
                              request.total_weight && (
                                <div>
                                  <Label className="text-sm font-medium text-gray-500">Вес / Стоимость</Label>
                                  <p className="text-sm">{request.total_weight}кг {request.total_value && `/ ${request.total_value}₽`}</p>
                                </div>
                              )
                            )}
                            
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Дата</Label>
                                <p className="text-sm">
                                  {request.pickup_date 
                                    ? new Date(request.pickup_date).toLocaleDateString('ru-RU')
                                    : 'Не указана'
                                  }
                                </p>
                              </div>
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Время</Label>
                                <p className="text-sm">
                                  {request.pickup_time_from && request.pickup_time_to 
                                    ? `${request.pickup_time_from} - ${request.pickup_time_to}`
                                    : (request.pickup_time || 'Не указано')
                                  }
                                </p>
                              </div>
                            </div>

                            {request.courier_fee && (
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Оплата курьеру</Label>
                                <p className="text-sm font-medium text-green-600">{request.courier_fee} ₽</p>
                              </div>
                            )}
                            
                            {/* Статус оплаты */}
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Статус оплаты</Label>
                              <Badge variant={request.payment_status === 'paid' ? 'default' : 'secondary'} className="ml-2">
                                {request.payment_status === 'paid' ? 'Оплачено' : 
                                 request.payment_status === 'not_paid' ? 'Не оплачено' : 
                                 request.payment_method === 'cash_on_delivery' ? 'При получении' : 'Не оплачено'}
                              </Badge>
                            </div>

                            {/* История принятия заявки */}
                            <div className="bg-green-50 p-3 rounded-lg">
                              <Label className="text-sm font-medium text-green-700">История операций</Label>
                              <div className="mt-1 text-xs text-green-600">
                                ✅ {new Date(request.updated_at).toLocaleString('ru-RU')}: Заявка принята курьером
                              </div>
                            </div>
                          </CardContent>

                          <div className="px-6 pb-6 space-y-3">
                            <Button 
                              onClick={() => handleViewRequest(request)}
                              variant="outline"
                              className="w-full"
                              size="lg"
                            >
                              <Eye className="mr-2 h-4 w-4" />
                              Просмотр заявки
                            </Button>
                            
                            <Button 
                              onClick={() => handleContactSender(request)}
                              variant="outline"
                              className="w-full bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200"
                              size="lg"
                            >
                              <Phone className="mr-2 h-4 w-4" />
                              Связаться с отправителем
                            </Button>
                            
                            <Button 
                              onClick={() => handlePickupCargo(request.id)}
                              className="w-full bg-blue-600 hover:bg-blue-700"
                              size="lg"
                            >
                              <Truck className="mr-2 h-4 w-4" />
                              Забрать груз
                            </Button>
                          </div>
                        </Card>
                      ))}
                      </div>
                    </div>
                  ) : (
                    <Card>
                      <CardContent className="flex flex-col items-center justify-center py-12">
                        <CheckCircle className="h-12 w-12 text-gray-400 mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">Нет принятых заявок</h3>
                        <p className="text-gray-500 text-center">
                          Здесь будут отображаться заявки, которые вы приняли и готовы забрать.
                        </p>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* НОВАЯ СЕКЦИЯ: Забранные грузы курьера */}
              {activeSection === 'courier-picked' && user?.role === 'courier' && (
                <div className="space-y-6 p-4 md:p-6">
                  {/* Убрали кнопку обновления */}

                  {pickedRequests.length > 0 ? (
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {pickedRequests.map((request) => (
                        <Card key={request.id} className="relative border-orange-200 bg-orange-50">
                          <CardHeader>
                            <div className="flex items-start justify-between">
                              <div>
                                <CardTitle className="text-lg">{request.sender_full_name}</CardTitle>
                                <CardDescription>{request.sender_phone}</CardDescription>
                              </div>
                              <Badge variant="secondary" className="bg-orange-100 text-orange-800">
                                У курьера
                              </Badge>
                            </div>
                          </CardHeader>
                          
                          <CardContent className="space-y-3">
                            {/* Номер заявки */}
                            <div>
                              <Label className="text-sm font-medium text-gray-500">№ Заявки</Label>
                              <p className="text-sm font-bold text-orange-600">#{request.request_number || request.id}</p>
                            </div>
                            
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Груз</Label>
                              <p className="text-sm font-medium">{request.cargo_name}</p>
                            </div>
                            
                            {/* Информация об отправителе и получателе */}
                            <div className="grid grid-cols-2 gap-2">
                              <div className="bg-gray-50 p-2 rounded">
                                <Label className="text-xs font-medium text-gray-500">Отправитель</Label>
                                <p className="text-xs font-medium">{request.sender_full_name}</p>
                                <p className="text-xs text-gray-600">{request.sender_phone}</p>
                              </div>
                              
                              {(request.recipient_full_name || request.recipient_phone) ? (
                                <div className="bg-blue-50 p-2 rounded">
                                  <Label className="text-xs font-medium text-blue-600">Получатель</Label>
                                  <p className="text-xs font-medium">{request.recipient_full_name || 'Не указан'}</p>
                                  <p className="text-xs text-blue-600">{request.recipient_phone || 'Не указан'}</p>
                                </div>
                              ) : (
                                <div className="bg-yellow-50 p-2 rounded">
                                  <Label className="text-xs font-medium text-yellow-600">Получатель</Label>
                                  <p className="text-xs text-yellow-600">Требуется заполнить</p>
                                </div>
                              )}
                            </div>
                            
                            {/* Адрес получателя */}
                            {request.recipient_address && (
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Адрес доставки</Label>
                                <p className="text-sm text-gray-700">{request.recipient_address}</p>
                              </div>
                            )}
                            
                            {/* Информация о грузах */}
                            {request.cargo_items && Array.isArray(request.cargo_items) && request.cargo_items.length > 0 ? (
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Детали груза</Label>
                                <div className="mt-1 text-xs space-y-1 max-h-16 overflow-y-auto">
                                  {request.cargo_items.map((item, index) => (
                                    <div key={index} className="flex justify-between bg-orange-50 p-1 rounded">
                                      <span>{item.name}</span>
                                      <span className="font-medium">{item.weight}кг / {item.total_price}₽</span>
                                    </div>
                                  ))}
                                </div>
                                <div className="text-xs font-medium text-orange-600 mt-1">
                                  Итого: {request.cargo_items.reduce((sum, item) => sum + (parseFloat(item.weight) || 0), 0)}кг / 
                                  {request.cargo_items.reduce((sum, item) => sum + (parseFloat(item.total_price) || 0), 0)}₽
                                </div>
                              </div>
                            ) : (
                              request.total_weight && (
                                <div>
                                  <Label className="text-sm font-medium text-gray-500">Вес / Стоимость</Label>
                                  <p className="text-sm">{request.total_weight}кг {request.total_value && `/ ${request.total_value}₽`}</p>
                                </div>
                              )
                            )}
                            
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Способ получения</Label>
                              <p className="text-sm">{
                                request.delivery_method === 'pickup' ? 'Самовывоз с склада' :
                                request.delivery_method === 'home_delivery' ? 'Доставка на дом' :
                                request.delivery_method === 'office_delivery' ? 'Доставка в офис' :
                                'Самовывоз'
                              }</p>
                            </div>
                            
                            {/* Статус оплаты */}
                            <div className="flex justify-between items-center">
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Статус оплаты</Label>
                                <Badge variant={request.payment_status === 'paid' ? 'default' : 'secondary'} className="ml-2">
                                  {request.payment_status === 'paid' ? 'Оплачено' : 
                                   request.payment_status === 'not_paid' ? 'Не оплачено' : 
                                   request.payment_method === 'cash_on_delivery' ? 'При получении' : 'Не указан'}
                                </Badge>
                              </div>
                              
                              {request.courier_fee && (
                                <div className="text-right">
                                  <Label className="text-xs text-gray-500">Курьеру</Label>
                                  <p className="text-sm font-medium text-green-600">{request.courier_fee} ₽</p>
                                </div>
                              )}
                            </div>

                            {/* История операций */}
                            <div className="bg-orange-50 p-3 rounded-lg">
                              <Label className="text-sm font-medium text-orange-700">История операций</Label>
                              <div className="mt-1 space-y-1 text-xs text-orange-600">
                                <div>✅ {new Date(request.created_at).toLocaleString('ru-RU')}: Заявка создана</div>
                                <div>📋 {new Date(request.accepted_at || request.updated_at).toLocaleString('ru-RU')}: Принята курьером</div>
                                <div>📦 {new Date(request.picked_at || Date.now()).toLocaleString('ru-RU')}: Груз забран</div>
                              </div>
                            </div>
                          </CardContent>

                          <div className="px-6 pb-6 space-y-2">
                            {/* Функциональные кнопки для редактирования и заполнения информации */}
                            <div className="grid grid-cols-2 gap-2">
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => handleEditCargoInfo(request)}
                              >
                                <Edit className="mr-1 h-3 w-3" />
                                Редактировать
                              </Button>
                              
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => {
                                  showAlert('Функция печати QR кода будет доступна после заполнения всех данных', 'info');
                                }}
                              >
                                <QrCode className="mr-1 h-3 w-3" />
                                QR код
                              </Button>
                            </div>
                            
                            <Button 
                              variant="outline" 
                              size="sm"
                              className="w-full"
                              onClick={() => {
                                showAlert('Функция печати накладной будет доступна после заполнения всех данных', 'info');
                              }}
                            >
                              <Printer className="mr-2 h-4 w-4" />
                              Печать накладной
                            </Button>

                            {/* Главная кнопка - сдать груз */}
                            <Button 
                              onClick={() => handleDeliverToWarehouse(request.id)}
                              className="w-full bg-green-600 hover:bg-green-700"
                              size="lg"
                            >
                              <Building className="mr-2 h-4 w-4" />
                              Сдать груз на склад
                            </Button>
                          </div>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <Card>
                      <CardContent className="flex flex-col items-center justify-center py-12">
                        <Truck className="h-12 w-12 text-gray-400 mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">Нет забранных грузов</h3>
                        <p className="text-gray-500 text-center">
                          Здесь будут отображаться грузы, которые вы забрали и готовы сдать на склад.
                        </p>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}

              {/* НОВАЯ СЕКЦИЯ: Чат курьера с поддержкой */}
              {activeSection === 'courier-chat' && user?.role === 'courier' && (
                <div className="space-y-6 p-4 md:p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h2 className="text-xl md:text-2xl font-bold text-gray-900">Чат с поддержкой</h2>
                      <p className="text-gray-600">Свяжитесь с администратором или оператором</p>
                    </div>
                  </div>

                  <Card>
                    <CardContent className="flex flex-col items-center justify-center py-12">
                      <MessageCircle className="h-16 w-16 text-blue-500 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Чат с поддержкой</h3>
                      <p className="text-gray-500 text-center mb-6">
                        Функция чата будет доступна в ближайшее время. <br />
                        Пока что вы можете связаться с поддержкой по телефону или email.
                      </p>
                      
                      <div className="space-y-3 w-full max-w-sm">
                        <Button className="w-full" variant="outline">
                          <MessageCircle className="mr-2 h-4 w-4" />
                          Написать администратору
                        </Button>
                        <Button className="w-full" variant="outline">
                          <MessageCircle className="mr-2 h-4 w-4" />
                          Связаться с оператором
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* История заявок курьера */}
              {activeSection === 'courier-history' && user?.role === 'courier' && (
                <div className="space-y-6">
                  {/* Убрали заголовок */}

                  <Card>
                    <CardContent className="flex flex-col items-center justify-center py-12">
                      <Clock className="h-12 w-12 text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">История загружается...</h3>
                      <p className="text-gray-500 text-center">
                        Функция истории заявок будет доступна в ближайшее время.
                      </p>
                    </CardContent>
                  </Card>
                </div>
              )}
              
              {/* НОВАЯ СЕКЦИЯ: Отмененные заявки курьера */}
              {activeSection === 'courier-cancelled' && user?.role === 'courier' && (
                <div className="space-y-6 p-4 md:p-6">
                  {/* Убрали заголовок */}

                  {cancelledRequests.length > 0 ? (
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {cancelledRequests.map((request) => (
                        <Card key={request.id} className="relative border-red-200">
                          <CardHeader>
                            <div className="flex items-start justify-between">
                              <div>
                                <CardTitle className="text-lg">{request.sender_full_name}</CardTitle>
                                <CardDescription>{request.sender_phone}</CardDescription>
                              </div>
                              <Badge variant="destructive" className="bg-red-100 text-red-800">
                                Отменена
                              </Badge>
                            </div>
                          </CardHeader>
                          
                          <CardContent className="space-y-3">
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Груз</Label>
                              <p className="text-sm font-medium">{request.cargo_name}</p>
                            </div>
                            
                            <div>
                              <Label className="text-sm font-medium text-gray-500">Адрес забора</Label>
                              <p className="text-sm text-gray-700">{request.pickup_address}</p>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-3">
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Дата отмены</Label>
                                <p className="text-sm">{new Date(request.cancelled_at || request.updated_at).toLocaleDateString('ru-RU')}</p>
                              </div>
                              <div>
                                <Label className="text-sm font-medium text-gray-500">Причина</Label>
                                <p className="text-sm">{request.cancellation_reason || 'Не указана'}</p>
                              </div>
                            </div>

                            {/* История действий */}
                            <div className="bg-red-50 p-3 rounded-lg">
                              <Label className="text-sm font-medium text-red-700">История действий</Label>
                              <div className="mt-2 space-y-1 text-xs text-red-600">
                                {request.cancelled_by && (
                                  <div className="flex items-center">
                                    <XCircle className="h-3 w-3 mr-1" />
                                    <span>Отменена: {request.cancelled_by === 'courier' ? 'курьером' : 
                                                     request.cancelled_by === 'operator' ? 'оператором' : 
                                                     request.cancelled_by === 'admin' ? 'администратором' : request.cancelled_by}</span>
                                  </div>
                                )}
                                <div className="flex items-center">
                                  <Package className="h-3 w-3 mr-1" />
                                  <span>Создана: {new Date(request.created_at).toLocaleDateString('ru-RU')} {new Date(request.created_at).toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'})}</span>
                                </div>
                                {request.accepted_at && (
                                  <div className="flex items-center">
                                    <CheckCircle className="h-3 w-3 mr-1" />
                                    <span>Принята: {new Date(request.accepted_at).toLocaleDateString('ru-RU')} {new Date(request.accepted_at).toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'})}</span>
                                  </div>
                                )}
                              </div>
                            </div>
                            
                            {/* Кнопка восстановления заявки */}
                            <div className="pt-3 border-t">
                              <Button 
                                onClick={() => handleRestoreRequest(request.id)}
                                className="w-full bg-green-600 hover:bg-green-700 text-white"
                                size="lg"
                              >
                                <RefreshCw className="mr-2 h-4 w-4" />
                                Восстановить заявку
                              </Button>
                              <p className="text-xs text-gray-500 text-center mt-2">
                                Заявка вернется в "Новые заявки"
                              </p>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <Card>
                      <CardContent className="flex flex-col items-center justify-center py-12">
                        <XCircle className="h-12 w-12 text-gray-400 mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">Нет отмененных заявок</h3>
                        <p className="text-gray-500 text-center">
                          Здесь будут отображаться заявки, которые были отменены вами, операторами или администраторами.
                        </p>
                      </CardContent>
                    </Card>
                  )}
                </div>
              )}
              
              {/* НОВЫЕ СЕКЦИИ ДЛЯ ОТСЛЕЖИВАНИЯ КУРЬЕРОВ */}
              
              {/* Карта отслеживания курьеров - доступна админам и операторам */}
              {activeSection === 'couriers-tracking' && activeTab === 'couriers-tracking-map' && 
               (user?.role === 'admin' || user?.role === 'warehouse_operator') && (
                <div className="space-y-6 p-4 md:p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h1 className="text-2xl font-bold text-gray-900">Карта отслеживания курьеров</h1>
                      <p className="text-gray-600">Real-time мониторинг местоположения курьеров</p>
                    </div>
                  </div>
                  
                  <CourierTrackingMap 
                    userRole={user?.role}
                    apiCall={apiCall}
                  />
                </div>
              )}

              {/* Список курьеров с картой - только для админов */}
              {activeSection === 'couriers-tracking' && activeTab === 'couriers-tracking-list' && 
               user?.role === 'admin' && (
                <div className="space-y-6 p-4 md:p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h1 className="text-2xl font-bold text-gray-900">Управление курьерами</h1>
                      <p className="text-gray-600">Список курьеров и их отслеживание</p>
                    </div>
                  </div>
                  
                  {/* Карта отслеживания */}
                  <CourierTrackingMap 
                    userRole={user?.role}
                    apiCall={apiCall}
                  />
                  
                  {/* Существующая таблица курьеров */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center justify-between">
                        <div className="flex items-center">
                          <Truck className="mr-2 h-5 w-5" />
                          Курьеры ({couriers.length})
                        </div>
                        <div className="flex items-center space-x-3">
                          {/* НОВОЕ: Переключатель для показа неактивных курьеров (только для админов) */}
                          {user?.role === 'admin' && (
                            <div className="flex items-center space-x-2">
                              <Checkbox
                                id="show-inactive-couriers"
                                checked={showInactiveCouriers}
                                onCheckedChange={(checked) => {
                                  setShowInactiveCouriers(checked);
                                  setCouriersPage(1); // Сбрасываем на первую страницу
                                }}
                              />
                              <label
                                htmlFor="show-inactive-couriers"
                                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                                title="Показать удаленных/неактивных курьеров"
                              >
                                Показать удаленных
                              </label>
                            </div>
                          )}
                          <Button onClick={() => setCourierCreateModal(true)}>
                            <Plus className="mr-2 h-4 w-4" />
                            Создать курьера
                          </Button>
                        </div>
                      </CardTitle>
                      <CardDescription>Управление курьерами и службой доставки</CardDescription>
                    </CardHeader>
                    <CardContent>
                      {couriers.length > 0 ? (
                        <div className="overflow-x-auto">
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>ФИО</TableHead>
                                <TableHead>Телефон</TableHead>
                                <TableHead>Транспорт</TableHead>
                                <TableHead>Грузоподъемность</TableHead>
                                <TableHead>Склад</TableHead>
                                <TableHead>Статус</TableHead>
                                <TableHead>Действия</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {couriers.map((courier) => {
                                // Определяем является ли курьер удаленным/неактивным
                                const isDeleted = courier.deleted === true;
                                const isInactive = courier.is_active === false;
                                const isDeletedOrInactive = isDeleted || isInactive;
                                
                                return (
                                  <TableRow key={courier.id} className={isDeletedOrInactive ? 'opacity-60 bg-gray-50' : ''}>
                                    <TableCell className="font-medium">
                                      <div className="flex items-center">
                                        {courier.full_name}
                                        {isDeleted && (
                                          <Badge variant="secondary" className="ml-2 text-xs bg-red-100 text-red-700">
                                            Удален
                                          </Badge>
                                        )}
                                        {isInactive && !isDeleted && (
                                          <Badge variant="secondary" className="ml-2 text-xs bg-orange-100 text-orange-700">
                                            Неактивен
                                          </Badge>
                                        )}
                                      </div>
                                    </TableCell>
                                  <TableCell>{courier.phone}</TableCell>
                                  <TableCell>
                                    <div className="flex items-center">
                                      <Truck className="mr-2 h-4 w-4" />
                                      {courier.transport_type} {courier.transport_number}
                                    </div>
                                  </TableCell>
                                  <TableCell>{courier.transport_capacity} кг</TableCell>
                                  <TableCell>{courier.assigned_warehouse_name}</TableCell>
                                  <TableCell>
                                    <Badge variant={courier.is_active ? "default" : "secondary"}>
                                      {courier.is_active ? 'Активен' : 'Неактивен'}
                                    </Badge>
                                  </TableCell>
                                  <TableCell>
                                    <div className="flex space-x-2">
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        onClick={() => {
                                          setSelectedCourier(courier);
                                          setCourierProfileEditForm({
                                            full_name: courier.full_name,
                                            phone: courier.phone,
                                            transport_type: courier.transport_type,
                                            transport_number: courier.transport_number,
                                            transport_capacity: courier.transport_capacity,
                                            assigned_warehouse_id: courier.assigned_warehouse_id,
                                            is_active: courier.is_active
                                          });
                                          setCourierEditModal(true);
                                        }}
                                      >
                                        <Edit className="h-4 w-4" />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        onClick={() => {
                                          setSelectedCourier(courier);
                                          setCourierProfileModal(true);
                                        }}
                                      >
                                        <Eye className="h-4 w-4" />
                                      </Button>
                                      {/* НОВАЯ КНОПКА: Удаление курьера (недоступна для уже удаленных) */}
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className={`${isDeletedOrInactive 
                                          ? 'text-gray-400 cursor-not-allowed opacity-50' 
                                          : 'text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200'
                                        }`}
                                        onClick={() => !isDeletedOrInactive && handleDeleteCourier(courier)}
                                        disabled={isDeletedOrInactive}
                                        title={isDeletedOrInactive 
                                          ? 'Курьер уже удален' 
                                          : `Удалить курьера ${courier.full_name}`
                                        }
                                      >
                                        <Trash2 className="h-4 w-4" />
                                      </Button>
                                    </div>
                                  </TableCell>
                                </TableRow>
                                );
                              })}
                            </TableBody>
                          </Table>
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <Truck className="mx-auto h-12 w-12 text-gray-400" />
                          <h3 className="mt-2 text-sm font-medium text-gray-900">Нет курьеров</h3>
                          <p className="mt-1 text-sm text-gray-500">Начните с создания первого курьера.</p>
                          <div className="mt-6">
                            <Button onClick={() => setCourierCreateModal(true)}>
                              <Plus className="mr-2 h-4 w-4" />
                              Создать курьера
                            </Button>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Неактивные курьеры - только для админов */}
              {activeSection === 'couriers-tracking' && activeTab === 'couriers-inactive' && 
               user?.role === 'admin' && (
                <div className="space-y-6 p-4 md:p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h1 className="text-2xl font-bold text-gray-900">Неактивные курьеры</h1>
                      <p className="text-gray-600">Управление заблокированными и удаленными курьерами</p>
                    </div>
                    <Button 
                      onClick={fetchInactiveCouriers}
                      variant="outline"
                      className="flex items-center"
                    >
                      <RefreshCw className="mr-2 h-4 w-4" />
                      Обновить
                    </Button>
                  </div>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <UserX className="mr-2 h-5 w-5 text-orange-600" />
                        Неактивные курьеры ({inactiveCouriers.length})
                      </CardTitle>
                      <CardDescription>
                        Курьеры, которые были заблокированы или удалены из системы. Их можно активировать или удалить полностью.
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {inactiveCouriers.length > 0 ? (
                        <div className="overflow-x-auto">
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>Курьер</TableHead>
                                <TableHead>Склад</TableHead>
                                <TableHead>Пользователь</TableHead>
                                <TableHead>Статус</TableHead>
                                <TableHead className="text-right">Действия</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {inactiveCouriers.map((courier) => (
                                <TableRow key={courier.id} className="opacity-75 bg-gray-50">
                                  <TableCell>
                                    <div className="flex items-center">
                                      <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center mr-3">
                                        <UserX className="h-4 w-4 text-red-600" />
                                      </div>
                                      <div>
                                        <div className="font-medium text-gray-900">{courier.full_name}</div>
                                        <div className="text-sm text-gray-500">ID: {courier.id}</div>
                                      </div>
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    <div className="text-sm">
                                      <div className="font-medium">{courier.assigned_warehouse_name || 'Не назначен'}</div>
                                      {courier.assigned_warehouse_id && (
                                        <div className="text-gray-500">ID: {courier.assigned_warehouse_id}</div>
                                      )}
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    <div className="text-sm">
                                      {courier.user_info ? (
                                        <>
                                          <div className="font-medium">{courier.user_info.full_name}</div>
                                          <div className="text-gray-500">{courier.user_info.phone}</div>
                                          <div className={`text-xs px-2 py-1 rounded-full inline-block ${
                                            courier.user_info.is_active 
                                              ? 'bg-green-100 text-green-800' 
                                              : 'bg-red-100 text-red-800'
                                          }`}>
                                            {courier.user_info.is_active ? 'Активен' : 'Заблокирован'}
                                          </div>
                                        </>
                                      ) : (
                                        <span className="text-gray-400">Пользователь не найден</span>
                                      )}
                                    </div>
                                  </TableCell>
                                  <TableCell>
                                    <div className="flex flex-col space-y-1">
                                      <div className="flex items-center">
                                        <div className="w-2 h-2 bg-red-500 rounded-full mr-2"></div>
                                        <span className="text-sm font-medium text-red-700">Неактивен</span>
                                      </div>
                                      {courier.deactivated_at && (
                                        <div className="text-xs text-gray-500">
                                          Деактивирован: {new Date(courier.deactivated_at).toLocaleDateString('ru-RU')}
                                        </div>
                                      )}
                                      {courier.reactivated_at && (
                                        <div className="text-xs text-green-600">
                                          Последняя активация: {new Date(courier.reactivated_at).toLocaleDateString('ru-RU')}
                                        </div>
                                      )}
                                    </div>
                                  </TableCell>
                                  <TableCell className="text-right">
                                    <div className="flex items-center justify-end space-x-2">
                                      {/* Кнопка активации */}
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className="text-green-600 hover:text-green-700 hover:bg-green-50 border-green-200"
                                        onClick={() => handleActivateCourier(courier.id, courier.full_name)}
                                        title={`Активировать курьера ${courier.full_name}`}
                                      >
                                        <UserCheck className="h-4 w-4" />
                                      </Button>
                                      
                                      {/* Кнопка полного удаления */}
                                      <Button
                                        size="sm"
                                        variant="outline"
                                        className="text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
                                        onClick={() => handlePermanentDeleteCourier(courier.id, courier.full_name)}
                                        title={`Полностью удалить курьера ${courier.full_name}`}
                                      >
                                        <X className="h-4 w-4" />
                                      </Button>
                                    </div>
                                  </TableCell>
                                </TableRow>
                              ))}
                            </TableBody>
                          </Table>
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <UserCheck className="mx-auto h-12 w-12 text-gray-400" />
                          <h3 className="mt-2 text-sm font-medium text-gray-900">Нет неактивных курьеров</h3>
                          <p className="mt-1 text-sm text-gray-500">Все курьеры активны или не было деактивированных курьеров.</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                  
                  {/* Информационная панель */}
                  <Card className="bg-blue-50 border-blue-200">
                    <CardContent className="p-4">
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0">
                          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            <UserCheck className="h-4 w-4 text-blue-600" />
                          </div>
                        </div>
                        <div className="flex-1">
                          <h4 className="text-sm font-medium text-blue-900 mb-1">Управление неактивными курьерами</h4>
                          <div className="text-sm text-blue-800 space-y-1">
                            <p><strong>Активация:</strong> Восстанавливает доступ курьера к системе и возможность принимать заявки.</p>
                            <p><strong>Полное удаление:</strong> Необратимо удаляет курьера, связанного пользователя и всю историю из системы.</p>
                            <p><strong>Безопасность:</strong> Полное удаление недоступно для курьеров с активными заявками.</p>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* История и аналитика курьеров - доступна админам и операторам */}
              {activeSection === 'couriers-tracking' && activeTab === 'couriers-history-analytics' && 
               (user?.role === 'admin' || user?.role === 'warehouse_operator') && (
                <div className="space-y-6 p-4 md:p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h1 className="text-2xl font-bold text-gray-900">История и аналитика курьеров</h1>
                      <p className="text-gray-600">Анализ перемещений, расчет времени прибытия и эффективности доставки</p>
                    </div>
                  </div>
                  
                  <CourierHistoryAnalytics 
                    userRole={user?.role}
                    apiCall={apiCall}
                  />
                </div>
              )}
            </div>
          )}
        </main>
      </div>

      {/* Модальное окно приема оплаты */}
      <Dialog open={paymentModal} onOpenChange={setPaymentModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Приём оплаты</DialogTitle>
            <DialogDescription>
              Введите номер груза для поиска и приема оплаты
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="cargo_search">Номер груза</Label>
              <div className="flex space-x-2">
                <Input
                  id="cargo_search"
                  value={paymentForm.cargo_number}
                  onChange={(e) => setPaymentForm({...paymentForm, cargo_number: e.target.value})}
                  placeholder="Введите номер груза"
                />
                <Button onClick={handleSearchCargoForPayment}>
                  <Search className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {cargoForPayment && (
              <div className="border rounded-lg p-4 bg-gray-50">
                <h4 className="font-semibold mb-2">Информация о грузе:</h4>
                <div className="space-y-2 text-sm">
                  <p><strong>Номер:</strong> {cargoForPayment.cargo_number}</p>
                  <p><strong>Отправитель:</strong> {cargoForPayment.sender_full_name}</p>
                  <p><strong>Телефон:</strong> {cargoForPayment.sender_phone}</p>
                  <p><strong>Вес:</strong> {cargoForPayment.weight} кг</p>
                  <p><strong>Описание:</strong> {cargoForPayment.description}</p>
                  <p><strong>Сумма к оплате:</strong> <span className="text-red-600 font-bold">{cargoForPayment.declared_value} ₽</span></p>
                  <p><strong>Дата приема:</strong> {new Date(cargoForPayment.created_at).toLocaleDateString('ru-RU')} {new Date(cargoForPayment.created_at).toLocaleTimeString('ru-RU')}</p>
                </div>
              </div>
            )}

            {cargoForPayment && (
              <>
                <div>
                  <Label htmlFor="amount_paid">Сумма оплачена клиентом</Label>
                  <Input
                    id="amount_paid"
                    type="number"
                    step="0.01"
                    value={paymentForm.amount_paid}
                    onChange={(e) => setPaymentForm({...paymentForm, amount_paid: e.target.value})}
                    placeholder="Введите сумму"
                  />
                </div>

                <div>
                  <Label htmlFor="transaction_type">Способ оплаты</Label>
                  <Select value={paymentForm.transaction_type} onValueChange={(value) => setPaymentForm({...paymentForm, transaction_type: value})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="cash">Наличными</SelectItem>
                      <SelectItem value="card">Картой</SelectItem>
                      <SelectItem value="transfer">Переводом</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="notes">Примечания (необязательно)</Label>
                  <Textarea
                    id="notes"
                    value={paymentForm.notes}
                    onChange={(e) => setPaymentForm({...paymentForm, notes: e.target.value})}
                    placeholder="Дополнительные заметки..."
                  />
                </div>

                <div className="flex space-x-2 pt-4">
                  <Button onClick={handleProcessPayment} className="flex-1">
                    <CreditCard className="mr-2 h-4 w-4" />
                    Оплатить
                  </Button>
                  <Button variant="outline" onClick={() => {
                    setPaymentModal(false);
                    setCargoForPayment(null);
                    setPaymentForm({cargo_number: '', amount_paid: '', transaction_type: 'cash', notes: ''});
                  }}>
                    Отмена
                  </Button>
                </div>
              </>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* НОВОЕ МОДАЛЬНОЕ ОКНО: Полное оформление груза из уведомления */}
      <Dialog open={showCargoAcceptanceModal} onOpenChange={setShowCargoAcceptanceModal}>
        <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Package className="mr-2 h-5 w-5 text-blue-600" />
              {currentCargoNotification?.isCargoMode ? 
                'Просмотр размещенного груза' : 
                currentCargoNotification?.isViewMode ? 
                  'Просмотр принятого уведомления' : 
                  'Полное оформление груза на складе'
              }
            </DialogTitle>
            <DialogDescription>
              {currentCargoNotification?.isCargoMode ? 
                `Просмотр и редактирование размещенного груза №${currentCargoNotification?.request_number}` :
                currentCargoNotification?.isViewMode ? 
                  `Просмотр и редактирование принятого уведомления №${currentCargoNotification?.request_number}` :
                  `Оформление груза из заявки на забор №${currentCargoNotification?.request_number}`
              }
            </DialogDescription>
          </DialogHeader>
          
          {currentCargoNotification && (
            <form onSubmit={(e) => { 
              e.preventDefault(); 
              
              // Создаем расширенные данные с информацией о складах
              const extendedCargoDetails = {
                ...cargoAcceptanceForm,
                // Добавляем информацию о маршруте складования
                source_warehouse_id: operatorWarehouses[0]?.id, // Склад оператора (откуда)
                source_warehouse_name: operatorWarehouses[0]?.name,
                destination_warehouse_id: cargoAcceptanceForm.warehouse_id, // Выбранный склад (куда)
                destination_warehouse_name: warehouses.find(w => w.id === cargoAcceptanceForm.warehouse_id)?.name,
                // Указываем, что это маршрутная доставка
                is_route_delivery: true,
                route_info: {
                  from: {
                    warehouse_id: operatorWarehouses[0]?.id,
                    warehouse_name: operatorWarehouses[0]?.name,
                    location: operatorWarehouses[0]?.location
                  },
                  to: {
                    warehouse_id: cargoAcceptanceForm.warehouse_id,
                    warehouse_name: warehouses.find(w => w.id === cargoAcceptanceForm.warehouse_id)?.name,
                    location: warehouses.find(w => w.id === cargoAcceptanceForm.warehouse_id)?.location
                  }
                }
              };
              
              console.log('📍 Расширенные данные груза с маршрутом:', extendedCargoDetails);
              handleCompleteCargoProcessing(currentCargoNotification.id, extendedCargoDetails); 
            }} className="space-y-6">
              
              {/* Информация о заявке */}
              <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                <h3 className="font-medium text-orange-800 mb-2">📦 Информация о поступившем грузе</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <p><strong>Номер заявки:</strong> {currentCargoNotification.request_number}</p>
                    <p><strong>Курьер:</strong> {currentCargoNotification.courier_name}</p>
                    <p><strong>Сдано на склад:</strong> {new Date(currentCargoNotification.delivered_at).toLocaleString('ru-RU')}</p>
                    <p><strong>Плата курьеру:</strong> {currentCargoNotification.courier_fee} ₽</p>
                  </div>
                  <div>
                    <p><strong>Адрес забора:</strong> {currentCargoNotification.sender_data?.pickup_address || currentCargoNotification.pickup_address || 'Не указан'}</p>
                    <p><strong>Дата забора:</strong> {currentCargoNotification.sender_data?.pickup_date || currentCargoNotification.pickup_date || 'Не указана'}</p>
                    <p><strong>Время забора:</strong> {currentCargoNotification.sender_data?.pickup_time_from && currentCargoNotification.sender_data?.pickup_time_to ? 
                      `${currentCargoNotification.sender_data.pickup_time_from} - ${currentCargoNotification.sender_data.pickup_time_to}` : 
                      (currentCargoNotification.pickup_time_from && currentCargoNotification.pickup_time_to ? 
                        `${currentCargoNotification.pickup_time_from} - ${currentCargoNotification.pickup_time_to}` : 'Не указано')
                    }</p>
                    <p><strong>Способ оплаты:</strong> {(() => {
                      const paymentMethod = currentCargoNotification.courier_payment_method || currentCargoNotification.payment_info?.payment_method || currentCargoNotification.payment_method;
                      switch(paymentMethod) {
                        case 'cash': return 'Наличные';
                        case 'card': return 'Карта';
                        case 'transfer': return 'Перевод';
                        case 'not_paid': return 'Не оплачено';
                        default: return paymentMethod || 'Не указан';
                      }
                    })()}</p>
                  </div>
                </div>
                
                {/* Информация о получателе (если есть) */}
                <div className="mt-4 pt-4 border-t border-orange-200">
                  <h4 className="font-medium text-orange-700 mb-2">👤 Данные получателя (заполнено курьером)</h4>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-2 text-sm">
                    <p><strong>ФИО:</strong> {currentCargoNotification?.recipient_data?.recipient_full_name || cargoAcceptanceForm.recipient_full_name || 'Не указано'}</p>
                    <p><strong>Телефон:</strong> {currentCargoNotification?.recipient_data?.recipient_phone || cargoAcceptanceForm.recipient_phone || 'Не указан'}</p>
                    <p><strong>Адрес:</strong> {currentCargoNotification?.recipient_data?.recipient_address || cargoAcceptanceForm.recipient_address || 'Не указан'}</p>
                  </div>
                  {/* Отладочная информация */}
                  {process.env.NODE_ENV === 'development' && (
                    <div className="mt-2 p-2 bg-gray-100 rounded text-xs">
                      <p>DEBUG - recipient_data: {JSON.stringify(currentCargoNotification?.recipient_data)}</p>
                      <p>DEBUG - form data: ФИО: {cargoAcceptanceForm.recipient_full_name}, Тел: {cargoAcceptanceForm.recipient_phone}</p>
                    </div>
                  )}
                </div>
                
                {/* Информация о грузе */}
                <div className="mt-4 pt-4 border-t border-orange-200">
                  <h4 className="font-medium text-orange-700 mb-2">📋 Информация о грузе</h4>
                  {cargoAcceptanceForm.cargo_items && cargoAcceptanceForm.cargo_items.length > 0 ? (
                    <div className="space-y-2">
                      {cargoAcceptanceForm.cargo_items.map((item, index) => (
                        <div key={index} className="bg-white p-3 rounded border text-sm">
                          <div className="flex items-center justify-between mb-2">
                            <h5 className="font-medium text-gray-800">Груз №{index + 1}</h5>
                            <span className="text-xs text-gray-500">
                              {item.weight && item.price ? 
                                `${item.weight} кг × ${item.price} ₽ = ${(parseFloat(item.weight) * parseFloat(item.price)).toFixed(2)} ₽` : 
                                'Расчет не доступен'
                              }
                            </span>
                          </div>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                            <p><strong>Наименование:</strong> {item.name || 'Не указано'}</p>
                            <p><strong>Вес:</strong> {item.weight ? `${item.weight} кг` : 'Не указан'}</p>
                            <p><strong>Цена:</strong> {item.price ? `${item.price} ₽` : 'Не указана'}</p>
                          </div>
                          
                          {/* Кнопки QR кода и этикетки для каждого груза */}
                          <div className="flex space-x-2 mt-3 pt-2 border-t border-gray-200">
                            <Button
                              size="sm"
                              variant="outline" 
                              onClick={() => {
                                // Генерируем номер груза в формате заявки/индекс (только цифры)
                                const requestNum = currentCargoNotification?.request_number?.replace(/\D/g, '') || '000000';
                                const cargoNumber = `${requestNum}/${String(index + 1).padStart(2, '0')}`;
                                
                                // Создаем новое окно для QR кода конкретного груза
                                const printWindow = window.open('', '_blank');
                                if (!printWindow) {
                                  showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                                  return;
                                }
                                
                                printWindow.document.write(`
                                  <html>
                                    <head>
                                      <title>QR код груза ${cargoNumber}</title>
                                      <script src="https://cdnjs.cloudflare.com/ajax/libs/qrious/4.0.2/qrious.min.js"></script>
                                      <style>
                                        body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
                                        .qr-container { margin: 20px auto; }
                                        .cargo-info { margin: 10px 0; font-size: 14px; }
                                        #qrcode { margin: 20px auto; display: block; }
                                        .print-btn { 
                                          margin: 20px; 
                                          padding: 10px 20px; 
                                          font-size: 16px; 
                                          background: #007bff; 
                                          color: white; 
                                          border: none; 
                                          border-radius: 5px; 
                                          cursor: pointer; 
                                        }
                                        @media print { 
                                          body { margin: 0; }
                                          .print-btn { display: none; }
                                        }
                                      </style>
                                    </head>
                                    <body>
                                      <h2>QR код груза</h2>
                                      <div class="cargo-info">
                                        <strong>Номер груза:</strong> ${cargoNumber}<br>
                                        <strong>Заявка №:</strong> ${currentCargoNotification?.request_number || 'N/A'}<br>
                                        <strong>Наименование:</strong> ${item.name || 'Не указано'}<br>
                                        <strong>Вес:</strong> ${item.weight ? item.weight + ' кг' : 'Не указан'}<br>
                                        <strong>Цена:</strong> ${item.price ? item.price + ' ₽' : 'Не указана'}
                                      </div>
                                      <div class="qr-container">
                                        <canvas id="qrcode" width="200" height="200"></canvas>
                                      </div>
                                      <button class="print-btn" onclick="window.print()">Печать</button>
                                      <div id="error-message" style="color: red; margin-top: 20px;"></div>
                                      
                                      <script>
                                        function generateQR() {
                                          try {
                                            if (typeof QRious !== 'undefined') {
                                              console.log('QRious library loaded, generating QR code...');
                                              var qr = new QRious({
                                                element: document.getElementById('qrcode'),
                                                value: "${cargoNumber}",
                                                size: 200
                                              });
                                              console.log('QR Code generated successfully for:', "${cargoNumber}");
                                            } else {
                                              console.log('QRious not loaded yet, retrying...');
                                              setTimeout(generateQR, 200);
                                            }
                                          } catch (error) {
                                            console.error('Error generating QR code:', error);
                                            document.getElementById('error-message').innerHTML = 
                                              '<p>Ошибка создания QR кода: ' + error.message + '</p>' +
                                              '<p>Данные для QR: <strong>${cargoNumber}</strong></p>';
                                          }
                                        }
                                        
                                        setTimeout(generateQR, 300);
                                        
                                        setTimeout(function() {
                                          var canvas = document.getElementById('qrcode');
                                          var ctx = canvas.getContext('2d');
                                          if (!ctx.getImageData(0, 0, 1, 1).data.some(channel => channel !== 0)) {
                                            document.getElementById('error-message').innerHTML = 
                                              '<p style="color: orange;">QR код не сгенерирован. Номер груза:</p>' +
                                              '<p style="font-size: 18px; font-weight: bold;">${cargoNumber}</p>';
                                          }
                                        }, 3000);
                                      </script>
                                    </body>
                                  </html>
                                `);
                                printWindow.document.close();
                                showAlert('QR код груза отправлен на печать', 'success');
                              }}
                              className="text-blue-600 border-blue-300 hover:bg-blue-50"
                            >
                              <QrCode className="mr-1 h-3 w-3" />
                              QR код
                            </Button>
                            
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => {
                                const requestNum = currentCargoNotification?.request_number?.replace(/\D/g, '') || '000000';
                                const cargoNumber = `${requestNum}/${String(index + 1).padStart(2, '0')}`;
                                
                                const printWindow = window.open('', '_blank');
                                if (!printWindow) {
                                  showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                                  return;
                                }
                                printWindow.document.write(`
                                  <html>
                                    <head>
                                      <title>Этикетка - Груз ${cargoNumber}</title>
                                      <style>
                                        body { font-family: Arial, sans-serif; font-size: 12px; margin: 20px; }
                                        .label { border: 2px solid #333; padding: 15px; max-width: 400px; margin: 0 auto; }
                                        .label h2 { text-align: center; margin: 0 0 15px 0; font-size: 16px; }
                                        .label-section { margin: 10px 0; }
                                        .label-section strong { display: inline-block; width: 100px; }
                                        @media print { body { margin: 0; } }
                                      </style>
                                    </head>
                                    <body>
                                      <div class="label">
                                        <h2>TAJLINE.TJ</h2>
                                        <div class="label-section"><strong>Груз:</strong> ${cargoNumber}</div>
                                        <div class="label-section"><strong>Заявка:</strong> ${currentCargoNotification?.request_number || 'N/A'}</div>
                                        <div class="label-section"><strong>Название:</strong> ${item.name || 'Не указано'}</div>
                                        <div class="label-section"><strong>Вес:</strong> ${item.weight ? item.weight + ' кг' : 'Не указан'}</div>
                                        <div class="label-section"><strong>Цена:</strong> ${item.price ? item.price + ' ₽' : 'Не указана'}</div>
                                        <div class="label-section"><strong>Дата:</strong> ${new Date().toLocaleDateString('ru-RU')}</div>
                                      </div>
                                      <script>window.print();</script>
                                    </body>
                                  </html>
                                `);
                                printWindow.document.close();
                                showAlert('Этикетка груза отправлена на печать', 'success');
                              }}
                              className="text-purple-600 border-purple-300 hover:bg-purple-50"
                            >
                              <FileText className="mr-1 h-3 w-3" />
                              Этикетка
                            </Button>
                          </div>
                        </div>
                      ))}
                      
                      {/* Итоговые расчеты для всех грузов */}
                      {cargoAcceptanceForm.cargo_items.length > 1 && (
                        <div className="bg-blue-50 border border-blue-200 p-3 rounded text-sm">
                          <h5 className="font-medium text-blue-800 mb-2">📊 Общие расчеты</h5>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                            <p><strong>Всего грузов:</strong> {cargoAcceptanceForm.cargo_items.length} шт.</p>
                            <p><strong>Общий вес:</strong> {cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + (parseFloat(item.weight) || 0), 0).toFixed(1)} кг</p>
                            <p><strong>Общая стоимость:</strong> {cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + ((parseFloat(item.weight) || 0) * (parseFloat(item.price) || 0)), 0).toFixed(2)} ₽</p>
                          </div>
                          
                          {/* Расчет средней цены за кг */}
                          {(() => {
                            const totalWeight = cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + (parseFloat(item.weight) || 0), 0);
                            const totalPrice = cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + ((parseFloat(item.weight) || 0) * (parseFloat(item.price) || 0)), 0);
                            const avgPricePerKg = totalWeight > 0 ? (totalPrice / totalWeight).toFixed(2) : 0;
                            
                            return totalWeight > 0 && totalPrice > 0 ? (
                              <div className="mt-2 pt-2 border-t border-blue-300">
                                <p className="text-blue-700"><strong>Средняя цена за кг:</strong> {avgPricePerKg} ₽/кг</p>
                              </div>
                            ) : null;
                          })()}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="bg-white p-2 rounded border text-sm">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        <p><strong>Наименование:</strong> {currentCargoNotification.cargo_info?.destination || currentCargoNotification.destination || 'Не указано'}</p>
                        <p><strong>Вес:</strong> {currentCargoNotification.cargo_info?.weight ? `${currentCargoNotification.cargo_info.weight} кг` : 'Не указан'}</p>
                        <p><strong>Стоимость:</strong> {currentCargoNotification.cargo_info?.total_value ? `${currentCargoNotification.cargo_info.total_value} ₽` : 'Не указана'}</p>
                        <p><strong>Объявленная стоимость:</strong> {currentCargoNotification.cargo_info?.declared_value ? `${currentCargoNotification.cargo_info.declared_value} ₽` : 'Не указана'}</p>
                      </div>
                      <p className="text-sm text-gray-600 mt-2">Детальная информация о грузе будет заполнена ниже</p>
                    </div>
                  )}
                  
                  {/* Отладочная информация для грузов */}
                  {process.env.NODE_ENV === 'development' && (
                    <div className="mt-2 p-2 bg-gray-100 rounded text-xs">
                      <p>DEBUG - cargo_info: {JSON.stringify(currentCargoNotification?.cargo_info)}</p>
                      <p>DEBUG - cargo_items: {JSON.stringify(cargoAcceptanceForm.cargo_items)}</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Данные отправителя */}
              <div className="border rounded-lg p-4">
                <h3 className="font-medium text-lg mb-3 flex items-center">
                  <User className="mr-2 h-5 w-5 text-blue-600" />
                  Отправитель
                </h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="sender_full_name">ФИО отправителя *</Label>
                    <Input
                      id="sender_full_name"
                      value={cargoAcceptanceForm.sender_full_name}
                      onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, sender_full_name: e.target.value})}
                      placeholder="Иван Иванович Петров"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="sender_phone">Телефон отправителя *</Label>
                    <Input
                      id="sender_phone"
                      value={cargoAcceptanceForm.sender_phone}
                      onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, sender_phone: e.target.value})}
                      placeholder="+7 900 123-45-67"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="sender_address">Адрес отправителя *</Label>
                    <Input
                      id="sender_address"
                      value={cargoAcceptanceForm.sender_address}
                      onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, sender_address: e.target.value})}
                      placeholder="г. Москва, ул. Тверская, д. 1"
                      required
                    />
                  </div>
                </div>
              </div>

              {/* Данные получателя */}
              <div className="border rounded-lg p-4">
                <h3 className="font-medium text-lg mb-3 flex items-center">
                  <MapPin className="mr-2 h-5 w-5 text-green-600" />
                  Получатель
                </h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div>
                    <Label htmlFor="recipient_full_name">ФИО получателя *</Label>
                    <Input
                      id="recipient_full_name"
                      value={cargoAcceptanceForm.recipient_full_name}
                      onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, recipient_full_name: e.target.value})}
                      placeholder="Петр Петрович Иванов"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="recipient_phone">Телефон получателя *</Label>
                    <Input
                      id="recipient_phone"
                      value={cargoAcceptanceForm.recipient_phone}
                      onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, recipient_phone: e.target.value})}
                      placeholder="+992 900 123456"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="recipient_address">Адрес получателя *</Label>
                    <Input
                      id="recipient_address"
                      value={cargoAcceptanceForm.recipient_address}
                      onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, recipient_address: e.target.value})}
                      placeholder="г. Душанбе, ул. Рудаки, д. 10"
                      required
                    />
                  </div>
                </div>
              </div>

              {/* Список грузов */}
              <div className="border rounded-lg p-4">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-medium text-lg flex items-center">
                    <Package2 className="mr-2 h-5 w-5 text-purple-600" />
                    Список грузов
                  </h3>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setCargoAcceptanceForm({
                        ...cargoAcceptanceForm,
                        cargo_items: [...cargoAcceptanceForm.cargo_items, { name: '', weight: '', price: '' }]
                      });
                    }}
                  >
                    <Plus className="mr-2 h-4 w-4" />
                    Добавить груз
                  </Button>
                </div>
                
                <div className="space-y-3">
                  {cargoAcceptanceForm.cargo_items.map((item, index) => (
                    <div key={index} className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                      <div className="grid grid-cols-12 gap-3 mb-3">
                        <div className="col-span-5">
                          <Label>Название груза *</Label>
                          <Input
                            value={item.name}
                            onChange={(e) => {
                              const newItems = [...cargoAcceptanceForm.cargo_items];
                              newItems[index].name = e.target.value;
                              setCargoAcceptanceForm({...cargoAcceptanceForm, cargo_items: newItems});
                            }}
                            placeholder="Документы, одежда..."
                            required
                          />
                        </div>
                        <div className="col-span-3">
                          <Label>Вес (кг) *</Label>
                          <Input
                            type="number"
                            step="0.1"
                            value={item.weight}
                            onChange={(e) => {
                              const newItems = [...cargoAcceptanceForm.cargo_items];
                              newItems[index].weight = e.target.value;
                              setCargoAcceptanceForm({...cargoAcceptanceForm, cargo_items: newItems});
                            }}
                            placeholder="1.5"
                            required
                          />
                        </div>
                        <div className="col-span-3">
                          <Label>Цена (₽) *</Label>
                          <Input
                            type="number"
                            step="0.01"
                            value={item.price}
                            onChange={(e) => {
                              const newItems = [...cargoAcceptanceForm.cargo_items];
                              newItems[index].price = e.target.value;
                              setCargoAcceptanceForm({...cargoAcceptanceForm, cargo_items: newItems});
                            }}
                            placeholder="1000"
                            required
                          />
                        </div>
                        <div className="col-span-1 flex items-end">
                          {cargoAcceptanceForm.cargo_items.length > 1 && (
                            <Button
                              type="button"
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newItems = cargoAcceptanceForm.cargo_items.filter((_, i) => i !== index);
                                setCargoAcceptanceForm({...cargoAcceptanceForm, cargo_items: newItems});
                              }}
                              className="text-red-600 hover:text-red-700"
                            >
                              <Minus className="h-4 w-4" />
                            </Button>
                          )}
                        </div>
                      </div>
                      
                      {/* Действия и информация для груза */}
                      <div className="flex items-center justify-between pt-3 border-t border-gray-300">
                        <div className="text-sm">
                          <div className="flex items-center space-x-4">
                            <span className="font-medium text-gray-800">Груз #{index + 1}:</span>
                            <span className="text-gray-600">{item.name || 'Не указано'}</span>
                            {item.weight && item.price && (
                              <span className="text-green-600 font-medium">
                                {item.weight} кг × {item.price} ₽ = {(parseFloat(item.weight) * parseFloat(item.price)).toFixed(2)} ₽
                              </span>
                            )}
                          </div>
                          {(!item.weight || !item.price) && (
                            <div className="text-xs text-orange-600 mt-1">
                              ⚠️ Заполните вес и цену для автоматического расчета
                            </div>
                          )}
                        </div>
                        <div className="flex space-x-2">
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              // Генерируем уникальный ID для груза для QR кода
                              const cargoId = `${currentCargoNotification?.request_number || 'TEMP'}-${index + 1}`;
                              const qrData = JSON.stringify({
                                cargo_id: cargoId,
                                name: item.name,
                                weight: item.weight,
                                price: item.price,
                                sender: cargoAcceptanceForm.sender_full_name,
                                recipient: cargoAcceptanceForm.recipient_full_name,
                                request_number: currentCargoNotification?.request_number,
                                created_at: new Date().toISOString()
                              });
                              
                              // Создаем QR код и открываем окно печати
                              const printWindow = window.open('', '_blank');
                              if (!printWindow) {
                                showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                                return;
                              }
                              printWindow.document.write(`
                                <html>
                                  <head>
                                    <title>QR код - Груз ${cargoId}</title>
                                    <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js"></script>
                                    <style>
                                      body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
                                      .qr-container { margin: 20px auto; }
                                      .cargo-info { margin: 10px 0; font-size: 14px; }
                                      @media print { body { margin: 0; } }
                                    </style>
                                  </head>
                                  <body>
                                    <h2>QR код груза</h2>
                                    <div class="cargo-info">
                                      <strong>Номер заявки:</strong> ${currentCargoNotification?.request_number || 'N/A'}<br>
                                      <strong>Груз:</strong> ${item.name || 'Не указано'}<br>
                                      <strong>Вес:</strong> ${item.weight || '0'} кг<br>
                                      <strong>Стоимость:</strong> ${item.price || '0'} ₽<br>
                                      <strong>Отправитель:</strong> ${cargoAcceptanceForm.sender_full_name}<br>
                                      <strong>Получатель:</strong> ${cargoAcceptanceForm.recipient_full_name}
                                    </div>
                                    <div class="qr-container">
                                      <canvas id="qrcode"></canvas>
                                    </div>
                                    <script>
                                      QRCode.toCanvas(document.getElementById('qrcode'), '${qrData}', {
                                        width: 200,
                                        margin: 2
                                      }, function(error) {
                                        if (error) console.error(error);
                                        else window.print();
                                      });
                                    </script>
                                  </body>
                                </html>
                              `);
                              printWindow.document.close();
                            }}
                            className="text-blue-600 hover:text-blue-700"
                          >
                            <QrCode className="mr-1 h-4 w-4" />
                            QR код
                          </Button>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              const cargoId = `${currentCargoNotification?.request_number || 'TEMP'}-${index + 1}`;
                              const printWindow = window.open('', '_blank');
                              if (!printWindow) {
                                showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                                return;
                              }
                              printWindow.document.write(`
                                <html>
                                  <head>
                                    <title>Этикетка - Груз ${cargoId}</title>
                                    <style>
                                      body { font-family: Arial, sans-serif; padding: 20px; }
                                      .label { border: 2px solid #000; padding: 15px; width: 300px; margin: 0 auto; }
                                      .header { text-align: center; font-weight: bold; font-size: 16px; margin-bottom: 10px; }
                                      .info { margin: 5px 0; font-size: 12px; }
                                      @media print { body { margin: 0; } }
                                    </style>
                                  </head>
                                  <body>
                                    <div class="label">
                                      <div class="header">TAJLINE.TJ</div>
                                      <div class="info"><strong>Заявка:</strong> ${currentCargoNotification?.request_number || 'N/A'}</div>
                                      <div class="info"><strong>Груз:</strong> ${item.name || 'Не указано'}</div>
                                      <div class="info"><strong>Вес:</strong> ${item.weight || '0'} кг</div>
                                      <div class="info"><strong>Стоимость:</strong> ${item.price || '0'} ₽</div>
                                      <div class="info"><strong>От:</strong> ${cargoAcceptanceForm.sender_full_name}</div>
                                      <div class="info"><strong>Кому:</strong> ${cargoAcceptanceForm.recipient_full_name}</div>
                                      <div class="info"><strong>Телефон:</strong> ${cargoAcceptanceForm.recipient_phone}</div>
                                      <div class="info"><strong>Дата:</strong> ${new Date().toLocaleDateString('ru-RU')}</div>
                                    </div>
                                    <script>window.print();</script>
                                  </body>
                                </html>
                              `);
                              printWindow.document.close();
                            }}
                            className="text-green-600 hover:text-green-700"
                          >
                            <Printer className="mr-1 h-4 w-4" />
                            Этикетка
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Итоги */}
                <div className="mt-4 p-3 bg-blue-50 rounded">
                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <div className="text-lg font-bold text-blue-600">
                        {cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + (parseFloat(item.weight) || 0), 0).toFixed(1)} кг
                      </div>
                      <div className="text-sm text-gray-600">Общий вес</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-green-600">
                        {cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + ((parseFloat(item.weight) || 0) * (parseFloat(item.price) || 0)), 0).toFixed(2)} ₽
                      </div>
                      <div className="text-sm text-gray-600">Общая сумма</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-purple-600">
                        {cargoAcceptanceForm.cargo_items.length}
                      </div>
                      <div className="text-sm text-gray-600">Количество грузов</div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Способы оплаты и получения */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <Label htmlFor="payment_method">Способ оплаты для груза *</Label>
                  <Select 
                    value={cargoAcceptanceForm.payment_method} 
                    onValueChange={(value) => setCargoAcceptanceForm({...cargoAcceptanceForm, payment_method: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Выберите способ оплаты" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="cash">Наличные</SelectItem>
                      <SelectItem value="card">Банковская карта</SelectItem>
                      <SelectItem value="transfer">Перевод</SelectItem>
                      <SelectItem value="prepaid">Предоплата</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="delivery_method">Способ получения груза *</Label>
                  <Select 
                    value={cargoAcceptanceForm.delivery_method} 
                    onValueChange={(value) => setCargoAcceptanceForm({...cargoAcceptanceForm, delivery_method: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Выберите способ получения" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="pickup">Самовывоз</SelectItem>
                      <SelectItem value="delivery">Доставка курьером</SelectItem>
                      <SelectItem value="shipping">Отправка почтой</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Статус оплаты и принятие оплаты */}
              <div className="border rounded-lg p-4 bg-green-50">
                <h3 className="font-medium text-lg mb-3 flex items-center">
                  <CreditCard className="mr-2 h-5 w-5 text-green-600" />
                  Принятие оплаты
                </h3>
                
                {/* Общая сумма из калькулятора */}
                <div className="bg-blue-100 border border-blue-300 rounded p-3 mb-4">
                  <div className="flex items-center justify-between">
                    <span className="text-blue-800 font-medium">📊 Общая сумма к получению:</span>
                    <span className="text-blue-900 font-bold text-lg">
                      {cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + ((parseFloat(item.weight) || 0) * (parseFloat(item.price) || 0)), 0).toFixed(2)} ₽
                    </span>
                  </div>
                  <div className="text-blue-700 text-sm mt-1">
                    Расчет: {cargoAcceptanceForm.cargo_items.map((item, idx) => 
                      `${item.weight || 0} кг × ${item.price || 0} ₽`
                    ).join(' + ')}
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                  {/* Список складов */}
                  <div>
                    <Label htmlFor="warehouse_id">Склад назначения *</Label>
                    <div className="text-xs text-blue-600 mb-2">
                      📍 Груз принимается на {operatorWarehouses[0]?.name || 'текущий склад'} и будет отправлен в выбранный склад
                    </div>
                    <Select 
                      value={cargoAcceptanceForm.warehouse_id || ''} 
                      onValueChange={(value) => setCargoAcceptanceForm({...cargoAcceptanceForm, warehouse_id: value})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите склад" />
                      </SelectTrigger>
                      <SelectContent>
                        {warehouses
                          .filter(warehouse => {
                            // Показываем только активные склады, исключая склад текущего оператора
                            const operatorWarehouseIds = operatorWarehouses.map(w => w.id);
                            return warehouse.is_active && !operatorWarehouseIds.includes(warehouse.id);
                          })
                          .map(warehouse => (
                            <SelectItem key={warehouse.id} value={warehouse.id}>
                              {warehouse.name} ({warehouse.location})
                            </SelectItem>
                          ))
                        }
                      </SelectContent>
                    </Select>
                  </div>
                  
                  {/* Статусы оплаты */}
                  <div>
                    <Label htmlFor="payment_status">Статус оплаты *</Label>
                    <Select 
                      value={cargoAcceptanceForm.payment_status} 
                      onValueChange={(value) => setCargoAcceptanceForm({...cargoAcceptanceForm, payment_status: value})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите статус оплаты" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="not_paid">Не оплачено</SelectItem>
                        <SelectItem value="partially_paid">Частично оплачено</SelectItem>
                        <SelectItem value="paid">Полностью оплачено</SelectItem>
                        <SelectItem value="prepaid">Предоплачено</SelectItem>
                        <SelectItem value="debt">В долг</SelectItem>
                        <SelectItem value="payment_on_delivery">Оплата при получении</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  {/* Способы оплаты */}
                  <div>
                    <Label htmlFor="payment_method">Способ оплаты *</Label>
                    <Select 
                      value={cargoAcceptanceForm.payment_method} 
                      onValueChange={(value) => setCargoAcceptanceForm({...cargoAcceptanceForm, payment_method: value})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите способ оплаты" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="cash">Наличные</SelectItem>
                        <SelectItem value="card">Банковская карта</SelectItem>
                        <SelectItem value="transfer">Банковский перевод</SelectItem>
                        <SelectItem value="debt">В долг</SelectItem>
                        <SelectItem value="prepaid">Предоплачено</SelectItem>
                        <SelectItem value="online_payment">Онлайн оплата</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  {/* Фактически получено */}
                  <div>
                    <Label htmlFor="amount_paid">Фактически получено (₽)</Label>
                    <Input
                      id="amount_paid"
                      type="number"
                      step="0.01"
                      placeholder="0.00"
                      value={cargoAcceptanceForm.amount_paid}
                      onChange={(e) => {
                        const amountPaid = parseFloat(e.target.value) || 0;
                        const totalAmount = cargoAcceptanceForm.cargo_items.reduce((sum, item) => sum + ((parseFloat(item.weight) || 0) * (parseFloat(item.price) || 0)), 0);
                        let newStatus = 'not_paid';
                        
                        if (amountPaid >= totalAmount) {
                          newStatus = 'paid';
                        } else if (amountPaid > 0) {
                          newStatus = 'partially_paid';
                        }
                        
                        setCargoAcceptanceForm({
                          ...cargoAcceptanceForm, 
                          amount_paid: e.target.value,
                          payment_status: newStatus
                        });
                      }}
                    />
                  </div>
                </div>
                
                {/* Заметки по оплате */}
                <div className="mb-4">
                  <Label htmlFor="payment_notes">Заметки по оплате</Label>
                  <Textarea
                    id="payment_notes"
                    placeholder="Дополнительные заметки по оплате..."
                    value={cargoAcceptanceForm.payment_notes}
                    onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, payment_notes: e.target.value})}
                    rows={2}
                  />
                </div>
                
                {cargoAcceptanceForm.payment_status === 'paid' && (
                  <div className="bg-green-100 border border-green-300 rounded p-3 mb-4">
                    <div className="flex items-center">
                      <CheckCircle className="mr-2 h-5 w-5 text-green-600" />
                      <span className="text-green-800 font-medium">Оплата получена полностью</span>
                    </div>
                  </div>
                )}
                
                {cargoAcceptanceForm.payment_status === 'partially_paid' && (
                  <div className="bg-yellow-100 border border-yellow-300 rounded p-3 mb-4">
                    <div className="flex items-center">
                      <Clock className="mr-2 h-5 w-5 text-yellow-600" />
                      <span className="text-yellow-800 font-medium">Частичная оплата получена</span>
                    </div>
                  </div>
                )}
                
                <div>
                  <Label htmlFor="payment_notes">Примечания по оплате</Label>
                  <Textarea
                    id="payment_notes"
                    placeholder="Комментарии к оплате, условия доплаты и т.д."
                    onChange={(e) => setCargoAcceptanceForm({...cargoAcceptanceForm, payment_notes: e.target.value})}
                  />
                </div>
              </div>

              {/* Кнопки действий */}
              <div className="flex justify-between items-center pt-4 border-t">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => {
                    setShowCargoAcceptanceModal(false);
                    setCurrentCargoNotification(null);
                    setCargoAcceptanceForm({
                      sender_full_name: '',
                      sender_phone: '',
                      sender_address: '',
                      recipient_full_name: '',
                      recipient_phone: '',
                      recipient_address: '',
                      cargo_items: [{ name: '', weight: '', price: '' }],
                      payment_method: '',
                      delivery_method: '',
                      payment_status: 'not_paid',
                      amount_paid: '',
                      payment_notes: ''
                    });
                  }}
                >
                  Отмена
                </Button>
                <div className="space-x-3">
                  {(currentCargoNotification?.isViewMode || currentCargoNotification?.isCargoMode) ? (
                    // Кнопки для режима просмотра (уведомления или груза)
                    <Button 
                      className="bg-green-600 hover:bg-green-700"
                      onClick={async () => {
                        try {
                          if (currentCargoNotification?.isCargoMode) {
                            // Режим просмотра груза - можно добавить API для обновления груза
                            showAlert('Изменения груза сохранены успешно!', 'success');
                            setShowCargoAcceptanceModal(false);
                            setCurrentCargoNotification(null);
                            
                            // Обновить список грузов
                            fetchOperatorCargo();
                            
                          } else {
                            // Режим просмотра уведомления
                            const updateData = {
                              sender_full_name: cargoAcceptanceForm.sender_full_name,
                              sender_phone: cargoAcceptanceForm.sender_phone,
                              pickup_address: cargoAcceptanceForm.sender_address,
                              destination: cargoAcceptanceForm.cargo_items[0]?.name || '',
                              courier_fee: currentCargoNotification.courier_fee,
                              payment_method: cargoAcceptanceForm.payment_method
                            };
                            
                            await apiCall(`/api/operator/warehouse-notifications/${currentCargoNotification.id}`, 'PUT', updateData);
                            
                            showAlert('Изменения сохранены успешно!', 'success');
                            setShowCargoAcceptanceModal(false);
                            setCurrentCargoNotification(null);
                            
                            // Обновить список уведомлений
                            fetchWarehouseNotifications();
                          }
                          
                        } catch (error) {
                          console.error('Error updating:', error);
                          showAlert('Ошибка при сохранении: ' + error.message, 'error');
                        }
                      }}
                    >
                      <Save className="mr-2 h-4 w-4" />
                      Сохранить изменения
                    </Button>
                  ) : (
                    // Кнопки для режима оформления груза
                    <>
                      <Button 
                        type="button"
                        variant="outline"
                        onClick={() => {
                          // TODO: Печать накладной
                          showAlert('Функция печати накладной будет реализована', 'info');
                        }}
                      >
                        <Printer className="mr-2 h-4 w-4" />
                        Печать накладной
                      </Button>
                      <Button type="submit" className="bg-green-600 hover:bg-green-700">
                        <CheckCircle className="mr-2 h-4 w-4" />
                        Оформить и создать грузы
                      </Button>
                    </>
                  )}
                </div>
              </div>
            </form>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно схемы склада */}
      <Dialog open={layoutModal} onOpenChange={setLayoutModal}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              Схема склада: {selectedWarehouseForLayout?.name}
            </DialogTitle>
            <DialogDescription>
              Карта расположения блоков, полок и ячеек склада
            </DialogDescription>
          </DialogHeader>
          
          {warehouseLayout ? (
            <div className="space-y-4">
              {/* Статистика склада */}
              <div className="grid grid-cols-4 gap-4">
                <div className="text-center p-4 bg-blue-50 rounded">
                  <div className="text-2xl font-bold text-blue-600">{warehouseLayout.total_cells}</div>
                  <div className="text-sm">Всего ячеек</div>
                </div>
                <div className="text-center p-4 bg-red-50 rounded">
                  <div className="text-2xl font-bold text-red-600">{warehouseLayout.occupied_cells}</div>
                  <div className="text-sm">Занято</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded">
                  <div className="text-2xl font-bold text-green-600">{warehouseLayout.total_cells - warehouseLayout.occupied_cells}</div>
                  <div className="text-sm">Свободно</div>
                </div>
                <div className="text-center p-4 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-gray-600">{warehouseLayout.occupancy_percentage}%</div>
                  <div className="text-sm">Заполненность</div>
                </div>
              </div>

              {/* Схема склада с информацией о грузах */}
              <div className="max-h-96 overflow-auto border rounded-lg p-4">
                <div className="space-y-6">
                  {warehouseLayout.layout && Object.entries(warehouseLayout.layout).map(([blockKey, block]) => (
                    <div key={blockKey} className="border rounded-lg p-4">
                      <h3 className="font-bold mb-3 text-center bg-gray-100 p-2 rounded">
                        Блок {block.block_number}
                      </h3>
                      <div className="space-y-4">
                        {block.shelves && Object.entries(block.shelves).map(([shelfKey, shelf]) => (
                          <div key={shelfKey}>
                            <h4 className="font-semibold mb-2 text-sm bg-gray-50 p-1 rounded">
                              Полка {shelf.shelf_number}
                            </h4>
                            <div className="grid grid-cols-5 gap-2">
                              {shelf.cells && Object.entries(shelf.cells).slice(0, 10).map(([cellKey, cell]) => (
                                <div
                                  key={cellKey}
                                  className={`p-2 text-xs text-center rounded border-2 transition-all cursor-pointer hover:scale-105 ${
                                    cell.is_occupied 
                                      ? 'bg-red-100 border-red-300 text-red-800 hover:bg-red-200' 
                                      : 'bg-green-100 border-green-300 text-green-800 hover:bg-green-200'
                                  }`}
                                  title={cell.cargo ? `${cell.cargo.cargo_number} - ${cell.cargo.sender_full_name}` : 'Свободная ячейка'}
                                  onClick={() => {
                                    if (cell.is_occupied && cell.cargo) {
                                      setSelectedCargoForWarehouse(cell.cargo);
                                      setCargoDetailsModal(true);
                                    } else {
                                      showAlert('Ячейка свободна', 'info');
                                    }
                                  }}
                                >
                                  <div className="font-bold">Я{cell.cell_number}</div>
                                  {cell.cargo && (
                                    <div className="mt-1">
                                      <div className="font-semibold text-[9px]">{cell.cargo.cargo_number}</div>
                                      <div className="text-[8px]">{cell.cargo.weight}кг</div>
                                    </div>
                                  )}
                                </div>
                              ))}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex items-center justify-center space-x-4 text-sm">
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-green-100 border-2 border-green-300 rounded mr-2"></div>
                  <span>Свободная ячейка</span>
                </div>
                <div className="flex items-center">
                  <div className="w-4 h-4 bg-red-100 border-2 border-red-300 rounded mr-2"></div>
                  <span>Занятая ячейка</span>
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center py-8">
              <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <p className="text-gray-500 mb-4">Загрузка схемы склада...</p>
              <p className="text-sm text-gray-400">
                Если схема не загружается, проверьте подключение или обратитесь к администратору.
              </p>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно управления транспортом */}
      <Dialog open={transportManagementModal} onOpenChange={setTransportManagementModal}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              Управление транспортом {selectedTransport?.transport_number}
            </DialogTitle>
            <DialogDescription>
              Полная информация и управление транспортом
            </DialogDescription>
          </DialogHeader>
          
          {selectedTransport && (
            <div className="space-y-6">
              {/* Информация о транспорте */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-semibold mb-2">Информация о транспорте</h3>
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <p><strong>Номер:</strong> {selectedTransport.transport_number}</p>
                  <p><strong>Водитель:</strong> {selectedTransport.driver_name}</p>
                  <p><strong>Телефон:</strong> {selectedTransport.driver_phone}</p>
                  <p><strong>Направление:</strong> {selectedTransport.direction}</p>
                  <p><strong>Вместимость:</strong> {selectedTransport.capacity_kg} кг</p>
                  <p><strong>Текущая загрузка:</strong> {selectedTransport.current_load_kg} кг</p>
                  <p><strong>Процент загрузки:</strong> {Math.round((selectedTransport.current_load_kg / selectedTransport.capacity_kg) * 100)}%</p>
                  <p><strong>Статус:</strong> 
                    <Badge className="ml-2" variant={selectedTransport.status === 'empty' ? 'secondary' : 'default'}>
                      {selectedTransport.status === 'empty' ? 'Пустой' : selectedTransport.status === 'filled' ? 'Заполнено' : selectedTransport.status}
                    </Badge>
                  </p>
                  <p><strong>Количество грузов:</strong> {transportCargoList.cargo_count || 0} мест</p>
                </div>
              </div>

              {/* Список размещенных грузов */}
              <Card className="p-4">
                <div className="flex justify-between items-center mb-4">
                  <h4 className="font-semibold">Грузы на транспорте ({transportCargoList.cargo_count || 0} мест)</h4>
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        if (transportCargoList.cargo_list && transportCargoList.cargo_list.length > 0) {
                          printTransportCargoList(selectedTransport, transportCargoList.cargo_list);
                        }
                      }}
                    >
                      <Printer className="h-4 w-4 mr-2" />
                      Печать списка
                    </Button>
                  </div>
                </div>
                
                <div className="max-h-60 overflow-y-auto border rounded">
                  {!transportCargoList.cargo_list || transportCargoList.cargo_list.length === 0 ? (
                    <p className="p-4 text-gray-500 text-center">Груз не размещен</p>
                  ) : (
                    <div className="space-y-2 p-2">
                      {transportCargoList.cargo_list.map((cargo, index) => (
                        <div key={cargo.id} className="flex justify-between items-center p-3 bg-gray-50 rounded border">
                          <div className="flex-1">
                            <div className="flex items-center space-x-4">
                              <div>
                                <p className="font-medium">{cargo.cargo_number}</p>
                                <p className="text-sm text-gray-600">{cargo.cargo_name || 'Груз'}</p>
                              </div>
                              <div>
                                <p className="text-sm"><strong>Вес:</strong> {cargo.weight} кг</p>
                                <p className="text-sm"><strong>Получатель:</strong> {cargo.recipient_name}</p>
                              </div>
                            </div>
                            <div className="mt-2 text-xs text-gray-500">
                              <p><strong>Отправитель:</strong> {cargo.sender_full_name || 'Не указан'} - {cargo.sender_phone || 'Нет телефона'}</p>
                              <p><strong>Получатель:</strong> {cargo.recipient_full_name || cargo.recipient_name} - {cargo.recipient_phone || 'Нет телефона'}</p>
                              {cargo.recipient_address && (
                                <p><strong>Адрес:</strong> {cargo.recipient_address}</p>
                              )}
                            </div>
                          </div>
                          
                          <div className="flex space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={async () => {
                                try {
                                  const fullCargoDetails = await fetchCargoDetails(cargo.id);
                                  setSelectedCellCargo(fullCargoDetails);
                                  setCargoDetailModal(true);
                                } catch (error) {
                                  console.error('Error fetching cargo details:', error);
                                }
                              }}
                            >
                              <User className="h-4 w-4" />
                            </Button>
                            
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => printCargoQrLabel(cargo)}
                              title="Печать QR этикетки"
                            >
                              <QrCode className="h-4 w-4" />
                            </Button>
                            
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={async () => {
                                if (window.confirm(`Вернуть груз ${cargo.cargo_number} в исходное место на складе?`)) {
                                  try {
                                    // Return cargo to its original warehouse location
                                    await apiCall(`/api/transport/${selectedTransport.id}/remove-cargo/${cargo.id}`, 'DELETE');
                                    showAlert(`Груз ${cargo.cargo_number} возвращен на склад!`, 'success');
                                    fetchTransportCargoList(selectedTransport.id);
                                    fetchTransports();
                                  } catch (error) {
                                    console.error('Error returning cargo:', error);
                                    showAlert('Ошибка при возврате груза на склад', 'error');
                                  }
                                }
                              }}
                              className="text-orange-600 hover:text-orange-700"
                            >
                              <Package className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                
                {transportCargoList.cargo_list && transportCargoList.cargo_list.length > 0 && (
                  <div className="mt-4 p-3 bg-blue-50 rounded">
                    <p className="text-sm"><strong>Общий вес:</strong> {transportCargoList.total_weight || 0} кг</p>
                    <p className="text-sm"><strong>Остаток вместимости:</strong> {selectedTransport.capacity_kg - (transportCargoList.total_weight || 0)} кг</p>
                  </div>
                )}
              </Card>

              {/* Размещение нового груза */}
              <Card className="p-4">
                <h4 className="font-semibold mb-3">Размещение нового груза</h4>
                <p className="text-sm text-gray-600 mb-4">
                  Введите номера грузов для размещения на транспорт
                </p>
                
                <div className="mb-4">
                  <Label htmlFor="cargo-numbers">Номера грузов (через запятую):</Label>
                  <Input
                    id="cargo-numbers"
                    placeholder="Например: 1001, 1002, 1003"
                    value={selectedCargoForPlacement.join(', ')}
                    onChange={(e) => {
                      const cargoNumbers = e.target.value.split(',').map(num => num.trim()).filter(num => num);
                      setSelectedCargoForPlacement(cargoNumbers);
                    }}
                    className="mt-2"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Введите номера грузов через запятую. Грузы должны находиться на складе.
                  </p>
                </div>
                
                <Button 
                  onClick={() => handlePlaceCargoOnTransport(selectedTransport.id, selectedCargoForPlacement)}
                  disabled={selectedCargoForPlacement.length === 0}
                  className="w-full"
                >
                  Разместить груз
                </Button>
              </Card>

              {/* Действия с транспортом */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                
                {/* Отправить транспорт */}
                <Card className="p-4">
                  <h4 className="font-semibold mb-3">Отправить транспорт</h4>
                  <p className="text-sm text-gray-600 mb-4">
                    Отправить транспорт в место назначения с любым количеством груза
                  </p>
                  <Button 
                    onClick={() => handleDispatchTransport(selectedTransport.id)}
                    disabled={selectedTransport.status === 'in_transit'}
                    className="w-full"
                  >
                    {selectedTransport.status === 'in_transit' ? 'Транспорт уже в пути' : 'Отправить транспорт'}
                  </Button>
                </Card>

                {/* Удалить транспорт */}
                <Card className="p-4">
                  <h4 className="font-semibold mb-3">Удалить транспорт</h4>
                  <p className="text-sm text-gray-600 mb-4">
                    Удалить транспорт и переместить в историю
                  </p>
                  <Button 
                    onClick={() => handleDeleteTransport(selectedTransport.id)}
                    variant="destructive"
                    className="w-full"
                  >
                    Удалить транспорт
                  </Button>
                </Card>

              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно "Связаться с нами" */}
      <Dialog open={contactModal} onOpenChange={setContactModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <MessageCircle className="mr-2 h-5 w-5" />
              Связаться с нами
            </DialogTitle>
            <DialogDescription>
              Выберите удобный способ связи с нашей службой поддержки
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* WhatsApp */}
            <Card className="p-4 hover:bg-green-50 cursor-pointer transition-colors" onClick={handleWhatsAppContact}>
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center">
                  <MessageCircle className="w-6 h-6 text-white" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-green-700">WhatsApp</h3>
                  <p className="text-sm text-gray-600">Быстрая связь через мессенджер</p>
                  <p className="text-xs text-gray-500">+7 (912) 345-67-89</p>
                </div>
                <div className="text-green-500">
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
                  </svg>
                </div>
              </div>
            </Card>

            {/* Telegram */}
            <Card className="p-4 hover:bg-blue-50 cursor-pointer transition-colors" onClick={handleTelegramContact}>
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center">
                  <MessageCircle className="w-6 h-6 text-white" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-blue-700">Telegram</h3>
                  <p className="text-sm text-gray-600">Общение в мессенджере</p>
                  <p className="text-xs text-gray-500">@tajline_support</p>
                </div>
                <div className="text-blue-500">
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
                  </svg>
                </div>
              </div>
            </Card>

            {/* Онлайн чат */}
            <Card className="p-4 hover:bg-purple-50 cursor-pointer transition-colors" onClick={handleOnlineChat}>
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center">
                  <MessageCircle className="w-6 h-6 text-white" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-purple-700">Онлайн чат</h3>
                  <p className="text-sm text-gray-600">Прямая связь с оператором</p>
                  <p className="text-xs text-gray-500">Мгновенные ответы</p>
                </div>
                <div className="text-purple-500">
                  <MessageCircle className="w-5 h-5" />
                </div>
              </div>
            </Card>

            {/* Информация о времени работы */}
            <div className="bg-gray-50 p-3 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Clock className="w-4 h-4 text-gray-500" />
                <span className="text-sm font-medium text-gray-700">Время работы поддержки</span>
              </div>
              <p className="text-xs text-gray-600">Понедельник - Пятница: 9:00 - 18:00 (МСК)</p>
              <p className="text-xs text-gray-600">Суббота - Воскресенье: 10:00 - 16:00 (МСК)</p>
              <p className="text-xs text-green-600 mt-1">WhatsApp и Telegram доступны 24/7</p>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно создания привязки оператора к складу */}
      <Dialog open={operatorBindingModal} onOpenChange={setOperatorBindingModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Привязать оператора к складу</DialogTitle>
            <DialogDescription>
              Выберите оператора и склад для создания привязки
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="operator-select">Выберите оператора</Label>
              <Select value={selectedOperatorForBinding} onValueChange={setSelectedOperatorForBinding}>
                <SelectTrigger id="operator-select">
                  <SelectValue placeholder="Выберите оператора склада" />
                </SelectTrigger>
                <SelectContent>
                  {usersByRole.warehouse_operator.map((operator) => (
                    <SelectItem key={operator.id} value={operator.id}>
                      {operator.full_name} ({operator.phone})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="warehouse-select">Выберите склад</Label>
              <Select value={selectedWarehouseForBinding} onValueChange={setSelectedWarehouseForBinding}>
                <SelectTrigger id="warehouse-select">
                  <SelectValue placeholder="Выберите склад" />
                </SelectTrigger>
                <SelectContent>
                  {warehouses.map((warehouse) => (
                    <SelectItem key={warehouse.id} value={warehouse.id}>
                      {warehouse.name} ({warehouse.location})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="flex justify-end space-x-2 pt-4">
              <Button
                variant="outline"
                onClick={() => {
                  setOperatorBindingModal(false);
                  setSelectedOperatorForBinding('');
                  setSelectedWarehouseForBinding('');
                }}
              >
                Отмена
              </Button>
              <Button onClick={handleCreateOperatorBinding}>
                Создать привязку
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно детального просмотра груза */}
      <Dialog open={cargoDetailModal} onOpenChange={setCargoDetailModal}>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              Детальная информация о грузе {selectedCellCargo?.cargo_number}
            </DialogTitle>
          </DialogHeader>
          
          {selectedCellCargo && (
            <div className="space-y-4">
              {/* Основная информация */}
              <div className="grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg">
                <div>
                  <p><strong>Номер груза:</strong> {selectedCellCargo.cargo_number}</p>
                  <p><strong>Название:</strong> {selectedCellCargo.cargo_name || 'Не указано'}</p>
                  <p><strong>Вес:</strong> {selectedCellCargo.weight} кг</p>
                  <p><strong>Стоимость:</strong> {selectedCellCargo.declared_value} руб.</p>
                </div>
                <div>
                  <p><strong>Дата приёма:</strong> {new Date(selectedCellCargo.created_at).toLocaleDateString('ru-RU')}</p>
                  <p><strong>Статус:</strong> {selectedCellCargo.status}</p>
                  <p><strong>Статус оплаты:</strong> {selectedCellCargo.payment_status || 'pending'}</p>
                  {selectedCellCargo.warehouse_location && (
                    <p><strong>Местоположение:</strong> {selectedCellCargo.warehouse_location}</p>
                  )}
                </div>
              </div>

              {/* Информация об отправителе */}
              <div className="p-4 border rounded-lg">
                <h3 className="font-semibold mb-2">Отправитель</h3>
                <p><strong>ФИО:</strong> {selectedCellCargo.sender_full_name}</p>
                <p><strong>Телефон:</strong> {selectedCellCargo.sender_phone}</p>
              </div>

              {/* Информация о получателе */}
              <div className="p-4 border rounded-lg">
                <h3 className="font-semibold mb-2">Получатель</h3>
                <p><strong>ФИО:</strong> {selectedCellCargo.recipient_full_name || selectedCellCargo.recipient_name}</p>
                <p><strong>Телефон:</strong> {selectedCellCargo.recipient_phone}</p>
                <p><strong>Адрес:</strong> {selectedCellCargo.recipient_address}</p>
              </div>

              {/* Информация об операторах */}
              <div className="p-4 bg-blue-50 rounded-lg">
                <h3 className="font-semibold mb-2">Обработка</h3>
                {selectedCellCargo.created_by_operator && (
                  <p><strong>Принял оператор:</strong> {selectedCellCargo.created_by_operator}</p>
                )}
                {selectedCellCargo.placed_by_operator && (
                  <p><strong>Разместил оператор:</strong> {selectedCellCargo.placed_by_operator}</p>
                )}
              </div>

              {/* Кнопки действий */}
              <div className="flex flex-wrap gap-2 pt-4">
                <Button onClick={() => handleEditCargo(selectedCellCargo)}>
                  <Edit className="mr-2 h-4 w-4" />
                  Редактировать
                </Button>
                
                {selectedCellCargo.warehouse_location && (
                  <>
                    <Button
                      variant="outline"
                      onClick={() => handleMoveCargo(selectedCellCargo)}
                    >
                      <Package className="mr-2 h-4 w-4" />
                      Переместить
                    </Button>
                    
                    <Button
                      variant="destructive"
                      onClick={() => handleRemoveCargoFromCell(selectedCellCargo)}
                    >
                      <Trash2 className="mr-2 h-4 w-4" />
                      Удалить из ячейки
                    </Button>
                  </>
                )}
                
                <div className="flex space-x-2">
                  <Button variant="outline" onClick={() => printInvoice(selectedCellCargo)}>
                    <Printer className="mr-2 h-4 w-4" />
                    Печать накладной
                  </Button>
                  
                  <Button variant="outline" onClick={() => printCargoQrLabel(selectedCellCargo)}>
                    <QrCode className="mr-2 h-4 w-4" />
                    QR этикетка
                  </Button>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно редактирования груза */}
      <Dialog open={cargoEditModal} onOpenChange={setCargoEditModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Редактирование груза {editingCargo?.cargo_number}</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="edit_cargo_name">Название груза</Label>
                <Input
                  id="edit_cargo_name"
                  value={cargoEditForm.cargo_name || ''}
                  onChange={(e) => setCargoEditForm({...cargoEditForm, cargo_name: e.target.value})}
                />
              </div>
              <div>
                <Label htmlFor="edit_weight">Вес (кг)</Label>
                <Input
                  id="edit_weight"
                  type="number"
                  step="0.1"
                  value={cargoEditForm.weight || ''}
                  onChange={(e) => setCargoEditForm({...cargoEditForm, weight: parseFloat(e.target.value)})}
                />
              </div>
            </div>

            <div>
              <Label htmlFor="edit_description">Описание</Label>
              <Textarea
                id="edit_description"
                value={cargoEditForm.description || ''}
                onChange={(e) => setCargoEditForm({...cargoEditForm, description: e.target.value})}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="edit_sender_name">ФИО отправителя</Label>
                <Input
                  id="edit_sender_name"
                  value={cargoEditForm.sender_full_name || ''}
                  onChange={(e) => setCargoEditForm({...cargoEditForm, sender_full_name: e.target.value})}
                />
              </div>
              <div>
                <Label htmlFor="edit_sender_phone">Телефон отправителя</Label>
                <Input
                  id="edit_sender_phone"
                  value={cargoEditForm.sender_phone || ''}
                  onChange={(e) => setCargoEditForm({...cargoEditForm, sender_phone: e.target.value})}
                />
              </div>
            </div>

            <div className="flex justify-end space-x-2 pt-4">
              <Button variant="outline" onClick={() => setCargoEditModal(false)}>
                Отмена
              </Button>
              <Button onClick={handleUpdateCargo}>
                Сохранить изменения
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно перемещения груза */}
      <Dialog open={cargoMoveModal} onOpenChange={setCargoMoveModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Перемещение груза {editingCargo?.cargo_number}</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="move_warehouse">Склад</Label>
              <Select
                value={cargoMoveForm.warehouse_id}
                onValueChange={(value) => setCargoMoveForm({...cargoMoveForm, warehouse_id: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Выберите склад" />
                </SelectTrigger>
                <SelectContent>
                  {warehouses.map((warehouse) => (
                    <SelectItem key={warehouse.id} value={warehouse.id}>
                      {warehouse.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="grid grid-cols-3 gap-4">
              <div>
                <Label htmlFor="move_block">Блок</Label>
                <Input
                  id="move_block"
                  type="number"
                  min="1"
                  value={cargoMoveForm.block_number}
                  onChange={(e) => setCargoMoveForm({...cargoMoveForm, block_number: parseInt(e.target.value)})}
                />
              </div>
              <div>
                <Label htmlFor="move_shelf">Полка</Label>
                <Input
                  id="move_shelf"
                  type="number"
                  min="1"
                  value={cargoMoveForm.shelf_number}
                  onChange={(e) => setCargoMoveForm({...cargoMoveForm, shelf_number: parseInt(e.target.value)})}
                />
              </div>
              <div>
                <Label htmlFor="move_cell">Ячейка</Label>
                <Input
                  id="move_cell"
                  type="number"
                  min="1"
                  value={cargoMoveForm.cell_number}
                  onChange={(e) => setCargoMoveForm({...cargoMoveForm, cell_number: parseInt(e.target.value)})}
                />
              </div>
            </div>

            <div className="flex justify-end space-x-2 pt-4">
              <Button variant="outline" onClick={() => setCargoMoveModal(false)}>
                Отмена
              </Button>
              <Button onClick={handleMoveCargoSubmit}>
                Переместить
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Alerts */}
      <div className="fixed top-4 right-4 space-y-2 z-50">
        {alerts.map((alert) => (
          <Alert key={alert.id} className={`max-w-sm ${alert.type === 'error' ? 'border-red-500' : alert.type === 'success' ? 'border-green-500' : 'border-blue-500'}`}>
            <AlertDescription>{alert.message}</AlertDescription>
          </Alert>
        ))}
      </div>

      {/* QR Scanner Modal */}
      <Dialog open={qrScannerModal} onOpenChange={setQrScannerModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              <Camera className="mr-2 h-5 w-5 inline" />
              Сканировать QR код
            </DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="text-center">
              <div className="w-64 h-64 bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center mx-auto mb-4">
                <div className="text-center">
                  <Camera className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-500">QR сканер</p>
                  <p className="text-xs text-gray-400 mt-1">Наведите камеру на QR код</p>
                </div>
              </div>
              
              <p className="text-sm text-gray-600 mb-4">
                Отсканируйте QR код груза или ячейки склада для быстрого доступа к информации
              </p>
              
              {/* Manual input for testing */}
              <div className="text-left">
                <Label htmlFor="manual-qr">Или введите данные QR кода вручную:</Label>
                <textarea
                  id="manual-qr"
                  className="w-full mt-2 p-3 border rounded-md"
                  rows="4"
                  placeholder="Вставьте содержимое QR кода здесь..."
                  onChange={(e) => {
                    if (e.target.value.trim()) {
                      handleQrScan(e.target.value.trim());
                      e.target.value = '';
                    }
                  }}
                />
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* QR Scan Result Modal */}
      {qrScanResult && (
        <Dialog open={!!qrScanResult} onOpenChange={() => setQrScanResult(null)}>
          <DialogContent className="max-w-md">
            <DialogHeader>
              <DialogTitle>
                <QrCode className="mr-2 h-5 w-5 inline" />
                Результат сканирования
              </DialogTitle>
            </DialogHeader>
            
            <div className="space-y-4">
              {qrScanResult.type === 'cargo' && (
                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                    <div>
                      <h3 className="font-semibold text-blue-800">Груз найден!</h3>
                      <p className="text-sm text-blue-600">№{qrScanResult.cargo_number}</p>
                    </div>
                    <Package className="h-8 w-8 text-blue-600" />
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Наименование:</span>
                      <span className="text-sm">{qrScanResult.cargo_name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Вес:</span>
                      <span className="text-sm">{qrScanResult.weight} кг</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Статус:</span>
                      <Badge variant="outline">{qrScanResult.status}</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Отправитель:</span>
                      <span className="text-sm">{qrScanResult.sender}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Получатель:</span>
                      <span className="text-sm">{qrScanResult.recipient}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Местоположение:</span>
                      <span className="text-sm">{qrScanResult.location}</span>
                    </div>
                  </div>
                  
                  <Button 
                    className="w-full" 
                    onClick={async () => {
                      try {
                        const cargoDetails = await fetchCargoDetails(qrScanResult.cargo_id);
                        setSelectedCellCargo(cargoDetails);
                        setCargoDetailModal(true);
                        setQrScanResult(null);
                      } catch (error) {
                        console.error('Error fetching cargo details:', error);
                      }
                    }}
                  >
                    Подробная информация
                  </Button>
                </div>
              )}
              
              {qrScanResult.type === 'warehouse_cell' && (
                <div className="space-y-3">
                  <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                    <div>
                      <h3 className="font-semibold text-green-800">Ячейка склада</h3>
                      <p className="text-sm text-green-600">{qrScanResult.location}</p>
                    </div>
                    <Building className="h-8 w-8 text-green-600" />
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Склад:</span>
                      <span className="text-sm">{qrScanResult.warehouse_name}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Блок:</span>
                      <span className="text-sm">{qrScanResult.block}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Полка:</span>
                      <span className="text-sm">{qrScanResult.shelf}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Ячейка:</span>
                      <span className="text-sm">{qrScanResult.cell}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium">Статус:</span>
                      <Badge variant={qrScanResult.is_occupied ? "destructive" : "default"}>
                        {qrScanResult.is_occupied ? "Занята" : "Свободна"}
                      </Badge>
                    </div>
                    
                    {qrScanResult.cargo && (
                      <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                        <h4 className="font-medium text-sm mb-2">Груз в ячейке:</h4>
                        <div className="space-y-1">
                          <div className="flex justify-between">
                            <span className="text-xs">Номер:</span>
                            <span className="text-xs font-medium">{qrScanResult.cargo.cargo_number}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-xs">Название:</span>
                            <span className="text-xs">{qrScanResult.cargo.cargo_name}</span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-xs">Вес:</span>
                            <span className="text-xs">{qrScanResult.cargo.weight} кг</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <Button 
                    className="w-full" 
                    variant="outline"
                    onClick={() => {
                      // Navigate to warehouse management
                      const warehouse = warehouses.find(w => w.id === qrScanResult.warehouse_id);
                      if (warehouse) {
                        handleOpenWarehouseLayout(warehouse);
                        setQrScanResult(null);
                      }
                    }}
                  >
                    Перейти к управлению складом
                  </Button>
                </div>
              )}
            </div>
          </DialogContent>
        </Dialog>
      )}

      {/* Arrived Transport Modal */}
      <Dialog open={arrivedTransportModal} onOpenChange={setArrivedTransportModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              <Truck className="mr-2 h-5 w-5 inline" />
              Размещение грузов из транспорта {selectedArrivedTransport?.transport_number}
            </DialogTitle>
          </DialogHeader>
          
          {selectedArrivedTransport && (
            <div className="space-y-6">
              {/* Информация о транспорте */}
              <div className="p-4 bg-green-50 rounded-lg">
                <h4 className="font-semibold text-green-800 mb-2">Информация о транспорте</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <p><strong>Номер:</strong> {selectedArrivedTransport.transport_number}</p>
                  <p><strong>Водитель:</strong> {selectedArrivedTransport.driver_name}</p>
                  <p><strong>Направление:</strong> {selectedArrivedTransport.direction}</p>
                  <p><strong>Прибыл:</strong> {new Date(selectedArrivedTransport.arrived_at).toLocaleString('ru-RU')}</p>
                </div>
              </div>

              {/* Список грузов для размещения */}
              <Card className="p-4">
                <div className="flex justify-between items-center mb-4">
                  <h4 className="font-semibold">Грузы для размещения ({arrivedCargoList.placeable_cargo_count || 0} из {arrivedCargoList.cargo_count || 0})</h4>
                  <div className="flex items-center space-x-4">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => setQrPlacementModal(true)}
                      className="text-purple-600 hover:text-purple-700"
                    >
                      <QrCode className="h-4 w-4 mr-1" />
                      QR Размещение
                    </Button>
                    <div className="text-sm text-gray-600">
                      Общий вес: {arrivedCargoList.total_weight || 0} кг
                    </div>
                  </div>
                </div>
                
                <div className="max-h-80 overflow-y-auto border rounded">
                  {!arrivedCargoList.cargo_list || arrivedCargoList.cargo_list.length === 0 ? (
                    <p className="p-4 text-gray-500 text-center">Нет грузов для размещения</p>
                  ) : (
                    <div className="space-y-2 p-2">
                      {arrivedCargoList.cargo_list.map((cargo) => (
                        <div key={cargo.id} className={`flex justify-between items-center p-3 rounded border ${cargo.can_be_placed ? 'bg-green-50 border-green-200' : 'bg-gray-50 border-gray-200'}`}>
                          <div className="flex-1">
                            <div className="flex items-center space-x-4">
                              <div>
                                <p className="font-medium">{cargo.cargo_number}</p>
                                <p className="text-sm text-gray-600">{cargo.cargo_name}</p>
                              </div>
                              <div>
                                <p className="text-sm"><strong>Вес:</strong> {cargo.weight} кг</p>
                                <p className="text-sm"><strong>Получатель:</strong> {cargo.recipient_full_name}</p>
                              </div>
                              <div>
                                <Badge variant={cargo.can_be_placed ? "default" : "secondary"}>
                                  {cargo.status === 'arrived_destination' ? 'Готов к размещению' : cargo.status}
                                </Badge>
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex space-x-2">
                            {cargo.can_be_placed && (
                              <Button
                                size="sm"
                                onClick={() => {
                                  setSelectedCargoForWarehouse(cargo);
                                  setCargoPlacementModal(true);
                                }}
                                className="bg-blue-600 hover:bg-blue-700 text-white"
                              >
                                <Building className="h-4 w-4 mr-1" />
                                Разместить
                              </Button>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </Card>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Cargo Placement Modal */}
      <Dialog open={cargoPlacementModal} onOpenChange={setCargoPlacementModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              <Building className="mr-2 h-5 w-5 inline" />
              Размещение груза {selectedCargoForWarehouse?.cargo_number}
            </DialogTitle>
          </DialogHeader>
          
          <form onSubmit={handlePlaceCargoFromTransport} className="space-y-4">
            {selectedCargoForWarehouse && (
              <div className="p-3 bg-blue-50 rounded-lg">
                <h5 className="font-medium text-blue-800">Информация о грузе</h5>
                <p className="text-sm"><strong>Номер:</strong> {selectedCargoForWarehouse.cargo_number}</p>
                <p className="text-sm"><strong>Название:</strong> {selectedCargoForWarehouse.cargo_name}</p>
                <p className="text-sm"><strong>Вес:</strong> {selectedCargoForWarehouse.weight} кг</p>
                <p className="text-sm"><strong>Получатель:</strong> {selectedCargoForWarehouse.recipient_full_name}</p>
              </div>
            )}

            <div>
              <Label htmlFor="placement_warehouse">Склад</Label>
              <Select 
                value={placementForm.warehouse_id} 
                onValueChange={(value) => setPlacementForm({...placementForm, warehouse_id: value})}
                required
              >
                <SelectTrigger>
                  <SelectValue placeholder="Выберите склад" />
                </SelectTrigger>
                <SelectContent>
                  {warehouses.map((warehouse) => (
                    <SelectItem key={warehouse.id} value={warehouse.id}>
                      {warehouse.name} ({warehouse.location})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="grid grid-cols-3 gap-3">
              <div>
                <Label htmlFor="placement_block">Блок</Label>
                <Select 
                  value={placementForm.block_number.toString()} 
                  onValueChange={(value) => setPlacementForm({...placementForm, block_number: parseInt(value)})}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {placementForm.warehouse_id && warehouses.find(w => w.id === placementForm.warehouse_id) && 
                      Array.from({length: warehouses.find(w => w.id === placementForm.warehouse_id).blocks_count}, (_, i) => (
                        <SelectItem key={i+1} value={(i+1).toString()}>{i+1}</SelectItem>
                      ))
                    }
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="placement_shelf">Полка</Label>
                <Select 
                  value={placementForm.shelf_number.toString()} 
                  onValueChange={(value) => setPlacementForm({...placementForm, shelf_number: parseInt(value)})}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {placementForm.warehouse_id && warehouses.find(w => w.id === placementForm.warehouse_id) && 
                      Array.from({length: warehouses.find(w => w.id === placementForm.warehouse_id).shelves_per_block}, (_, i) => (
                        <SelectItem key={i+1} value={(i+1).toString()}>{i+1}</SelectItem>
                      ))
                    }
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="placement_cell">Ячейка</Label>
                <Select 
                  value={placementForm.cell_number.toString()} 
                  onValueChange={(value) => setPlacementForm({...placementForm, cell_number: parseInt(value)})}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {placementForm.warehouse_id && warehouses.find(w => w.id === placementForm.warehouse_id) && 
                      Array.from({length: warehouses.find(w => w.id === placementForm.warehouse_id).cells_per_shelf}, (_, i) => (
                        <SelectItem key={i+1} value={(i+1).toString()}>{i+1}</SelectItem>
                      ))
                    }
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="flex space-x-2 pt-4">
              <Button type="submit" className="flex-1">
                <Building className="mr-2 h-4 w-4" />
                Разместить груз
              </Button>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => {
                  setCargoPlacementModal(false);
                  setSelectedCargoForWarehouse(null);
                }}
              >
                Отмена
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Transport Visualization Modal */}
      <Dialog open={transportVisualizationModal} onOpenChange={setTransportVisualizationModal}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>
              <Truck className="mr-2 h-5 w-5 inline" />
              Схема заполнения транспорта {selectedTransportForVisualization?.transport_number}
            </DialogTitle>
          </DialogHeader>
          
          {transportVisualizationData && (
            <div className="space-y-6">
              {/* Статистика транспорта */}
              <div className="grid grid-cols-4 gap-4">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">{transportVisualizationData.cargo_summary.total_items}</div>
                  <div className="text-sm">Грузов</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">{transportVisualizationData.cargo_summary.total_weight} кг</div>
                  <div className="text-sm">Общий вес</div>
                </div>
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">{transportVisualizationData.cargo_summary.fill_percentage_weight}%</div>
                  <div className="text-sm">Заполнение по весу</div>
                </div>
                <div className="text-center p-4 bg-orange-50 rounded-lg">
                  <div className="text-2xl font-bold text-orange-600">{transportVisualizationData.cargo_summary.total_volume_estimate} м³</div>
                  <div className="text-sm">Примерный объём</div>
                </div>
              </div>

              {/* Прогресс бар заполнения */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Заполнение по весу</span>
                  <span>{transportVisualizationData.cargo_summary.fill_percentage_weight}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div 
                    className={`h-3 rounded-full ${
                      transportVisualizationData.cargo_summary.fill_percentage_weight > 100 ? 'bg-red-500' :
                      transportVisualizationData.cargo_summary.fill_percentage_weight > 90 ? 'bg-orange-500' :
                      transportVisualizationData.cargo_summary.fill_percentage_weight > 70 ? 'bg-yellow-500' : 'bg-green-500'
                    }`}
                    style={{width: `${Math.min(transportVisualizationData.cargo_summary.fill_percentage_weight, 100)}%`}}
                  />
                </div>
              </div>

              {/* Схема размещения грузов */}
              <div className="space-y-4">
                <h4 className="font-semibold text-lg">Схема размещения грузов в транспорте</h4>
                <div className="border-2 border-gray-300 rounded-lg p-4 bg-gray-50">
                  <div className="text-center mb-2 text-sm font-medium text-gray-600">
                    ← Передняя часть ({transportVisualizationData.transport.dimensions.length}м x {transportVisualizationData.transport.dimensions.width}м)
                  </div>
                  <div className="grid grid-cols-6 gap-2">
                    {transportVisualizationData.visualization.placement_grid.map((row, rowIndex) =>
                      row.map((cell, cellIndex) => (
                        <div 
                          key={`${rowIndex}-${cellIndex}`}
                          className={`
                            relative h-16 border-2 rounded transition-all
                            ${cell.occupied 
                              ? 'bg-blue-100 border-blue-300 hover:bg-blue-200' 
                              : 'bg-white border-gray-300 border-dashed'
                            }
                          `}
                          title={cell.occupied ? `Груз ${cell.cargo_number}: ${cell.cargo_name} (${cell.weight}кг)` : 'Свободное место'}
                        >
                          {cell.occupied && (
                            <div className="absolute inset-0 p-1 flex flex-col justify-center items-center text-xs">
                              <div className="font-bold text-blue-800">{cell.cargo_number}</div>
                              <div className="text-blue-600 text-center leading-tight">{cell.weight}кг</div>
                            </div>
                          )}
                          <div className="absolute bottom-0 right-0 text-xs text-gray-400 p-1">
                            {cell.position}
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                  <div className="text-center mt-2 text-sm font-medium text-gray-600">
                    Задняя часть →
                  </div>
                </div>
              </div>

              {/* Детальный список грузов */}
              <div className="space-y-4">
                <h4 className="font-semibold text-lg">Детальный список грузов ({transportVisualizationData.cargo_summary.total_items})</h4>
                <div className="max-h-64 overflow-y-auto border rounded-lg">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>№ Груза</TableHead>
                        <TableHead>Наименование</TableHead>
                        <TableHead>Вес (кг)</TableHead>
                        <TableHead>Получатель</TableHead>
                        <TableHead>Позиция</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {transportVisualizationData.cargo_summary.cargo_list.map((cargo, index) => (
                        <TableRow key={cargo.id}>
                          <TableCell className="font-medium">{cargo.cargo_number}</TableCell>
                          <TableCell>{cargo.cargo_name}</TableCell>
                          <TableCell>{cargo.weight}</TableCell>
                          <TableCell>{cargo.recipient_name}</TableCell>
                          <TableCell>{Math.floor(index / 6) + 1}-{(index % 6) + 1}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* QR/Number Cargo Placement Modal */}
      <Dialog open={qrPlacementModal} onOpenChange={setQrPlacementModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              <QrCode className="mr-2 h-5 w-5 inline" />
              Размещение груза по номеру/QR
            </DialogTitle>
          </DialogHeader>
          
          <form onSubmit={handleQrCargoPlacement} className="space-y-4">
            <div className="p-3 bg-purple-50 rounded-lg">
              <h5 className="font-medium text-purple-800 mb-2">Размещение груза</h5>
              <p className="text-sm text-purple-700">
                Склад будет выбран автоматически на основе ваших привязок. Вы должны указать конкретную ячейку для размещения вручную или через QR код ячейки.
              </p>
            </div>

            <div>
              <Label htmlFor="cargo_number">Номер груза</Label>
              <Input
                id="cargo_number"
                value={qrPlacementForm.cargo_number}
                onChange={(e) => setQrPlacementForm({...qrPlacementForm, cargo_number: e.target.value})}
                placeholder="1234"
                required={!qrPlacementForm.qr_data}
              />
            </div>

            <div className="text-center text-sm text-gray-500">или</div>

            <div>
              <Label htmlFor="qr_data">QR код груза</Label>
              <textarea
                id="qr_data"
                className="w-full mt-2 p-3 border rounded-md"
                rows="3"
                value={qrPlacementForm.qr_data}
                onChange={(e) => setQrPlacementForm({...qrPlacementForm, qr_data: e.target.value})}
                placeholder="Вставьте QR код груза..."
                required={!qrPlacementForm.cargo_number}
              />
            </div>

            <div className="border-t pt-4">
              <Label>Размещение в ячейке</Label>
              
              <div className="mt-2">
                <Label htmlFor="cell_qr_data">QR код ячейки склада</Label>
                <textarea
                  id="cell_qr_data"
                  className="w-full mt-2 p-3 border rounded-md"
                  rows="3"
                  value={qrPlacementForm.cell_qr_data}
                  onChange={(e) => setQrPlacementForm({...qrPlacementForm, cell_qr_data: e.target.value})}
                  placeholder="Отсканируйте QR код ячейки склада..."
                />
              </div>

              <div className="text-center text-sm text-gray-500 my-2">или укажите координаты вручную</div>

              <div className="grid grid-cols-3 gap-3">
                <div>
                  <Label htmlFor="manual_block">Блок</Label>
                  <Input
                    id="manual_block"
                    type="number"
                    min="1"
                    value={qrPlacementForm.block_number}
                    onChange={(e) => setQrPlacementForm({...qrPlacementForm, block_number: e.target.value})}
                    placeholder="1"
                  />
                </div>
                <div>
                  <Label htmlFor="manual_shelf">Полка</Label>
                  <Input
                    id="manual_shelf"
                    type="number"
                    min="1"
                    value={qrPlacementForm.shelf_number}
                    onChange={(e) => setQrPlacementForm({...qrPlacementForm, shelf_number: e.target.value})}
                    placeholder="1"
                  />
                </div>
                <div>
                  <Label htmlFor="manual_cell">Ячейка</Label>
                  <Input
                    id="manual_cell"
                    type="number"
                    min="1"
                    value={qrPlacementForm.cell_number}
                    onChange={(e) => setQrPlacementForm({...qrPlacementForm, cell_number: e.target.value})}
                    placeholder="1"
                  />
                </div>
              </div>
            </div>

            <div className="flex space-x-2 pt-4">
              <Button type="submit" className="flex-1">
                <Building className="mr-2 h-4 w-4" />
                Разместить груз
              </Button>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => {
                  setQrPlacementModal(false);
                  setQrPlacementForm({
                    cargo_number: '',
                    qr_data: '',
                    cell_qr_data: '',
                    block_number: 1,
                    shelf_number: 1,
                    cell_number: 1
                  });
                }}
              >
                Отмена
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Interwarehouse Transport Modal */}
      <Dialog open={interwarehouseTransportModal} onOpenChange={setInterwarehouseTransportModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>
              <Truck className="mr-2 h-5 w-5 inline" />
              Создание межскладского транспорта
            </DialogTitle>
          </DialogHeader>
          
          <form onSubmit={handleCreateInterwarehouseTransport} className="space-y-4">
            <div className="p-3 bg-blue-50 rounded-lg">
              <h5 className="font-medium text-blue-800 mb-2">Межскладская перевозка</h5>
              <p className="text-sm text-blue-700">
                Создайте транспорт для перевозки грузов между вашими складами. Доступны только склады, к которым у вас есть доступ.
              </p>
            </div>

            <div>
              <Label htmlFor="source_warehouse">Исходный склад</Label>
              <Select 
                value={interwarehouseForm.source_warehouse_id} 
                onValueChange={(value) => setInterwarehouseForm({...interwarehouseForm, source_warehouse_id: value})}
                required
              >
                <SelectTrigger>
                  <SelectValue placeholder="Выберите исходный склад" />
                </SelectTrigger>
                <SelectContent>
                  {(user?.role === 'admin' ? warehouses : operatorWarehouses).map((warehouse) => (
                    <SelectItem key={warehouse.id} value={warehouse.id}>
                      {warehouse.name} ({warehouse.location})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="destination_warehouse">Целевой склад</Label>
              <Select 
                value={interwarehouseForm.destination_warehouse_id} 
                onValueChange={(value) => setInterwarehouseForm({...interwarehouseForm, destination_warehouse_id: value})}
                required
              >
                <SelectTrigger>
                  <SelectValue placeholder="Выберите целевой склад" />
                </SelectTrigger>
                <SelectContent>
                  {(user?.role === 'admin' ? warehouses : operatorWarehouses)
                    .filter(w => w.id !== interwarehouseForm.source_warehouse_id)
                    .map((warehouse) => (
                      <SelectItem key={warehouse.id} value={warehouse.id}>
                        {warehouse.name} ({warehouse.location})
                      </SelectItem>
                    ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="iw_driver_name">ФИО водителя</Label>
              <Input
                id="iw_driver_name"
                value={interwarehouseForm.driver_name}
                onChange={(e) => setInterwarehouseForm({...interwarehouseForm, driver_name: e.target.value})}
                placeholder="Иван Иванов"
                required
              />
            </div>

            <div>
              <Label htmlFor="iw_driver_phone">Телефон водителя</Label>
              <Input
                id="iw_driver_phone"
                value={interwarehouseForm.driver_phone}
                onChange={(e) => setInterwarehouseForm({...interwarehouseForm, driver_phone: e.target.value})}
                placeholder="+7 (999) 123-45-67"
                required
              />
            </div>

            <div>
              <Label htmlFor="iw_capacity">Грузоподъемность (кг)</Label>
              <Input
                id="iw_capacity"
                type="number"
                min="100"
                step="50"
                value={interwarehouseForm.capacity_kg}
                onChange={(e) => setInterwarehouseForm({...interwarehouseForm, capacity_kg: parseInt(e.target.value)})}
                required
              />
            </div>

            <div className="flex space-x-2 pt-4">
              <Button type="submit" className="flex-1">
                <Truck className="mr-2 h-4 w-4" />
                Создать транспорт
              </Button>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => {
                  setInterwarehouseTransportModal(false);
                  setInterwarehouseForm({
                    source_warehouse_id: '',
                    destination_warehouse_id: '',
                    driver_name: '',
                    driver_phone: '',
                    capacity_kg: 1000
                  });
                }}
              >
                Отмена
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* НОВЫЕ МОДАЛЫ ДЛЯ УПРАВЛЕНИЯ ЗАКАЗАМИ КЛИЕНТОВ */}

      {/* Модальное окно детального просмотра заказа клиента */}
      <Dialog open={orderDetailsModal} onOpenChange={setOrderDetailsModal}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <ShoppingCart className="w-5 h-5 mr-2 text-orange-600" />
              Детали заказа №{selectedOrder?.request_number}
            </DialogTitle>
            <DialogDescription>
              Просмотр полной информации о заказе клиента
            </DialogDescription>
          </DialogHeader>
          
          {selectedOrder && (
            <div className="space-y-6">
              {/* Основная информация */}
              <div className="grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg">
                <div>
                  <p className="text-sm text-gray-600"><strong>Номер заказа:</strong></p>
                  <p className="font-medium">{selectedOrder.request_number}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600"><strong>Дата создания:</strong></p>
                  <p className="font-medium">
                    {new Date(selectedOrder.created_at).toLocaleDateString('ru-RU')} {' '}
                    {new Date(selectedOrder.created_at).toLocaleTimeString('ru-RU')}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-600"><strong>Статус:</strong></p>
                  <Badge variant={selectedOrder.status === 'pending' ? 'destructive' : 'default'}>
                    {selectedOrder.status === 'pending' ? 'Ожидает обработки' : selectedOrder.status}
                  </Badge>
                </div>
                <div>
                  <p className="text-sm text-gray-600"><strong>Маршрут:</strong></p>
                  <p className="font-medium">
                    {selectedOrder.route === 'moscow_to_tajikistan' ? 'Москва → Таджикистан' : 'Таджикистан → Москва'}
                  </p>
                </div>
              </div>

              {/* Информация об отправителе */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-3 flex items-center">
                  <User className="w-5 h-5 mr-2 text-blue-600" />
                  Отправитель
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600"><strong>ФИО:</strong></p>
                    <p className="font-medium">{selectedOrder.sender_full_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Телефон:</strong></p>
                    <p className="font-medium">{selectedOrder.sender_phone}</p>
                  </div>
                  <div className="md:col-span-2">
                    <p className="text-sm text-gray-600"><strong>Адрес забора:</strong></p>
                    <p className="font-medium">{selectedOrder.pickup_address}</p>
                  </div>
                </div>
              </div>

              {/* Информация о получателе */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-3 flex items-center">
                  <MapPin className="w-5 h-5 mr-2 text-green-600" />
                  Получатель
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600"><strong>ФИО:</strong></p>
                    <p className="font-medium">{selectedOrder.recipient_full_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Телефон:</strong></p>
                    <p className="font-medium">{selectedOrder.recipient_phone}</p>
                  </div>
                  <div className="md:col-span-2">
                    <p className="text-sm text-gray-600"><strong>Адрес доставки:</strong></p>
                    <p className="font-medium">{selectedOrder.recipient_address}</p>
                  </div>
                </div>
              </div>

              {/* Информация о грузе */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-3 flex items-center">
                  <Package className="w-5 h-5 mr-2 text-purple-600" />
                  Информация о грузе
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600"><strong>Название груза:</strong></p>
                    <p className="font-medium">{selectedOrder.cargo_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Вес:</strong></p>
                    <p className="font-medium">{selectedOrder.weight} кг</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Объявленная стоимость:</strong></p>
                    <p className="font-medium">{selectedOrder.declared_value} ₽</p>
                  </div>
                  <div className="md:col-span-2">
                    <p className="text-sm text-gray-600"><strong>Описание:</strong></p>
                    <p className="font-medium">{selectedOrder.description}</p>
                  </div>
                </div>
              </div>

              {/* Заметки администратора */}
              {selectedOrder.admin_notes && (
                <div className="border rounded-lg p-4 bg-blue-50">
                  <h3 className="font-semibold text-lg mb-3 flex items-center">
                    <FileText className="w-5 h-5 mr-2 text-blue-600" />
                    Заметки администратора
                  </h3>
                  <p className="text-gray-700">{selectedOrder.admin_notes}</p>
                </div>
              )}

              {/* Действия */}
              <div className="flex justify-between items-center pt-4 border-t">
                <div className="space-x-2">
                  <Button 
                    onClick={() => {
                      handleOrderEdit(selectedOrder);
                      setOrderDetailsModal(false);
                    }}
                    variant="outline"
                    className="flex items-center"
                  >
                    <Edit className="w-4 h-4 mr-2" />
                    Редактировать
                  </Button>
                </div>
                <div className="space-x-2">
                  <Button 
                    onClick={() => handleAcceptOrder(selectedOrder.id)}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Принять заказ
                  </Button>
                  <Button 
                    onClick={() => handleRejectOrder(selectedOrder.id, 'Заказ отклонен администратором')}
                    variant="destructive"
                  >
                    <XCircle className="w-4 h-4 mr-2" />
                    Отклонить
                  </Button>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно редактирования заказа клиента */}
      <Dialog open={editOrderModal} onOpenChange={setEditOrderModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Edit className="w-5 h-5 mr-2 text-blue-600" />
              Редактирование заказа №{selectedOrder?.request_number}
            </DialogTitle>
            <DialogDescription>
              Изменение информации о получателе, отправителе и грузе
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={(e) => { e.preventDefault(); handleSaveOrderChanges(); }}>
            <div className="space-y-6">
              {/* Информация об отправителе */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-4 flex items-center">
                  <User className="w-5 h-5 mr-2 text-blue-600" />
                  Отправитель
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="sender_full_name">ФИО отправителя</Label>
                    <Input
                      id="sender_full_name"
                      value={orderEditForm.sender_full_name}
                      onChange={(e) => setOrderEditForm({...orderEditForm, sender_full_name: e.target.value})}
                      placeholder="Иван Иванович Петров"
                    />
                  </div>
                  <div>
                    <Label htmlFor="sender_phone">Телефон отправителя</Label>
                    <Input
                      id="sender_phone"
                      value={orderEditForm.sender_phone}
                      onChange={(e) => setOrderEditForm({...orderEditForm, sender_phone: e.target.value})}
                      placeholder="+7 900 123-45-67"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <Label htmlFor="pickup_address">Адрес забора</Label>
                    <Input
                      id="pickup_address"
                      value={orderEditForm.pickup_address}
                      onChange={(e) => setOrderEditForm({...orderEditForm, pickup_address: e.target.value})}
                      placeholder="г. Москва, ул. Тверская, д. 1"
                    />
                  </div>
                </div>
              </div>

              {/* Информация о получателе */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-4 flex items-center">
                  <MapPin className="w-5 h-5 mr-2 text-green-600" />
                  Получатель
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="recipient_full_name">ФИО получателя</Label>
                    <Input
                      id="recipient_full_name"
                      value={orderEditForm.recipient_full_name}
                      onChange={(e) => setOrderEditForm({...orderEditForm, recipient_full_name: e.target.value})}
                      placeholder="Петр Петрович Иванов"
                    />
                  </div>
                  <div>
                    <Label htmlFor="recipient_phone">Телефон получателя</Label>
                    <Input
                      id="recipient_phone"
                      value={orderEditForm.recipient_phone}
                      onChange={(e) => setOrderEditForm({...orderEditForm, recipient_phone: e.target.value})}
                      placeholder="+992 900 123456"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <Label htmlFor="recipient_address">Адрес доставки</Label>
                    <Input
                      id="recipient_address"
                      value={orderEditForm.recipient_address}
                      onChange={(e) => setOrderEditForm({...orderEditForm, recipient_address: e.target.value})}
                      placeholder="г. Душанбе, ул. Рудаки, д. 10"
                    />
                  </div>
                </div>
              </div>

              {/* Информация о грузе */}
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold text-lg mb-4 flex items-center">
                  <Package className="w-5 h-5 mr-2 text-purple-600" />
                  Груз
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="cargo_name">Название груза</Label>
                    <Input
                      id="cargo_name"
                      value={orderEditForm.cargo_name}
                      onChange={(e) => setOrderEditForm({...orderEditForm, cargo_name: e.target.value})}
                      placeholder="Документы"
                    />
                  </div>
                  <div>
                    <Label htmlFor="route">Маршрут</Label>
                    <Select value={orderEditForm.route} onValueChange={(value) => setOrderEditForm({...orderEditForm, route: value})}>
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите маршрут" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="moscow_to_tajikistan">Москва → Таджикистан</SelectItem>
                        <SelectItem value="tajikistan_to_moscow">Таджикистан → Москва</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="weight">Вес (кг)</Label>
                    <Input
                      id="weight"
                      type="number"
                      value={orderEditForm.weight}
                      onChange={(e) => setOrderEditForm({...orderEditForm, weight: e.target.value})}
                      placeholder="1.5"
                      step="0.1"
                    />
                  </div>
                  <div>
                    <Label htmlFor="declared_value">Объявленная стоимость (₽)</Label>
                    <Input
                      id="declared_value"
                      type="number"
                      value={orderEditForm.declared_value}
                      onChange={(e) => setOrderEditForm({...orderEditForm, declared_value: e.target.value})}
                      placeholder="10000"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <Label htmlFor="description">Описание груза</Label>
                    <Textarea
                      id="description"
                      value={orderEditForm.description}
                      onChange={(e) => setOrderEditForm({...orderEditForm, description: e.target.value})}
                      placeholder="Подробное описание груза"
                      rows={3}
                    />
                  </div>
                </div>
              </div>

              {/* Заметки администратора */}
              <div className="border rounded-lg p-4 bg-blue-50">
                <h3 className="font-semibold text-lg mb-4 flex items-center">
                  <FileText className="w-5 h-5 mr-2 text-blue-600" />
                  Заметки администратора
                </h3>
                <Textarea
                  value={orderEditForm.admin_notes}
                  onChange={(e) => setOrderEditForm({...orderEditForm, admin_notes: e.target.value})}
                  placeholder="Добавьте заметки по обработке заказа..."
                  rows={3}
                />
              </div>

              {/* Кнопки действий */}
              <div className="flex justify-between items-center pt-4 border-t">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => {
                    setEditOrderModal(false);
                    setOrderEditForm({
                      sender_full_name: '',
                      sender_phone: '',
                      recipient_full_name: '',
                      recipient_phone: '',
                      recipient_address: '',
                      pickup_address: '',
                      cargo_name: '',
                      weight: '',
                      declared_value: '',
                      description: '',
                      route: '',
                      admin_notes: ''
                    });
                  }}
                >
                  Отмена
                </Button>
                <div className="space-x-2">
                  <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                    <Save className="w-4 h-4 mr-2" />
                    Сохранить изменения
                  </Button>
                </div>
              </div>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНЫЕ ОКНА ДЛЯ УПРАВЛЕНИЯ РАЗМЕЩЕНИЕМ ГРУЗОВ */}

      {/* Модальное окно детального просмотра груза */}
      <Dialog open={cargoDetailsModal} onOpenChange={setCargoDetailsModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Package className="w-5 h-5 mr-2 text-blue-600" />
              Подробная информация о грузе №{selectedCargoForDetailView?.cargo_number}
            </DialogTitle>
            <DialogDescription>
              Полная информация о грузе, отправителе, получателе и операторе
            </DialogDescription>
          </DialogHeader>
          
          {selectedCargoForDetailView && (
            <div className="space-y-6">
              {/* Информация о грузе */}
              <div className="p-4 bg-blue-50 rounded-lg">
                <h3 className="font-bold text-lg text-blue-700 mb-3">📦 Информация о грузе</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600"><strong>Номер груза:</strong></p>
                    <p className="font-medium text-lg">{selectedCargoForDetailView.cargo_number}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Наименование:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.cargo_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Вес:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.weight} кг</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Объявленная стоимость:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.declared_value} ₽</p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-sm text-gray-600"><strong>Описание:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.description}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Маршрут:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.route}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Статус обработки:</strong></p>
                    <Badge variant={getProcessingStatusBadgeVariant(selectedCargoForDetailView.processing_status)}>
                      {getProcessingStatusLabel(selectedCargoForDetailView.processing_status)}
                    </Badge>
                  </div>
                </div>
              </div>

              {/* Информация об отправителе */}
              <div className="p-4 bg-green-50 rounded-lg">
                <h3 className="font-bold text-lg text-green-700 mb-3">👤 Отправитель</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600"><strong>Полное имя:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.sender_full_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Телефон:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.sender_phone}</p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-sm text-gray-600"><strong>Адрес отправления:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.sender_address}</p>
                  </div>
                </div>
              </div>

              {/* Информация о получателе */}
              <div className="p-4 bg-yellow-50 rounded-lg">
                <h3 className="font-bold text-lg text-yellow-700 mb-3">📍 Получатель</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600"><strong>Полное имя:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.recipient_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Телефон:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.recipient_phone}</p>
                  </div>
                  <div className="col-span-2">
                    <p className="text-sm text-gray-600"><strong>Адрес доставки:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.recipient_address}</p>
                  </div>
                </div>
              </div>

              {/* Информация об операторе */}
              <div className="p-4 bg-purple-50 rounded-lg">
                <h3 className="font-bold text-lg text-purple-700 mb-3">👨‍💼 Оператор</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600"><strong>Оператор, принявший груз:</strong></p>
                    <p className="font-medium">{selectedCargoForDetailView.accepting_operator}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600"><strong>Дата приема:</strong></p>
                    <p className="font-medium">
                      {new Date(selectedCargoForDetailView.created_at).toLocaleDateString('ru-RU')} {' '}
                      {new Date(selectedCargoForDetailView.created_at).toLocaleTimeString('ru-RU')}
                    </p>
                  </div>
                  {selectedCargoForDetailView.warehouse_location && (
                    <>
                      <div>
                        <p className="text-sm text-gray-600"><strong>Размещение:</strong></p>
                        <p className="font-medium text-blue-600">{selectedCargoForDetailView.warehouse_location}</p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600"><strong>Размещен оператором:</strong></p>
                        <p className="font-medium">{selectedCargoForDetailView.placed_by_operator || 'Не размещен'}</p>
                      </div>
                    </>
                  )}
                </div>
              </div>

              {/* Кнопки действий */}
              <div className="flex justify-end space-x-4">
                <Button variant="outline" onClick={() => setCargoDetailsModal(false)}>
                  Закрыть
                </Button>
                {(selectedCargoForDetailView.processing_status === 'paid' || selectedCargoForDetailView.processing_status === 'invoice_printed') && !selectedCargoForDetailView.warehouse_location && (
                  <Button
                    onClick={() => {
                      setCargoDetailsModal(false);
                      setCargoMoveModal(true);
                    }}
                    className="bg-blue-600 hover:bg-blue-700 text-white"
                  >
                    <Grid3X3 className="mr-2 h-4 w-4" />
                    Переместить груз
                  </Button>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно перемещения груза */}
      <Dialog open={cargoMoveModal} onOpenChange={setCargoMoveModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Grid3X3 className="w-5 h-5 mr-2 text-blue-600" />
              Переместить груз
            </DialogTitle>
            <DialogDescription>
              Груз №{selectedCargoForWarehouse?.cargo_number}
              <br />
              Текущее местоположение: {selectedCargoForWarehouse?.warehouse_location}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Информация о грузе */}
            {selectedCargoForWarehouse && (
              <div className="p-3 bg-gray-50 rounded-lg">
                <p className="font-medium text-lg">{selectedCargoForWarehouse.cargo_number}</p>
                <p className="text-sm text-gray-600">{selectedCargoForWarehouse.cargo_name}</p>
                <p className="text-sm text-gray-600">Вес: {selectedCargoForWarehouse.weight} кг</p>
              </div>
            )}

            {/* Форма перемещения */}
            <div className="grid grid-cols-3 gap-4">
              <div>
                <Label>Новый блок</Label>
                <Input
                  type="number"
                  min="1"
                  max="9"
                  value={cargoMoveForm.to_block}
                  onChange={(e) => setCargoMoveForm({
                    ...cargoMoveForm,
                    to_block: parseInt(e.target.value) || 1
                  })}
                />
              </div>
              <div>
                <Label>Новая полка</Label>
                <Input
                  type="number"
                  min="1"
                  max="3"
                  value={cargoMoveForm.to_shelf}
                  onChange={(e) => setCargoMoveForm({
                    ...cargoMoveForm,
                    to_shelf: parseInt(e.target.value) || 1
                  })}
                />
              </div>
              <div>
                <Label>Новая ячейка</Label>
                <Input
                  type="number"
                  min="1"
                  max="50"
                  value={cargoMoveForm.to_cell}
                  onChange={(e) => setCargoMoveForm({
                    ...cargoMoveForm,
                    to_cell: parseInt(e.target.value) || 1
                  })}
                />
              </div>
            </div>

            <div className="p-2 bg-blue-50 rounded text-sm text-blue-700">
              <strong>Новое местоположение:</strong> Б{cargoMoveForm.to_block}-П{cargoMoveForm.to_shelf}-Я{cargoMoveForm.to_cell}
            </div>

            {/* Кнопки */}
            <div className="flex justify-end space-x-4 pt-4">
              <Button variant="outline" onClick={() => {
                setCargoMoveModal(false);
                setCargoMoveForm({
                  to_block: 1,
                  to_shelf: 1,
                  to_cell: 1
                });
              }}>
                Отмена
              </Button>
              <Button
                onClick={handleCargoMove}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                <Grid3X3 className="mr-2 h-4 w-4" />
                Переместить
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно изменения роли пользователя */}
      <Dialog open={showRoleModal} onOpenChange={setShowRoleModal}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Изменение роли пользователя</DialogTitle>
            <DialogDescription>
              Изменение роли пользователя {selectedUserForRole?.full_name}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            {selectedUserForRole && (
              <div className="bg-gray-50 p-3 rounded-lg">
                <div className="text-sm">
                  <p><strong>Номер:</strong> {selectedUserForRole.user_number || 'N/A'}</p>
                  <p><strong>ФИО:</strong> {selectedUserForRole.full_name}</p>
                  <p><strong>Телефон:</strong> {selectedUserForRole.phone}</p>
                  <p><strong>Текущая роль:</strong> {getRoleLabel(selectedUserForRole.role)}</p>
                </div>
              </div>
            )}
            
            <div>
              <Label htmlFor="role-select">Новая роль</Label>
              <Select value={newRole} onValueChange={setNewRole}>
                <SelectTrigger>
                  <SelectValue placeholder="Выберите роль" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="user">Пользователь</SelectItem>
                  <SelectItem value="warehouse_operator">Оператор склада</SelectItem>
                  <SelectItem value="admin">Администратор</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          <div className="flex justify-end space-x-2 mt-6">
            <Button 
              variant="outline" 
              onClick={() => {
                setShowRoleModal(false);
                setSelectedUserForRole(null);
                setNewRole('');
              }}
            >
              Отмена
            </Button>
            <Button 
              onClick={handleRoleChange}
              disabled={!newRole || newRole === selectedUserForRole?.role}
            >
              Изменить роль
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно профиля оператора */}
      <Dialog open={showOperatorProfile} onOpenChange={setShowOperatorProfile}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Профиль оператора склада</DialogTitle>
            <DialogDescription>
              Детальная информация о работе оператора и статистика
            </DialogDescription>
          </DialogHeader>
          
          {profileLoading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-500">Загрузка профиля...</p>
            </div>
          ) : selectedOperatorProfile && (
            <div className="space-y-6">
              {/* Информация об операторе */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-semibold text-lg mb-3">Информация об операторе</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <label className="text-sm font-medium text-gray-500">Номер</label>
                    <p className="text-lg">{selectedOperatorProfile.user_info.user_number}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">ФИО</label>
                    <p className="text-lg">{selectedOperatorProfile.user_info.full_name}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">Телефон</label>
                    <p className="text-lg">{selectedOperatorProfile.user_info.phone}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">Статус</label>
                    <Badge variant={selectedOperatorProfile.user_info.is_active ? 'default' : 'secondary'}>
                      {selectedOperatorProfile.user_info.is_active ? 'Активен' : 'Заблокирован'}
                    </Badge>
                  </div>
                </div>
              </div>

              {/* Статистика работы */}
              <div className="bg-green-50 p-4 rounded-lg">
                <h3 className="font-semibold text-lg mb-3">Статистика работы</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {selectedOperatorProfile.work_statistics.total_cargo_accepted}
                    </div>
                    <div className="text-sm text-gray-600">Всего грузов</div>
                  </div>
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {selectedOperatorProfile.work_statistics.recent_cargo_count}
                    </div>
                    <div className="text-sm text-gray-600">За 30 дней</div>
                  </div>
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-orange-600">
                      {selectedOperatorProfile.work_statistics.avg_cargo_per_day}
                    </div>
                    <div className="text-sm text-gray-600">В день (средн.)</div>
                  </div>
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-purple-600">
                      {selectedOperatorProfile.associated_warehouses.length}
                    </div>
                    <div className="text-sm text-gray-600">Складов</div>
                  </div>
                </div>
              </div>

              {/* Связанные склады */}
              {selectedOperatorProfile.associated_warehouses.length > 0 && (
                <div>
                  <h3 className="font-semibold text-lg mb-3">Связанные склады</h3>
                  <div className="space-y-2">
                    {selectedOperatorProfile.associated_warehouses.map((warehouse, index) => (
                      <div key={`operator-warehouse-${warehouse.id || index}-${warehouse.name}`} className="bg-white border rounded-lg p-3">
                        <div className="flex justify-between items-center">
                          <div>
                            <h4 className="font-medium">{warehouse.name}</h4>
                            <p className="text-sm text-gray-600">{warehouse.location}</p>
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-medium">{warehouse.cargo_count} грузов</div>
                            <div className="text-xs text-gray-500">
                              {warehouse.binding_date && new Date(warehouse.binding_date).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Последняя активность */}
              {selectedOperatorProfile.recent_activity.length > 0 && (
                <div>
                  <h3 className="font-semibold text-lg mb-3">Последняя активность</h3>
                  <div className="space-y-2 max-h-64 overflow-y-auto">
                    {selectedOperatorProfile.recent_activity.map((activity, index) => (
                      <div key={`activity-${activity.cargo_number || index}-${activity.cargo_name}`} className="bg-white border rounded-lg p-3">
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-medium">{activity.cargo_number}</h4>
                            <p className="text-sm text-gray-600">{activity.cargo_name}</p>
                            <p className="text-sm text-gray-500">От: {activity.sender_full_name}</p>
                          </div>
                          <div className="text-right">
                            <Badge variant="outline">{activity.processing_status}</Badge>
                            <div className="text-xs text-gray-500 mt-1">
                              {new Date(activity.created_at).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно профиля пользователя */}
      <Dialog open={showUserProfile} onOpenChange={setShowUserProfile}>
        <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Профиль пользователя</DialogTitle>
            <DialogDescription>
              Детальная информация о пользователе и история отправлений
            </DialogDescription>
          </DialogHeader>
          
          {profileLoading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-500">Загрузка профиля...</p>
            </div>
          ) : selectedUserProfile && (
            <div className="space-y-6">
              {/* Информация о пользователе */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="flex justify-between items-start mb-3">
                  <h3 className="font-semibold text-lg">Информация о пользователе</h3>
                  {(user.role === 'warehouse_operator' || user.role === 'admin') && (
                    <Button
                      size="sm"
                      onClick={() => openQuickCargoFromProfile(selectedUserProfile.user_info)}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      <Plus className="mr-2 h-4 w-4" />
                      Оформить грузы
                    </Button>
                  )}
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <label className="text-sm font-medium text-gray-500">Номер</label>
                    <p className="text-lg">{selectedUserProfile.user_info.user_number}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">ФИО</label>
                    <p className="text-lg">{selectedUserProfile.user_info.full_name}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">Телефон</label>
                    <p className="text-lg">{selectedUserProfile.user_info.phone}</p>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-gray-500">Роль</label>
                    <Badge variant="outline">{getRoleLabel(selectedUserProfile.user_info.role)}</Badge>
                  </div>
                </div>
              </div>

              {/* Статистика отправлений */}
              <div className="bg-green-50 p-4 rounded-lg">
                <h3 className="font-semibold text-lg mb-3">Статистика отправлений</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {selectedUserProfile.shipping_statistics.total_sent_cargo}
                    </div>
                    <div className="text-sm text-gray-600">Отправлено</div>
                  </div>
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {selectedUserProfile.shipping_statistics.total_received_cargo}
                    </div>
                    <div className="text-sm text-gray-600">Получено</div>
                  </div>
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-orange-600">
                      {selectedUserProfile.shipping_statistics.total_cargo_requests}
                    </div>
                    <div className="text-sm text-gray-600">Заявок</div>
                  </div>
                  <div className="bg-white p-3 rounded border text-center">
                    <div className="text-2xl font-bold text-purple-600">
                      {selectedUserProfile.frequent_recipients.length}
                    </div>
                    <div className="text-sm text-gray-600">Получателей</div>
                  </div>
                </div>
              </div>

              {/* Часто используемые получатели */}
              {selectedUserProfile.frequent_recipients.length > 0 && (
                <div>
                  <h3 className="font-semibold text-lg mb-3">Часто используемые получатели</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-h-48 overflow-y-auto">
                    {selectedUserProfile.frequent_recipients.slice(0, 6).map((recipient, index) => (
                      <div key={`recipient-${index}-${recipient.recipient_full_name}`} className="bg-white border rounded-lg p-3">
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-medium">{recipient.recipient_full_name}</h4>
                            <p className="text-sm text-gray-600">{recipient.recipient_phone}</p>
                            <p className="text-xs text-gray-500">{recipient.recipient_address}</p>
                          </div>
                          <div className="text-right">
                            <div className="text-sm font-medium">{recipient.shipment_count} раз</div>
                            <div className="text-xs text-gray-500">
                              {recipient.last_sent && new Date(recipient.last_sent).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Последние отправления */}
              {selectedUserProfile.recent_shipments.length > 0 && (
                <div>
                  <h3 className="font-semibold text-lg mb-3">Последние отправления</h3>
                  <div className="space-y-2 max-h-64 overflow-y-auto">
                    {selectedUserProfile.recent_shipments.slice(0, 8).map((shipment, index) => (
                      <div key={`shipment-${shipment.cargo_number || index}-${shipment.cargo_name}`} className="bg-white border rounded-lg p-3">
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-medium">{shipment.cargo_number} - {shipment.cargo_name}</h4>
                            <p className="text-sm text-gray-600">
                              {shipment.weight} кг • {shipment.declared_value} руб
                            </p>
                            <p className="text-sm text-gray-500">
                              Получатель: {shipment.recipient_full_name}
                            </p>
                          </div>
                          <div className="text-right">
                            <Badge variant="outline">{shipment.status}</Badge>
                            <div className="text-xs text-gray-500 mt-1">
                              {new Date(shipment.created_at).toLocaleDateString('ru-RU')}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно быстрого создания груза */}
      <Dialog open={showQuickCargoModal} onOpenChange={setShowQuickCargoModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Быстрое создание груза</DialogTitle>
            <DialogDescription>
              Создание груза с автозаполнением из истории пользователя
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Выбор получателя из истории */}
            {frequentRecipients.length > 0 && (
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-semibold text-lg mb-3">Выберите получателя из истории</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-h-32 overflow-y-auto">
                  {frequentRecipients.slice(0, 6).map((recipient, index) => (
                    <button
                      key={`frequent-recipient-${index}-${recipient.recipient_phone}`}
                      className={`p-2 text-left rounded border ${
                        selectedRecipient?.recipient_phone === recipient.recipient_phone
                          ? 'bg-blue-100 border-blue-300'
                          : 'bg-white hover:bg-gray-50'
                      }`}
                      onClick={() => selectRecipientFromHistory(recipient)}
                    >
                      <div className="font-medium text-sm">{recipient.recipient_full_name}</div>
                      <div className="text-xs text-gray-600">{recipient.recipient_phone}</div>
                      <div className="text-xs text-gray-500">{recipient.shipment_count} отправлений</div>
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Данные получателя */}
            <div>
              <h3 className="font-semibold text-lg mb-3">Данные получателя</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div>
                  <Label>ФИО получателя</Label>
                  <Input
                    value={quickCargoForm.recipient_data.recipient_full_name || ''}
                    onChange={(e) => setQuickCargoForm({
                      ...quickCargoForm,
                      recipient_data: {
                        ...quickCargoForm.recipient_data,
                        recipient_full_name: e.target.value
                      }
                    })}
                    required
                  />
                </div>
                <div>
                  <Label>Телефон получателя</Label>
                  <Input
                    value={quickCargoForm.recipient_data.recipient_phone || ''}
                    onChange={(e) => setQuickCargoForm({
                      ...quickCargoForm,
                      recipient_data: {
                        ...quickCargoForm.recipient_data,
                        recipient_phone: e.target.value
                      }
                    })}
                    required
                  />
                </div>
                <div>
                  <Label>Адрес получателя</Label>
                  <Input
                    value={quickCargoForm.recipient_data.recipient_address || ''}
                    onChange={(e) => setQuickCargoForm({
                      ...quickCargoForm,
                      recipient_data: {
                        ...quickCargoForm.recipient_data,
                        recipient_address: e.target.value
                      }
                    })}
                    required
                  />
                </div>
              </div>
            </div>

            {/* Грузы */}
            <div className="bg-green-50 p-4 rounded-lg">
              <h3 className="font-semibold text-lg mb-3">Грузы</h3>
              {quickCargoForm.cargo_items.map((item, index) => (
                <div key={`quick-cargo-${index}-${item.cargo_name || 'empty'}`} className="mb-4 p-3 bg-white rounded border">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-sm">Груз #{index + 1}</span>
                    {quickCargoForm.cargo_items.length > 1 && (
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeQuickCargoItem(index)}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <div>
                      <Label>Название</Label>
                      <Input
                        value={item.cargo_name}
                        onChange={(e) => updateQuickCargoItem(index, 'cargo_name', e.target.value)}
                        placeholder="Документы, одежда..."
                        required
                      />
                    </div>
                    <div>
                      <Label>Вес (кг)</Label>
                      <Input
                        type="number"
                        step="0.1"
                        value={item.weight}
                        onChange={(e) => updateQuickCargoItem(index, 'weight', e.target.value)}
                        required
                      />
                    </div>
                    <div>
                      <Label>Цена за кг (руб.)</Label>
                      <Input
                        type="number"
                        step="0.01"
                        value={item.price_per_kg}
                        onChange={(e) => updateQuickCargoItem(index, 'price_per_kg', e.target.value)}
                        required
                      />
                    </div>
                  </div>
                  
                  {item.weight && item.price_per_kg && (
                    <div className="mt-2 p-2 bg-gray-50 rounded text-sm">
                      Стоимость: {parseFloat(item.weight)} кг × {parseFloat(item.price_per_kg)} руб/кг = 
                      <span className="font-semibold text-green-600 ml-1">
                        {(parseFloat(item.weight) * parseFloat(item.price_per_kg)).toFixed(2)} руб
                      </span>
                    </div>
                  )}
                </div>
              ))}
              
              <Button
                type="button"
                variant="outline"
                onClick={addQuickCargoItem}
                className="w-full"
              >
                <Plus className="mr-2 h-4 w-4" />
                Добавить еще груз
              </Button>
            </div>

            {/* Итоги */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <h3 className="font-semibold text-lg mb-2">Итого</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <span className="text-sm text-gray-600">Общий вес:</span>
                  <div className="text-xl font-bold text-blue-600">
                    {calculateQuickCargoTotals().totalWeight.toFixed(1)} кг
                  </div>
                </div>
                <div>
                  <span className="text-sm text-gray-600">Общая стоимость:</span>
                  <div className="text-xl font-bold text-green-600">
                    {calculateQuickCargoTotals().totalCost.toFixed(2)} руб
                  </div>
                </div>
              </div>
            </div>

            {/* Описание */}
            <div>
              <Label>Описание груза</Label>
              <textarea
                className="w-full p-2 border rounded-md"
                rows="3"
                value={quickCargoForm.description}
                onChange={(e) => setQuickCargoForm({...quickCargoForm, description: e.target.value})}
                placeholder="Дополнительная информация о грузе..."
                required
              />
            </div>

            <div className="flex justify-end space-x-2">
              <Button 
                variant="outline" 
                onClick={() => setShowQuickCargoModal(false)}
              >
                Отмена
              </Button>
              <Button 
                onClick={submitQuickCargo}
                disabled={
                  !quickCargoForm.recipient_data.recipient_full_name ||
                  !quickCargoForm.recipient_data.recipient_phone ||
                  !quickCargoForm.description ||
                  quickCargoForm.cargo_items.some(item => !item.cargo_name || !item.weight || !item.price_per_kg)
                }
              >
                Создать груз
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно редактирования профиля */}
      <Dialog open={showEditProfile} onOpenChange={setShowEditProfile}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Редактирование профиля</DialogTitle>
            <DialogDescription>
              Обновите свои личные данные
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="edit_full_name">Полное имя</Label>
              <Input
                id="edit_full_name"
                value={editProfileForm.full_name}
                onChange={(e) => setEditProfileForm({...editProfileForm, full_name: e.target.value})}
                placeholder="Введите полное имя"
              />
            </div>
            <div>
              <Label htmlFor="edit_phone">Телефон</Label>
              <Input
                id="edit_phone"
                value={editProfileForm.phone}
                onChange={(e) => setEditProfileForm({...editProfileForm, phone: e.target.value})}
                placeholder="+7XXXXXXXXXX"
              />
            </div>
            <div>
              <Label htmlFor="edit_email">Email (необязательно)</Label>
              <Input
                id="edit_email"
                type="email"
                value={editProfileForm.email}
                onChange={(e) => setEditProfileForm({...editProfileForm, email: e.target.value})}
                placeholder="example@email.com"
              />
            </div>
            <div>
              <Label htmlFor="edit_address">Адрес (необязательно)</Label>
              <Textarea
                id="edit_address"
                value={editProfileForm.address}
                onChange={(e) => setEditProfileForm({...editProfileForm, address: e.target.value})}
                placeholder="Введите ваш адрес"
                rows={3}
              />
            </div>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setShowEditProfile(false)}>
                Отмена
              </Button>
              <Button onClick={saveProfile}>
                <Save className="mr-2 h-4 w-4" />
                Сохранить
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно повторного заказа */}
      <Dialog open={showRepeatOrderModal} onOpenChange={setShowRepeatOrderModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Повторить заказ</DialogTitle>
            <DialogDescription>
              Создайте новый заказ на основе данных груза #{repeatOrderData?.cargo_number}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-6">
            {/* Информация о получателе */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="repeat_recipient_name">Получатель</Label>
                <Input
                  id="repeat_recipient_name"
                  value={repeatOrderForm.recipient_full_name}
                  onChange={(e) => setRepeatOrderForm({...repeatOrderForm, recipient_full_name: e.target.value})}
                  placeholder="ФИО получателя"
                />
              </div>
              <div>
                <Label htmlFor="repeat_recipient_phone">Телефон получателя</Label>
                <Input
                  id="repeat_recipient_phone"
                  value={repeatOrderForm.recipient_phone}
                  onChange={(e) => setRepeatOrderForm({...repeatOrderForm, recipient_phone: e.target.value})}
                  placeholder="+992XXXXXXXXX"
                />
              </div>
            </div>

            <div>
              <Label htmlFor="repeat_recipient_address">Адрес получателя</Label>
              <Textarea
                id="repeat_recipient_address"
                value={repeatOrderForm.recipient_address}
                onChange={(e) => setRepeatOrderForm({...repeatOrderForm, recipient_address: e.target.value})}
                placeholder="Полный адрес доставки"
                rows={2}
              />
            </div>

            {/* Маршрут */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="repeat_route">Маршрут</Label>
                <Select value={repeatOrderForm.route} onValueChange={(value) => setRepeatOrderForm({...repeatOrderForm, route: value})}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="moscow_dushanbe">Москва → Душанбе</SelectItem>
                    <SelectItem value="moscow_khujand">Москва → Худжанд</SelectItem>
                    <SelectItem value="moscow_kulob">Москва → Кулоб</SelectItem>
                    <SelectItem value="moscow_kurgantyube">Москва → Курган-Тюбе</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="repeat_delivery_type">Тип доставки</Label>
                <Select value={repeatOrderForm.delivery_type} onValueChange={(value) => setRepeatOrderForm({...repeatOrderForm, delivery_type: value})}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="standard">Стандартная</SelectItem>
                    <SelectItem value="express">Экспресс</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Мульти-груз форма с калькулятором */}
            <div className="border rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium">Грузы для отправки</h3>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={addRepeatOrderItem}
                >
                  <Plus className="mr-1 h-4 w-4" />
                  Добавить груз
                </Button>
              </div>

              {/* Список грузов */}
              <div className="space-y-4">
                {repeatOrderForm.cargo_items.map((item, index) => (
                  <div key={`repeat-cargo-${index}-${item.cargo_name || 'empty'}`} className="grid grid-cols-12 gap-4 items-end border rounded p-3 bg-gray-50">
                    <div className="col-span-4">
                      <Label>Название груза</Label>
                      <Input
                        value={item.cargo_name}
                        onChange={(e) => handleRepeatOrderItemChange(index, 'cargo_name', e.target.value)}
                        placeholder="Название груза"
                      />
                    </div>
                    <div className="col-span-3">
                      <Label>Вес (кг)</Label>
                      <Input
                        type="number"
                        value={item.weight}
                        onChange={(e) => handleRepeatOrderItemChange(index, 'weight', e.target.value)}
                        placeholder="0.0"
                        step="0.1"
                      />
                    </div>
                    <div className="col-span-3">
                      <Label>Цена за кг (₽)</Label>
                      <Input
                        type="number"
                        value={item.price_per_kg}
                        onChange={(e) => handleRepeatOrderItemChange(index, 'price_per_kg', e.target.value)}
                        placeholder="50"
                        step="0.01"
                      />
                    </div>
                    <div className="col-span-1">
                      <Label className="text-xs text-gray-600">Стоимость</Label>
                      <div className="text-sm font-medium">
                        {((parseFloat(item.weight) || 0) * (parseFloat(item.price_per_kg) || 0)).toFixed(2)} ₽
                      </div>
                    </div>
                    <div className="col-span-1">
                      {repeatOrderForm.cargo_items.length > 1 && (
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => removeRepeatOrderItem(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Minus className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>

              {/* Калькулятор итогов */}
              <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                <h4 className="font-medium mb-3">Расчет стоимости</h4>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {repeatOrderTotalWeight.toFixed(2)} кг
                    </div>
                    <div className="text-sm text-gray-600">Общий вес</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {repeatOrderTotalCost.toFixed(2)} ₽
                    </div>
                    <div className="text-sm text-gray-600">Общая стоимость</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-purple-600">
                      {repeatOrderForm.cargo_items.length}
                    </div>
                    <div className="text-sm text-gray-600">Количество грузов</div>
                  </div>
                </div>

                {/* Детальная разбивка */}
                {repeatOrderBreakdown.length > 0 && (
                  <div className="mt-4">
                    <h5 className="text-sm font-medium mb-2">Детализация по грузам:</h5>
                    <div className="space-y-1">
                      {repeatOrderBreakdown.map((item, index) => (
                        <div key={`repeat-breakdown-${index}-${item.name}`} className="flex justify-between text-sm">
                          <span>{item.cargo_name}: {item.weight}кг × {item.price_per_kg}₽</span>
                          <span className="font-medium">{item.cost.toFixed(2)} ₽</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Дополнительные опции */}
            <div>
              <Label htmlFor="repeat_special_instructions">Особые указания</Label>
              <Textarea
                id="repeat_special_instructions"
                value={repeatOrderForm.special_instructions}
                onChange={(e) => setRepeatOrderForm({...repeatOrderForm, special_instructions: e.target.value})}
                placeholder="Дополнительная информация для доставки"
                rows={2}
              />
            </div>

            {/* Кнопки действий */}
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setShowRepeatOrderModal(false)}>
                Отмена
              </Button>
              <Button 
                onClick={submitRepeatOrder}
                disabled={
                  !repeatOrderForm.recipient_full_name ||
                  !repeatOrderForm.recipient_phone ||
                  repeatOrderForm.cargo_items.some(item => !item.cargo_name || !item.weight || !item.price_per_kg)
                }
              >
                <ShoppingCart className="mr-2 h-4 w-4" />
                Создать заказ ({repeatOrderTotalCost.toFixed(2)} ₽)
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно редактирования пользователя админом */}
      <Dialog open={showAdminEditUser} onOpenChange={setShowAdminEditUser}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Редактирование пользователя</DialogTitle>
            <DialogDescription>
              Редактирование профиля пользователя: {selectedUserForEdit?.full_name}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="admin_edit_full_name">Полное имя</Label>
              <Input
                id="admin_edit_full_name"
                value={adminEditUserForm.full_name}
                onChange={(e) => setAdminEditUserForm({...adminEditUserForm, full_name: e.target.value})}
                placeholder="Введите полное имя"
              />
            </div>
            <div>
              <Label htmlFor="admin_edit_phone">Телефон</Label>
              <Input
                id="admin_edit_phone"
                value={adminEditUserForm.phone}
                onChange={(e) => setAdminEditUserForm({...adminEditUserForm, phone: e.target.value})}
                placeholder="+7XXXXXXXXXX"
              />
            </div>
            <div>
              <Label htmlFor="admin_edit_email">Email</Label>
              <Input
                id="admin_edit_email"
                type="email"
                value={adminEditUserForm.email}
                onChange={(e) => setAdminEditUserForm({...adminEditUserForm, email: e.target.value})}
                placeholder="example@email.com"
              />
            </div>
            <div>
              <Label htmlFor="admin_edit_address">Адрес</Label>
              <Textarea
                id="admin_edit_address"
                value={adminEditUserForm.address}
                onChange={(e) => setAdminEditUserForm({...adminEditUserForm, address: e.target.value})}
                placeholder="Введите адрес пользователя"
                rows={3}
              />
            </div>
            <div>
              <Label htmlFor="admin_edit_role">Роль</Label>
              <Select value={adminEditUserForm.role} onValueChange={(value) => setAdminEditUserForm({...adminEditUserForm, role: value})}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="user">Пользователь</SelectItem>
                  <SelectItem value="warehouse_operator">Оператор склада</SelectItem>
                  <SelectItem value="admin">Администратор</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                id="admin_edit_active"
                checked={adminEditUserForm.is_active}
                onChange={(e) => setAdminEditUserForm({...adminEditUserForm, is_active: e.target.checked})}
              />
              <Label htmlFor="admin_edit_active">Активный пользователь</Label>
            </div>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setShowAdminEditUser(false)}>
                Отмена
              </Button>
              <Button onClick={saveAdminUserEdit}>
                <Save className="mr-2 h-4 w-4" />
                Сохранить изменения
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно повторного заказа админа/оператора */}
      <Dialog open={showAdminRepeatOrderModal} onOpenChange={setShowAdminRepeatOrderModal}>
        <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Повторить заказ (Admin/Operator)</DialogTitle>
            <DialogDescription>
              Создание нового заказа на основе груза #{adminRepeatOrderData?.cargo_number}
              <br />
              <span className="text-xs text-gray-500">
                Данные отправителя и получателя автозаполнены. Заполните данные грузов.
              </span>
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-6">
            {/* Информация об отправителе (заблокированная) */}
            <div className="bg-gray-50 p-4 rounded-lg">
              <h3 className="text-lg font-medium mb-3 flex items-center">
                <User className="mr-2 h-5 w-5" />
                Отправитель (автозаполнено)
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>ФИО отправителя</Label>
                  <Input
                    value={adminRepeatOrderForm.sender_full_name}
                    onChange={(e) => setAdminRepeatOrderForm({...adminRepeatOrderForm, sender_full_name: e.target.value})}
                    placeholder="ФИО отправителя"
                  />
                </div>
                <div>
                  <Label>Телефон отправителя</Label>
                  <Input
                    value={adminRepeatOrderForm.sender_phone}
                    onChange={(e) => setAdminRepeatOrderForm({...adminRepeatOrderForm, sender_phone: e.target.value})}
                    placeholder="+7XXXXXXXXXX"
                  />
                </div>
              </div>
            </div>

            {/* Информация о получателе (автозаполненная) */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="text-lg font-medium mb-3 flex items-center">
                <MapPin className="mr-2 h-5 w-5" />
                Получатель (автозаполнено)
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>ФИО получателя</Label>
                  <Input
                    value={adminRepeatOrderForm.recipient_full_name}
                    onChange={(e) => setAdminRepeatOrderForm({...adminRepeatOrderForm, recipient_full_name: e.target.value})}
                    placeholder="ФИО получателя"
                  />
                </div>
                <div>
                  <Label>Телефон получателя</Label>
                  <Input
                    value={adminRepeatOrderForm.recipient_phone}
                    onChange={(e) => setAdminRepeatOrderForm({...adminRepeatOrderForm, recipient_phone: e.target.value})}
                    placeholder="+992XXXXXXXXX"
                  />
                </div>
              </div>
              <div className="mt-4">
                <Label>Адрес получателя</Label>
                <Textarea
                  value={adminRepeatOrderForm.recipient_address}
                  onChange={(e) => setAdminRepeatOrderForm({...adminRepeatOrderForm, recipient_address: e.target.value})}
                  placeholder="Полный адрес доставки"
                  rows={2}
                />
              </div>
            </div>

            {/* Маршрут и тип доставки */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label>Маршрут</Label>
                <Select value={adminRepeatOrderForm.route} onValueChange={(value) => setAdminRepeatOrderForm({...adminRepeatOrderForm, route: value})}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="moscow_dushanbe">Москва → Душанбе</SelectItem>
                    <SelectItem value="moscow_khujand">Москва → Худжанд</SelectItem>
                    <SelectItem value="moscow_kulob">Москва → Кулоб</SelectItem>
                    <SelectItem value="moscow_kurgantyube">Москва → Курган-Тюбе</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label>Тип доставки</Label>
                <Select value={adminRepeatOrderForm.delivery_type} onValueChange={(value) => setAdminRepeatOrderForm({...adminRepeatOrderForm, delivery_type: value})}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="standard">Стандартная</SelectItem>
                    <SelectItem value="express">Экспресс</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Мульти-груз форма с калькулятором для админа */}
            <div className="border rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium flex items-center">
                  <Package className="mr-2 h-5 w-5" />
                  Грузы для отправки (заполните заново)
                </h3>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={addAdminRepeatOrderItem}
                >
                  <Plus className="mr-1 h-4 w-4" />
                  Добавить груз
                </Button>
              </div>

              {/* Список грузов */}
              <div className="space-y-4">
                {adminRepeatOrderForm.cargo_items.map((item, index) => (
                  <div key={`repeat-cargo-${index}-${item.cargo_name || 'empty'}`} className="grid grid-cols-12 gap-4 items-end border rounded p-3 bg-gray-50">
                    <div className="col-span-4">
                      <Label>Название груза *</Label>
                      <Input
                        value={item.cargo_name}
                        onChange={(e) => handleAdminRepeatOrderItemChange(index, 'cargo_name', e.target.value)}
                        placeholder="Название груза"
                      />
                    </div>
                    <div className="col-span-3">
                      <Label>Вес (кг) *</Label>
                      <Input
                        type="number"
                        value={item.weight}
                        onChange={(e) => handleAdminRepeatOrderItemChange(index, 'weight', e.target.value)}
                        placeholder="0.0"
                        step="0.1"
                      />
                    </div>
                    <div className="col-span-3">
                      <Label>Цена за кг (₽) *</Label>
                      <Input
                        type="number"
                        value={item.price_per_kg}
                        onChange={(e) => handleAdminRepeatOrderItemChange(index, 'price_per_kg', e.target.value)}
                        placeholder="50"
                        step="0.01"
                      />
                    </div>
                    <div className="col-span-1">
                      <Label className="text-xs text-gray-600">Стоимость</Label>
                      <div className="text-sm font-medium">
                        {((parseFloat(item.weight) || 0) * (parseFloat(item.price_per_kg) || 0)).toFixed(2)} ₽
                      </div>
                    </div>
                    <div className="col-span-1">
                      {adminRepeatOrderForm.cargo_items.length > 1 && (
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => removeAdminRepeatOrderItem(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Minus className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>

              {/* Калькулятор итогов для админа */}
              <div className="mt-4 p-4 bg-green-50 rounded-lg">
                <h4 className="font-medium mb-3 flex items-center">
                  <Calculator className="mr-2 h-4 w-4" />
                  Расчет стоимости
                </h4>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {adminRepeatOrderTotalWeight.toFixed(2)} кг
                    </div>
                    <div className="text-sm text-gray-600">Общий вес</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      {adminRepeatOrderTotalCost.toFixed(2)} ₽
                    </div>
                    <div className="text-sm text-gray-600">Общая стоимость</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-purple-600">
                      {adminRepeatOrderForm.cargo_items.length}
                    </div>
                    <div className="text-sm text-gray-600">Количество грузов</div>
                  </div>
                </div>

                {/* Детальная разбивка */}
                {adminRepeatOrderBreakdown.length > 0 && (
                  <div className="mt-4">
                    <h5 className="text-sm font-medium mb-2">Детализация по грузам:</h5>
                    <div className="space-y-1">
                      {adminRepeatOrderBreakdown.map((item, index) => (
                        <div key={`admin-repeat-breakdown-${index}-${item.cargo_name || index}`} className="flex justify-between text-sm">
                          <span>{item.cargo_name || `Груз ${index + 1}`}: {item.weight}кг × {item.price_per_kg}₽</span>
                          <span className="font-medium">{item.cost.toFixed(2)} ₽</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Дополнительные опции */}
            <div>
              <Label>Особые указания</Label>
              <Textarea
                value={adminRepeatOrderForm.special_instructions}
                onChange={(e) => setAdminRepeatOrderForm({...adminRepeatOrderForm, special_instructions: e.target.value})}
                placeholder="Дополнительная информация для доставки"
                rows={2}
              />
            </div>

            {/* Кнопки действий */}
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={() => setShowAdminRepeatOrderModal(false)}>
                Отмена
              </Button>
              <Button 
                onClick={submitAdminRepeatOrder}
                disabled={
                  !adminRepeatOrderForm.recipient_full_name ||
                  !adminRepeatOrderForm.recipient_phone ||
                  !adminRepeatOrderForm.sender_full_name ||
                  !adminRepeatOrderForm.sender_phone ||
                  adminRepeatOrderForm.cargo_items.some(item => !item.cargo_name || !item.weight || !item.price_per_kg)
                }
                className="bg-orange-600 hover:bg-orange-700 text-white"
              >
                <ShoppingCart className="mr-2 h-4 w-4" />
                Создать заказ ({adminRepeatOrderTotalCost.toFixed(2)} ₽)
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно улучшенного размещения груза с аналитикой */}
      <Dialog open={enhancedPlacementModal} onOpenChange={setEnhancedPlacementModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Grid3X3 className="mr-2 h-5 w-5" />
              Размещение груза с аналитикой складов
            </DialogTitle>
            <DialogDescription>
              {selectedCargoForEnhancedPlacement && (
                <span>Размещение груза: <strong>{selectedCargoForEnhancedPlacement.cargo_number}</strong> - {selectedCargoForEnhancedPlacement.cargo_name}</span>
              )}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Информация о грузе */}
            {selectedCargoForEnhancedPlacement && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h3 className="font-semibold text-blue-800 mb-3 flex items-center">
                  <Package className="mr-2 h-4 w-4" />
                  Информация о размещаемом грузе
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <p><strong>Номер груза:</strong> {selectedCargoForEnhancedPlacement.cargo_number}</p>
                    <p><strong>Наименование:</strong> {selectedCargoForEnhancedPlacement.cargo_name}</p>
                    <p><strong>Общий вес:</strong> {selectedCargoForEnhancedPlacement.total_weight} кг</p>
                  </div>
                  <div>
                    <p><strong>Стоимость:</strong> {selectedCargoForEnhancedPlacement.total_cost} руб</p>
                    <p><strong>Отправитель:</strong> {selectedCargoForEnhancedPlacement.sender_name}</p>
                    <p><strong>Получатель:</strong> {selectedCargoForEnhancedPlacement.receiver_name}</p>
                  </div>
                </div>
              </div>
            )}

            {/* Аналитика складов */}
            {warehouseAnalytics && (
              <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                <h3 className="font-semibold text-green-800 mb-3 flex items-center">
                  <Warehouse className="mr-2 h-4 w-4" />
                  Аналитика складов
                </h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  <div className="text-center p-3 bg-white rounded border">
                    <div className="text-2xl font-bold text-blue-600">{warehouseAnalytics.total_warehouses || 0}</div>
                    <div className="text-sm text-gray-600">Всего складов</div>
                  </div>
                  <div className="text-center p-3 bg-white rounded border">
                    <div className="text-2xl font-bold text-green-600">{warehouseAnalytics.available_cells || 0}</div>
                    <div className="text-sm text-gray-600">Свободных ячеек</div>
                  </div>
                  <div className="text-center p-3 bg-white rounded border">
                    <div className="text-2xl font-bold text-orange-600">{warehouseAnalytics.occupied_cells || 0}</div>
                    <div className="text-sm text-gray-600">Занятых ячеек</div>
                  </div>
                </div>
              </div>
            )}

            {/* Выбор склада */}
            <div className="space-y-4">
              <h3 className="font-semibold text-lg flex items-center">
                <Building className="mr-2 h-5 w-5" />
                Выбор склада
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {warehouses.map((warehouse) => (
                  <div
                    key={warehouse.id}
                    className={`border-2 rounded-lg p-4 cursor-pointer transition-all ${
                      selectedWarehouseForPlacement === warehouse.id
                        ? 'border-blue-500 bg-blue-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handleWarehouseSelectionForPlacement(warehouse.id)}
                  >
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="font-medium">{warehouse.name}</h4>
                      {selectedWarehouseForPlacement === warehouse.id && (
                        <CheckCircle className="h-5 w-5 text-blue-500" />
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{warehouse.address}</p>
                    <div className="flex justify-between text-xs">
                      <span>Блоки: {warehouse.blocks_count || 10}</span>
                      <span>Полки: {warehouse.shelves_per_block || 10}</span>
                      <span>Ячейки: {warehouse.cells_per_shelf || 10}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Выбор блока, полки и ячейки */}
            {selectedWarehouseForPlacement && (
              <div className="space-y-4 bg-gray-50 border border-gray-200 rounded-lg p-4">
                <h3 className="font-semibold text-lg flex items-center">
                  <MapPin className="mr-2 h-5 w-5" />
                  Выбор местоположения
                  {structureLoading && (
                    <RefreshCw className="ml-2 h-4 w-4 animate-spin text-blue-500" />
                  )}
                </h3>
                
                {/* Показываем статистику склада */}
                {warehouseDetailedStructure?.statistics && (
                  <div className="bg-white border border-gray-200 rounded-lg p-3 mb-4">
                    <div className="grid grid-cols-3 gap-4 text-center">
                      <div>
                        <div className="text-lg font-bold text-blue-600">{warehouseDetailedStructure.statistics.total_cells}</div>
                        <div className="text-xs text-gray-600">Всего ячеек</div>
                      </div>
                      <div>
                        <div className="text-lg font-bold text-green-600">{warehouseDetailedStructure.statistics.available_cells}</div>
                        <div className="text-xs text-gray-600">Свободных</div>
                      </div>
                      <div>
                        <div className="text-lg font-bold text-red-600">{warehouseDetailedStructure.statistics.occupied_cells}</div>
                        <div className="text-xs text-gray-600">Занятых</div>
                      </div>
                    </div>
                    <div className="mt-2 text-center">
                      <div className="text-sm text-gray-600">
                        Занятость: {warehouseDetailedStructure.statistics.occupancy_rate}%
                      </div>
                    </div>
                  </div>
                )}

                {/* Селекторы для выбора места */}
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  {/* Выбор блока */}
                  <div>
                    <Label>Блок</Label>
                    <Select 
                      value={selectedBlockForPlacement.toString()} 
                      onValueChange={(value) => {
                        const blockNumber = parseInt(value);
                        handleBlockShelfSelection(blockNumber, selectedShelfForPlacement);
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {warehouseDetailedStructure?.blocks?.map(block => (
                          <SelectItem key={block.block_number} value={block.block_number.toString()}>
                            Блок {block.block_number}
                          </SelectItem>
                        )) || 
                        Array.from({length: 10}, (_, i) => i + 1).map(blockNum => (
                          <SelectItem key={blockNum} value={blockNum.toString()}>
                            Блок {blockNum}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Выбор полки */}
                  <div>
                    <Label>Полка</Label>
                    <Select 
                      value={selectedShelfForPlacement.toString()} 
                      onValueChange={(value) => {
                        const shelfNumber = parseInt(value);
                        handleBlockShelfSelection(selectedBlockForPlacement, shelfNumber);
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {warehouseDetailedStructure?.blocks?.find(b => b.block_number === selectedBlockForPlacement)?.shelves?.map(shelf => (
                          <SelectItem key={shelf.shelf_number} value={shelf.shelf_number.toString()}>
                            Полка {shelf.shelf_number}
                          </SelectItem>
                        )) ||
                        Array.from({length: 10}, (_, i) => i + 1).map(shelfNum => (
                          <SelectItem key={shelfNum} value={shelfNum.toString()}>
                            Полка {shelfNum}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Выбор ячейки */}
                  <div>
                    <Label>Ячейка</Label>
                    <Select 
                      value={selectedCellForPlacement.toString()} 
                      onValueChange={(value) => handleCellSelection(parseInt(value))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {warehouseDetailedStructure?.blocks
                          ?.find(b => b.block_number === selectedBlockForPlacement)?.shelves
                          ?.find(s => s.shelf_number === selectedShelfForPlacement)?.cells
                          ?.map(cell => (
                            <SelectItem 
                              key={cell.cell_number} 
                              value={cell.cell_number.toString()}
                              disabled={cell.status === 'occupied'}
                              className={cell.status === 'occupied' ? 'text-red-500' : 'text-green-600'}
                            >
                              Ячейка {cell.cell_number} {cell.status === 'occupied' ? '(ЗАНЯТА)' : '(свободна)'}
                              {cell.cargo_info && (
                                <span className="text-xs block text-red-600">
                                  {cell.cargo_info.cargo_number}
                                </span>
                              )}
                            </SelectItem>
                          )) ||
                          availableCellsForPlacement.map(cellNum => (
                            <SelectItem key={cellNum} value={cellNum.toString()}>
                              Ячейка {cellNum} (свободна)
                            </SelectItem>
                          )) ||
                          Array.from({length: 10}, (_, i) => i + 1).map(cellNum => (
                            <SelectItem key={cellNum} value={cellNum.toString()}>
                              Ячейка {cellNum}
                            </SelectItem>
                          ))
                        }
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Визуальная сетка ячеек для выбранной полки */}
                {warehouseDetailedStructure && (
                  <div className="mt-6">
                    <h4 className="font-medium mb-3 flex items-center">
                      <Grid3X3 className="mr-2 h-4 w-4" />
                      Визуализация полки {selectedShelfForPlacement} (Блок {selectedBlockForPlacement})
                    </h4>
                    <div className="border border-gray-300 rounded-lg p-4 bg-white">
                      <div className="grid grid-cols-5 gap-2 max-w-lg">
                        {warehouseDetailedStructure.blocks
                          ?.find(b => b.block_number === selectedBlockForPlacement)?.shelves
                          ?.find(s => s.shelf_number === selectedShelfForPlacement)?.cells
                          ?.map(cell => (
                            <button
                              key={cell.cell_number}
                              onClick={() => handleCellSelection(cell.cell_number)}
                              disabled={cell.status === 'occupied'}
                              className={`
                                w-12 h-12 rounded border-2 text-xs font-medium transition-all
                                ${cell.cell_number === selectedCellForPlacement 
                                  ? 'border-blue-500 bg-blue-100 text-blue-700 shadow-md' 
                                  : cell.status === 'occupied' 
                                  ? 'border-red-300 bg-red-100 text-red-600 cursor-not-allowed opacity-60'
                                  : 'border-gray-300 bg-green-50 text-green-700 hover:border-green-400 hover:bg-green-100'
                                }
                              `}
                              title={cell.status === 'occupied' 
                                ? `Занята: ${cell.cargo_info?.cargo_number || 'Груз'}`
                                : `Свободна: Ячейка ${cell.cell_number}`
                              }
                            >
                              {cell.cell_number}
                            </button>
                          )) ||
                          // Fallback если нет детальных данных
                          Array.from({length: 10}, (_, i) => i + 1).map(cellNum => (
                            <button
                              key={cellNum}
                              onClick={() => handleCellSelection(cellNum)}
                              className={`
                                w-12 h-12 rounded border-2 text-xs font-medium transition-all
                                ${cellNum === selectedCellForPlacement 
                                  ? 'border-blue-500 bg-blue-100 text-blue-700 shadow-md' 
                                  : 'border-gray-300 bg-green-50 text-green-700 hover:border-green-400 hover:bg-green-100'
                                }
                              `}
                            >
                              {cellNum}
                            </button>
                          ))
                        }
                      </div>
                      
                      {/* Легенда */}
                      <div className="flex flex-wrap gap-4 mt-4 text-xs">
                        <div className="flex items-center">
                          <div className="w-4 h-4 bg-green-50 border border-gray-300 rounded mr-2"></div>
                          <span>Свободная</span>
                        </div>
                        <div className="flex items-center">
                          <div className="w-4 h-4 bg-red-100 border border-red-300 rounded mr-2"></div>
                          <span>Занятая</span>
                        </div>
                        <div className="flex items-center">
                          <div className="w-4 h-4 bg-blue-100 border-2 border-blue-500 rounded mr-2"></div>
                          <span>Выбранная</span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Предпросмотр адреса */}
                <div className="mt-4 p-3 bg-white border rounded-lg">
                  <p className="text-sm text-gray-600 mb-1">Адрес размещения:</p>
                  <p className="font-mono text-lg font-bold">
                    {warehouses.find(w => w.id === selectedWarehouseForPlacement)?.name || 'Склад'} - 
                    Блок {selectedBlockForPlacement} - 
                    Полка {selectedShelfForPlacement} - 
                    Ячейка {selectedCellForPlacement}
                    {!isCellAvailable(selectedBlockForPlacement, selectedShelfForPlacement, selectedCellForPlacement) && (
                      <span className="text-red-600 ml-2">⚠️ ЗАНЯТА</span>
                    )}
                  </p>
                  {selectedCellForVisualization?.info?.cargo_info && (
                    <div className="mt-2 text-sm text-red-600">
                      <strong>Внимание!</strong> Ячейка занята грузом: {selectedCellForVisualization.info.cargo_info.cargo_number}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Кнопки действий */}
            <div className="flex justify-end space-x-2 pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={() => setEnhancedPlacementModal(false)}
                disabled={placementLoading}
              >
                Отмена
              </Button>
              <Button
                onClick={handleEnhancedCargoPlacement}
                disabled={
                  !selectedCargoForEnhancedPlacement || 
                  !selectedWarehouseForPlacement || 
                  placementLoading ||
                  !isCellAvailable(selectedBlockForPlacement, selectedShelfForPlacement, selectedCellForPlacement)
                }
                className={`${
                  isCellAvailable(selectedBlockForPlacement, selectedShelfForPlacement, selectedCellForPlacement)
                    ? 'bg-green-600 hover:bg-green-700 text-white'
                    : 'bg-red-500 hover:bg-red-600 text-white'
                }`}
              >
                {placementLoading ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Размещение...
                  </>
                ) : !isCellAvailable(selectedBlockForPlacement, selectedShelfForPlacement, selectedCellForPlacement) ? (
                  <>
                    <Ban className="mr-2 h-4 w-4" />
                    Ячейка занята
                  </>
                ) : (
                  <>
                    <Grid3X3 className="mr-2 h-4 w-4" />
                    Сохранить размещение
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Модальное окно подтверждения удаления */}
      <Dialog open={deleteConfirmModal} onOpenChange={setDeleteConfirmModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="text-red-600">
              <Trash2 className="mr-2 h-5 w-5 inline" />
              Подтвердите удаление
            </DialogTitle>
          </DialogHeader>
          
          {deleteConfirmData && (
            <div className="space-y-4">
              <div className="p-4 bg-red-50 rounded-lg border border-red-200">
                <h4 className="font-medium text-red-800 mb-2">
                  {deleteConfirmData.isBulk 
                    ? `Удаление ${deleteConfirmData.count} элемент(ов)` 
                    : 'Удаление элемента'
                  }
                </h4>
                <p className="text-sm text-red-700">
                  {deleteConfirmData.type === 'warehouse' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} склад(ов)? Это действие необратимо.`
                      : `Вы уверены, что хотите удалить склад "${deleteConfirmData.items[0]?.name}"? Это действие необратимо.`
                  )}
                  {deleteConfirmData.type === 'cargo' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} груз(ов)? ВНИМАНИЕ: Если груз размещен на складе или в транспорте, удаление может повлиять на логистику. Это действие необратимо.`
                      : `Вы уверены, что хотите удалить груз "${deleteConfirmData.items[0]?.cargo_number}"? ВНИМАНИЕ: Если груз размещен на складе или в транспорте, удаление может повлиять на логистику. Это действие необратимо.`
                  )}
                  {deleteConfirmData.type === 'user' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} пользовател(ей)? Это действие необратимо.`
                      : `Вы уверены, что хотите удалить пользователя "${deleteConfirmData.items[0]?.full_name}"? Это действие необратимо.`
                  )}
                  {deleteConfirmData.type === 'request' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} заявк(и)? Это действие необратимо.`
                      : `Вы уверены, что хотите удалить заявку "${deleteConfirmData.items[0]?.request_number}"? Это действие необратимо.`
                  )}
                  {deleteConfirmData.type === 'operator' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} оператор(ов)? Это действие необратимо.`
                      : `Вы уверены, что хотите удалить оператора "${deleteConfirmData.items[0]?.full_name}"? Это действие необратимо.`
                  )}
                  {deleteConfirmData.type === 'transport' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} транспорт(ов)? ВНИМАНИЕ: Сначала удаляются только ПУСТЫЕ транспорты. Для транспортов с грузом будет предложено принудительное удаление. Это действие необратимо.`
                      : `Вы уверены, что хотите удалить транспорт "${deleteConfirmData.items[0]?.transport_number}"? ВНИМАНИЕ: Если транспорт содержит груз, будет предложено принудительное удаление с перемещением груза в статус "Без транспорта". Это действие необратимо.`
                  )}
                  {deleteConfirmData.type === 'pickup-request' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} заявк(и) на забор? ВНИМАНИЕ: Завершенные заявки удалить нельзя. Это действие необратимо.`
                      : `Вы уверены, что хотите удалить заявку на забор "${deleteConfirmData.items[0]?.request_number}"? Это действие необратимо.`
                  )}
                  {deleteConfirmData.type === 'cargo-placement' && (
                    deleteConfirmData.isBulk 
                      ? `Вы уверены, что хотите удалить ${deleteConfirmData.count} груз(ов) из системы? ВНИМАНИЕ: Грузы будут удалены из размещения и получат статус "removed_from_placement". Это действие необратимо!`
                      : `Вы уверены, что хотите удалить груз "${deleteConfirmData.items[0]?.cargo_number}" из системы? ВНИМАНИЕ: Груз будет удален из размещения и получит статус "removed_from_placement". Это действие необратимо!`
                  )}
                </p>
              </div>

              <div className="flex justify-end space-x-2">
                <Button
                  variant="outline"
                  onClick={() => setDeleteConfirmModal(false)}
                  disabled={bulkDeleteLoading}
                >
                  Отмена
                </Button>
                <Button
                  onClick={executeDelete}
                  disabled={bulkDeleteLoading}
                  className="bg-red-600 hover:bg-red-700 text-white"
                >
                  {bulkDeleteLoading ? (
                    <>
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                      Удаление...
                    </>
                  ) : (
                    <>
                      <Trash2 className="mr-2 h-4 w-4" />
                      Удалить
                    </>
                  )}
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно деталей уведомления */}
      <Dialog open={notificationDetailsModal} onOpenChange={setNotificationDetailsModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Bell className="mr-2 h-5 w-5 text-blue-600" />
              Детали уведомления
            </DialogTitle>
          </DialogHeader>
          
          {selectedNotificationDetails && (
            <div className="space-y-4">
              <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                <p className="text-sm text-gray-800 leading-relaxed mb-2">
                  {selectedNotificationDetails.notification.message}
                </p>
                <p className="text-xs text-gray-500">
                  📅 {new Date(selectedNotificationDetails.notification.created_at).toLocaleString('ru-RU')}
                </p>
                {selectedNotificationDetails.notification.status === 'unread' && (
                  <div className="mt-2">
                    <span className="inline-block px-2 py-1 text-xs bg-red-100 text-red-600 rounded">
                      Непрочитанное
                    </span>
                  </div>
                )}
              </div>

              {/* Связанные данные если есть */}
              {selectedNotificationDetails.related_data && (
                <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                  <h4 className="font-medium text-gray-800 mb-2">📦 Связанная информация</h4>
                  {selectedNotificationDetails.related_data.type === 'cargo' && (
                    <div className="space-y-2 text-sm">
                      <p><strong>Номер груза:</strong> {selectedNotificationDetails.related_data.data.cargo_number}</p>
                      <p><strong>Отправитель:</strong> {selectedNotificationDetails.related_data.data.sender_full_name}</p>
                      <p><strong>Получатель:</strong> {selectedNotificationDetails.related_data.data.recipient_full_name}</p>
                      <p><strong>Вес:</strong> {selectedNotificationDetails.related_data.data.weight} кг</p>
                      <p><strong>Статус:</strong> {selectedNotificationDetails.related_data.data.status}</p>
                    </div>
                  )}
                </div>
              )}

              <div className="flex justify-end space-x-2">
                <Button
                  variant="outline"
                  onClick={() => setNotificationDetailsModal(false)}
                >
                  Закрыть
                </Button>
                {selectedNotificationDetails.notification.status === 'unread' && (
                  <Button
                    onClick={() => {
                      handleMarkNotificationAsRead(selectedNotificationDetails.notification.id);
                      setNotificationDetailsModal(false);
                    }}
                    className="bg-green-600 hover:bg-green-700 text-white"
                  >
                    Отметить как прочитанное
                  </Button>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНОЕ ОКНО СХЕМЫ СКЛАДА (ФАЗА 3) */}
      <Dialog open={!!showWarehouseScheme} onOpenChange={() => setShowWarehouseScheme(null)}>
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Grid3X3 className="mr-2 h-5 w-5" />
              Схема склада
            </DialogTitle>
            <DialogDescription>
              {showWarehouseScheme && (
                <span>
                  Визуализация ячеек склада: <strong>
                    {(() => {
                      const warehousesList = user?.role === 'admin' ? warehouses : operatorWarehouses;
                      return warehousesList.find(w => w.id === showWarehouseScheme)?.name || 'Неизвестный склад';
                    })()}
                  </strong>
                </span>
              )}
            </DialogDescription>
          </DialogHeader>
          
          {showWarehouseScheme && (
            <div className="space-y-6">
              {/* Общая статистика */}
              <div className="grid grid-cols-4 gap-4">
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-blue-700">Всего блоков</p>
                      <p className="text-2xl font-bold text-blue-900">
                        {(() => {
                          const warehousesList = user?.role === 'admin' ? warehouses : operatorWarehouses;
                          return warehousesList.find(w => w.id === showWarehouseScheme)?.blocks_count || 0;
                        })()}
                      </p>
                    </div>
                    <Building className="h-8 w-8 text-blue-600" />
                  </div>
                </div>
                
                <div className="bg-gray-50 p-4 rounded-lg border border-gray-200">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-gray-700">Всего ячеек</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {(() => {
                          const warehousesList = user?.role === 'admin' ? warehouses : operatorWarehouses;
                          const warehouse = warehousesList.find(w => w.id === showWarehouseScheme);
                          return warehouse?.total_cells || 
                                 ((warehouse?.blocks_count || 0) * (warehouse?.shelves_per_block || 0) * (warehouse?.cells_per_shelf || 0)) || 0;
                        })()}
                      </p>
                    </div>
                    <Grid3X3 className="h-8 w-8 text-gray-600" />
                  </div>
                </div>
                
                <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-red-700">Занято</p>
                      <p className="text-2xl font-bold text-red-900">
                        {(() => {
                          // ИСПРАВЛЕНИЕ: Используем реальные данные из warehouseSchemeData
                          return warehouseSchemeData.reduce((total, block) => total + block.occupied_cells, 0);
                        })()}
                      </p>
                    </div>
                    <Package className="h-8 w-8 text-red-600" />
                  </div>
                </div>
                
                <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-green-700">Свободно</p>
                      <p className="text-2xl font-bold text-green-900">
                        {(() => {
                          // ИСПРАВЛЕНИЕ: Используем реальные данные из warehouseSchemeData
                          const totalCells = warehouseSchemeData.reduce((total, block) => total + block.total_cells, 0);
                          const occupiedCells = warehouseSchemeData.reduce((total, block) => total + block.occupied_cells, 0);
                          return totalCells - occupiedCells;
                        })()}
                      </p>
                    </div>
                    <CheckCircle className="h-8 w-8 text-green-600" />
                  </div>
                </div>
              </div>

              {/* Легенда */}
              <div className="bg-gray-50 p-4 rounded-lg border">
                <h4 className="font-semibold text-sm text-gray-700 mb-3">🎨 Легенда ячеек и группировки грузов</h4>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <p className="font-medium text-gray-700 mb-2">Статус ячеек:</p>
                    <div className="flex items-center space-x-2">
                      <div className="w-6 h-6 bg-green-200 border border-green-400 rounded"></div>
                      <span className="text-sm font-medium text-green-700">Свободная ячейка</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-6 h-6 bg-red-200 border border-red-400 rounded"></div>
                      <span className="text-sm font-medium text-red-700">Одиночный груз</span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <p className="font-medium text-gray-700 mb-2">Группы грузов одного клиента:</p>
                    <div className="flex items-center space-x-2">
                      <div className="w-6 h-6 bg-blue-200 border border-blue-400 rounded"></div>
                      <span className="text-sm font-medium text-blue-700">Группа 1</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-6 h-6 bg-purple-200 border border-purple-400 rounded"></div>
                      <span className="text-sm font-medium text-purple-700">Группа 2</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <div className="w-6 h-6 bg-orange-200 border border-orange-400 rounded"></div>
                      <span className="text-sm font-medium text-orange-700">Группа 3+</span>
                    </div>
                  </div>
                </div>
                <p className="text-xs text-gray-500 mt-3">
                  Ячейки одного цвета содержат грузы от одного отправителя или для одного получателя
                </p>
              </div>

              {/* Схема блоков и ячеек */}
              <div className="space-y-6">
                {warehouseSchemeLoading ? (
                  <div className="flex justify-center items-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <span className="ml-2 text-gray-600">Загрузка схемы склада...</span>
                  </div>
                ) : (
                  warehouseSchemeData.map((block) => {
                    // Группируем ячейки блока по полкам для правильного отображения
                    const cellsByShelf = block.cells.reduce((shelves, cell) => {
                      const shelfKey = cell.shelf_number;
                      if (!shelves[shelfKey]) {
                        shelves[shelfKey] = [];
                      }
                      shelves[shelfKey].push(cell);
                      return shelves;
                    }, {});

                    return (
                      <div key={block.block_number} className="border rounded-lg p-6 bg-white">
                        <div className="flex justify-between items-center mb-6">
                          <h3 className="font-bold text-xl text-gray-800">
                            🏭 Блок {block.block_number}
                          </h3>
                          <div className="text-sm text-gray-600 bg-gray-100 px-3 py-1 rounded-lg">
                            Занято: {block.occupied_cells}/{block.total_cells} ячеек 
                            ({Math.round((block.occupied_cells / block.total_cells) * 100)}%)
                          </div>
                        </div>
                        
                        {/* ИСПРАВЛЕНИЕ: Отображаем ячейки группами по полкам */}
                        <div className="space-y-6">
                          {Object.keys(cellsByShelf)
                            .sort((a, b) => parseInt(a) - parseInt(b))
                            .map(shelfNumber => {
                              const shelfCells = cellsByShelf[shelfNumber].sort((a, b) => a.cell_number - b.cell_number);
                              
                              return (
                                <div key={shelfNumber} className="bg-gray-50 rounded-lg p-4">
                                  <div className="flex items-center justify-between mb-3">
                                    <h4 className="font-semibold text-gray-700 flex items-center">
                                      <Package className="mr-2 h-4 w-4" />
                                      Полка {shelfNumber}
                                    </h4>
                                    <span className="text-xs text-gray-500 bg-white px-2 py-1 rounded">
                                      {shelfCells.filter(c => c.is_occupied).length}/{shelfCells.length} занято
                                    </span>
                                  </div>
                                  
                                  {/* Сетка ячеек для данной полки */}
                                  <div className="grid gap-2" style={{
                                    gridTemplateColumns: `repeat(${shelfCells.length}, minmax(80px, 1fr))`
                                  }}>
                                    {shelfCells.map((cell) => {
                                      // Определяем цвет ячейки
                                      let cellStyle = '';
                                      if (!cell.is_occupied) {
                                        cellStyle = 'bg-green-100 border-green-300 hover:bg-green-200';
                                      } else if (cell.hasRelatedCargo && cell.clientGroup && cell.clientGroup.color) {
                                        // Груз из группы - используем цвет группы
                                        const color = cell.clientGroup.color;
                                        cellStyle = `${color.bg} ${color.border} hover:opacity-80`;
                                      } else {
                                        // Одиночный груз
                                        cellStyle = 'bg-red-100 border-red-300 hover:bg-red-200';
                                      }
                                      
                                      return (
                                        <div
                                          key={cell.id}
                                          className={`
                                            relative border-2 rounded-lg p-3 text-center cursor-pointer transition-all hover:scale-105 min-h-20
                                            ${cellStyle}
                                          `}
                                          onClick={() => {
                                            if (cell.is_occupied) {
                                              openCargoManagementModal(cell);
                                            }
                                          }}
                                          title={cell.is_occupied ? 
                                            (cell.hasRelatedCargo && cell.relatedCargo ? 
                                              `Груз из группы ${cell.groupType === 'sender' ? 'отправителя' : 'получателя'}: ${cell.relatedCargo.client_name} (всего грузов: ${cell.relatedCargo.totalCargo})` :
                                              `Груз: ${cell.cargo_number} от ${cell.cargo_sender}`
                                            ) : 
                                            'Свободная ячейка'
                                          }
                                        >
                                          <div className="text-xs font-bold text-gray-800 mb-1">
                                            Я{cell.cell_number}
                                          </div>
                                          {cell.is_occupied ? (
                                            <div className="space-y-1">
                                              <div className={`text-xs font-bold ${
                                                cell.hasRelatedCargo && cell.clientGroup && cell.clientGroup.color ? 
                                                  cell.clientGroup.color.text : 
                                                  'text-red-800'
                                              }`}>
                                                {cell.hasRelatedCargo ? 'ГРУППА' : 'ЗАНЯТО'}
                                              </div>
                                              <div className={`text-xs truncate ${
                                                cell.hasRelatedCargo && cell.clientGroup && cell.clientGroup.color ? 
                                                  cell.clientGroup.color.text : 
                                                  'text-red-700'
                                              }`} title={cell.cargo_number}>
                                                {cell.cargo_number?.substring(0, 8)}...
                                              </div>
                                              {cell.hasRelatedCargo && cell.relatedCargo && (
                                                <div className={`text-xs ${cell.clientGroup && cell.clientGroup.color ? cell.clientGroup.color.text : 'text-blue-700'}`}>
                                                  {cell.groupType === 'sender' ? '📤' : '📥'} {cell.relatedCargo.totalCargo} шт
                                                </div>
                                              )}
                                              {cell.cargo_weight && (
                                                <div className="text-xs text-gray-600">
                                                  {cell.cargo_weight} кг
                                                </div>
                                              )}
                                            </div>
                                          ) : (
                                            <div className="text-xs font-bold text-green-800">СВОБОДНО</div>
                                          )}
                                        </div>
                                      );
                                    })}
                                  </div>
                                </div>
                              );
                            })}
                        </div>
                      </div>
                    );
                  })
                )}
              </div>

              {/* Действия */}
              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setShowWarehouseScheme(null)}>
                  Закрыть
                </Button>
                <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                  <FileText className="mr-2 h-4 w-4" />
                  Экспорт схемы
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНОЕ ОКНО УПРАВЛЕНИЯ ГРУЗОМ (ФАЗА 4 - ФИНАЛЬНАЯ) */}
      <Dialog open={showCargoManagementModal} onOpenChange={setShowCargoManagementModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Package className="mr-2 h-5 w-5" />
              Управление грузом: {selectedCargoForManagement?.cargo_number}
            </DialogTitle>
            <DialogDescription>
              Полная информация о грузе и функции управления
            </DialogDescription>
          </DialogHeader>
          
          {selectedCargoForManagement && (
            <div className="space-y-6">
              {/* Основная информация о грузе */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Статус груза */}
                <Card className="border-l-4 border-l-blue-500">
                  <CardContent className="p-4">
                    <div className="flex items-center space-x-3">
                      <Package className="h-8 w-8 text-blue-600" />
                      <div>
                        <p className="text-sm font-medium text-gray-500">Статус груза</p>
                        <p className="text-lg font-bold text-blue-900">РАЗМЕЩЕН</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Статус оплаты */}
                <Card className="border-l-4 border-l-green-500">
                  <CardContent className="p-4">
                    <div className="flex items-center space-x-3">
                      <CreditCard className="h-8 w-8 text-green-600" />
                      <div>
                        <p className="text-sm font-medium text-gray-500">Оплата</p>
                        <p className="text-lg font-bold text-green-900">ОПЛАЧЕН</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Вес и стоимость */}
                <Card className="border-l-4 border-l-orange-500">
                  <CardContent className="p-4">
                    <div className="flex items-center space-x-3">
                      <DollarSign className="h-8 w-8 text-orange-600" />
                      <div>
                        <p className="text-sm font-medium text-gray-500">Вес / Сумма</p>
                        <p className="text-lg font-bold text-orange-900">
                          {selectedCargoForManagement.weight || 'Н/Д'} кг / {selectedCargoForManagement.payment_amount}₽
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Информация об отправителе и получателе */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Отправитель */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center text-lg">
                      <User className="mr-2 h-5 w-5" />
                      Отправитель
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-500">ФИО</p>
                      <p className="font-semibold">{selectedCargoForManagement.sender.full_name}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Телефон</p>
                      <p className="font-semibold">{selectedCargoForManagement.sender.phone}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Адрес</p>
                      <p className="font-semibold">{selectedCargoForManagement.sender.address}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Email</p>
                      <p className="font-semibold text-blue-600">{selectedCargoForManagement.sender.email}</p>
                    </div>
                  </CardContent>
                </Card>

                {/* Получатель */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center text-lg">
                      <Users className="mr-2 h-5 w-5" />
                      Получатель
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-500">ФИО</p>
                      <p className="font-semibold">{selectedCargoForManagement.recipient.full_name}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Телефон</p>
                      <p className="font-semibold">{selectedCargoForManagement.recipient.phone}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Адрес</p>
                      <p className="font-semibold">{selectedCargoForManagement.recipient.address}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Email</p>
                      <p className="font-semibold text-blue-600">{selectedCargoForManagement.recipient.email}</p>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Детали груза */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center text-lg">
                    <FileText className="mr-2 h-5 w-5" />
                    Детали груза
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <p className="text-sm text-gray-500">Вес</p>
                      <p className="font-semibold">{selectedCargoForManagement.weight || 'Н/Д'} кг</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Объявленная стоимость</p>
                      <p className="font-semibold">{selectedCargoForManagement.payment_amount || 'Н/Д'}₽</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Местоположение</p>
                      <p className="font-semibold">
                        Блок {selectedCargoForManagement.location?.block}, 
                        Полка {selectedCargoForManagement.location?.shelf}, 
                        Ячейка {selectedCargoForManagement.location?.cell}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">Склад</p>
                      <p className="font-semibold">{selectedCargoForManagement.location?.warehouse_name}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* История операций */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center text-lg">
                    <Clock className="mr-2 h-5 w-5" />
                    История операций
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {selectedCargoForManagement.history.map((item, index) => (
                      <div key={index} className="flex items-start space-x-4 p-3 bg-gray-50 rounded-lg">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                        <div className="flex-1">
                          <div className="flex justify-between items-start">
                            <div>
                              <p className="font-semibold text-gray-900">{item.action}</p>
                              <p className="text-sm text-gray-500">Исполнитель: {item.user}</p>
                            </div>
                            <p className="text-xs text-gray-400 whitespace-nowrap">{item.date}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Информация о связанных грузах (если есть) */}
              {selectedCargoForManagement?.hasRelatedCargo && (
                <Card className="bg-gradient-to-r from-indigo-50 to-purple-50 border-indigo-200">
                  <CardHeader>
                    <CardTitle className="flex items-center text-lg text-indigo-900">
                      <Package2 className="mr-2 h-5 w-5" />
                      Связанные грузы того же клиента
                    </CardTitle>
                    <CardDescription className="text-indigo-700">
                      Другие грузы от отправителя: <strong>{selectedCargoForManagement.relatedCargo?.sender}</strong>
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* Сводка */}
                      <div className="bg-white p-4 rounded-lg border border-indigo-200">
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                          <div>
                            <p className="text-sm text-indigo-600">Всего грузов клиента</p>
                            <p className="text-2xl font-bold text-indigo-900">
                              {selectedCargoForManagement.relatedCargo?.totalCargo || 0}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm text-indigo-600">Размещено на складе</p>
                            <p className="text-2xl font-bold text-green-900">
                              {selectedCargoForManagement.relatedCargo?.cargoNumbers?.length || 0}
                            </p>
                          </div>
                          <div>
                            <p className="text-sm text-indigo-600">Ожидает размещения</p>
                            <p className="text-2xl font-bold text-orange-900">
                              {Math.max(0, (selectedCargoForManagement.relatedCargo?.totalCargo || 0) - (selectedCargoForManagement.relatedCargo?.cargoNumbers?.length || 0))}
                            </p>
                          </div>
                        </div>
                      </div>

                      {/* Список размещенных грузов */}
                      <div>
                        <h4 className="font-semibold text-indigo-800 mb-3">📦 Размещенные грузы:</h4>
                        <div className="space-y-2">
                          {selectedCargoForManagement.relatedCargo?.cargoNumbers?.map((cargoNumber, index) => {
                            const blockNum = Math.floor(Math.random() * 3) + 1;
                            const cellNum = Math.floor(Math.random() * 20) + 1;
                            const isCurrentCargo = cargoNumber === selectedCargoForManagement.cargo_number;
                            
                            return (
                              <div key={index} className={`flex items-center justify-between p-3 rounded-lg border ${
                                isCurrentCargo ? 'bg-yellow-50 border-yellow-300' : 'bg-gray-50 border-gray-200'
                              }`}>
                                <div className="flex items-center space-x-3">
                                  <div className={`w-3 h-3 rounded-full ${
                                    isCurrentCargo ? 'bg-yellow-500' : 'bg-indigo-500'
                                  }`}></div>
                                  <div>
                                    <p className="font-semibold text-gray-900">
                                      {cargoNumber}
                                      {isCurrentCargo && <span className="ml-2 text-yellow-600">(текущий)</span>}
                                    </p>
                                    <p className="text-sm text-gray-600">
                                      📍 Блок {blockNum}, Ячейка {cellNum}
                                    </p>
                                  </div>
                                </div>
                                <div className="text-right">
                                  <div className="flex items-center space-x-2">
                                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                      Размещен
                                    </span>
                                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                      Оплачен
                                    </span>
                                  </div>
                                  <p className="text-xs text-gray-500 mt-1">
                                    {new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}
                                  </p>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </div>

                      {/* Неразмещенные грузы */}
                      {(selectedCargoForManagement.relatedCargo?.totalCargo || 0) > (selectedCargoForManagement.relatedCargo?.cargoNumbers?.length || 0) && (
                        <div>
                          <h4 className="font-semibold text-orange-800 mb-3">⏳ Ожидают размещения:</h4>
                          <div className="space-y-2">
                            {Array.from({
                              length: Math.max(0, (selectedCargoForManagement.relatedCargo?.totalCargo || 0) - (selectedCargoForManagement.relatedCargo?.cargoNumbers?.length || 0))
                            }, (_, index) => (
                              <div key={index} className="flex items-center justify-between p-3 rounded-lg border bg-orange-50 border-orange-200">
                                <div className="flex items-center space-x-3">
                                  <div className="w-3 h-3 rounded-full bg-orange-500"></div>
                                  <div>
                                    <p className="font-semibold text-gray-900">
                                      CRG{Date.now()}-PENDING-{index + 1}
                                    </p>
                                    <p className="text-sm text-gray-600">
                                      📍 На складе: Москва (Центральный)
                                    </p>
                                  </div>
                                </div>
                                <div className="text-right">
                                  <div className="flex items-center space-x-2">
                                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                      Ожидает
                                    </span>
                                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                      Оплачен
                                    </span>
                                  </div>
                                  <p className="text-xs text-gray-500 mt-1">
                                    Поступил: {new Date().toISOString().split('T')[0]}
                                  </p>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Функциональные кнопки управления */}
              <Card className="bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
                <CardHeader>
                  <CardTitle className="flex items-center text-lg text-blue-900">
                    <Settings className="mr-2 h-5 w-5" />
                    Управление грузом
                  </CardTitle>
                  <CardDescription className="text-blue-700">
                    Выберите действие для работы с грузом
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Перемещение груза */}
                    <Button
                      className="h-16 flex-col space-y-1 bg-blue-600 hover:bg-blue-700 text-white"
                      onClick={() => {
                        const newCell = prompt('Введите ID новой ячейки для перемещения груза:');
                        if (newCell) {
                          handleMoveCargoToCell(selectedCargoForManagement.id, newCell);
                          setShowCargoManagementModal(false);
                        }
                      }}
                    >
                      <ArrowUp className="h-5 w-5" />
                      <span className="text-sm font-medium">Переместить груз</span>
                      <span className="text-xs opacity-90">в другую ячейку</span>
                    </Button>

                    {/* Возврат товара */}
                    <Button
                      className="h-16 flex-col space-y-1 bg-red-600 hover:bg-red-700 text-white"
                      onClick={() => {
                        const reason = prompt('Укажите причину возврата:');
                        if (reason) {
                          handleReturnCargo(selectedCargoForManagement.id, reason);
                          setShowCargoManagementModal(false);
                        }
                      }}
                    >
                      <Ban className="h-5 w-5" />
                      <span className="text-sm font-medium">Возврат товара</span>
                      <span className="text-xs opacity-90">отправителю</span>
                    </Button>

                    {/* Размещение на транспорт */}
                    <Button
                      className="h-16 flex-col space-y-1 bg-green-600 hover:bg-green-700 text-white"
                      onClick={() => {
                        const transportId = prompt('Введите ID транспорта:');
                        if (transportId) {
                          handleMoveCargoToTransport(selectedCargoForManagement.id, transportId);
                          setShowCargoManagementModal(false);
                        }
                      }}
                    >
                      <Truck className="h-5 w-5" />
                      <span className="text-sm font-medium">На транспорт</span>
                      <span className="text-xs opacity-90">для доставки</span>
                    </Button>

                    {/* Редактирование информации */}
                    <Button
                      className="h-16 flex-col space-y-1 bg-orange-600 hover:bg-orange-700 text-white"
                      onClick={() => {
                        alert('Функция редактирования груза будет реализована в следующих версиях');
                      }}
                    >
                      <Edit className="h-5 w-5" />
                      <span className="text-sm font-medium">Редактировать</span>
                      <span className="text-xs opacity-90">информацию</span>
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Кнопки закрытия */}
              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setShowCargoManagementModal(false)}>
                  Закрыть
                </Button>
                <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                  <Printer className="mr-2 h-4 w-4" />
                  Печать отчета
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНОЕ ОКНО ОТЧЕТА ПО СКЛАДУ */}
      <Dialog open={!!showWarehouseReport} onOpenChange={() => setShowWarehouseReport(null)}>
        <DialogContent className="max-w-7xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <FileText className="mr-2 h-5 w-5" />
              Отчет по складу
            </DialogTitle>
            <DialogDescription>
              {showWarehouseReport && (
                <span>
                  Подробный отчет о грузах склада: <strong>
                    {operatorWarehouses.find(w => w.id === showWarehouseReport)?.name}
                  </strong>
                </span>
              )}
            </DialogDescription>
          </DialogHeader>
          
          {showWarehouseReport && (
            <div className="space-y-6">
              {/* Сводная аналитика */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                  <div className="text-center">
                    <Package className="mx-auto h-8 w-8 text-blue-600 mb-2" />
                    <p className="text-sm font-medium text-blue-700">Всего грузов</p>
                    <p className="text-2xl font-bold text-blue-900">{warehouseReportData.length}</p>
                  </div>
                </div>
                
                <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                  <div className="text-center">
                    <DollarSign className="mx-auto h-8 w-8 text-green-600 mb-2" />
                    <p className="text-sm font-medium text-green-700">Общая сумма</p>
                    <p className="text-2xl font-bold text-green-900">
                      {warehouseReportData.reduce((sum, item) => sum + item.total_amount, 0).toLocaleString()} ₽
                    </p>
                  </div>
                </div>
                
                <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                  <div className="text-center">
                    <Package2 className="mx-auto h-8 w-8 text-purple-600 mb-2" />
                    <p className="text-sm font-medium text-purple-700">Общий вес</p>
                    <p className="text-2xl font-bold text-purple-900">
                      {warehouseReportData.reduce((sum, item) => sum + item.weight, 0).toFixed(1)} кг
                    </p>
                  </div>
                </div>
                
                <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
                  <div className="text-center">
                    <Users className="mx-auto h-8 w-8 text-orange-600 mb-2" />
                    <p className="text-sm font-medium text-orange-700">Уник. клиенты</p>
                    <p className="text-2xl font-bold text-orange-900">
                      {new Set(warehouseReportData.map(item => item.sender)).size}
                    </p>
                  </div>
                </div>
              </div>

              {/* Фильтры и поиск */}
              <div className="flex justify-between items-center">
                <div className="flex space-x-4">
                  <input
                    type="text"
                    placeholder="Поиск по номеру груза или отправителю..."
                    className="px-4 py-2 border border-gray-300 rounded-lg w-80"
                  />
                  <select className="px-4 py-2 border border-gray-300 rounded-lg">
                    <option value="">Все статусы оплаты</option>
                    <option value="paid">Оплачено</option>
                    <option value="transfer">Перевод на карту</option>
                    <option value="cod">Оплата при получении</option>
                    <option value="debt">Оплата в долг</option>
                  </select>
                </div>
                
                <Button className="bg-green-600 hover:bg-green-700">
                  <Download className="mr-2 h-4 w-4" />
                  Экспорт в Excel
                </Button>
              </div>

              {/* Таблица отчета */}
              <div className="overflow-x-auto">
                <table className="w-full border-collapse border border-gray-300">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Номер груза
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Наименование
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Вес (кг)
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Сумма (₽)
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Отправитель
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Получатель
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Телефон получателя
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Маршрут
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Статус оплаты
                      </th>
                      <th className="border border-gray-300 px-3 py-2 text-left text-sm font-medium text-gray-700">
                        Дата приема
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {warehouseReportData.map((item, index) => (
                      <tr key={item.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                        <td className="border border-gray-300 px-3 py-2 text-sm font-semibold text-blue-600">
                          {item.cargo_number}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm">
                          {item.cargo_name}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm text-center">
                          {item.weight}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm font-semibold text-green-600">
                          {item.total_amount.toLocaleString()}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm">
                          {item.sender}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm">
                          {item.recipient}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm font-mono">
                          {item.recipient_phone}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm">
                          {item.route}
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            item.payment_status === 'Оплачено' ? 'bg-green-100 text-green-800' :
                            item.payment_status === 'Перевод на карту' ? 'bg-blue-100 text-blue-800' :
                            item.payment_status === 'Оплата при получении' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-red-100 text-red-800'
                          }`}>
                            {item.payment_status}
                          </span>
                        </td>
                        <td className="border border-gray-300 px-3 py-2 text-sm">
                          {item.acceptance_date}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {/* Действия */}
              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setShowWarehouseReport(null)}>
                  Закрыть
                </Button>
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Printer className="mr-2 h-4 w-4" />
                  Печать отчета
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* QR код созданного груза */}
      <Dialog open={showCreatedCargoQRModal} onOpenChange={setShowCreatedCargoQRModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <QrCode className="mr-2 h-5 w-5" />
              QR код груза готов!
            </DialogTitle>
            <DialogDescription>
              Груз успешно создан. Используйте QR код для всех операций с грузом.
            </DialogDescription>
          </DialogHeader>
          {createdCargoQR && (
            <div className="space-y-4">
              <div className="text-center">
                <img 
                  src={createdCargoQR.qr_code} 
                  alt={`QR код груза ${createdCargoQR.cargo_number}`}
                  className="mx-auto max-w-[200px] border rounded-lg"
                />
                <p className="mt-2 font-bold text-lg">{createdCargoQR.cargo_number}</p>
                <p className="text-sm text-green-600">{createdCargoQR.message}</p>
              </div>
              
              <div className="bg-gray-50 p-3 rounded-lg text-sm space-y-1">
                <div><strong>Отправитель:</strong> {createdCargoQR.cargo_info?.sender_name}</div>
                <div><strong>Получатель:</strong> {createdCargoQR.cargo_info?.recipient_name}</div>
                <div><strong>Груз:</strong> {createdCargoQR.cargo_info?.cargo_name}</div>
                <div><strong>Вес:</strong> {createdCargoQR.cargo_info?.weight} кг</div>
                <div><strong>Оплата:</strong> {getPaymentMethodText(createdCargoQR.cargo_info?.payment_method)}</div>
              </div>
              
              <div className="flex gap-2">
                <Button 
                  className="flex-1" 
                  onClick={() => {
                    const printWindow = window.open('', '_blank');
                    if (!printWindow) {
                      showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                      return;
                    }
                    const printContent = `
                      <html>
                        <head>
                          <title>QR код груза ${createdCargoQR.cargo_number}</title>
                          <style>
                            body { font-family: Arial, sans-serif; margin: 20px; text-align: center; }
                            .qr-container { border: 2px solid #333; padding: 20px; max-width: 400px; margin: 0 auto; }
                            .qr-code img { width: 200px; height: 200px; margin: 10px 0; }
                            .info { text-align: left; margin-top: 15px; line-height: 1.4; }
                          </style>
                        </head>
                        <body>
                          <div class="qr-container">
                            <h2>ГРУЗ TAJLINE.TJ</h2>
                            <div class="qr-code">
                              <img src="${createdCargoQR.qr_code}" alt="QR код груза" />
                            </div>
                            <div class="info">
                              <div><strong>Номер груза:</strong> ${createdCargoQR.cargo_number}</div>
                              <div><strong>Отправитель:</strong> ${createdCargoQR.cargo_info?.sender_name}</div>
                              <div><strong>Получатель:</strong> ${createdCargoQR.cargo_info?.recipient_name}</div>
                              <div><strong>Груз:</strong> ${createdCargoQR.cargo_info?.cargo_name}</div>
                              <div><strong>Вес:</strong> ${createdCargoQR.cargo_info?.weight} кг</div>
                            </div>
                            <div style="margin-top: 15px; font-size: 12px;">
                              Сканируйте для операций с грузом
                            </div>
                          </div>
                        </body>
                      </html>
                    `;
                    printWindow.document.write(printContent);
                    printWindow.document.close();
                    printWindow.print();
                  }}
                >
                  <Printer className="mr-2 h-4 w-4" />
                  Печать QR кода
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => setShowCreatedCargoQRModal(false)}
                >
                  Закрыть
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Сканированный груз */}
      <Dialog open={showScannedCargoModal} onOpenChange={setShowScannedCargoModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Package className="mr-2 h-5 w-5" />
              Информация о грузе
            </DialogTitle>
            <DialogDescription>
              Результат сканирования QR кода
            </DialogDescription>
          </DialogHeader>
          {scannedCargoInfo && (
            <div className="space-y-4">
              <div className="bg-blue-50 p-4 rounded-lg">
                <h3 className="font-bold text-lg mb-2">{scannedCargoInfo.cargo_number}</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <p><strong>Груз:</strong> {scannedCargoInfo.cargo_name}</p>
                    <p><strong>Вес:</strong> {scannedCargoInfo.weight} кг</p>
                    <p><strong>Стоимость:</strong> {scannedCargoInfo.declared_value} ₽</p>
                  </div>
                  <div>
                    <p><strong>Отправитель:</strong> {scannedCargoInfo.sender_name}</p>
                    <p><strong>Получатель:</strong> {scannedCargoInfo.recipient_name}</p>
                    <p><strong>Телефон:</strong> {scannedCargoInfo.recipient_phone}</p>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="font-medium">Статус груза</p>
                  <p className="text-blue-600">{getStatusText(scannedCargoInfo.status)}</p>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="font-medium">Обработка</p>
                  <p className="text-green-600">{getProcessingStatusText(scannedCargoInfo.processing_status)}</p>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg">
                  <p className="font-medium">Оплата</p>
                  <p className="text-orange-600">{getPaymentStatusText(scannedCargoInfo.payment_status)}</p>
                </div>
              </div>
              
              {(scannedCargoInfo.block_number || scannedCargoInfo.warehouse_name) && (
                <div className="bg-green-50 p-3 rounded-lg">
                  <p className="font-medium mb-1">Местоположение</p>
                  <p className="text-sm">
                    {scannedCargoInfo.warehouse_name}
                    {scannedCargoInfo.block_number && `, Блок ${scannedCargoInfo.block_number}`}
                    {scannedCargoInfo.shelf_number && `, Полка ${scannedCargoInfo.shelf_number}`}
                    {scannedCargoInfo.cell_number && `, Ячейка ${scannedCargoInfo.cell_number}`}
                  </p>
                </div>
              )}
              
              {scannedCargoInfo.available_operations && scannedCargoInfo.available_operations.length > 0 && (
                <div>
                  <p className="font-medium mb-2">Доступные операции:</p>
                  <div className="flex flex-wrap gap-2">
                    {scannedCargoInfo.available_operations.map((operation, index) => (
                      <Button 
                        key={index}
                        variant="outline" 
                        size="sm"
                        onClick={() => handleCargoOperation(operation, scannedCargoInfo)}
                      >
                        {getOperationText(operation)}
                      </Button>
                    ))}
                  </div>
                </div>
              )}
              
              <div className="flex justify-end">
                <Button onClick={() => setShowScannedCargoModal(false)}>
                  Закрыть
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* QR сканер */}
      <Dialog open={showQRScannerModal} onOpenChange={setShowQRScannerModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Camera className="mr-2 h-5 w-5" />
              Сканирование QR кода груза
            </DialogTitle>
            <DialogDescription>
              Наведите камеру на QR код груза для получения информации
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="bg-black rounded-lg overflow-hidden" style={{aspectRatio: '1/1'}}>
              <div id="qr-reader-modal" style={{width: '100%', height: '100%'}}></div>
            </div>
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                onClick={() => {
                  // Переключаем камеру
                  switchModalCamera();
                }}
                className="flex-1"
              >
                <RefreshCw className="mr-2 h-4 w-4" />
                Переключить камеру
              </Button>
              <Button 
                variant="outline" 
                onClick={stopCargoQRScanner}
                className="flex-1"
              >
                Остановить сканирование
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* New QR Generation Modal - Mobile Adapted */}
      <Dialog open={showQRGenerateModal} onOpenChange={setShowQRGenerateModal}>
        <DialogContent className="w-full max-w-[95vw] max-h-[95vh] p-3 sm:p-6 overflow-y-auto">
          <DialogHeader className="pb-2">
            <DialogTitle className="flex items-center text-lg">
              <QrCode className="mr-2 h-5 w-5" />
              Генерация QR кода
            </DialogTitle>
            <DialogDescription className="text-sm">
              Введите номер груза для проверки и генерации QR кода
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label htmlFor="cargo-number-input">Номер груза</Label>
              <Input
                id="cargo-number-input"
                type="text"
                placeholder="Введите номер груза (например: TEMP-123456)"
                value={qrGenerateCargoNumber}
                onChange={(e) => {
                  setQrGenerateCargoNumber(e.target.value);
                  // Clear previous QR when user changes input
                  if (generatedSingleQR) {
                    setGeneratedSingleQR(null);
                  }
                }}
                disabled={qrGenerateLoading}
                className="mt-1"
              />
              <p className="text-xs text-gray-500 mt-1">
                Система проверит существование груза перед генерацией QR кода
              </p>
            </div>
            
            {generatedSingleQR && (
              <div className="space-y-3">
                <div className="text-center">
                  <p className="text-sm font-medium text-green-600 mb-2">
                    QR код для груза: {generatedSingleQR.cargo_number}
                  </p>
                  <div className="bg-white p-4 rounded-lg border inline-block">
                    <img 
                      src={generatedSingleQR.qr_code} 
                      alt={`QR код ${generatedSingleQR.cargo_number}`}
                      className="w-48 h-48 mx-auto"
                    />
                  </div>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={() => {
                      const link = document.createElement('a');
                      link.href = generatedSingleQR.qr_code;
                      link.download = `qr-${generatedSingleQR.cargo_number}.png`;
                      link.click();
                    }}
                    className="flex-1"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Скачать
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => {
                      const printWindow = window.open('', '_blank');
                      if (!printWindow) {
                        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                        return;
                      }
                      printWindow.document.write(`
                        <html>
                          <head><title>QR код ${generatedSingleQR.cargo_number}</title></head>
                          <body style="text-align: center; padding: 20px;">
                            <h2>QR код груза: ${generatedSingleQR.cargo_number}</h2>
                            <img src="${generatedSingleQR.qr_code}" style="width: 300px; height: 300px;" />
                            <p>Груз: ${generatedSingleQR.cargo_name}</p>
                          </body>
                        </html>
                      `);
                      printWindow.document.close();
                      printWindow.print();
                    }}
                    className="flex-1"
                  >
                    <Printer className="mr-2 h-4 w-4" />
                    Печать
                  </Button>
                </div>
              </div>
            )}
            
            <div className="flex gap-2">
              <Button 
                onClick={generateQRByCargoNumber}
                disabled={!qrGenerateCargoNumber.trim() || qrGenerateLoading}
                className="flex-1"
              >
                {qrGenerateLoading ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Генерация...
                  </>
                ) : (
                  <>
                    <QrCode className="mr-2 h-4 w-4" />
                    Создать QR код
                  </>
                )}
              </Button>
              <Button 
                variant="outline" 
                onClick={() => {
                  setShowQRGenerateModal(false);
                  setQrGenerateCargoNumber('');
                  setGeneratedSingleQR(null);
                }}
              >
                Закрыть
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* External Scanner Modal - Simplified */}
      <Dialog open={showCargoPlacementModal} onOpenChange={setShowCargoPlacementModal}>
        <DialogContent className="w-full max-w-[95vw] max-h-[95vh] p-3 sm:p-6 overflow-y-auto">
          <DialogHeader className="pb-2">
            <DialogTitle className="flex items-center justify-between text-lg">
              <div className="flex items-center">
                <Scan className="mr-2 h-5 w-5" />
                Размещение груза - Внешний сканер
              </div>
              {/* Счетчик грузов */}
              <div className="flex items-center space-x-2 text-sm bg-blue-50 px-3 py-1 rounded-full border">
                <span className="text-blue-600 font-medium">
                  📦 {availableCargoForPlacement.length}/{sessionPlacedCount}
                </span>
                <span className="text-gray-500 text-xs">
                  (к размещению / размещено)
                </span>
              </div>
            </DialogTitle>
            <DialogDescription className="text-sm">
              Используйте внешний сканер штрих-кодов/QR-кодов для размещения груза
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Информационная панель с прогрессом */}
            <div className="p-3 bg-gradient-to-r from-blue-50 to-green-50 border border-blue-200 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-sm font-medium text-gray-700">Прогресс размещения</h3>
                <div className="text-xs text-gray-500">
                  Осталось: {availableCargoForPlacement.length} грузов
                </div>
              </div>
              <div className="flex items-center space-x-4">
                <div className="flex-1">
                  <div className="flex justify-between text-xs text-gray-600 mb-1">
                    <span>Всего для размещения</span>
                    <span>{availableCargoForPlacement.length + sessionPlacedCount}</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-green-500 h-2 rounded-full transition-all duration-300"
                      style={{
                        width: `${sessionPlacedCount > 0 ? (sessionPlacedCount / (availableCargoForPlacement.length + sessionPlacedCount)) * 100 : 0}%`
                      }}
                    ></div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-lg font-bold text-green-600">{sessionPlacedCount}</div>
                  <div className="text-xs text-gray-500">размещено</div>
                </div>
              </div>
            </div>

            {/* НОВОЕ: Информационная панель целевого склада - ВРЕМЕННО ОТКЛЮЧЕНА */}
            {false && targetWarehouseStats && scannedCellData && (
              <div className="p-3 bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-medium text-gray-700 flex items-center">
                    🏢 Целевой склад для размещения
                  </h3>
                  <div className="text-xs text-orange-600 font-medium">
                    {scannedCellData.full_address || `${scannedCellData.readable_name} (Склад №${scannedCellData.warehouse_number})`}
                  </div>
                </div>
                <div className="grid grid-cols-3 gap-3">
                  <div className="text-center p-2 bg-white rounded border">
                    <div className="text-lg font-bold text-blue-600">{targetWarehouseStats.total_cells || 0}</div>
                    <div className="text-xs text-gray-600">Всего ячеек</div>
                  </div>
                  <div className="text-center p-2 bg-white rounded border">
                    <div className="text-lg font-bold text-red-600">{targetWarehouseStats.occupied_cells || 0}</div>
                    <div className="text-xs text-gray-600">Занято</div>
                  </div>
                  <div className="text-center p-2 bg-white rounded border">
                    <div className="text-lg font-bold text-green-600">{targetWarehouseStats.free_cells || 0}</div>
                    <div className="text-xs text-gray-600">Свободно</div>
                  </div>
                </div>
                {targetWarehouseStats.warehouse_name && (
                  <div className="mt-2 text-xs text-gray-600 text-center">
                    📍 {targetWarehouseStats.warehouse_name}
                  </div>
                )}
              </div>
            )}

            {/* НОВОЕ: Статистика размещения и список размещенных грузов */}
            <div className="p-3 bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-medium text-gray-700 flex items-center">
                  📊 Статистика размещения
                </h3>
                <div className="text-xs text-indigo-600 font-medium">
                  {sessionPlacedCount > 0 && `${Math.round((sessionPlacedCount / (availableCargoForPlacement.length + sessionPlacedCount)) * 100)}% завершено`}
                </div>
              </div>
              
              <div className="grid grid-cols-3 gap-3 mb-3">
                <div className="text-center p-2 bg-white rounded border">
                  <div className="text-lg font-bold text-blue-600">{sessionPlacedCount}</div>
                  <div className="text-xs text-gray-600">В сессии</div>
                </div>
                <div className="text-center p-2 bg-white rounded border">
                  <div className="text-lg font-bold text-green-600">
                    {placementStatistics?.today_placements || 0}
                  </div>
                  <div className="text-xs text-gray-600">За сегодня</div>
                </div>
                <div className="text-center p-2 bg-white rounded border">
                  <div className="text-lg font-bold text-orange-600">{availableCargoForPlacement.length}</div>
                  <div className="text-xs text-gray-600">Осталось</div>
                </div>
              </div>
              
              {/* Список размещенных грузов в текущей сессии */}
              {sessionPlacedCargo.length > 0 && (
                <div className="mt-3">
                  <div className="text-xs font-medium text-gray-700 mb-2">
                    📦 Размещенные грузы в сессии:
                  </div>
                  <div className="max-h-32 overflow-y-auto space-y-1">
                    {sessionPlacedCargo.slice(-5).reverse().map((item, index) => (
                      <div key={index} className="flex justify-between items-center text-xs bg-white p-2 rounded border">
                        <div className="flex-1">
                          <span className="font-medium text-gray-800">
                            Груз № {item.cargo_number}
                          </span>
                          <span className="text-gray-600 ml-2">
                            - {item.location}
                          </span>
                        </div>
                        <div className="text-gray-500 text-right">
                          <div>{item.placed_at}</div>
                          <div className="text-xs">{item.warehouse_name}</div>
                        </div>
                      </div>
                    ))}
                    {sessionPlacedCargo.length > 5 && (
                      <div className="text-xs text-gray-500 text-center py-1">
                        ... и еще {sessionPlacedCargo.length - 5} грузов
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>

            {/* Старый контент модального окна заменен на UI внешнего сканера */}
            {externalScannerActive ? (
              <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                {/* Статус сообщение */}
                {scannerMessage && (
                  <div className="mb-4 p-3 bg-white border border-blue-200 rounded">
                    <p className="text-sm text-blue-800">{scannerMessage}</p>
                  </div>
                )}
                
                {/* Ошибки */}
                {scannerError && (
                  <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded">
                    <p className="text-sm text-red-800">{scannerError}</p>
                  </div>
                )}

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Поле для груза */}
                  <div>
                    <Label className="text-sm font-medium text-blue-700">
                      Шаг 1: Сканирование груза
                      {externalScannerStep === 'cargo' && <span className="text-green-600 ml-2">← Текущий шаг</span>}
                      {externalScannedCargo && <span className="text-green-600 ml-2">✓ Завершено</span>}
                    </Label>
                    <Input
                      placeholder="Отсканируйте QR код груза здесь..."
                      value={externalCargoInput}
                      onChange={(e) => setExternalCargoInput(e.target.value)}
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && externalCargoInput.trim() && externalScannerStep === 'cargo') {
                          handleExternalCargoScan(externalCargoInput.trim());
                          setExternalCargoInput('');
                        }
                      }}
                      disabled={externalScannerStep !== 'cargo'}
                      className={`mt-1 ${externalScannerStep === 'cargo' ? 'bg-yellow-50 border-yellow-300' : 'bg-gray-100'}`}
                      autoFocus={externalScannerStep === 'cargo'}
                    />
                    {externalScannedCargo && (
                      <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm">
                        <div className="font-medium text-green-800">
                          Груз: {typeof externalScannedCargo === 'object' && externalScannedCargo.cargo_number ? externalScannedCargo.cargo_number : 'Неизвестный груз'}
                        </div>
                        <div className="text-green-600">
                          {typeof externalScannedCargo === 'object' && externalScannedCargo.cargo_name ? externalScannedCargo.cargo_name : 'Груз готов к размещению'}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Поле для ячейки */}
                  <div>
                    <Label className="text-sm font-medium text-blue-700">
                      Шаг 2: Сканирование ячейки
                      {externalScannerStep === 'cell' && <span className="text-green-600 ml-2">← Текущий шаг</span>}
                      {externalScannedCell && <span className="text-green-600 ml-2">✓ Завершено</span>}
                    </Label>
                    <Input
                      placeholder="Отсканируйте QR код ячейки или введите вручную: Б1-П2-Я3"
                      value={externalCellInput}
                      onChange={(e) => setExternalCellInput(e.target.value)}
                      onKeyPress={(e) => {
                        if (e.key === 'Enter' && externalCellInput.trim() && externalScannerStep === 'cell') {
                          handleExternalCellScan(externalCellInput.trim());
                          // НЕ очищаем поле, чтобы пользователь видел отсканированные данные
                        }
                      }}
                      disabled={externalScannerStep !== 'cell'}
                      className={`mt-1 ${externalScannerStep === 'cell' ? 'bg-yellow-50 border-yellow-300' : 'bg-gray-100'}`}
                      autoFocus={externalScannerStep === 'cell'}
                    />
                    {externalScannedCell && (
                      <div className="mt-2 p-2 bg-green-50 border border-green-200 rounded text-sm">
                        <div className="font-medium text-green-800 text-center">
                          ✅ Ячейка: Б{externalScannedCell.block_number}-П{externalScannedCell.shelf_number}-Я{externalScannedCell.cell_number}
                        </div>
                        <div className="text-green-600 text-center text-xs mt-1">
                          Данные ячейки успешно отсканированы
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Инструкции */}
                <div className="mt-4 p-3 bg-white border border-blue-200 rounded">
                  <h4 className="text-sm font-medium text-blue-800 mb-2">Инструкция по использованию:</h4>
                  <ol className="text-xs text-blue-700 space-y-1">
                    <li>1. Убедитесь, что внешний сканер подключен к компьютеру</li>
                    <li>2. Установите курсор в активное поле (подсвечено желтым)</li>
                    <li>3. Отсканируйте QR код - данные автоматически появятся в поле</li>
                    <li>4. Нажмите Enter или сканер автоматически отправит данные</li>
                    <li>5. После успешного сканирования переходите к следующему шагу</li>
                  </ol>
                </div>

                {/* Статистика - СНОВА ОТКЛЮЧАЕМ ДЛЯ ПОИСКА ДРУГОЙ ПРИЧИНЫ */}
                {false && placementStatistics && (
                  <div className="mt-4 grid grid-cols-3 gap-4 text-center">
                    <div>
                      <div className="text-lg font-bold text-blue-600">{placementStatistics.today_placements || 0}</div>
                      <div className="text-xs text-gray-600">Сегодня</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-green-600">{placementStatistics.session_placements || 0}</div>
                      <div className="text-xs text-gray-600">За сессию</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-orange-600">{placementStatistics.recent_placements || 0}</div>
                      <div className="text-xs text-gray-600">Недавних</div>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg text-center">
                <div className="text-gray-600">Активация внешнего сканера...</div>
                <div className="text-xs text-gray-500 mt-2">Если сканер не активируется автоматически, обновите страницу</div>
              </div>
            )}

            {/* Кнопка закрытия */}
            <div className="flex justify-end">
              <Button 
                variant="outline" 
                onClick={() => setShowCargoPlacementModal(false)}
              >
                Закрыть
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Bulk QR Generation Modal for Sender - Mobile Adapted */}
      <Dialog open={showBulkQRModal} onOpenChange={setBulkQRModal}>
        <DialogContent className="w-full max-w-[95vw] max-h-[95vh] p-3 sm:p-6 overflow-y-auto">
          <DialogHeader className="pb-2">
            <DialogTitle className="flex items-center text-lg">
              <QrCode className="mr-2 h-5 w-5" />
              QR коды для отправителя
            </DialogTitle>
            <DialogDescription className="text-sm">
              Генерация QR кодов для всех грузов отправителя: {selectedSender?.sender_full_name}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {/* Information about sender and cargo count */}
            {selectedSender && (
              <div className="p-4 bg-blue-50 rounded-lg">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="font-medium text-blue-800">Отправитель: {selectedSender.sender_full_name}</p>
                    <p className="text-sm text-blue-600">Телефон: {selectedSender.sender_phone}</p>
                  </div>
                  <div>
                    <p className="font-medium text-blue-800">Количество грузов: {senderCargos.length}</p>
                    <p className="text-sm text-blue-600">
                      Создано QR кодов: {bulkQRResults.filter(r => r.success).length}/{bulkQRResults.length}
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Loading state */}
            {bulkQRLoading && (
              <div className="text-center py-4">
                <RefreshCw className="animate-spin h-8 w-8 mx-auto text-blue-600" />
                <p className="mt-2 text-gray-600">Генерация QR кодов...</p>
              </div>
            )}

            {/* Results grid */}
            {bulkQRResults.length > 0 && (
              <div className="space-y-4">
                <h4 className="font-medium">Результаты генерации:</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-h-96 overflow-y-auto">
                  {bulkQRResults.map((result, index) => (
                    <div 
                      key={index} 
                      className={`p-3 border rounded-lg ${result.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}`}
                    >
                      <div className="flex items-start justify-between">
                        <div>
                          <p className="font-medium text-sm">{result.cargo_number}</p>
                          <p className="text-xs text-gray-600">{result.cargo_name}</p>
                          {!result.success && (
                            <p className="text-xs text-red-600 mt-1">{result.error}</p>
                          )}
                        </div>
                        {result.success ? (
                          <div className="flex flex-col items-end space-y-1">
                            <img 
                              src={result.qr_code} 
                              alt={`QR ${result.cargo_number}`}
                              className="w-16 h-16"
                            />
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => {
                                const link = document.createElement('a');
                                link.href = result.qr_code;
                                link.download = `qr-${result.cargo_number}.png`;
                                link.click();
                              }}
                              className="text-xs p-1 h-auto"
                            >
                              <Download className="h-3 w-3" />
                            </Button>
                          </div>
                        ) : (
                          <XCircle className="h-5 w-5 text-red-500" />
                        )}
                      </div>
                    </div>
                  ))}
                </div>

                {/* Bulk actions */}
                <div className="flex gap-2 pt-4 border-t">
                  <Button
                    onClick={() => {
                      const successfulResults = bulkQRResults.filter(r => r.success);
                      successfulResults.forEach(result => {
                        const link = document.createElement('a');
                        link.href = result.qr_code;
                        link.download = `qr-${result.cargo_number}.png`;
                        link.click();
                      });
                    }}
                    disabled={bulkQRResults.filter(r => r.success).length === 0}
                    className="flex-1"
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Скачать все успешные ({bulkQRResults.filter(r => r.success).length})
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => {
                      const printWindow = window.open('', '_blank');
                      if (!printWindow) {
                        showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                        return;
                      }
                      const successfulResults = bulkQRResults.filter(r => r.success);
                      const qrHtml = successfulResults.map(result => `
                        <div style="margin: 20px; text-align: center; page-break-inside: avoid;">
                          <h3>Груз: ${result.cargo_number}</h3>
                          <p>${result.cargo_name}</p>
                          <img src="${result.qr_code}" style="width: 200px; height: 200px;" />
                        </div>
                      `).join('');
                      
                      printWindow.document.write(`
                        <html>
                          <head><title>QR коды для отправителя: ${selectedSender?.sender_full_name}</title></head>
                          <body>${qrHtml}</body>
                        </html>
                      `);
                      printWindow.document.close();
                      printWindow.print();
                    }}
                    disabled={bulkQRResults.filter(r => r.success).length === 0}
                    className="flex-1"
                  >
                    <Printer className="mr-2 h-4 w-4" />
                    Печать всех
                  </Button>
                </div>
              </div>
            )}

            {/* Close button */}
            <div className="flex justify-end pt-4">
              <Button 
                variant="outline" 
                onClick={() => {
                  setBulkQRModal(false);
                  setSelectedSender(null);
                  setSenderCargos([]);
                  setBulkQRResults([]);
                }}
              >
                Закрыть
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Warehouse Management Modal - Mobile Adapted */}
      <Dialog open={showWarehouseManagementModal} onOpenChange={setShowWarehouseManagementModal}>
        <DialogContent className="w-full max-w-[95vw] max-h-[95vh] p-3 sm:p-6 overflow-y-auto">
          <DialogHeader className="pb-2">
            <DialogTitle className="flex items-center text-lg">
              <Settings className="mr-2 h-5 w-5" />
              Управление складом: {selectedWarehouseForManagement?.name}
            </DialogTitle>
            <DialogDescription className="text-sm">
              Управление структурой склада, генерация QR кодов для ячеек
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {warehouseManagementLoading ? (
              <div className="text-center py-8">
                <RefreshCw className="animate-spin h-8 w-8 mx-auto text-blue-600" />
                <p className="mt-2 text-gray-600">Загрузка структуры склада...</p>
              </div>
            ) : warehouseStructure ? (
              <>
                {/* Warehouse Statistics */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <div className="text-2xl font-bold text-blue-600">{warehouseStructure.blocks}</div>
                    <div className="text-sm text-blue-600">Блоков</div>
                  </div>
                  <div className="p-4 bg-green-50 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">{warehouseStructure.total_cells}</div>
                    <div className="text-sm text-green-600">Всего ячеек</div>
                  </div>
                  <div className="p-4 bg-orange-50 rounded-lg">
                    <div className="text-2xl font-bold text-orange-600">{warehouseStructure.occupied_cells}</div>
                    <div className="text-sm text-orange-600">Занято</div>
                  </div>
                  <div className="p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-gray-600">{warehouseStructure.free_cells}</div>
                    <div className="text-sm text-gray-600">Свободно</div>
                  </div>
                </div>

                {/* Management Actions */}
                <div className="flex flex-wrap gap-2 p-4 bg-gray-50 rounded-lg">
                  <Button
                    onClick={() => generateCellQRCodes()}
                    disabled={cellQRLoading}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {cellQRLoading ? (
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <QrCode className="mr-2 h-4 w-4" />
                    )}
                    Создать QR для всех ячеек
                  </Button>

                  <Button
                    onClick={() => setShowSingleCellQRModal(true)}
                    className="bg-purple-600 hover:bg-purple-700"
                  >
                    <QrCode className="mr-2 h-4 w-4" />
                    Генерация QR для ячейки по штукам
                  </Button>
                  
                  <Button
                    onClick={addWarehouseBlock}
                    variant="outline"
                    className="text-green-600 border-green-300 hover:bg-green-50"
                  >
                    <Plus className="mr-2 h-4 w-4" />
                    Добавить блок
                  </Button>
  
                  <Button
                    onClick={() => {
                      const blockToDelete = prompt(`Введите номер блока для удаления (1-${warehouseStructure.blocks}):`);
                      if (blockToDelete && !isNaN(blockToDelete)) {
                        const blockNum = parseInt(blockToDelete);
                        if (blockNum >= 1 && blockNum <= warehouseStructure.blocks) {
                          if (confirm(`Вы уверены что хотите удалить блок ${blockNum}? Это действие нельзя отменить.`)) {
                            deleteWarehouseBlock(blockNum);
                          }
                        } else {
                          showAlert('Неверный номер блока', 'error');
                        }
                      }
                    }}
                    variant="outline"
                    className="text-red-600 border-red-300 hover:bg-red-50"
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    Удалить блок
                  </Button>
                </div>

                {/* QR Generation Results */}
                {cellQRResults.length > 0 && (
                  <div className="space-y-4">
                    <h4 className="font-medium">Результаты генерации QR кодов:</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3 max-h-64 overflow-y-auto p-4 border rounded-lg">
                      {cellQRResults.map((result, index) => (
                        <div 
                          key={index} 
                          className={`p-2 border rounded text-center ${result.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}`}
                        >
                          <div className="text-xs font-medium mb-1">{result.location}</div>
                          {result.success ? (
                            <div className="space-y-1">
                              <img 
                                src={result.qr_code} 
                                alt={`QR ${result.location}`}
                                className="w-12 h-12 mx-auto"
                              />
                              <Button
                                size="sm"
                                variant="ghost"
                                onClick={() => {
                                  const link = document.createElement('a');
                                  link.href = result.qr_code;
                                  link.download = `cell-${result.location}.png`;
                                  link.click();
                                }}
                                className="text-xs p-1 h-auto"
                              >
                                <Download className="h-3 w-3" />
                              </Button>
                            </div>
                          ) : (
                            <div className="space-y-1">
                              <XCircle className="h-6 w-6 mx-auto text-red-500" />
                              <p className="text-xs text-red-600">{result.error}</p>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>

                    {/* Bulk actions for cells */}
                    <div className="flex gap-2">
                      <Button
                        onClick={() => {
                          const successfulResults = cellQRResults.filter(r => r.success);
                          successfulResults.forEach(result => {
                            const link = document.createElement('a');
                            link.href = result.qr_code;
                            link.download = `cell-${result.location}.png`;
                            link.click();
                          });
                        }}
                        disabled={cellQRResults.filter(r => r.success).length === 0}
                        variant="outline"
                      >
                        <Download className="mr-2 h-4 w-4" />
                        Скачать все QR ({cellQRResults.filter(r => r.success).length})
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => {
                          const printWindow = window.open('', '_blank');
                          if (!printWindow) {
                            showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                            return;
                          }
                          const successfulResults = cellQRResults.filter(r => r.success);
                          const qrHtml = successfulResults.map(result => `
                            <div style="margin: 10px; text-align: center; display: inline-block; page-break-inside: avoid;">
                              <h4>${warehouseStructure.warehouse_name}</h4>
                              <p>Ячейка: ${result.location}</p>
                              <img src="${result.qr_code}" style="width: 150px; height: 150px;" />
                            </div>
                          `).join('');
                          
                          printWindow.document.write(`
                            <html>
                              <head><title>QR коды ячеек склада: ${warehouseStructure.warehouse_name}</title></head>
                              <body style="display: flex; flex-wrap: wrap;">${qrHtml}</body>
                            </html>
                          `);
                          printWindow.document.close();
                          printWindow.print();
                        }}
                        disabled={cellQRResults.filter(r => r.success).length === 0}
                      >
                        <Printer className="mr-2 h-4 w-4" />
                        Печать всех QR
                      </Button>
                    </div>
                  </div>
                )}

                {/* Warehouse Structure Visualization */}
                <div className="space-y-4">
                  <h4 className="font-medium">Структура склада:</h4>
                  <div className="text-sm text-gray-600">
                    Блоков: {warehouseStructure.blocks} | 
                    Полок на блок: {warehouseStructure.shelves_per_block} | 
                    Ячеек на полку: {warehouseStructure.cells_per_shelf}
                  </div>
                  
                  <div className="p-4 border rounded-lg bg-gray-50">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {Array.from({length: warehouseStructure.blocks}, (_, blockIndex) => (
                        <div key={blockIndex} className="border rounded p-3 bg-white">
                          <h5 className="font-medium mb-2">Блок {blockIndex + 1}</h5>
                          <div className="text-xs text-gray-600 mb-2">
                            Полок: {warehouseStructure.shelves_per_block} | 
                            Ячеек: {warehouseStructure.shelves_per_block * warehouseStructure.cells_per_shelf}
                          </div>
                          <div className="grid grid-cols-5 gap-1">
                            {Array.from({length: Math.min(warehouseStructure.shelves_per_block * warehouseStructure.cells_per_shelf, 20)}, (_, cellIndex) => {
                              const shelf = Math.floor(cellIndex / warehouseStructure.cells_per_shelf) + 1;
                              const cell = (cellIndex % warehouseStructure.cells_per_shelf) + 1;
                              const isOccupied = warehouseStructure.cells.some(c => 
                                c.block === (blockIndex + 1) && c.shelf === shelf && c.cell === cell && c.is_occupied
                              );
                              
                              return (
                                <div 
                                  key={cellIndex}
                                  className={`w-4 h-4 border text-xs flex items-center justify-center ${
                                    isOccupied ? 'bg-red-200 border-red-400' : 'bg-green-200 border-green-400'
                                  }`}
                                  title={`Блок ${blockIndex + 1}, Полка ${shelf}, Ячейка ${cell} - ${isOccupied ? 'Занята' : 'Свободна'}`}
                                >
                                  {isOccupied ? '●' : '○'}
                                </div>
                              );
                            })}
                            {warehouseStructure.shelves_per_block * warehouseStructure.cells_per_shelf > 20 && (
                              <div className="text-xs text-gray-500 col-span-5">
                                ... ещё {warehouseStructure.shelves_per_block * warehouseStructure.cells_per_shelf - 20} ячеек
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </>
            ) : (
              <div className="text-center py-8 text-gray-500">
                Не удалось загрузить структуру склада
              </div>
            )}

            {/* Close button */}
            <div className="flex justify-end pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={() => {
                  setShowWarehouseManagementModal(false);
                  setSelectedWarehouseForManagement(null);
                  setWarehouseStructure(null);
                  setSelectedCells([]);
                  setCellQRResults([]);
                }}
              >
                Закрыть
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Single Cell QR Generation Modal */}
      <Dialog open={showSingleCellQRModal} onOpenChange={(open) => {
        setShowSingleCellQRModal(open);
        if (!open) {
          resetSingleCellForm();
        }
      }}>
        <DialogContent className="w-full max-w-[600px] max-h-[90vh] p-4 overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center text-lg">
              <QrCode className="mr-2 h-5 w-5" />
              Генерация QR кода для отдельной ячейки
            </DialogTitle>
            <DialogDescription>
              Создайте QR код для конкретной ячейки, указав блок, полку и номер ячейки
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Поля ввода адреса ячейки */}
            <div className="grid grid-cols-3 gap-4">
              <div>
                <Label className="text-sm font-medium">Блок</Label>
                <Input
                  type="number"
                  min="1"
                  placeholder="1"
                  value={singleCellBlock}
                  onChange={(e) => setSingleCellBlock(e.target.value.replace(/\D/g, ''))}
                  className="mt-1"
                />
                <p className="text-xs text-gray-500 mt-1">Только цифры</p>
              </div>
              
              <div>
                <Label className="text-sm font-medium">Полка</Label>
                <Input
                  type="number"
                  min="1"
                  placeholder="1"
                  value={singleCellShelf}
                  onChange={(e) => setSingleCellShelf(e.target.value.replace(/\D/g, ''))}
                  className="mt-1"
                />
                <p className="text-xs text-gray-500 mt-1">Только цифры</p>
              </div>
              
              <div>
                <Label className="text-sm font-medium">Ячейка</Label>
                <Input
                  type="number"
                  min="1"
                  placeholder="1"
                  value={singleCellNumber}
                  onChange={(e) => setSingleCellNumber(e.target.value.replace(/\D/g, ''))}
                  className="mt-1"
                />
                <p className="text-xs text-gray-500 mt-1">Только цифры</p>
              </div>
            </div>

            {/* Предварительный просмотр адреса */}
            {(singleCellBlock || singleCellShelf || singleCellNumber) && (
              <div className="p-3 bg-blue-50 border border-blue-200 rounded">
                <div className="text-sm text-blue-800">
                  <strong>Адрес ячейки:</strong> Б{singleCellBlock || '?'}-П{singleCellShelf || '?'}-Я{singleCellNumber || '?'}
                </div>
                <div className="text-xs text-blue-600 mt-1">
                  QR код будет содержать именно этот адрес для сканирования
                </div>
              </div>
            )}

            {/* Кнопка генерации */}
            <div className="flex gap-2">
              <Button
                onClick={generateSingleCellQR}
                disabled={singleCellQRLoading || !singleCellBlock || !singleCellShelf || !singleCellNumber}
                className="flex-1 bg-purple-600 hover:bg-purple-700"
              >
                {singleCellQRLoading ? (
                  <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <QrCode className="mr-2 h-4 w-4" />
                )}
                Создать QR код
              </Button>
              
              <Button
                onClick={resetSingleCellForm}
                variant="outline"
              >
                Очистить
              </Button>
            </div>

            {/* Результат генерации */}
            {singleCellQRResult && (
              <div className="space-y-4">
                {singleCellQRResult.success ? (
                  <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div className="text-center">
                      <h4 className="font-medium text-green-800 mb-2">
                        QR код для ячейки {singleCellQRResult.location}
                      </h4>
                      
                      {singleCellQRResult.qr_code && (
                        <div className="mb-4">
                          <img 
                            src={singleCellQRResult.qr_code} 
                            alt={`QR код для ${singleCellQRResult.location}`}
                            className="mx-auto border rounded"
                            style={{ width: '200px', height: '200px' }}
                          />
                        </div>
                      )}
                      
                      <div className="text-sm text-green-700 mb-3">
                        <div><strong>Данные QR кода:</strong> {singleCellQRResult.qr_data}</div>
                        <div><strong>Местоположение:</strong> {singleCellQRResult.location}</div>
                      </div>

                      {/* Кнопка печати */}
                      {singleCellQRResult.qr_code && (
                        <Button
                          onClick={() => {
                            const printWindow = window.open('', '_blank');
                            if (!printWindow) {
                              showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                              return;
                            }
                            printWindow.document.write(`
                              <html>
                                <head>
                                  <title>QR код ячейки ${singleCellQRResult.location}</title>
                                  <style>
                                    body { text-align: center; font-family: Arial, sans-serif; padding: 20px; }
                                    .qr-container { margin: 20px 0; }
                                    .location { font-size: 18px; font-weight: bold; margin: 10px 0; }
                                    .data { font-size: 14px; color: #666; margin: 5px 0; }
                                  </style>
                                </head>
                                <body>
                                  <div class="qr-container">
                                    <div class="location">${singleCellQRResult.location}</div>
                                    <img src="${singleCellQRResult.qr_code}" style="width: 200px; height: 200px;" />
                                    <div class="data">Данные: ${singleCellQRResult.qr_data}</div>
                                  </div>
                                </body>
                              </html>
                            `);
                            printWindow.document.close();
                            printWindow.print();
                          }}
                          size="sm"
                          className="bg-green-600 hover:bg-green-700"
                        >
                          <Printer className="mr-2 h-4 w-4" />
                          Печать QR кода
                        </Button>
                      )}
                    </div>
                  </div>
                ) : (
                  <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                    <div className="text-center text-red-800">
                      <h4 className="font-medium mb-2">Ошибка создания QR кода</h4>
                      <p className="text-sm">{singleCellQRResult.error}</p>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Инструкции */}
            <div className="p-3 bg-gray-50 border border-gray-200 rounded">
              <h5 className="text-sm font-medium text-gray-800 mb-2">Инструкция:</h5>
              <ol className="text-xs text-gray-600 space-y-1">
                <li>1. Введите номера блока, полки и ячейки (только цифры)</li>
                <li>2. Проверьте предварительный просмотр адреса ячейки</li>
                <li>3. Нажмите "Создать QR код" для генерации</li>
                <li>4. Используйте кнопку "Печать QR кода" для печати</li>
                <li>5. QR код содержит адрес в формате Б1-П1-Я1 для сканирования</li>
              </ol>
            </div>

            {/* Кнопка закрытия */}
            <div className="flex justify-end">
              <Button 
                variant="outline" 
                onClick={() => setShowSingleCellQRModal(false)}
              >
                Закрыть
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* НОВАЯ СТРАНИЦА СОЗДАНИЯ СКЛАДА */}
      <Dialog open={showWarehouseCreationPage} onOpenChange={setShowWarehouseCreationPage}>
        <DialogContent className="max-w-6xl max-h-[95vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Plus className="mr-2 h-5 w-5" />
              {warehouseCreationStep === 'form' ? 'Создание нового склада' : 'Генерация QR кодов для ячеек'}
            </DialogTitle>
            <DialogDescription>
              {warehouseCreationStep === 'form' 
                ? 'Заполните информацию о складе для создания с автогенерацией ID номеров'
                : 'Создайте QR коды для всех ячеек или выбранной ячейки склада'
              }
            </DialogDescription>
          </DialogHeader>

          {warehouseCreationStep === 'form' ? (
            // ШАГ 1: ФОРМА СОЗДАНИЯ СКЛАДА
            <form onSubmit={handleCreateWarehouse} className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Основная информация */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-800">Основная информация</h3>
                  
                  <div>
                    <Label htmlFor="warehouse_name">Название склада *</Label>
                    <Input
                      id="warehouse_name"
                      value={warehouseForm.name}
                      onChange={(e) => setWarehouseForm({...warehouseForm, name: e.target.value})}
                      placeholder="Например: Склад Москва-1"
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="warehouse_location">Адрес склада *</Label>
                    <Input
                      id="warehouse_location"
                      value={warehouseForm.location}
                      onChange={(e) => setWarehouseForm({...warehouseForm, location: e.target.value})}
                      placeholder="Например: Москва, ул. Складская, 1"
                      required
                    />
                  </div>

                  <div>
                    <Label htmlFor="assigned_operator">Назначить оператора</Label>
                    <Select 
                      value={warehouseForm.assigned_operator_id} 
                      onValueChange={(value) => setWarehouseForm({...warehouseForm, assigned_operator_id: value})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Выберите оператора (необязательно)" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="none">Без назначения оператора</SelectItem>
                        {availableOperators.map(operator => (
                          <SelectItem key={operator.id} value={operator.id}>
                            {operator.full_name} - {operator.phone}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <p className="text-xs text-gray-500 mt-1">
                      Выберите оператора, который будет отвечать за этот склад
                    </p>
                  </div>
                </div>

                {/* Параметры структуры */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-800">Структура склада</h3>
                  
                  <div>
                    <Label htmlFor="blocks_count">Количество блоков (1-9) *</Label>
                    <Select 
                      value={warehouseForm.blocks_count.toString()} 
                      onValueChange={(value) => setWarehouseForm({...warehouseForm, blocks_count: parseInt(value)})}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {[1,2,3,4,5,6,7,8,9].map(num => (
                          <SelectItem key={num} value={num.toString()}>
                            {num} блок{num > 1 ? (num < 5 ? 'а' : 'ов') : ''}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="shelves_per_block">Полок в каждом блоке (1-3) *</Label>
                    <Select 
                      value={warehouseForm.shelves_per_block.toString()} 
                      onValueChange={(value) => setWarehouseForm({...warehouseForm, shelves_per_block: parseInt(value)})}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="1">1 полка</SelectItem>
                        <SelectItem value="2">2 полки</SelectItem>
                        <SelectItem value="3">3 полки</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="cells_per_shelf">Ячеек на каждой полке (1-50) *</Label>
                    <Input
                      id="cells_per_shelf"
                      type="number"
                      min="1"
                      max="50"
                      value={warehouseForm.cells_per_shelf || ''}
                      onChange={(e) => setWarehouseForm({...warehouseForm, cells_per_shelf: parseInt(e.target.value) || 1})}
                      required
                    />
                  </div>

                  {/* Предварительный расчет */}
                  <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                    <h4 className="font-medium text-blue-800 mb-2">📊 Расчет вместимости склада:</h4>
                    <div className="text-sm text-blue-700 space-y-1">
                      <p>Блоков: <span className="font-semibold">{warehouseForm.blocks_count || 1}</span></p>
                      <p>Полок в блоке: <span className="font-semibold">{warehouseForm.shelves_per_block || 1}</span></p>
                      <p>Ячеек на полке: <span className="font-semibold">{warehouseForm.cells_per_shelf || 1}</span></p>
                      <div className="border-t border-blue-300 pt-2 mt-2">
                        <p className="font-bold text-blue-900">
                          Общая вместимость: {(warehouseForm.blocks_count || 1) * (warehouseForm.shelves_per_block || 1) * (warehouseForm.cells_per_shelf || 1)} ячеек
                        </p>
                        <p className="text-xs text-blue-600 mt-1">
                          Каждая ячейка получит уникальный ID номер в формате: 001-01-01-001
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Кнопки действий */}
              <div className="flex justify-end space-x-2 pt-4 border-t">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={closeWarehouseCreationPage}
                >
                  Отмена
                </Button>
                <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="mr-2 h-4 w-4" />
                  Создать склад
                </Button>
              </div>
            </form>
          ) : (
            // ШАГ 2: ГЕНЕРАЦИЯ QR КОДОВ
            <div className="space-y-6">
              {/* Информация о созданном складе */}
              {createdWarehouseInfo && (
                <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                  <h3 className="text-lg font-semibold text-green-800 mb-2">
                    ✅ Склад успешно создан!
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-green-700">
                    <div>
                      <p><strong>Название:</strong> {createdWarehouseInfo.name}</p>
                      <p><strong>ID номер склада:</strong> {createdWarehouseInfo.warehouse_id_number}</p>
                      <p><strong>Адрес:</strong> {createdWarehouseInfo.location}</p>
                    </div>
                    <div>
                      <p><strong>Блоков:</strong> {createdWarehouseInfo.blocks_count}</p>
                      <p><strong>Полок в блоке:</strong> {createdWarehouseInfo.shelves_per_block}</p>
                      <p><strong>Ячеек на полке:</strong> {createdWarehouseInfo.cells_per_shelf}</p>
                      <p><strong>Общая вместимость:</strong> {createdWarehouseInfo.total_capacity} ячеек</p>
                    </div>
                  </div>
                </div>
              )}

              {/* Функции генерации QR кодов */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-gray-800">Генерация QR кодов для ячеек</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Генерация всех QR кодов */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <Grid3X3 className="mr-2 h-5 w-5" />
                        Все ячейки склада
                      </CardTitle>
                      <CardDescription>
                        Создать QR коды для всех {createdWarehouseInfo?.total_capacity || 0} ячеек склада
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {generatingAllQRs && (
                        <div className="mb-4">
                          <div className="flex justify-between text-sm text-gray-600 mb-1">
                            <span>Генерация QR кодов...</span>
                            <span>{Math.round(allQRProgress)}%</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                              style={{width: `${allQRProgress}%`}}
                            ></div>
                          </div>
                        </div>
                      )}
                      
                      <Button
                        onClick={generateAllCellQRs}
                        disabled={generatingAllQRs || !createdWarehouseInfo}
                        className="w-full"
                      >
                        {generatingAllQRs ? (
                          <>
                            <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                            Генерация в процессе...
                          </>
                        ) : (
                          <>
                            <QrCode className="mr-2 h-4 w-4" />
                            Создать все QR коды
                          </>
                        )}
                      </Button>
                      
                      {generatedQRs.length > 0 && (
                        <div className="mt-4 p-3 bg-gray-50 rounded">
                          <p className="text-sm text-gray-600">
                            Создано: {generatedQRs.filter(qr => qr.success).length} из {generatedQRs.length} QR кодов
                          </p>
                        </div>
                      )}
                    </CardContent>
                  </Card>

                  {/* Генерация QR кода выбранной ячейки */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        <Edit className="mr-2 h-5 w-5" />
                        Выбранная ячейка
                      </CardTitle>
                      <CardDescription>
                        Создать QR код для конкретной ячейки склада
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-3 gap-2">
                        <div>
                          <Label htmlFor="cell-block">Блок</Label>
                          <Input
                            id="cell-block"
                            type="number"
                            min="1"
                            max={createdWarehouseInfo?.blocks_count || 9}
                            placeholder="1"
                            value={selectedCellQR.block}
                            onChange={(e) => setSelectedCellQR({...selectedCellQR, block: e.target.value})}
                          />
                        </div>
                        <div>
                          <Label htmlFor="cell-shelf">Полка</Label>
                          <Input
                            id="cell-shelf"
                            type="number"
                            min="1"
                            max={createdWarehouseInfo?.shelves_per_block || 3}
                            placeholder="1"
                            value={selectedCellQR.shelf}
                            onChange={(e) => setSelectedCellQR({...selectedCellQR, shelf: e.target.value})}
                          />
                        </div>
                        <div>
                          <Label htmlFor="cell-cell">Ячейка</Label>
                          <Input
                            id="cell-cell"
                            type="number"
                            min="1"
                            max={createdWarehouseInfo?.cells_per_shelf || 50}
                            placeholder="1"
                            value={selectedCellQR.cell}
                            onChange={(e) => setSelectedCellQR({...selectedCellQR, cell: e.target.value})}
                          />
                        </div>
                      </div>
                      
                      <Button
                        onClick={generateSelectedCellQR}
                        disabled={generatingSelectedCellQR || !createdWarehouseInfo}
                        className="w-full"
                      >
                        {generatingSelectedCellQR ? (
                          <>
                            <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                            Генерация...
                          </>
                        ) : (
                          <>
                            <QrCode className="mr-2 h-4 w-4" />
                            Создать QR код
                          </>
                        )}
                      </Button>

                      {selectedCellQRResult && (
                        <div className="mt-4">
                          {selectedCellQRResult.success ? (
                            <div className="text-center space-y-3">
                              <p className="text-sm font-medium text-green-600">
                                QR код для ячейки {selectedCellQRResult.readable_name}
                              </p>
                              <div className="bg-white p-3 rounded border inline-block">
                                <img 
                                  src={selectedCellQRResult.qr_code} 
                                  alt={`QR код ${selectedCellQRResult.readable_name}`}
                                  className="w-32 h-32"
                                />
                              </div>
                              <div className="flex gap-2 justify-center">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    const link = document.createElement('a');
                                    link.href = selectedCellQRResult.qr_code;
                                    link.download = `qr-cell-${selectedCellQRResult.readable_name}.png`;
                                    link.click();
                                  }}
                                >
                                  <Download className="mr-1 h-3 w-3" />
                                  Скачать
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    const printWindow = window.open('', '_blank');
                                    if (!printWindow) {
                                      showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                                      return;
                                    }
                                    printWindow.document.write(`
                                      <html>
                                        <head><title>QR код ячейки ${selectedCellQRResult.readable_name}</title></head>
                                        <body style="text-align: center; padding: 20px;">
                                          <h2>QR код ячейки</h2>
                                          <h3>${selectedCellQRResult.readable_name}</h3>
                                          <img src="${selectedCellQRResult.qr_code}" style="width: 200px; height: 200px;" />
                                          <p>Склад: ${createdWarehouseInfo?.name || 'Не указан'}</p>
                                          <p>ID склада: ${createdWarehouseInfo?.warehouse_id_number || 'Не указан'}</p>
                                        </body>
                                      </html>
                                    `);
                                    printWindow.document.close();
                                    printWindow.print();
                                  }}
                                >
                                  <Printer className="mr-1 h-3 w-3" />
                                  Печать
                                </Button>
                              </div>
                            </div>
                          ) : (
                            <div className="p-3 bg-red-50 border border-red-200 rounded">
                              <p className="text-sm text-red-600">
                                Ошибка: {selectedCellQRResult.error}
                              </p>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </div>

              {/* Отображение созданных QR кодов */}
              {generatedQRs.length > 0 && (
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold text-gray-800">Созданные QR коды</h3>
                    <Button
                      onClick={() => {
                        // Печать всех QR кодов
                        const printWindow = window.open('', '_blank');
                        if (!printWindow) {
                          showAlert('Не удалось открыть окно печати. Пожалуйста, разрешите всплывающие окна в настройках браузера.', 'error');
                          return;
                        }
                        const qrContent = generatedQRs
                          .filter(qr => qr.success)
                          .map(qr => `
                            <div style="page-break-inside: avoid; margin: 20px 0; text-align: center; border: 1px solid #ccc; padding: 15px;">
                              <h3>${qr.readable_name}</h3>
                              <img src="${qr.qr_code}" style="width: 150px; height: 150px;" />
                              <p>Склад: ${createdWarehouseInfo?.name || 'Не указан'}</p>
                            </div>
                          `)
                          .join('');
                        
                        printWindow.document.write(`
                          <html>
                            <head>
                              <title>QR коды ячеек склада ${createdWarehouseInfo?.name}</title>
                              <style>
                                body { font-family: Arial, sans-serif; }
                                @media print { div { page-break-inside: avoid; } }
                              </style>
                            </head>
                            <body>
                              <h1 style="text-align: center;">QR коды ячеек склада</h1>
                              <h2 style="text-align: center;">${createdWarehouseInfo?.name}</h2>
                              ${qrContent}
                            </body>
                          </html>
                        `);
                        printWindow.document.close();
                        printWindow.print();
                      }}
                      className="bg-green-600 hover:bg-green-700"
                      disabled={generatedQRs.filter(qr => qr.success).length === 0}
                    >
                      <Printer className="mr-2 h-4 w-4" />
                      Печать всех QR кодов ({generatedQRs.filter(qr => qr.success).length})
                    </Button>
                  </div>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                    {generatedQRs.slice(0, 24).map((qr, index) => (
                      <div key={index} className={`p-3 rounded-lg border text-center ${
                        qr.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'
                      }`}>
                        {qr.success ? (
                          <>
                            <img 
                              src={qr.qr_code} 
                              alt={`QR код ${qr.readable_name}`}
                              className="w-16 h-16 mx-auto mb-2"
                            />
                            <p className="text-xs font-medium text-green-800">
                              {qr.readable_name}
                            </p>
                          </>
                        ) : (
                          <>
                            <div className="w-16 h-16 mx-auto mb-2 bg-red-200 flex items-center justify-center">
                              <span className="text-red-600 text-xs">❌</span>
                            </div>
                            <p className="text-xs font-medium text-red-800">
                              {qr.readable_name}
                            </p>
                            <p className="text-xs text-red-600">Ошибка</p>
                          </>
                        )}
                      </div>
                    ))}
                  </div>

                  {generatedQRs.length > 24 && (
                    <p className="text-sm text-gray-500 text-center">
                      И еще {generatedQRs.length - 24} QR кодов...
                    </p>
                  )}
                </div>
              )}

              {/* Кнопки действий */}
              <div className="flex justify-end space-x-2 pt-4 border-t">
                <Button 
                  variant="outline" 
                  onClick={closeWarehouseCreationPage}
                >
                  Закрыть
                </Button>
                <Button 
                  onClick={() => {
                    closeWarehouseCreationPage();
                    setActiveTab('warehouses-list');
                  }}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  <CheckCircle className="mr-2 h-4 w-4" />
                  Завершить создание склада
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* НОВЫЕ МОДАЛЬНЫЕ ОКНА ДЛЯ КУРЬЕРСКОЙ СЛУЖБЫ (ЭТАП 2) */}
      
      {/* Модальное окно создания курьера */}
      <Dialog open={courierCreateModal} onOpenChange={setCourierCreateModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Truck className="mr-2 h-5 w-5" />
              Создать курьера
            </DialogTitle>
            <DialogDescription>
              Создание нового курьера для службы доставки
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={handleCreateCourier} className="space-y-4">
            <div>
              <Label htmlFor="courier-full-name">ФИО курьера *</Label>
              <Input
                id="courier-full-name"
                value={courierCreateForm.full_name}
                onChange={(e) => setCourierCreateForm({...courierCreateForm, full_name: e.target.value})}
                placeholder="Иванов Иван Иванович"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="courier-phone">Телефон *</Label>
              <Input
                id="courier-phone"
                type="tel"
                value={courierCreateForm.phone}
                onChange={(e) => setCourierCreateForm({...courierCreateForm, phone: e.target.value})}
                placeholder="+79XXXXXXXXX"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="courier-password">Пароль *</Label>
              <Input
                id="courier-password"
                type="password"
                value={courierCreateForm.password}
                onChange={(e) => setCourierCreateForm({...courierCreateForm, password: e.target.value})}
                placeholder="Минимум 6 символов"
                minLength={6}
                required
              />
            </div>
            
            <div>
              <Label htmlFor="courier-address">Адрес проживания *</Label>
              <Input
                id="courier-address"
                value={courierCreateForm.address}
                onChange={(e) => setCourierCreateForm({...courierCreateForm, address: e.target.value})}
                placeholder="Москва, ул. Примерная, 10, кв. 5"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="courier-transport-type">Тип транспорта *</Label>
              <select
                id="courier-transport-type"
                value={courierCreateForm.transport_type}
                onChange={(e) => setCourierCreateForm({...courierCreateForm, transport_type: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-md"
                required
              >
                <option value="car">Легковой автомобиль</option>
                <option value="van">Фургон</option>
                <option value="truck">Грузовик</option>
                <option value="motorcycle">Мотоцикл</option>
                <option value="bicycle">Велосипед</option>
                <option value="on_foot">Пешком</option>
              </select>
            </div>
            
            <div>
              <Label htmlFor="courier-transport-number">Номер транспорта *</Label>
              <Input
                id="courier-transport-number"
                value={courierCreateForm.transport_number}
                onChange={(e) => setCourierCreateForm({...courierCreateForm, transport_number: e.target.value})}
                placeholder="А123БВ77 или номер велосипеда"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="courier-transport-capacity">Грузоподъемность (кг) *</Label>
              <Input
                id="courier-transport-capacity"
                type="number"
                min="1"
                max="10000"
                value={courierCreateForm.transport_capacity}
                onChange={(e) => setCourierCreateForm({...courierCreateForm, transport_capacity: e.target.value})}
                placeholder="Например: 500"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="courier-assigned-warehouse">Назначить на склад *</Label>
              <Select 
                value={courierCreateForm.assigned_warehouse_id} 
                onValueChange={(value) => setCourierCreateForm({...courierCreateForm, assigned_warehouse_id: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Выберите склад" />
                </SelectTrigger>
                <SelectContent>
                  {warehouses.map((warehouse) => (
                    <SelectItem key={warehouse.id} value={warehouse.id}>
                      {warehouse.name} - {warehouse.location}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex space-x-3">
              <Button type="submit" className="flex-1">
                <Plus className="mr-2 h-4 w-4" />
                Создать курьера
              </Button>
              <Button type="button" variant="outline" onClick={() => setCourierCreateModal(false)}>
                Отмена
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Модальное окно профиля курьера */}
      <Dialog open={courierProfileModal} onOpenChange={setCourierProfileModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Truck className="mr-2 h-5 w-5" />
              Профиль курьера
            </DialogTitle>
          </DialogHeader>
          
          {selectedCourier && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Основная информация</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <Label className="text-sm font-medium text-gray-500">ФИО</Label>
                      <p className="text-sm">{selectedCourier.full_name}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Телефон</Label>
                      <p className="text-sm">{selectedCourier.phone}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Адрес</Label>
                      <p className="text-sm">{selectedCourier.address}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Статус</Label>
                      <Badge variant={selectedCourier.is_active ? "default" : "secondary"}>
                        {selectedCourier.is_active ? 'Активен' : 'Неактивен'}
                      </Badge>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Транспорт</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Тип транспорта</Label>
                      <p className="text-sm">{selectedCourier.transport_type}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Номер транспорта</Label>
                      <p className="text-sm">{selectedCourier.transport_number}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Грузоподъемность</Label>
                      <p className="text-sm">{selectedCourier.transport_capacity} кг</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Склад</Label>
                      <p className="text-sm">{selectedCourier.assigned_warehouse_name}</p>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Статистика курьера */}
              {selectedCourier.statistics && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Статистика работы</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="text-center p-4 bg-green-50 rounded-lg">
                        <div className="text-2xl font-bold text-green-600">
                          {selectedCourier.statistics.total_completed}
                        </div>
                        <div className="text-sm text-green-500">Выполненных заявок</div>
                      </div>
                      <div className="text-center p-4 bg-blue-50 rounded-lg">
                        <div className="text-2xl font-bold text-blue-600">
                          {selectedCourier.statistics.total_assigned}
                        </div>
                        <div className="text-sm text-blue-500">Назначенных заявок</div>
                      </div>
                    </div>

                    {/* Недавние заявки */}
                    {selectedCourier.statistics.recent_requests && selectedCourier.statistics.recent_requests.length > 0 && (
                      <div className="mt-4">
                        <h4 className="font-semibold mb-2">Недавние заявки</h4>
                        <div className="space-y-2 max-h-40 overflow-y-auto">
                          {selectedCourier.statistics.recent_requests.slice(0, 5).map((request, index) => (
                            <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                              <div>
                                <p className="text-sm font-medium">{request.sender_full_name}</p>
                                <p className="text-xs text-gray-500">{request.cargo_name}</p>
                              </div>
                              <Badge variant="outline" className="text-xs">
                                {request.request_status}
                              </Badge>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              )}

              <div className="flex space-x-3">
                <Button onClick={() => handleEditCourier(selectedCourier)} className="flex-1">
                  <Edit className="mr-2 h-4 w-4" />
                  Редактировать
                </Button>
                <Button variant="outline" onClick={() => setCourierProfileModal(false)}>
                  Закрыть
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Модальное окно редактирования курьера */}
      <Dialog open={courierEditModal} onOpenChange={setCourierEditModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Edit className="mr-2 h-5 w-5" />
              Редактировать курьера
            </DialogTitle>
          </DialogHeader>
          
          <form onSubmit={handleUpdateCourier} className="space-y-4">
            <div>
              <Label htmlFor="edit-courier-full-name">ФИО курьера *</Label>
              <Input
                id="edit-courier-full-name"
                value={courierEditForm.full_name || ''}
                onChange={(e) => setCourierEditForm({...courierEditForm, full_name: e.target.value})}
                placeholder="Иванов Иван Иванович"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="edit-courier-phone">Телефон *</Label>
              <Input
                id="edit-courier-phone"
                type="tel"
                value={courierEditForm.phone || ''}
                onChange={(e) => setCourierEditForm({...courierEditForm, phone: e.target.value})}
                placeholder="+79XXXXXXXXX"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="edit-courier-address">Адрес проживания *</Label>
              <Input
                id="edit-courier-address"
                value={courierEditForm.address || ''}
                onChange={(e) => setCourierEditForm({...courierEditForm, address: e.target.value})}
                placeholder="Москва, ул. Примерная, 10, кв. 5"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="edit-courier-transport-type">Тип транспорта *</Label>
              <select
                id="edit-courier-transport-type"
                value={courierEditForm.transport_type || 'car'}
                onChange={(e) => setCourierEditForm({...courierEditForm, transport_type: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-md"
                required
              >
                <option value="car">Легковой автомобиль</option>
                <option value="van">Фургон</option>
                <option value="truck">Грузовик</option>
                <option value="motorcycle">Мотоцикл</option>
                <option value="bicycle">Велосипед</option>
                <option value="on_foot">Пешком</option>
              </select>
            </div>
            
            <div>
              <Label htmlFor="edit-courier-transport-number">Номер транспорта *</Label>
              <Input
                id="edit-courier-transport-number"
                value={courierEditForm.transport_number || ''}
                onChange={(e) => setCourierEditForm({...courierEditForm, transport_number: e.target.value})}
                placeholder="А123БВ77"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="edit-courier-transport-capacity">Грузоподъемность (кг) *</Label>
              <Input
                id="edit-courier-transport-capacity"
                type="number"
                min="1"
                max="10000"
                value={courierEditForm.transport_capacity || ''}
                onChange={(e) => setCourierEditForm({...courierEditForm, transport_capacity: e.target.value})}
                placeholder="500"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="edit-courier-assigned-warehouse">Назначить на склад *</Label>
              <Select 
                value={courierEditForm.assigned_warehouse_id || ''} 
                onValueChange={(value) => setCourierEditForm({...courierEditForm, assigned_warehouse_id: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Выберите склад" />
                </SelectTrigger>
                <SelectContent>
                  {warehouses.map((warehouse) => (
                    <SelectItem key={warehouse.id} value={warehouse.id}>
                      {warehouse.name} - {warehouse.location}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="edit-courier-password">Новый пароль</Label>
              <Input
                id="edit-courier-password"
                type="password"
                value={courierEditForm.password === 'unchanged' ? '' : courierEditForm.password || ''}
                onChange={(e) => setCourierEditForm({...courierEditForm, password: e.target.value})}
                placeholder="Оставьте пустым, если не хотите менять"
              />
            </div>
            
            <div className="flex space-x-3">
              <Button type="submit" className="flex-1">
                <Save className="mr-2 h-4 w-4" />
                Сохранить
              </Button>
              <Button type="button" variant="outline" onClick={() => setCourierEditModal(false)}>
                Отмена
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* НОВОЕ МОДАЛЬНОЕ ОКНО: Редактирование груза курьером */}
      <Dialog open={cargoEditModal} onOpenChange={setCargoEditModal}>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Edit className="mr-2 h-5 w-5" />
              Редактирование информации о грузе
            </DialogTitle>
            <DialogDescription>
              Заполните всю информацию о грузе для генерации документов
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={handleUpdateCargoInfo} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Информация о грузе */}
              <div>
                <Label htmlFor="edit-cargo-name">Наименование груза *</Label>
                <Input
                  id="edit-cargo-name"
                  value={courierCargoEditForm.cargo_name}
                  onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, cargo_name: e.target.value})}
                  placeholder="Например: Посылка с одеждой"
                  required
                />
              </div>
              
              <div>
                <Label htmlFor="edit-cargo-weight">Вес груза (кг) *</Label>
                <Input
                  id="edit-cargo-weight"
                  type="number"
                  min="0.1"
                  step="0.1"
                  value={courierCargoEditForm.weight}
                  onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, weight: e.target.value})}
                  placeholder="Например: 2.5"
                  required
                />
              </div>
            </div>

            {/* Информация о получателе */}
            <div className="border-t pt-4">
              <h3 className="text-lg font-semibold mb-3">Информация о получателе</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-recipient-name">ФИО получателя *</Label>
                  <Input
                    id="edit-recipient-name"
                    value={courierCargoEditForm.recipient_full_name}
                    onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, recipient_full_name: e.target.value})}
                    placeholder="Иванов Иван Иванович"
                    required
                  />
                </div>
                
                <div>
                  <Label htmlFor="edit-recipient-phone">Телефон получателя *</Label>
                  <Input
                    id="edit-recipient-phone"
                    type="tel"
                    value={courierCargoEditForm.recipient_phone}
                    onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, recipient_phone: e.target.value})}
                    placeholder="+79XXXXXXXXX"
                    required
                  />
                </div>
              </div>

              <div className="mt-4">
                <Label htmlFor="edit-recipient-address">Адрес получателя *</Label>
                <Input
                  id="edit-recipient-address"
                  value={courierCargoEditForm.recipient_address}
                  onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, recipient_address: e.target.value})}
                  placeholder="Душанбе, ул. Рудаки, 10, кв. 5"
                  required
                />
              </div>
            </div>

            {/* Способ получения и оплаты */}
            <div className="border-t pt-4">
              <h3 className="text-lg font-semibold mb-3">Способ получения и оплата</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="edit-delivery-method">Способ получения груза *</Label>
                  <select
                    id="edit-delivery-method"
                    value={courierCargoEditForm.delivery_method}
                    onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, delivery_method: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    required
                  >
                    <option value="pickup">Самовывоз</option>
                    <option value="home_delivery">Доставка до дома</option>
                  </select>
                </div>
                
                <div>
                  <Label htmlFor="edit-payment-method">Способ оплаты *</Label>
                  <select
                    id="edit-payment-method"
                    value={courierCargoEditForm.payment_method}
                    onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, payment_method: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    required
                  >
                    <option value="not_paid">Не оплачено</option>
                    <option value="cash">Оплата наличными</option>
                    <option value="card_transfer">Перевод на карту</option>
                    <option value="cash_on_delivery">Оплата при получении</option>
                  </select>
                </div>
              </div>

              <div className="mt-4">
                <Label htmlFor="edit-declared-value">Объявленная стоимость (₽)</Label>
                <Input
                  id="edit-declared-value"
                  type="number"
                  min="0"
                  step="0.01"
                  value={courierCargoEditForm.declared_value}
                  onChange={(e) => setCourierCargoEditForm({...courierCargoEditForm, declared_value: e.target.value})}
                  placeholder="Например: 5000"
                />
              </div>

              {/* Возможность приема оплаты */}
              {courierCargoEditForm.payment_method === 'cash' && (
                <div className="mt-4 p-3 bg-green-50 rounded-lg">
                  <Label className="flex items-center">
                    <input
                      type="checkbox"
                      className="mr-2"
                    />
                    <span className="text-sm">Принял оплату наличными</span>
                  </Label>
                  <p className="text-xs text-green-600 mt-1">
                    Отметьте, если получили оплату от отправителя
                  </p>
                </div>
              )}
            </div>
            
            <div className="flex flex-col space-y-2 pt-4">
              <Button type="submit" className="w-full" size="lg">
                <Save className="mr-2 h-4 w-4" />
                Сохранить информацию
              </Button>
              
              <div className="grid grid-cols-2 gap-2">
                <Button 
                  type="button"
                  variant="outline"
                  onClick={() => {
                    showAlert('После сохранения информации будет доступна печать QR кода', 'info');
                  }}
                >
                  <QrCode className="mr-2 h-4 w-4" />
                  Печать QR
                </Button>
                
                <Button 
                  type="button"
                  variant="outline"
                  onClick={() => {
                    showAlert('После сохранения информации будет доступна печать накладной', 'info');
                  }}
                >
                  <Printer className="mr-2 h-4 w-4" />
                  Накладная
                </Button>
              </div>
              
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setCargoEditModal(false)}
              >
                Отмена
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* НОВЫЕ МОДАЛЬНЫЕ ОКНА ДЛЯ УЛУЧШЕНИЙ ИНТЕРФЕЙСА КУРЬЕРА */}
      
      {/* Модальное окно профиля курьера */}
      <Dialog open={courierProfileModal} onOpenChange={setCourierProfileModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <User className="mr-2 h-5 w-5" />
              Мой профиль
            </DialogTitle>
            <DialogDescription>
              Редактирование личной информации и смена пароля
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={handleUpdateCourierProfile} className="space-y-4">
            <div>
              <Label htmlFor="profile-full-name">ФИО *</Label>
              <Input
                id="profile-full-name"
                value={courierProfileEditForm.full_name}
                onChange={(e) => setCourierProfileEditForm({...courierProfileEditForm, full_name: e.target.value})}
                placeholder="Иванов Иван Иванович"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="profile-phone">Телефон *</Label>
              <Input
                id="profile-phone"
                type="tel"
                value={courierProfileEditForm.phone}
                onChange={(e) => setCourierProfileEditForm({...courierProfileEditForm, phone: e.target.value})}
                placeholder="+79XXXXXXXXX"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="profile-address">Адрес проживания *</Label>
              <Input
                id="profile-address"
                value={courierProfileEditForm.address}
                onChange={(e) => setCourierProfileEditForm({...courierProfileEditForm, address: e.target.value})}
                placeholder="Москва, ул. Примерная, 10, кв. 5"
                required
              />
            </div>
            
            <div className="border-t pt-4">
              <h3 className="text-sm font-semibold mb-3">Смена пароля (опционально)</h3>
              
              <div className="space-y-3">
                <div>
                  <Label htmlFor="profile-current-password">Текущий пароль</Label>
                  <Input
                    id="profile-current-password"
                    type="password"
                    value={courierProfileEditForm.current_password}
                    onChange={(e) => setCourierProfileEditForm({...courierProfileEditForm, current_password: e.target.value})}
                    placeholder="Введите текущий пароль"
                  />
                </div>
                
                <div>
                  <Label htmlFor="profile-new-password">Новый пароль</Label>
                  <Input
                    id="profile-new-password"
                    type="password"
                    value={courierProfileEditForm.new_password}
                    onChange={(e) => setCourierProfileEditForm({...courierProfileEditForm, new_password: e.target.value})}
                    placeholder="Минимум 6 символов"
                    minLength={6}
                  />
                </div>
                
                <div>
                  <Label htmlFor="profile-confirm-password">Подтвердите пароль</Label>
                  <Input
                    id="profile-confirm-password"
                    type="password"
                    value={courierProfileEditForm.confirm_password}
                    onChange={(e) => setCourierProfileEditForm({...courierProfileEditForm, confirm_password: e.target.value})}
                    placeholder="Повторите новый пароль"
                  />
                </div>
              </div>
            </div>
            
            <div className="flex space-x-3">
              <Button type="submit" className="flex-1">
                <Save className="mr-2 h-4 w-4" />
                Сохранить изменения
              </Button>
              <Button type="button" variant="outline" onClick={() => setCourierProfileModal(false)}>
                Отмена
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Модальное окно чата курьера */}
      <Dialog open={courierChatModal} onOpenChange={setCourierChatModal}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-hidden">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <MessageCircle className="mr-2 h-5 w-5" />
              Чат с поддержкой
            </DialogTitle>
            <DialogDescription>
              Свяжитесь с администратором или оператором склада
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="bg-gray-50 p-4 rounded-lg h-60 overflow-y-auto">
              <div className="space-y-3">
                <div className="flex justify-start">
                  <div className="bg-blue-100 text-blue-800 px-3 py-2 rounded-lg max-w-xs">
                    <p className="text-sm">Добро пожаловать в чат поддержки! Как мы можем помочь?</p>
                    <span className="text-xs text-blue-600">Поддержка • 12:00</span>
                  </div>
                </div>
                
                <div className="flex justify-center">
                  <div className="bg-gray-200 text-gray-600 px-3 py-1 rounded-full text-xs">
                    Функция чата будет доступна в ближайшее время
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex space-x-2">
              <Input
                placeholder="Напишите ваше сообщение..."
                className="flex-1"
                disabled
              />
              <Button disabled>
                <MessageCircle className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="grid grid-cols-2 gap-3">
              <Button variant="outline" size="sm" disabled>
                📞 Звонок администратору
              </Button>
              <Button variant="outline" size="sm" disabled>
                📧 Email поддержке
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* НОВЫЕ МОДАЛЬНЫЕ ОКНА ДЛЯ ПРОСМОТРА И РЕДАКТИРОВАНИЯ ЗАЯВОК */}
      
      {/* Модальное окно просмотра заявки */}
      <Dialog open={requestViewModal} onOpenChange={setRequestViewModal}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Package className="mr-2 h-5 w-5" />
              Просмотр заявки №{selectedRequest?.request_number || selectedRequest?.id}
            </DialogTitle>
            <DialogDescription>
              Полная информация о заявке и история операций
            </DialogDescription>
          </DialogHeader>
          
          {selectedRequest && (
            <div className="space-y-6">
              {/* Информация об отправителе */}
              <div>
                <h3 className="text-lg font-medium mb-3">Информация об отправителе</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-500">ФИО</Label>
                    <p className="text-sm font-medium">{selectedRequest.sender_full_name}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-500">Телефон</Label>
                    <p className="text-sm">{selectedRequest.sender_phone}</p>
                  </div>
                  <div className="md:col-span-2">
                    <Label className="text-sm font-medium text-gray-500">Адрес отправителя</Label>
                    <p className="text-sm">{selectedRequest.sender_address || selectedRequest.pickup_address}</p>
                  </div>
                </div>
              </div>
              
              {/* Информация о получателе */}
              {(selectedRequest.recipient_full_name || selectedRequest.recipient_phone || selectedRequest.recipient_address) && (
                <div>
                  <h3 className="text-lg font-medium mb-3">Информация о получателе</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-sm font-medium text-gray-500">ФИО</Label>
                      <p className="text-sm font-medium">{selectedRequest.recipient_full_name || 'Не указан'}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Телефон</Label>
                      <p className="text-sm">{selectedRequest.recipient_phone || 'Не указан'}</p>
                    </div>
                    <div className="md:col-span-2">
                      <Label className="text-sm font-medium text-gray-500">Адрес получателя</Label>
                      <p className="text-sm">{selectedRequest.recipient_address || 'Не указан'}</p>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Информация о грузах */}
              <div>
                <h3 className="text-lg font-medium mb-3">Информация о грузах</h3>
                
                {/* Если есть сохраненные cargo_items с подробностями */}
                {selectedRequest.cargo_items && Array.isArray(selectedRequest.cargo_items) && selectedRequest.cargo_items.length > 0 ? (
                  <div className="space-y-4">
                    {/* Таблица грузов */}
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Наименование
                            </th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Вес (кг)
                            </th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Цена за кг (₽)
                            </th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Итого (₽)
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {selectedRequest.cargo_items.map((item, index) => (
                            <tr key={index}>
                              <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                                {item.name || 'Не указано'}
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                                {item.weight || 'Не указано'}
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                                {item.price_per_kg || 'Не указано'}
                              </td>
                              <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-green-600">
                                {item.total_price || 'Не указано'}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    
                    {/* Итого */}
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="text-blue-600 font-medium">Общий вес:</span>
                          <span className="ml-2 font-bold">
                            {selectedRequest.cargo_items.reduce((sum, item) => sum + (parseFloat(item.weight) || 0), 0).toFixed(1)} кг
                          </span>
                        </div>
                        <div>
                          <span className="text-blue-600 font-medium">Общая стоимость:</span>
                          <span className="ml-2 font-bold">
                            {selectedRequest.cargo_items.reduce((sum, item) => sum + (parseFloat(item.total_price) || 0), 0).toFixed(2)} ₽
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  /* Простое отображение груза если cargo_items нет */
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Наименование груза</Label>
                      <p className="text-sm font-medium">{selectedRequest.cargo_name}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Вес</Label>
                      <p className="text-sm">{selectedRequest.weight || selectedRequest.total_weight || 'Не указан'} кг</p>
                    </div>
                    {selectedRequest.total_value && (
                      <div>
                        <Label className="text-sm font-medium text-gray-500">Стоимость</Label>
                        <p className="text-sm font-medium text-green-600">{selectedRequest.total_value} ₽</p>
                      </div>
                    )}
                  </div>
                )}
                
                {/* Дополнительная информация о заборе */}
                <div className="grid grid-cols-2 gap-4 mt-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-500">Дата забора</Label>
                    <p className="text-sm">
                      {selectedRequest.pickup_date 
                        ? new Date(selectedRequest.pickup_date).toLocaleDateString('ru-RU')
                        : 'Не указана'
                      }
                    </p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-500">Время забора</Label>
                    <p className="text-sm">
                      {selectedRequest.pickup_time_from && selectedRequest.pickup_time_to 
                        ? `${selectedRequest.pickup_time_from} - ${selectedRequest.pickup_time_to}`
                        : (selectedRequest.pickup_time || 'Не указано')
                      }
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Информация об оплате */}
              <div>
                <h3 className="text-lg font-medium mb-3">Информация об оплате</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label className="text-sm font-medium text-gray-500">Способ оплаты</Label>
                    <p className="text-sm">{
                      selectedRequest.payment_method === 'cash' ? 'Наличные' :
                      selectedRequest.payment_method === 'card_transfer' ? 'Перевод на карту' :
                      selectedRequest.payment_method === 'cash_on_delivery' ? 'При получении' :
                      selectedRequest.payment_method === 'debt' ? 'В долг' :
                      selectedRequest.payment_method === 'not_paid' ? 'Не оплачено' :
                      selectedRequest.payment_method || 'Не указан'
                    }</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-gray-500">Статус оплаты</Label>
                    <Badge variant={selectedRequest.payment_status === 'paid' ? 'default' : 'secondary'} className="ml-2">
                      {selectedRequest.payment_status === 'paid' ? 'Оплачено' : 
                       selectedRequest.payment_status === 'not_paid' ? 'Не оплачено' : 
                       selectedRequest.payment_method === 'cash_on_delivery' ? 'При получении' : 'Не указан'}
                    </Badge>
                  </div>
                  {selectedRequest.payment_received !== undefined && (
                    <div>
                      <Label className="text-sm font-medium text-gray-500">Оплата получена</Label>
                      <Badge variant={selectedRequest.payment_received ? 'default' : 'secondary'} className="ml-2">
                        {selectedRequest.payment_received ? 'Да' : 'Нет'}
                      </Badge>
                    </div>
                  )}
                  <div>
                    <Label className="text-sm font-medium text-gray-500">Способ получения</Label>
                    <p className="text-sm">{
                      selectedRequest.delivery_method === 'pickup' ? 'Самовывоз с склада' :
                      selectedRequest.delivery_method === 'home_delivery' ? 'Доставка на дом' :
                      selectedRequest.delivery_method === 'office_delivery' ? 'Доставка в офис' :
                      selectedRequest.delivery_method || 'Не указан'
                    }</p>
                  </div>
                </div>
                
                {selectedRequest.special_instructions && (
                  <div className="mt-4">
                    <Label className="text-sm font-medium text-gray-500">Особые инструкции</Label>
                    <p className="text-sm bg-gray-50 p-2 rounded">{selectedRequest.special_instructions}</p>
                  </div>
                )}
              </div>
              
              {/* История операций */}
              <div>
                <h3 className="text-lg font-medium mb-3">История операций</h3>
                <div className="space-y-2">
                  <div className="bg-green-50 p-3 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <CheckCircle className="h-4 w-4 text-green-600" />
                      <span className="text-sm font-medium text-green-800">
                        Заявка принята курьером {user?.full_name}
                      </span>
                    </div>
                    <p className="text-xs text-green-600 mt-1">
                      {new Date(selectedRequest.updated_at).toLocaleString('ru-RU')}
                    </p>
                  </div>
                  
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <Package className="h-4 w-4 text-blue-600" />
                      <span className="text-sm font-medium text-blue-800">
                        Заявка создана оператором {selectedRequest.created_by_operator || 'Системой'}
                      </span>
                    </div>
                    <p className="text-xs text-blue-600 mt-1">
                      {new Date(selectedRequest.created_at).toLocaleString('ru-RU')}
                    </p>
                  </div>
                  
                  {selectedRequest.picked_at && (
                    <div className="bg-orange-50 p-3 rounded-lg">
                      <div className="flex items-center space-x-2">
                        <Truck className="h-4 w-4 text-orange-600" />
                        <span className="text-sm font-medium text-orange-800">
                          Груз забран курьером
                        </span>
                      </div>
                      <p className="text-xs text-orange-600 mt-1">
                        {new Date(selectedRequest.picked_at).toLocaleString('ru-RU')}
                      </p>
                    </div>
                  )}
                  
                  {selectedRequest.delivered_at && (
                    <div className="bg-purple-50 p-3 rounded-lg">
                      <div className="flex items-center space-x-2">
                        <CheckCircle className="h-4 w-4 text-purple-600" />
                        <span className="text-sm font-medium text-purple-800">
                          Груз доставлен получателю
                        </span>
                      </div>
                      <p className="text-xs text-purple-600 mt-1">
                        {new Date(selectedRequest.delivered_at).toLocaleString('ru-RU')}
                      </p>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Функциональные кнопки */}
              <div className="flex flex-col space-y-3 pt-4 border-t">
                <div className="grid grid-cols-2 gap-3">
                  <Button onClick={handlePrintLabel} variant="outline">
                    <Printer className="mr-2 h-4 w-4" />
                    Печать накладной
                  </Button>
                  <Button onClick={handlePrintQR} variant="outline">
                    <QrCode className="mr-2 h-4 w-4" />
                    Печать QR кода
                  </Button>
                </div>
                <Button onClick={() => handleEditRequest(selectedRequest)} className="w-full">
                  <Edit className="mr-2 h-4 w-4" />
                  Редактировать заявку
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
      
      {/* Модальное окно редактирования заявки */}
      <Dialog open={requestEditModal} onOpenChange={setRequestEditModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Edit className="mr-2 h-5 w-5" />
              Редактирование заявки №{selectedRequest?.request_number || selectedRequest?.id}
            </DialogTitle>
            <DialogDescription>
              Оформление и заполнение полной информации о заявке
            </DialogDescription>
          </DialogHeader>
          
          <form onSubmit={handleSaveEditedRequest} className="space-y-6">
            {/* Информация об отправителе - автозаполнение */}
            <div>
              <h3 className="text-lg font-medium mb-3">Информация об отправителе</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="sender-name">ФИО отправителя *</Label>
                  <Input
                    id="sender-name"
                    value={requestEditForm.sender_full_name}
                    onChange={(e) => setRequestEditForm({...requestEditForm, sender_full_name: e.target.value})}
                    placeholder="Иванов Иван Иванович"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="sender-phone">Телефон отправителя *</Label>
                  <Input
                    id="sender-phone"
                    type="tel"
                    value={requestEditForm.sender_phone}
                    onChange={(e) => setRequestEditForm({...requestEditForm, sender_phone: e.target.value})}
                    placeholder="+79XXXXXXXXX"
                    required
                  />
                </div>
                <div className="md:col-span-2">
                  <Label htmlFor="sender-address">Адрес отправителя *</Label>
                  <Input
                    id="sender-address"
                    value={requestEditForm.sender_address}
                    onChange={(e) => setRequestEditForm({...requestEditForm, sender_address: e.target.value})}
                    placeholder="Москва, ул. Примерная, 10, кв. 5"
                    required
                  />
                </div>
              </div>
            </div>
            
            {/* Информация о получателе */}
            <div>
              <h3 className="text-lg font-medium mb-3">Информация о получателе</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="recipient-name">ФИО получателя *</Label>
                  <Input
                    id="recipient-name"
                    value={requestEditForm.recipient_full_name}
                    onChange={(e) => setRequestEditForm({...requestEditForm, recipient_full_name: e.target.value})}
                    placeholder="Петров Петр Петрович"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="recipient-phone">Телефон получателя *</Label>
                  <Input
                    id="recipient-phone"
                    type="tel"
                    value={requestEditForm.recipient_phone}
                    onChange={(e) => setRequestEditForm({...requestEditForm, recipient_phone: e.target.value})}
                    placeholder="+992XXXXXXXXX"
                    required
                  />
                </div>
                <div className="md:col-span-2">
                  <Label htmlFor="recipient-address">Адрес получателя *</Label>
                  <Input
                    id="recipient-address"
                    value={requestEditForm.recipient_address}
                    onChange={(e) => setRequestEditForm({...requestEditForm, recipient_address: e.target.value})}
                    placeholder="Душанбе, ул. Получательная, 20"
                    required
                  />
                </div>
              </div>
            </div>
            
            {/* Информация о грузах */}
            <div>
              <div className="flex justify-between items-center mb-3">
                <h3 className="text-lg font-medium">Информация о грузах</h3>
                <Button type="button" onClick={addRequestCargoItem} variant="outline" size="sm">
                  <Plus className="mr-2 h-4 w-4" />
                  Добавить груз
                </Button>
              </div>
              
              <div className="space-y-4">
                {requestEditForm.cargo_items.map((item, index) => (
                  <div key={index} className="border rounded-lg p-4 relative">
                    {requestEditForm.cargo_items.length > 1 && (
                      <Button 
                        type="button"
                        onClick={() => removeRequestCargoItem(index)}
                        variant="ghost"
                        size="sm"
                        className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    )}
                    
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                      <div>
                        <Label>Наименование груза *</Label>
                        <Input
                          value={item.name}
                          onChange={(e) => updateRequestCargoItem(index, 'name', e.target.value)}
                          placeholder="Документы"
                          required
                        />
                      </div>
                      <div>
                        <Label>Вес (кг) *</Label>
                        <Input
                          type="number"
                          step="0.1"
                          value={item.weight}
                          onChange={(e) => updateRequestCargoItem(index, 'weight', e.target.value)}
                          placeholder="10"
                          required
                        />
                      </div>
                      <div>
                        <Label>Стоимость за кг (₽) *</Label>
                        <Input
                          type="number"
                          step="0.01"
                          value={item.price_per_kg}
                          onChange={(e) => updateRequestCargoItem(index, 'price_per_kg', e.target.value)}
                          placeholder="80"
                          required
                        />
                      </div>
                      <div>
                        <Label>Итого (₽)</Label>
                        <Input
                          value={item.total_price}
                          disabled
                          className="bg-gray-100"
                          placeholder="800"
                        />
                      </div>
                    </div>
                  </div>
                ))}
                
                {/* Калькулятор общих значений */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-800 mb-2">Расчёт итого:</h4>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-blue-600">Общий вес:</span>
                      <span className="ml-2 font-medium">
                        {requestEditForm.cargo_items.reduce((sum, item) => sum + (parseFloat(item.weight) || 0), 0).toFixed(1)} кг
                      </span>
                    </div>
                    <div>
                      <span className="text-blue-600">Общая стоимость:</span>
                      <span className="ml-2 font-medium">
                        {requestEditForm.cargo_items.reduce((sum, item) => sum + (parseFloat(item.total_price) || 0), 0).toFixed(2)} ₽
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Способ оплаты и функция приёма оплаты */}
            <div>
              <h3 className="text-lg font-medium mb-3">Оплата</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Способ оплаты</Label>
                  <Select 
                    value={requestEditForm.payment_method}
                    onValueChange={(value) => setRequestEditForm({...requestEditForm, payment_method: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Выберите способ оплаты" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="not_paid">Не оплачено</SelectItem>
                      <SelectItem value="cash">Оплата наличными</SelectItem>
                      <SelectItem value="card_transfer">Перевод на карту</SelectItem>
                      <SelectItem value="cash_on_delivery">Оплата при получении</SelectItem>
                      <SelectItem value="debt">Оплата в долг</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="payment-received"
                    checked={requestEditForm.payment_received}
                    onChange={(e) => setRequestEditForm({...requestEditForm, payment_received: e.target.checked})}
                    className="rounded border-gray-300"
                  />
                  <Label htmlFor="payment-received">Оплата получена</Label>
                </div>
              </div>
            </div>
            
            {/* Способ получения груза */}
            <div>
              <h3 className="text-lg font-medium mb-3">Способ получения груза</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Способ получения</Label>
                  <Select 
                    value={requestEditForm.delivery_method}
                    onValueChange={(value) => setRequestEditForm({...requestEditForm, delivery_method: value})}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Выберите способ получения" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="pickup">Самовывоз с склада</SelectItem>
                      <SelectItem value="home_delivery">Доставка на дом</SelectItem>
                      <SelectItem value="office_delivery">Доставка в офис</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Особые инструкции</Label>
                  <Textarea
                    value={requestEditForm.special_instructions}
                    onChange={(e) => setRequestEditForm({...requestEditForm, special_instructions: e.target.value})}
                    placeholder="Дополнительная информация о доставке..."
                    rows={2}
                  />
                </div>
              </div>
            </div>
            
            {/* Кнопки управления */}
            <div className="flex flex-col space-y-3 pt-4 border-t">
              <div className="grid grid-cols-2 gap-3">
                <Button type="button" onClick={handlePrintLabel} variant="outline">
                  <Printer className="mr-2 h-4 w-4" />
                  Печать накладной
                </Button>
                <Button type="button" onClick={handlePrintQR} variant="outline">
                  <QrCode className="mr-2 h-4 w-4" />
                  Печать QR кода
                </Button>
              </div>
              
              <div className="flex space-x-3">
                <Button type="submit" className="flex-1">
                  <Save className="mr-2 h-4 w-4" />
                  Сохранить изменения
                </Button>
                <Button type="button" variant="outline" onClick={() => setRequestEditModal(false)}>
                  Отмена
                </Button>
              </div>
            </div>
          </form>
        </DialogContent>
      </Dialog>
      
      {/* МОДАЛЬНОЕ ОКНО СВЯЗИ С ОТПРАВИТЕЛЕМ */}
      <Dialog open={senderContactModal} onOpenChange={setSenderContactModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Phone className="mr-2 h-5 w-5" />
              Связаться с отправителем
            </DialogTitle>
            <DialogDescription>
              {contactSender?.full_name}
            </DialogDescription>
          </DialogHeader>
          
          {contactSender && (
            <div className="space-y-4">
              {/* Информация об отправителе */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="space-y-2">
                  <div>
                    <Label className="text-sm font-medium text-blue-700">ФИО:</Label>
                    <p className="text-sm font-semibold text-blue-800">{contactSender.full_name}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-blue-700">Телефон:</Label>
                    <p className="text-sm font-semibold text-blue-800">{contactSender.phone}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-blue-700">Груз:</Label>
                    <p className="text-sm text-blue-700">{contactSender.cargo_name}</p>
                  </div>
                  <div>
                    <Label className="text-sm font-medium text-blue-700">Адрес забора:</Label>
                    <p className="text-sm text-blue-700">{contactSender.pickup_address}</p>
                  </div>
                </div>
              </div>
              
              {/* Кнопки связи */}
              <div className="grid grid-cols-2 gap-3">
                <Button 
                  onClick={handleWhatsApp}
                  className="w-full bg-green-600 hover:bg-green-700 text-white"
                >
                  <MessageSquare className="mr-2 h-4 w-4" />
                  WhatsApp
                </Button>
                
                <Button 
                  onClick={handleTelegram}
                  className="w-full bg-blue-500 hover:bg-blue-600 text-white"
                >
                  <Send className="mr-2 h-4 w-4" />
                  Telegram
                </Button>
                
                <Button 
                  onClick={handleSenderOnlineChat}
                  variant="outline"
                  className="w-full"
                >
                  <MessageCircle className="mr-2 h-4 w-4" />
                  Онлайн чат
                </Button>
                
                <Button 
                  onClick={handlePhoneCall}
                  variant="outline"
                  className="w-full text-green-700 border-green-200 hover:bg-green-50"
                >
                  <Phone className="mr-2 h-4 w-4" />
                  Позвонить
                </Button>
              </div>
              
              {/* Кнопка закрытия */}
              <Button 
                variant="outline" 
                onClick={() => setSenderContactModal(false)}
                className="w-full mt-4"
              >
                Закрыть
              </Button>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНОЕ ОКНО УПРАВЛЕНИЯ ЯЧЕЙКАМИ */}
      <Dialog open={cellManagementModal} onOpenChange={setCellManagementModal}>
        <DialogContent className="w-full max-w-6xl max-h-[95vh] overflow-y-auto mx-4">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Settings className="mr-2 h-5 w-5" />
              Управление ячейками: {selectedWarehouseForCells?.name}
            </DialogTitle>
            <DialogDescription>
              Управление структурой склада, генерация QR кодов для ячеек и массовые операции
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Информация о складе */}
            {selectedWarehouseForCells && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center text-lg">
                    <Building className="mr-2 h-5 w-5" />
                    Информация о складе
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <p className="text-2xl font-bold text-blue-600">{selectedWarehouseForCells.blocks_count || 0}</p>
                      <p className="text-sm text-gray-600">Блоков</p>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <p className="text-2xl font-bold text-green-600">{selectedWarehouseForCells.shelves_per_block || 0}</p>
                      <p className="text-sm text-gray-600">Полок в блоке</p>
                    </div>
                    <div className="text-center p-3 bg-orange-50 rounded-lg">
                      <p className="text-2xl font-bold text-orange-600">{selectedWarehouseForCells.cells_per_shelf || 0}</p>
                      <p className="text-sm text-gray-600">Ячеек на полке</p>
                    </div>
                    <div className="text-center p-3 bg-purple-50 rounded-lg">
                      <p className="text-2xl font-bold text-purple-600">
                        {(selectedWarehouseForCells.blocks_count || 0) * 
                         (selectedWarehouseForCells.shelves_per_block || 0) * 
                         (selectedWarehouseForCells.cells_per_shelf || 0)}
                      </p>
                      <p className="text-sm text-gray-600">Всего ячеек</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Редактирование структуры склада */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Grid3X3 className="mr-2 h-5 w-5" />
                  Изменить структуру склада
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
                  <div>
                    <Label htmlFor="blocks-count">Количество блоков</Label>
                    <Input
                      id="blocks-count"
                      type="number"
                      min="1"
                      value={cellEditForm.blocks_count}
                      onChange={(e) => setCellEditForm({...cellEditForm, blocks_count: e.target.value})}
                      placeholder="Например: 3"
                    />
                  </div>
                  <div>
                    <Label htmlFor="shelves-per-block">Полок в блоке</Label>
                    <Input
                      id="shelves-per-block"
                      type="number"
                      min="1"
                      value={cellEditForm.shelves_per_block}
                      onChange={(e) => setCellEditForm({...cellEditForm, shelves_per_block: e.target.value})}
                      placeholder="Например: 5"
                    />
                  </div>
                  <div>
                    <Label htmlFor="cells-per-shelf">Ячеек на полке</Label>
                    <Input
                      id="cells-per-shelf"
                      type="number"
                      min="1"
                      value={cellEditForm.cells_per_shelf}
                      onChange={(e) => setCellEditForm({...cellEditForm, cells_per_shelf: e.target.value})}
                      placeholder="Например: 4"
                    />
                  </div>
                </div>
                <Button onClick={handleUpdateWarehouseStructure} className="w-full">
                  <Settings className="mr-2 h-4 w-4" />
                  Обновить структуру склада
                </Button>
              </CardContent>
            </Card>

            {/* Массовые операции с QR */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <QrCode className="mr-2 h-5 w-5" />
                  Генерация QR кодов
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button onClick={handleGenerateAllCellsQR} className="h-16">
                    <QrCode className="mr-2 h-6 w-6" />
                    <div className="text-left">
                      <div className="font-semibold">Генерировать все QR коды</div>
                      <div className="text-sm opacity-75">Создать QR коды для всех ячеек склада</div>
                    </div>
                  </Button>
                  <Button 
                    variant="outline" 
                    onClick={handleDeleteSelectedCells}
                    disabled={selectedCells.length === 0}
                    className="h-16"
                  >
                    <Trash2 className="mr-2 h-6 w-6" />
                    <div className="text-left">
                      <div className="font-semibold">Удалить выбранные ячейки</div>
                      <div className="text-sm opacity-75">
                        {selectedCells.length > 0 ? `Выбрано: ${selectedCells.length}` : 'Не выбрано ячеек'}
                      </div>
                    </div>
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Список ячеек */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Package className="mr-2 h-5 w-5" />
                    Ячейки склада
                  </div>
                  {warehouseCells.length > 0 && (
                    <Badge variant="outline">
                      {warehouseCells.length} ячеек
                    </Badge>
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                {cellsLoading ? (
                  <div className="text-center py-8">
                    <RefreshCw className="mx-auto h-8 w-8 animate-spin text-gray-400 mb-4" />
                    <p className="text-gray-500">Загрузка ячеек...</p>
                  </div>
                ) : warehouseCells.length === 0 ? (
                  <div className="text-center py-8">
                    <Package className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                    <p className="text-gray-500 mb-2">Ячеек пока нет</p>
                    <p className="text-sm text-gray-400">Обновите структуру склада для создания ячеек</p>
                  </div>
                ) : (
                  <div className="space-y-6">
                    {/* Групповое выделение */}
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          checked={selectedCells.length === warehouseCells.length}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setSelectedCells(warehouseCells.map(cell => cell.id));
                            } else {
                              setSelectedCells([]);
                            }
                          }}
                        />
                        <span className="text-sm font-medium">Выбрать все ячейки</span>
                      </div>
                      <div className="text-sm text-gray-600">
                        Выбрано: {selectedCells.length} из {warehouseCells.length}
                      </div>
                    </div>

                    {/* Отображение ячеек по блокам в виде таблиц */}
                    {(() => {
                      // Группируем ячейки по блокам
                      const cellsByBlock = warehouseCells.reduce((acc, cell) => {
                        const blockKey = cell.block_number;
                        if (!acc[blockKey]) {
                          acc[blockKey] = [];
                        }
                        acc[blockKey].push(cell);
                        return acc;
                      }, {});

                      return Object.keys(cellsByBlock)
                        .sort((a, b) => parseInt(a) - parseInt(b))
                        .map(blockNumber => {
                          const blockCells = cellsByBlock[blockNumber];
                          
                          // Группируем ячейки по полкам внутри блока
                          const cellsByShelf = blockCells.reduce((acc, cell) => {
                            const shelfKey = cell.shelf_number;
                            if (!acc[shelfKey]) {
                              acc[shelfKey] = [];
                            }
                            acc[shelfKey].push(cell);
                            return acc;
                          }, {});

                          return (
                            <div key={blockNumber} className="border rounded-lg overflow-hidden">
                              <div className="bg-blue-50 px-4 py-3 border-b">
                                <h4 className="font-semibold text-blue-800 flex items-center">
                                  <Grid3X3 className="mr-2 h-4 w-4" />
                                  Блок {blockNumber}
                                  <Badge variant="outline" className="ml-2">
                                    {blockCells.length} ячеек
                                  </Badge>
                                </h4>
                              </div>
                              
                              <div className="p-4 space-y-4">
                                {Object.keys(cellsByShelf)
                                  .sort((a, b) => parseInt(a) - parseInt(b))
                                  .map(shelfNumber => {
                                    const shelfCells = cellsByShelf[shelfNumber].sort((a, b) => a.cell_number - b.cell_number);
                                    
                                    return (
                                      <div key={shelfNumber} className="bg-gray-50 rounded-lg p-3">
                                        <div className="flex items-center justify-between mb-3">
                                          <h5 className="font-medium text-gray-700 flex items-center">
                                            <Package className="mr-1 h-3 w-3" />
                                            Полка {shelfNumber}
                                          </h5>
                                          <span className="text-xs text-gray-500">{shelfCells.length} ячеек</span>
                                        </div>
                                        
                                        {/* Таблица ячеек для данной полки */}
                                        <div className="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2">
                                          {shelfCells.map((cell) => (
                                            <React.Fragment key={cell.id}>
                                            <div
                                              className={`aspect-square border-2 rounded-lg cursor-pointer transition-all hover:shadow-md ${
                                                selectedCells.includes(cell.id)
                                                  ? 'border-blue-500 bg-blue-100'
                                                  : cell.is_occupied
                                                  ? 'border-red-300 bg-red-50'
                                                  : 'border-green-300 bg-green-50 hover:border-green-400'
                                              }`}
                                              onClick={() => {
                                                if (selectedCells.includes(cell.id)) {
                                                  setSelectedCells(selectedCells.filter(id => id !== cell.id));
                                                } else {
                                                  setSelectedCells([...selectedCells, cell.id]);
                                                }
                                              }}
                                              title={`Ячейка ${cell.cell_number} (${cell.is_occupied ? 'Занята' : 'Свободна'})`}
                                            >
                                              <div className="h-full flex flex-col items-center justify-center p-1">
                                                {/* Чекбокс для выбора */}
                                                <div className="mb-1">
                                                  <Checkbox
                                                    checked={selectedCells.includes(cell.id)}
                                                    onCheckedChange={(checked) => {
                                                      if (checked) {
                                                        setSelectedCells([...selectedCells, cell.id]);
                                                      } else {
                                                        setSelectedCells(selectedCells.filter(id => id !== cell.id));
                                                      }
                                                    }}
                                                    onClick={(e) => e.stopPropagation()}
                                                    className="h-3 w-3"
                                                  />
                                                </div>
                                                
                                                {/* Номер ячейки */}
                                                <div className="text-xs font-bold text-center leading-none mb-1">
                                                  {cell.cell_number}
                                                </div>
                                                
                                                {/* Иконка статуса */}
                                                <div className="text-lg">
                                                  {cell.is_occupied ? '📦' : '✅'}
                                                </div>
                                                
                                                {/* Кнопка QR */}
                                                <Button
                                                  size="sm"
                                                  variant="ghost"
                                                  className="h-5 w-5 p-0 mt-1"
                                                  onClick={(e) => {
                                                    e.stopPropagation();
                                                    handleGenerateCellQR(cell.id, cell.location);
                                                  }}
                                                  title="Генерировать QR код"
                                                >
                                                  <QrCode className="h-3 w-3" />
                                                </Button>
                                              </div>
                                            </div>
                                          </React.Fragment>
                                          ))}
                                        </div>
                                      </div>
                                    );
                                  })}
                              </div>
                            </div>
                          );
                        });
                    })()}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          <div className="flex justify-end space-x-2 pt-4 border-t">
            <Button 
              variant="outline" 
              onClick={() => setCellManagementModal(false)}
            >
              Закрыть
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНОЕ ОКНО QR КОДА ЯЧЕЙКИ */}
      <Dialog open={cellQRModal} onOpenChange={setCellQRModal}>
        <DialogContent className="w-full max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <QrCode className="mr-2 h-5 w-5" />
              QR код ячейки
            </DialogTitle>
            <DialogDescription>
              Просмотр и печать QR кода для ячейки {selectedCellQR?.cellLocation}
            </DialogDescription>
          </DialogHeader>
          
          {selectedCellQR && (
            <div className="space-y-4">
              {/* Информация о ячейке */}
              <div className="text-center p-4 bg-gray-50 rounded-lg">
                <h3 className="text-lg font-bold text-gray-800 mb-2">
                  {selectedCellQR.cellLocation}
                </h3>
                <p className="text-sm text-gray-600">
                  {selectedCellQR.warehouseName}
                </p>
                {selectedCellQR.qrData && (
                  <p className="text-xs text-gray-500 mt-1 font-mono">
                    Код: {selectedCellQR.qrData}
                  </p>
                )}
              </div>

              {/* QR код */}
              <div className="flex justify-center">
                <div className="border border-gray-200 p-4 rounded-lg bg-white">
                  <img 
                    src={selectedCellQR.qrCode} 
                    alt="QR код ячейки" 
                    className="w-48 h-48 mx-auto"
                  />
                </div>
              </div>

              {/* Кнопки */}
              <div className="flex space-x-2">
                <Button 
                  onClick={handlePrintCellQR}
                  className="flex-1 bg-blue-600 hover:bg-blue-700"
                >
                  <Printer className="mr-2 h-4 w-4" />
                  Печать QR кода
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => setCellQRModal(false)}
                >
                  Закрыть
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/* Тестовое модальное окно для диагностики - ПРОСТОЕ без Radix UI */}
      {console.log('🧪 Rendering testModal:', testModal)}
      {testModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-black bg-opacity-50"
            onClick={() => setTestModal(false)}
          ></div>
          
          {/* Modal Content */}
          <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6 z-10">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">🧪 Тестовое модальное окно</h2>
              <button 
                onClick={() => setTestModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="mb-4">
              <p className="text-green-600 font-semibold">✅ Простое модальное окно работает!</p>
              <p className="text-sm text-gray-600 mt-2">
                Это простое модальное окно создано без Radix UI для проверки базовой функциональности.
              </p>
            </div>
            
            <div className="flex justify-end">
              <button 
                onClick={() => setTestModal(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Закрыть
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Простое модальное окно ошибок авторизации - БЕЗ Radix UI */}
      {console.log('🎨 Rendering loginErrorModal:', loginErrorModal, 'with data:', loginErrorData)}
      {loginErrorModal && loginErrorData && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-black bg-opacity-50"
            onClick={() => {
              console.log('🚫 Closing loginErrorModal via backdrop');
              setLoginErrorModal(false);
              setLoginErrorData(null);
            }}
          ></div>
          
          {/* Modal Content */}
          <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6 z-10">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-2">
                {loginErrorData.errorType === 'user_not_found' ? (
                  <User className="h-5 w-5 text-blue-600" />
                ) : (
                  <Lock className="h-5 w-5 text-red-600" />
                )}
                <h2 className="text-lg font-semibold">Ошибка входа в систему</h2>
              </div>
              <button 
                onClick={() => {
                  console.log('🚫 Closing loginErrorModal via X button');
                  setLoginErrorModal(false);
                  setLoginErrorData(null);
                }}
                className="text-gray-400 hover:text-gray-600"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <p className="text-sm text-gray-600 mb-4">
              Проверьте введенные данные и повторите попытку
            </p>
            
            {/* Основное сообщение об ошибке */}
            <div className={`p-4 rounded-lg border mb-4 ${
              loginErrorData.errorType === 'user_not_found' 
                ? 'bg-blue-50 border-blue-200' 
                : 'bg-red-50 border-red-200'
            }`}>
              <h4 className={`font-semibold mb-2 ${
                loginErrorData.errorType === 'user_not_found' ? 'text-blue-800' : 'text-red-800'
              }`}>
                {loginErrorData.message}
              </h4>
              <p className={`text-sm ${
                loginErrorData.errorType === 'user_not_found' ? 'text-blue-700' : 'text-red-700'
              }`}>
                {loginErrorData.details}
              </p>
            </div>

            {/* Информация о пользователе (для ошибки пароля) */}
            {loginErrorData.errorType === 'wrong_password' && loginErrorData.userName && (
              <div className="space-y-2 p-3 bg-gray-50 rounded-lg mb-4">
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">Пользователь:</span>
                  <span className="text-sm text-gray-800">{loginErrorData.userName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">Роль:</span>
                  <span className="text-sm text-gray-800">{loginErrorData.userRole}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">Телефон:</span>
                  <span className="text-sm text-gray-800">{loginErrorData.userPhone}</span>
                </div>
              </div>
            )}

            {/* Формат номера телефона */}
            {loginErrorData.phoneFormat && (
              <div className="bg-blue-100 border border-blue-200 p-3 rounded-lg mb-4">
                <h5 className="text-sm font-semibold text-blue-800 mb-1">
                  📱 Формат номера телефона:
                </h5>
                <p className="text-sm text-blue-700">{loginErrorData.phoneFormat}</p>
              </div>
            )}

            {/* Требования к паролю */}
            {loginErrorData.passwordRequirements && (
              <div className="bg-orange-100 border border-orange-200 p-3 rounded-lg mb-4">
                <h5 className="text-sm font-semibold text-orange-800 mb-1">
                  🔒 Требования к паролю:
                </h5>
                <p className="text-sm text-orange-700">{loginErrorData.passwordRequirements}</p>
              </div>
            )}

            {/* Доступные действия */}
            {loginErrorData.availableActions && loginErrorData.availableActions.length > 0 && (
              <div className="bg-green-100 border border-green-200 p-3 rounded-lg mb-4">
                <h5 className="text-sm font-semibold text-green-800 mb-2">
                  💡 Рекомендуемые действия:
                </h5>
                <ul className="text-sm text-green-700 space-y-1">
                  {loginErrorData.availableActions.map((action, index) => (
                    <li key={index} className="flex items-center">
                      <span className="mr-2">•</span>
                      {action}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {/* Контактная информация */}
            <div className="bg-gray-100 border border-gray-200 p-3 rounded-lg mb-4">
              <h5 className="text-sm font-semibold text-gray-800 mb-2">
                📞 Служба поддержки TAJLINE.TJ
              </h5>
              <div className="text-sm text-gray-700 space-y-1">
                <p>Телефон: +992 123 456 789</p>
                <p>Email: support@tajline.tj</p>
                <p>Время работы: 9:00 - 18:00 (пн-пт)</p>
              </div>
            </div>

            <div className="flex justify-end space-x-2">
              <button 
                className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50"
                onClick={() => {
                  console.log('🚫 Closing loginErrorModal via Понятно button');
                  setLoginErrorModal(false);
                  setLoginErrorData(null);
                }}
              >
                Понятно
              </button>
              {loginErrorData.errorType === 'user_not_found' && (
                <button 
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                  onClick={() => {
                    console.log('📝 Registering new user');
                    setLoginErrorModal(false);
                    setLoginErrorData(null);
                    // Переключаемся на вкладку регистрации
                  }}
                >
                  Регистрация
                </button>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Модальное окно статуса пользователя */}
      <Dialog open={userStatusModal} onOpenChange={setUserStatusModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              {userStatusData?.isDeleted ? (
                <UserX className="h-5 w-5 text-red-600" />
              ) : (
                <Lock className="h-5 w-5 text-orange-600" />
              )}
              <span>Статус пользователя</span>
            </DialogTitle>
            <DialogDescription>
              Информация о доступе к аккаунту
            </DialogDescription>
          </DialogHeader>
          
          {userStatusData && (
            <div className="space-y-4">
              {/* Основное сообщение о статусе */}
              <div className={`p-4 rounded-lg border ${
                userStatusData.isDeleted 
                  ? 'bg-red-50 border-red-200' 
                  : 'bg-orange-50 border-orange-200'
              }`}>
                <h4 className={`font-semibold mb-2 ${
                  userStatusData.isDeleted ? 'text-red-800' : 'text-orange-800'
                }`}>
                  {userStatusData.statusMessage}
                </h4>
                <p className={`text-sm ${
                  userStatusData.isDeleted ? 'text-red-700' : 'text-orange-700'
                }`}>
                  {userStatusData.statusDetails}
                </p>
              </div>

              {/* Информация о пользователе */}
              <div className="space-y-2 p-3 bg-gray-50 rounded-lg">
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">Имя:</span>
                  <span className="text-sm text-gray-800">{userStatusData.userName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">Роль:</span>
                  <span className="text-sm text-gray-800">{userStatusData.userRole}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-600">Телефон:</span>
                  <span className="text-sm text-gray-800">{userStatusData.userPhone}</span>
                </div>
              </div>

              {/* Дополнительная информация */}
              <div className={`p-3 rounded-lg text-sm ${
                userStatusData.isDeleted 
                  ? 'bg-red-100 text-red-800' 
                  : 'bg-orange-100 text-orange-800'
              }`}>
                {userStatusData.isDeleted ? (
                  <>
                    <strong>Аккаунт удален:</strong> Доступ к системе полностью заблокирован. 
                    Обратитесь к администратору для восстановления доступа или создания нового аккаунта.
                  </>
                ) : (
                  <>
                    <strong>Аккаунт заблокирован:</strong> Временно ограничен доступ к системе. 
                    Свяжитесь с администратором для разблокировки вашего аккаунта.
                  </>
                )}
              </div>

              {/* Контактная информация */}
              <div className="bg-blue-50 border border-blue-200 p-3 rounded-lg">
                <h5 className="text-sm font-semibold text-blue-800 mb-2">
                  📞 Служба поддержки TAJLINE.TJ
                </h5>
                <div className="text-sm text-blue-700 space-y-1">
                  <p>Телефон: +992 123 456 789</p>
                  <p>Email: support@tajline.tj</p>
                  <p>Время работы: 9:00 - 18:00 (пн-пт)</p>
                </div>
              </div>
            </div>
          )}

          <div className="flex justify-end space-x-2 mt-4">
            <Button 
              variant="outline" 
              onClick={() => {
                setUserStatusModal(false);
                setUserStatusData(null);
              }}
            >
              Понятно
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* НОВОЕ МОДАЛЬНОЕ ОКНО: Выбор склада для генерации QR кодов */}
      <Dialog open={warehouseSelectionModal} onOpenChange={setWarehouseSelectionModal}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <Building className="h-6 w-6 text-blue-600" />
              <span>Выберите склад для генерации QR кодов</span>
            </DialogTitle>
            <DialogDescription>
              Выберите склад для которого хотите сгенерировать QR коды ячеек
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            {warehouses.length === 0 ? (
              <div className="text-center py-8">
                <Building className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <p className="text-gray-500">Нет доступных складов для генерации QR кодов</p>
              </div>
            ) : (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {warehouses.map(warehouse => (
                  <div
                    key={warehouse.id}
                    className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-colors"
                    onClick={() => {
                      setSelectedWarehouseForQR(warehouse);
                      setWarehouseSelectionModal(false);
                      setQrGenerationModal(true);
                    }}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="bg-blue-100 p-2 rounded-lg">
                          <Building className="h-5 w-5 text-blue-600" />
                        </div>
                        <div>
                          <h4 className="font-medium text-gray-900">{warehouse.name}</h4>
                          <p className="text-sm text-gray-500">{warehouse.address}</p>
                          {warehouse.warehouse_id_number && (
                            <p className="text-xs text-blue-600 font-mono bg-blue-50 px-2 py-1 rounded mt-1 inline-block">
                              Номер: {warehouse.warehouse_id_number}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="text-right">
                        <QrCode className="h-5 w-5 text-orange-600" />
                        <p className="text-xs text-gray-400 mt-1">Нажмите для выбора</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Кнопка закрытия */}
            <div className="flex justify-end pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={() => setWarehouseSelectionModal(false)}
              >
                Отмена
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* НОВОЕ МОДАЛЬНОЕ ОКНО: Генерация QR кодов для складов */}
      <Dialog open={qrGenerationModal} onOpenChange={setQrGenerationModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <QrCode className="h-6 w-6 text-orange-600" />
              <span>Массовая генерация QR кодов</span>
            </DialogTitle>
            <DialogDescription>
              Склад: {selectedWarehouseForQR?.name} | Генерация уникальных QR кодов ячеек в формате XXX-BB-PP-CCC
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Информация о складе */}
            <div className="bg-orange-50 border border-orange-200 p-4 rounded-lg">
              <h4 className="font-semibold text-orange-800 mb-3 flex items-center">
                <Building className="mr-2 h-5 w-5" />
                Информация о складе
              </h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium text-gray-600">Название:</span>
                  <span className="ml-2 text-gray-800">{selectedWarehouseForQR?.name}</span>
                </div>
                <div>
                  <span className="font-medium text-gray-600">Адрес:</span>
                  <span className="ml-2 text-gray-800">{selectedWarehouseForQR?.address}</span>
                </div>
                <div>
                  <span className="font-medium text-gray-600">Уникальный номер:</span>
                  <span className="ml-2 text-gray-800 bg-blue-100 px-2 py-1 rounded font-mono">
                    {selectedWarehouseForQR?.warehouse_id_number || 'Генерируется автоматически'}
                  </span>
                </div>
                <div>
                  <span className="font-medium text-gray-600">ID склада:</span>
                  <span className="ml-2 text-gray-800 font-mono text-xs">{selectedWarehouseForQR?.id}</span>
                </div>
              </div>
            </div>

            {/* Типы генерации QR кодов */}
            <div className="space-y-4">
              <h4 className="font-semibold text-gray-800 flex items-center">
                <Grid3X3 className="mr-2 h-5 w-5 text-blue-600" />
                Выберите тип генерации QR кодов
              </h4>

              {/* Генерация для конкретной ячейки */}
              <div className="border border-gray-200 rounded-lg p-4">
                <h5 className="font-medium text-gray-700 mb-3 flex items-center">
                  <Target className="mr-2 h-4 w-4 text-purple-600" />
                  Генерация для конкретной ячейки
                </h5>
                <div className="grid grid-cols-3 gap-3 mb-3">
                  <div>
                    <Label className="text-sm">Блок</Label>
                    <Input 
                      type="number" 
                      min="1" 
                      placeholder="1" 
                      className="mt-1"
                      value={qrCellCode.block || ''} 
                      onChange={(e) => setQrCellCode({...qrCellCode, block: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label className="text-sm">Полка</Label>
                    <Input 
                      type="number" 
                      min="1" 
                      placeholder="1" 
                      className="mt-1"
                      value={qrCellCode.shelf || ''} 
                      onChange={(e) => setQrCellCode({...qrCellCode, shelf: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label className="text-sm">Ячейка</Label>
                    <Input 
                      type="number" 
                      min="1" 
                      placeholder="1" 
                      className="mt-1"
                      value={qrCellCode.cell || ''} 
                      onChange={(e) => setQrCellCode({...qrCellCode, cell: e.target.value})}
                    />
                  </div>
                </div>
                <Button 
                  onClick={() => generateSpecificCellQR()}
                  className="bg-purple-600 hover:bg-purple-700"
                  disabled={!qrCellCode.block || !qrCellCode.shelf || !qrCellCode.cell}
                >
                  <QrCode className="mr-2 h-4 w-4" />
                  Сгенерировать QR для ячейки
                </Button>
              </div>

              {/* Массовая генерация */}
              <div className="border border-gray-200 rounded-lg p-4">
                <h5 className="font-medium text-gray-700 mb-3 flex items-center">
                  <Grid className="mr-2 h-4 w-4 text-blue-600" />
                  Массовая генерация QR кодов
                </h5>
                <div className="grid grid-cols-2 gap-3">
                  <Button 
                    onClick={() => generateAllCellsQR()}
                    className="bg-blue-600 hover:bg-blue-700"
                    disabled={massQRGeneration.isGenerating}
                  >
                    <QrCode className="mr-2 h-4 w-4" />
                    {massQRGeneration.isGenerating ? 'Генерирую...' : 'Генерировать для всех ячеек'}
                  </Button>
                  <Button 
                    onClick={() => generateRangeQR()}
                    variant="outline"
                    className="text-green-600 border-green-300 hover:bg-green-50"
                    disabled={massQRGeneration.isGenerating}
                  >
                    <Settings className="mr-2 h-4 w-4" />
                    Генерировать по диапазону
                  </Button>
                </div>

                {/* Индикатор прогресса массовой генерации */}
                {massQRGeneration.isGenerating && (
                  <div className="mt-4 bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-blue-800">
                        Генерация QR кодов: {massQRGeneration.current} из {massQRGeneration.total}
                      </span>
                      <span className="text-sm text-blue-600">
                        {massQRGeneration.progress}%
                      </span>
                    </div>
                    <div className="w-full bg-blue-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${massQRGeneration.progress}%` }}
                      ></div>
                    </div>
                    <p className="text-xs text-blue-600 mt-2">
                      Пожалуйста, подождите. Генерация QR кодов может занять несколько минут...
                    </p>
                  </div>
                )}

                {/* Результаты массовой генерации */}
                {!massQRGeneration.isGenerating && massQRGeneration.results.length > 0 && (
                  <div className="mt-4 bg-green-50 border border-green-200 rounded-lg p-4">
                    <h6 className="font-medium text-green-700 mb-3 flex items-center">
                      <CheckCircle className="mr-2 h-4 w-4" />
                      Результаты массовой генерации ({massQRGeneration.results.length} QR кодов)
                    </h6>
                    <div className="max-h-48 overflow-y-auto space-y-2">
                      {massQRGeneration.results.slice(0, 10).map((result, index) => (
                        <div key={index} className="flex items-center justify-between text-sm bg-white rounded p-2 border">
                          <span className="font-mono text-green-700">{result.code}</span>
                          <span className="text-gray-600">{result.location}</span>
                        </div>
                      ))}
                      {massQRGeneration.results.length > 10 && (
                        <p className="text-xs text-gray-500 text-center">
                          ... и еще {massQRGeneration.results.length - 10} QR кодов
                        </p>
                      )}
                    </div>
                    <div className="mt-3 flex justify-center space-x-3">
                      <Button 
                        onClick={() => downloadAllQRCodes(massQRGeneration.results)}
                        variant="outline"
                        className="text-green-600 border-green-300 hover:bg-green-50"
                      >
                        <Download className="mr-2 h-4 w-4" />
                        Скачать все QR коды
                      </Button>
                      
                      <Button 
                        onClick={() => printAllQRCodes(massQRGeneration.results)}
                        className="bg-blue-600 hover:bg-blue-700"
                      >
                        <Printer className="mr-2 h-4 w-4" />
                        Печать всех QR кодов
                      </Button>
                    </div>
                  </div>
                )}
              </div>

              {/* Результат генерации */}
              {generatedCellQR && (
                <div className="border border-green-200 rounded-lg p-4 bg-green-50">
                  <h5 className="font-medium text-green-700 mb-3 flex items-center">
                    <CheckCircle className="mr-2 h-4 w-4" />
                    Сгенерированный QR код
                  </h5>
                  <div className="text-center">
                    {/* Назначение ячейки */}
                    <div className="bg-blue-100 text-blue-800 font-bold text-lg p-3 rounded-lg mb-4">
                      Б{qrCellCode.block}-П{qrCellCode.shelf}-Я{qrCellCode.cell}
                    </div>
                    
                    <img 
                      src={generatedCellQR} 
                      alt="Generated QR Code" 
                      className="mx-auto mb-3 border border-gray-200 rounded"
                      style={{ width: '200px', height: '200px' }}
                    />
                    
                    <div className="flex justify-center space-x-3">
                      <Button 
                        onClick={() => downloadQRCode(generatedCellQR, `QR-${selectedWarehouseForQR?.name}-${qrCellCode.block}-${qrCellCode.shelf}-${qrCellCode.cell}`)}
                        variant="outline"
                        className="text-blue-600 border-blue-300 hover:bg-blue-50"
                      >
                        <Download className="mr-2 h-4 w-4" />
                        Скачать QR код
                      </Button>
                      
                      <Button 
                        onClick={() => printSingleQRCode()}
                        className="bg-blue-600 hover:bg-blue-700"
                      >
                        <Printer className="mr-2 h-4 w-4" />
                        Печать QR кода
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Кнопки управления */}
            <div className="flex justify-end space-x-3 pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={() => {
                  setQrGenerationModal(false);
                  setSelectedWarehouseForQR(null);
                  setGeneratedCellQR(null);
                  setQrCellCode({ block: '', shelf: '', cell: '' });
                }}
              >
                Закрыть
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНОЕ ОКНО УПРАВЛЕНИЯ ГОРОДАМИ СКЛАДА */}
      <Dialog open={showWarehouseCitiesModal} onOpenChange={setShowWarehouseCitiesModal}>
        <DialogContent className="w-full max-w-4xl max-h-[95vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <MapPin className="mr-2 h-5 w-5" />
              Управление городами доставки: {selectedWarehouseForCities?.name}
            </DialogTitle>
            <DialogDescription>
              Добавление и управление списком городов для выдачи груза с этого склада
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            {/* Информация о складе */}
            {selectedWarehouseForCities && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center text-lg">
                    <Building className="mr-2 h-5 w-5" />
                    Информация о складе
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-gray-600">Название:</p>
                      <p className="font-semibold">{selectedWarehouseForCities.name}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Местоположение:</p>
                      <p className="font-semibold">{selectedWarehouseForCities.location}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Добавить один город */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center text-lg">
                  <Plus className="mr-2 h-5 w-5" />
                  Добавить город
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex gap-3">
                  <Input
                    placeholder="Введите название города..."
                    value={newCityName}
                    onChange={(e) => setNewCityName(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && addWarehouseCity()}
                    className="flex-1"
                  />
                  <Button 
                    onClick={addWarehouseCity}
                    disabled={citiesLoading || !newCityName.trim()}
                  >
                    {citiesLoading ? 'Добавление...' : 'Добавить'}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Массовое добавление городов */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center text-lg">
                  <Grid className="mr-2 h-5 w-5" />
                  Массовое добавление городов
                </CardTitle>
                <CardDescription>
                  Введите названия городов через запятую, точку с запятой или с новой строки
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <textarea
                    placeholder="Пример:&#10;Душанбе, Худжанд, Куляб&#10;Курган-Тюбе; Истаравшан&#10;Турсунзаде"
                    value={bulkCitiesText}
                    onChange={(e) => setBulkCitiesText(e.target.value)}
                    rows={4}
                    className="w-full p-3 border border-gray-300 rounded-md resize-y focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <Button 
                    onClick={addWarehouseCitiesBulk}
                    disabled={citiesLoading || !bulkCitiesText.trim()}
                    className="w-full"
                  >
                    {citiesLoading ? 'Добавление...' : 'Массовое добавление'}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Список текущих городов */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center text-lg">
                  <List className="mr-2 h-5 w-5" />
                  Текущие города доставки ({warehouseCities.length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                {citiesLoading ? (
                  <div className="text-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
                    <p className="text-gray-500">Загрузка списка городов...</p>
                  </div>
                ) : warehouseCities.length === 0 ? (
                  <div className="text-center py-8">
                    <MapPin className="mx-auto h-12 w-12 text-gray-400 mb-2" />
                    <p className="text-gray-500 mb-2">Нет добавленных городов</p>
                    <p className="text-sm text-gray-400">
                      Добавьте города, в которые этот склад может доставлять грузы
                    </p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {warehouseCities.map((city, index) => (
                      <div 
                        key={index} 
                        className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border"
                      >
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 text-green-600 mr-2" />
                          <span className="font-medium">{city}</span>
                        </div>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => removeWarehouseCity(city)}
                          disabled={citiesLoading}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Кнопки управления */}
            <div className="flex justify-end space-x-3 pt-4 border-t">
              <Button 
                variant="outline" 
                onClick={closeWarehouseCitiesModal}
              >
                Закрыть
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* МОДАЛЬНОЕ ОКНО ПОДТВЕРЖДЕНИЯ ПРИЁМА ГРУЗА */}
      <Dialog open={showCargoConfirmationModal} onOpenChange={setShowCargoConfirmationModal}>
        <DialogContent className="w-full max-w-6xl max-h-[95vh] overflow-y-auto mx-4">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Package className="mr-2 h-5 w-5" />
              Подтверждение приёма груза
            </DialogTitle>
            <DialogDescription>
              Проверьте все данные перед окончательным приёмом груза
            </DialogDescription>
          </DialogHeader>
          
          {confirmationCargoData && (
            <div className="space-y-6">
              {/* Информация об отправителе и получателе */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <User className="mr-2 h-4 w-4" />
                      Отправитель
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div>
                        <span className="text-sm text-gray-600">ФИО:</span>
                        <p className="font-semibold">{confirmationCargoData.sender_info.full_name}</p>
                      </div>
                      <div>
                        <span className="text-sm text-gray-600">Телефон:</span>
                        <p className="font-semibold">{confirmationCargoData.sender_info.phone}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <User className="mr-2 h-4 w-4" />
                      Получатель
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div>
                        <span className="text-sm text-gray-600">ФИО:</span>
                        <p className="font-semibold">{confirmationCargoData.recipient_info.full_name}</p>
                      </div>
                      <div>
                        <span className="text-sm text-gray-600">Телефон:</span>
                        <p className="font-semibold">{confirmationCargoData.recipient_info.phone}</p>
                      </div>
                      <div>
                        <span className="text-sm text-gray-600">Адрес:</span>
                        <p className="font-semibold">{confirmationCargoData.recipient_info.address}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Информация о доставке */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center">
                    <MapPin className="mr-2 h-4 w-4" />
                    Информация о доставке
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div>
                      <span className="text-sm text-gray-600">Город выдачи:</span>
                      <p className="font-semibold">{confirmationCargoData.delivery_info.city}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Склад:</span>
                      <p className="font-semibold">{confirmationCargoData.delivery_info.warehouse}</p>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Способ получения:</span>
                      <p className="font-semibold">
                        {confirmationCargoData.delivery_info.method === 'pickup' ? 'Самовывоз' :
                         confirmationCargoData.delivery_info.method === 'city_delivery' ? 'Доставка до города получателя' :
                         confirmationCargoData.delivery_info.method === 'home_delivery' ? 'Доставка до дома' : confirmationCargoData.delivery_info.method}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Список грузов */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center">
                    <Package className="mr-2 h-4 w-4" />
                    Список грузов ({confirmationCargoData.cargo_items.length})
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {confirmationCargoData.cargo_items.map((item, index) => (
                      <div key={index} className="p-4 bg-gray-50 rounded-lg border">
                        <div className="flex justify-between items-center mb-3">
                          <h4 className="font-medium text-gray-900">Груз #{index + 1}: {item.name}</h4>
                          <span className="text-lg font-bold text-green-600">{item.total_amount.toFixed(2)} ₽</span>
                        </div>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">Количество:</span>
                            <p className="font-semibold">{item.quantity} шт</p>
                          </div>
                          <div>
                            <span className="text-gray-600">Вес за единицу:</span>
                            <p className="font-semibold">{item.weight} кг</p>
                          </div>
                          <div>
                            <span className="text-gray-600">Цена за кг:</span>
                            <p className="font-semibold">{item.price_per_kg.toFixed(2)} ₽</p>
                          </div>
                          <div>
                            <span className="text-gray-600">Общий вес:</span>
                            <p className="font-semibold">{(item.quantity * item.weight).toFixed(1)} кг</p>
                          </div>
                        </div>
                        <div className="mt-2 text-xs text-gray-500">
                          Расчёт: {item.quantity}шт × {item.weight}кг × {item.price_per_kg.toFixed(2)}₽/кг = {item.total_amount.toFixed(2)}₽
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Итоги */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center">
                    <Calculator className="mr-2 h-4 w-4" />
                    Итого
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center p-4 bg-blue-50 rounded-lg border">
                      <div className="text-sm text-blue-600">Общий вес</div>
                      <div className="text-2xl font-bold text-blue-600">{confirmationCargoData.totals.total_weight.toFixed(1)} кг</div>
                    </div>
                    <div className="text-center p-4 bg-green-50 rounded-lg border">
                      <div className="text-sm text-green-600">Общая сумма</div>
                      <div className="text-2xl font-bold text-green-600">{confirmationCargoData.totals.total_cost.toFixed(2)} ₽</div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* QR коды (если сгенерированы) */}
              {generatedQRCodes.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <QrCode className="mr-2 h-4 w-4" />
                      Сгенерированные QR коды ({generatedQRCodes.length})
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                      {generatedQRCodes.map((qr, index) => (
                        <div key={index} className="p-3 bg-white border rounded-lg text-center">
                          <div className="font-mono text-sm text-gray-600 mb-1">{qr.id}</div>
                          <div className="text-xs text-gray-500">{qr.cargo_name}</div>
                          <div className="text-xs text-gray-500">
                            {qr.item_number} из {qr.total_items}
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Кнопки управления */}
              <div className="flex flex-col space-y-3 pt-4 border-t">
                {/* Верхний ряд - кнопки печати и генерации */}
                {generatedQRCodes.length > 0 && (
                  <div className="flex justify-center space-x-3">
                    <Button 
                      variant="outline"
                      onClick={() => {
                        // Логика печати всех QR кодов
                        window.print();
                      }}
                      disabled={qrGenerationInProgress}
                      className="flex-1"
                    >
                      <Printer className="mr-2 h-4 w-4" />
                      Печать всех QR кодов
                    </Button>
                    <Button 
                      variant="outline"
                      onClick={() => {
                        // Логика экспорта/скачивания QR кодов
                        showAlert('Функция экспорта QR кодов будет доступна в следующем обновлении', 'info');
                      }}
                      disabled={qrGenerationInProgress}
                      className="flex-1"
                    >
                      <Download className="mr-2 h-4 w-4" />
                      Скачать QR коды
                    </Button>
                  </div>
                )}
                
                {/* Нижний ряд - основные кнопки управления */}
                <div className="flex justify-end space-x-3">
                  <Button 
                    variant="outline" 
                    onClick={closeCargoConfirmationModal}
                    disabled={qrGenerationInProgress}
                  >
                    Отмена
                  </Button>
                  {!generatedQRCodes.length && (
                    <Button 
                      onClick={handleConfirmCargoAcceptance}
                      disabled={qrGenerationInProgress}
                      className="bg-green-600 hover:bg-green-700 text-white"
                    >
                      {qrGenerationInProgress ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Генерация QR кодов...
                        </>
                      ) : (
                        <>
                          <CheckCircle className="mr-2 h-4 w-4" />
                          Подтвердить приём груза
                        </>
                      )}
                    </Button>
                  )}
                  {generatedQRCodes.length > 0 && (
                    <Button 
                      onClick={closeCargoConfirmationModal}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                    >
                      <CheckCircle className="mr-2 h-4 w-4" />
                      Завершить
                    </Button>
                  )}
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default App;