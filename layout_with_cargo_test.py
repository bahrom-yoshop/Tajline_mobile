#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º cargo_info
==========================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü 
–≤ –ø–æ–ª–µ cargo_info –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ `cargo_info` –≤ –æ—Ç–≤–µ—Ç–µ
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ cargo_info —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–∞–∂–¥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç: cargo_number, individual_number, cargo_name, location, recipient, etc.
3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ vs –æ–∂–∏–¥–∞–µ–º—ã–µ 13 –µ–¥–∏–Ω–∏—Ü
4. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–∞–∂–¥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ `cargo_info` —Å –ø–ª–æ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
- –ö–∞–∂–¥–∞—è –µ–¥–∏–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: cargo_number, individual_number, cargo_name, weight, recipient, location, placed_at, placed_by

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å cargo_info —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π 
–æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE = "d0a8362d-b4d3-4947-b335-28c94658a021"  # –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1
EXPECTED_UNITS_COUNT = 4  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

class LayoutWithCargoTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "api_accessible": False,
            "cargo_info_field_present": False,
            "cargo_info_is_list": False,
            "units_found": 0,
            "expected_units": EXPECTED_UNITS_COUNT,
            "data_quality_passed": False,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001"""
        self.log(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE}...")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{TARGET_WAREHOUSE}/layout-with-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results["api_accessible"] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}", "ERROR")
            return None
    
    def check_cargo_info_field(self, data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª—è cargo_info"""
        self.log("\nüéØ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø cargo_info:")
        self.log("=" * 50)
        
        if not isinstance(data, dict):
            self.log("‚ùå –û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º", "ERROR")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è cargo_info
        if "cargo_info" not in data:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ!", "ERROR")
            self.log(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(data.keys())}")
            return False
        
        self.log("‚úÖ –ü–æ–ª–µ cargo_info –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
        self.test_results["cargo_info_field_present"] = True
        
        cargo_info = data["cargo_info"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cargo_info —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
        if not isinstance(cargo_info, list):
            self.log(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê: cargo_info –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, —Ç–∏–ø: {type(cargo_info)}", "ERROR")
            return False
        
        self.log(f"‚úÖ cargo_info —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
        self.test_results["cargo_info_is_list"] = True
        
        units_count = len(cargo_info)
        self.log(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≤ cargo_info: {units_count}")
        self.test_results["units_found"] = units_count
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        if units_count == EXPECTED_UNITS_COUNT:
            self.log(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: {EXPECTED_UNITS_COUNT}")
        else:
            self.log(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü ({units_count}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ({EXPECTED_UNITS_COUNT})")
        
        return cargo_info
    
    def validate_unit_data_quality(self, cargo_info):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã"""
        self.log("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –ï–î–ò–ù–ò–¶:")
        self.log("=" * 50)
        
        required_fields = [
            "cargo_number",
            "individual_number", 
            "cargo_name",
            "location",
            "recipient_full_name",  # Updated field name
            "weight",
            "placed_at",
            "placed_by_operator"    # Updated field name
        ]
        
        units_with_issues = []
        valid_units = 0
        
        for i, unit in enumerate(cargo_info):
            self.log(f"\nüì¶ –ï–î–ò–ù–ò–¶–ê #{i + 1}:")
            self.log("-" * 30)
            
            if not isinstance(unit, dict):
                self.log(f"‚ùå –ï–¥–∏–Ω–∏—Ü–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º: {type(unit)}", "ERROR")
                units_with_issues.append(f"–ï–¥–∏–Ω–∏—Ü–∞ #{i+1}: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            missing_fields = []
            present_fields = []
            
            for field in required_fields:
                if field in unit and unit[field] is not None and unit[field] != "":
                    present_fields.append(field)
                    self.log(f"  ‚úÖ {field}: {unit[field]}")
                else:
                    missing_fields.append(field)
                    self.log(f"  ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            additional_fields = ["recipient_phone", "delivery_city", "declared_value", "block_number", "shelf_number", "cell_number"]
            for field in additional_fields:
                if field in unit and unit[field] is not None:
                    self.log(f"  ‚ÑπÔ∏è {field}: {unit[field]}")
            
            if missing_fields:
                issue = f"–ï–¥–∏–Ω–∏—Ü–∞ #{i+1} ({unit.get('individual_number', 'N/A')}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields}"
                units_with_issues.append(issue)
                self.log(f"  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {missing_fields}")
            else:
                valid_units += 1
                self.log(f"  ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö
        self.log(f"\nüìä –°–í–û–î–ö–ê –ü–û –ö–ê–ß–ï–°–¢–í–£ –î–ê–ù–ù–´–•:")
        self.log(f"  –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {len(cargo_info)}")
        self.log(f"  –í–∞–ª–∏–¥–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {valid_units}")
        self.log(f"  –ï–¥–∏–Ω–∏—Ü —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {len(units_with_issues)}")
        
        if units_with_issues:
            self.log(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in units_with_issues:
                self.log(f"  - {issue}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (–±–æ–ª–µ–µ –º—è–≥–∫–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –±–æ–ª–µ–µ 75% –µ–¥–∏–Ω–∏—Ü –∏–º–µ—é—Ç –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        success_rate = valid_units / len(cargo_info) if len(cargo_info) > 0 else 0
        data_quality_passed = success_rate >= 0.75  # 75% –∏–ª–∏ –±–æ–ª—å—à–µ
        
        self.test_results["data_quality_passed"] = data_quality_passed
        self.test_results["detailed_results"] = {
            "total_units": len(cargo_info),
            "valid_units": valid_units,
            "units_with_issues": len(units_with_issues),
            "success_rate": success_rate,
            "issues_found": units_with_issues,
            "required_fields": required_fields
        }
        
        if data_quality_passed:
            self.log(f"‚úÖ –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•: {success_rate:.1%} –µ–¥–∏–Ω–∏—Ü —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ø–æ—Ä–æ–≥: 75%)")
        else:
            self.log(f"‚ùå –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•: –¢–æ–ª—å–∫–æ {success_rate:.1%} –µ–¥–∏–Ω–∏—Ü —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç—Ä–µ–±—É–µ—Ç—Å—è: 75%)")
        
        return data_quality_passed
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo —Å –ø–æ–ª–µ–º cargo_info")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üè¢ –¶–µ–ª–µ–≤–æ–π —Å–∫–ª–∞–¥: {TARGET_WAREHOUSE}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API layout-with-cargo: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –ù–∞–ª–∏—á–∏–µ –ø–æ–ª—è cargo_info: {'‚úÖ –ù–ê–ô–î–ï–ù–û' if self.test_results['cargo_info_field_present'] else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
        self.log(f"  4. ‚úÖ cargo_info —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {'‚úÖ –î–ê' if self.test_results['cargo_info_is_list'] else '‚ùå –ù–ï–¢'}")
        self.log(f"  5. üéØ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {'‚úÖ –û–¢–õ–ò–ß–ù–û–ï' if self.test_results['data_quality_passed'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–¥–∏–Ω–∏—Ü
        self.log(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ï–î–ò–ù–ò–¶:")
        self.log(f"  –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {self.test_results['units_found']}")
        self.log(f"  –û–∂–∏–¥–∞–ª–æ—Å—å –µ–¥–∏–Ω–∏—Ü: {self.test_results['expected_units']}")
        
        units_match = self.test_results['units_found'] == self.test_results['expected_units']
        self.log(f"  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º: {'‚úÖ –î–ê' if units_match else '‚ö†Ô∏è –ù–ï–¢'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.test_results["detailed_results"]:
            details = self.test_results["detailed_results"]
            self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            self.log(f"  –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {details['total_units']}")
            self.log(f"  –í–∞–ª–∏–¥–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {details['valid_units']}")
            self.log(f"  –ï–¥–∏–Ω–∏—Ü —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {details['units_with_issues']}")
            self.log(f"  –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(details['required_fields'])}")
            
            if details['issues_found']:
                self.log(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(details['issues_found'])} —à—Ç.):")
                for i, issue in enumerate(details['issues_found'], 1):
                    self.log(f"  {i}. {issue}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
        overall_success = (
            self.test_results["auth_success"] and
            self.test_results["api_accessible"] and
            self.test_results["cargo_info_field_present"] and
            self.test_results["cargo_info_is_list"] and
            self.test_results["data_quality_passed"]
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if overall_success:
            self.log("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("üéâ –ü–æ–ª–µ cargo_info –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            self.log("üìä –í—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            self.log("üöÄ API –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ")
        else:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            
            if not self.test_results["cargo_info_field_present"]:
                self.log("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API")
            elif not self.test_results["cargo_info_is_list"]:
                self.log("üîç –ü–†–û–ë–õ–ï–ú–ê: cargo_info –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
            elif not self.test_results["data_quality_passed"]:
                self.log("üîç –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
            
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
        
        return overall_success
    
    def run_layout_with_cargo_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ API layout-with-cargo"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API layout-with-cargo —Å cargo_info")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
        layout_data = self.test_layout_with_cargo_api()
        if not layout_data:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API", "ERROR")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è cargo_info
        cargo_info = self.check_cargo_info_field(layout_data)
        if not cargo_info:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–µ–º cargo_info", "ERROR")
            return False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
        data_quality_success = self.validate_unit_data_quality(cargo_info)
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LayoutWithCargoTester()
    
    try:
        success = tester.run_layout_with_cargo_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ü–æ–ª–µ cargo_info –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("üìä –í—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print("üöÄ API –≥–æ—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–µ–º cargo_info –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()