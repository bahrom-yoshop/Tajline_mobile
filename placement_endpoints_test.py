#!/usr/bin/env python3
"""
–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–ê –í TAJLINE.TJ

–¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ endpoints —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –≥—Ä—É–∑–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏
–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ placementStatistics –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π frontend

ENDPOINTS –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
1. /api/operator/placement-statistics - —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
2. /api/operator/cargo/place - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
3. /api/cargo/place-in-cell - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫—É
4. /api/operator/cargo/available-for-placement - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–ü–û–î–û–ó–†–ï–ù–ò–ï: –û–¥–∏–Ω –∏–∑ endpoints —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏,
–∏ frontend –æ—à–∏–±–æ—á–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é placementStatistics
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-tracker-33.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementEndpointsTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        self.available_cargo = []
        self.operator_warehouses = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    user_info = data.get("user", {})
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})"
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                self.operator_warehouses = response.json()
                warehouse_count = len(self.operator_warehouses)
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–ù–∞–π–¥–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return True
            else:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_available_cargo_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                self.available_cargo = data.get("items", []) if isinstance(data, dict) else data
                cargo_count = len(self.available_cargo)
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    True,
                    f"–ù–∞–π–¥–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                )
                return True
            else:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_operator_cargo_place_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/operator/cargo/place"""
        if not self.available_cargo or not self.operator_warehouses:
            self.log_result(
                "–¢–µ—Å—Ç /api/operator/cargo/place",
                False,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥—Ä—É–∑ –∏ —Å–∫–ª–∞–¥
        test_cargo = self.available_cargo[0]
        test_warehouse = self.operator_warehouses[0]
        
        cargo_id = test_cargo.get("id")
        warehouse_id = test_warehouse.get("id")
        
        if not cargo_id or not warehouse_id:
            self.log_result(
                "–¢–µ—Å—Ç /api/operator/cargo/place",
                False,
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ID –≥—Ä—É–∑–∞ –∏–ª–∏ —Å–∫–ª–∞–¥–∞"
            )
            return False
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞
        placement_data = {
            "cargo_id": cargo_id,
            "warehouse_id": warehouse_id,
            "block_number": 1,
            "shelf_number": 1,
            "cell_number": 1
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ—Ç endpoint
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≥—Ä—É–∑–∞ (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–ø–∞—Å—Ç—å –≤ placementStatistics)
                cargo_fields = ["location_code", "cargo_name", "cargo_number", "placed_at", "warehouse_name"]
                present_cargo_fields = [field for field in cargo_fields if field in data]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_fields = ["today_placements", "session_placements", "recent_placements"]
                present_stats_fields = [field for field in stats_fields if field in data]
                
                if present_cargo_fields:
                    self.log_result(
                        "–¢–µ—Å—Ç /api/operator/cargo/place - –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô ENDPOINT",
                        False,
                        f"üö® –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´: Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è –≥—Ä—É–∑–∞: {present_cargo_fields}",
                        {
                            "cargo_fields_found": present_cargo_fields,
                            "stats_fields_found": present_stats_fields,
                            "full_response": data,
                            "potential_bug_source": True,
                            "explanation": "–≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å placementStatistics –≤ frontend"
                        }
                    )
                    return False
                else:
                    self.log_result(
                        "–¢–µ—Å—Ç /api/operator/cargo/place",
                        True,
                        f"Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è –≥—Ä—É–∑–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞",
                        {
                            "response_fields": list(data.keys()),
                            "full_response": data
                        }
                    )
                    return True
            else:
                self.log_result(
                    "–¢–µ—Å—Ç /api/operator/cargo/place",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"placement_data": placement_data}
                )
                return False
                
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç /api/operator/cargo/place", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_cargo_place_in_cell_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/cargo/place-in-cell"""
        if not self.available_cargo:
            self.log_result(
                "–¢–µ—Å—Ç /api/cargo/place-in-cell",
                False,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥—Ä—É–∑
        test_cargo = self.available_cargo[0]
        cargo_number = test_cargo.get("cargo_number")
        
        if not cargo_number:
            self.log_result(
                "–¢–µ—Å—Ç /api/cargo/place-in-cell",
                False,
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞"
            )
            return False
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID-based —Ñ–æ—Ä–º–∞—Ç)
        placement_data = {
            "cargo_number": cargo_number,
            "cell_code": "001-01-01-001"  # ID-based —Ñ–æ—Ä–º–∞—Ç
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/cargo/place-in-cell",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ—Ç endpoint
                cargo_fields = ["location_code", "cargo_name", "cargo_number", "placed_at", "warehouse_name"]
                present_cargo_fields = [field for field in cargo_fields if field in data]
                
                stats_fields = ["today_placements", "session_placements", "recent_placements"]
                present_stats_fields = [field for field in stats_fields if field in data]
                
                if present_cargo_fields:
                    self.log_result(
                        "–¢–µ—Å—Ç /api/cargo/place-in-cell - –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô ENDPOINT",
                        False,
                        f"üö® –ù–ê–ô–î–ï–ù –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´: Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è –≥—Ä—É–∑–∞: {present_cargo_fields}",
                        {
                            "cargo_fields_found": present_cargo_fields,
                            "stats_fields_found": present_stats_fields,
                            "full_response": data,
                            "potential_bug_source": True,
                            "explanation": "–≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å placementStatistics –≤ frontend"
                        }
                    )
                    return False
                else:
                    self.log_result(
                        "–¢–µ—Å—Ç /api/cargo/place-in-cell",
                        True,
                        f"Endpoint –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è –≥—Ä—É–∑–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞",
                        {
                            "response_fields": list(data.keys()),
                            "full_response": data
                        }
                    )
                    return True
            else:
                # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –∑–∞–Ω—è—Ç–æ–π —è—á–µ–π–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω—ã
                self.log_result(
                    "–¢–µ—Å—Ç /api/cargo/place-in-cell",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"placement_data": placement_data, "note": "–í–æ–∑–º–æ–∂–Ω–æ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –≥—Ä—É–∑ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω"}
                )
                return False
                
        except Exception as e:
            self.log_result("–¢–µ—Å—Ç /api/cargo/place-in-cell", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã placementStatistics"""
        print("üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–ê –í TAJLINE.TJ")
        print("=" * 80)
        print("üéØ –¶–ï–õ–¨: –ù–∞–π—Ç–∏ endpoint –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print("üö® –ü–†–û–ë–õ–ï–ú–ê: placementStatistics —Å–æ–¥–µ—Ä–∂–∏—Ç {location_code, cargo_name, ...}")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.get_operator_warehouses():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã
        if not self.get_available_cargo_for_placement():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã")
            return False
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoints —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –†–ê–ó–ú–ï–©–ï–ù–ò–Ø...")
        
        # –¢–µ—Å—Ç 1: /api/operator/cargo/place
        print(f"\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/operator/cargo/place...")
        self.test_operator_cargo_place_endpoint()
        
        # –¢–µ—Å—Ç 2: /api/cargo/place-in-cell
        print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/cargo/place-in-cell...")
        self.test_cargo_place_in_cell_endpoint()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û–ò–°–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö endpoints
        suspicious_endpoints = [
            result for result in self.test_results 
            if not result["success"] and result.get("details", {}).get("potential_bug_source")
        ]
        
        print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´:")
        
        if suspicious_endpoints:
            print(f"   üö® –ù–ê–ô–î–ï–ù–´ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS: {len(suspicious_endpoints)}")
            for result in suspicious_endpoints:
                print(f"   ‚ùå {result['test']}: {result['message']}")
                details = result.get("details", {})
                if "cargo_fields_found" in details:
                    print(f"      –ü–æ–ª—è –≥—Ä—É–∑–∞: {details['cargo_fields_found']}")
            
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∫–æ–¥ –≥–¥–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ endpoints")
            print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ placementStatistics")
            print("   3. –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        else:
            print("   ‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –ù–ï –ù–ê–ô–î–ï–ù–´")
            print("   ü§î –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ frontend –ª–æ–≥–∏–∫–µ")
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∫–æ–¥ –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è placementStatistics")
            print("   2. –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –≥–¥–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞")
        
        return success_rate >= 50.0  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã

if __name__ == "__main__":
    tester = PlacementEndpointsTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        sys.exit(0)
    else:
        print("\nüîç –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê!")
        sys.exit(1)