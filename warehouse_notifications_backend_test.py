#!/usr/bin/env python3
"""
Backend Stability Testing for Warehouse Notifications after React "removeChild" Fixes
Tests backend stability after fixing React errors when showing all warehouse pickup notifications in TAJLINE.TJ
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class WarehouseNotificationsBackendTester:
    def __init__(self, base_url="https://tajline-cargo-8.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.users = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üè≠ WAREHOUSE NOTIFICATIONS BACKEND STABILITY TESTER")
        print(f"üì° Base URL: {self.base_url}")
        print(f"üéØ Testing backend stability after React 'removeChild' fixes")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    if isinstance(result, dict) and len(str(result)) < 300:
                        print(f"   üìÑ Response: {result}")
                    elif isinstance(result, list) and len(result) > 0:
                        print(f"   üìÑ Response: Found {len(result)} items")
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_warehouse_notifications_backend_stability(self):
        """Test backend stability after React removeChild fixes for warehouse notifications"""
        print("\nüéØ WAREHOUSE NOTIFICATIONS BACKEND STABILITY TESTING")
        print("   üìã –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π React –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ TAJLINE.TJ")
        print("   üîß –¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:")
        print("   1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
        print("   2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("   3) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
        print("   4) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("   5) –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç frontend –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")
        
        all_success = True
        
        # Test 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)
        print("\n   üîê Test 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Warehouse Operator Authentication",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        all_success &= success
        
        operator_token = None
        if success and 'access_token' in login_response:
            operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            operator_phone = operator_user.get('phone')
            operator_user_number = operator_user.get('user_number')
            
            print(f"   ‚úÖ Operator login successful: {operator_name}")
            print(f"   üëë Role: {operator_role}")
            print(f"   üìû Phone: {operator_phone}")
            print(f"   üÜî User Number: {operator_user_number}")
            print(f"   üîë JWT Token: {operator_token[:50]}...")
            
            # Verify role is warehouse_operator
            if operator_role == 'warehouse_operator':
                print("   ‚úÖ Operator role correctly set to 'warehouse_operator'")
            else:
                print(f"   ‚ùå Operator role incorrect: expected 'warehouse_operator', got '{operator_role}'")
                all_success = False
            
            self.tokens['warehouse_operator'] = operator_token
            self.users['warehouse_operator'] = operator_user
        else:
            print("   ‚ùå Operator login failed - no access token received")
            print(f"   üìÑ Response: {login_response}")
            all_success = False
            return False
        
        # Test 2: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
        print("\n   üìã Test 2: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô...")
        
        success, notifications_response = self.run_test(
            "Get Warehouse Notifications List",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token
        )
        all_success &= success
        
        notifications_list = []
        if success:
            print("   ‚úÖ /api/operator/warehouse-notifications endpoint working")
            
            if isinstance(notifications_response, dict) and 'notifications' in notifications_response:
                notifications_list = notifications_response['notifications']
                notification_count = len(notifications_list)
                print(f"   üìä Found {notification_count} warehouse notifications")
                
                # Check notification structure for React key uniqueness
                if notification_count > 0:
                    sample_notification = notifications_list[0]
                    required_fields = ['id', 'request_number', 'sender_full_name', 'status', 'created_at']
                    missing_fields = [field for field in required_fields if field not in sample_notification]
                    
                    if not missing_fields:
                        print("   ‚úÖ Notification structure correct (id, request_number, sender_full_name, status, created_at)")
                        print(f"   üìÑ Sample notification ID: {sample_notification.get('id')}")
                        print(f"   üìÑ Sample request number: {sample_notification.get('request_number')}")
                        print(f"   üìÑ Sample status: {sample_notification.get('status')}")
                        
                        # Check for unique IDs (important for React keys)
                        notification_ids = [n.get('id') for n in notifications_list if n.get('id')]
                        unique_ids = set(notification_ids)
                        
                        if len(notification_ids) == len(unique_ids):
                            print("   ‚úÖ All notification IDs are unique (good for React keys)")
                        else:
                            print(f"   ‚ùå Duplicate notification IDs found: {len(notification_ids)} total, {len(unique_ids)} unique")
                            all_success = False
                    else:
                        print(f"   ‚ùå Missing required fields in notifications: {missing_fields}")
                        all_success = False
                else:
                    print("   ‚ö†Ô∏è  No notifications found for testing")
            elif isinstance(notifications_response, list):
                notifications_list = notifications_response
                notification_count = len(notifications_list)
                print(f"   üìä Found {notification_count} warehouse notifications (direct list format)")
            else:
                print("   ‚ùå Unexpected response format for notifications")
                print(f"   üìÑ Response type: {type(notifications_response)}")
                print(f"   üìÑ Response keys: {list(notifications_response.keys()) if isinstance(notifications_response, dict) else 'Not a dict'}")
                all_success = False
        else:
            print("   ‚ùå Failed to get warehouse notifications")
            all_success = False
        
        # Test 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï
        print("\n   üèóÔ∏è Test 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï...")
        
        # Find a notification that can be sent to placement
        test_notification_id = None
        if notifications_list:
            for notification in notifications_list:
                if notification.get('status') in ['pending_acceptance', 'in_processing']:
                    test_notification_id = notification.get('id')
                    test_request_number = notification.get('request_number')
                    print(f"   üéØ Using notification for testing: {test_request_number} (ID: {test_notification_id})")
                    break
        
        if test_notification_id:
            # Test send to placement function
            success, placement_response = self.run_test(
                "Send Notification to Placement",
                "POST",
                f"/api/operator/warehouse-notifications/{test_notification_id}/send-to-placement",
                200,
                token=operator_token
            )
            
            if success:
                print("   ‚úÖ Send to placement function working")
                
                # Verify response structure
                if isinstance(placement_response, dict):
                    message = placement_response.get('message', '')
                    cargo_number = placement_response.get('cargo_number', '')
                    
                    if 'success' in message.lower() or cargo_number:
                        print(f"   ‚úÖ Placement successful: {message}")
                        if cargo_number:
                            print(f"   üì¶ Cargo created: {cargo_number}")
                    else:
                        print(f"   ‚ö†Ô∏è  Placement response unclear: {placement_response}")
                else:
                    print(f"   ‚ö†Ô∏è  Unexpected placement response format: {placement_response}")
            else:
                print("   ‚ùå Send to placement function failed")
                print("   ‚ÑπÔ∏è  This may be due to notification status or missing data")
                # Don't fail completely as this depends on notification state
        else:
            print("   ‚ö†Ô∏è  No suitable notification found for placement testing")
            print("   ‚ÑπÔ∏è  This is normal if all notifications are already processed")
        
        # Test 4: –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
        print("\n   üîç Test 4: –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô...")
        
        # Test filtering by status if supported
        filter_tests = [
            {"status": "pending_acceptance", "description": "Pending Acceptance"},
            {"status": "in_processing", "description": "In Processing"},
            {"status": "completed", "description": "Completed"}
        ]
        
        for filter_test in filter_tests:
            status_filter = filter_test["status"]
            description = filter_test["description"]
            
            success, filtered_response = self.run_test(
                f"Filter Notifications by Status: {description}",
                "GET",
                "/api/operator/warehouse-notifications",
                200,
                params={"status": status_filter},
                token=operator_token
            )
            
            if success:
                if isinstance(filtered_response, dict) and 'notifications' in filtered_response:
                    filtered_notifications = filtered_response['notifications']
                    filtered_count = len(filtered_notifications)
                    print(f"   ‚úÖ {description} filter working: {filtered_count} notifications")
                    
                    # Verify all returned notifications have the correct status
                    if filtered_count > 0:
                        correct_status_count = sum(1 for n in filtered_notifications if n.get('status') == status_filter)
                        if correct_status_count == filtered_count:
                            print(f"   ‚úÖ All {filtered_count} notifications have correct status: {status_filter}")
                        else:
                            print(f"   ‚ùå Status filtering incorrect: {correct_status_count}/{filtered_count} have correct status")
                            all_success = False
                elif isinstance(filtered_response, list):
                    filtered_count = len(filtered_response)
                    print(f"   ‚úÖ {description} filter working: {filtered_count} notifications")
                    
                    # Verify all returned notifications have the correct status
                    if filtered_count > 0:
                        correct_status_count = sum(1 for n in filtered_response if n.get('status') == status_filter)
                        if correct_status_count == filtered_count:
                            print(f"   ‚úÖ All {filtered_count} notifications have correct status: {status_filter}")
                        else:
                            print(f"   ‚ùå Status filtering incorrect: {correct_status_count}/{filtered_count} have correct status")
                            all_success = False
                else:
                    print(f"   ‚ö†Ô∏è  Unexpected response format for {description} filter")
            else:
                print(f"   ‚ö†Ô∏è  {description} filter may not be supported (this is OK)")
        
        # Test data safety filtering (ensure no sensitive data exposure)
        print("\n   üîí Test 4.1: DATA SAFETY FILTERING...")
        
        if notifications_list:
            # Check for potential sensitive data exposure
            sensitive_fields = ['password', 'token', 'secret', 'key']
            data_safe = True
            
            for notification in notifications_list[:3]:  # Check first 3 notifications
                notification_str = str(notification).lower()
                for sensitive_field in sensitive_fields:
                    if sensitive_field in notification_str:
                        print(f"   ‚ùå Potential sensitive data exposure: '{sensitive_field}' found in notification")
                        data_safe = False
                        all_success = False
            
            if data_safe:
                print("   ‚úÖ No sensitive data exposure detected in notifications")
            
            # Check for proper data structure (no internal MongoDB fields)
            mongodb_fields = ['_id', 'ObjectId']
            mongodb_safe = True
            
            for notification in notifications_list[:3]:
                notification_str = str(notification)
                for mongodb_field in mongodb_fields:
                    if mongodb_field in notification_str:
                        print(f"   ‚ùå MongoDB internal field exposure: '{mongodb_field}' found")
                        mongodb_safe = False
                        all_success = False
            
            if mongodb_safe:
                print("   ‚úÖ No MongoDB internal fields exposed")
        
        # Test 5: –£–ë–ï–î–ò–¢–¨–°–Ø –ß–¢–û BACKEND –ù–ï –ó–ê–¢–†–û–ù–£–¢ FRONTEND –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú–ò
        print("\n   üîß Test 5: BACKEND STABILITY AFTER FRONTEND CHANGES...")
        
        # Test core operator endpoints to ensure they still work
        core_endpoints = [
            ("/api/auth/me", "User Authentication Check"),
            ("/api/operator/warehouses", "Operator Warehouses"),
            ("/api/operator/cargo/list", "Operator Cargo List"),
            ("/api/operator/placement-statistics", "Placement Statistics"),
            ("/api/warehouses", "All Warehouses")
        ]
        
        backend_stability_score = 0
        total_core_endpoints = len(core_endpoints)
        
        for endpoint, description in core_endpoints:
            success, response = self.run_test(
                f"Core Endpoint: {description}",
                "GET",
                endpoint,
                200,
                token=operator_token
            )
            
            if success:
                backend_stability_score += 1
                print(f"   ‚úÖ {description} working")
                
                # Check for JSON serialization issues
                try:
                    json_str = json.dumps(response)
                    if 'ObjectId' in json_str:
                        print(f"   ‚ö†Ô∏è  Potential ObjectId serialization issue in {description}")
                    else:
                        print(f"   ‚úÖ JSON serialization correct for {description}")
                except Exception as e:
                    print(f"   ‚ùå JSON serialization error in {description}: {str(e)}")
                    all_success = False
            else:
                print(f"   ‚ùå {description} failing")
                all_success = False
        
        stability_percentage = (backend_stability_score / total_core_endpoints) * 100
        print(f"\n   üìä Backend Stability Score: {backend_stability_score}/{total_core_endpoints} ({stability_percentage:.1f}%)")
        
        if stability_percentage >= 80:
            print("   ‚úÖ Backend stability excellent after frontend changes")
        elif stability_percentage >= 60:
            print("   ‚ö†Ô∏è  Backend stability good but some issues detected")
        else:
            print("   ‚ùå Backend stability poor - frontend changes may have affected backend")
            all_success = False
        
        # Test 6: –ü–†–û–í–ï–†–ö–ê –ù–ê 500 INTERNAL SERVER ERRORS
        print("\n   üö® Test 6: CHECK FOR 500 INTERNAL SERVER ERRORS...")
        
        error_500_count = 0
        test_endpoints = [
            "/api/operator/warehouse-notifications",
            "/api/operator/warehouses", 
            "/api/operator/cargo/list",
            "/api/auth/me"
        ]
        
        for endpoint in test_endpoints:
            try:
                url = f"{self.base_url}{endpoint}"
                headers = {'Authorization': f'Bearer {operator_token}', 'Content-Type': 'application/json'}
                response = requests.get(url, headers=headers)
                
                if response.status_code == 500:
                    error_500_count += 1
                    print(f"   ‚ùå 500 Error in {endpoint}")
                    try:
                        error_detail = response.json()
                        print(f"   üìÑ Error detail: {error_detail}")
                    except:
                        print(f"   üìÑ Raw error: {response.text[:200]}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Exception testing {endpoint}: {str(e)}")
        
        if error_500_count == 0:
            print("   ‚úÖ No 500 Internal Server Errors found!")
        else:
            print(f"   ‚ùå Found {error_500_count} endpoints with 500 Internal Server Errors")
            all_success = False
        
        # SUMMARY
        print("\n   üìä WAREHOUSE NOTIFICATIONS BACKEND STABILITY SUMMARY:")
        
        if all_success:
            print("   üéâ ALL TESTS PASSED - Backend —Å—Ç–∞–±–∏–ª–µ–Ω –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π React –æ—à–∏–±–æ–∫!")
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (+79777888999/warehouse123)")
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
            print("   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   ‚úÖ Backend –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç frontend –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")
            print("   ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            print("   ‚úÖ –ù–∏–∫–∞–∫–∏—Ö 500 Internal Server Errors –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            print("   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è React keys")
            print("   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å–æ–±–ª—é–¥–µ–Ω–∞")
            print("   üéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ, –≤—Å–µ endpoints –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        else:
            print("   ‚ùå SOME TESTS FAILED - Backend stability needs attention")
            print("   üîç Check the specific failed tests above for details")
            print("   ‚ö†Ô∏è  Some backend issues may need to be addressed")
        
        return all_success

    def run_all_tests(self):
        """Run all warehouse notifications backend stability tests"""
        print("üöÄ STARTING WAREHOUSE NOTIFICATIONS BACKEND STABILITY TESTS")
        print("=" * 80)
        
        overall_success = True
        
        # Run the main test
        test_result = self.test_warehouse_notifications_backend_stability()
        overall_success &= test_result
        
        # Final summary
        print("\n" + "=" * 80)
        print("üìä FINAL TEST SUMMARY")
        print(f"Tests run: {self.tests_run}")
        print(f"Tests passed: {self.tests_passed}")
        print(f"Success rate: {(self.tests_passed/self.tests_run*100):.1f}%" if self.tests_run > 0 else "0%")
        
        if overall_success:
            print("üéâ ALL WAREHOUSE NOTIFICATIONS BACKEND STABILITY TESTS PASSED!")
            print("‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π React –æ—à–∏–±–æ–∫")
            print("‚úÖ –í—Å–µ endpoints –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ")
            print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ TAJLINE.TJ –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ùå SOME TESTS FAILED")
            print("üîß Backend stability issues detected after React fixes")
            print("üìã Review the detailed test results above")
        
        return overall_success

if __name__ == "__main__":
    tester = WarehouseNotificationsBackendTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)