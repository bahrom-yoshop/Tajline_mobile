#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è placing_operator –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è placing_operator –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235 –≤ API endpoint /api/operator/cargo/fully-placed

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê:
1. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 25082235 –≤ API endpoint /api/operator/cargo/fully-placed
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª–µ placing_operator —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
3. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", –ø—Ä–æ–≤–µ—Ä–∏—Ç—å individual_units –∏ –Ω–∞–π—Ç–∏ –≤ –Ω–∏—Ö –ø–æ–ª–µ placed_by —Å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É: –¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å –ø–µ—Ä–≤—ã–π individual_unit —Å is_placed=true –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º placed_by

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- placing_operator –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –ï—Å–ª–∏ –≤ individual_units –µ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Å placed_by, —Ç–æ placing_operator –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç—Ç–æ –§–ò–û

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è warehouse_operator (+79777888999, warehouse123) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacingOperatorFixTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator (+79777888999/warehouse123)...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator (+79777888999/warehouse123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_cargo_25082235_placing_operator_fix(self):
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è placing_operator –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235 –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è placing_operator")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API endpoint /api/operator/cargo/fully-placed
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code != 200:
                self.log_test(
                    "–î–æ—Å—Ç—É–ø –∫ endpoint /api/operator/cargo/fully-placed",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
            
            data = response.json()
            items = data.get("items", [])
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 25082235
            target_cargo = None
            for item in items:
                if item.get("cargo_number") == "25082235":
                    target_cargo = item
                    break
            
            if not target_cargo:
                self.log_test(
                    "–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235 –≤ endpoint",
                    False,
                    "–ó–∞—è–≤–∫–∞ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                    "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞",
                    "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return False
            
            self.log_test(
                "–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235 –≤ endpoint",
                True,
                f"–ó–∞—è–≤–∫–∞ 25082235 –Ω–∞–π–¥–µ–Ω–∞! –°—Ç–∞—Ç—É—Å: {target_cargo.get('status', 'unknown')}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ placing_operator
            placing_operator = target_cargo.get("placing_operator", "")
            
            print(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 25082235:")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {target_cargo.get('cargo_number')}")
            print(f"   üë§ placing_operator: '{placing_operator}'")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {target_cargo.get('status')}")
            print(f"   üè¢ –°–∫–ª–∞–¥ –ø—Ä–∏–µ–º–∞: {target_cargo.get('accepting_warehouse', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            individual_units = target_cargo.get("individual_units", [])
            placed_units = []
            placed_by_operators = set()
            
            print(f"   üì¶ Individual units ({len(individual_units)} –µ–¥–∏–Ω–∏—Ü):")
            for unit in individual_units:
                unit_number = unit.get("individual_number", "N/A")
                is_placed = unit.get("is_placed", False)
                placed_by = unit.get("placed_by", "")
                placement_info = unit.get("placement_info", "")
                
                status_icon = "‚úÖ" if is_placed else "‚è≥"
                print(f"     {status_icon} {unit_number}: {'–†–∞–∑–º–µ—â–µ–Ω' if is_placed else '–ñ–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è'}")
                
                if placement_info and placement_info != "–ñ–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è":
                    print(f"        üìç {placement_info}")
                
                if is_placed:
                    placed_units.append(unit)
                    if placed_by and placed_by != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                        placed_by_operators.add(placed_by)
                        print(f"        üë§ –†–∞–∑–º–µ—â–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {placed_by}")
            
            print(f"   üìä –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {len(placed_units)}/{len(individual_units)}")
            print(f"   üë• –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {list(placed_by_operators) if placed_by_operators else ['–ù–µ –Ω–∞–π–¥–µ–Ω—ã']}")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: placing_operator –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if placing_operator == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ individual_units
                if placed_by_operators:
                    # –ï—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ individual_units, –Ω–æ placing_operator –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω
                    expected_operator = list(placed_by_operators)[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                    self.log_test(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê - –ü–æ–ª–µ placing_operator",
                        False,
                        f"placing_operator —Å–æ–¥–µ—Ä–∂–∏—Ç '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', –Ω–æ –≤ individual_units –Ω–∞–π–¥–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {list(placed_by_operators)}",
                        f"–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: {expected_operator})",
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    )
                    return False
                else:
                    # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö –∏ –≤ individual_units
                    self.log_test(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê - –ü–æ–ª–µ placing_operator",
                        False,
                        "placing_operator —Å–æ–¥–µ—Ä–∂–∏—Ç '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' –∏ –≤ individual_units —Ç–∞–∫–∂–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ individual_units)"
                    )
                    return False
            else:
                # placing_operator —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if placed_by_operators:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ individual_units
                    if placing_operator in placed_by_operators:
                        self.log_test(
                            "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û - –ü–æ–ª–µ placing_operator",
                            True,
                            f"placing_operator –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: '{placing_operator}' (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω—ã–º –≤ individual_units)"
                        )
                        return True
                    else:
                        self.log_test(
                            "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –ü–æ–ª–µ placing_operator",
                            True,  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            f"placing_operator —Å–æ–¥–µ—Ä–∂–∏—Ç '{placing_operator}', –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –≤ individual_units: {list(placed_by_operators)}"
                        )
                        return True
                else:
                    # placing_operator –∑–∞–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ individual_units
                    self.log_test(
                        "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û - –ü–æ–ª–µ placing_operator",
                        True,
                        f"placing_operator –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: '{placing_operator}' (–¥–∞–Ω–Ω—ã–µ –≤ individual_units –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)"
                    )
                    return True
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 25082235", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_endpoint_structure_and_access(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint –∏ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            print("üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ endpoint –∏ –¥–æ—Å—Ç—É–ø")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                required_fields = ["items", "pagination", "summary"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    items = data.get("items", [])
                    pagination = data.get("pagination", {})
                    summary = data.get("summary", {})
                    
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ endpoint /api/operator/cargo/fully-placed",
                        True,
                        f"Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–æ–ª–∏ warehouse_operator, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—è–º–∏ {list(data.keys())}, –Ω–∞–π–¥–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫"
                    )
                    return True
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ endpoint",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "–î–æ—Å—Ç—É–ø –∫ endpoint",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoint", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placing_operator"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è placing_operator –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235")
        print("=" * 100)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append(("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ endpoint –∏ –¥–æ—Å—Ç—É–ø", self.test_endpoint_structure_and_access()))
        test_results.append(("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ó–∞—è–≤–∫–∞ 25082235 - –ø–æ–ª–µ placing_operator", self.test_cargo_25082235_placing_operator_fix()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 100)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 100)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û! –ü–æ–ª–µ placing_operator –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235 —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'!")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–µ–º placing_operator.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        
        return success_rate >= 50  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 50% –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacingOperatorFixTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è placing_operator –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return 0
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        print("–ü–æ–ª–µ placing_operator –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235 —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return 1

if __name__ == "__main__":
    exit(main())