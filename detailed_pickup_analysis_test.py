#!/usr/bin/env python3
"""
–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –í TAJLINE.TJ

–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö endpoints:
1. /api/admin/cargo-requests (11 –∑–∞–ø–∏—Å–µ–π)
2. /api/operator/warehouse-notifications (11 –∑–∞–ø–∏—Å–µ–π)

–¶–µ–ª—å: –ü–æ–Ω—è—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∏ —Å –≥—Ä—É–∑–∞–º–∏
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-route-map.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def authenticate_admin():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ cargo-requests"""
    print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê...")
    
    auth_data = {
        "phone": "+79999888777",
        "password": "admin123"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=auth_data)
    
    if response.status_code == 200:
        data = response.json()
        token = data.get('access_token')
        user_info = data.get('user')
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        return None

def authenticate_operator():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê...")
    
    auth_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=auth_data)
    
    if response.status_code == 200:
        data = response.json()
        token = data.get('access_token')
        user_info = data.get('user')
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        return None

def analyze_cargo_requests(admin_token):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã cargo-requests"""
    print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó /api/admin/cargo-requests...")
    
    headers = {"Authorization": f"Bearer {admin_token}"}
    
    response = requests.get(f"{API_BASE}/admin/cargo-requests", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
        
        if isinstance(data, list):
            cargo_requests = data
        else:
            cargo_requests = data.get('requests', data.get('items', []))
        
        print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(cargo_requests)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ
        for i, request in enumerate(cargo_requests):
            print(f"\nüìã –ó–ê–Ø–í–ö–ê {i+1}:")
            print(f"   –¢–∏–ø: {type(request)}")
            
            if isinstance(request, dict):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
                print(f"   –ü–æ–ª—è ({len(request)}): {list(request.keys())}")
                
                # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                key_fields = ['id', 'request_number', 'status', 'cargo_name', 'sender_full_name', 'recipient_full_name']
                for field in key_fields:
                    if field in request:
                        value = request[field]
                        print(f"   üîë {field}: {value}")
                
                # –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–∞–º–∏
                cargo_fields = []
                for field, value in request.items():
                    field_lower = field.lower()
                    if any(keyword in field_lower for keyword in ['cargo', '–≥—Ä—É–∑', 'item', '—Ç–æ–≤–∞—Ä']):
                        cargo_fields.append(field)
                        print(f"   üöõ –ì–†–£–ó-–ü–û–õ–ï: {field} = {value}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–∞—Å—Å–∏–≤ items
                if 'items' in request:
                    items = request['items']
                    print(f"   üì¶ ITEMS: {type(items)} —Å {len(items) if isinstance(items, list) else 'N/A'} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                    
                    if isinstance(items, list):
                        for j, item in enumerate(items[:3]):
                            print(f"      Item {j+1}: {item}")
                            if isinstance(item, dict):
                                # –ò—â–µ–º cargo_id, cargo_number –≤ items
                                for cargo_key in ['cargo_id', 'cargo_number', 'id', 'number']:
                                    if cargo_key in item:
                                        print(f"         üéØ –ù–ê–ô–î–ï–ù –ì–†–£–ó: {cargo_key} = {item[cargo_key]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤—è–∑–∏
                for field in ['related_cargo_id', 'cargo_list', 'associated_cargo']:
                    if field in request:
                        print(f"   üîó –°–í–Ø–ó–¨ –° –ì–†–£–ó–û–ú: {field} = {request[field]}")
                
                print("   " + "-" * 60)
        
        return cargo_requests
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        return []

def analyze_warehouse_notifications(operator_token):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã warehouse-notifications"""
    print("\nüì¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó /api/operator/warehouse-notifications...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{API_BASE}/operator/warehouse-notifications", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
        
        notifications = data.get('notifications', [])
        print(f"üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for key, value in data.items():
            if key != 'notifications':
                print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {key} = {value}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        for i, notification in enumerate(notifications):
            print(f"\nüì¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï {i+1}:")
            print(f"   –¢–∏–ø: {type(notification)}")
            
            if isinstance(notification, dict):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
                print(f"   –ü–æ–ª—è ({len(notification)}): {list(notification.keys())}")
                
                # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                key_fields = ['id', 'request_number', 'status', 'pickup_request_id', 'cargo_id', 'cargo_number']
                for field in key_fields:
                    if field in notification:
                        value = notification[field]
                        print(f"   üîë {field}: {value}")
                
                # –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–∞–º–∏
                for field, value in notification.items():
                    field_lower = field.lower()
                    if any(keyword in field_lower for keyword in ['cargo', '–≥—Ä—É–∑', 'pickup', '–∑–∞–±–æ—Ä']):
                        print(f"   üöõ –°–í–Ø–ó–ê–ù–ù–û–ï –ü–û–õ–ï: {field} = {value}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ
                if 'cargo_data' in notification or 'pickup_data' in notification:
                    cargo_data = notification.get('cargo_data', notification.get('pickup_data', {}))
                    print(f"   üì¶ –î–ê–ù–ù–´–ï –ì–†–£–ó–ê: {cargo_data}")
                
                print("   " + "-" * 60)
        
        return notifications
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        return []

def find_cargo_connections(cargo_requests, notifications):
    """–ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –∏ –≥—Ä—É–∑–∞–º–∏"""
    print("\nüîó –ü–û–ò–°–ö –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –ó–ê–Ø–í–ö–ê–ú–ò –ò –ì–†–£–ó–ê–ú–ò...")
    
    connections = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º cargo_requests
    print("üìã –ê–Ω–∞–ª–∏–∑ cargo_requests:")
    for i, request in enumerate(cargo_requests):
        if isinstance(request, dict):
            request_id = request.get('id')
            request_number = request.get('request_number')
            
            # –ò—â–µ–º –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã
            cargo_connections = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º items
            if 'items' in request and isinstance(request['items'], list):
                for item in request['items']:
                    if isinstance(item, dict):
                        cargo_id = item.get('cargo_id') or item.get('id')
                        cargo_number = item.get('cargo_number') or item.get('number')
                        if cargo_id or cargo_number:
                            cargo_connections.append({
                                'type': 'item',
                                'cargo_id': cargo_id,
                                'cargo_number': cargo_number
                            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è
            for field in ['cargo_id', 'cargo_number', 'related_cargo_id']:
                if field in request and request[field]:
                    cargo_connections.append({
                        'type': 'direct_field',
                        'field': field,
                        'value': request[field]
                    })
            
            if cargo_connections:
                print(f"   –ó–∞—è–≤–∫–∞ {request_number}: {len(cargo_connections)} —Å–≤—è–∑–µ–π —Å –≥—Ä—É–∑–∞–º–∏")
                for conn in cargo_connections:
                    print(f"      {conn}")
                
                connections.append({
                    'request_id': request_id,
                    'request_number': request_number,
                    'cargo_connections': cargo_connections
                })
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º notifications
    print("\nüì¨ –ê–Ω–∞–ª–∏–∑ notifications:")
    for i, notification in enumerate(notifications):
        if isinstance(notification, dict):
            notification_id = notification.get('id')
            request_number = notification.get('request_number')
            pickup_request_id = notification.get('pickup_request_id')
            
            # –ò—â–µ–º —Å–≤—è–∑–∏ —Å –≥—Ä—É–∑–∞–º–∏
            cargo_info = []
            
            for field in ['cargo_id', 'cargo_number']:
                if field in notification and notification[field]:
                    cargo_info.append({
                        'field': field,
                        'value': notification[field]
                    })
            
            if cargo_info or pickup_request_id:
                print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id}: pickup_request_id={pickup_request_id}")
                for info in cargo_info:
                    print(f"      {info}")
    
    return connections

def test_cargo_deletion_endpoints(operator_token, admin_token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
    print("\nüóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í...")
    
    # Endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    deletion_endpoints = [
        {
            'method': 'DELETE',
            'endpoint': '/api/operator/cargo/{cargo_id}/remove-from-placement',
            'description': '–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
            'token': operator_token
        },
        {
            'method': 'DELETE', 
            'endpoint': '/api/operator/cargo/bulk-remove-from-placement',
            'description': '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è',
            'token': operator_token
        },
        {
            'method': 'DELETE',
            'endpoint': '/api/admin/cargo-requests/{request_id}',
            'description': '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä',
            'token': admin_token
        }
    ]
    
    for endpoint_info in deletion_endpoints:
        method = endpoint_info['method']
        endpoint = endpoint_info['endpoint']
        description = endpoint_info['description']
        token = endpoint_info['token']
        
        print(f"\nüîç {description}:")
        print(f"   {method} {endpoint}")
        
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'bulk-remove' in endpoint:
            test_data = {"cargo_ids": ["fake-id-1", "fake-id-2"]}
        else:
            test_data = None
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL
        test_endpoint = endpoint.replace('{cargo_id}', 'fake-cargo-id').replace('{request_id}', 'fake-request-id')
        
        headers = {"Authorization": f"Bearer {token}"}
        
        try:
            if method == 'DELETE':
                response = requests.delete(f"{API_BASE}{test_endpoint}", json=test_data, headers=headers)
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code in [200, 404, 422]:  # –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                print(f"   ‚úÖ Endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                if response.status_code == 200:
                    try:
                        result = response.json()
                        print(f"   üìÑ –û—Ç–≤–µ—Ç: {result}")
                    except:
                        pass
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.text[:100]}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –í TAJLINE.TJ")
    print("=" * 80)
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    admin_token = authenticate_admin()
    operator_token = authenticate_operator()
    
    if not admin_token or not operator_token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        return
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo-requests
    cargo_requests = analyze_cargo_requests(admin_token)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ warehouse-notifications
    notifications = analyze_warehouse_notifications(operator_token)
    
    # –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –∏ –≥—Ä—É–∑–∞–º–∏
    connections = find_cargo_connections(cargo_requests, notifications)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    test_cargo_deletion_endpoints(operator_token, admin_token)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 80)
    
    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
    print(f"‚úÖ –ó–∞—è–≤–∫–∏ cargo-requests: {len(cargo_requests)}")
    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è warehouse-notifications: {len(notifications)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å –≥—Ä—É–∑–∞–º–∏: {len(connections)}")
    
    print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†:")
    if cargo_requests:
        sample_request = cargo_requests[0]
        if isinstance(sample_request, dict):
            print(f"   –ü–æ–ª—è –≤ –∑–∞—è–≤–∫–µ: {list(sample_request.keys())}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
            important_fields = ['id', 'request_number', 'status', 'items', 'cargo_name', 'sender_full_name', 'recipient_full_name']
            for field in important_fields:
                if field in sample_request:
                    value = sample_request[field]
                    print(f"   {field}: {type(value)} = {value}")
    
    print(f"\nüì¨ –°–¢–†–£–ö–¢–£–†–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê:")
    if notifications:
        sample_notification = notifications[0]
        if isinstance(sample_notification, dict):
            print(f"   –ü–æ–ª—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {list(sample_notification.keys())}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
            important_fields = ['id', 'request_number', 'pickup_request_id', 'status', 'cargo_id', 'cargo_number']
            for field in important_fields:
                if field in sample_notification:
                    value = sample_notification[field]
                    print(f"   {field}: {type(value)} = {value}")
    
    print(f"\nüîó –ù–ê–ô–î–ï–ù–ù–´–ï –°–í–Ø–ó–ò –° –ì–†–£–ó–ê–ú–ò:")
    for connection in connections:
        request_number = connection['request_number']
        cargo_connections = connection['cargo_connections']
        print(f"   –ó–∞—è–≤–∫–∞ {request_number}: {len(cargo_connections)} —Å–≤—è–∑–µ–π")
        for conn in cargo_connections:
            print(f"      {conn}")
    
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–û–õ–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í:")
    print("1. ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /api/admin/cargo-requests –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
    print("2. ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ 'items' –≤ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
    print("3. ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /api/operator/warehouse-notifications –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id")
    print("4. ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
    print("5. ‚úÖ –£—á–∏—Ç—ã–≤–∞—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –∏ –≥—Ä—É–∑–∞–º–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
    
    if connections:
        print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–´ –ö–û–ù–ö–†–ï–¢–ù–´–ï –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ó–ê–Ø–í–ö–ê–ú–ò –ò –ì–†–£–ó–ê–ú–ò!")
        print("   –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
    else:
        print(f"\n‚ö†Ô∏è –ü—Ä—è–º—ã–µ —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

if __name__ == "__main__":
    main()