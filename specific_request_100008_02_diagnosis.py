#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä 100008/02 –≤ TAJLINE.TJ

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑ —Å –Ω–æ–º–µ—Ä–æ–º 100008/02,
–∫–æ—Ç–æ—Ä–∞—è –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –Ω–∏ –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º, –Ω–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä".
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-ops.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

class SpecificRequestDiagnosisTest:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.target_request_number = "100008/02"
        self.target_request_data = None
        self.target_request_id = None
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
                print(f"   - –ò–º—è: {user_info.get('full_name', 'N/A')}")
                print(f"   - –ù–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')}")
                print(f"   - –†–æ–ª—å: {user_info.get('role', 'N/A')}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def search_request_in_cargo_requests(self):
        """–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 100008/02 –≤ GET /api/admin/cargo-requests"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {self.target_request_number} –≤ /api/admin/cargo-requests...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/admin/cargo-requests",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                requests_list = data if isinstance(data, list) else data.get('items', [])
                
                print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(requests_list)}")
                
                # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É 100008/02
                target_request = None
                for request in requests_list:
                    request_number = request.get('request_number', '')
                    if request_number == self.target_request_number:
                        target_request = request
                        break
                
                if target_request:
                    self.target_request_data = target_request
                    self.target_request_id = target_request.get('id')
                    
                    print(f"üéØ –ù–ê–ô–î–ï–ù–ê –∑–∞—è–≤–∫–∞ {self.target_request_number}!")
                    print(f"   - ID: {self.target_request_id}")
                    print(f"   - –°—Ç–∞—Ç—É—Å: {target_request.get('status', 'N/A')}")
                    print(f"   - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {target_request.get('sender_full_name', 'N/A')}")
                    print(f"   - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target_request.get('recipient_full_name', 'N/A')}")
                    print(f"   - –ì—Ä—É–∑: {target_request.get('cargo_name', 'N/A')}")
                    print(f"   - –°–æ–∑–¥–∞–Ω–∞: {target_request.get('created_at', 'N/A')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    print(f"\nüìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ {self.target_request_number}:")
                    for key, value in target_request.items():
                        print(f"   - {key}: {value}")
                    
                    return True
                else:
                    print(f"‚ùå –ó–∞—è–≤–∫–∞ {self.target_request_number} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ /api/admin/cargo-requests")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    print("\nüìã –í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ:")
                    for i, request in enumerate(requests_list[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        print(f"   {i}. {request.get('request_number', 'N/A')} (ID: {request.get('id', 'N/A')})")
                    
                    if len(requests_list) > 10:
                        print(f"   ... –∏ –µ—â–µ {len(requests_list) - 10} –∑–∞—è–≤–æ–∫")
                    
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ cargo-requests: {e}")
            return False
    
    def search_request_in_pickup_requests(self):
        """–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 100008/02 –≤ GET /api/operator/pickup-requests"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {self.target_request_number} –≤ /api/operator/pickup-requests...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                pickup_requests = data.get('pickup_requests', [])
                
                print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {len(pickup_requests)}")
                
                # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É 100008/02
                target_pickup = None
                for request in pickup_requests:
                    request_number = request.get('request_number', '')
                    if request_number == self.target_request_number:
                        target_pickup = request
                        break
                
                if target_pickup:
                    print(f"üéØ –ù–ê–ô–î–ï–ù–ê –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä {self.target_request_number}!")
                    print(f"   - ID: {target_pickup.get('id', 'N/A')}")
                    print(f"   - –°—Ç–∞—Ç—É—Å: {target_pickup.get('status', 'N/A')}")
                    print(f"   - –¢–∏–ø: {target_pickup.get('request_type', 'N/A')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
                    print(f"\nüìã –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–∞ –∑–∞–±–æ—Ä {self.target_request_number}:")
                    for key, value in target_pickup.items():
                        print(f"   - {key}: {value}")
                    
                    return True
                else:
                    print(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä {self.target_request_number} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ /api/operator/pickup-requests")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
                    print("\nüìã –í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä:")
                    for i, request in enumerate(pickup_requests[:10], 1):
                        print(f"   {i}. {request.get('request_number', 'N/A')} (ID: {request.get('id', 'N/A')})")
                    
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ pickup-requests: {e}")
            return False
    
    def analyze_request_relationships(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ 100008/02"""
        if not self.target_request_id:
            print("\n‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤—è–∑–∏ - –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        print(f"\nüîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏ {self.target_request_number}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/warehouse-notifications",
                timeout=10
            )
            
            if response.status_code == 200:
                notifications = response.json()
                related_notifications = []
                
                for notification in notifications:
                    if (notification.get('pickup_request_id') == self.target_request_id or 
                        notification.get('request_number') == self.target_request_number):
                        related_notifications.append(notification)
                
                if related_notifications:
                    print(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(related_notifications)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
                    for i, notif in enumerate(related_notifications, 1):
                        print(f"   {i}. ID: {notif.get('id', 'N/A')}")
                        print(f"      –°—Ç–∞—Ç—É—Å: {notif.get('status', 'N/A')}")
                        print(f"      –¢–∏–ø: {notif.get('request_type', 'N/A')}")
                else:
                    print("üì≠ –°–≤—è–∑–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—å–µ—Ä—Å–∫–∏–µ –∑–∞—è–≤–∫–∏
        try:
            response = self.session.get(
                f"{BACKEND_URL}/admin/courier-requests",
                timeout=10
            )
            
            if response.status_code == 200:
                courier_requests = response.json()
                related_courier_requests = []
                
                for request in courier_requests:
                    if request.get('request_number') == self.target_request_number:
                        related_courier_requests.append(request)
                
                if related_courier_requests:
                    print(f"üöö –ù–∞–π–¥–µ–Ω–æ {len(related_courier_requests)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫:")
                    for i, req in enumerate(related_courier_requests, 1):
                        print(f"   {i}. ID: {req.get('id', 'N/A')}")
                        print(f"      –°—Ç–∞—Ç—É—Å: {req.get('request_status', 'N/A')}")
                        print(f"      –ö—É—Ä—å–µ—Ä: {req.get('assigned_courier_name', 'N/A')}")
                else:
                    print("üöö –°–≤—è–∑–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
        
        return True
    
    def attempt_deletion_via_cargo_applications(self):
        """–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ DELETE /api/admin/cargo-applications/{id}"""
        if not self.target_request_id:
            print("\n‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å - ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"\nüóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {self.target_request_number} —á–µ—Ä–µ–∑ /api/admin/cargo-applications/{self.target_request_id}...")
        
        try:
            response = self.session.delete(
                f"{BACKEND_URL}/admin/cargo-applications/{self.target_request_id}",
                timeout=10
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            
            if response.status_code == 200:
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ {self.target_request_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                return True
            elif response.status_code == 404:
                print(f"‚ùå –ó–∞—è–≤–∫–∞ {self.target_request_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return False
            elif response.status_code == 403:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {self.target_request_number}")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {self.target_request_number}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
            return False
    
    def verify_deletion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {self.target_request_number}...")
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –∑–∞—è–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ
        try:
            response = self.session.get(
                f"{BACKEND_URL}/admin/cargo-requests",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                requests_list = data if isinstance(data, list) else data.get('items', [])
                
                # –ò—â–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                found = False
                for request in requests_list:
                    if request.get('request_number') == self.target_request_number:
                        found = True
                        break
                
                if found:
                    print(f"‚ùå –ó–∞—è–≤–∫–∞ {self.target_request_number} –í–°–ï –ï–©–ï –°–£–©–ï–°–¢–í–£–ï–¢ –≤ —Å–∏—Å—Ç–µ–º–µ!")
                    return False
                else:
                    print(f"‚úÖ –ó–∞—è–≤–∫–∞ {self.target_request_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
                    return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False
    
    def try_alternative_deletion_methods(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è"""
        if not self.target_request_id:
            print("\n‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã - ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {self.target_request_number}...")
        
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π endpoint
        alternative_endpoints = [
            f"/admin/cargo-requests/{self.target_request_id}",
            f"/operator/pickup-requests/{self.target_request_id}",
            f"/admin/requests/{self.target_request_id}"
        ]
        
        for endpoint in alternative_endpoints:
            print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {endpoint}...")
            try:
                response = self.session.delete(
                    f"{BACKEND_URL}{endpoint}",
                    timeout=10
                )
                
                print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
                if response.status_code == 200:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {endpoint}!")
                    return True
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return False
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–æ–π 100008/02"""
        print("=" * 80)
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞—è–≤–∫–∏ 100008/02")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ cargo-requests
        found_in_cargo = self.search_request_in_cargo_requests()
        
        # –®–∞–≥ 3: –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ pickup-requests
        found_in_pickup = self.search_request_in_pickup_requests()
        
        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏–≥–¥–µ
        if not found_in_cargo and not found_in_pickup:
            print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
            print(f"‚ùå –ó–∞—è–≤–∫–∞ {self.target_request_number} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ —Å–∏—Å—Ç–µ–º–µ!")
            print(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   1. –ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
            print(f"   2. –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            print(f"   3. –ó–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            return False
        
        # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.analyze_request_relationships()
        
        # –®–∞–≥ 5: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        if found_in_cargo:
            deletion_success = self.attempt_deletion_via_cargo_applications()
            
            if deletion_success:
                # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                self.verify_deletion()
            else:
                # –®–∞–≥ 7: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
                self.try_alternative_deletion_methods()
        
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        if found_in_cargo:
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ {self.target_request_number} –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            print(f"   - ID: {self.target_request_id}")
            print(f"   - –°—Ç–∞—Ç—É—Å: {self.target_request_data.get('status', 'N/A') if self.target_request_data else 'N/A'}")
        else:
            print(f"‚ùå –ó–∞—è–≤–∫–∞ {self.target_request_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
        
        if found_in_pickup:
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ {self.target_request_number} –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –∑–∞–±–æ—Ä")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    test = SpecificRequestDiagnosisTest()
    
    try:
        success = test.run_comprehensive_diagnosis()
        
        if success:
            print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    main()