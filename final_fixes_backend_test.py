#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô - TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
–ë—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:

1. **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–û–°–û–ë–ê –û–ü–õ–ê–¢–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï:**
   - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ `cash_on_delivery` ‚Üí 'üì¶ –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂'
   - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ `deferred` ‚Üí '‚è≥ –í –¥–æ–ª–≥'

2. **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–†–ú–ê–¢–ê QR –ö–û–î–û–í:**
   - –í frontend: –∏–∑–º–µ–Ω–µ–Ω `/${i}` –Ω–∞ `/${String(i).padStart(2, '0')}`
   - –í backend: –∏–∑–º–µ–Ω–µ–Ω `unit_index: unit_index` –Ω–∞ `unit_index: str(unit_index).zfill(2)`

3. **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ò–°–ö–ê –ï–î–ò–ù–ò–¶ –ì–†–£–ó–ê:**
   - –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ `String(unit.unit_index) === extractedData.unit_number`

–ó–ê–î–ê–ß–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å cash_on_delivery
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ 25082026/01/02
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å backward compatibility
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR ‚Üí –†–∞–∑–º–µ—â–µ–Ω–∏–µ ‚Üí –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω
"""

import requests
import json
import sys
import time
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

ADMIN_CREDENTIALS = {
    "phone": "+79999888777", 
    "password": "admin123"
}

class FinalFixesTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.admin_token = None
        self.test_results = []
        self.warehouse_id = None
        self.test_cargo_id = None
        self.test_cargo_number = None
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def get_operator_warehouse(self):
        """Get operator's warehouse"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    self.warehouse_id = warehouses[0].get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥: {warehouses[0].get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, error=str(e))
            return False

    def test_create_cargo_with_cash_on_delivery(self):
        """Test creating cargo with cash_on_delivery payment method"""
        try:
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79123456789",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 1000.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG", 
                        "quantity": 3,
                        "weight": 8.0,
                        "price_per_kg": 80.0,
                        "total_amount": 1920.0
                    }
                ],
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ cash_on_delivery",
                "route": "moscow_to_tajikistan",
                "warehouse_id": self.warehouse_id,
                "payment_method": "cash_on_delivery",  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢
                "delivery_method": "pickup"
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data
            )
            
            if response.status_code == 200:
                data = response.json()
                # Check different possible response structures
                self.test_cargo_id = data.get("cargo_id") or data.get("id")
                self.test_cargo_number = data.get("cargo_number") or data.get("number")
                
                # Debug: print the actual response structure
                print(f"    üîç Response data: {json.dumps(data, indent=2)}")
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å cash_on_delivery",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {self.test_cargo_number} (ID: {self.test_cargo_id}). –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: cash_on_delivery. –ì—Ä—É–∑—ã: 2 —Ç–∏–ø–∞ (2+3=5 –µ–¥–∏–Ω–∏—Ü)"
                )
                return True
            else:
                error_text = response.text
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å cash_on_delivery",
                    False,
                    error=f"HTTP {response.status_code}: {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å cash_on_delivery", False, error=str(e))
            return False

    def test_qr_code_format_generation(self):
        """Test QR code generation with proper format (leading zeros)"""
        if not self.test_cargo_id:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤",
                False,
                error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
            
        try:
            # Get placement status to check individual units format
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                
                # individual_units are nested inside cargo_types
                all_individual_units = []
                cargo_types = data.get("cargo_types", [])
                
                for cargo_type in cargo_types:
                    individual_units = cargo_type.get("individual_units", [])
                    all_individual_units.extend(individual_units)
                
                if all_individual_units:
                    # Check format of individual numbers
                    expected_formats = []
                    actual_formats = []
                    
                    for unit in all_individual_units:
                        individual_number = unit.get("individual_number", "")
                        actual_formats.append(individual_number)
                        
                        # Expected format: CARGO_NUMBER/TYPE_INDEX/UNIT_INDEX with leading zeros
                        # Example: 25082026/01/01, 25082026/01/02, 25082026/02/01, etc.
                        parts = individual_number.split("/")
                        if len(parts) == 3:
                            cargo_num, type_idx, unit_idx = parts
                            expected_formats.append(f"{cargo_num}/{type_idx.zfill(2)}/{unit_idx.zfill(2)}")
                    
                    # Check if all formats have leading zeros
                    correct_format_count = 0
                    for actual in actual_formats:
                        parts = actual.split("/")
                        if len(parts) == 3:
                            cargo_num, type_idx, unit_idx = parts
                            # Check if type_idx and unit_idx have leading zeros (2 digits)
                            if len(type_idx) == 2 and len(unit_idx) == 2:
                                correct_format_count += 1
                    
                    success = correct_format_count == len(actual_formats)
                    
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤",
                        success,
                        f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(actual_formats)} QR –∫–æ–¥–æ–≤. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {correct_format_count}/{len(actual_formats)}. –ü—Ä–∏–º–µ—Ä—ã: {actual_formats[:3]}"
                    )
                    return success
                else:
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤",
                        False,
                        error="–ù–µ—Ç individual_units –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞"
                    )
                    return False
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤", False, error=str(e))
            return False

    def test_qr_code_placement(self):
        """Test placing a QR code with format like 25082026/01/02"""
        if not self.test_cargo_id:
            self.log_test(
                "–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                False,
                error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
            
        try:
            # Get placement status to find an individual unit to place
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                individual_units = data.get("individual_units", [])
                
                # Find first unplaced unit
                target_unit = None
                for unit in individual_units:
                    if not unit.get("is_placed", False):
                        target_unit = unit
                        break
                
                if target_unit:
                    individual_number = target_unit.get("individual_number")
                    
                    # Test placement
                    placement_data = {
                        "individual_number": individual_number,
                        "block_number": 1,
                        "shelf_number": 1,
                        "cell_number": 1
                    }
                    
                    place_response = self.session.post(
                        f"{BACKEND_URL}/operator/cargo/place-individual",
                        json=placement_data
                    )
                    
                    if place_response.status_code == 200:
                        place_data = place_response.json()
                        
                        self.log_test(
                            "–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                            True,
                            f"–ï–¥–∏–Ω–∏—Ü–∞ {individual_number} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ {place_data.get('location_code', 'N/A')}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                            False,
                            error=f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: HTTP {place_response.status_code}: {place_response.text}"
                        )
                        return False
                else:
                    self.log_test(
                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                        False,
                        error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                    )
                    return False
            else:
                self.log_test(
                    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º", False, error=str(e))
            return False

    def test_backward_compatibility(self):
        """Test backward compatibility with existing cargo"""
        try:
            # Get available cargo for placement
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # Check if we can process both old and new format cargo
                old_format_count = 0
                new_format_count = 0
                
                for item in items:
                    cargo_items = item.get("cargo_items", [])
                    individual_items = item.get("individual_items", [])
                    
                    # Check if it's old format (no individual_items) or new format (has individual_items)
                    if individual_items:
                        new_format_count += 1
                    else:
                        old_format_count += 1
                
                total_cargo = len(items)
                compatibility_rate = ((old_format_count + new_format_count) / total_cargo * 100) if total_cargo > 0 else 0
                
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                    True,
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_cargo} –≥—Ä—É–∑–æ–≤. –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: {old_format_count}, –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {new_format_count}. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility_rate:.1f}%"
                )
                return True
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", False, error=str(e))
            return False

    def test_full_cycle_workflow(self):
        """Test full cycle: Creation ‚Üí QR Generation ‚Üí Placement ‚Üí Status Update"""
        if not self.test_cargo_id:
            self.log_test(
                "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã",
                False,
                error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"
            )
            return False
            
        try:
            # Step 1: Check initial status
            initial_response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if initial_response.status_code != 200:
                self.log_test(
                    "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: HTTP {initial_response.status_code}"
                )
                return False
            
            initial_data = initial_response.json()
            initial_placed = initial_data.get("total_placed", 0)
            total_quantity = initial_data.get("total_quantity", 0)
            
            # Step 2: Try to place another unit if available
            individual_units = initial_data.get("individual_units", [])
            unplaced_units = [unit for unit in individual_units if not unit.get("is_placed", False)]
            
            if unplaced_units:
                target_unit = unplaced_units[0]
                individual_number = target_unit.get("individual_number")
                
                # Place the unit
                placement_data = {
                    "individual_number": individual_number,
                    "block_number": 1,
                    "shelf_number": 2,
                    "cell_number": 1
                }
                
                place_response = self.session.post(
                    f"{BACKEND_URL}/operator/cargo/place-individual",
                    json=placement_data
                )
                
                if place_response.status_code == 200:
                    # Step 3: Check updated status
                    final_response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
                    
                    if final_response.status_code == 200:
                        final_data = final_response.json()
                        final_placed = final_data.get("total_placed", 0)
                        
                        # Verify status was updated
                        if final_placed > initial_placed:
                            self.log_test(
                                "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã",
                                True,
                                f"–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É—Å–ø–µ—à–µ–Ω: –°–æ–∑–¥–∞–Ω–∏–µ ‚úÖ ‚Üí QR –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚úÖ ‚Üí –†–∞–∑–º–µ—â–µ–Ω–∏–µ ‚úÖ ‚Üí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ ‚úÖ. –†–∞–∑–º–µ—â–µ–Ω–æ: {initial_placed} ‚Üí {final_placed} –∏–∑ {total_quantity}"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã",
                                False,
                                error=f"–°—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {initial_placed} ‚Üí {final_placed}"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã",
                            False,
                            error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: HTTP {final_response.status_code}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã",
                        False,
                        error=f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ: HTTP {place_response.status_code}"
                    )
                    return False
            else:
                # All units already placed, just verify the cycle components work
                self.log_test(
                    "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã",
                    True,
                    f"–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω: –°–æ–∑–¥–∞–Ω–∏–µ ‚úÖ ‚Üí QR –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚úÖ ‚Üí –í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã ({initial_placed}/{total_quantity}) ‚úÖ"
                )
                return True
                
        except Exception as e:
            self.log_test("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã", False, error=str(e))
            return False

    def test_deferred_payment_method(self):
        """Test creating cargo with deferred payment method"""
        try:
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å 2",
                "sender_phone": "+79123456790",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å 2",
                "recipient_phone": "+79987654322",
                "recipient_address": "–≥. –•—É–¥–∂–∞–Ω–¥, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥–æ–º 25",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è deferred",
                        "quantity": 1,
                        "weight": 3.0,
                        "price_per_kg": 50.0,
                        "total_amount": 150.0
                    }
                ],
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ deferred payment",
                "route": "moscow_to_tajikistan",
                "warehouse_id": self.warehouse_id,
                "payment_method": "credit",  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ (deferred = credit in backend)
                "debt_due_date": "2025-02-15",
                "delivery_method": "pickup"
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("cargo_id")
                cargo_number = data.get("cargo_number")
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å deferred payment",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id}). –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: credit (–≤ –¥–æ–ª–≥). –î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: 2025-02-15"
                )
                return True
            else:
                error_text = response.text
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å deferred payment",
                    False,
                    error=f"HTTP {response.status_code}: {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å deferred payment", False, error=str(e))
            return False

    def run_all_tests(self):
        """Run all final fixes tests"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô - TAJLINE.TJ")
        print("=" * 80)
        print()
        
        # Authentication
        if not self.authenticate_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # Test 1: Cash on delivery payment method
        print("üîç –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å cash_on_delivery")
        self.test_create_cargo_with_cash_on_delivery()
        
        # Test 2: QR code format with leading zeros
        print("üîç –¢–ï–°–¢ 2: –§–æ—Ä–º–∞—Ç QR –∫–æ–¥–æ–≤ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏")
        self.test_qr_code_format_generation()
        
        # Test 3: QR code placement
        print("üîç –¢–ï–°–¢ 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞")
        self.test_qr_code_placement()
        
        # Test 4: Backward compatibility
        print("üîç –¢–ï–°–¢ 4: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        self.test_backward_compatibility()
        
        # Test 5: Full cycle workflow
        print("üîç –¢–ï–°–¢ 5: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã")
        self.test_full_cycle_workflow()
        
        # Test 6: Deferred payment method
        print("üîç –¢–ï–°–¢ 6: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å deferred payment")
        self.test_deferred_payment_method()
        
        # Summary
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        passed_tests = sum(1 for result in self.test_results if result["success"])
        total_tests = len(self.test_results)
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        # Detailed results
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    üìã {result['details']}")
            if result["error"]:
                print(f"    ‚ùå {result['error']}")
        
        print("\n" + "=" * 80)
        
        # Final verdict
        critical_tests = [
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å cash_on_delivery",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤", 
            "–†–∞–∑–º–µ—â–µ–Ω–∏–µ QR –∫–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º",
            "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"
        ]
        
        critical_passed = sum(1 for result in self.test_results 
                            if result["test"] in critical_tests and result["success"])
        
        if critical_passed == len(critical_tests):
            print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ –ó–∞—è–≤–∫–∏ —Å cash_on_delivery —Å–æ–∑–¥–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            print("‚úÖ QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏")
            print("‚úÖ QR –∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è")
            print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
        else:
            print(f"‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï: {critical_passed}/{len(critical_tests)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        return success_rate >= 80

if __name__ == "__main__":
    tester = FinalFixesTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)