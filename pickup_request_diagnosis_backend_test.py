#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ":
1) –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ
2) –ù–û –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞ –ó–∞–±–æ—Ä" –æ—Å—Ç–∞—é—Ç—Å—è
3) –≠—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–º–µ—é—Ç –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ 000000/00
4) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–∞ –º–µ–Ω—è–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ

–¶–ï–õ–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2) –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ GET /api/operator/pickup-requests
3) –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä - –Ω–∞–π—Ç–∏ —Å–≤—è–∑—å —Å –≥—Ä—É–∑–∞–º–∏ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
4) –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ DELETE /api/operator/cargo/bulk-remove-from-placement
5) –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å –¥–∞–Ω–Ω—ã–º–∏
6) –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
7) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-tracker-28.preview.emergentagent.com/api"

def log_test_step(step_name, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"\n[{timestamp}] üîç {step_name}")
    if details:
        print(f"   {details}")

def log_success(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print(f"   ‚úÖ {message}")

def log_error(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    print(f"   ‚ùå {message}")

def log_warning(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    print(f"   ‚ö†Ô∏è {message}")

def log_info(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print(f"   ‚ÑπÔ∏è {message}")

def authorize_warehouse_operator():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    log_test_step("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê", "+79777888999/warehouse123")
    
    try:
        response = requests.post(f"{BACKEND_URL}/auth/login", json={
            "phone": "+79777888999",
            "password": "warehouse123"
        })
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            user_info = data.get("user", {})
            
            log_success(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')})")
            log_info(f"–†–æ–ª—å: {user_info.get('role', 'Unknown')}")
            
            return token
        else:
            log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

def get_pickup_requests_before_deletion(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –î–û —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
    log_test_step("–ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –î–û –£–î–ê–õ–ï–ù–ò–Ø", "GET /api/operator/pickup-requests")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BACKEND_URL}/operator/pickup-requests", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            pickup_requests = data.get("pickup_requests", [])
            total_count = data.get("total_count", 0)
            
            log_success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(pickup_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä (–≤—Å–µ–≥–æ: {total_count})")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–æ–∫
            if pickup_requests:
                sample_request = pickup_requests[0]
                log_info("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä:")
                for key, value in sample_request.items():
                    if isinstance(value, str) and len(value) > 50:
                        value = value[:50] + "..."
                    log_info(f"  {key}: {value}")
                
                # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00
                zero_requests = [req for req in pickup_requests if req.get("request_number") == "000000/00"]
                if zero_requests:
                    log_warning(f"–ù–ê–ô–î–ï–ù–û {len(zero_requests)} –∑–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –î–û —É–¥–∞–ª–µ–Ω–∏—è!")
                    for req in zero_requests[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        log_info(f"  –ó–∞—è–≤–∫–∞ 000000/00: cargo_name='{req.get('cargo_name', 'N/A')}', sender='{req.get('sender_full_name', 'N/A')}'")
                else:
                    log_info("–ó–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –î–û —É–¥–∞–ª–µ–Ω–∏—è")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏ —Å –≥—Ä—É–∑–∞–º–∏
                cargo_numbers = [req.get("cargo_number") for req in pickup_requests if req.get("cargo_number")]
                cargo_ids = [req.get("cargo_id") for req in pickup_requests if req.get("cargo_id")]
                
                log_info(f"–ù–∞–π–¥–µ–Ω–æ {len(cargo_numbers)} –∑–∞—è–≤–æ–∫ —Å cargo_number")
                log_info(f"–ù–∞–π–¥–µ–Ω–æ {len(cargo_ids)} –∑–∞—è–≤–æ–∫ —Å cargo_id")
                
                if cargo_numbers:
                    log_info(f"–ü—Ä–∏–º–µ—Ä—ã cargo_number: {cargo_numbers[:5]}")
                if cargo_ids:
                    log_info(f"–ü—Ä–∏–º–µ—Ä—ã cargo_id: {cargo_ids[:3]}")
            
            return pickup_requests
        else:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {response.status_code} - {response.text}")
            return []
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {str(e)}")
        return []

def get_available_cargo_for_placement(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    log_test_step("–ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –ì–†–£–ó–û–í –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø", "GET /api/operator/cargo/available-for-placement")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            cargo_items = data.get("items", [])
            
            log_success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(cargo_items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            
            if cargo_items:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≥—Ä—É–∑–æ–≤
                for i, cargo in enumerate(cargo_items[:5]):
                    log_info(f"  –ì—Ä—É–∑ {i+1}: {cargo.get('cargo_number', 'N/A')} - {cargo.get('sender_full_name', 'N/A')} ‚Üí {cargo.get('recipient_full_name', 'N/A')}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥—Ä—É–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                return cargo_items[:3]
            else:
                log_warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                return []
                
        else:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return []
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}")
        return []

def perform_bulk_cargo_deletion(token, cargo_items):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    if not cargo_items:
        log_warning("–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return False
        
    cargo_ids = [cargo.get("id") for cargo in cargo_items if cargo.get("id")]
    cargo_numbers = [cargo.get("cargo_number") for cargo in cargo_items if cargo.get("cargo_number")]
    
    log_test_step("–ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–û–í –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø", f"DELETE /api/operator/cargo/bulk-remove-from-placement")
    log_info(f"–£–¥–∞–ª—è–µ–º {len(cargo_ids)} –≥—Ä—É–∑–æ–≤: {cargo_numbers}")
    
    try:
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        payload = {"cargo_ids": cargo_ids}
        
        response = requests.delete(f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement", 
                                 headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            deleted_count = data.get("deleted_count", 0)
            total_requested = data.get("total_requested", 0)
            deleted_cargo_numbers = data.get("deleted_cargo_numbers", [])
            
            log_success(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} –≥—Ä—É–∑–æ–≤")
            log_info(f"–£–¥–∞–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤: {deleted_cargo_numbers}")
            
            return True
        else:
            log_error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        return False

def get_pickup_requests_after_deletion(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
    log_test_step("–ü–û–õ–£–ß–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø", "GET /api/operator/pickup-requests")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BACKEND_URL}/operator/pickup-requests", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            pickup_requests = data.get("pickup_requests", [])
            total_count = data.get("total_count", 0)
            
            log_success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(pickup_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ–≥–æ: {total_count})")
            
            # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00
            zero_requests = [req for req in pickup_requests if req.get("request_number") == "000000/00"]
            if zero_requests:
                log_warning(f"üö® –ù–ê–ô–î–ï–ù–û {len(zero_requests)} –∑–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è!")
                
                log_test_step("–ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–û–ö –° –ù–û–ú–ï–†–û–ú 000000/00", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                
                for i, req in enumerate(zero_requests[:5]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5
                    log_info(f"–ó–∞—è–≤–∫–∞ {i+1} —Å –Ω–æ–º–µ—Ä–æ–º 000000/00:")
                    log_info(f"  cargo_name: '{req.get('cargo_name', 'N/A')}'")
                    log_info(f"  cargo_number: '{req.get('cargo_number', 'N/A')}'")
                    log_info(f"  sender_full_name: '{req.get('sender_full_name', 'N/A')}'")
                    log_info(f"  recipient_full_name: '{req.get('recipient_full_name', 'N/A')}'")
                    log_info(f"  status: '{req.get('status', 'N/A')}'")
                    log_info(f"  cargo_id: '{req.get('cargo_id', 'N/A')}'")
                    log_info(f"  pickup_request_id: '{req.get('pickup_request_id', 'N/A')}'")
                    log_info(f"  created_at: '{req.get('created_at', 'N/A')}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
                    if req.get("cargo_id"):
                        log_info(f"  ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å cargo_id: {req.get('cargo_id')}")
                    if req.get("cargo_number"):
                        log_info(f"  ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç cargo_number: {req.get('cargo_number')}")
                    
                    print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                    
            else:
                log_success("–ó–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
            
            return pickup_requests
        else:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return []
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        return []

def analyze_pickup_request_structure(pickup_requests_before, pickup_requests_after):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
    log_test_step("–ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ó–ê–Ø–í–ö–ê–• –ù–ê –ó–ê–ë–û–†", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ –∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
    
    before_count = len(pickup_requests_before)
    after_count = len(pickup_requests_after)
    
    log_info(f"–ó–∞—è–≤–æ–∫ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {before_count}")
    log_info(f"–ó–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {after_count}")
    log_info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {after_count - before_count}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00
    zero_before = [req for req in pickup_requests_before if req.get("request_number") == "000000/00"]
    zero_after = [req for req in pickup_requests_after if req.get("request_number") == "000000/00"]
    
    log_info(f"–ó–∞—è–≤–æ–∫ 000000/00 –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {len(zero_before)}")
    log_info(f"–ó–∞—è–≤–æ–∫ 000000/00 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {len(zero_after)}")
    
    if len(zero_after) > len(zero_before):
        log_warning(f"üö® –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ 000000/00 –£–í–ï–õ–ò–ß–ò–õ–û–°–¨ –Ω–∞ {len(zero_after) - len(zero_before)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è cargo_name, cargo_number, sender_full_name
    if zero_after:
        log_test_step("–ê–ù–ê–õ–ò–ó –ü–û–õ–ï–ô –í –ó–ê–Ø–í–ö–ê–• 000000/00", "–ü—Ä–æ–≤–µ—Ä–∫–∞ cargo_name, cargo_number, sender_full_name")
        
        for i, req in enumerate(zero_after[:3]):
            log_info(f"–ó–∞—è–≤–∫–∞ 000000/00 #{i+1}:")
            
            cargo_name = req.get('cargo_name', '')
            cargo_number = req.get('cargo_number', '')
            sender_name = req.get('sender_full_name', '')
            
            if not cargo_name or cargo_name == 'null' or cargo_name == '':
                log_warning(f"  cargo_name –ø—É—Å—Ç–æ–µ –∏–ª–∏ null: '{cargo_name}'")
            else:
                log_info(f"  cargo_name: '{cargo_name}'")
                
            if not cargo_number or cargo_number == 'null' or cargo_number == '':
                log_warning(f"  cargo_number –ø—É—Å—Ç–æ–µ –∏–ª–∏ null: '{cargo_number}'")
            else:
                log_info(f"  cargo_number: '{cargo_number}'")
                
            if not sender_name or sender_name == 'null' or sender_name == '':
                log_warning(f"  sender_full_name –ø—É—Å—Ç–æ–µ –∏–ª–∏ null: '{sender_name}'")
            else:
                log_info(f"  sender_full_name: '{sender_name}'")

def check_admin_cargo_requests(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API"""
    log_test_step("–ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó–´ –ß–ï–†–ï–ó –ê–î–ú–ò–ù–°–ö–ò–ô API", "GET /api/admin/cargo-requests")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BACKEND_URL}/admin/cargo-requests", headers=headers)
        
        if response.status_code == 200:
            cargo_requests = response.json()
            log_success(f"–ù–∞–π–¥–µ–Ω–æ {len(cargo_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã")
            
            if cargo_requests:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–æ–∫
                sample_request = cargo_requests[0]
                log_info("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑:")
                for key, value in sample_request.items():
                    if isinstance(value, str) and len(value) > 50:
                        value = value[:50] + "..."
                    log_info(f"  {key}: {value}")
                
                # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00
                zero_requests = [req for req in cargo_requests if req.get("request_number") == "000000/00"]
                if zero_requests:
                    log_warning(f"–ù–ê–ô–î–ï–ù–û {len(zero_requests)} –∑–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00!")
                    for req in zero_requests[:3]:
                        log_info(f"  –ó–∞—è–≤–∫–∞ 000000/00: cargo_name='{req.get('cargo_name', 'N/A')}', sender='{req.get('sender_full_name', 'N/A')}'")
                else:
                    log_info("–ó–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ admin/cargo-requests")
                    
            return cargo_requests
        else:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã: {response.status_code} - {response.text}")
            return []
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã: {str(e)}")
        return []

def check_warehouse_notifications(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞"""
    log_test_step("–ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê", "GET /api/operator/warehouse-notifications")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BACKEND_URL}/operator/warehouse-notifications", headers=headers)
        
        if response.status_code == 200:
            notifications = response.json()
            log_success(f"–ù–∞–π–¥–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞")
            
            if notifications:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                sample_notification = notifications[0]
                log_info("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞:")
                for key, value in sample_notification.items():
                    if isinstance(value, str) and len(value) > 50:
                        value = value[:50] + "..."
                    log_info(f"  {key}: {value}")
                
                # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å pickup_request_id
                pickup_notifications = [notif for notif in notifications if notif.get("pickup_request_id")]
                log_info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id: {len(pickup_notifications)}")
                
                # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º 000000/00
                zero_notifications = [notif for notif in notifications if notif.get("request_number") == "000000/00"]
                if zero_notifications:
                    log_warning(f"–ù–ê–ô–î–ï–ù–û {len(zero_notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º 000000/00!")
                    for notif in zero_notifications[:3]:
                        log_info(f"  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 000000/00: status='{notif.get('status', 'N/A')}', pickup_request_id='{notif.get('pickup_request_id', 'N/A')}'")
                else:
                    log_info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            return notifications
        else:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞: {response.status_code} - {response.text}")
            return []
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞: {str(e)}")
        return []

def create_test_pickup_request(token):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    log_test_step("–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–†", "–î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
    
    try:
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä—É–∑
        cargo_request_data = {
            "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            "recipient_phone": "+992123456789",
            "recipient_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
            "pickup_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞",
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            "weight": 5.0,
            "declared_value": 1000.0,
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä",
            "route": "moscow_to_tajikistan"
        }
        
        response = requests.post(f"{BACKEND_URL}/cargo-requests", headers=headers, json=cargo_request_data)
        
        if response.status_code == 201:
            request_data = response.json()
            log_success(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {request_data.get('request_number', 'N/A')}")
            return request_data
        else:
            log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {str(e)}")
        return None

def check_cargo_pickup_connection(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≥—Ä—É–∑–∞–º–∏ –∏ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä"""
    log_test_step("–ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ì–†–£–ó–ê–ú–ò –ò –ó–ê–Ø–í–ö–ê–ú–ò –ù–ê –ó–ê–ë–û–†", "–ü–æ–∏—Å–∫ —Å–≤—è–∑—É—é—â–∏—Ö –ø–æ–ª–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API
    cargo_requests = check_admin_cargo_requests(token)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
    warehouse_notifications = check_warehouse_notifications(token)
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
    test_request = create_test_pickup_request(token)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
        headers = {"Authorization": f"Bearer {token}"}
        pickup_response = requests.get(f"{BACKEND_URL}/operator/pickup-requests", headers=headers)
        
        if pickup_response.status_code != 200:
            log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∏")
            return
            
        pickup_data = pickup_response.json()
        pickup_requests = pickup_data.get("pickup_requests", [])
        
        if not pickup_requests:
            log_warning("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∏")
            return
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è —Å–≤—è–∑–∏
        cargo_ids_in_requests = set()
        cargo_numbers_in_requests = set()
        pickup_request_ids = set()
        
        for req in pickup_requests:
            if req.get("cargo_id"):
                cargo_ids_in_requests.add(req.get("cargo_id"))
            if req.get("cargo_number"):
                cargo_numbers_in_requests.add(req.get("cargo_number"))
            if req.get("pickup_request_id"):
                pickup_request_ids.add(req.get("pickup_request_id"))
        
        log_info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö cargo_id –≤ –∑–∞—è–≤–∫–∞—Ö: {len(cargo_ids_in_requests)}")
        log_info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö cargo_number –≤ –∑–∞—è–≤–∫–∞—Ö: {len(cargo_numbers_in_requests)}")
        log_info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö pickup_request_id: {len(pickup_request_ids)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ cargo_id –∏–ª–∏ –¥—Ä—É–≥–∞—è —Å–≤—è–∑—å
        sample_request = pickup_requests[0]
        log_info("–ü–æ–ª—è –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –∑–∞–±–æ—Ä (–ø–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞):")
        for key in sorted(sample_request.keys()):
            value = sample_request[key]
            if isinstance(value, str) and len(value) > 30:
                value = value[:30] + "..."
            log_info(f"  {key}: {value}")
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∏: {str(e)}")

def authorize_admin():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    log_test_step("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê", "+79999888777/admin123")
    
    try:
        response = requests.post(f"{BACKEND_URL}/auth/login", json={
            "phone": "+79999888777",
            "password": "admin123"
        })
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            user_info = data.get("user", {})
            
            log_success(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')})")
            log_info(f"–†–æ–ª—å: {user_info.get('role', 'Unknown')}")
            
            return token
        else:
            log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("=" * 80)
    print("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
    print("   –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ")
    print("=" * 80)
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    admin_token = authorize_admin()
    if not admin_token:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    
    # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    operator_token = authorize_warehouse_operator()
    if not operator_token:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä - –ø–æ–∏—Å–∫ —Å–≤—è–∑–∏ —Å –≥—Ä—É–∑–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω)
    check_cargo_pickup_connection(admin_token)
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –î–û —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ç–æ–∫–µ–Ω)
    pickup_requests_before = get_pickup_requests_before_deletion(operator_token)
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    cargo_items = get_available_cargo_for_placement(operator_token)
    
    if not cargo_items:
        log_warning("–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        log_test_step("–ü–û–ü–´–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•", "–î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
        test_request = create_test_pickup_request(admin_token)
        
        if test_request:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
            pickup_requests_before = get_pickup_requests_before_deletion(operator_token)
        
        return
    
    # 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    deletion_success = perform_bulk_cargo_deletion(operator_token, cargo_items)
    
    if not deletion_success:
        log_error("–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        return
    
    # 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è
    pickup_requests_after = get_pickup_requests_after_deletion(operator_token)
    
    # 8. –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    analyze_pickup_request_structure(pickup_requests_before, pickup_requests_after)
    
    # 9. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    log_test_step("–ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –î–ê–ù–ù–´–• –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø", "–ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    check_admin_cargo_requests(admin_token)
    check_warehouse_notifications(admin_token)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    print("\n" + "=" * 80)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 80)
    
    zero_before = len([req for req in pickup_requests_before if req.get("request_number") == "000000/00"])
    zero_after = len([req for req in pickup_requests_after if req.get("request_number") == "000000/00"])
    
    if zero_after > zero_before:
        print("üö® –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
        print(f"   - –ó–∞—è–≤–æ–∫ 000000/00 –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {zero_before}")
        print(f"   - –ó–∞—è–≤–æ–∫ 000000/00 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {zero_after}")
        print(f"   - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: +{zero_after - zero_before}")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π cargo_name, cargo_number, sender_full_name")
        print("   3. –î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –≥—Ä—É–∑–æ–≤ –∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
    else:
        print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê:")
        print(f"   - –ó–∞—è–≤–æ–∫ 000000/00 –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {zero_before}")
        print(f"   - –ó–∞—è–≤–æ–∫ 000000/00 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {zero_after}")
        print("   - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("=" * 80)

if __name__ == "__main__":
    main()