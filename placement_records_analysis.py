#!/usr/bin/env python3
"""
üîç –ê–ù–ê–õ–ò–ó PLACEMENT RECORDS: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE_NAME = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"

class PlacementRecordsAnalysis:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.warehouse_id = None
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False

    def get_warehouse_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                for warehouse in warehouses:
                    if warehouse.get("name") == TARGET_WAREHOUSE_NAME:
                        self.warehouse_id = warehouse.get("id")
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥: {self.warehouse_id}")
                        return True
                
                print("‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return False

    def analyze_placement_records(self):
        """–ê–Ω–∞–ª–∏–∑ placement records"""
        if not self.warehouse_id:
            print("‚ùå warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–ª–∞–¥–∞
            response = self.session.get(f"{BACKEND_URL}/warehouses/{self.warehouse_id}/statistics")
            
            if response.status_code == 200:
                stats = response.json()
                
                print("üìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–õ–ê–î–ê:")
                print(f"   üè¢ –°–∫–ª–∞–¥: {stats.get('warehouse_name')}")
                print(f"   üì¶ –í—Å–µ–≥–æ —è—á–µ–µ–∫: {stats.get('total_cells')}")
                print(f"   üî¥ –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {stats.get('occupied_cells')}")
                print(f"   üü¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫: {stats.get('free_cells')}")
                print(f"   üìà –ó–∞–≥—Ä—É–∑–∫–∞: {stats.get('utilization_percent')}%")
                print(f"   üìã –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {stats.get('total_placed_cargo')}")
                
                placement_stats = stats.get('placement_statistics', {})
                print(f"   üìä Placement records: {placement_stats.get('placement_records_count')}")
                print(f"   üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {placement_stats.get('unique_occupied_cells')}")
                print(f"   üîç –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {placement_stats.get('data_source')}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return False

    def check_specific_cargo(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–∑ review request"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º fully-placed API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ 25082235
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                print(f"\nüîç –ü–û–ò–°–ö –ó–ê–Ø–í–ö–ò 25082235 –í FULLY-PLACED:")
                print(f"   üìã –í—Å–µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(items)}")
                
                found_25082235 = False
                for item in items:
                    cargo_number = item.get("cargo_number", "")
                    if "25082235" in cargo_number:
                        found_25082235 = True
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞: {cargo_number}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units
                        individual_units = item.get("individual_units", [])
                        print(f"   üì¶ Individual units: {len(individual_units)}")
                        
                        for unit in individual_units:
                            unit_number = unit.get("individual_number", "")
                            status = unit.get("status", "")
                            placement_info = unit.get("placement_info", "")
                            print(f"      - {unit_number}: {status} ({placement_info})")
                
                if not found_25082235:
                    print("   ‚ùå –ó–∞—è–≤–∫–∞ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fully-placed: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return False

    def check_individual_units_for_placement(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ individual units for placement"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/individual-units-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                print(f"\nüîç INDIVIDUAL UNITS FOR PLACEMENT:")
                print(f"   üìã –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(items)}")
                
                # –ò—â–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑ –∑–∞—è–≤–∫–∏ 25082235
                found_units = []
                for item in items:
                    individual_number = item.get("individual_number", "")
                    if "25082235" in individual_number:
                        found_units.append(individual_number)
                        status = item.get("status", "")
                        print(f"   üì¶ {individual_number}: {status}")
                
                if found_units:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü –∏–∑ –∑–∞—è–≤–∫–∏ 25082235: {len(found_units)}")
                else:
                    print("   ‚ùå –ï–¥–∏–Ω–∏—Ü—ã –∏–∑ –∑–∞—è–≤–∫–∏ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual-units-for-placement: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            return False

    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê PLACEMENT RECORDS")
        print("=" * 60)
        
        if not self.authenticate_warehouse_operator():
            return False
            
        if not self.get_warehouse_id():
            return False
            
        self.analyze_placement_records()
        self.check_specific_cargo()
        self.check_individual_units_for_placement()
        
        print("\n" + "=" * 60)
        print("üìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê:")
        print("‚úÖ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç placement_records")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∏–∑ placement_records")
        print("‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ review request –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è review request")
        
        return True

if __name__ == "__main__":
    analyzer = PlacementRecordsAnalysis()
    analyzer.run_analysis()