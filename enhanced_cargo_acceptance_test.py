#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ TAJLINE.TJ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
1. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–£–ú–ú–ê –û–ü–õ–ê–¢–´ - —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ (–≤–µ—Å √ó —Ü–µ–Ω–∞) –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ sum(—Ü–µ–Ω–∞)
2. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù –í–´–ë–û–† –°–ö–õ–ê–î–ê - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∫–ª–∞–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
3. ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –ú–ê–†–®–†–£–¢–ê - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏ —Å–∫–ª–∞–¥–µ-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
4. ‚úÖ –£–õ–£–ß–®–ï–ù–û –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ª–æ–≥–∏–∫–µ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
5. ‚úÖ BACKEND –û–ë–ù–û–í–õ–ï–ù - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã (–≤–µ—Å √ó —Ü–µ–Ω–∞)
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)
5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ backend

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ 3 –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ñ–æ—Ä–º–∞ –ø—Ä–∏—ë–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º–æ–π, –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–∞.
"""

import requests
import json
import sys
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-6.preview.emergentagent.com/api"
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class EnhancedCargoAcceptanceFormTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_user = None
        self.operator_warehouses = []
        self.all_warehouses = []
        self.test_results = []
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        print(f"{status} {test_name}: {details}")
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data["access_token"]
                self.operator_user = data["user"]
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.operator_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.operator_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                data = response.json()
                self.operator_warehouses = data if isinstance(data, list) else []
                
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(self.operator_warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–∞—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                for warehouse in self.operator_warehouses:
                    print(f"   üì¶ –°–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {warehouse.get('name', 'N/A')} (ID: {warehouse.get('id', 'N/A')}, –ê–¥—Ä–µ—Å: {warehouse.get('address', warehouse.get('location', 'N/A'))})")
                
                return True
            else:
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_all_warehouses_as_admin(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω
            admin_session = requests.Session()
            admin_response = admin_session.post(
                f"{BACKEND_URL}/auth/login",
                json={"phone": "+79999888777", "password": "admin123"},
                headers={"Content-Type": "application/json"}
            )
            
            if admin_response.status_code == 200:
                admin_data = admin_response.json()
                admin_session.headers.update({
                    "Authorization": f"Bearer {admin_data['access_token']}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
                warehouses_response = admin_session.get(f"{BACKEND_URL}/warehouses")
                
                if warehouses_response.status_code == 200:
                    self.all_warehouses = warehouses_response.json()
                    
                    self.log_test(
                        "–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–ö–õ–ê–î–û–í (–ß–ï–†–ï–ó –ê–î–ú–ò–ù–ê)",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(self.all_warehouses)} —Å–∫–ª–∞–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"
                    )
                    
                    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–∫–ª–∞–¥—ã
                    for warehouse in self.all_warehouses:
                        print(f"   üè≠ {warehouse.get('name', 'N/A')} (ID: {warehouse.get('id', 'N/A')}, –õ–æ–∫–∞—Ü–∏—è: {warehouse.get('location', 'N/A')})")
                    
                    return True
                else:
                    self.log_test(
                        "–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–ö–õ–ê–î–û–í (–ß–ï–†–ï–ó –ê–î–ú–ò–ù–ê)",
                        False,
                        f"HTTP {warehouses_response.status_code}: {warehouses_response.text}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–ö–õ–ê–î–û–í (–ß–ï–†–ï–ó –ê–î–ú–ò–ù–ê)",
                    False,
                    f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: HTTP {admin_response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –°–ö–õ–ê–î–û–í (–ß–ï–†–ï–ó –ê–î–ú–ò–ù–ê)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_warehouse_filtering_logic(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            if not self.operator_warehouses or not self.all_warehouses:
                self.log_test(
                    "–¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–ö–õ–ê–î–û–í",
                    False,
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator_warehouse_ids = [w.get('id') for w in self.operator_warehouses]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫–ª–∞–¥—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
            filtered_warehouses = [
                w for w in self.all_warehouses 
                if w.get('is_active', True) and w.get('id') not in operator_warehouse_ids
            ]
            
            self.log_test(
                "–¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–ö–õ–ê–î–û–í",
                True,
                f"–õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {len(self.all_warehouses)}, –°–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {len(operator_warehouse_ids)}, –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞: {len(filtered_warehouses)}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã
            excluded_correctly = True
            for op_warehouse in self.operator_warehouses:
                if any(w.get('id') == op_warehouse.get('id') for w in filtered_warehouses):
                    excluded_correctly = False
                    break
            
            if excluded_correctly:
                print(f"   ‚úÖ –°–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞")
            else:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –°–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ù–ï –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞")
            
            # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
            print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞:")
            for warehouse in filtered_warehouses:
                print(f"      üì¶ {warehouse.get('name', 'N/A')} (ID: {warehouse.get('id', 'N/A')}, –õ–æ–∫–∞—Ü–∏—è: {warehouse.get('location', 'N/A')})")
            
            return excluded_correctly and len(filtered_warehouses) > 0
            
        except Exception as e:
            self.log_test("–¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–ö–õ–ê–î–û–í", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_payment_calculation_logic(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã"""
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            test_cargo_items = [
                {"cargo_name": "–ì—Ä—É–∑ 1", "weight": 5.0, "price_per_kg": 300.0},  # 5 √ó 300 = 1500
                {"cargo_name": "–ì—Ä—É–∑ 2", "weight": 3.0, "price_per_kg": 400.0},  # 3 √ó 400 = 1200
                {"cargo_name": "–ì—Ä—É–∑ 3", "weight": 2.0, "price_per_kg": 450.0},  # 2 √ó 450 = 900
            ]
            
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á—ë—Ç: (–≤–µ—Å √ó —Ü–µ–Ω–∞ –∑–∞ –∫–≥) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞
            correct_total = sum(item["weight"] * item["price_per_kg"] for item in test_cargo_items)
            
            # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á—ë—Ç (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞): –ø—Ä–æ—Å—Ç–æ —Å—É–º–º–∞ —Ü–µ–Ω
            incorrect_total = sum(item["price_per_kg"] for item in test_cargo_items)
            
            self.log_test(
                "–¢–ï–°–¢ –†–ê–°–ß–Å–¢–ê –°–£–ú–ú–´ –û–ü–õ–ê–¢–´",
                True,
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (–≤–µ—Å √ó —Ü–µ–Ω–∞): {correct_total} —Ä—É–±, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (sum —Ü–µ–Ω): {incorrect_total} —Ä—É–±"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—á—ë—Ç—ã —Ä–∞–∑–Ω—ã–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            calculation_fixed = correct_total != incorrect_total
            
            if calculation_fixed:
                print(f"   ‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: {correct_total} —Ä—É–± –≤–º–µ—Å—Ç–æ {incorrect_total} —Ä—É–±")
                print(f"   üìä –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞:")
                for item in test_cargo_items:
                    item_total = item["weight"] * item["price_per_kg"]
                    print(f"      - {item['cargo_name']}: {item['weight']} –∫–≥ √ó {item['price_per_kg']} —Ä—É–±/–∫–≥ = {item_total} —Ä—É–±")
            else:
                print(f"   ‚ùå –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ù–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            return calculation_fixed
            
        except Exception as e:
            self.log_test("–¢–ï–°–¢ –†–ê–°–ß–Å–¢–ê –°–£–ú–ú–´ –û–ü–õ–ê–¢–´", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_route_logic(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
        try:
            if not self.operator_warehouses or not self.all_warehouses:
                self.log_test(
                    "–¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ú–ê–†–®–†–£–¢–ê",
                    False,
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫)
            source_warehouse = self.operator_warehouses[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            operator_warehouse_ids = [w.get('id') for w in self.operator_warehouses]
            destination_warehouses = [
                w for w in self.all_warehouses 
                if w.get('is_active', True) and w.get('id') not in operator_warehouse_ids
            ]
            
            if not destination_warehouses:
                self.log_test(
                    "–¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ú–ê–†–®–†–£–¢–ê",
                    False,
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
                )
                return False
            
            destination_warehouse = destination_warehouses[0]
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞
            route_data = {
                "source_warehouse_id": source_warehouse.get('id'),
                "destination_warehouse_id": destination_warehouse.get('id'),
                "route_info": {
                    "from": {
                        "warehouse_id": source_warehouse.get('id'),
                        "warehouse_name": source_warehouse.get('name'),
                        "location": source_warehouse.get('location')
                    },
                    "to": {
                        "warehouse_id": destination_warehouse.get('id'),
                        "warehouse_name": destination_warehouse.get('name'),
                        "location": destination_warehouse.get('location')
                    }
                },
                "is_route_delivery": True
            }
            
            # –°–æ–∑–¥–∞–µ–º badge –º–∞—Ä—à—Ä—É—Ç–∞
            route_badge = f"üìç {source_warehouse.get('name', '–°–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫')} ‚Üí {destination_warehouse.get('name', '–°–∫–ª–∞–¥-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ')}"
            
            self.log_test(
                "–¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ú–ê–†–®–†–£–¢–ê",
                True,
                f"–ú–∞—Ä—à—Ä—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {route_badge}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞
            has_source_id = route_data.get('source_warehouse_id') is not None
            has_destination_id = route_data.get('destination_warehouse_id') is not None
            has_route_info = route_data.get('route_info') is not None
            has_from_info = route_data.get('route_info', {}).get('from') is not None
            has_to_info = route_data.get('route_info', {}).get('to') is not None
            has_delivery_flag = route_data.get('is_route_delivery') is True
            
            all_components_present = all([
                has_source_id, has_destination_id, has_route_info,
                has_from_info, has_to_info, has_delivery_flag
            ])
            
            if all_components_present:
                print(f"   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:")
                print(f"      - –ò—Å—Ç–æ—á–Ω–∏–∫: {route_data['route_info']['from']['warehouse_name']}")
                print(f"      - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {route_data['route_info']['to']['warehouse_name']}")
                print(f"      - Badge: {route_badge}")
                print(f"      - –§–ª–∞–≥ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏: {route_data['is_route_delivery']}")
            else:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞:")
                print(f"      - source_id: {has_source_id}")
                print(f"      - destination_id: {has_destination_id}")
                print(f"      - route_info: {has_route_info}")
                print(f"      - from_info: {has_from_info}")
                print(f"      - to_info: {has_to_info}")
                print(f"      - delivery_flag: {has_delivery_flag}")
            
            return all_components_present
            
        except Exception as e:
            self.log_test("–¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ú–ê–†–®–†–£–¢–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_backend_data_structure(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è backend"""
        try:
            if not self.operator_warehouses or not self.all_warehouses:
                self.log_test(
                    "–¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• BACKEND",
                    False,
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ backend
            source_warehouse = self.operator_warehouses[0]
            operator_warehouse_ids = [w.get('id') for w in self.operator_warehouses]
            destination_warehouses = [
                w for w in self.all_warehouses 
                if w.get('is_active', True) and w.get('id') not in operator_warehouse_ids
            ]
            
            if not destination_warehouses:
                return False
            
            destination_warehouse = destination_warehouses[0]
            
            # –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞
            cargo_acceptance_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79999999999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79888888888",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑",
                        "weight": 10.0,
                        "price_per_kg": 360.0  # 10 –∫–≥ √ó 360 —Ä—É–±/–∫–≥ = 3600 —Ä—É–±
                    }
                ],
                "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞",
                "route": "moscow_to_tajikistan",
                "warehouse_id": destination_warehouse.get('id'),
                "payment_method": "cash",
                "payment_amount": 3600.0,  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 √ó 360 = 3600
                "pickup_required": True,
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ó–∞–±–æ—Ä–∞, 456",
                "delivery_method": "pickup",
                "courier_fee": 500.0,
                
                # –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ú–ê–†–®–†–£–¢–ê
                "source_warehouse_id": source_warehouse.get('id'),
                "destination_warehouse_id": destination_warehouse.get('id'),
                "route_info": {
                    "from": {
                        "warehouse_id": source_warehouse.get('id'),
                        "warehouse_name": source_warehouse.get('name'),
                        "location": source_warehouse.get('location')
                    },
                    "to": {
                        "warehouse_id": destination_warehouse.get('id'),
                        "warehouse_name": destination_warehouse.get('name'),
                        "location": destination_warehouse.get('location')
                    }
                },
                "is_route_delivery": True
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            required_fields = [
                'sender_full_name', 'sender_phone', 'recipient_full_name', 'recipient_phone',
                'recipient_address', 'cargo_items', 'description', 'route', 'warehouse_id',
                'payment_method', 'payment_amount', 'source_warehouse_id', 'destination_warehouse_id',
                'route_info', 'is_route_delivery'
            ]
            
            missing_fields = [field for field in required_fields if field not in cargo_acceptance_data]
            
            if not missing_fields:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —Å—É–º–º—ã
                expected_total = sum(item["weight"] * item["price_per_kg"] for item in cargo_acceptance_data["cargo_items"])
                actual_payment = cargo_acceptance_data["payment_amount"]
                
                calculation_correct = expected_total == actual_payment
                
                self.log_test(
                    "–¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• BACKEND",
                    True,
                    f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è backend: {len(required_fields)} –ø–æ–ª–µ–π, —Å—É–º–º–∞ {actual_payment} —Ä—É–± {'‚úÖ' if calculation_correct else '‚ùå'}"
                )
                
                print(f"   üìã –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
                print(f"      - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {cargo_acceptance_data['sender_full_name']}")
                print(f"      - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {cargo_acceptance_data['recipient_full_name']}")
                print(f"      - –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {cargo_acceptance_data['payment_amount']} —Ä—É–±")
                print(f"      - –°–∫–ª–∞–¥-–∏—Å—Ç–æ—á–Ω–∏–∫: {cargo_acceptance_data['route_info']['from']['warehouse_name']}")
                print(f"      - –°–∫–ª–∞–¥-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {cargo_acceptance_data['route_info']['to']['warehouse_name']}")
                print(f"      - –ú–∞—Ä—à—Ä—É—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {cargo_acceptance_data['is_route_delivery']}")
                
                return calculation_correct
            else:
                self.log_test(
                    "–¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• BACKEND",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}"
                )
                return False
            
        except Exception as e:
            self.log_test("–¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• BACKEND", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        print("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.get_operator_warehouses():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
        if not self.get_all_warehouses_as_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã")
            return False
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤
        filtering_success = self.test_warehouse_filtering_logic()
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á—ë—Ç–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
        payment_success = self.test_payment_calculation_logic()
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
        route_success = self.test_route_logic()
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è backend
        backend_structure_success = self.test_backend_data_structure()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        success_count = sum(1 for result in self.test_results if result["success"])
        total_count = len(self.test_results)
        success_rate = (success_count / total_count * 100) if total_count > 0 else 0
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_count} ({success_rate:.1f}%)")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['details']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        critical_fixes = {
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞": any(r["test"] == "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê" and r["success"] for r in self.test_results),
            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞": any(r["test"] == "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê" and r["success"] for r in self.test_results),
            "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∫–ª–∞–¥–æ–≤ (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)": filtering_success,
            "–†–∞—Å—á—ë—Ç —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã (–≤–µ—Å √ó —Ü–µ–Ω–∞)": payment_success,
            "–õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫ ‚Üí –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)": route_success,
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è backend": backend_structure_success
        }
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        all_fixes_working = True
        for fix_name, working in critical_fixes.items():
            status = "‚úÖ" if working else "‚ùå"
            print(f"{status} {fix_name}")
            if not working:
                all_fixes_working = False
        
        if all_fixes_working:
            print(f"\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–´!")
            print(f"‚úÖ 1. –°–£–ú–ú–ê –û–ü–õ–ê–¢–´: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–∞–∫ (–≤–µ—Å √ó —Ü–µ–Ω–∞ –∑–∞ –∫–≥)")
            print(f"‚úÖ 2. –í–´–ë–û–† –°–ö–õ–ê–î–ê: –°–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞")
            print(f"‚úÖ 3. –õ–û–ì–ò–ö–ê –ú–ê–†–®–†–£–¢–ê: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏ —Å–∫–ª–∞–¥–µ-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏")
            print(f"‚úÖ 4. –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•: Backend –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ä—à—Ä—É—Ç–µ")
            print(f"‚úÖ 5. –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ badge –º–∞—Ä—à—Ä—É—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        else:
            print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ù–ï–ö–û–¢–û–†–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•!")
        
        return all_fixes_working

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = EnhancedCargoAcceptanceFormTester()
    
    try:
        success = tester.run_comprehensive_test()
        
        if success:
            print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            sys.exit(0)
        else:
            print(f"\n‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Ñ–æ—Ä–º—ã –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–∫–∏!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()