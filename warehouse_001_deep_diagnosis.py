#!/usr/bin/env python3
"""
–ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ö–õ–ê–î–ê 001 - –ü–û–ò–°–ö –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
===============================================================================

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –ø–æ—á–µ–º—É API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
–ø—Ä–∏ —Ç–æ–º —á—Ç–æ statistics API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 3 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ placement_records –≤ —Å–∏—Å—Ç–µ–º–µ
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞ (–±–ª–æ–∫–∏, –ø–æ–ª–∫–∏, —è—á–µ–π–∫–∏)
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å individual_items —Å is_placed=true
4. –ù–∞–π—Ç–∏ –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö
5. –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—á–µ–º—É layout-with-cargo –Ω–µ –≤–∏–¥–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class DeepWarehouseDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.warehouse_001_id = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                self.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}", "ERROR")
                return False
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def find_warehouse_001(self):
        """–ù–∞–π—Ç–∏ —Å–∫–ª–∞–¥ 001"""
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            if response.status_code == 200:
                warehouses = response.json()
                for warehouse in warehouses:
                    if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                        self.warehouse_001_id = warehouse.get("id")
                        self.log(f"‚úÖ –°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω: {self.warehouse_001_id}")
                        return True
                return False
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞: {e}", "ERROR")
            return False
    
    def check_placement_records_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ API –¥–ª—è –ø–æ–∏—Å–∫–∞ placement records"""
        self.log("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–õ–ò–ß–ù–´–• API –î–õ–Ø –ü–û–ò–°–ö–ê PLACEMENT RECORDS:")
        self.log("=" * 70)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º individual-units-for-placement
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement")
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", []) if isinstance(data, dict) else data
                self.log(f"üìã individual-units-for-placement: {len(items)} –µ–¥–∏–Ω–∏—Ü")
                
                placed_count = 0
                for item in items[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5
                    individual_number = item.get("individual_number", "N/A")
                    is_placed = item.get("is_placed", False)
                    warehouse_id = item.get("warehouse_id", "N/A")
                    placement_info = item.get("placement_info", "N/A")
                    
                    if is_placed:
                        placed_count += 1
                        self.log(f"  ‚úÖ {individual_number}: —Ä–∞–∑–º–µ—â–µ–Ω –≤ {placement_info} (warehouse: {warehouse_id})")
                    else:
                        self.log(f"  ‚è≥ {individual_number}: –æ–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                self.log(f"üìä –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω–æ: {placed_count}")
            else:
                self.log(f"‚ùå individual-units-for-placement –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ individual-units-for-placement: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º available-for-placement
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", []) if isinstance(data, dict) else data
                self.log(f"üìã available-for-placement: {len(items)} –∑–∞—è–≤–æ–∫")
                
                total_placed = 0
                for item in items[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3
                    cargo_number = item.get("cargo_number", "N/A")
                    placed = item.get("total_placed", 0)
                    total_placed += placed
                    self.log(f"  üì¶ {cargo_number}: —Ä–∞–∑–º–µ—â–µ–Ω–æ {placed} –µ–¥–∏–Ω–∏—Ü")
                
                self.log(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {total_placed}")
            else:
                self.log(f"‚ùå available-for-placement –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ available-for-placement: {e}")
    
    def check_warehouse_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞"""
        self.log(f"\nüèóÔ∏è –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –°–ö–õ–ê–î–ê {self.warehouse_001_id}:")
        self.log("=" * 70)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º full-layout
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_001_id}/full-layout")
            if response.status_code == 200:
                data = response.json()
                blocks = data.get("blocks", [])
                self.log(f"üìã full-layout: {len(blocks)} –±–ª–æ–∫–æ–≤")
                
                total_cells = 0
                occupied_cells = 0
                
                for block in blocks[:2]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 2 –±–ª–æ–∫–∞
                    block_number = block.get("block_number", "N/A")
                    shelves = block.get("shelves", [])
                    self.log(f"  üèóÔ∏è –ë–ª–æ–∫ {block_number}: {len(shelves)} –ø–æ–ª–æ–∫")
                    
                    for shelf in shelves[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –ø–æ–ª–∫–∏
                        shelf_number = shelf.get("shelf_number", "N/A")
                        cells = shelf.get("cells", [])
                        total_cells += len(cells)
                        
                        occupied_in_shelf = sum(1 for cell in cells if cell.get("is_occupied", False))
                        occupied_cells += occupied_in_shelf
                        
                        if occupied_in_shelf > 0:
                            self.log(f"    üìö –ü–æ–ª–∫–∞ {shelf_number}: {len(cells)} —è—á–µ–µ–∫, {occupied_in_shelf} –∑–∞–Ω—è—Ç–æ")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
                            for cell in cells:
                                if cell.get("is_occupied", False):
                                    cell_number = cell.get("cell_number", "N/A")
                                    cargo_id = cell.get("cargo_id", "N/A")
                                    location_code = cell.get("location_code", "N/A")
                                    self.log(f"      ‚úÖ –Ø—á–µ–π–∫–∞ {cell_number} ({location_code}): –≥—Ä—É–∑ {cargo_id}")
                
                self.log(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {total_cells} —è—á–µ–µ–∫, {occupied_cells} –∑–∞–Ω—è—Ç–æ")
            else:
                self.log(f"‚ùå full-layout –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ full-layout: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º statistics
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_001_id}/statistics")
            if response.status_code == 200:
                stats = response.json()
                self.log(f"üìä statistics API:")
                self.log(f"  –í—Å–µ–≥–æ —è—á–µ–µ–∫: {stats.get('total_cells', 'N/A')}")
                self.log(f"  –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {stats.get('occupied_cells', 'N/A')}")
                self.log(f"  –°–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫: {stats.get('free_cells', 'N/A')}")
            else:
                self.log(f"‚ùå statistics –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ statistics: {e}")
    
    def check_placement_progress(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log(f"\nüìä –ü–†–û–í–ï–†–ö–ê –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
        self.log("=" * 70)
        
        try:
            response = self.session.get(f"{API_BASE}/operator/placement-progress")
            if response.status_code == 200:
                data = response.json()
                self.log(f"üìä placement-progress:")
                self.log(f"  –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {data.get('total_units', 'N/A')}")
                self.log(f"  –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {data.get('placed_units', 'N/A')}")
                self.log(f"  –û–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {data.get('pending_units', 'N/A')}")
                self.log(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data.get('progress_percentage', 'N/A')}%")
                self.log(f"  –¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {data.get('progress_text', 'N/A')}")
            else:
                self.log(f"‚ùå placement-progress –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ placement-progress: {e}")
    
    def debug_layout_with_cargo_response(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –æ—Ç–≤–µ—Ç–∞ layout-with-cargo"""
        self.log(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê layout-with-cargo:")
        self.log("=" * 70)
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_001_id}/layout-with-cargo")
            if response.status_code == 200:
                data = response.json()
                
                self.log(f"üìã –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
                self.log(f"  –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(data.keys())}")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                warehouse_info = data.get("warehouse_info", {})
                self.log(f"  warehouse_info –∫–ª—é—á–∏: {list(warehouse_info.keys())}")
                
                layout_structure = data.get("layout_structure", [])
                self.log(f"  layout_structure: {len(layout_structure)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                placement_records = data.get("placement_records", [])
                self.log(f"  placement_records: {len(placement_records)} –∑–∞–ø–∏—Å–µ–π")
                
                statistics = data.get("statistics", {})
                self.log(f"  statistics –∫–ª—é—á–∏: {list(statistics.keys())}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                if warehouse_info:
                    self.log(f"üìã warehouse_info —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
                    for key, value in warehouse_info.items():
                        self.log(f"    {key}: {value}")
                
                if statistics:
                    self.log(f"üìä statistics —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
                    for key, value in statistics.items():
                        self.log(f"    {key}: {value}")
                
                # –°—ã—Ä–æ–π JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                self.log(f"\nüìÑ –°—ã—Ä–æ–π JSON –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
                json_str = json.dumps(data, indent=2, ensure_ascii=False)
                self.log(json_str[:500] + "..." if len(json_str) > 500 else json_str)
                
            else:
                self.log(f"‚ùå layout-with-cargo –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ layout-with-cargo: {e}")
    
    def run_deep_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –≥–ª—É–±–æ–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ö–õ–ê–î–ê 001")
        self.log("=" * 80)
        
        if not self.authenticate():
            return False
        
        if not self.find_warehouse_001():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.check_placement_records_api()
        self.check_warehouse_structure()
        self.check_placement_progress()
        self.debug_layout_with_cargo_response()
        
        self.log("\nüéØ –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        return True

def main():
    diagnostic = DeepWarehouseDiagnostic()
    diagnostic.run_deep_diagnosis()

if __name__ == "__main__":
    main()