#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ

–¶–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–∫–ª–∞–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR –∫–æ–¥—ã —è—á–µ–µ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤,
—á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –º–æ–≥–ª–∞ —Ä–∞–∑–ª–∏—á–∞—Ç—å, –∫ –∫–∞–∫–æ–º—É —Å–∫–ª–∞–¥—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —è—á–µ–π–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.

–ó–∞–¥–∞—á–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤: POST /api/admin/warehouses/update-id-numbers
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —è—á–µ–µ–∫ —Ä–∞–∑–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-7.preview.emergentagent.com/api"
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

class QRCodeUniquenessTest:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_results = []
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        print(f"   {details}")
        print()
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                user_info = data.get("user", {})
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})"
                )
                return True
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code} - {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return False
    
    def get_warehouses_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            response = self.session.get(f"{BACKEND_URL}/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return warehouses
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: HTTP {response.status_code} - {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {str(e)}"
            )
            return []
    
    def test_update_warehouse_id_numbers_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            response = self.session.post(f"{BACKEND_URL}/admin/warehouses/update-id-numbers")
            
            if response.status_code == 200:
                data = response.json()
                total_warehouses = data.get("total_warehouses", 0)
                updated_count = data.get("updated_count", 0)
                updated_warehouses = data.get("updated_warehouses", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤
                unique_numbers = set()
                duplicates_found = False
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                warehouses = self.get_warehouses_list()
                warehouse_numbers = []
                
                for warehouse in warehouses:
                    warehouse_id_number = warehouse.get("warehouse_id_number")
                    if warehouse_id_number:
                        if warehouse_id_number in unique_numbers:
                            duplicates_found = True
                        else:
                            unique_numbers.add(warehouse_id_number)
                        warehouse_numbers.append(warehouse_id_number)
                
                details = f"–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {total_warehouses}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}"
                if updated_warehouses:
                    details += f"\n–ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:"
                    for update in updated_warehouses[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        details += f"\n  - {update.get('name')}: {update.get('old_number')} ‚Üí {update.get('new_number')}"
                
                details += f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(unique_numbers)}"
                details += f"\n–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {'–î–∞' if duplicates_found else '–ù–µ—Ç'}"
                
                self.log_result(
                    "Endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤",
                    not duplicates_found,
                    details
                )
                
                return not duplicates_found
            else:
                self.log_result(
                    "Endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: HTTP {response.status_code} - {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "Endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤: {str(e)}"
            )
            return False
    
    def test_qr_code_generation_uniqueness(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —è—á–µ–µ–∫ —Ä–∞–∑–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤"""
        try:
            warehouses = self.get_warehouses_list()
            
            if len(warehouses) < 2:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤",
                    False,
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)"
                )
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–∫–ª–∞–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_warehouses = warehouses[:2]
            qr_codes = {}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —è—á–µ–π–∫–∏ (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 1, —è—á–µ–π–∫–∞ 1) –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
            block, shelf, cell = 1, 1, 1
            
            for warehouse in test_warehouses:
                warehouse_id = warehouse.get("id")
                warehouse_name = warehouse.get("name", "Unknown")
                warehouse_id_number = warehouse.get("warehouse_id_number")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –¥–ª—è —è—á–µ–π–∫–∏
                try:
                    response = self.session.get(
                        f"{BACKEND_URL}/warehouse/{warehouse_id}/cell-qr/{block}/{shelf}/{cell}"
                    )
                    
                    if response.status_code == 200:
                        qr_data = response.text
                        qr_codes[warehouse_id] = {
                            "name": warehouse_name,
                            "warehouse_id_number": warehouse_id_number,
                            "qr_code": qr_data,
                            "expected_format": f"{warehouse_id_number}-{block:02d}-{shelf:02d}-{cell:03d}"
                        }
                    else:
                        self.log_result(
                            f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}",
                            False,
                            f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: HTTP {response.status_code} - {response.text}"
                        )
                        
                except Exception as e:
                    self.log_result(
                        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}",
                        False,
                        f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {str(e)}"
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤
            if len(qr_codes) >= 2:
                qr_values = [data["qr_code"] for data in qr_codes.values()]
                unique_qr_codes = len(set(qr_values)) == len(qr_values)
                
                details = f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(qr_codes)}\n"
                details += f"–¢–µ—Å—Ç–æ–≤–∞—è —è—á–µ–π–∫–∞: –ë–ª–æ–∫ {block}, –ü–æ–ª–∫–∞ {shelf}, –Ø—á–µ–π–∫–∞ {cell}\n"
                
                for warehouse_id, data in qr_codes.items():
                    details += f"\n–°–∫–ª–∞–¥: {data['name']}"
                    details += f"\n  - –ù–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞: {data['warehouse_id_number']}"
                    details += f"\n  - –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {data['expected_format']}"
                    details += f"\n  - QR –∫–æ–¥ –¥–ª–∏–Ω–∞: {len(data['qr_code'])} —Å–∏–º–≤–æ–ª–æ–≤"
                
                details += f"\n\n–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤: {'‚úÖ –î–∞' if unique_qr_codes else '‚ùå –ù–µ—Ç'}"
                
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤",
                    unique_qr_codes,
                    details
                )
                
                return unique_qr_codes
            else:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤",
                    False,
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ QR –∫–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(qr_codes)} –∏–∑ {len(test_warehouses)}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {str(e)}"
            )
            return False
    
    def test_automatic_warehouse_id_assignment(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–∞–º –±–µ–∑ warehouse_id_number"""
        try:
            warehouses = self.get_warehouses_list()
            
            # –ò—â–µ–º —Å–∫–ª–∞–¥—ã –±–µ–∑ warehouse_id_number –∏–ª–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
            warehouses_without_id = []
            warehouses_with_id = []
            
            for warehouse in warehouses:
                warehouse_id_number = warehouse.get("warehouse_id_number")
                if not warehouse_id_number or not warehouse_id_number.isdigit() or len(warehouse_id_number) != 3:
                    warehouses_without_id.append(warehouse)
                else:
                    warehouses_with_id.append(warehouse)
            
            details = f"–í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}\n"
            details += f"–°–∫–ª–∞–¥—ã —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏: {len(warehouses_with_id)}\n"
            details += f"–°–∫–ª–∞–¥—ã –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤/—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏: {len(warehouses_without_id)}\n"
            
            if warehouses_without_id:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–∞
                test_warehouse = warehouses_without_id[0]
                warehouse_id = test_warehouse.get("id")
                warehouse_name = test_warehouse.get("name", "Unknown")
                
                details += f"\n–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥: {warehouse_name}"
                details += f"\n–¢–µ–∫—É—â–∏–π warehouse_id_number: {test_warehouse.get('warehouse_id_number')}"
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–º–µ—Ä
                try:
                    response = self.session.get(
                        f"{BACKEND_URL}/warehouse/{warehouse_id}/cell-qr/1/1/1"
                    )
                    
                    if response.status_code == 200:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–º–µ—Ä
                        updated_warehouses = self.get_warehouses_list()
                        updated_warehouse = next(
                            (w for w in updated_warehouses if w.get("id") == warehouse_id), 
                            None
                        )
                        
                        if updated_warehouse:
                            new_id_number = updated_warehouse.get("warehouse_id_number")
                            if new_id_number and new_id_number.isdigit() and len(new_id_number) == 3:
                                details += f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–º–µ—Ä: {new_id_number}"
                                success = True
                            else:
                                details += f"\n‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {new_id_number}"
                                success = False
                        else:
                            details += f"\n‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                            success = False
                    else:
                        details += f"\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: HTTP {response.status_code}"
                        success = False
                        
                except Exception as e:
                    details += f"\n‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {str(e)}"
                    success = False
            else:
                details += "\n‚úÖ –í—Å–µ —Å–∫–ª–∞–¥—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞"
                success = True
            
            self.log_result(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–∞–º",
                success,
                details
            )
            
            return success
            
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–∞–º",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}"
            )
            return False
    
    def test_qr_code_format_validation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤"""
        try:
            warehouses = self.get_warehouses_list()
            
            if not warehouses:
                self.log_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤",
                    False,
                    "–ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞
            test_warehouses = warehouses[:3]
            format_tests = []
            
            for warehouse in test_warehouses:
                warehouse_id = warehouse.get("id")
                warehouse_name = warehouse.get("name", "Unknown")
                warehouse_id_number = warehouse.get("warehouse_id_number")
                
                if not warehouse_id_number:
                    continue
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —è—á–µ–π–∫–∏
                test_cells = [
                    (1, 1, 1),   # 001-01-01-001
                    (2, 3, 15),  # XXX-02-03-015
                    (1, 1, 100)  # XXX-01-01-100
                ]
                
                for block, shelf, cell in test_cells:
                    expected_format = f"{warehouse_id_number}-{block:02d}-{shelf:02d}-{cell:03d}"
                    
                    try:
                        response = self.session.get(
                            f"{BACKEND_URL}/warehouse/{warehouse_id}/cell-qr/{block}/{shelf}/{cell}"
                        )
                        
                        if response.status_code == 200:
                            qr_data = response.text
                            # QR –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å base64 –¥–∞–Ω–Ω—ã–µ
                            is_base64_format = qr_data.startswith("data:image/png;base64,")
                            
                            format_tests.append({
                                "warehouse": warehouse_name,
                                "warehouse_number": warehouse_id_number,
                                "cell": f"–ë{block}-–ü{shelf}-–Ø{cell}",
                                "expected_format": expected_format,
                                "qr_generated": True,
                                "is_base64": is_base64_format,
                                "qr_length": len(qr_data)
                            })
                        else:
                            format_tests.append({
                                "warehouse": warehouse_name,
                                "warehouse_number": warehouse_id_number,
                                "cell": f"–ë{block}-–ü{shelf}-–Ø{cell}",
                                "expected_format": expected_format,
                                "qr_generated": False,
                                "error": f"HTTP {response.status_code}"
                            })
                            
                    except Exception as e:
                        format_tests.append({
                            "warehouse": warehouse_name,
                            "warehouse_number": warehouse_id_number,
                            "cell": f"–ë{block}-–ü{shelf}-–Ø{cell}",
                            "expected_format": expected_format,
                            "qr_generated": False,
                            "error": str(e)
                        })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_tests = [t for t in format_tests if t.get("qr_generated", False)]
            failed_tests = [t for t in format_tests if not t.get("qr_generated", False)]
            
            details = f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ QR –∫–æ–¥–æ–≤: {len(format_tests)}\n"
            details += f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(successful_tests)}\n"
            details += f"–û—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(failed_tests)}\n"
            
            if successful_tests:
                details += f"\n–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö QR –∫–æ–¥–æ–≤:"
                for test in successful_tests[:3]:
                    details += f"\n  - {test['warehouse']} ({test['warehouse_number']})"
                    details += f"\n    –Ø—á–µ–π–∫–∞: {test['cell']}"
                    details += f"\n    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {test['expected_format']}"
                    details += f"\n    Base64 —Ñ–æ—Ä–º–∞—Ç: {'‚úÖ' if test.get('is_base64') else '‚ùå'}"
                    details += f"\n    –î–ª–∏–Ω–∞ QR: {test.get('qr_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤"
            
            if failed_tests:
                details += f"\n–û—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
                for test in failed_tests[:3]:
                    details += f"\n  - {test['warehouse']}: {test.get('error', 'Unknown error')}"
            
            success_rate = len(successful_tests) / len(format_tests) if format_tests else 0
            overall_success = success_rate >= 0.8  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            
            details += f"\n–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}"
            
            self.log_result(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤",
                overall_success,
                details
            )
            
            return overall_success
            
        except Exception as e:
            self.log_result(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞: {str(e)}"
            )
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ")
        print("=" * 100)
        print()
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
        print("üìã –¢–ï–°–¢ 1: Endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤")
        test1_success = self.test_update_warehouse_id_numbers_endpoint()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤
        print("üîç –¢–ï–°–¢ 2: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —è—á–µ–µ–∫")
        test2_success = self.test_qr_code_generation_uniqueness()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        print("‚öôÔ∏è –¢–ï–°–¢ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤")
        test3_success = self.test_automatic_warehouse_id_assignment()
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤
        print("üìù –¢–ï–°–¢ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–æ–≤")
        test4_success = self.test_qr_code_format_validation()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        passed_tests = sum([test1_success, test2_success, test3_success, test4_success])
        total_tests = 4
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in self.test_results:
            print(f"{result['status']}: {result['test']}")
        
        print()
        
        if success_rate >= 75:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ö–∞–∂–¥—ã–π —Å–∫–ª–∞–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR –∫–æ–¥—ã —è—á–µ–µ–∫")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —è—á–µ–µ–∫ –∫ —Å–∫–ª–∞–¥–∞–º")
        else:
            print("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
        return success_rate >= 75

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = QRCodeUniquenessTest()
    success = tester.run_comprehensive_test()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()