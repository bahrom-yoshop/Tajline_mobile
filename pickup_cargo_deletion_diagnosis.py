#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä" –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê:
–ì—Ä—É–∑—ã –≤ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä" –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è –Ω–∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É, –Ω–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ 
—á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑" –∏ "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑—ã".

–ü–õ–ê–ù –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ GET /api/operator/pickup-requests
3) –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ cargo_id –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π ID –≥—Ä—É–∑–∞
4) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫–∏–µ endpoints –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä
5) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É - –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Å–∞–º—É –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –≥—Ä—É–∑
6) –ù–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä"
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-tracker-33.preview.emergentagent.com/api"

class PickupCargoDeletionDiagnosis:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def authenticate_warehouse_operator(self):
        """1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": "+79777888999",
                "password": "warehouse123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø:")
                self.log(f"   - –ò–º—è: {self.operator_info.get('full_name')}")
                self.log(f"   - –ù–æ–º–µ—Ä: {self.operator_info.get('user_number')}")
                self.log(f"   - –†–æ–ª—å: {self.operator_info.get('role')}")
                return True
            else:
                self.log(f"‚ùå –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò: {e}")
            return False
    
    def get_pickup_requests_structure(self):
        """2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        self.log("üìã –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ GET /api/operator/pickup-requests")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ –£–°–ü–ï–®–ù–û –ü–û–õ–£–ß–ï–ù–´ –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–†:")
                self.log(f"   - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, dict):
                    self.log(f"   - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: dict")
                    self.log(f"   - –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(data.keys())}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–æ–∫
                    pickup_requests = data.get('pickup_requests', [])
                    if pickup_requests:
                        self.log(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(pickup_requests)}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏
                        first_request = pickup_requests[0]
                        self.log(f"   - –ü–æ–ª—è –≤ –∑–∞—è–≤–∫–µ: {list(first_request.keys())}")
                        
                        # –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–æ–º
                        cargo_related_fields = []
                        for key in first_request.keys():
                            if 'cargo' in key.lower() or 'id' in key.lower():
                                cargo_related_fields.append(key)
                        
                        if cargo_related_fields:
                            self.log(f"   - –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–æ–º: {cargo_related_fields}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–∏—Ö –ø–æ–ª–µ–π
                            for field in cargo_related_fields:
                                value = first_request.get(field)
                                self.log(f"     * {field}: {value}")
                        else:
                            self.log(f"   - ‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –ø–æ–ª–µ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≥—Ä—É–∑–æ–º")
                        
                        return pickup_requests
                    else:
                        self.log(f"   - ‚ö†Ô∏è –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –û–¢–°–£–¢–°–¢–í–£–Æ–¢")
                        return []
                else:
                    self.log(f"   - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                    return data
                    
            else:
                self.log(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–ò –ü–û–õ–£–ß–ï–ù–ò–ò –ó–ê–Ø–í–û–ö: {e}")
            return None
    
    def analyze_pickup_request_fields(self, pickup_requests):
        """3. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        self.log("üîç –≠–¢–ê–ü 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        
        if not pickup_requests:
            self.log("‚ùå –ù–ï–¢ –ó–ê–Ø–í–û–ö –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê")
            return None
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            all_fields = set()
            cargo_ids = []
            request_ids = []
            
            for i, request in enumerate(pickup_requests):
                self.log(f"   üìÑ –ó–ê–Ø–í–ö–ê #{i+1}:")
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è
                for key, value in request.items():
                    all_fields.add(key)
                    
                    # –ò—â–µ–º ID-–ø–æ–¥–æ–±–Ω—ã–µ –ø–æ–ª—è
                    if 'id' in key.lower():
                        self.log(f"     - {key}: {value}")
                        if 'cargo' in key.lower():
                            cargo_ids.append(value)
                        elif key == 'id':
                            request_ids.append(value)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                request_number = request.get('request_number', 'N/A')
                status = request.get('status', 'N/A')
                self.log(f"     - –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {request_number}")
                self.log(f"     - –°—Ç–∞—Ç—É—Å: {status}")
                
                if i >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏
                    break
            
            self.log(f"   üìä –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó:")
            self.log(f"     - –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {len(all_fields)}")
            self.log(f"     - –í—Å–µ –ø–æ–ª—è: {sorted(list(all_fields))}")
            self.log(f"     - –ù–∞–π–¥–µ–Ω–æ cargo_id: {len(cargo_ids)}")
            self.log(f"     - –ù–∞–π–¥–µ–Ω–æ request_id: {len(request_ids)}")
            
            return {
                'all_fields': list(all_fields),
                'cargo_ids': cargo_ids,
                'request_ids': request_ids,
                'sample_requests': pickup_requests[:3]
            }
            
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–ò –ê–ù–ê–õ–ò–ó–ï –ü–û–õ–ï–ô: {e}")
            return None
    
    def test_deletion_endpoints(self, analysis_data):
        """4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        self.log("üóëÔ∏è –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä")
        
        if not analysis_data:
            self.log("‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ ID
        cargo_ids = analysis_data.get('cargo_ids', [])
        request_ids = analysis_data.get('request_ids', [])
        
        # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        endpoints_to_test = [
            ("DELETE", "/operator/cargo/{cargo_id}/remove-from-placement", "cargo_id"),
            ("DELETE", "/admin/cargo/{cargo_id}", "cargo_id"),
            ("DELETE", "/operator/pickup-requests/{request_id}", "request_id"),
            ("DELETE", "/admin/pickup-requests/{request_id}", "request_id"),
            ("POST", "/operator/cargo/bulk-remove-from-placement", "bulk_cargo"),
            ("DELETE", "/operator/cargo/{cargo_id}", "cargo_id"),
        ]
        
        self.log(f"   üéØ –î–û–°–¢–£–ü–ù–´–ï –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
        self.log(f"     - cargo_ids: {cargo_ids[:3] if cargo_ids else '–ù–ï–¢'}")
        self.log(f"     - request_ids: {request_ids[:3] if request_ids else '–ù–ï–¢'}")
        
        working_endpoints = []
        
        for method, endpoint_template, id_type in endpoints_to_test:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {method} {endpoint_template}")
            
            try:
                if id_type == "cargo_id" and cargo_ids:
                    test_id = cargo_ids[0]
                    endpoint = endpoint_template.format(cargo_id=test_id)
                elif id_type == "request_id" and request_ids:
                    test_id = request_ids[0]
                    endpoint = endpoint_template.format(request_id=test_id)
                elif id_type == "bulk_cargo" and cargo_ids:
                    endpoint = endpoint_template
                    # –î–ª—è bulk –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º POST —Å –¥–∞–Ω–Ω—ã–º–∏
                    response = self.session.post(f"{BACKEND_URL}{endpoint}", json={
                        "cargo_ids": cargo_ids[:1]  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–¥–Ω–∏–º ID
                    })
                    
                    self.log(f"     - –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    if response.status_code in [200, 204]:
                        self.log(f"     - ‚úÖ ENDPOINT –†–ê–ë–û–¢–ê–ï–¢")
                        working_endpoints.append((method, endpoint, response.status_code))
                    elif response.status_code == 404:
                        self.log(f"     - ‚ö†Ô∏è ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                    elif response.status_code == 403:
                        self.log(f"     - ‚ö†Ô∏è –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
                    else:
                        self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text[:100]}")
                    continue
                else:
                    self.log(f"     - ‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù (–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö ID)")
                    continue
                
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö DELETE/GET –∑–∞–ø—Ä–æ—Å–æ–≤
                if method == "DELETE":
                    response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                elif method == "GET":
                    response = self.session.get(f"{BACKEND_URL}{endpoint}")
                else:
                    continue
                
                self.log(f"     - –°—Ç–∞—Ç—É—Å: {response.status_code}")
                if response.status_code in [200, 204]:
                    self.log(f"     - ‚úÖ ENDPOINT –†–ê–ë–û–¢–ê–ï–¢")
                    working_endpoints.append((method, endpoint, response.status_code))
                elif response.status_code == 404:
                    self.log(f"     - ‚ö†Ô∏è ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                elif response.status_code == 403:
                    self.log(f"     - ‚ö†Ô∏è –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
                else:
                    self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text[:100]}")
                    
            except Exception as e:
                self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        self.log(f"   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        if working_endpoints:
            self.log(f"     - ‚úÖ –†–ê–ë–û–ß–ò–ï ENDPOINTS: {len(working_endpoints)}")
            for method, endpoint, status in working_endpoints:
                self.log(f"       * {method} {endpoint} -> {status}")
        else:
            self.log(f"     - ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ò–• ENDPOINTS")
        
        return working_endpoints
    
    def determine_deletion_strategy(self, analysis_data, working_endpoints):
        """5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.log("üéØ –≠–¢–ê–ü 5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
        
        if not analysis_data:
            self.log("‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–¢–†–ê–¢–ï–ì–ò–ò")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        all_fields = analysis_data.get('all_fields', [])
        cargo_ids = analysis_data.get('cargo_ids', [])
        request_ids = analysis_data.get('request_ids', [])
        
        self.log(f"   üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö —Å–≤—è–∑–µ–π —Å –≥—Ä—É–∑–∞–º–∏
        cargo_related_fields = [f for f in all_fields if 'cargo' in f.lower()]
        if cargo_related_fields:
            self.log(f"     - ‚úÖ –ù–ê–ô–î–ï–ù–´ –ü–û–õ–Ø –°–í–Ø–ó–ê–ù–ù–´–ï –° –ì–†–£–ó–û–ú: {cargo_related_fields}")
            
            if cargo_ids:
                self.log(f"     - ‚úÖ –ï–°–¢–¨ CARGO_ID –î–õ–Ø –ü–†–Ø–ú–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø: {len(cargo_ids)} —à—Ç.")
                self.log(f"     - üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –ø–æ cargo_id")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç —Å cargo_id
                cargo_endpoints = [ep for ep in working_endpoints if 'cargo' in ep[1]]
                if cargo_endpoints:
                    self.log(f"     - ‚úÖ –î–û–°–¢–£–ü–ù–´–ï CARGO ENDPOINTS: {len(cargo_endpoints)}")
                    for method, endpoint, status in cargo_endpoints:
                        self.log(f"       * {method} {endpoint}")
                else:
                    self.log(f"     - ‚ùå –ù–ï–¢ –†–ê–ë–û–ß–ò–• CARGO ENDPOINTS")
            else:
                self.log(f"     - ‚ö†Ô∏è –ü–û–õ–Ø –ï–°–¢–¨, –ù–û –ù–ï–¢ –ó–ù–ê–ß–ï–ù–ò–ô CARGO_ID")
        else:
            self.log(f"     - ‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –ü–û–õ–ï–ô –°–í–Ø–ó–ê–ù–ù–´–• –° –ì–†–£–ó–û–ú")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–º–∏—Ö –∑–∞—è–≤–æ–∫
        if request_ids:
            self.log(f"     - ‚úÖ –ï–°–¢–¨ REQUEST_ID –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö: {len(request_ids)} —à—Ç.")
            
            request_endpoints = [ep for ep in working_endpoints if 'pickup-request' in ep[1] or 'request' in ep[1]]
            if request_endpoints:
                self.log(f"     - ‚úÖ –î–û–°–¢–£–ü–ù–´–ï REQUEST ENDPOINTS: {len(request_endpoints)}")
                for method, endpoint, status in request_endpoints:
                    self.log(f"       * {method} {endpoint}")
                self.log(f"     - üéØ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä")
            else:
                self.log(f"     - ‚ùå –ù–ï–¢ –†–ê–ë–û–ß–ò–• REQUEST ENDPOINTS")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log(f"   üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if cargo_ids and any('cargo' in ep[1] for ep in working_endpoints):
            self.log(f"     1. ‚úÖ –û–°–ù–û–í–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –ø–æ cargo_id")
            self.log(f"        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å endpoints —Å cargo_id")
            self.log(f"        - –î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: bulk-remove-from-placement")
        
        if request_ids and any('request' in ep[1] for ep in working_endpoints):
            self.log(f"     2. ‚úÖ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
            self.log(f"        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å endpoints —Å request_id")
            self.log(f"        - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±—Ä–∞—Ç—å –≥—Ä—É–∑ –∏–∑ —Å–µ–∫—Ü–∏–∏")
        
        if not working_endpoints:
            self.log(f"     3. ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–ï–¢ –†–ê–ë–û–ß–ò–• ENDPOINTS")
            self.log(f"        - –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞")
            self.log(f"        - –ò–ª–∏ endpoints –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
            self.log(f"        - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ backend –∫–æ–¥–∞")
    
    def find_working_deletion_method(self):
        """6. –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ —Å–ø–æ—Å–æ–±–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.log("üîß –≠–¢–ê–ü 6: –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ —Å–ø–æ—Å–æ–±–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints —á–µ—Ä–µ–∑ admin API
            self.log("   üîç –ü–†–û–í–ï–†–ö–ê ADMIN API:")
            
            admin_endpoints = [
                "/admin/cargo-requests",
                "/admin/pickup-requests", 
                "/operator/warehouse-notifications"
            ]
            
            for endpoint in admin_endpoints:
                try:
                    response = self.session.get(f"{BACKEND_URL}{endpoint}")
                    if response.status_code == 200:
                        data = response.json()
                        self.log(f"     - ‚úÖ {endpoint}: {response.status_code}")
                        
                        if isinstance(data, list) and data:
                            self.log(f"       * –ó–∞–ø–∏—Å–µ–π: {len(data)}")
                            if data:
                                fields = list(data[0].keys()) if isinstance(data[0], dict) else []
                                cargo_fields = [f for f in fields if 'cargo' in f.lower() or 'pickup' in f.lower()]
                                if cargo_fields:
                                    self.log(f"       * –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–æ–º/–∑–∞–±–æ—Ä–æ–º: {cargo_fields}")
                        elif isinstance(data, dict):
                            self.log(f"       * –¢–∏–ø: dict, –∫–ª—é—á–∏: {list(data.keys())}")
                    else:
                        self.log(f"     - ‚ùå {endpoint}: {response.status_code}")
                except Exception as e:
                    self.log(f"     - ‚ùå {endpoint}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
            self.log("   üîó –ü–û–ò–°–ö –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –ö–û–õ–õ–ï–ö–¶–ò–Ø–ú–ò:")
            
            # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
            try:
                response = self.session.get(f"{BACKEND_URL}/operator/warehouse-notifications")
                if response.status_code == 200:
                    notifications = response.json()
                    if notifications:
                        self.log(f"     - ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {len(notifications)} —à—Ç.")
                        
                        # –ò—â–µ–º —Å–≤—è–∑–∏ —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä
                        pickup_related = []
                        for notif in notifications:
                            if any(key for key in notif.keys() if 'pickup' in key.lower()):
                                pickup_related.append(notif)
                        
                        if pickup_related:
                            self.log(f"     - ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º: {len(pickup_related)} —à—Ç.")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
                            if pickup_related:
                                fields = list(pickup_related[0].keys())
                                self.log(f"     - –ü–æ–ª—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {fields}")
                                
                                # –ò—â–µ–º ID –¥–ª—è —Å–≤—è–∑–∏
                                id_fields = [f for f in fields if 'id' in f.lower()]
                                self.log(f"     - ID –ø–æ–ª—è: {id_fields}")
                        else:
                            self.log(f"     - ‚ö†Ô∏è –ù–ï–¢ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–±–æ—Ä–æ–º")
                else:
                    self.log(f"     - ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code}")
            except Exception as e:
                self.log(f"     - ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –í –ü–û–ò–°–ö–ï –†–ê–ë–û–ß–ï–ì–û –ú–ï–¢–û–î–ê: {e}")
    
    def run_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú–´ –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –°–ï–ö–¶–ò–ò '–ù–ê –ó–ê–ë–û–†'")
        self.log("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        pickup_requests = self.get_pickup_requests_structure()
        if pickup_requests is None:
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä")
            return
        
        # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π
        analysis_data = self.analyze_pickup_request_fields(pickup_requests)
        
        # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
        working_endpoints = self.test_deletion_endpoints(analysis_data)
        
        # –≠—Ç–∞–ø 5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.determine_deletion_strategy(analysis_data, working_endpoints)
        
        # –≠—Ç–∞–ø 6: –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Ç–æ–¥–∞
        self.find_working_deletion_method()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.log("=" * 80)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        
        if analysis_data:
            cargo_ids = analysis_data.get('cargo_ids', [])
            request_ids = analysis_data.get('request_ids', [])
            
            self.log(f"   üìã –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:")
            self.log(f"     - –ó–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {len(pickup_requests) if pickup_requests else 0}")
            self.log(f"     - Cargo ID –Ω–∞–π–¥–µ–Ω–æ: {len(cargo_ids)}")
            self.log(f"     - Request ID –Ω–∞–π–¥–µ–Ω–æ: {len(request_ids)}")
            
            self.log(f"   üîß ENDPOINTS:")
            self.log(f"     - –†–∞–±–æ—á–∏—Ö endpoints: {len(working_endpoints) if working_endpoints else 0}")
            
            if working_endpoints:
                self.log(f"   ‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                if any('cargo' in ep[1] for ep in working_endpoints):
                    self.log(f"     - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –ø–æ cargo_id")
                if any('request' in ep[1] for ep in working_endpoints):
                    self.log(f"     - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ request_id")
            else:
                self.log(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–ï –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ò–• –°–ü–û–°–û–ë–û–í –£–î–ê–õ–ï–ù–ò–Ø")
                self.log(f"     - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ backend —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
                self.log(f"     - –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞")
        
        self.log("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    diagnosis = PickupCargoDeletionDiagnosis()
    diagnosis.run_diagnosis()