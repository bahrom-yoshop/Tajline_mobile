#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫" –¥–ª—è TAJLINE.TJ

–û–°–ù–û–í–ù–ê–Ø –¶–ï–õ–¨: 
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ API `/api/operator/cargo/available-for-placement` —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç 
—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≤ –ø–æ–ª—è—Ö `total_placed`, `placement_progress` –∏ `overall_placement_status`.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API available-for-placement: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ `total_placed` –∏ `placement_progress` 
   –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ `placement_records`
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ 250101: –î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 2/4 –µ—Å–ª–∏ 2 –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã)
4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å placement_records: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–∏—Å—è–º –≤ `placement_records`
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ cargo_items: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ `placed_count` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ `cargo_item` –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: 
–î–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è `total_placed` –ø–æ–∫–∞–∑—ã–≤–∞–ª 0 –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü, –ø–æ—Ç–æ–º—É —á—Ç–æ 
–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ `processed_cargo_items` –≤–º–µ—Å—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ `placement_records`.

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
API –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–∏—Å—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://cargo-sync.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_available_for_placement_api():
    """–¢–µ—Å—Ç 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API available-for-placement —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    
    print("\nüéØ –¢–ï–°–¢ 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API /api/operator/cargo/available-for-placement")
    print("   üìù –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π total_placed, placement_progress, overall_placement_status")
    
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement")
    
    if not response:
        return log_test("API available-for-placement —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• API available-for-placement:")
        print(f"   - –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(data.get('items', []))}")
        
        success = True
        issues = []
        found_250101 = False
        
        # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        for item in data.get('items', []):
            cargo_number = item.get('cargo_number', '')
            
            if cargo_number == '250101':
                found_250101 = True
                print(f"\n   üéØ –ù–ê–ô–î–ï–ù–ê –ó–ê–Ø–í–ö–ê 250101 - –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                total_placed = item.get('total_placed', 0)
                placement_progress = item.get('placement_progress', '')
                overall_placement_status = item.get('overall_placement_status', '')
                
                print(f"      - total_placed: {total_placed}")
                print(f"      - placement_progress: '{placement_progress}'")
                print(f"      - overall_placement_status: '{overall_placement_status}'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º cargo_items –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                cargo_items = item.get('cargo_items', [])
                print(f"      - cargo_items: {len(cargo_items)} —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–∞")
                
                total_units = 0
                total_placed_calculated = 0
                
                for cargo_item in cargo_items:
                    cargo_name = cargo_item.get('cargo_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    placed_count = cargo_item.get('placed_count', 0)
                    individual_items = cargo_item.get('individual_items', [])
                    
                    print(f"         ‚Ä¢ {cargo_name}: {placed_count}/{len(individual_items)} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                    
                    total_units += len(individual_items)
                    total_placed_calculated += placed_count
                
                print(f"      - –†–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {total_placed_calculated}/{total_units}")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò
                if total_placed == 0 and total_placed_calculated > 0:
                    success = False
                    issues.append(f"total_placed={total_placed}, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ {total_placed_calculated} –µ–¥–∏–Ω–∏—Ü")
                
                if placement_progress == '0/4' and total_placed_calculated > 0:
                    success = False
                    issues.append(f"placement_progress='{placement_progress}', –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ {total_placed_calculated} –µ–¥–∏–Ω–∏—Ü")
                
                if total_placed != total_placed_calculated:
                    success = False
                    issues.append(f"total_placed ({total_placed}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é ({total_placed_calculated})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ placement_progress
                expected_progress = f"{total_placed_calculated}/{total_units}"
                if placement_progress != expected_progress:
                    success = False
                    issues.append(f"placement_progress '{placement_progress}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É '{expected_progress}'")
                
                break
        
        if not found_250101:
            success = False
            issues.append("–ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ available-for-placement")
        
        if success:
            details = f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ó–∞—è–≤–∫–∞ 250101 –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
            return log_test("API available-for-placement —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", True, details, response_time)
        else:
            details = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: {'; '.join(issues)}"
            return log_test("API available-for-placement —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("API available-for-placement —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_placement_records_verification():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö —Å placement_records —á–µ—Ä–µ–∑ verify-cargo API"""
    
    print("\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å placement_records —á–µ—Ä–µ–∑ verify-cargo")
    print("   üìù –¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–∏—Å—è–º –≤ placement_records")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ –∏–∑ –∑–∞—è–≤–∫–∏ 250101
    test_units = [
        {"qr_code": "250101/01/01", "expected_status": "–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω"},
        {"qr_code": "250101/01/02", "expected_status": "—Ä–∞–∑–º–µ—â–µ–Ω"},
        {"qr_code": "250101/02/01", "expected_status": "—Ä–∞–∑–º–µ—â–µ–Ω"},
        {"qr_code": "250101/02/02", "expected_status": "–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω"}
    ]
    
    placement_data = {}
    success = True
    issues = []
    
    for unit in test_units:
        qr_code = unit["qr_code"]
        expected_status = unit["expected_status"]
        
        print(f"\n   üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω–∏—Ü—É {qr_code} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_status})")
        
        response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
        
        if not response:
            success = False
            issues.append(f"{qr_code}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏")
            continue
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get("success"):
                # –ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω
                placement_data[qr_code] = "–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω"
                print(f"      ‚úÖ {qr_code}: –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω (–≥—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)")
            else:
                error = data.get("error", "")
                if "—É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω" in error.lower():
                    # –ì—Ä—É–∑ —Ä–∞–∑–º–µ—â–µ–Ω
                    placement_data[qr_code] = "—Ä–∞–∑–º–µ—â–µ–Ω"
                    print(f"      ‚úÖ {qr_code}: —Ä–∞–∑–º–µ—â–µ–Ω (–≥—Ä—É–∑ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω)")
                else:
                    success = False
                    issues.append(f"{qr_code}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {error}")
                    print(f"      ‚ùå {qr_code}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - {error}")
        else:
            success = False
            error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
            issues.append(f"{qr_code}: HTTP {response.status_code}")
            print(f"      ‚ùå {qr_code}: HTTP {response.status_code}: {error_detail}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n   üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í PLACEMENT_RECORDS:")
    placed_count = sum(1 for status in placement_data.values() if status == "—Ä–∞–∑–º–µ—â–µ–Ω")
    total_count = len(placement_data)
    
    print(f"      - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_count}")
    print(f"      - –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {placed_count}")
    print(f"      - –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {total_count - placed_count}")
    print(f"      - –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placed_count}/{total_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
    for unit in test_units:
        qr_code = unit["qr_code"]
        expected_status = unit["expected_status"]
        actual_status = placement_data.get(qr_code, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        if actual_status != expected_status:
            success = False
            issues.append(f"{qr_code}: –æ–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å '{expected_status}', –ø–æ–ª—É—á–µ–Ω '{actual_status}'")
    
    if success:
        details = f"‚úÖ –î–∞–Ω–Ω—ã–µ placement_records —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º: {placed_count}/{total_count} —Ä–∞–∑–º–µ—â–µ–Ω–æ"
        return log_test("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å placement_records", True, details)
    else:
        details = f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å placement_records: {'; '.join(issues)}"
        return log_test("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å placement_records", False, details)

def test_cargo_items_placed_count():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ placed_count –¥–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item"""
    
    print("\nüìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ cargo_items - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å placed_count")
    print("   üìù –¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ placed_count –¥–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement")
    
    if not response:
        return log_test("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è cargo_items placed_count", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        success = True
        issues = []
        found_250101 = False
        
        # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101 –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ cargo_items
        for item in data.get('items', []):
            cargo_number = item.get('cargo_number', '')
            
            if cargo_number == '250101':
                found_250101 = True
                print(f"\n   üéØ –ê–ù–ê–õ–ò–ó CARGO_ITEMS –¥–ª—è –∑–∞—è–≤–∫–∏ 250101:")
                
                cargo_items = item.get('cargo_items', [])
                
                for i, cargo_item in enumerate(cargo_items, 1):
                    cargo_name = cargo_item.get('cargo_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    placed_count = cargo_item.get('placed_count', 0)
                    individual_items = cargo_item.get('individual_items', [])
                    
                    print(f"      {i}. {cargo_name}:")
                    print(f"         - placed_count: {placed_count}")
                    print(f"         - individual_items: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é individual_item
                    actual_placed = 0
                    for individual_item in individual_items:
                        individual_number = individual_item.get('individual_number', '')
                        is_placed = individual_item.get('is_placed', False)
                        
                        if is_placed:
                            actual_placed += 1
                            print(f"            ‚úÖ {individual_number}: —Ä–∞–∑–º–µ—â–µ–Ω")
                        else:
                            print(f"            ‚è≥ {individual_number}: –æ–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                    
                    print(f"         - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {actual_placed}")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
                    if placed_count != actual_placed:
                        success = False
                        issues.append(f"{cargo_name}: placed_count={placed_count}, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ {actual_placed}")
                        print(f"         ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: placed_count={placed_count}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏={actual_placed}")
                    else:
                        print(f"         ‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: placed_count –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                
                break
        
        if not found_250101:
            success = False
            issues.append("–ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ cargo_items")
        
        if success:
            details = f"‚úÖ –í—Å–µ cargo_items –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è placed_count"
            return log_test("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è cargo_items placed_count", True, details, response_time)
        else:
            details = f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å placed_count: {'; '.join(issues)}"
            return log_test("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è cargo_items placed_count", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è cargo_items placed_count", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_overall_placement_status():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ overall_placement_status"""
    
    print("\nüéØ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ overall_placement_status")
    print("   üìù –¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ overall_placement_status –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement")
    
    if not response:
        return log_test("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å overall_placement_status", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        success = True
        issues = []
        found_250101 = False
        
        # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ overall_placement_status
        for item in data.get('items', []):
            cargo_number = item.get('cargo_number', '')
            
            if cargo_number == '250101':
                found_250101 = True
                print(f"\n   üéØ –ê–ù–ê–õ–ò–ó OVERALL_PLACEMENT_STATUS –¥–ª—è –∑–∞—è–≤–∫–∏ 250101:")
                
                total_placed = item.get('total_placed', 0)
                total_units = 0
                overall_placement_status = item.get('overall_placement_status', '')
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü
                cargo_items = item.get('cargo_items', [])
                for cargo_item in cargo_items:
                    individual_items = cargo_item.get('individual_items', [])
                    total_units += len(individual_items)
                
                print(f"      - total_placed: {total_placed}")
                print(f"      - total_units: {total_units}")
                print(f"      - overall_placement_status: '{overall_placement_status}'")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å
                if total_placed == 0:
                    expected_status = "awaiting_placement"
                elif total_placed == total_units:
                    expected_status = "fully_placed"
                else:
                    expected_status = "partially_placed"
                
                print(f"      - –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: '{expected_status}'")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
                if overall_placement_status != expected_status:
                    success = False
                    issues.append(f"overall_placement_status='{overall_placement_status}', –æ–∂–∏–¥–∞–ª—Å—è '{expected_status}'")
                    print(f"      ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
                else:
                    print(f"      ‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: overall_placement_status –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                
                break
        
        if not found_250101:
            success = False
            issues.append("–ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ overall_placement_status")
        
        if success:
            details = f"‚úÖ overall_placement_status –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
            return log_test("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å overall_placement_status", True, details, response_time)
        else:
            details = f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å overall_placement_status: {'; '.join(issues)}"
            return log_test("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å overall_placement_status", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å overall_placement_status", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*100)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–• –í –†–ï–ñ–ò–ú–ï '–ö–ê–†–¢–û–ß–ö–ò –ó–ê–Ø–í–û–ö'")
    print("="*100)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    auth_test = next((r for r in test_results if "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in r["test"]), None)
    api_test = next((r for r in test_results if "available-for-placement" in r["test"]), None)
    placement_test = next((r for r in test_results if "placement_records" in r["test"]), None)
    cargo_items_test = next((r for r in test_results if "cargo_items" in r["test"]), None)
    status_test = next((r for r in test_results if "overall_placement_status" in r["test"]), None)
    
    if auth_test and auth_test["success"]:
        print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123) —É—Å–ø–µ—à–Ω–∞")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    if api_test and api_test["success"]:
        print("   ‚úÖ API available-for-placement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
        print("   ‚úÖ total_placed –∏ placement_progress –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
    else:
        print("   ‚ùå API available-for-placement –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
    
    if placement_test and placement_test["success"]:
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ API —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–∏—Å—è–º –≤ placement_records")
    else:
        print("   ‚ùå –î–∞–Ω–Ω—ã–µ API –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø–∏—Å—è–º –≤ placement_records")
    
    if cargo_items_test and cargo_items_test["success"]:
        print("   ‚úÖ placed_count –¥–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å placed_count –≤ cargo_items")
    
    if status_test and status_test["success"]:
        print("   ‚úÖ overall_placement_status –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å overall_placement_status")
    
    print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if success_rate >= 80:
        print("   üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û!")
        print("   üìç API /api/operator/cargo/available-for-placement —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç")
        print("   üìç —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø–∏—Å—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        print("   üìç –ü—Ä–æ–±–ª–µ–º–∞ —Å total_placed=0 –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –†–ï–®–ï–ù–ê!")
    else:
        print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   üìç API –≤—Å–µ –µ—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
        print("   üìç –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫'")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    print(f"üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π total_placed, placement_progress, overall_placement_status")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_available_for_placement_api,
        test_placement_records_verification,
        test_cargo_items_placed_count,
        test_overall_placement_status
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_summary()

if __name__ == "__main__":
    main()