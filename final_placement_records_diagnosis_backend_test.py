#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã API layout-with-cargo
==================================================================

–ù–ê–ô–î–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:
- –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ 4 placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
- API layout-with-cargo –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ cargo_info
- API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ layout.blocks[].shelves[].cells[].cargo[]
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–µ cargo_info —Å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API –∏ –Ω–∞–π—Ç–∏ –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞—Ö
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
MOSCOW_WAREHOUSE_ID = "d0a8362d-b4d3-4947-b335-28c94658a021"

class FinalPlacementDiagnosticTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def test_api_response_structure(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API layout-with-cargo"""
        try:
            self.log("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê API layout-with-cargo...")
            
            api_url = f"{API_BASE}/warehouses/{MOSCOW_WAREHOUSE_ID}/layout-with-cargo"
            response = self.session.get(api_url)
            
            if response.status_code == 200:
                data = response.json()
                
                self.log("‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
                self.log(f"üìã –ü–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_info
                if 'cargo_info' in data:
                    cargo_info = data['cargo_info']
                    self.log(f"‚úÖ –ü–æ–ª–µ cargo_info –Ω–∞–π–¥–µ–Ω–æ: {len(cargo_info)} –∑–∞–ø–∏—Å–µ–π")
                    
                    for i, cargo in enumerate(cargo_info):
                        self.log(f"   {i+1}. {cargo.get('cargo_number', 'N/A')}/{cargo.get('individual_number', 'N/A')} –≤ {cargo.get('location', 'N/A')}")
                else:
                    self.log("‚ùå –ü–æ–ª–µ cargo_info –ù–ï –ù–ê–ô–î–ï–ù–û –≤ –æ—Ç–≤–µ—Ç–µ API")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É layout
                if 'layout' in data:
                    layout = data['layout']
                    self.log(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ layout: {list(layout.keys())}")
                    
                    if 'blocks' in layout:
                        blocks = layout['blocks']
                        self.log(f"üèóÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤")
                        
                        total_cargo_found = 0
                        cargo_details = []
                        
                        for block in blocks:
                            block_num = block.get('block_number', 'N/A')
                            shelves = block.get('shelves', [])
                            
                            for shelf in shelves:
                                shelf_num = shelf.get('shelf_number', 'N/A')
                                cells = shelf.get('cells', [])
                                
                                for cell in cells:
                                    cell_num = cell.get('cell_number', 'N/A')
                                    cargo_list = cell.get('cargo', [])
                                    
                                    if len(cargo_list) > 0:
                                        total_cargo_found += len(cargo_list)
                                        location = f"–ë{block_num}-–ü{shelf_num}-–Ø{cell_num}"
                                        
                                        for cargo in cargo_list:
                                            cargo_number = cargo.get('cargo_number', 'N/A')
                                            individual_number = cargo.get('individual_number', 'N/A')
                                            cargo_name = cargo.get('cargo_name', 'N/A')
                                            
                                            cargo_details.append({
                                                'cargo_number': cargo_number,
                                                'individual_number': individual_number,
                                                'cargo_name': cargo_name,
                                                'location': location
                                            })
                        
                        self.log(f"üì¶ –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û –ì–†–£–ó–û–í –í LAYOUT: {total_cargo_found}")
                        
                        if total_cargo_found > 0:
                            self.log("üìã –î–ï–¢–ê–õ–ò –ù–ê–ô–î–ï–ù–ù–´–• –ì–†–£–ó–û–í:")
                            for cargo in cargo_details:
                                self.log(f"   - {cargo['cargo_number']}/{cargo['individual_number']}: {cargo['cargo_name']} –≤ {cargo['location']}")
                        else:
                            self.log("‚ùå –í —Å—Ç—Ä—É–∫—Ç—É—Ä–µ layout –ù–ï –ù–ê–ô–î–ï–ù–û –≥—Ä—É–∑–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_cargo = data.get('total_cargo', 0)
                occupied_cells = data.get('occupied_cells', 0)
                total_cells = data.get('total_cells', 0)
                occupancy_percentage = data.get('occupancy_percentage', 0)
                
                self.log(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                self.log(f"   - –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {total_cargo}")
                self.log(f"   - –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {occupied_cells}")
                self.log(f"   - –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}")
                self.log(f"   - –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {occupancy_percentage}%")
                
                return data
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                self.log(f"‚ùå –û—Ç–≤–µ—Ç: {response.text}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {str(e)}", "ERROR")
            return None
    
    def run_final_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.log("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API layout-with-cargo")
            self.log("=" * 80)
            
            # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate_operator():
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
            
            # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
            api_response = self.test_api_response_structure()
            
            # 3. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.generate_final_report(api_response)
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}", "ERROR")
            return False
    
    def generate_final_report(self, api_response):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.log("\n" + "=" * 80)
            self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
            self.log("=" * 80)
            
            if api_response:
                # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                has_cargo_info = 'cargo_info' in api_response
                has_layout = 'layout' in api_response
                total_cargo = api_response.get('total_cargo', 0)
                
                self.log(f"‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: –î–ê")
                self.log(f"üìã –ü–æ–ª–µ cargo_info: {'–ù–ê–ô–î–ï–ù–û' if has_cargo_info else '–ù–ï –ù–ê–ô–î–ï–ù–û'}")
                self.log(f"üìã –ü–æ–ª–µ layout: {'–ù–ê–ô–î–ï–ù–û' if has_layout else '–ù–ï –ù–ê–ô–î–ï–ù–û'}")
                self.log(f"üìä –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {total_cargo}")
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                if not has_cargo_info and total_cargo > 0:
                    self.log(f"\nüéØ –ü–†–û–ë–õ–ï–ú–ê –û–ü–†–ï–î–ï–õ–ï–ù–ê:")
                    self.log(f"   - API –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ cargo_info")
                    self.log(f"   - –î–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–∞—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ layout.blocks[].shelves[].cells[].cargo[]")
                    self.log(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–µ cargo_info —Å –ø–ª–æ—Å–∫–∏–º —Å–ø–∏—Å–∫–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
                    
                elif not has_cargo_info and total_cargo == 0:
                    self.log(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
                    self.log(f"   - API –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ cargo_info")
                    self.log(f"   - API –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã (total_cargo = 0)")
                    self.log(f"   - –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å 4 placement_records, –Ω–æ API –∏—Ö –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç")
                    
                elif has_cargo_info:
                    cargo_info = api_response.get('cargo_info', [])
                    self.log(f"\n‚úÖ –ü–û–õ–ï cargo_info –ù–ê–ô–î–ï–ù–û:")
                    self.log(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(cargo_info)}")
                    
                    if len(cargo_info) < 4:
                        self.log(f"   ‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å 4 –∑–∞–ø–∏—Å–∏, –Ω–∞–π–¥–µ–Ω–æ {len(cargo_info)}")
                    else:
                        self.log(f"   ‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
                
                if not has_cargo_info:
                    self.log("üîß 1. –î–û–ë–ê–í–ò–¢–¨ –ø–æ–ª–µ cargo_info –≤ –æ—Ç–≤–µ—Ç API layout-with-cargo")
                    self.log("üîß 2. –°–æ–∑–¥–∞—Ç—å –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                    self.log("üîß 3. –í–∫–ª—é—á–∏—Ç—å –≤ cargo_info –ø–æ–ª—è: cargo_number, individual_number, location, cargo_name, etc.")
                
                if total_cargo == 0:
                    self.log("üîß 4. –ò–°–ü–†–ê–í–ò–¢–¨ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ placement_records –≤ API")
                    self.log("üîß 5. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ placement_records –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å—è—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ layout")
                    self.log("üîß 6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç location –≤ placement_records (–ë1-–ü2-–Ø5)")
                
                # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
                if has_cargo_info and len(api_response.get('cargo_info', [])) >= 4:
                    self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨: 100% - –í–°–ï –ó–ê–ü–ò–°–ò –ù–ê–ô–î–ï–ù–´")
                elif total_cargo >= 4:
                    self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨: 75% - –î–ê–ù–ù–´–ï –ï–°–¢–¨, –ù–û –ù–ï –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï")
                else:
                    self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨: 0% - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê")
            else:
                self.log(f"‚ùå API –æ—Ç–≤–µ—Ç –ù–ï –ø–æ–ª—É—á–µ–Ω")
                self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨: 0% - API –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}", "ERROR")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã API layout-with-cargo")
    print("=" * 80)
    
    tester = FinalPlacementDiagnosticTester()
    
    try:
        success = tester.run_final_diagnosis()
        
        if success:
            print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        else:
            print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()