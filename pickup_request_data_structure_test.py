#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∏ –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –≥—Ä—É–∑—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤.

–û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2) –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ GET /api/operator/pickup-requests
3) –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä - –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è cargo_id, cargo_number –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
4) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä
5) –ù–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –∏—Ö –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è

–î–ï–¢–ê–õ–ò –ê–ù–ê–õ–ò–ó–ê:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
- –ù–∞–π—Ç–∏ —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –∏ –≥—Ä—É–∑–∞–º–∏ 
- –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä"

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–Ω—è—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥—Ä—É–∑–∞–º–∏ –≤ –∑–∞—è–≤–∫–∞—Ö –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –∏—Ö –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-7.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    print("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê...")
    
    auth_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    response = requests.post(f"{API_BASE}/auth/login", json=auth_data)
    print(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        token = data.get('access_token')
        user_info = data.get('user')
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
        print(f"–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('user_number', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        return token
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
        return None

def test_pickup_requests_endpoint(operator_token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint"""
    print("\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT /api/operator/pickup-requests...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{API_BASE}/operator/pickup-requests", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Endpoint /api/operator/pickup-requests —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if isinstance(data, list):
            pickup_requests = data
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ú–∞—Å—Å–∏–≤ –∏–∑ {len(pickup_requests)} –∑–∞—è–≤–æ–∫")
        elif isinstance(data, dict):
            pickup_requests = data.get('items', data.get('requests', []))
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –û–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º items/requests, —Å–æ–¥–µ—Ä–∂–∏—Ç {len(pickup_requests)} –∑–∞—è–≤–æ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
            for key, value in data.items():
                if key not in ['items', 'requests']:
                    print(f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {key} = {value}")
        else:
            pickup_requests = []
            print(f"üìä –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(data)}")
        
        return pickup_requests
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.text}")
        return []

def analyze_pickup_request_structure(pickup_requests):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†...")
    
    if not pickup_requests:
        print("‚ö†Ô∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return {}
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(pickup_requests)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫
    analysis_results = {
        'total_requests': len(pickup_requests),
        'sample_structures': [],
        'common_fields': set(),
        'cargo_related_fields': [],
        'unique_fields': set()
    }
    
    for i, request in enumerate(pickup_requests[:5]):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞—è–≤–æ–∫
        print(f"\nüìã –ó–ê–Ø–í–ö–ê {i+1}:")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(request)}")
        
        if isinstance(request, dict):
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è
            fields = list(request.keys())
            analysis_results['unique_fields'].update(fields)
            
            if i == 0:
                analysis_results['common_fields'] = set(fields)
            else:
                analysis_results['common_fields'] = analysis_results['common_fields'].intersection(set(fields))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            print(f"   –ü–æ–ª—è –≤ –∑–∞—è–≤–∫–µ ({len(fields)}): {', '.join(fields)}")
            
            # –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–∞–º–∏
            cargo_fields = []
            for field in fields:
                field_lower = field.lower()
                if any(keyword in field_lower for keyword in ['cargo', '–≥—Ä—É–∑', 'item', '—Ç–æ–≤–∞—Ä']):
                    cargo_fields.append(field)
                    value = request.get(field)
                    print(f"   üöõ –ì–†–£–ó-–°–í–Ø–ó–ê–ù–ù–û–ï –ü–û–õ–ï: {field} = {value}")
            
            if cargo_fields:
                analysis_results['cargo_related_fields'].extend(cargo_fields)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            key_fields = ['id', 'request_number', 'status', 'cargo_id', 'cargo_number', 'items', 'cargo_list']
            for field in key_fields:
                if field in request:
                    value = request[field]
                    print(f"   üîë {field}: {value}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ items, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
            if 'items' in request and isinstance(request['items'], list):
                items = request['items']
                print(f"   üì¶ ITEMS –≤ –∑–∞—è–≤–∫–µ: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                for j, item in enumerate(items[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 item'–∞
                    if isinstance(item, dict):
                        item_fields = list(item.keys())
                        print(f"      Item {j+1} –ø–æ–ª—è: {', '.join(item_fields)}")
                        
                        # –ò—â–µ–º cargo_number –∏–ª–∏ cargo_id –≤ items
                        for cargo_field in ['cargo_id', 'cargo_number', 'id', 'number']:
                            if cargo_field in item:
                                print(f"      üéØ –ù–ê–ô–î–ï–ù –ì–†–£–ó –í ITEM: {cargo_field} = {item[cargo_field]}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sample_structure = {
                'fields': fields,
                'cargo_fields': cargo_fields,
                'has_items': 'items' in request,
                'items_count': len(request.get('items', [])) if isinstance(request.get('items'), list) else 0
            }
            analysis_results['sample_structures'].append(sample_structure)
        
        print("   " + "-" * 50)
    
    return analysis_results

def test_alternative_pickup_endpoints(operator_token):
    """–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• ENDPOINTS –î–õ–Ø –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints
    alternative_endpoints = [
        "/api/admin/courier/pickup-requests",
        "/api/courier/pickup-requests", 
        "/api/operator/courier-requests",
        "/api/admin/cargo-requests",
        "/api/cargo-requests",
        "/api/pickup-requests",
        "/api/operator/warehouse-notifications",
        "/api/courier/requests/new"
    ]
    
    working_endpoints = []
    
    for endpoint in alternative_endpoints:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint}...")
        
        response = requests.get(f"{API_BASE}{endpoint.replace('/api', '')}", headers=headers)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"   ‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                
                # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if isinstance(data, list):
                    count = len(data)
                    print(f"   üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                elif isinstance(data, dict):
                    if 'items' in data:
                        count = len(data['items'])
                        print(f"   üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å {count} items")
                    elif 'requests' in data:
                        count = len(data['requests'])
                        print(f"   üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å {count} requests")
                    else:
                        print(f"   üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏: {list(data.keys())}")
                
                working_endpoints.append({
                    'endpoint': endpoint,
                    'data': data,
                    'count': count if 'count' in locals() else 0
                })
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        elif response.status_code == 404:
            print(f"   ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif response.status_code == 403:
            print(f"   ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (403)")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    return working_endpoints

def find_cargo_deletion_strategy(analysis_results, working_endpoints):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
    print("\nüéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†...")
    
    strategies = []
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä—è–º—ã–µ cargo_id/cargo_number –≤ –∑–∞—è–≤–∫–∞—Ö
    if analysis_results.get('cargo_related_fields'):
        print("‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã –≤ –∑–∞—è–≤–∫–∞—Ö")
        print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {set(analysis_results['cargo_related_fields'])}")
        strategies.append({
            'name': 'direct_cargo_fields',
            'description': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—ã–µ –ø–æ–ª—è cargo_id/cargo_number –≤ –∑–∞—è–≤–∫–∞—Ö',
            'fields': list(set(analysis_results['cargo_related_fields']))
        })
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Items –≤ –∑–∞—è–≤–∫–∞—Ö
    has_items = any(s.get('has_items', False) for s in analysis_results.get('sample_structures', []))
    if has_items:
        print("‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ì—Ä—É–∑—ã –≤ –º–∞—Å—Å–∏–≤–µ items –∑–∞—è–≤–æ–∫")
        print("   –ó–∞—è–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –º–∞—Å—Å–∏–≤ items —Å –≥—Ä—É–∑–∞–º–∏")
        strategies.append({
            'name': 'items_array',
            'description': '–ò–∑–≤–ª–µ–∫–∞—Ç—å –≥—Ä—É–∑—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ items –≤ –∑–∞—è–≤–∫–∞—Ö',
            'method': '–ü–µ—Ä–µ–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ ‚Üí –ø–æ–ª—É—á–∏—Ç—å items ‚Üí –∏–∑–≤–ª–µ—á—å cargo_id/cargo_number'
        })
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –°–≤—è–∑–∞–Ω–Ω—ã–µ endpoints
    if working_endpoints:
        print("‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö endpoints")
        for endpoint_info in working_endpoints:
            endpoint = endpoint_info['endpoint']
            count = endpoint_info.get('count', 0)
            print(f"   {endpoint}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        strategies.append({
            'name': 'related_endpoints',
            'description': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤',
            'endpoints': [e['endpoint'] for e in working_endpoints]
        })
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É –≥—Ä—É–∑–∞
    print("‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É 'pickup_requested'")
    print("   –ù–∞–π—Ç–∏ –≤—Å–µ –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pickup_requested –∏–ª–∏ similar")
    strategies.append({
        'name': 'status_based_search',
        'description': '–ù–∞–π—Ç–∏ –≥—Ä—É–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å –∑–∞–±–æ—Ä–æ–º',
        'statuses': ['pickup_requested', 'assigned_to_courier', 'picked_up_by_courier']
    })
    
    return strategies

def test_cargo_search_by_status(operator_token):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å –∑–∞–±–æ—Ä–æ–º"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ì–†–£–ó–û–í –ü–û –°–¢–ê–¢–£–°–£ –ó–ê–ë–û–†–ê...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    # Endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
    cargo_endpoints = [
        "/api/operator/cargo/available-for-placement",
        "/api/cargo/all",
        "/api/operator/cargo/list"
    ]
    
    pickup_related_cargo = []
    
    for endpoint in cargo_endpoints:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {endpoint}...")
        
        response = requests.get(f"{API_BASE}{endpoint.replace('/api', '')}", headers=headers)
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"   ‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤
                if isinstance(data, list):
                    cargo_list = data
                elif isinstance(data, dict):
                    cargo_list = data.get('items', data.get('cargo', []))
                else:
                    cargo_list = []
                
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {len(cargo_list)}")
                
                # –ò—â–µ–º –≥—Ä—É–∑—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º
                pickup_cargo = []
                for cargo in cargo_list:
                    if isinstance(cargo, dict):
                        status = cargo.get('status', '').lower()
                        processing_status = cargo.get('processing_status', '').lower()
                        
                        # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º
                        pickup_keywords = ['pickup', '–∑–∞–±–æ—Ä', 'courier', '–∫—É—Ä—å–µ—Ä']
                        if any(keyword in status for keyword in pickup_keywords) or \
                           any(keyword in processing_status for keyword in pickup_keywords):
                            pickup_cargo.append(cargo)
                            print(f"   üéØ –ù–ê–ô–î–ï–ù –ì–†–£–ó –ù–ê –ó–ê–ë–û–†: {cargo.get('cargo_number', 'N/A')} - —Å—Ç–∞—Ç—É—Å: {status}")
                
                if pickup_cargo:
                    pickup_related_cargo.extend(pickup_cargo)
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pickup_cargo)} –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–±–æ—Ä–æ–º")
                else:
                    print(f"   ‚ö†Ô∏è –ì—Ä—É–∑—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    
    return pickup_related_cargo

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ")
    print("=" * 100)
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    operator_token = test_warehouse_operator_auth()
    if not operator_token:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
    pickup_requests = test_pickup_requests_endpoint(operator_token)
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
    analysis_results = analyze_pickup_request_structure(pickup_requests)
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints
    working_endpoints = test_alternative_pickup_endpoints(operator_token)
    
    # 5. –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    pickup_cargo = test_cargo_search_by_status(operator_token)
    
    # 6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
    strategies = find_cargo_deletion_strategy(analysis_results, working_endpoints)
    
    # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 100)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†")
    print("=" * 100)
    
    print(f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: –£—Å–ø–µ—à–Ω–æ")
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π endpoint /api/operator/pickup-requests: {'–†–∞–±–æ—Ç–∞–µ—Ç' if pickup_requests else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {len(pickup_requests)}")
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö endpoints: {len(working_endpoints)}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–±–æ—Ä–æ–º: {len(pickup_cargo)}")
    
    print(f"\nüìã –°–¢–†–£–ö–¢–£–†–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†:")
    if analysis_results.get('common_fields'):
        print(f"   –û–±—â–∏–µ –ø–æ–ª—è –≤–æ –≤—Å–µ—Ö –∑–∞—è–≤–∫–∞—Ö: {', '.join(analysis_results['common_fields'])}")
    if analysis_results.get('cargo_related_fields'):
        print(f"   –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥—Ä—É–∑–∞–º–∏: {', '.join(set(analysis_results['cargo_related_fields']))}")
    
    print(f"\nüîó –†–ê–ë–û–¢–ê–Æ–©–ò–ï ENDPOINTS:")
    for endpoint_info in working_endpoints:
        endpoint = endpoint_info['endpoint']
        count = endpoint_info.get('count', 0)
        print(f"   {endpoint}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\nüéØ –°–¢–†–ê–¢–ï–ì–ò–ò –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†:")
    for i, strategy in enumerate(strategies, 1):
        print(f"   {i}. {strategy['name']}: {strategy['description']}")
    
    print(f"\nüöõ –ù–ê–ô–î–ï–ù–ù–´–ï –ì–†–£–ó–´ –ù–ê –ó–ê–ë–û–†:")
    for cargo in pickup_cargo[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        cargo_number = cargo.get('cargo_number', 'N/A')
        status = cargo.get('status', 'N/A')
        processing_status = cargo.get('processing_status', 'N/A')
        print(f"   {cargo_number}: —Å—Ç–∞—Ç—É—Å={status}, –æ–±—Ä–∞–±–æ—Ç–∫–∞={processing_status}")
    
    if len(pickup_cargo) > 5:
        print(f"   ... –∏ –µ—â–µ {len(pickup_cargo) - 5} –≥—Ä—É–∑–æ–≤")
    
    print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("–ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    print("1. ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("2. ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–ø–æ—Å–æ–±—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
    print("3. ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤")
    print("4. ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—â–∏–µ endpoints –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º")
    
    if strategies:
        print(f"\n–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:")
        best_strategy = strategies[0]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—ã—á–Ω–æ —Å–∞–º–∞—è –ø—Ä—è–º–∞—è
        print(f"   {best_strategy['name']}: {best_strategy['description']}")
    
    print(f"\n–î–õ–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ü–û–õ–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í:")
    print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ –∑–∞—è–≤–∫–∞—Ö")
    print("2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º endpoints")
    print("3. –û–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
    print("4. –£—á–∏—Ç—ã–≤–∞—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –∏ –≥—Ä—É–∑–∞–º–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏")

if __name__ == "__main__":
    main()