#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ TAJLINE.TJ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´:
1. ‚úÖ UUID –¥–ª—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: notification_id = f"WN_{str(uuid.uuid4())}"
2. ‚úÖ UUID –¥–ª—è ID –≥—Ä—É–∑–æ–≤: cargo_id = str(uuid.uuid4()) 
3. ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤: cargo_number = f"{cargo_id[:6]}/{str(index + 1).zfill(2)}"
4. ‚úÖ Endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: /api/admin/cleanup-duplicate-notifications

–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 
3. –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /accept
4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /complete —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –£–ù–ò–ö–ê–õ–¨–ù–´–• –≥—Ä—É–∑–æ–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ UUID (–Ω–µ request_number)
7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã
8. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ö–∞–∂–¥—ã–π –≥—Ä—É–∑ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (UUID-based) –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ.
"""

import requests
import json
import os
import time
import uuid
from datetime import datetime
from collections import Counter

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-tracker-28.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class FinalDuplicationFixTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        self.test_results = []
        self.created_cargos = []
        self.notification_ids = []
        
    def log_result(self, test_name: str, success: bool, details: str, data=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat(),
            "data": data
        }
        self.test_results.append(result)
        print(f"{status} {test_name}: {details}")
        if data and isinstance(data, dict) and len(str(data)) < 500:
            print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False, indent=2)}")
        print()
        
    def authenticate_warehouse_operator(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            credentials_to_try = [
                ("+79777888999", "warehouse123", "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞"),
                ("+79999888777", "admin123", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (fallback)")
            ]
            
            for phone, password, description in credentials_to_try:
                login_data = {
                    "phone": phone,
                    "password": password
                }
                
                response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
                
                if response.status_code == 200:
                    data = response.json()
                    self.auth_token = data.get("access_token")
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.auth_token}",
                        "Content-Type": "application/json"
                    })
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_response = self.session.get(f"{API_BASE}/auth/me")
                    if user_response.status_code == 200:
                        self.current_user = user_response.json()
                        user_info = f"'{self.current_user.get('full_name')}' (–Ω–æ–º–µ—Ä: {self.current_user.get('user_number')}, —Ä–æ–ª—å: {self.current_user.get('role')})"
                        
                        self.log_result(
                            "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                            True,
                            f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {description}: {user_info}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω",
                            {"phone": phone, "role": self.current_user.get('role')}
                        )
                        return True
                    
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                False,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
            )
            return False
                
        except Exception as e:
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return False
    
    def test_cleanup_endpoint(self):
        """–¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            response = self.session.post(f"{API_BASE}/admin/cleanup-duplicate-notifications")
            
            if response.status_code == 200:
                data = response.json()
                deleted_count = data.get("deleted_duplicates", 0)
                before_count = data.get("before_count", 0)
                after_count = data.get("after_count", 0)
                
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                    True,
                    f"Endpoint /api/admin/cleanup-duplicate-notifications —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {deleted_count}, –ë—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {before_count}, –°—Ç–∞–ª–æ: {after_count}",
                    data
                )
                return True
            else:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                    False,
                    f"–û—à–∏–±–∫–∞ cleanup endpoint: HTTP {response.status_code}, {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLEANUP ENDPOINT",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ cleanup endpoint: {str(e)}"
            )
            return False
    
    def get_warehouse_notifications(self):
        """–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID"""
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
            
            if response.status_code == 200:
                data = response.json()
                notifications = data if isinstance(data, list) else data.get("notifications", [])
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notification_ids = [n.get("id") for n in notifications if n.get("id")]
                unique_ids = set(notification_ids)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID –≤ ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                uuid_format_count = 0
                wn_prefix_count = 0
                
                for notif_id in notification_ids:
                    if notif_id:
                        if notif_id.startswith("WN_"):
                            wn_prefix_count += 1
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                            uuid_part = notif_id[3:]  # –£–±–∏—Ä–∞–µ–º "WN_"
                            try:
                                uuid.UUID(uuid_part)
                                uuid_format_count += 1
                            except ValueError:
                                pass
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π UUID —Ñ–æ—Ä–º–∞—Ç
                            try:
                                uuid.UUID(notif_id)
                                uuid_format_count += 1
                            except ValueError:
                                pass
                
                self.notification_ids = notification_ids
                
                details = (
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. "
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(unique_ids)}, "
                    f"UUID —Ñ–æ—Ä–º–∞—Ç: {uuid_format_count}/{len(notification_ids)}, "
                    f"WN_ –ø—Ä–µ—Ñ–∏–∫—Å: {wn_prefix_count}/{len(notification_ids)}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                duplicates = [id for id, count in Counter(notification_ids).items() if count > 1]
                if duplicates:
                    details += f", –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ ID: {duplicates}"
                
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –£–í–ï–î–û–ú–õ–ï–ù–ò–ô",
                    len(unique_ids) == len(notification_ids) and uuid_format_count > 0,
                    details,
                    {
                        "total_notifications": len(notifications),
                        "unique_ids": len(unique_ids),
                        "uuid_format_count": uuid_format_count,
                        "wn_prefix_count": wn_prefix_count,
                        "duplicates": duplicates,
                        "sample_ids": notification_ids[:5]
                    }
                )
                return notifications
            else:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –£–í–ï–î–û–ú–õ–ï–ù–ò–ô",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: HTTP {response.status_code}, {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –£–í–ï–î–û–ú–õ–ï–ù–ò–ô",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}"
            )
            return []
    
    def analyze_existing_cargo_numbers(self):
        """–¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤
            response = self.session.get(f"{API_BASE}/cargo/all?per_page=100")
            
            if response.status_code == 200:
                data = response.json()
                cargos = data.get("items", []) if isinstance(data, dict) else data
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤
                cargo_numbers = [c.get("cargo_number") for c in cargos if c.get("cargo_number")]
                cargo_ids = [c.get("id") for c in cargos if c.get("id")]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤
                unique_numbers = set(cargo_numbers)
                number_duplicates = [num for num, count in Counter(cargo_numbers).items() if count > 1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
                unique_ids = set(cargo_ids)
                id_duplicates = [id for id, count in Counter(cargo_ids).items() if count > 1]
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
                uuid_based_count = 0
                request_based_count = 0
                sequential_2501_count = 0
                
                for number in cargo_numbers:
                    if "/" in number and len(number.split("/")[0]) >= 6:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID-based —Ñ–æ—Ä–º–∞—Ç (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ UUID)
                        first_part = number.split("/")[0]
                        if len(first_part) == 6 and not first_part.startswith("100"):
                            uuid_based_count += 1
                        elif first_part.startswith("100"):
                            request_based_count += 1
                    elif number.startswith("2501"):
                        sequential_2501_count += 1
                
                details = (
                    f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(cargos)} –≥—Ä—É–∑–æ–≤. "
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(unique_numbers)}, "
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(unique_ids)}. "
                    f"UUID-based: {uuid_based_count}, "
                    f"Request-based: {request_based_count}, "
                    f"Sequential (2501XXX): {sequential_2501_count}"
                )
                
                if number_duplicates:
                    details += f". –ù–ê–ô–î–ï–ù–û {len(number_duplicates)} –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• –ù–û–ú–ï–†–ê!"
                
                if id_duplicates:
                    details += f". –ù–ê–ô–î–ï–ù–û {len(id_duplicates)} –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–• ID!"
                
                success = len(number_duplicates) == 0 and len(id_duplicates) == 0 and uuid_based_count > 0
                
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ù–û–ú–ï–†–û–í –ì–†–£–ó–û–í",
                    success,
                    details,
                    {
                        "total_cargos": len(cargos),
                        "unique_numbers": len(unique_numbers),
                        "unique_ids": len(unique_ids),
                        "number_duplicates": number_duplicates,
                        "id_duplicates": id_duplicates,
                        "uuid_based_count": uuid_based_count,
                        "request_based_count": request_based_count,
                        "sequential_2501_count": sequential_2501_count,
                        "sample_numbers": cargo_numbers[:10]
                    }
                )
                return success
            else:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ù–û–ú–ï–†–û–í –ì–†–£–ó–û–í",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤: HTTP {response.status_code}, {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ù–û–ú–ï–†–û–í –ì–†–£–ó–û–í",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤: {str(e)}"
            )
            return False
    
    def test_full_workflow_without_duplicates(self, notifications):
        """–¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π workflow –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            if not notifications:
                self.log_result(
                    "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    True,
                    "–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è workflow - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"
                )
                return True
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_notification = None
            for notification in notifications:
                if notification.get("status") in ["pending_acceptance", "pending"]:
                    test_notification = notification
                    break
            
            if not test_notification:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
                test_notification = notifications[0]
            
            notification_id = test_notification.get("id")
            original_status = test_notification.get("status")
            
            # –®–∞–≥ 1: –ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if original_status in ["pending_acceptance", "pending"]:
                accept_response = self.session.post(f"{API_BASE}/operator/warehouse-notifications/{notification_id}/accept")
                
                if accept_response.status_code != 200:
                    self.log_result(
                        "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í - –ü—Ä–∏–Ω—è—Ç–∏–µ",
                        False,
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: HTTP {accept_response.status_code}, {accept_response.text}"
                    )
                    return False
            
            # –®–∞–≥ 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ review request
            complete_data = {
                "sender_full_name": "–¢–µ—Å—Ç –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏",
                "sender_phone": "+79111111111",
                "recipient_full_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏", 
                "recipient_phone": "+79222222222",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å",
                "cargo_items": [
                    {"name": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ 1", "weight": "5", "price": "100"},
                    {"name": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ 2", "weight": "3", "price": "150"}
                ],
                "payment_method": "cash",
                "delivery_method": "standard"
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è
            before_count = self.get_cargo_count()
            
            complete_response = self.session.post(
                f"{API_BASE}/operator/warehouse-notifications/{notification_id}/complete",
                json=complete_data
            )
            
            if complete_response.status_code == 200:
                result = complete_response.json()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è
                time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                after_count = self.get_cargo_count()
                created_count = after_count - before_count
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
                created_cargos = result.get("created_cargos", [])
                self.created_cargos.extend(created_cargos)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
                created_numbers = [c.get("cargo_number") for c in created_cargos]
                created_ids = [c.get("id") for c in created_cargos]
                
                unique_numbers = len(set(created_numbers))
                unique_ids = len(set(created_ids))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID-based —Ñ–æ—Ä–º–∞—Ç
                uuid_based_numbers = 0
                for number in created_numbers:
                    if "/" in number:
                        first_part = number.split("/")[0]
                        if len(first_part) == 6 and not first_part.startswith("100"):
                            uuid_based_numbers += 1
                
                success = (
                    created_count == len(created_cargos) and
                    unique_numbers == len(created_numbers) and
                    unique_ids == len(created_ids) and
                    uuid_based_numbers == len(created_numbers)
                )
                
                details = (
                    f"Workflow –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–∑–æ–≤: {created_count}, "
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {unique_numbers}/{len(created_numbers)}, "
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {unique_ids}/{len(created_ids)}, "
                    f"UUID-based –Ω–æ–º–µ—Ä–∞: {uuid_based_numbers}/{len(created_numbers)}"
                )
                
                if not success:
                    details += " - –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–¨–Æ!"
                
                self.log_result(
                    "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    success,
                    details,
                    {
                        "notification_id": notification_id,
                        "created_count": created_count,
                        "created_numbers": created_numbers,
                        "created_ids": created_ids,
                        "unique_numbers": unique_numbers,
                        "unique_ids": unique_ids,
                        "uuid_based_numbers": uuid_based_numbers
                    }
                )
                return success
            else:
                self.log_result(
                    "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    False,
                    f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: HTTP {complete_response.status_code}, {complete_response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–û–õ–ù–´–ô WORKFLOW –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ workflow: {str(e)}"
            )
            return False
    
    def test_uniqueness_at_creation(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"""
        try:
            if not self.created_cargos:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                    True,
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"
                )
                return True
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
            cargo_ids = [c.get("id") for c in self.created_cargos]
            cargo_numbers = [c.get("cargo_number") for c in self.created_cargos]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            unique_ids = len(set(cargo_ids))
            unique_numbers = len(set(cargo_numbers))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID —Ñ–æ—Ä–º–∞—Ç ID
            uuid_format_ids = 0
            for cargo_id in cargo_ids:
                try:
                    uuid.UUID(cargo_id)
                    uuid_format_ids += 1
                except ValueError:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID-based –Ω–æ–º–µ—Ä–∞
            uuid_based_numbers = 0
            for number in cargo_numbers:
                if "/" in number:
                    first_part = number.split("/")[0]
                    if len(first_part) == 6 and not first_part.startswith("100"):
                        uuid_based_numbers += 1
            
            success = (
                unique_ids == len(cargo_ids) and
                unique_numbers == len(cargo_numbers) and
                uuid_format_ids == len(cargo_ids) and
                uuid_based_numbers == len(cargo_numbers)
            )
            
            details = (
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.created_cargos)} —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤. "
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {unique_ids}/{len(cargo_ids)}, "
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {unique_numbers}/{len(cargo_numbers)}, "
                f"UUID —Ñ–æ—Ä–º–∞—Ç ID: {uuid_format_ids}/{len(cargo_ids)}, "
                f"UUID-based –Ω–æ–º–µ—Ä–∞: {uuid_based_numbers}/{len(cargo_numbers)}"
            )
            
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                success,
                details,
                {
                    "total_created": len(self.created_cargos),
                    "unique_ids": unique_ids,
                    "unique_numbers": unique_numbers,
                    "uuid_format_ids": uuid_format_ids,
                    "uuid_based_numbers": uuid_based_numbers,
                    "sample_ids": cargo_ids[:5],
                    "sample_numbers": cargo_numbers[:5]
                }
            )
            return success
            
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò ID –ü–†–ò –°–û–ó–î–ê–ù–ò–ò",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {str(e)}"
            )
            return False
    
    def test_repeated_workflow_no_duplicates(self, notifications):
        """–¢–µ—Å—Ç 7: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not notifications or len(notifications) < 2:
                self.log_result(
                    "–ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    True,
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return True
            
            # –ë–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            test_notification = None
            for i, notification in enumerate(notifications[1:], 1):
                if notification.get("status") in ["pending_acceptance", "pending"]:
                    test_notification = notification
                    break
            
            if not test_notification and len(notifications) > 1:
                test_notification = notifications[1]
            
            if not test_notification:
                self.log_result(
                    "–ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    True,
                    "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return True
            
            notification_id = test_notification.get("id")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –î–û –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            before_count = self.get_cargo_count()
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º workflow —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            complete_data = {
                "sender_full_name": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –¢–µ—Å—Ç –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏",
                "sender_phone": "+79333333333",
                "recipient_full_name": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 
                "recipient_phone": "+79444444444",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å",
                "cargo_items": [
                    {"name": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≥—Ä—É–∑ 1", "weight": "7", "price": "200"},
                    {"name": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≥—Ä—É–∑ 2", "weight": "4", "price": "180"}
                ],
                "payment_method": "cash",
                "delivery_method": "standard"
            }
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if test_notification.get("status") in ["pending_acceptance", "pending"]:
                accept_response = self.session.post(f"{API_BASE}/operator/warehouse-notifications/{notification_id}/accept")
                if accept_response.status_code != 200:
                    self.log_result(
                        "–ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                        False,
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: HTTP {accept_response.status_code}"
                    )
                    return False
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            complete_response = self.session.post(
                f"{API_BASE}/operator/warehouse-notifications/{notification_id}/complete",
                json=complete_data
            )
            
            if complete_response.status_code == 200:
                result = complete_response.json()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –ü–û–°–õ–ï –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                time.sleep(1)
                after_count = self.get_cargo_count()
                created_count = after_count - before_count
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
                created_cargos = result.get("created_cargos", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                new_numbers = [c.get("cargo_number") for c in created_cargos]
                new_ids = [c.get("id") for c in created_cargos]
                
                existing_numbers = [c.get("cargo_number") for c in self.created_cargos]
                existing_ids = [c.get("id") for c in self.created_cargos]
                
                number_conflicts = set(new_numbers) & set(existing_numbers)
                id_conflicts = set(new_ids) & set(existing_ids)
                
                success = len(number_conflicts) == 0 and len(id_conflicts) == 0 and created_count > 0
                
                details = (
                    f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤: {created_count}, "
                    f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–æ–º–µ—Ä–æ–≤: {len(number_conflicts)}, "
                    f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ID: {len(id_conflicts)}"
                )
                
                if number_conflicts:
                    details += f". –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –ù–û–ú–ï–†–ê: {list(number_conflicts)}"
                if id_conflicts:
                    details += f". –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï ID: {list(id_conflicts)}"
                
                self.log_result(
                    "–ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    success,
                    details,
                    {
                        "created_count": created_count,
                        "new_numbers": new_numbers,
                        "new_ids": new_ids,
                        "number_conflicts": list(number_conflicts),
                        "id_conflicts": list(id_conflicts)
                    }
                )
                return success
            else:
                self.log_result(
                    "–ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: HTTP {complete_response.status_code}, {complete_response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
            )
            return False
    
    def get_cargo_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            response = self.session.get(f"{API_BASE}/cargo/all?per_page=1")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "pagination" in data:
                    return data["pagination"].get("total_count", 0)
                elif isinstance(data, list):
                    return len(data)
                else:
                    return data.get("total_count", 0)
            return 0
        except:
            return 0
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ TAJLINE.TJ")
        print("=" * 80)
        print("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´:")
        print("1. ‚úÖ UUID –¥–ª—è ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: notification_id = f\"WN_{str(uuid.uuid4())}\"")
        print("2. ‚úÖ UUID –¥–ª—è ID –≥—Ä—É–∑–æ–≤: cargo_id = str(uuid.uuid4())")
        print("3. ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤: cargo_number = f\"{cargo_id[:6]}/{str(index + 1).zfill(2)}\"")
        print("4. ‚úÖ Endpoint –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: /api/admin/cleanup-duplicate-notifications")
        print("=" * 80)
        print()
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return
        
        # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ cleanup endpoint
        self.test_cleanup_endpoint()
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
        notifications = self.get_warehouse_notifications()
        
        # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤
        self.analyze_existing_cargo_numbers()
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π workflow –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.test_full_workflow_without_duplicates(notifications)
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.test_uniqueness_at_creation()
        
        # –¢–µ—Å—Ç 7: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.test_repeated_workflow_no_duplicates(notifications)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_final_summary()
    
    def print_final_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - successful_tests
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in self.test_results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status} {result['test']}")
            print(f"   {result['details']}")
            print()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        duplication_fixed = True
        uuid_implementation = True
        cleanup_working = True
        
        for result in self.test_results:
            if "–î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï" in result['test'] and not result['success']:
                duplication_fixed = False
            if "UUID" in result['test'] or "–£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò" in result['test']:
                if not result['success']:
                    uuid_implementation = False
            if "CLEANUP" in result['test'] and not result['success']:
                cleanup_working = False
        
        if duplication_fixed:
            print("‚úÖ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì—Ä—É–∑—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –∏ ID")
        else:
            print("‚ùå –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é")
        
        if uuid_implementation:
            print("‚úÖ UUID –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≥—Ä—É–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç UUID —Ñ–æ—Ä–º–∞—Ç")
        else:
            print("‚ùå UUID –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º—ã —Å UUID —Ñ–æ—Ä–º–∞—Ç–æ–º ID")
        
        if cleanup_working:
            print("‚úÖ CLEANUP ENDPOINT: Endpoint –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        else:
            print("‚ùå CLEANUP ENDPOINT: –ü—Ä–æ–±–ª–µ–º—ã —Å endpoint –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 85:
            print("\nüéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("\nüö® –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–´–Ø–í–ò–õ–ê –ü–†–û–ë–õ–ï–ú–´!")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.")
        
        print("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = FinalDuplicationFixTester()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()