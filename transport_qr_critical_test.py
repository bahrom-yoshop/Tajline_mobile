#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï QR –ö–û–î–´ –¢–†–ê–ù–°–ü–û–†–¢–ê - –ù–∞—Å—Ç–æ—è—â–∏–µ —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
=====================================================================================================

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è 
–Ω–∞—Å—Ç–æ—è—â–∏–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ TAJLINE, –∫–∞–∫ –¥–ª—è –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
1. **QR –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TAJLINE**: TAJLINE|TRANSPORT|{transport_number}|{timestamp}
2. **–ù–∞—Å—Ç–æ—è—â–µ–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è qrcode –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ base64
3. **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö QR**: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ scan-transport –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
4. **–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏**: –ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ

ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **POST /api/transport/{transport_id}/generate-qr** - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
2. **GET /api/transport/{transport_id}/qr** - –ü–æ–ª—É—á–µ–Ω–∏–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö
3. **POST /api/logistics/cargo-to-transport/scan-transport** - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR
4. **GET /api/transport/list-with-qr** - –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**: warehouse_operator (+79777888999/warehouse123)
2. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR**:
   - QR –¥–∞–Ω–Ω—ã–µ: TAJLINE|TRANSPORT|{transport_number}|{timestamp}
   - QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: base64 PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ QR –∫–æ–¥–∞
   - –ü–æ–ª—è: qr_code, qr_image_base64, qr_generated_at, qr_generated_by
3. **–ü–æ–ª—É—á–µ–Ω–∏–µ QR**:
   - –í–æ–∑–≤—Ä–∞—Ç qr_image: "data:image/png;base64,{image_data}"
   - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ (transport_number, driver_name, direction)
4. **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR**:
   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ TAJLINE|TRANSPORT|...
   - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º TRANSPORT_...
   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ transport_number –∏–∑ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)
- ‚úÖ QR –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TAJLINE|TRANSPORT|{transport_number}|{timestamp}
- ‚úÖ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ data:image/png;base64,{image_data}
- ‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
- ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
- ‚úÖ –í—Å–µ –ø–æ–ª—è QR –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import sys
import os
import re
import base64
from datetime import datetime
from typing import Dict, List, Optional, Any

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class TransportQRCriticalTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "transport_found": False,
            "qr_generation_success": False,
            "qr_retrieval_success": False,
            "qr_scanning_success": False,
            "transport_list_success": False,
            "backward_compatibility_success": False,
            "detailed_results": {},
            "critical_issues": []
        }
        
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def find_or_create_transport(self) -> Optional[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöõ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
            response = self.session.get(f"{API_BASE}/transport/list")
            
            if response.status_code == 200:
                data = response.json()
                transports = data.get("items", []) if isinstance(data, dict) else data
                
                if transports and len(transports) > 0:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    transport = transports[0]
                    self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport.get('transport_number')} (ID: {transport.get('id')})")
                    self.test_results["transport_found"] = True
                    return transport
                else:
                    self.log("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π...")
                    return self.create_test_transport()
            else:
                self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {response.status_code}")
                return self.create_test_transport()
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
            return self.create_test_transport()
    
    def create_test_transport(self) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
        self.log("üöõ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        try:
            transport_data = {
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å QR",
                "driver_phone": "+79999999999",
                "transport_number": f"TEST_QR_{datetime.now().strftime('%H%M%S')}",
                "capacity_kg": 1000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            }
            
            response = self.session.post(f"{API_BASE}/transport/create", json=transport_data)
            
            if response.status_code == 200:
                transport = response.json()
                self.log(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport.get('transport_number')} (ID: {transport.get('id')})")
                self.test_results["transport_found"] = True
                return transport
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
            return None
    
    def test_qr_generation(self, transport: Dict[str, Any]) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ QR –∫–æ–¥–∞")
        self.log("=" * 60)
        
        transport_id = transport.get("id")
        transport_number = transport.get("transport_number")
        
        try:
            response = self.session.post(f"{API_BASE}/transport/{transport_id}/generate-qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                required_fields = ["qr_code", "qr_image_base64", "qr_generated_at", "qr_generated_by"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}", "ERROR")
                    self.test_results["critical_issues"].append(f"QR Generation: Missing fields {missing_fields}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö
                qr_code = data.get("qr_code", "")
                if not qr_code.startswith("TAJLINE|TRANSPORT|"):
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö: {qr_code}", "ERROR")
                    self.test_results["critical_issues"].append(f"QR Generation: Wrong format {qr_code}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É QR –¥–∞–Ω–Ω—ã—Ö
                qr_parts = qr_code.split("|")
                if len(qr_parts) != 4 or qr_parts[0] != "TAJLINE" or qr_parts[1] != "TRANSPORT":
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ QR –¥–∞–Ω–Ω—ã—Ö: {qr_parts}", "ERROR")
                    self.test_results["critical_issues"].append(f"QR Generation: Wrong structure {qr_parts}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º transport_number –≤ QR
                qr_transport_number = qr_parts[2]
                if qr_transport_number != transport_number:
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π transport_number –≤ QR: {qr_transport_number} != {transport_number}", "ERROR")
                    self.test_results["critical_issues"].append(f"QR Generation: Wrong transport_number {qr_transport_number}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                qr_image = data.get("qr_image_base64", "")
                if not qr_image or not self.is_valid_base64_image(qr_image):
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR –∫–æ–¥–∞", "ERROR")
                    self.test_results["critical_issues"].append("QR Generation: Invalid base64 image")
                    return False
                
                self.log(f"‚úÖ QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
                self.log(f"   - QR –¥–∞–Ω–Ω—ã–µ: {qr_code}")
                self.log(f"   - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data.get('qr_generated_at')}")
                self.log(f"   - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {data.get('qr_generated_by')}")
                self.log(f"   - Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–í–∞–ª–∏–¥–Ω–æ–µ' if self.is_valid_base64_image(qr_image) else '–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ'}")
                
                self.test_results["qr_generation_success"] = True
                self.test_results["detailed_results"]["qr_generation"] = data
                return True
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {response.status_code} - {response.text}", "ERROR")
                self.test_results["critical_issues"].append(f"QR Generation: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {e}", "ERROR")
            self.test_results["critical_issues"].append(f"QR Generation: Exception {e}")
            return False
    
    def test_qr_retrieval(self, transport: Dict[str, Any]) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 2: –ü–æ–ª—É—á–µ–Ω–∏–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.log("=" * 60)
        
        transport_id = transport.get("id")
        
        try:
            response = self.session.get(f"{API_BASE}/transport/{transport_id}/qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ qr_image –ø–æ–ª—è
                if "qr_image" not in data:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ qr_image", "ERROR")
                    self.test_results["critical_issues"].append("QR Retrieval: Missing qr_image field")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç qr_image
                qr_image = data.get("qr_image", "")
                if not qr_image.startswith("data:image/png;base64,"):
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç qr_image: {qr_image[:50]}...", "ERROR")
                    self.test_results["critical_issues"].append("QR Retrieval: Wrong qr_image format")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                required_transport_fields = ["transport_number", "driver_name", "direction"]
                missing_fields = [field for field in required_transport_fields if field not in data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {missing_fields}", "ERROR")
                    self.test_results["critical_issues"].append(f"QR Retrieval: Missing transport fields {missing_fields}")
                    return False
                
                self.log(f"‚úÖ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:")
                self.log(f"   - –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: data:image/png;base64,...")
                self.log(f"   - –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {data.get('transport_number')}")
                self.log(f"   - –í–æ–¥–∏—Ç–µ–ª—å: {data.get('driver_name')}")
                self.log(f"   - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('direction')}")
                
                self.test_results["qr_retrieval_success"] = True
                self.test_results["detailed_results"]["qr_retrieval"] = data
                return True
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR: {response.status_code} - {response.text}", "ERROR")
                self.test_results["critical_issues"].append(f"QR Retrieval: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR: {e}", "ERROR")
            self.test_results["critical_issues"].append(f"QR Retrieval: Exception {e}")
            return False
    
    def test_qr_scanning_new_format(self, transport: Dict[str, Any]) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
        self.log("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º QR –∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        qr_generation_data = self.test_results["detailed_results"].get("qr_generation", {})
        qr_code = qr_generation_data.get("qr_code")
        
        if not qr_code:
            self.log("‚ùå QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞", "ERROR")
            return False
        
        try:
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": qr_code
            })
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                if not data.get("success", False):
                    self.log(f"‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É—Å–ø–µ—à–Ω–æ: {data.get('message', 'Unknown error')}", "ERROR")
                    self.test_results["critical_issues"].append(f"QR Scanning: Not successful - {data.get('message')}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ transport_number
                scanned_transport_number = data.get("transport_number")
                expected_transport_number = transport.get("transport_number")
                
                if scanned_transport_number != expected_transport_number:
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π transport_number: {scanned_transport_number} != {expected_transport_number}", "ERROR")
                    self.test_results["critical_issues"].append(f"QR Scanning: Wrong transport_number {scanned_transport_number}")
                    return False
                
                self.log(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ:")
                self.log(f"   - QR –∫–æ–¥: {qr_code}")
                self.log(f"   - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π transport_number: {scanned_transport_number}")
                self.log(f"   - –°–µ—Å—Å–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {data.get('session_id', 'N/A')}")
                
                self.test_results["qr_scanning_success"] = True
                self.test_results["detailed_results"]["qr_scanning"] = data
                return True
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR: {response.status_code} - {response.text}", "ERROR")
                self.test_results["critical_issues"].append(f"QR Scanning: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR: {e}", "ERROR")
            self.test_results["critical_issues"].append(f"QR Scanning: Exception {e}")
            return False
    
    def test_backward_compatibility(self, transport: Dict[str, Any]) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        self.log("\nüéØ –°–¶–ï–ù–ê–†–ò–ô 4: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        self.log("=" * 60)
        
        transport_number = transport.get("transport_number")
        old_format_qr = f"TRANSPORT_{transport_number}_{int(datetime.now().timestamp())}"
        
        try:
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": old_format_qr
            })
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                if not data.get("success", False):
                    self.log(f"‚ùå –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {data.get('message', 'Unknown error')}", "ERROR")
                    self.test_results["critical_issues"].append(f"Backward Compatibility: Not supported - {data.get('message')}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ transport_number –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                scanned_transport_number = data.get("transport_number")
                
                if scanned_transport_number != transport_number:
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {scanned_transport_number} != {transport_number}", "ERROR")
                    self.test_results["critical_issues"].append(f"Backward Compatibility: Wrong extraction {scanned_transport_number}")
                    return False
                
                self.log(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                self.log(f"   - –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç QR: {old_format_qr}")
                self.log(f"   - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π transport_number: {scanned_transport_number}")
                
                self.test_results["backward_compatibility_success"] = True
                self.test_results["detailed_results"]["backward_compatibility"] = data
                return True
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {response.status_code} - {response.text}", "ERROR")
                self.test_results["critical_issues"].append(f"Backward Compatibility: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}", "ERROR")
            self.test_results["critical_issues"].append(f"Backward Compatibility: Exception {e}")
            return False
    
    def test_transport_list_with_qr(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º"""
        self.log("\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º")
        self.log("=" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/transport/list-with-qr")
            
            if response.status_code == 200:
                data = response.json()
                transports = data.get("items", []) if isinstance(data, dict) else data
                
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {len(transports)} —à—Ç.")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ QR —Å—Ç–∞—Ç—É—Å–∞ —É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
                qr_enabled_count = 0
                for transport in transports:
                    if transport.get("qr_code") or transport.get("qr_generated_at"):
                        qr_enabled_count += 1
                
                self.log(f"   - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR –∫–æ–¥–∞–º–∏: {qr_enabled_count}")
                
                self.test_results["transport_list_success"] = True
                self.test_results["detailed_results"]["transport_list"] = {
                    "total_transports": len(transports),
                    "qr_enabled_transports": qr_enabled_count
                }
                return True
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {response.status_code} - {response.text}", "ERROR")
                self.test_results["critical_issues"].append(f"Transport List: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {e}", "ERROR")
            self.test_results["critical_issues"].append(f"Transport List: Exception {e}")
            return False
    
    def is_valid_base64_image(self, base64_string: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not base64_string:
                return False
            
            # –£–±–∏—Ä–∞–µ–º data URL –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            if base64_string.startswith("data:image/"):
                base64_string = base64_string.split(",", 1)[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            decoded = base64.b64decode(base64_string)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PNG –∑–∞–≥–æ–ª–æ–≤–æ–∫
            return decoded.startswith(b'\x89PNG\r\n\x1a\n')
            
        except Exception:
            return False
    
    def generate_final_report(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï QR –ö–û–î–´ –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üîß –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã—Ö QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ TAJLINE")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–¶–ï–ù–ê–†–ò–Ø–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. üöõ –ü–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {'‚úÖ –ù–ê–ô–î–ï–ù' if self.test_results['transport_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        self.log(f"  3. üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['qr_generation_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  4. üì± –ü–æ–ª—É—á–µ–Ω–∏–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['qr_retrieval_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  5. üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['qr_scanning_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  6. üîÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['backward_compatibility_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  7. üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['transport_list_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.test_results["detailed_results"]:
            self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            
            # QR Generation
            if "qr_generation" in self.test_results["detailed_results"]:
                qr_gen = self.test_results["detailed_results"]["qr_generation"]
                self.log(f"  üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR:")
                self.log(f"     - QR –¥–∞–Ω–Ω—ã–µ: {qr_gen.get('qr_code', 'N/A')}")
                self.log(f"     - –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {qr_gen.get('qr_generated_at', 'N/A')}")
                self.log(f"     - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {qr_gen.get('qr_generated_by', 'N/A')}")
            
            # Transport List
            if "transport_list" in self.test_results["detailed_results"]:
                transport_list = self.test_results["detailed_results"]["transport_list"]
                self.log(f"  üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤:")
                self.log(f"     - –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {transport_list.get('total_transports', 0)}")
                self.log(f"     - –° QR –∫–æ–¥–∞–º–∏: {transport_list.get('qr_enabled_transports', 0)}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.test_results["critical_issues"]:
            self.log(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.test_results['critical_issues'])} —à—Ç.):")
            for i, issue in enumerate(self.test_results["critical_issues"], 1):
                self.log(f"  {i}. {issue}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        all_tests_passed = all([
            self.test_results["auth_success"],
            self.test_results["transport_found"],
            self.test_results["qr_generation_success"],
            self.test_results["qr_retrieval_success"],
            self.test_results["qr_scanning_success"],
            self.test_results["backward_compatibility_success"]
        ])
        
        self.log(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if all_tests_passed:
            self.log("‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –ü–†–û–ô–î–ï–ù–´!")
            self.log("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç)")
            self.log("üìä QR –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TAJLINE|TRANSPORT|{transport_number}|{timestamp}")
            self.log("üñºÔ∏è QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ data:image/png;base64,{image_data}")
            self.log("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
            self.log("üîÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.log("üíæ –í—Å–µ –ø–æ–ª—è QR –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            self.log("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –ù–ï –ü–†–û–ô–î–ï–ù–´!")
            self.log(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.test_results['critical_issues'])} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        
        return all_tests_passed
    
    def run_critical_transport_qr_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        transport = self.find_or_create_transport()
        if not transport:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏/—Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "ERROR")
            return False
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR
        if not self.test_qr_generation(transport):
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è QR
        if not self.test_qr_retrieval(transport):
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ QR –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        if not self.test_qr_scanning_new_format(transport):
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if not self.test_backward_compatibility(transport):
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "ERROR")
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        self.test_transport_list_with_qr()
        
        # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TransportQRCriticalTester()
    
    try:
        success = tester.run_critical_transport_qr_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üéØ –ù–∞—Å—Ç–æ—è—â–∏–µ —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ TAJLINE —Å–æ–∑–¥–∞–Ω—ã")
            print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
            print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å QR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()