#!/usr/bin/env python3
"""
üéØ DATABASE VERIFICATION: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cargo_items –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://freight-qr-system.preview.emergentagent.com/api"

def test_database_verification():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cargo_items –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
    """
    print("üéØ DATABASE VERIFICATION: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cargo_items –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞")
    print("=" * 100)
    
    # Step 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (+79999888777/admin123)")
    admin_login_data = {
        "phone": "+79999888777",
        "password": "admin123"
    }
    
    try:
        admin_login_response = requests.post(f"{BACKEND_URL}/auth/login", json=admin_login_data)
        print(f"   üì° POST /api/auth/login - Status: {admin_login_response.status_code}")
        
        if admin_login_response.status_code == 200:
            admin_login_result = admin_login_response.json()
            admin_token = admin_login_result.get("access_token")
            admin_user_info = admin_login_result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: '{admin_user_info.get('full_name', 'Unknown')}' (–Ω–æ–º–µ—Ä: {admin_user_info.get('user_number', 'Unknown')}, —Ä–æ–ª—å: {admin_user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_login_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    
    admin_headers = {"Authorization": f"Bearer {admin_token}"}
    
    # Step 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    print("\n2Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –ò –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò")
    operator_login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        operator_login_response = requests.post(f"{BACKEND_URL}/auth/login", json=operator_login_data)
        if operator_login_response.status_code == 200:
            operator_login_result = operator_login_response.json()
            operator_token = operator_login_result.get("access_token")
            print(f"   ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {operator_login_response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    
    operator_headers = {"Authorization": f"Bearer {operator_token}"}
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å cargo_items
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å DB",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å DB", 
        "recipient_phone": "+992900111222",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è DB, 123",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung",
                "quantity": 2,
                "weight": 10.0,
                "price_per_kg": 200.0,
                "total_amount": 4000.0
            },
            {
                "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG", 
                "quantity": 3,
                "weight": 5.0,
                "price_per_kg": 150.0,
                "total_amount": 2250.0
            }
        ]
    }
    
    try:
        cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=operator_headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
        
        if cargo_response.status_code == 200:
            cargo_result = cargo_response.json()
            cargo_number = cargo_result.get("cargo_number")
            cargo_id = cargo_result.get("id")
            
            print(f"   üéâ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {cargo_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False
    
    # Step 3: –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–µ endpoints
    print(f"\n3Ô∏è‚É£ –ü–û–ò–°–ö –ó–ê–Ø–í–ö–ò –ß–ï–†–ï–ó –ê–î–ú–ò–ù–°–ö–ò–ï ENDPOINTS")
    
    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    admin_endpoints = [
        "/admin/cargo/all",
        "/admin/operator-cargo/all", 
        "/admin/cargo/list",
        "/operator/pickup-requests"  # –ü–æ–ø—Ä–æ–±—É–µ–º –∏ —ç—Ç–æ—Ç
    ]
    
    cargo_found = False
    for endpoint in admin_endpoints:
        try:
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {endpoint}")
            response = requests.get(f"{BACKEND_URL}{endpoint}", headers=admin_headers)
            
            if response.status_code == 200:
                data = response.json()
                print(f"      ‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                items_to_search = []
                if isinstance(data, list):
                    items_to_search = data
                    print(f"      üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items_to_search)}")
                elif isinstance(data, dict):
                    if "items" in data:
                        items_to_search = data["items"]
                        print(f"      üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items_to_search)}")
                    elif "data" in data:
                        items_to_search = data["data"]
                        print(f"      üìä –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items_to_search)}")
                    else:
                        print(f"      üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                
                # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É
                for item in items_to_search:
                    item_number = item.get("cargo_number") or item.get("request_number")
                    if item_number == cargo_number:
                        print(f"      üéâ –ó–ê–Ø–í–ö–ê –ù–ê–ô–î–ï–ù–ê –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!")
                        print(f"         –ù–æ–º–µ—Ä: {item_number}")
                        print(f"         –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {item.get('sender_full_name', 'Unknown')}")
                        print(f"         –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {item.get('recipient_full_name', 'Unknown')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_items
                        if "cargo_items" in item and item["cargo_items"]:
                            cargo_items = item["cargo_items"]
                            print(f"         ‚úÖ cargo_items —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ({len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                            
                            for i, db_item in enumerate(cargo_items, 1):
                                print(f"            üì¶ –ì—Ä—É–∑ #{i}: {db_item.get('cargo_name', 'Unknown')}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                                quantity = db_item.get('quantity')
                                total_amount = db_item.get('total_amount')
                                weight = db_item.get('weight')
                                price_per_kg = db_item.get('price_per_kg')
                                
                                print(f"               quantity: {quantity} {'‚úÖ' if quantity is not None else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                                print(f"               total_amount: {total_amount} {'‚úÖ' if total_amount is not None else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                                print(f"               weight: {weight} {'‚úÖ' if weight is not None else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                                print(f"               price_per_kg: {price_per_kg} {'‚úÖ' if price_per_kg is not None else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
                                if quantity is not None and weight is not None and price_per_kg is not None:
                                    expected_total = quantity * weight * price_per_kg
                                    if total_amount == expected_total:
                                        print(f"               ‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {quantity} √ó {weight} √ó {price_per_kg} = {total_amount}")
                                    else:
                                        print(f"               ‚ö†Ô∏è –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ {total_amount}")
                        else:
                            print(f"         ‚ùå cargo_items –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                            print(f"         üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(item.keys())}")
                        
                        cargo_found = True
                        break
                
                if not cargo_found:
                    print(f"      ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ {endpoint}")
                    
            elif response.status_code == 403:
                print(f"      ‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: HTTP 403")
            elif response.status_code == 404:
                print(f"      ‚ö†Ô∏è Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: HTTP 404")
            elif response.status_code == 405:
                print(f"      ‚ö†Ô∏è –ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω: HTTP 405")
            else:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {endpoint}: {e}")
    
    return cargo_found

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ database verification –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    
    success = test_database_verification()
    
    print("\n" + "=" * 100)
    if success:
        print("üéâ DATABASE VERIFICATION –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ cargo_items –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("‚úÖ –ü–æ–ª—è quantity –∏ total_amount –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤")
        print()
        print("üîç –í–´–í–û–î:")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ backend - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ CargoWithLocation –º–æ–¥–µ–ª—å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_items –≤ API –æ—Ç–≤–µ—Ç–µ")
        print("‚ö†Ô∏è Frontend –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ quantity –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ QR-–∫–æ–¥–æ–≤")
    else:
        print("‚ùå DATABASE VERIFICATION –ù–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)