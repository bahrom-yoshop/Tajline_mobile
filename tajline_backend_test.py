#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API endpoints –ø–æ—Å–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª–µ "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–∞" —á—Ç–æ–±—ã –æ–Ω–æ –ø–æ—è–≤–ª—è–ª–æ—Å—å –ø–æ—Å–ª–µ –ø–æ–ª—è "–ì–æ—Ä–æ–¥ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–∞" 
–≤ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞. –ü–µ—Ä–µ–¥ –≤–Ω–µ—Å–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ frontend –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ backend API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
2. CORE API ENDPOINTS –î–õ–Ø –§–û–†–ú–´ –ü–†–ò–ï–ú–ê –ì–†–£–ó–ê  
3. ENDPOINTS –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –§–û–†–ú–´
4. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS

–¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:
- –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞: +79777888999/warehouse123
- –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –ø–æ–ª—è–º–∏ recipient_address –∏ delivery_city
"""

import requests
import json
import os
from datetime import datetime
import uuid

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class TajlineBackendTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.test_results = []
        self.operator_warehouses = []
        self.test_cargo_id = None
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        result = f"{status} - {test_name}: {details}"
        self.test_results.append(result)
        print(result)
        
    def authenticate_operator(self):
        """1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê"""
        print("\nüîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø")
        print("=" * 60)
        
        # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        operator_credentials = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json=operator_credentials)
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                self.log_result(
                    "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number')}, —Ä–æ–ª—å: {user_info.get('role')})"
                )
                return True
            else:
                self.log_result(
                    "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_current_user(self):
        """2. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""
        try:
            response = self.session.get(f"{API_BASE}/auth/me")
            
            if response.status_code == 200:
                user_data = response.json()
                
                self.log_result(
                    "GET /api/auth/me - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    True,
                    f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: {user_data.get('full_name')} ({user_data.get('role')})"
                )
                return True
            else:
                self.log_result(
                    "GET /api/auth/me - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET /api/auth/me - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_operator_warehouses(self):
        """3. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê (–¥–ª—è —Ñ–æ—Ä–º—ã)"""
        print("\nüè¢ –≠–¢–ê–ü 2: CORE API ENDPOINTS –î–õ–Ø –§–û–†–ú–´ –ü–†–ò–ï–ú–ê –ì–†–£–ó–ê")
        print("=" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                self.operator_warehouses = warehouses
                
                self.log_result(
                    "GET /api/operator/warehouses - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {[w.get('name') for w in warehouses]}"
                )
                return True
            else:
                self.log_result(
                    "GET /api/operator/warehouses - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET /api/operator/warehouses - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_all_cities(self):
        """4. –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ì–û–†–û–î–û–í –î–õ–Ø –ê–í–¢–û–ö–û–ú–ü–õ–ò–¢–ê"""
        try:
            response = self.session.get(f"{API_BASE}/warehouses/all-cities")
            
            if response.status_code == 200:
                cities_data = response.json()
                cities = cities_data.get("cities", [])
                
                self.log_result(
                    "GET /api/warehouses/all-cities - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ '–ì–æ—Ä–æ–¥ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–∞': {cities[:3]}..." if len(cities) > 3 else f"–ü–æ–ª—É—á–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤: {cities}"
                )
                return True
            else:
                self.log_result(
                    "GET /api/warehouses/all-cities - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET /api/warehouses/all-cities - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_operator_analytics(self):
        """5. –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –û–ü–ï–†–ê–¢–û–†–ê"""
        try:
            response = self.session.get(f"{API_BASE}/operator/dashboard/analytics")
            
            if response.status_code == 200:
                analytics = response.json()
                
                self.log_result(
                    "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {list(analytics.keys())}"
                )
                return True
            else:
                self.log_result(
                    "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_create_cargo_request(self):
        """6. –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ß–ï–†–ï–ó –§–û–†–ú–£ –ü–†–ò–ï–ú–ê –ì–†–£–ó–ê"""
        print("\nüì¶ –≠–¢–ê–ü 3: ENDPOINTS –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –§–û–†–ú–´")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª—è–º–∏ recipient_address (delivery_city –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É–¥—É—â–µ–º)
        cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏",
            "sender_phone": "+992987654321",
            "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏", 
            "recipient_phone": "+992123456789",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, –ø—Ä–æ—Å–ø–µ–∫—Ç –†—É–¥–∞–∫–∏, –¥–æ–º 123, –∫–≤. 45",  # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–õ–ï
            "cargo_items": [
                {
                    "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏",
                    "weight": 5.5,
                    "price_per_kg": 150.0
                }
            ],
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π recipient_address",
            "route": "moscow_to_tajikistan",
            "payment_method": "cash",
            "payment_amount": 825.0,
            "pickup_required": False,
            "delivery_method": "pickup",
            "warehouse_id": self.operator_warehouses[0]["id"] if self.operator_warehouses else None
        }
        
        try:
            response = self.session.post(f"{API_BASE}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                result = response.json()
                self.test_cargo_id = result.get("id")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ recipient_address —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                saved_recipient_address = result.get("recipient_address")
                
                address_saved_correctly = saved_recipient_address == cargo_data["recipient_address"]
                
                self.log_result(
                    "POST /api/operator/cargo/accept - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞",
                    address_saved_correctly,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (ID: {self.test_cargo_id}, –Ω–æ–º–µ—Ä: {result.get('cargo_number')}). "
                    f"recipient_address —Å–æ—Ö—Ä–∞–Ω–µ–Ω: '{saved_recipient_address}'. "
                    f"–ü–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {address_saved_correctly}"
                )
                return address_saved_correctly
            else:
                self.log_result(
                    "POST /api/operator/cargo/accept - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("POST /api/operator/cargo/accept - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_pickup_requests(self):
        """7. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†"""
        print("\nüìã –≠–¢–ê–ü 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS")
        print("=" * 60)
        
        try:
            response = self.session.get(f"{API_BASE}/operator/pickup-requests")
            
            if response.status_code == 200:
                requests_data = response.json()
                pickup_requests = requests_data.get("items", []) if isinstance(requests_data, dict) else requests_data
                
                self.log_result(
                    "GET /api/operator/pickup-requests - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(pickup_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"
                )
                return True
            else:
                self.log_result(
                    "GET /api/operator/pickup-requests - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET /api/operator/pickup-requests - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_warehouse_notifications(self):
        """8. –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê"""
        try:
            response = self.session.get(f"{API_BASE}/operator/warehouse-notifications")
            
            if response.status_code == 200:
                notifications_data = response.json()
                notifications = notifications_data.get("items", []) if isinstance(notifications_data, dict) else notifications_data
                
                self.log_result(
                    "GET /api/operator/warehouse-notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞"
                )
                return True
            else:
                self.log_result(
                    "GET /api/operator/warehouse-notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET /api/operator/warehouse-notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_data_structure_validation(self):
        """9. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –ù–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø–ú FRONTEND"""
        print("\nüîç –≠–¢–ê–ü 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò")
        print("=" * 60)
        
        if not self.test_cargo_id:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                False,
                "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"
            )
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            response = self.session.get(f"{API_BASE}/cargo/all")
            
            if response.status_code == 200:
                cargo_list = response.json()
                test_cargo = None
                
                # –ò—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
                for cargo in cargo_list:
                    if cargo.get("id") == self.test_cargo_id:
                        test_cargo = cargo
                        break
                
                if test_cargo:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è frontend
                    required_fields = [
                        "id", "cargo_number", "sender_full_name", "recipient_full_name",
                        "recipient_address", "weight", "declared_value", "status", "created_at"
                    ]
                    
                    missing_fields = [field for field in required_fields if field not in test_cargo]
                    has_recipient_address = "recipient_address" in test_cargo
                    
                    structure_valid = len(missing_fields) == 0 and has_recipient_address
                    
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º frontend",
                        structure_valid,
                        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö {'—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç' if structure_valid else '–ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç'} –æ–∂–∏–¥–∞–Ω–∏—è–º frontend. "
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}. "
                        f"recipient_address –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {has_recipient_address}"
                    )
                    return structure_valid
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                        False,
                        "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–∑–æ–≤"
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def cleanup_test_data(self):
        """10. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•"""
        if not self.test_cargo_id:
            return True
            
        try:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            admin_credentials = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            admin_session = requests.Session()
            response = admin_session.post(f"{API_BASE}/auth/login", json=admin_credentials)
            
            if response.status_code == 200:
                admin_token = response.json().get("access_token")
                admin_session.headers.update({
                    "Authorization": f"Bearer {admin_token}"
                })
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
                response = admin_session.delete(f"{API_BASE}/admin/cargo/{self.test_cargo_id}")
                
                if response.status_code == 200:
                    self.log_result(
                        "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                        True,
                        f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {self.test_cargo_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
                    )
                    return True
                else:
                    self.log_result(
                        "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                        False,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É: HTTP {response.status_code}"
                    )
                    return False
            else:
                self.log_result(
                    "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"
                )
                return False
                
        except Exception as e:
            self.log_result("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API endpoints –ø–æ—Å–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –≤ TAJLINE.TJ")
        print("=" * 120)
        
        test_steps = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", self.authenticate_operator),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.test_get_current_user),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", self.test_get_operator_warehouses),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞", self.test_get_all_cities),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", self.test_get_operator_analytics),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞", self.test_create_cargo_request),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä", self.test_get_pickup_requests),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞", self.test_get_warehouse_notifications),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", self.test_data_structure_validation),
            ("–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", self.cleanup_test_data)
        ]
        
        passed_tests = 0
        total_tests = len(test_steps)
        
        for test_name, test_step in test_steps:
            try:
                if test_step():
                    passed_tests += 1
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 120)
        
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        critical_checks = [
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ",
            "‚úÖ –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –≥–æ—Ä–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç", 
            "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å recipient_address —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º frontend"
        ]
        
        print("\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        for check in critical_checks:
            print(check)
        
        if success_rate >= 80:
            print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í–°–ï API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            print("‚úÖ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –†–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–ò –ü–û–õ–ï–ô –§–û–†–ú–´ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê")
            print("üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: delivery_city –ø–æ–ª–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏")
        else:
            print("\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–ï–î –†–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–ï–ô")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(result)
        
        return success_rate >= 80

if __name__ == "__main__":
    tester = TajlineBackendTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –í–°–ï BACKEND API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ –ú–û–ñ–ù–û –ë–ï–ó–û–ü–ê–°–ù–û –ü–†–û–í–û–î–ò–¢–¨ –†–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–Æ –ü–û–õ–ï–ô –§–û–†–ú–´")
    else:
        print("\n‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í BACKEND API!")
        print("‚ö†Ô∏è –ù–ï–û–ë–•–û–î–ò–ú–û –ò–°–ü–†–ê–í–ò–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –ü–ï–†–ï–î –†–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–ï–ô")