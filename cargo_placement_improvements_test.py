#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤" TAJLINE.TJ
Testing improvements to cargo cards from pickup requests in "Cargo Placement" section
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class CargoPlacementImprovementsTester:
    def __init__(self, base_url="https://qrscan-cargo-2.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô –ö–ê–†–¢–û–ß–ï–ö –ì–†–£–ó–û–í –ò–ó –ó–ê–ë–û–†–ê - TAJLINE.TJ")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç –¢–µ—Å—Ç {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params, timeout=30)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers, timeout=30)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, timeout=30)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers, timeout=30)
            else:
                raise ValueError(f"Unsupported method: {method}")

            print(f"   üìä Status: {response.status_code}")
            
            if response.status_code == expected_status:
                print(f"   ‚úÖ PASSED")
                self.tests_passed += 1
                try:
                    return True, response.json()
                except:
                    return True, {"message": "Success", "status_code": response.status_code}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   üìù Response: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                    return False, error_data
                except:
                    print(f"   üìù Response: {response.text}")
                    return False, {"error": response.text, "status_code": response.status_code}
                    
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå FAILED - Request error: {e}")
            return False, {"error": str(e)}

    def authenticate_warehouse_operator(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print(f"\n{'='*60}")
        print("üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print(f"{'='*60}")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
            "POST", "/api/auth/login", 200, login_data
        )
        
        if success and "access_token" in response:
            self.tokens["warehouse_operator"] = response["access_token"]
            print(f"   üé´ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {response['access_token'][:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            success, user_info = self.run_test(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                "GET", "/api/auth/me", 200, token=self.tokens["warehouse_operator"]
            )
            
            if success:
                print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('full_name', 'N/A')}")
                print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', 'N/A')}")
                print(f"   üè∑Ô∏è –†–æ–ª—å: {user_info.get('role', 'N/A')}")
                print(f"   üÜî –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('user_number', 'N/A')}")
                
                if user_info.get('role') == 'warehouse_operator':
                    print("   ‚úÖ –†–æ–ª—å warehouse_operator –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                    return True
                else:
                    print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ä–æ–ª—å: {user_info.get('role')}")
                    return False
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                return False
        else:
            print("   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False

    def test_cargo_placement_endpoint(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print(f"\n{'='*60}")
        print("üì¶ –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ì–†–£–ó–û–í –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        print(f"{'='*60}")
        
        success, response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
            "GET", "/api/operator/cargo/available-for-placement", 200, 
            token=self.tokens["warehouse_operator"]
        )
        
        if not success:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if "items" not in response:
            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ")
            return False
            
        items = response["items"]
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(items)}")
        
        if len(items) == 0:
            print("   ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑")
            return self.create_test_pickup_cargo()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        pickup_cargos = [cargo for cargo in items if not cargo.get("recipient_full_name", "").strip()]
        if len(pickup_cargos) == 0:
            print("   ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑")
            return self.create_test_pickup_cargo()
        
        return True

    def create_test_pickup_cargo(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"\n{'='*60}")
        print("üöö –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ì–†–£–ó–ê –ò–ó –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–†")
        print(f"{'='*60}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
        admin_login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        success, response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏",
            "POST", "/api/auth/login", 200, admin_login_data
        )
        
        if not success or "access_token" not in response:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω")
            return False
            
        admin_token = response["access_token"]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞
        pickup_request_data = {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ó–∞–±–æ—Ä",
            "sender_phone": "+79991234567",
            "recipient_full_name": "",  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            "recipient_phone": "+79887654321",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123",
            "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ó–∞–±–æ—Ä–∞ –¢–µ—Å—Ç–æ–≤–∞—è, 456",
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–∑ –∑–∞–±–æ—Ä–∞",
            "weight": 15.5,
            "declared_value": 5000,
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫",
            "route": "moscow_to_tajikistan",
            "pickup_date": "2025-01-20",
            "pickup_time_from": "10:00",
            "pickup_time_to": "18:00",
            "courier_fee": 500
        }
        
        success, response = self.run_test(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞",
            "POST", "/api/admin/courier/pickup-request", 200, 
            pickup_request_data, admin_token
        )
        
        if not success:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞")
            return False
            
        request_id = response.get("request_id") or response.get("request_number")
        print(f"   üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {request_id}")
        
        # –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏
        courier_login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        success, response = self.run_test(
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞",
            "POST", "/api/auth/login", 200, courier_login_data
        )
        
        if not success or "access_token" not in response:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä")
            return False
            
        courier_token = response["access_token"]
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É –∫—É—Ä—å–µ—Ä–æ–º
        success, response = self.run_test(
            "–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º",
            "POST", f"/api/courier/requests/{request_id}/accept", 200,
            token=courier_token
        )
        
        if not success:
            print("   ‚ùå –ö—É—Ä—å–µ—Ä –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É")
            return False
            
        # –ó–∞–±–∏—Ä–∞–µ–º –≥—Ä—É–∑
        success, response = self.run_test(
            "–ó–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º",
            "POST", f"/api/courier/requests/{request_id}/pickup", 200,
            token=courier_token
        )
        
        if not success:
            print("   ‚ùå –ö—É—Ä—å–µ—Ä –Ω–µ —Å–º–æ–≥ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑")
            return False
            
        # –°–¥–∞–µ–º –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥
        success, response = self.run_test(
            "–°–¥–∞—á–∞ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥",
            "POST", f"/api/courier/requests/{request_id}/deliver-to-warehouse", 200,
            token=courier_token
        )
        
        if not success:
            print("   ‚ùå –ö—É—Ä—å–µ—Ä –Ω–µ —Å–º–æ–≥ —Å–¥–∞—Ç—å –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥")
            return False
            
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
        success, notifications = self.run_test(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞",
            "GET", "/api/operator/warehouse-notifications", 200,
            token=self.tokens["warehouse_operator"]
        )
        
        if success and "notifications" in notifications:
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞: {len(notifications['notifications'])}")
            
            # –ò—â–µ–º –Ω–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            for notification in notifications["notifications"]:
                if notification.get("request_number") == request_id:
                    notification_id = notification.get("id")
                    print(f"   üìù –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_id}")
                    
                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    success, accept_response = self.run_test(
                        "–ü—Ä–∏–Ω—è—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
                        "POST", f"/api/operator/warehouse-notifications/{notification_id}/accept", 200,
                        token=self.tokens["warehouse_operator"]
                    )
                    
                    if success:
                        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        cargo_details = {
                            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ó–∞–±–æ—Ä",
                            "sender_phone": "+79991234567",
                            "sender_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ó–∞–±–æ—Ä–∞ –¢–µ—Å—Ç–æ–≤–∞—è, 456",
                            "recipient_full_name": "",  # –ü—É—Å—Ç–æ–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
                            "recipient_phone": "+79887654321",
                            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123",
                            "payment_method": "cash",
                            "payment_status": "paid",
                            "cargo_items": [
                                {
                                    "name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–∑ –∑–∞–±–æ—Ä–∞",
                                    "weight": 15.5,
                                    "price": 5000
                                }
                            ]
                        }
                        
                        success, complete_response = self.run_test(
                            "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞",
                            "POST", f"/api/operator/warehouse-notifications/{notification_id}/complete", 200,
                            cargo_details, self.tokens["warehouse_operator"]
                        )
                        
                        if success:
                            print("   ‚úÖ –ì—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                        else:
                            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞")
                    break
        
        return True

    def test_pickup_cargo_improvements(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞"""
        print(f"\n{'='*60}")
        print("üé® –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô –ö–ê–†–¢–û–ß–ï–ö –ì–†–£–ó–û–í –ò–ó –ó–ê–ë–û–†–ê")
        print(f"{'='*60}")
        
        success, response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏",
            "GET", "/api/operator/cargo/available-for-placement", 200, 
            token=self.tokens["warehouse_operator"]
        )
        
        if not success:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
            
        items = response.get("items", [])
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(items)}")
        
        if len(items) == 0:
            print("   ‚ùå –ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π")
            return False
            
        # –ò—â–µ–º –≥—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä (–æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ recipient_full_name)
        pickup_cargos = []
        regular_cargos = []
        
        for cargo in items:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–∑ –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
            recipient_name = cargo.get("recipient_full_name", "").strip()
            if not recipient_name or recipient_name == "":
                pickup_cargos.append(cargo)
            else:
                regular_cargos.append(cargo)
                
        print(f"   üì¶ –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {len(pickup_cargos)}")
        print(f"   üì¶ –û–±—ã—á–Ω—ã–µ –≥—Ä—É–∑—ã: {len(regular_cargos)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞
        improvements_tested = 0
        improvements_passed = 0
        
        for i, cargo in enumerate(pickup_cargos[:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥—Ä—É–∑–∞
            print(f"\n   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ {i+1}: {cargo.get('cargo_number', 'N/A')}")
            print(f"      üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞: {json.dumps(cargo, indent=6, ensure_ascii=False)}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –§–ò–û –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
            improvements_tested += 1
            recipient_name = cargo.get("recipient_full_name", "").strip()
            if not recipient_name:
                print(f"      ‚úÖ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ–µ - –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è '–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏'")
                improvements_passed += 1
            else:
                print(f"      ‚ö†Ô∏è –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: '{recipient_name}'")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´
            improvements_tested += 1
            payment_status = cargo.get("payment_status")
            if payment_status is not None:
                print(f"      ‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {payment_status}")
                improvements_passed += 1
            else:
                print(f"      ‚ùå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –û–ü–õ–ê–¢–ï - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            core_payment_fields = ["payment_method"]
            optional_payment_fields = ["amount_paid", "payment_notes"]
            
            for field in core_payment_fields:
                improvements_tested += 1
                if field in cargo and cargo[field] is not None:
                    print(f"      ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ {field} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {cargo.get(field)}")
                    improvements_passed += 1
                else:
                    print(f"      ‚ùå –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ null")
            
            for field in optional_payment_fields:
                improvements_tested += 1
                if field in cargo and cargo[field] is not None:
                    print(f"      ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {cargo.get(field)}")
                    improvements_passed += 1
                else:
                    print(f"      ‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞)")
                    # –°—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö –¥–ª—è –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞
                    improvements_passed += 0.5
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
            additional_fields = ["processing_status", "created_by_operator", "warehouse_name"]
            for field in additional_fields:
                if field in cargo:
                    print(f"      ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ {field}: {cargo.get(field)}")
                    
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            print(f"      üìä –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(cargo.keys())}")
        
        print(f"\n   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ò–ô:")
        print(f"   üìà –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {improvements_tested}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {improvements_passed}")
        if improvements_tested > 0:
            print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(improvements_passed/improvements_tested*100):.1f}%")
            return improvements_passed >= improvements_tested * 0.6  # 60% —É—Å–ø–µ—Ö–∞ (—Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥)
        else:
            print(f"   ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π")
            return False

    def test_payment_data_completeness(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ"""
        print(f"\n{'='*60}")
        print("üí≥ –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–¢–´ –î–ê–ù–ù–´–• –û–ë –û–ü–õ–ê–¢–ï")
        print(f"{'='*60}")
        
        success, response = self.run_test(
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–ø–ª–∞—Ç–µ",
            "GET", "/api/operator/cargo/available-for-placement", 200, 
            token=self.tokens["warehouse_operator"]
        )
        
        if not success:
            return False
            
        items = response.get("items", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
        required_payment_fields = [
            "payment_status",
            "payment_method", 
            "amount_paid",
            "payment_notes",
            "processing_status"
        ]
        
        field_coverage = {field: 0 for field in required_payment_fields}
        total_cargos = len(items)
        
        for cargo in items:
            for field in required_payment_fields:
                if field in cargo and cargo[field] is not None:
                    field_coverage[field] += 1
        
        print(f"   üìä –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è {total_cargos} –≥—Ä—É–∑–æ–≤:")
        for field, count in field_coverage.items():
            percentage = (count / total_cargos * 100) if total_cargos > 0 else 0
            print(f"      {field}: {count}/{total_cargos} ({percentage:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã 50% –≥—Ä—É–∑–æ–≤ –∏–º–µ—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –æ–ø–ª–∞—Ç—ã
        critical_fields = ["payment_status", "processing_status"]
        critical_coverage = sum(field_coverage[field] for field in critical_fields) / (len(critical_fields) * total_cargos) if total_cargos > 0 else 0
        
        print(f"   üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã: {critical_coverage*100:.1f}%")
        
        return critical_coverage >= 0.5  # 50% –ø–æ–∫—Ä—ã—Ç–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ò–ô –ö–ê–†–¢–û–ß–ï–ö –ì–†–£–ó–û–í –ò–ó –ó–ê–ë–û–†–ê")
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
        
        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
        if not self.test_cargo_placement_endpoint():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫
        improvements_success = self.test_pickup_cargo_improvements()
        
        # –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ
        payment_data_success = self.test_payment_data_completeness()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print(f"\n{'='*80}")
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"{'='*80}")
        print(f"üîç –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.tests_run}")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.tests_run - self.tests_passed}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.tests_passed/self.tests_run*100):.1f}%")
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: –£–°–ü–ï–•")
        print(f"   ‚úÖ Endpoint —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: –£–°–ü–ï–•")
        print(f"   {'‚úÖ' if improvements_success else '‚ùå'} –£–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤: {'–£–°–ü–ï–•' if improvements_success else '–ü–†–û–í–ê–õ'}")
        print(f"   {'‚úÖ' if payment_data_success else '‚ùå'} –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ: {'–£–°–ü–ï–•' if payment_data_success else '–ü–†–û–í–ê–õ'}")
        
        overall_success = improvements_success and payment_data_success
        
        print(f"\nüèÜ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ –£–°–ü–ï–•' if overall_success else '‚ùå –ü–†–û–í–ê–õ'}")
        
        if overall_success:
            print("üéâ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ –∏–∑ –∑–∞–±–æ—Ä–∞")
        
        return overall_success

if __name__ == "__main__":
    tester = CargoPlacementImprovementsTester()
    success = tester.run_comprehensive_test()
    sys.exit(0 if success else 1)