#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê –ò–ó –°–ü–ò–°–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≥—Ä—É–∑–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –ö–Ω–æ–ø–∫–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Å –∏–∫–æ–Ω–∫–æ–π Trash2 –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
- Backend API endpoint DELETE /api/operator/cargo/{cargo_id}/remove-from-placement
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –Ω–∞ "removed_from_placement" —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
- –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ /api/operator/cargo/available-for-placement
3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API endpoint /api/operator/cargo/{cargo_id}/remove-from-placement:
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π cargo_id –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "removed_from_placement"
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- API –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—è—Ç—å –≥—Ä—É–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞ "removed_from_placement"
- –ì—Ä—É–∑ –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –°–æ–∑–¥–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-route-map.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class CargoRemovalTester:
    def __init__(self):
        self.operator_token = None
        self.operator_info = None
        self.test_results = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {details}")
    
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ ({WAREHOUSE_OPERATOR['phone']})...")
        
        try:
            response = requests.post(f"{BACKEND_URL}/auth/login", json=WAREHOUSE_OPERATOR, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user", {})
                
                if self.operator_token:
                    operator_name = self.operator_info.get('full_name', 'Unknown')
                    operator_role = self.operator_info.get('role', 'Unknown')
                    operator_number = self.operator_info.get('user_number', 'Unknown')
                    
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {operator_name} (—Ä–æ–ª—å: {operator_role}, –Ω–æ–º–µ—Ä: {operator_number})"
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"Exception: {str(e)}")
            return False
    
    def get_available_cargo_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print(f"\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                if items:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {
                            "total_items": len(items),
                            "sample_cargo": items[0] if items else None,
                            "cargo_ids": [item.get("id") for item in items[:5]]  # –ü–µ—Ä–≤—ã–µ 5 ID
                        }
                    )
                    return items
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {"response_data": data}
                    )
                    return []
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"Exception: {str(e)}")
            return []
    
    def test_cargo_removal_endpoint(self, cargo_id, cargo_number):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
        print(f"\nüóëÔ∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ {cargo_number} (ID: {cargo_id}) –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = requests.delete(f"{BACKEND_URL}/operator/cargo/{cargo_id}/remove-from-placement", headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                success = data.get("success", False)
                message = data.get("message", "")
                returned_cargo_number = data.get("cargo_number", "")
                
                if success and returned_cargo_number == cargo_number:
                    self.log_result(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–ì—Ä—É–∑ {cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {
                            "cargo_id": cargo_id,
                            "cargo_number": cargo_number,
                            "returned_cargo_number": returned_cargo_number,
                            "api_message": message,
                            "response_data": data
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API: success={success}, cargo_number={returned_cargo_number}",
                        {"response_data": data}
                    )
                    return False
            else:
                self.log_result(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {
                        "cargo_id": cargo_id,
                        "cargo_number": cargo_number,
                        "status_code": response.status_code,
                        "response_text": response.text
                    }
                )
                return False
                
        except Exception as e:
            self.log_result("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"Exception: {str(e)}")
            return False
    
    def verify_cargo_status_changed(self, cargo_id, cargo_number):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ 'removed_from_placement'"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ {cargo_number}...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–∑ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É
            response = requests.get(f"{BACKEND_URL}/cargo/track/{cargo_number}", headers=headers, timeout=30)
            
            if response.status_code == 200:
                cargo_data = response.json()
                cargo_status = cargo_data.get("status", "")
                
                if cargo_status == "removed_from_placement":
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞",
                        True,
                        f"–°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ {cargo_number} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'removed_from_placement'",
                        {
                            "cargo_id": cargo_id,
                            "cargo_number": cargo_number,
                            "new_status": cargo_status,
                            "cargo_data": cargo_data
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞",
                        False,
                        f"–°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ {cargo_number} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {cargo_status}",
                        {
                            "cargo_id": cargo_id,
                            "cargo_number": cargo_number,
                            "current_status": cargo_status,
                            "expected_status": "removed_from_placement"
                        }
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞: HTTP {response.status_code}",
                    {"response_text": response.text}
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞", False, f"Exception: {str(e)}")
            return False
    
    def verify_cargo_removed_from_list(self, removed_cargo_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≥—Ä—É–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
                cargo_still_present = any(item.get("id") == removed_cargo_id for item in items)
                
                if not cargo_still_present:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
                        True,
                        f"–ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–æ—Å—Ç–∞–ª–æ—Å—å {len(items)} –≥—Ä—É–∑–æ–≤)",
                        {
                            "removed_cargo_id": removed_cargo_id,
                            "remaining_cargo_count": len(items),
                            "cargo_still_present": False
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
                        False,
                        "–ì—Ä—É–∑ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {
                            "removed_cargo_id": removed_cargo_id,
                            "cargo_still_present": True,
                            "total_items": len(items)
                        }
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞", False, f"Exception: {str(e)}")
            return False
    
    def check_removal_notification(self, cargo_number):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞"""
        print(f"\nüì¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ {cargo_number}...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = requests.get(f"{BACKEND_URL}/notifications", headers=headers, timeout=30)
            
            if response.status_code == 200:
                notifications = response.json()
                
                # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞
                removal_notification = None
                for notification in notifications:
                    message = notification.get("message", "")
                    if "—É–¥–∞–ª–µ–Ω" in message.lower() and cargo_number in message:
                        removal_notification = notification
                        break
                
                if removal_notification:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏",
                        True,
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ {cargo_number} —Å–æ–∑–¥–∞–Ω–æ",
                        {
                            "notification_id": removal_notification.get("id"),
                            "notification_message": removal_notification.get("message"),
                            "created_at": removal_notification.get("created_at")
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏",
                        False,
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ {cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        {
                            "total_notifications": len(notifications),
                            "searched_cargo": cargo_number
                        }
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏", False, f"Exception: {str(e)}")
            return False
    
    def run_comprehensive_cargo_removal_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
        print("üóëÔ∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê –ò–ó –°–ü–ò–°–ö–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –í TAJLINE.TJ")
        print("=" * 100)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        available_cargo = self.get_available_cargo_for_placement()
        if not available_cargo:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cargo = available_cargo[0]
        cargo_id = test_cargo.get("id")
        cargo_number = test_cargo.get("cargo_number")
        
        if not cargo_id or not cargo_number:
            self.log_result(
                "–í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞",
                False,
                "–ì—Ä—É–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π id –∏–ª–∏ cargo_number",
                {"test_cargo": test_cargo}
            )
            return False
        
        print(f"\nüéØ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {cargo_number} (ID: {cargo_id})")
        
        # –®–∞–≥ 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        removal_success = self.test_cargo_removal_endpoint(cargo_id, cargo_number)
        if not removal_success:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–∑ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
        
        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è
        status_changed = self.verify_cargo_status_changed(cargo_id, cargo_number)
        
        # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≥—Ä—É–∑ –∏—Å—á–µ–∑ –∏–∑ —Å–ø–∏—Å–∫–∞
        cargo_removed_from_list = self.verify_cargo_removed_from_list(cargo_id)
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        notification_created = self.check_removal_notification(cargo_number)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ò –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–ê")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['message']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        critical_failures = [
            result for result in self.test_results 
            if not result["success"] and "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô" in result["test"]
        ]
        
        if critical_failures:
            print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(critical_failures)}):")
            for failure in critical_failures:
                print(f"   - {failure['test']}: {failure['message']}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
        
        if removal_success:
            print("   ‚úÖ –ù–û–í–´–ô API ENDPOINT –†–ê–ë–û–¢–ê–ï–¢: DELETE /api/operator/cargo/{cargo_id}/remove-from-placement")
        else:
            print("   ‚ùå –ù–û–í–´–ô API ENDPOINT –ù–ï –†–ê–ë–û–¢–ê–ï–¢: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è")
        
        if status_changed:
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'removed_from_placement'")
        else:
            print("   ‚ùå –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if cargo_removed_from_list:
            print("   ‚úÖ –ì—Ä—É–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å—á–µ–∑–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        else:
            print("   ‚ùå –ì—Ä—É–∑ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        if notification_created:
            print("   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        else:
            print("   ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if success_rate >= 75.0 and removal_success and status_changed:
            print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
            print("   - API —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—è–µ—Ç –≥—Ä—É–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            print("   - –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'removed_from_placement'")
            print("   - –ì—Ä—É–∑ –∏—Å—á–µ–∑–∞–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return True
        else:
            print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê:")
            if not removal_success:
                print("   - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API endpoint DELETE /api/operator/cargo/{cargo_id}/remove-from-placement")
            if not status_changed:
                print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ –Ω–∞ 'removed_from_placement'")
                print("   - –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è")
            if not cargo_removed_from_list:
                print("   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ /api/operator/cargo/available-for-placement")
            return False

if __name__ == "__main__":
    tester = CargoRemovalTester()
    success = tester.run_comprehensive_cargo_removal_test()
    
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò!")
        sys.exit(1)