#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–£–ß–ê–¢–ï–õ–ï –î–õ–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–ë–û–†–ê –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ endpoint —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä:
1. –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í —Ñ—É–Ω–∫—Ü–∏–∏ create_courier_pickup_request –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è recipient_full_name, recipient_phone, recipient_address
2. BACKEND CHAIN: –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ‚Üí –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ send_pickup_request_to_placement ‚Üí –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ available-for-placement  
3. FRONTEND: –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –±–µ–∑ fallback

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –∏ –∫—É—Ä—å–µ—Ä–∞
2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ pickup_request
4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ  
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint /available-for-placement –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å) –æ—Ç –∫—É—Ä—å–µ—Ä–∞/–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-ops.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

COURIER = {
    "phone": "+79991234567", 
    "password": "courier123"
}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
PICKUP_REQUEST_DATA = {
    "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
    "sender_phone": "+79991112233",
    "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –ü–æ–ª—É—á–∞—Ç–µ–ª—å, 123",
    "pickup_date": "2025-01-20",
    "pickup_time_from": "10:00",
    "pickup_time_to": "18:00",
    "route": "moscow_to_tajikistan",
    "courier_fee": 500.0,
    "destination": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø –ü–û–õ–£–ß–ê–¢–ï–õ–Ø - –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è
    "recipient_full_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –¢–µ—Å—Ç–æ–≤—ã–π –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π",
    "recipient_phone": "+992900123456",
    "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ü–æ–ª—É—á–∞—Ç–µ–ª—è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è, 456"
}

def authenticate_user(phone, password, role_name):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {role_name} ({phone})...")
    
    response = requests.post(f"{BACKEND_URL}/auth/login", json={
        "phone": phone,
        "password": password
    })
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        user_info = data.get("user")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')}, –Ω–æ–º–µ—Ä: {user_info.get('user_number')})")
        return token, user_info
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
        return None, None

def create_pickup_request_with_recipient_data(operator_token):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.post(f"{BACKEND_URL}/admin/courier/pickup-request", 
                           json=PICKUP_REQUEST_DATA, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        request_id = data.get("request_id")
        request_number = data.get("request_number")
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ID={request_id}, –Ω–æ–º–µ—Ä={request_number}")
        print(f"üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∑–∞—è–≤–∫–µ:")
        print(f"   - –§–ò–û: {PICKUP_REQUEST_DATA['recipient_full_name']}")
        print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {PICKUP_REQUEST_DATA['recipient_phone']}")
        print(f"   - –ê–¥—Ä–µ—Å: {PICKUP_REQUEST_DATA['recipient_address']}")
        return request_id, request_number
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
        return None, None

def verify_recipient_data_saved(courier_token, request_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∑–∞—è–≤–∫–µ"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∑–∞—è–≤–∫–µ {request_id}...")
    
    headers = {"Authorization": f"Bearer {courier_token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞
    response = requests.get(f"{BACKEND_URL}/courier/requests/new", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        new_requests = data.get("new_requests", [])
        
        # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É
        target_request = None
        for request in new_requests:
            if request.get("id") == request_id:
                target_request = request
                break
        
        if target_request:
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            recipient_name = target_request.get("recipient_full_name", "NOT SET")
            recipient_phone = target_request.get("recipient_phone", "NOT SET") 
            recipient_address = target_request.get("recipient_address", "NOT SET")
            
            print(f"üìã –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–£–ß–ê–¢–ï–õ–Ø:")
            print(f"   - recipient_full_name: {recipient_name}")
            print(f"   - recipient_phone: {recipient_phone}")
            print(f"   - recipient_address: {recipient_address}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç 'NOT SET'
            if (recipient_name != "NOT SET" and recipient_name == PICKUP_REQUEST_DATA["recipient_full_name"] and
                recipient_phone != "NOT SET" and recipient_phone == PICKUP_REQUEST_DATA["recipient_phone"] and
                recipient_address != "NOT SET" and recipient_address == PICKUP_REQUEST_DATA["recipient_address"]):
                print(f"üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ!")
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {PICKUP_REQUEST_DATA['recipient_full_name']}")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {recipient_name}")
                return False
        else:
            print(f"‚ùå –ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {response.status_code} - {response.text}")
        return False

def complete_pickup_workflow(courier_token, request_id):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä"""
    print(f"\nüöö –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow –∑–∞—è–≤–∫–∏ {request_id}...")
    
    headers = {"Authorization": f"Bearer {courier_token}"}
    
    # 1. –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º
    print("1Ô∏è‚É£ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º...")
    response = requests.post(f"{BACKEND_URL}/courier/requests/{request_id}/accept", headers=headers)
    if response.status_code == 200:
        print("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–º")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}")
        return False
    
    # 2. –ó–∞–±–æ—Ä –≥—Ä—É–∑–∞
    print("2Ô∏è‚É£ –ó–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º...")
    response = requests.post(f"{BACKEND_URL}/courier/requests/{request_id}/pickup", headers=headers)
    if response.status_code == 200:
        print("‚úÖ –ì—Ä—É–∑ –∑–∞–±—Ä–∞–Ω –∫—É—Ä—å–µ—Ä–æ–º")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞: {response.status_code} - {response.text}")
        return False
    
    # 3. –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥
    print("3Ô∏è‚É£ –î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥...")
    response = requests.post(f"{BACKEND_URL}/courier/requests/{request_id}/deliver-to-warehouse", headers=headers)
    if response.status_code == 200:
        print("‚úÖ –ì—Ä—É–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥: {response.status_code} - {response.text}")
        return False

def check_warehouse_notification_with_recipient_data(operator_token, request_number):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    print(f"\nüì¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number}...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{BACKEND_URL}/operator/warehouse-notifications", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        notifications = data.get("notifications", [])
        
        # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–µ–π –∑–∞—è–≤–∫–∏
        target_notification = None
        for notification in notifications:
            if notification.get("request_number") == request_number:
                target_notification = notification
                break
        
        if target_notification:
            notification_id = target_notification.get("id")
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {notification_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º pickup_request_id
            pickup_request_id = target_notification.get("pickup_request_id")
            if pickup_request_id:
                print(f"üìã pickup_request_id: {pickup_request_id}")
                return notification_id, pickup_request_id
            else:
                print(f"‚ö†Ô∏è pickup_request_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
                return notification_id, None
        else:
            print(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ {request_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None, None
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code} - {response.text}")
        return None, None

def send_pickup_request_to_placement(operator_token, notification_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ"""
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id}...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.post(f"{BACKEND_URL}/operator/warehouse-notifications/{notification_id}/send-to-placement", 
                           headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        cargo_id = data.get("cargo_id")
        cargo_number = data.get("cargo_number")
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"üì¶ –°–æ–∑–¥–∞–Ω –≥—Ä—É–∑: ID={cargo_id}, –Ω–æ–º–µ—Ä={cargo_number}")
        return cargo_id, cargo_number
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {response.status_code} - {response.text}")
        return None, None

def verify_recipient_data_in_placement(operator_token, cargo_number):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    print(f"\nüè≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–∑–∞ {cargo_number}...")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        
        # –ò—â–µ–º –Ω–∞—à –≥—Ä—É–∑
        target_cargo = None
        for item in items:
            if item.get("cargo_number") == cargo_number:
                target_cargo = item
                break
        
        if target_cargo:
            print(f"‚úÖ –ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –≥—Ä—É–∑–µ
            recipient_name = target_cargo.get("recipient_full_name", "")
            recipient_phone = target_cargo.get("recipient_phone", "")
            recipient_address = target_cargo.get("recipient_address", "")
            
            print(f"üìã –î–ê–ù–ù–´–ï –ü–û–õ–£–ß–ê–¢–ï–õ–Ø –í –ì–†–£–ó–ï:")
            print(f"   - recipient_full_name: '{recipient_name}'")
            print(f"   - recipient_phone: '{recipient_phone}'")
            print(f"   - recipient_address: '{recipient_address}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            expected_name = PICKUP_REQUEST_DATA["recipient_full_name"]
            expected_phone = PICKUP_REQUEST_DATA["recipient_phone"]
            expected_address = PICKUP_REQUEST_DATA["recipient_address"]
            
            if (recipient_name == expected_name and 
                recipient_phone == expected_phone and 
                recipient_address == expected_address):
                print(f"üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –≥—Ä—É–∑!")
                return True
            else:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –≥—Ä—É–∑–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ!")
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_name} / {expected_phone} / {expected_address}")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ: {recipient_name} / {recipient_phone} / {recipient_address}")
                return False
        else:
            print(f"‚ùå –ì—Ä—É–∑ {cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–£–ß–ê–¢–ï–õ–ï –î–õ–Ø –ì–†–£–ó–û–í –ò–ó –ó–ê–ë–û–†–ê –í TAJLINE.TJ")
    print("=" * 120)
    
    test_results = []
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    operator_token, operator_info = authenticate_user(
        WAREHOUSE_OPERATOR["phone"], 
        WAREHOUSE_OPERATOR["password"], 
        "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞"
    )
    if not operator_token:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return
    test_results.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞
    courier_token, courier_info = authenticate_user(
        COURIER["phone"], 
        COURIER["password"], 
        "–ö—É—Ä—å–µ—Ä"
    )
    if not courier_token:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä")
        return
    test_results.append("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    request_id, request_number = create_pickup_request_with_recipient_data(operator_token)
    if not request_id:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä")
        return
    test_results.append("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    
    # 4. –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    recipient_data_saved = verify_recipient_data_saved(courier_token, request_id)
    if recipient_data_saved:
        test_results.append("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞—è–≤–∫–µ")
    else:
        test_results.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
        print("Endpoint /api/admin/courier/pickup-request –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        print("- recipient_full_name")
        print("- recipient_phone") 
        print("- recipient_address")
        print("\n–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ backend –∫–æ–¥–µ!")
        return
    
    # 5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow
    workflow_completed = complete_pickup_workflow(courier_token, request_id)
    if workflow_completed:
        test_results.append("‚úÖ –ü–æ–ª–Ω—ã–π workflow –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    else:
        test_results.append("‚ùå –û—à–∏–±–∫–∞ –≤ workflow –∑–∞—è–≤–∫–∏")
        return
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
    notification_id, pickup_request_id = check_warehouse_notification_with_recipient_data(operator_token, request_number)
    if notification_id:
        test_results.append("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ —Å–æ–∑–¥–∞–Ω–æ")
    else:
        test_results.append("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    cargo_id, cargo_number = send_pickup_request_to_placement(operator_token, notification_id)
    if cargo_id:
        test_results.append("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
    else:
        test_results.append("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
        return
    
    # 8. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    recipient_data_in_placement = verify_recipient_data_in_placement(operator_token, cargo_number)
    if recipient_data_in_placement:
        test_results.append("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    else:
        test_results.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 120)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 120)
    
    success_count = len([r for r in test_results if r.startswith("‚úÖ")])
    total_count = len(test_results)
    success_rate = (success_count / total_count) * 100
    
    for result in test_results:
        print(result)
    
    print(f"\nüìà SUCCESS RATE: {success_rate:.1f}% ({success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
    
    if success_rate == 100:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å) —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ Backend chain —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí send_pickup_request_to_placement ‚Üí available-for-placement")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {total_count - success_count} –∏–∑ {total_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        if not recipient_data_saved:
            print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
            print("Endpoint —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è recipient_full_name, recipient_phone, recipient_address")
            print("–≤ —Ñ—É–Ω–∫—Ü–∏—é create_courier_pickup_request")

if __name__ == "__main__":
    main()