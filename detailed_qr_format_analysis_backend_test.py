#!/usr/bin/env python3
"""
üéØ –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º unit_index –≤ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏

–ù–ê–ô–î–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:
- –ó–∞—è–≤–∫–∞ 25082026 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è ‚úÖ
- –ì—Ä—É–∑ —Ç–∏–ø–∞ 01 –Ω–∞–π–¥–µ–Ω ‚úÖ  
- –ù–û: unit_index —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–∞ (1, 2) –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫ ("01", "02") ‚ùå

–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:
Frontend –∏—â–µ—Ç unit_index = "02" (—Å—Ç—Ä–æ–∫–∞ —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º)
Backend —Ö—Ä–∞–Ω–∏—Ç unit_index = 2 (—á–∏—Å–ª–æ –±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ –Ω—É–ª—è)

–†–ï–®–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é unit_index –≤ backend –∏–ª–∏ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –≤ frontend
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-8.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class DetailedQRFormatAnalyzer:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.target_cargo_number = "25082026"
        self.target_qr_code = "25082026/01/02"
        
    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    def analyze_unit_index_format_issue(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º unit_index"""
        print("üîç –£–ì–õ–£–ë–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –§–û–†–ú–ê–¢–û–ú unit_index")
        print("=" * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code != 200:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤")
                return False
            
            data = response.json()
            items = data.get("items", [])
            
            # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –∑–∞—è–≤–∫—É
            target_cargo = None
            for item in items:
                if item.get("cargo_number") == self.target_cargo_number:
                    target_cargo = item
                    break
            
            if not target_cargo:
                print(f"‚ùå –ó–∞—è–≤–∫–∞ {self.target_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ {self.target_cargo_number} –Ω–∞–π–¥–µ–Ω–∞")
            print(f"   ID: {target_cargo.get('id')}")
            print()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º cargo_items
            cargo_items = target_cargo.get("cargo_items", [])
            print(f"üì¶ –ê–ù–ê–õ–ò–ó CARGO_ITEMS ({len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
            print("-" * 40)
            
            for i, cargo_item in enumerate(cargo_items):
                type_number = i + 1
                cargo_name = cargo_item.get("cargo_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                quantity = cargo_item.get("quantity", 0)
                individual_items = cargo_item.get("individual_items", [])
                
                print(f"–ì—Ä—É–∑ #{type_number} (—Ç–∏–ø {type_number:02d}):")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {cargo_name}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
                print(f"   Individual_items: {len(individual_items)}")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ individual_items –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞ (—Ç–∏–ø 01)
                if i == 0:  # –ü–µ—Ä–≤—ã–π –≥—Ä—É–∑ = —Ç–∏–ø 01
                    print(f"   üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó individual_items –¥–ª—è —Ç–∏–ø–∞ 01:")
                    
                    for j, item in enumerate(individual_items):
                        unit_index = item.get("unit_index")
                        individual_number = item.get("individual_number")
                        
                        print(f"      –ï–¥–∏–Ω–∏—Ü–∞ #{j+1}:")
                        print(f"         unit_index: {unit_index} (—Ç–∏–ø: {type(unit_index).__name__})")
                        print(f"         individual_number: {individual_number}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º QR –∫–æ–¥–æ–º
                        if individual_number == self.target_qr_code:
                            print(f"         üéØ –≠–¢–û –¶–ï–õ–ï–í–ê–Ø –ï–î–ò–ù–ò–¶–ê! QR: {self.target_qr_code}")
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å unit_index
                            expected_unit_index = "02"  # Frontend –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
                            actual_unit_index = unit_index
                            
                            print(f"         üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
                            print(f"            Frontend –∏—â–µ—Ç unit_index = '{expected_unit_index}' (—Å—Ç—Ä–æ–∫–∞)")
                            print(f"            Backend —Ö—Ä–∞–Ω–∏—Ç unit_index = {actual_unit_index} ({type(actual_unit_index).__name__})")
                            
                            if str(actual_unit_index).zfill(2) == expected_unit_index:
                                print(f"         ‚úÖ –†–ï–®–ï–ù–ò–ï: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {actual_unit_index} ‚Üí '{expected_unit_index}'")
                            else:
                                print(f"         ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π")
                print()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False

    def test_different_search_approaches(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –ø–æ–∏—Å–∫—É –µ–¥–∏–Ω–∏—Ü—ã"""
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –ü–û–î–•–û–î–û–í –ö –ü–û–ò–°–ö–£")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            data = response.json()
            items = data.get("items", [])
            
            target_cargo = None
            for item in items:
                if item.get("cargo_number") == self.target_cargo_number:
                    target_cargo = item
                    break
            
            if not target_cargo:
                return False
            
            cargo_items = target_cargo.get("cargo_items", [])
            if not cargo_items:
                return False
            
            individual_items = cargo_items[0].get("individual_items", [])
            
            print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ –µ–¥–∏–Ω–∏—Ü—ã '02':")
            print()
            
            # –ü–æ–¥—Ö–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É unit_index "02"
            found_by_string = False
            for item in individual_items:
                if str(item.get("unit_index")) == "02":
                    found_by_string = True
                    break
            print(f"1. –ü–æ–∏—Å–∫ unit_index == '02' (—Å—Ç—Ä–æ–∫–∞): {'‚úÖ –ù–∞–π–¥–µ–Ω–æ' if found_by_string else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            
            # –ü–æ–¥—Ö–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É unit_index 2
            found_by_number = False
            for item in individual_items:
                if item.get("unit_index") == 2:
                    found_by_number = True
                    break
            print(f"2. –ü–æ–∏—Å–∫ unit_index == 2 (—á–∏—Å–ª–æ): {'‚úÖ –ù–∞–π–¥–µ–Ω–æ' if found_by_number else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            
            # –ü–æ–¥—Ö–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É unit_index —Å zfill
            found_by_zfill = False
            for item in individual_items:
                if str(item.get("unit_index")).zfill(2) == "02":
                    found_by_zfill = True
                    break
            print(f"3. –ü–æ–∏—Å–∫ str(unit_index).zfill(2) == '02': {'‚úÖ –ù–∞–π–¥–µ–Ω–æ' if found_by_zfill else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            
            # –ü–æ–¥—Ö–æ–¥ 4: –ü–æ–∏—Å–∫ –ø–æ individual_number
            found_by_individual_number = False
            for item in individual_items:
                if item.get("individual_number") == self.target_qr_code:
                    found_by_individual_number = True
                    break
            print(f"4. –ü–æ–∏—Å–∫ individual_number == '{self.target_qr_code}': {'‚úÖ –ù–∞–π–¥–µ–Ω–æ' if found_by_individual_number else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
            
            print()
            print("üí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–û–ï –†–ï–®–ï–ù–ò–ï:")
            if found_by_zfill and found_by_individual_number:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥ #3 –∏–ª–∏ #4 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                print("   Frontend –¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å –ø–æ str(unit_index).zfill(2) –∏–ª–∏ individual_number")
            elif found_by_number:
                print("‚ö†Ô∏è Backend —Ö—Ä–∞–Ω–∏—Ç unit_index –∫–∞–∫ —á–∏—Å–ª–∞, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞")
            else:
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False

    def suggest_backend_fix(self):
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ backend"""
        print("üîß –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í BACKEND")
        print("=" * 40)
        
        print("–ü–†–û–ë–õ–ï–ú–ê:")
        print("- Backend –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç unit_index –∫–∞–∫ —á–∏—Å–ª–∞ (1, 2, 3...)")
        print("- Frontend –æ–∂–∏–¥–∞–µ—Ç unit_index –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏ ('01', '02', '03'...)")
        print()
        
        print("–†–ï–®–ï–ù–ò–ï 1 - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é unit_index –≤ backend:")
        print("```python")
        print("# –í —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ individual_items")
        print("unit_index = f'{unit_number:02d}'  # –í–º–µ—Å—Ç–æ unit_index = unit_number")
        print("```")
        print()
        
        print("–†–ï–®–ï–ù–ò–ï 2 - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –≤ frontend:")
        print("```javascript")
        print("// –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ unit_index")
        print("const targetUnit = individual_items.find(item => ")
        print("  String(item.unit_index).padStart(2, '0') === target_unit_index")
        print(");")
        print("```")
        print()
        
        print("–†–ï–®–ï–ù–ò–ï 3 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å individual_number –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        print("```javascript")
        print("// –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É individual_number –≤–º–µ—Å—Ç–æ unit_index")
        print("const targetUnit = individual_items.find(item => ")
        print("  item.individual_number === qr_code")
        print(");")
        print("```")
        print()
        
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –†–ï–®–ï–ù–ò–ï 1 (–∏—Å–ø—Ä–∞–≤–∏—Ç—å backend)")
        print("   –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ")

    def run_detailed_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        print("üéØ –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º unit_index –≤ QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        print("=" * 80)
        print()
        
        if not self.authenticate_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if not self.analyze_unit_index_format_issue():
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
        if not self.test_different_search_approaches():
            return False
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        self.suggest_backend_fix()
        
        print("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 30)
        print("–ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ù–ê–ô–î–ï–ù–ê: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ unit_index")
        print("–†–ï–®–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é unit_index –≤ backend –∏–ª–∏ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –≤ frontend")
        
        return True

if __name__ == "__main__":
    analyzer = DetailedQRFormatAnalyzer()
    success = analyzer.run_detailed_analysis()
    sys.exit(0 if success else 1)