#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è QR –∫–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–¥ "01-01-001", –Ω–æ –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ "01" –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤, 
–≤–º–µ—Å—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ 001, 002, 003.

–ó–ê–î–ê–ß–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤: POST /api/admin/warehouses/update-id-numbers
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤: —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª–µ warehouse_id_number —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ: —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –í–°–ï —Å–∫–ª–∞–¥—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥ –¥–ª—è —è—á–µ–π–∫–∏ –ë1-–ü1-–Ø1 –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å:
- –°–∫–ª–∞–¥ ‚Ññ1: 001-01-01-001 (–Ω–µ 01-01-01-001)  
- –°–∫–ª–∞–¥ ‚Ññ2: 002-01-01-001 (–Ω–µ 01-01-01-001)

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢:
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥—ã –¥–ª—è –º–∏–Ω–∏–º—É–º 3 —Ä–∞–∑–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ 3-–∑–Ω–∞—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤.
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
API_BASE = f"{BACKEND_URL}/api"

class WarehouseIdNumbersTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.test_results = []
        self.warehouses_before_update = []
        self.warehouses_after_update = []
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def test_admin_auth(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": "+79999888777",
                "password": "admin123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data["access_token"]
                user_info = data["user"]
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {user_info['full_name']} (—Ä–æ–ª—å: {user_info['role']})")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}", "ERROR")
            return False
    
    def get_warehouses_before_update(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤"""
        try:
            self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤...")
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/warehouses", headers=headers)
            
            if response.status_code == 200:
                self.warehouses_before_update = response.json()
                
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(self.warehouses_before_update)} —Å–∫–ª–∞–¥–æ–≤ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
                warehouses_with_numbers = 0
                warehouses_without_numbers = 0
                duplicate_numbers = {}
                
                for warehouse in self.warehouses_before_update:
                    warehouse_id_number = warehouse.get('warehouse_id_number')
                    name = warehouse.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    
                    if warehouse_id_number:
                        warehouses_with_numbers += 1
                        if warehouse_id_number in duplicate_numbers:
                            duplicate_numbers[warehouse_id_number].append(name)
                        else:
                            duplicate_numbers[warehouse_id_number] = [name]
                        self.log(f"   - {name}: –Ω–æ–º–µ—Ä {warehouse_id_number}")
                    else:
                        warehouses_without_numbers += 1
                        self.log(f"   - {name}: –ù–ï–¢ –ù–û–ú–ï–†–ê")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                duplicates_found = {num: names for num, names in duplicate_numbers.items() if len(names) > 1}
                
                if duplicates_found:
                    self.log(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ù–û–ú–ï–†–ê –°–ö–õ–ê–î–û–í:")
                    for duplicate_num, warehouse_names in duplicates_found.items():
                        self.log(f"   - –ù–æ–º–µ—Ä {duplicate_num}: {', '.join(warehouse_names)}")
                
                self.log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                self.log(f"   - –°–∫–ª–∞–¥–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {warehouses_with_numbers}")
                self.log(f"   - –°–∫–ª–∞–¥–æ–≤ –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤: {warehouses_without_numbers}")
                self.log(f"   - –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –Ω–æ–º–µ—Ä–æ–≤: {len(duplicates_found)}")
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}", "ERROR")
            return False
    
    def update_warehouse_id_numbers(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ POST /api/admin/warehouses/update-id-numbers"""
        try:
            self.log("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤...")
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.post(f"{API_BASE}/admin/warehouses/update-id-numbers", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                updated_count = data.get('updated_count', 0)
                total_count = data.get('total_count', 0)
                message = data.get('message', '')
                
                self.log(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
                self.log(f"   - –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                self.log(f"   - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {updated_count}")
                self.log(f"   - –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {total_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'updated_warehouses' in data:
                    updated_warehouses = data['updated_warehouses']
                    self.log(f"   - –î–µ—Ç–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                    for warehouse_info in updated_warehouses[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        name = warehouse_info.get('name', 'N/A')
                        old_number = warehouse_info.get('old_number', '–ù–ï–¢')
                        new_number = warehouse_info.get('new_number', '–ù–ï–¢')
                        self.log(f"     * {name}: {old_number} ‚Üí {new_number}")
                    
                    if len(updated_warehouses) > 5:
                        self.log(f"     ... –∏ –µ—â–µ {len(updated_warehouses) - 5} —Å–∫–ª–∞–¥–æ–≤")
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤: {e}", "ERROR")
            return False
    
    def get_warehouses_after_update(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤"""
        try:
            self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤...")
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/warehouses", headers=headers)
            
            if response.status_code == 200:
                self.warehouses_after_update = response.json()
                
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(self.warehouses_after_update)} —Å–∫–ª–∞–¥–æ–≤ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
                warehouses_with_numbers = 0
                warehouses_without_numbers = 0
                duplicate_numbers = {}
                unique_numbers = set()
                
                for warehouse in self.warehouses_after_update:
                    warehouse_id_number = warehouse.get('warehouse_id_number')
                    name = warehouse.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    
                    if warehouse_id_number:
                        warehouses_with_numbers += 1
                        unique_numbers.add(warehouse_id_number)
                        
                        if warehouse_id_number in duplicate_numbers:
                            duplicate_numbers[warehouse_id_number].append(name)
                        else:
                            duplicate_numbers[warehouse_id_number] = [name]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3 —Ü–∏—Ñ—Ä—ã)
                        if len(warehouse_id_number) == 3 and warehouse_id_number.isdigit():
                            self.log(f"   - {name}: –Ω–æ–º–µ—Ä {warehouse_id_number} ‚úÖ")
                        else:
                            self.log(f"   - {name}: –Ω–æ–º–µ—Ä {warehouse_id_number} ‚ùå (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                    else:
                        warehouses_without_numbers += 1
                        self.log(f"   - {name}: –ù–ï–¢ –ù–û–ú–ï–†–ê ‚ùå")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                duplicates_found = {num: names for num, names in duplicate_numbers.items() if len(names) > 1}
                
                self.log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                self.log(f"   - –°–∫–ª–∞–¥–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {warehouses_with_numbers}")
                self.log(f"   - –°–∫–ª–∞–¥–æ–≤ –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤: {warehouses_without_numbers}")
                self.log(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(unique_numbers)}")
                self.log(f"   - –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –Ω–æ–º–µ—Ä–æ–≤: {len(duplicates_found)}")
                
                if duplicates_found:
                    self.log(f"‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ù–û–ú–ï–†–ê –°–ö–õ–ê–î–û–í –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
                    for duplicate_num, warehouse_names in duplicates_found.items():
                        self.log(f"   - –ù–æ–º–µ—Ä {duplicate_num}: {', '.join(warehouse_names)}")
                    return False
                
                if warehouses_without_numbers > 0:
                    self.log(f"‚ùå –ù–ê–ô–î–ï–ù–´ –°–ö–õ–ê–î–´ –ë–ï–ó –ù–û–ú–ï–†–û–í –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø: {warehouses_without_numbers}")
                    return False
                
                self.log(f"‚úÖ –í—Å–µ —Å–∫–ª–∞–¥—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞!")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", "ERROR")
            return False
    
    def test_qr_code_generation_with_unique_numbers(self):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤")
            
            if len(self.warehouses_after_update) < 2:
                self.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)", "ERROR")
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–ª–∞–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å)
            test_warehouses = self.warehouses_after_update[:min(3, len(self.warehouses_after_update))]
            
            self.log(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤ –¥–ª—è {len(test_warehouses)} —Å–∫–ª–∞–¥–æ–≤:")
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            qr_results = []
            
            for i, warehouse in enumerate(test_warehouses):
                warehouse_id = warehouse['id']
                warehouse_name = warehouse['name']
                warehouse_id_number = warehouse.get('warehouse_id_number', '–ù–ï–¢')
                
                self.log(f"   {i+1}. {warehouse_name} (–Ω–æ–º–µ—Ä: {warehouse_id_number})")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –¥–ª—è —è—á–µ–π–∫–∏ –ë1-–ü1-–Ø1 —Å format: 'id'
                cell_data = {
                    "warehouse_id": warehouse_id,
                    "block": 1,
                    "shelf": 1,
                    "cell": 1,
                    "format": "id"  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–ê–ú–ï–¢–†
                }
                
                response = self.session.post(f"{API_BASE}/warehouse/cell/generate-qr", 
                                           json=cell_data, headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    cell_code = data.get('cell_code', '')
                    format_type = data.get('format_type', '')
                    
                    qr_results.append({
                        'warehouse_name': warehouse_name,
                        'warehouse_id_number': warehouse_id_number,
                        'cell_code': cell_code,
                        'format_type': format_type
                    })
                    
                    self.log(f"      ‚úÖ QR –∫–æ–¥: {cell_code} (—Ñ–æ—Ä–º–∞—Ç: {format_type})")
                else:
                    self.log(f"      ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞: {response.status_code} - {response.text}")
                    return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.log(f"\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í:")
            
            unique_codes = set()
            unique_warehouse_numbers = set()
            format_issues = []
            
            for result in qr_results:
                cell_code = result['cell_code']
                warehouse_name = result['warehouse_name']
                warehouse_id_number = result['warehouse_id_number']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç XXX-BB-PP-CCC
                parts = cell_code.split('-')
                if len(parts) == 4:
                    warehouse_part, block_part, shelf_part, cell_part = parts
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
                    if (len(warehouse_part) == 3 and warehouse_part.isdigit() and
                        len(block_part) == 2 and block_part.isdigit() and
                        len(shelf_part) == 2 and shelf_part.isdigit() and
                        len(cell_part) == 3 and cell_part.isdigit()):
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–∞
                        if warehouse_part == warehouse_id_number:
                            self.log(f"   ‚úÖ {warehouse_name}: {cell_code} (–Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞ {warehouse_part} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω)")
                            unique_codes.add(cell_code)
                            unique_warehouse_numbers.add(warehouse_part)
                        else:
                            self.log(f"   ‚ùå {warehouse_name}: {cell_code} (–Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞ {warehouse_part} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {warehouse_id_number})")
                            format_issues.append(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–∞: {warehouse_part} != {warehouse_id_number}")
                    else:
                        self.log(f"   ‚ùå {warehouse_name}: {cell_code} (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç XXX-BB-PP-CCC)")
                        format_issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {cell_code}")
                else:
                    self.log(f"   ‚ùå {warehouse_name}: {cell_code} (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 4 —á–∞—Å—Ç–∏)")
                    format_issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {cell_code}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.log(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
            self.log(f"   - –í—Å–µ–≥–æ QR –∫–æ–¥–æ–≤: {len(qr_results)}")
            self.log(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö QR –∫–æ–¥–æ–≤: {len(unique_codes)}")
            self.log(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤: {len(unique_warehouse_numbers)}")
            self.log(f"   - –ü—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: {len(format_issues)}")
            
            if format_issues:
                self.log(f"‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –§–û–†–ú–ê–¢–û–ú:")
                for issue in format_issues:
                    self.log(f"   - {issue}")
                return False
            
            if len(unique_codes) == len(qr_results) and len(unique_warehouse_numbers) == len(qr_results):
                self.log(f"‚úÖ –í–°–ï QR –ö–û–î–´ –£–ù–ò–ö–ê–õ–¨–ù–´ –ò –°–û–î–ï–†–ñ–ê–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ù–û–ú–ï–†–ê –°–ö–õ–ê–î–û–í!")
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.log(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
                for result in qr_results:
                    warehouse_name = result['warehouse_name']
                    cell_code = result['cell_code']
                    self.log(f"   - {warehouse_name}: {cell_code}")
                
                return True
            else:
                self.log(f"‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø QR –ö–û–î–´ –ò–õ–ò –ù–û–ú–ï–†–ê –°–ö–õ–ê–î–û–í!")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤: {e}", "ERROR")
            return False
    
    def test_all_warehouses_have_unique_numbers(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –í–°–ï —Å–∫–ª–∞–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞"""
        try:
            self.log("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤ –í–°–ï–• —Å–∫–ª–∞–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            
            if not self.warehouses_after_update:
                self.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–ª–∞–¥–∞—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "ERROR")
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
            all_numbers = []
            warehouses_info = []
            
            for warehouse in self.warehouses_after_update:
                warehouse_id_number = warehouse.get('warehouse_id_number')
                name = warehouse.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                
                if warehouse_id_number:
                    all_numbers.append(warehouse_id_number)
                    warehouses_info.append({
                        'name': name,
                        'number': warehouse_id_number
                    })
                else:
                    self.log(f"‚ùå –°–∫–ª–∞–¥ –±–µ–∑ –Ω–æ–º–µ—Ä–∞: {name}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            unique_numbers = set(all_numbers)
            
            self.log(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–°–ï–• –°–ö–õ–ê–î–û–í:")
            self.log(f"   - –í—Å–µ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {len(self.warehouses_after_update)}")
            self.log(f"   - –°–∫–ª–∞–¥–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {len(all_numbers)}")
            self.log(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {len(unique_numbers)}")
            
            if len(unique_numbers) == len(all_numbers):
                self.log(f"‚úÖ –í–°–ï {len(all_numbers)} –°–ö–õ–ê–î–û–í –ò–ú–ï–Æ–¢ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ù–û–ú–ï–†–ê!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–º–µ—Ä–æ–≤
                sorted_warehouses = sorted(warehouses_info, key=lambda x: x['number'])
                self.log(f"üìã –ü–†–ò–ú–ï–†–´ –ù–û–ú–ï–†–û–í –°–ö–õ–ê–î–û–í:")
                for warehouse_info in sorted_warehouses[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    self.log(f"   - {warehouse_info['name']}: {warehouse_info['number']}")
                
                if len(sorted_warehouses) > 10:
                    self.log(f"   ... –∏ –µ—â–µ {len(sorted_warehouses) - 10} —Å–∫–ª–∞–¥–æ–≤")
                
                return True
            else:
                # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                duplicates = {}
                for number in all_numbers:
                    if all_numbers.count(number) > 1:
                        if number not in duplicates:
                            duplicates[number] = []
                        for warehouse_info in warehouses_info:
                            if warehouse_info['number'] == number:
                                duplicates[number].append(warehouse_info['name'])
                
                self.log(f"‚ùå –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ù–û–ú–ï–†–ê –°–ö–õ–ê–î–û–í:")
                for duplicate_number, warehouse_names in duplicates.items():
                    self.log(f"   - –ù–æ–º–µ—Ä {duplicate_number}: {', '.join(warehouse_names)}")
                
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤: {e}", "ERROR")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –° –ù–û–ú–ï–†–ê–ú–ò –°–ö–õ–ê–î–û–í")
        self.log("=" * 100)
        self.log("–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ '01' –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤")
        self.log("–¶–ï–õ–¨: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ 001, 002, 003...")
        self.log("=" * 100)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", self.test_admin_auth),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self.get_warehouses_before_update),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤", self.update_warehouse_id_numbers),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self.get_warehouses_after_update),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏", self.test_qr_code_generation_with_unique_numbers),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –í–°–ï–• –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤", self.test_all_warehouses_have_unique_numbers)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            self.log(f"\nüìã –¢–ï–°–¢: {test_name}")
            self.log("-" * 80)
            
            try:
                result = test_func()
                if result:
                    passed_tests += 1
                    self.test_results.append(f"‚úÖ {test_name}")
                    self.log(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: {test_name}")
                else:
                    self.test_results.append(f"‚ùå {test_name}")
                    self.log(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: {test_name}")
            except Exception as e:
                self.test_results.append(f"‚ùå {test_name} (–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e})")
                self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –í –¢–ï–°–¢–ï {test_name}: {e}", "ERROR")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.log("\n" + "=" * 100)
        self.log("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–û–ú–ï–†–û–í –°–ö–õ–ê–î–û–í")
        self.log("=" * 100)
        
        success_rate = (passed_tests / total_tests) * 100
        self.log(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        self.log("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            self.log(f"   {result}")
        
        if success_rate >= 80:
            self.log(f"\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è QR –∫–æ–¥–æ–≤ –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
            self.log(f"‚úÖ –í—Å–µ —Å–∫–ª–∞–¥—ã —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ 3-–∑–Ω–∞—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (001, 002, 003...)")
            self.log(f"‚úÖ QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ XXX-BB-PP-CCC")
            self.log(f"‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç:")
            self.log(f"   - –°–∫–ª–∞–¥ ‚Ññ1: 001-01-01-001 (–Ω–µ 01-01-01-001)")
            self.log(f"   - –°–∫–ª–∞–¥ ‚Ññ2: 002-01-01-001 (–Ω–µ 01-01-01-001)")
        else:
            self.log(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            self.log(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤")
        
        return success_rate >= 80

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è QR –∫–æ–¥–æ–≤ –≤ TAJLINE.TJ")
    print("=" * 120)
    
    tester = WarehouseIdNumbersTester()
    success = tester.run_all_tests()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()