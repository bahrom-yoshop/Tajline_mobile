#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–ê–†–°–ò–ù–ì–ê UUID –í CELL_CODE –î–õ–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cell_code –≤ /api/cargo/place-in-cell
- –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è warehouse_id –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–∏—Å—ã (UUID)
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ "-–ë" –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è warehouse_id –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —è—á–µ–π–∫–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–∑—ã
3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID –≤ endpoint /api/cargo/place-in-cell:
   - –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ '–ë1-–ü1-–Ø3'
   - –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å UUID 'WAREHOUSE_ID-–ë1-–ü1-–Ø1'
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ UUID —Å –¥–µ—Ñ–∏—Å–∞–º–∏ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç '–ë1-–ü1-–Ø3' —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- UUID-—Ñ–æ—Ä–º–∞—Ç '492505e9-51d1-4304-a09a-ae3d77bf0bf0-–ë1-–ü1-–Ø1' –¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç—å—Å—è
- –û—à–∏–±–∫–∞ 'invalid literal for int() with base 10: 1d1' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-manage-1.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class UUIDCellParsingTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_info = None
        self.test_results = []
        self.warehouses = []
        self.available_cargo = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ ({WAREHOUSE_OPERATOR['phone']})...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user", {})
                
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')}, –Ω–æ–º–µ—Ä: {self.operator_info.get('user_number')})"
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"Exception: {str(e)}")
            return False
    
    def get_operator_warehouses(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        print(f"\nüè≠ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                self.warehouses = response.json()
                
                if self.warehouses:
                    # –ù–∞–π–¥–µ–º —Å–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–≤—ã–π –∏–ª–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º ID)
                    default_warehouse = None
                    target_warehouse_id = "492505e9-51d1-4304-a09a-ae3d77bf0bf0"
                    
                    for warehouse in self.warehouses:
                        if warehouse.get("id") == target_warehouse_id:
                            default_warehouse = warehouse
                            break
                    
                    if not default_warehouse:
                        default_warehouse = self.warehouses[0]
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(self.warehouses)} —Å–∫–ª–∞–¥–æ–≤, —Å–∫–ª–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_warehouse.get('name')} (ID: {default_warehouse.get('id')})",
                        {
                            "total_warehouses": len(self.warehouses),
                            "default_warehouse": default_warehouse,
                            "target_warehouse_found": default_warehouse.get("id") == target_warehouse_id
                        }
                    )
                    return True
                else:
                    self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"Exception: {str(e)}")
            return False
    
    def get_available_cargo(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print(f"\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                self.available_cargo = data.get("items", [])
                
                if self.available_cargo:
                    test_cargo = self.available_cargo[0]
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(self.available_cargo)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {test_cargo.get('cargo_number')}",
                        {
                            "total_cargo": len(self.available_cargo),
                            "test_cargo": test_cargo
                        }
                    )
                    return True
                else:
                    self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                    return False
            else:
                self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, f"Exception: {str(e)}")
            return False
    
    def test_simple_cell_format(self):
        """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ '–ë1-–ü1-–Ø3'"""
        print(f"\nüîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ '–ë1-–ü1-–Ø3'...")
        
        if not self.available_cargo:
            self.log_result("–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_cargo = self.available_cargo[0]
        cargo_number = test_cargo.get("cargo_number")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ warehouse_id
        simple_cell_code = "–ë1-–ü1-–Ø3"
        
        placement_data = {
            "cargo_number": cargo_number,
            "cell_code": simple_cell_code
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/cargo/place-in-cell",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_result(
                    "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                    True,
                    f"–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç '{simple_cell_code}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                    {
                        "cell_code": simple_cell_code,
                        "cargo_number": cargo_number,
                        "response": data
                    }
                )
                return True
            elif response.status_code == 400:
                # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å warehouse_id
                error_data = response.json()
                error_message = error_data.get("detail", "")
                
                if "Invalid cell code format" in error_message:
                    self.log_result(
                        "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                        True,
                        f"–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç '{simple_cell_code}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π 'Invalid cell code format' –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å (—Ç—Ä–µ–±—É–µ—Ç warehouse_id)",
                        {
                            "cell_code": simple_cell_code,
                            "expected_error": True,
                            "error_message": error_message
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {error_message}",
                        {"error_data": error_data}
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"status_code": response.status_code}
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞", False, f"Exception: {str(e)}")
            return False
    
    def test_uuid_cell_format(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏"""
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏...")
        
        if not self.available_cargo or not self.warehouses:
            self.log_result("UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–ª–∏ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_cargo = self.available_cargo[0]
        cargo_number = test_cargo.get("cargo_number")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π UUID —Å–∫–ª–∞–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        target_warehouse_id = "492505e9-51d1-4304-a09a-ae3d77bf0bf0"
        warehouse = None
        
        for w in self.warehouses:
            if w.get("id") == target_warehouse_id:
                warehouse = w
                break
        
        if not warehouse:
            warehouse = self.warehouses[0]
            target_warehouse_id = warehouse.get("id")
        
        # UUID —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ñ–∏—Å–∞–º–∏ - —ç—Ç–æ –±—ã–ª–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
        uuid_cell_code = f"{target_warehouse_id}-–ë1-–ü1-–Ø1"
        
        placement_data = {
            "cargo_number": cargo_number,
            "cell_code": uuid_cell_code
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/cargo/place-in-cell",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_result(
                    "UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)",
                    True,
                    f"üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: UUID —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ñ–∏—Å–∞–º–∏ '{uuid_cell_code}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –û—à–∏–±–∫–∞ 'invalid literal for int() with base 10: 1d1' –ò–°–ü–†–ê–í–õ–ï–ù–ê!",
                    {
                        "cell_code": uuid_cell_code,
                        "warehouse_id": target_warehouse_id,
                        "cargo_number": cargo_number,
                        "response": data,
                        "uuid_parsing_fixed": True
                    }
                )
                return True
            elif response.status_code == 400:
                error_data = response.json()
                error_message = error_data.get("detail", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –ª–∏ —Å—Ç–∞—Ä–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID
                if "invalid literal for int() with base 10" in error_message and "1d1" in error_message:
                    self.log_result(
                        "UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)",
                        False,
                        f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∞ 'invalid literal for int() with base 10: 1d1' –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê! Backend –Ω–µ –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å UUID —Å –¥–µ—Ñ–∏—Å–∞–º–∏",
                        {
                            "cell_code": uuid_cell_code,
                            "warehouse_id": target_warehouse_id,
                            "error_message": error_message,
                            "uuid_parsing_broken": True,
                            "root_cause": "Backend –∫–æ–¥ –≤ /api/cargo/place-in-cell –∏–º–µ–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø—Ä–∏ split('-') –Ω–∞ UUID —Å –¥–µ—Ñ–∏—Å–∞–º–∏, —á–∞—Å—Ç–∏ UUID –ø–æ–ø–∞–¥–∞—é—Ç –≤ block/shelf/cell –ø–∞—Ä—Å–∏–Ω–≥"
                        }
                    )
                    return False
                elif "Cell not found" in error_message or "already occupied" in error_message:
                    # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ - –∑–Ω–∞—á–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ UUID –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
                    self.log_result(
                        "UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)",
                        True,
                        f"‚úÖ UUID –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –û—à–∏–±–∫–∞ '{error_message}' —Å–≤—è–∑–∞–Ω–∞ —Å –ª–æ–≥–∏–∫–æ–π —è—á–µ–µ–∫, –∞ –Ω–µ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º UUID",
                        {
                            "cell_code": uuid_cell_code,
                            "warehouse_id": target_warehouse_id,
                            "uuid_parsing_success": True,
                            "cell_logic_error": error_message
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è UUID —Ñ–æ—Ä–º–∞—Ç–∞: {error_message}",
                        {
                            "cell_code": uuid_cell_code,
                            "error_data": error_data
                        }
                    )
                    return False
            else:
                self.log_result(
                    "UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"status_code": response.status_code}
                )
                return False
                
        except Exception as e:
            self.log_result("UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô)", False, f"Exception: {str(e)}")
            return False
    
    def test_id_based_format(self):
        """–¢–µ—Å—Ç ID-based —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ '001-01-01-001'"""
        print(f"\nüîç –¢–µ—Å—Ç ID-based —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ '001-01-01-001'...")
        
        if not self.available_cargo:
            self.log_result("ID-based —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_cargo = self.available_cargo[0]
        cargo_number = test_cargo.get("cargo_number")
        
        # ID-based —Ñ–æ—Ä–º–∞—Ç
        id_based_cell_code = "001-01-01-001"
        
        placement_data = {
            "cargo_number": cargo_number,
            "cell_code": id_based_cell_code
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/cargo/place-in-cell",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_result(
                    "ID-based —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                    True,
                    f"ID-based —Ñ–æ—Ä–º–∞—Ç '{id_based_cell_code}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                    {
                        "cell_code": id_based_cell_code,
                        "cargo_number": cargo_number,
                        "response": data
                    }
                )
                return True
            elif response.status_code == 400:
                error_data = response.json()
                error_message = error_data.get("detail", "")
                
                if "Cell not found" in error_message or "already occupied" in error_message:
                    self.log_result(
                        "ID-based —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                        True,
                        f"ID-based —Ñ–æ—Ä–º–∞—Ç '{id_based_cell_code}' —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —è—á–µ–π–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {error_message}",
                        {
                            "cell_code": id_based_cell_code,
                            "format_works": True,
                            "cell_issue": error_message
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "ID-based —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                        False,
                        f"–û—à–∏–±–∫–∞ –¥–ª—è ID-based —Ñ–æ—Ä–º–∞—Ç–∞: {error_message}",
                        {"error_data": error_data}
                    )
                    return False
            else:
                self.log_result(
                    "ID-based —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    {"status_code": response.status_code}
                )
                return False
                
        except Exception as e:
            self.log_result("ID-based —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞", False, f"Exception: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ü–ê–†–°–ò–ù–ì–ê UUID –í CELL_CODE –î–õ–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –í TAJLINE.TJ")
        print("=" * 120)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        if not self.get_operator_warehouses():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        if not self.get_available_cargo():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # 4. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–ê–†–°–ò–ù–ì–ê
        print(f"\nüö® –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í –ü–ê–†–°–ò–ù–ì–ê UUID –í CELL_CODE...")
        
        test_results = []
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        test_results.append(self.test_simple_cell_format())
        
        # –¢–µ—Å—Ç 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - UUID —Ñ–æ—Ä–º–∞—Ç —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        test_results.append(self.test_uuid_cell_format())
        
        # –¢–µ—Å—Ç 3: ID-based —Ñ–æ—Ä–º–∞—Ç
        test_results.append(self.test_id_based_format())
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 120)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['message']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É - UUID –ø–∞—Ä—Å–∏–Ω–≥
        uuid_test = next((r for r in self.test_results if "UUID —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞" in r["test"]), None)
        if uuid_test:
            if uuid_test["success"]:
                print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID –≤ cell_code –†–ê–ë–û–¢–ê–Æ–¢!")
                print("‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç QR –∫–æ–¥—ã —Å UUID warehouse_id —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –¥–µ—Ñ–∏—Å—ã")
                print("‚úÖ –û—à–∏–±–∫–∞ 'invalid literal for int() with base 10: 1d1' –ò–°–ü–†–ê–í–õ–ï–ù–ê")
            else:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID –ù–ï –ó–ê–í–ï–†–®–ï–ù–´!")
                print("‚ùå Backend –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å QR –∫–æ–¥—ã —Å UUID warehouse_id –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ñ–∏—Å–æ–≤")
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ /api/cargo/place-in-cell")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        simple_test = next((r for r in self.test_results if "–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞" in r["test"]), None)
        if simple_test and simple_test["success"]:
            print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç '–ë1-–ü1-–Ø3' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID-based —Ñ–æ—Ä–º–∞—Ç
        id_test = next((r for r in self.test_results if "ID-based —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞" in r["test"]), None)
        if id_test and id_test["success"]:
            print("‚úÖ ID-based —Ñ–æ—Ä–º–∞—Ç '001-01-01-001' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 85:
            print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID –≤ cell_code —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã")
            return True
        else:
            print(f"\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ UUID —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = UUIDCellParsingTester()
    success = tester.run_all_tests()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()