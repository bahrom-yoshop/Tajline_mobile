#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –í –§–û–†–ú–ê–¢–ï WAREHOUSE_ID-BLOCK-SHELF-CELL

–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "001-01-01-003" 
–≥–¥–µ 001 - ID —Å–∫–ª–∞–¥–∞, 01 - –±–ª–æ–∫, 01 - –ø–æ–ª–∫–∞, 003 - –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏. –ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–¥–∞–≤–∞–ª–æ –æ—à–∏–±–∫—É "—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω".

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ –≤ API endpoint POST /api/operator/placement/verify-cell
- –¢–µ–ø–µ—Ä—å –¥–ª—è –Ω–æ–º–µ—Ä–Ω—ã—Ö warehouse_id (–Ω–∞–ø—Ä–∏–º–µ—Ä "001") –ø–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –ø–æ –ø–æ–ª—é warehouse_id_number
- –î–ª—è UUID warehouse_id –ø–æ–∏—Å–∫ –≤–µ–¥–µ—Ç—Å—è –ø–æ –ø–æ–ª—é id

–¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò:
1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê: +79777888999 / warehouse123
2. –¢–ï–°–¢ 1 - –ü—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ —Å warehouse_id_number: 
   - QR –∫–æ–¥: "001-01-01-003" (001=warehouse_id_number, 01=block, 01=shelf, 003=cell)
   - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω, —è—á–µ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞
3. –¢–ï–°–¢ 2 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫:
   - –§–æ—Ä–º–∞—Ç: "002-02-02-001"
   - –§–æ—Ä–º–∞—Ç: "003-03-03-005"
4. –¢–ï–°–¢ 3 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–∞–¥–æ–≤:
   - QR –∫–æ–¥: "999-01-01-001" (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–ª–∞–¥)
   - –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "–°–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º 999 –Ω–µ –Ω–∞–π–¥–µ–Ω"

API ENDPOINT –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- POST /api/operator/placement/verify-cell

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
- QR –∫–æ–¥ "001-01-01-003" —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è
- –°–∫–ª–∞–¥ —Å warehouse_id_number="001" –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–∞–¥–æ–≤
"""

import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://tajline-cargo-7.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRCellScanningTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
            print("=" * 60)
            
            response = self.session.post(f"{API_BASE}/auth/login", json=WAREHOUSE_OPERATOR_CREDENTIALS)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {self.operator_user.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_qr_cell_001_01_01_003(self):
        """–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ "001-01-01-003" """
        try:
            print("üéØ –¢–ï–°–¢ 1: QR –ö–û–î –Ø–ß–ï–ô–ö–ò '001-01-01-003'")
            print("=" * 60)
            
            qr_code = "001-01-01-003"
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": qr_code}
            )
            
            print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π QR –∫–æ–¥: {qr_code}")
            print(f"üåê HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                
                if data.get("success"):
                    cell_info = data.get("cell_info", {})
                    warehouse_info = data.get("warehouse_info", {})
                    
                    self.log_test(
                        "QR –∫–æ–¥ '001-01-01-003' - —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω: {warehouse_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID –Ω–æ–º–µ—Ä: {warehouse_info.get('warehouse_id_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}), "
                        f"–Ø—á–µ–π–∫–∞: {cell_info.get('cell_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
                        f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–Ω—è—Ç–∞' if cell_info.get('is_occupied') else '–°–≤–æ–±–æ–¥–Ω–∞'}"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥
                    warehouse_id_number = warehouse_info.get('warehouse_id_number')
                    if warehouse_id_number == "001":
                        self.log_test(
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω –ø–æ warehouse_id_number",
                            True,
                            f"–°–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º '001' –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                        )
                    else:
                        self.log_test(
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω –ø–æ warehouse_id_number",
                            False,
                            f"–ù–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥",
                            "001",
                            str(warehouse_id_number)
                        )
                    
                    return True
                else:
                    error_message = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.log_test(
                        "QR –∫–æ–¥ '001-01-01-003' - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏",
                        False,
                        f"–û—à–∏–±–∫–∞: {error_message}",
                        "–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏",
                        f"–û—à–∏–±–∫–∞: {error_message}"
                    )
                    return False
            else:
                self.log_test(
                    "QR –∫–æ–¥ '001-01-01-003' - HTTP –æ—à–∏–±–∫–∞",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("QR –∫–æ–¥ '001-01-01-003'", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_qr_cell_002_02_02_001(self):
        """–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ "002-02-02-001" """
        try:
            print("üéØ –¢–ï–°–¢ 2: QR –ö–û–î –Ø–ß–ï–ô–ö–ò '002-02-02-001'")
            print("=" * 60)
            
            qr_code = "002-02-02-001"
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": qr_code}
            )
            
            print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π QR –∫–æ–¥: {qr_code}")
            print(f"üåê HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                
                if data.get("success"):
                    cell_info = data.get("cell_info", {})
                    warehouse_info = data.get("warehouse_info", {})
                    
                    self.log_test(
                        "QR –∫–æ–¥ '002-02-02-001' - —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω: {warehouse_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID –Ω–æ–º–µ—Ä: {warehouse_info.get('warehouse_id_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}), "
                        f"–Ø—á–µ–π–∫–∞: {cell_info.get('cell_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
                        f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–Ω—è—Ç–∞' if cell_info.get('is_occupied') else '–°–≤–æ–±–æ–¥–Ω–∞'}"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥
                    warehouse_id_number = warehouse_info.get('warehouse_id_number')
                    if warehouse_id_number == "002":
                        self.log_test(
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω –ø–æ warehouse_id_number",
                            True,
                            f"–°–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º '002' –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                        )
                    else:
                        self.log_test(
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω –ø–æ warehouse_id_number",
                            False,
                            f"–ù–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥",
                            "002",
                            str(warehouse_id_number)
                        )
                    
                    return True
                else:
                    error_message = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    # –î–ª—è —Å–∫–ª–∞–¥–∞ 002 –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π, –µ—Å–ª–∏ —Å–∫–ª–∞–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.lower():
                        self.log_test(
                            "QR –∫–æ–¥ '002-02-02-001' - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞",
                            True,
                            f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–ª–∞–¥–∞: {error_message}"
                        )
                        return True
                    else:
                        self.log_test(
                            "QR –∫–æ–¥ '002-02-02-001' - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
                            False,
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_message}"
                        )
                        return False
            else:
                self.log_test(
                    "QR –∫–æ–¥ '002-02-02-001' - HTTP –æ—à–∏–±–∫–∞",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("QR –∫–æ–¥ '002-02-02-001'", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_qr_cell_003_03_03_005(self):
        """–¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ "003-03-03-005" """
        try:
            print("üéØ –¢–ï–°–¢ 3: QR –ö–û–î –Ø–ß–ï–ô–ö–ò '003-03-03-005'")
            print("=" * 60)
            
            qr_code = "003-03-03-005"
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": qr_code}
            )
            
            print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π QR –∫–æ–¥: {qr_code}")
            print(f"üåê HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                
                if data.get("success"):
                    cell_info = data.get("cell_info", {})
                    warehouse_info = data.get("warehouse_info", {})
                    
                    self.log_test(
                        "QR –∫–æ–¥ '003-03-03-005' - —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω: {warehouse_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID –Ω–æ–º–µ—Ä: {warehouse_info.get('warehouse_id_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}), "
                        f"–Ø—á–µ–π–∫–∞: {cell_info.get('cell_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, "
                        f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–Ω—è—Ç–∞' if cell_info.get('is_occupied') else '–°–≤–æ–±–æ–¥–Ω–∞'}"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥
                    warehouse_id_number = warehouse_info.get('warehouse_id_number')
                    if warehouse_id_number == "003":
                        self.log_test(
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω –ø–æ warehouse_id_number",
                            True,
                            f"–°–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º '003' –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                        )
                    else:
                        self.log_test(
                            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω –ø–æ warehouse_id_number",
                            False,
                            f"–ù–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫–ª–∞–¥",
                            "003",
                            str(warehouse_id_number)
                        )
                    
                    return True
                else:
                    error_message = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    # –î–ª—è —Å–∫–ª–∞–¥–∞ 003 –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–π, –µ—Å–ª–∏ —Å–∫–ª–∞–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.lower():
                        self.log_test(
                            "QR –∫–æ–¥ '003-03-03-005' - –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞",
                            True,
                            f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–ª–∞–¥–∞: {error_message}"
                        )
                        return True
                    else:
                        self.log_test(
                            "QR –∫–æ–¥ '003-03-03-005' - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
                            False,
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_message}"
                        )
                        return False
            else:
                self.log_test(
                    "QR –∫–æ–¥ '003-03-03-005' - HTTP –æ—à–∏–±–∫–∞",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("QR –∫–æ–¥ '003-03-03-005'", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_qr_cell_999_01_01_001(self):
        """–¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–∞ —è—á–µ–π–∫–∏ "999-01-01-001" (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–ª–∞–¥)"""
        try:
            print("üéØ –¢–ï–°–¢ 4: QR –ö–û–î –Ø–ß–ï–ô–ö–ò '999-01-01-001' (–ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –°–ö–õ–ê–î)")
            print("=" * 60)
            
            qr_code = "999-01-01-001"
            
            response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": qr_code}
            )
            
            print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π QR –∫–æ–¥: {qr_code}")
            print(f"üåê HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                
                if not data.get("success"):
                    error_message = data.get("error", "")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å–∫–ª–∞–¥–µ
                    if "999" in error_message and ("–Ω–µ –Ω–∞–π–¥–µ–Ω" in error_message.lower() or "not found" in error_message.lower()):
                        self.log_test(
                            "QR –∫–æ–¥ '999-01-01-001' - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞",
                            True,
                            f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–ª–∞–¥–∞: {error_message}"
                        )
                        return True
                    else:
                        self.log_test(
                            "QR –∫–æ–¥ '999-01-01-001' - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞",
                            False,
                            f"–û—à–∏–±–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ 999: {error_message}",
                            "–°–∫–ª–∞–¥ —Å –Ω–æ–º–µ—Ä–æ–º 999 –Ω–µ –Ω–∞–π–¥–µ–Ω",
                            error_message
                        )
                        return False
                else:
                    self.log_test(
                        "QR –∫–æ–¥ '999-01-01-001' - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö",
                        False,
                        f"–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–ª–∞–¥ 999 –±—ã–ª –Ω–∞–π–¥–µ–Ω",
                        "–û—à–∏–±–∫–∞ '—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'",
                        "–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
                    )
                    return False
            else:
                # HTTP –æ—à–∏–±–∫–∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–æ–π –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–ª–∞–¥–∞
                self.log_test(
                    "QR –∫–æ–¥ '999-01-01-001' - HTTP –æ—à–∏–±–∫–∞ (–ø—Ä–∏–µ–º–ª–µ–º–æ)",
                    True,
                    f"HTTP –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–ª–∞–¥–∞: {response.status_code}"
                )
                return True
                
        except Exception as e:
            self.log_test("QR –∫–æ–¥ '999-01-01-001'", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_invalid_qr_formats(self):
        """–¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ QR –∫–æ–¥–æ–≤"""
        try:
            print("üéØ –¢–ï–°–¢ 5: –ù–ï–í–ï–†–ù–´–ï –§–û–†–ú–ê–¢–´ QR –ö–û–î–û–í")
            print("=" * 60)
            
            invalid_qr_codes = [
                "",  # –ü—É—Å—Ç–æ–π QR –∫–æ–¥
                "invalid",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                "001-01",  # –ù–µ–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                "001-01-01",  # –ù–µ–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                "001-01-01-003-extra",  # –õ–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏
                "abc-01-01-003",  # –ù–µ—á–∏—Å–ª–æ–≤–æ–π warehouse_id
                "001-ab-01-003",  # –ù–µ—á–∏—Å–ª–æ–≤–æ–π block
                "001-01-ab-003",  # –ù–µ—á–∏—Å–ª–æ–≤–æ–π shelf
                "001-01-01-abc",  # –ù–µ—á–∏—Å–ª–æ–≤–æ–π cell
            ]
            
            success_count = 0
            total_tests = len(invalid_qr_codes)
            
            for qr_code in invalid_qr_codes:
                print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π QR –∫–æ–¥: '{qr_code}'")
                
                try:
                    response = self.session.post(
                        f"{API_BASE}/operator/placement/verify-cell",
                        json={"qr_code": qr_code}
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        if not data.get("success"):
                            print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            success_count += 1
                        else:
                            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è—Ç")
                    else:
                        print(f"   ‚úÖ HTTP –æ—à–∏–±–∫–∞ (–ø—Ä–∏–µ–º–ª–µ–º–æ): {response.status_code}")
                        success_count += 1
                        
                except Exception as e:
                    print(f"   ‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ (–ø—Ä–∏–µ–º–ª–µ–º–æ): {str(e)}")
                    success_count += 1
            
            self.log_test(
                "–ù–µ–≤–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤",
                success_count == total_tests,
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count}/{total_tests} –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"
            )
            
            return success_count == total_tests
                
        except Exception as e:
            self.log_test("–ù–µ–≤–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–û–í –Ø–ß–ï–ï–ö –í –§–û–†–ú–ê–¢–ï WAREHOUSE_ID-BLOCK-SHELF-CELL")
        print("=" * 100)
        print(f"üåê Backend URL: {BACKEND_URL}")
        print(f"üì± –¢–µ—Å—Ç–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_CREDENTIALS['phone']}")
        print("=" * 100)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_functions = [
            ("QR –∫–æ–¥ '001-01-01-003'", self.test_qr_cell_001_01_01_003),
            ("QR –∫–æ–¥ '002-02-02-001'", self.test_qr_cell_002_02_02_001),
            ("QR –∫–æ–¥ '003-03-03-005'", self.test_qr_cell_003_03_03_005),
            ("QR –∫–æ–¥ '999-01-01-001' (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–ª–∞–¥)", self.test_qr_cell_999_01_01_001),
            ("–ù–µ–≤–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã QR –∫–æ–¥–æ–≤", self.test_invalid_qr_formats),
        ]
        
        test_results = []
        for test_name, test_function in test_functions:
            result = test_function()
            test_results.append((test_name, result))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ QR –∫–æ–¥ '001-01-01-003' —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è")
            print("‚úÖ –°–∫–ª–∞–¥ —Å warehouse_id_number='001' –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–ª–∞–¥–æ–≤")
        elif success_rate >= 80:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –ú–Ω–æ–≥–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        successful_tests = [name for name, result in test_results if result]
        failed_tests = [name for name, result in test_results if not result]
        
        if successful_tests:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã ({len(successful_tests)}):")
            for test in successful_tests:
                print(f"   ‚Ä¢ {test}")
        
        if failed_tests:
            print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã ({len(failed_tests)}):")
            for test in failed_tests:
                print(f"   ‚Ä¢ {test}")
        
        return success_rate == 100

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = QRCellScanningTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        exit(1)

if __name__ == "__main__":
    main()