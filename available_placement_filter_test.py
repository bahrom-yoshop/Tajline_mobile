#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é"

–ü–†–û–ë–õ–ï–ú–ê:
–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ì—Ä—É–∑—ã" -> "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é" –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏ –≥–¥–µ –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã. 
–¢–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ API `/api/operator/cargo/available-for-placement` –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ 
–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞–∫ individual_items.is_placed, —Ç–∞–∫ –∏ placement_records.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø:
‚úÖ –ó–∞—è–≤–∫–∞ 25082235 –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ (–≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã)
‚úÖ –ó–∞—è–≤–∫–∞ 250101 –ù–ï –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ (–≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã)
‚úÖ –¢–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω—ã
‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
‚úÖ –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é"!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_available_for_placement_api():
    """–¢–µ—Å—Ç 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API available-for-placement –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    
    print("\nüéØ –¢–ï–°–¢ 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API available-for-placement")
    print("   üìù –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞—è–≤–∫–∏ 25082235 –∏ 250101 –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ (–≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã)")
    
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement?page=1&per_page=25")
    
    if not response:
        return log_test("API available-for-placement —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ AVAILABLE-FOR-PLACEMENT:")
        print(f"   - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: HTTP {response.status_code}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        items = data.get("items", [])
        pagination = data.get("pagination", {})
        
        print(f"   - –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–ø–∏—Å–∫–µ: {len(items)}")
        print(f"   - –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {pagination}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—è–≤–∫–∏
        found_25082235 = False
        found_250101 = False
        cargo_numbers = []
        
        for item in items:
            cargo_number = item.get("cargo_number", "")
            cargo_numbers.append(cargo_number)
            
            if cargo_number == "25082235":
                found_25082235 = True
                print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ 25082235 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ!")
                print(f"      –î–µ—Ç–∞–ª–∏: {json.dumps(item, indent=6, ensure_ascii=False)}")
            
            if cargo_number == "250101":
                found_250101 = True
                print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ 250101 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ!")
                print(f"      –î–µ—Ç–∞–ª–∏: {json.dumps(item, indent=6, ensure_ascii=False)}")
        
        print(f"   üìã –ù–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –≤ —Å–ø–∏—Å–∫–µ: {cargo_numbers[:10]}{'...' if len(cargo_numbers) > 10 else ''}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success = True
        issues = []
        
        if found_25082235:
            success = False
            issues.append("–ó–∞—è–≤–∫–∞ 25082235 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞)")
        else:
            print(f"   ‚úÖ –£–°–ü–ï–•: –ó–∞—è–≤–∫–∞ 25082235 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)")
        
        if found_250101:
            success = False
            issues.append("–ó–∞—è–≤–∫–∞ 250101 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∞)")
        else:
            print(f"   ‚úÖ –£–°–ü–ï–•: –ó–∞—è–≤–∫–∞ 250101 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
        if len(items) == 0:
            success = False
            issues.append("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç - –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∞—è")
        else:
            print(f"   ‚úÖ –í —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏: {len(items)} –∑–∞—è–≤–æ–∫")
        
        if success:
            details = f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢! –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞. –ü–æ–∫–∞–∑–∞–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ —Å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏"
            return log_test("API available-for-placement —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("API available-for-placement —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("API available-for-placement —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_placement_records_verification():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —á–µ—Ä–µ–∑ placement_records"""
    
    print("\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
    print("   üìù –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –¥–ª—è –∑–∞—è–≤–æ–∫ 25082235 –∏ 250101")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É 25082235
    print("\n   üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É 25082235:")
    response, response_time = make_request("GET", "/operator/cargo/25082235/placement-status")
    
    if response and response.status_code == 200:
        data = response.json()
        print(f"      üìä –°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ 25082235:")
        print(f"         - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {data.get('total_units', 'N/A')}")
        print(f"         - –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {data.get('placed_units', 'N/A')}")
        print(f"         - –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {data.get('placement_percentage', 'N/A')}%")
        
        total_units = data.get('total_units', 0)
        placed_units = data.get('placed_units', 0)
        
        if total_units > 0 and placed_units == total_units:
            print(f"      ‚úÖ –ó–∞—è–≤–∫–∞ 25082235 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_units}/{total_units})")
        elif total_units > 0 and placed_units > 0:
            print(f"      ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ 25082235 —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_units}/{total_units})")
        else:
            print(f"      ‚ùå –ó–∞—è–≤–∫–∞ 25082235 –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_units}/{total_units})")
    else:
        print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ 25082235")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É 250101
    print("\n   üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É 250101:")
    response, response_time = make_request("GET", "/operator/cargo/250101/placement-status")
    
    if response and response.status_code == 200:
        data = response.json()
        print(f"      üìä –°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ 250101:")
        print(f"         - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {data.get('total_units', 'N/A')}")
        print(f"         - –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {data.get('placed_units', 'N/A')}")
        print(f"         - –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {data.get('placement_percentage', 'N/A')}%")
        
        total_units = data.get('total_units', 0)
        placed_units = data.get('placed_units', 0)
        
        if total_units > 0 and placed_units == total_units:
            print(f"      ‚úÖ –ó–∞—è–≤–∫–∞ 250101 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_units}/{total_units})")
        elif total_units > 0 and placed_units > 0:
            print(f"      ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ 250101 —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_units}/{total_units})")
        else:
            print(f"      ‚ùå –ó–∞—è–≤–∫–∞ 250101 –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ ({placed_units}/{total_units})")
    else:
        print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ 250101")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π
    return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü", True, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", response_time)

def test_logging_verification():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ API)"""
    
    print("\nüìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    print("   üìù –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ API –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    # –î–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement?page=1&per_page=25")
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        
        print(f"   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–í–¢–û–†–ù–û–ì–û –í–´–ó–û–í–ê:")
        print(f"      - –ó–∞—è–≤–æ–∫ –≤ —Å–ø–∏—Å–∫–µ: {len(items)}")
        print(f"      - API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ: {response.status_code == 200}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã
        success = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        found_critical = False
        for item in items:
            cargo_number = item.get("cargo_number", "")
            if cargo_number in ["25082235", "250101"]:
                found_critical = True
                issues.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—è–≤–∫–∞ {cargo_number} –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ")
        
        if not found_critical:
            print(f"      ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ")
        
        if success:
            details = f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*80)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    main_test = next((r for r in test_results if "available-for-placement —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è" in r["test"]), None)
    
    if main_test and main_test["success"]:
        print("   ‚úÖ –ó–∞—è–≤–∫–∏ —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
        print("   ‚úÖ –¢–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –ø–æ–∫–∞–∑–∞–Ω—ã")
        print("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        print("   ‚úÖ –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ placement_records")
    else:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ù–ï –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞")
        print("   ‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è available-for-placement –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if success_rate >= 75 and main_test and main_test["success"]:
        print("   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   üìç –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –±–æ–ª—å—à–µ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é'!")
        print("   üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   üìç –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ")
        print("   üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ API available-for-placement")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é'")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_available_for_placement_api,
        test_placement_records_verification,
        test_logging_verification
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_summary()

if __name__ == "__main__":
    main()