#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò delivery_method –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ë–õ–ï–ú–´: 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—ë–º –≥—Ä—É–∑–∞": 
"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–∑input should be pickup or home_delivery"

–í–´–ü–û–õ–ù–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: 
–í —Ñ—É–Ω–∫—Ü–∏–∏ `handleConfirmCargoAcceptance` –≤ App.js –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 13927:
- –ë–´–õ–û: `delivery_method: data.delivery_info.method`
- –°–¢–ê–õ–û: `delivery_method: data.delivery_info.method === 'city_delivery' ? 'home_delivery' : data.delivery_info.method`

–ó–ê–î–ê–ß–ê –î–õ–Ø BACKEND –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API endpoint `/api/operator/cargo/accept` —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ delivery_method
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ backend –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ "pickup" –∏ "home_delivery"
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ "city_delivery" –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
4. –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π frontend –∑–∞–ø—Ä–æ—Å
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-sync.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class DeliveryMethodTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_info = None
        self.test_results = []
        self.created_cargo_ids = []  # Track created cargo for cleanup
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_info = data.get("user", {})
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def create_test_cargo_data(self, delivery_method):
        """Create test cargo data with specified delivery_method"""
        return {
            "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å Delivery Method",
            "sender_phone": "+79777888999",
            "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å Delivery Method", 
            "recipient_phone": "+992987654321",
            "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
            "description": f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ delivery_method: {delivery_method}",
            "route": "moscow_to_tajikistan",
            "payment_method": "cash",
            "delivery_method": delivery_method,  # This is the key field we're testing
            "cargo_items": [
                {
                    "cargo_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ delivery_method {delivery_method}",
                    "quantity": 1,
                    "weight": 5.0,
                    "price_per_kg": 100.0,
                    "total_amount": 500.0
                }
            ]
        }

    def test_delivery_method_pickup(self):
        """Test delivery_method: 'pickup' - should work"""
        try:
            cargo_data = self.create_test_cargo_data("pickup")
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                if cargo_id:
                    self.created_cargo_ids.append(cargo_id)
                
                self.log_test(
                    "delivery_method: 'pickup'",
                    True,
                    f"‚úÖ Backend –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 'pickup'. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id})"
                )
                return True
            else:
                error_text = response.text
                self.log_test(
                    "delivery_method: 'pickup'",
                    False,
                    error=f"HTTP {response.status_code}: {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_test("delivery_method: 'pickup'", False, error=str(e))
            return False

    def test_delivery_method_home_delivery(self):
        """Test delivery_method: 'home_delivery' - should work"""
        try:
            cargo_data = self.create_test_cargo_data("home_delivery")
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                if cargo_id:
                    self.created_cargo_ids.append(cargo_id)
                
                self.log_test(
                    "delivery_method: 'home_delivery'",
                    True,
                    f"‚úÖ Backend –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 'home_delivery'. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id})"
                )
                return True
            else:
                error_text = response.text
                self.log_test(
                    "delivery_method: 'home_delivery'",
                    False,
                    error=f"HTTP {response.status_code}: {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_test("delivery_method: 'home_delivery'", False, error=str(e))
            return False

    def test_delivery_method_city_delivery(self):
        """Test delivery_method: 'city_delivery' - should cause error (validates the problem)"""
        try:
            cargo_data = self.create_test_cargo_data("city_delivery")
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 422 or response.status_code == 400:
                # This is expected - city_delivery should be rejected
                error_text = response.text
                
                # Check if error message mentions the validation issue
                if "pickup" in error_text.lower() and "home_delivery" in error_text.lower():
                    self.log_test(
                        "delivery_method: 'city_delivery'",
                        True,
                        f"‚ùå Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç 'city_delivery' —Å –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É): {error_text}"
                    )
                    return True
                else:
                    self.log_test(
                        "delivery_method: 'city_delivery'",
                        True,
                        f"‚ùå Backend –æ—Ç–∫–ª–æ–Ω—è–µ—Ç 'city_delivery' (HTTP {response.status_code}): {error_text}"
                    )
                    return True
            elif response.status_code == 200:
                # This would be unexpected - city_delivery should not be accepted
                data = response.json()
                cargo_id = data.get("id")
                if cargo_id:
                    self.created_cargo_ids.append(cargo_id)
                
                self.log_test(
                    "delivery_method: 'city_delivery'",
                    False,
                    error="‚ö†Ô∏è Backend –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø—Ä–∏–Ω—è–ª 'city_delivery' - —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
                )
                return False
            else:
                error_text = response.text
                self.log_test(
                    "delivery_method: 'city_delivery'",
                    False,
                    error=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥ {response.status_code}: {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_test("delivery_method: 'city_delivery'", False, error=str(e))
            return False

    def test_frontend_fix_simulation(self):
        """Test simulated frontend fix: send 'home_delivery' when original choice was 'city_delivery'"""
        try:
            # Simulate the frontend fix: when user selects 'city_delivery', 
            # frontend now sends 'home_delivery' instead
            cargo_data = self.create_test_cargo_data("home_delivery")  # Fixed value
            cargo_data["description"] = "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: —Å–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è frontend (city_delivery ‚Üí home_delivery)"
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                if cargo_id:
                    self.created_cargo_ids.append(cargo_id)
                
                self.log_test(
                    "–°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend –∑–∞–ø—Ä–æ—Å–∞",
                    True,
                    f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'home_delivery' –≤–º–µ—Å—Ç–æ 'city_delivery'. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number}"
                )
                return True
            else:
                error_text = response.text
                self.log_test(
                    "–°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend –∑–∞–ø—Ä–æ—Å–∞",
                    False,
                    error=f"HTTP {response.status_code}: {error_text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–∏–º—É–ª—è—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend –∑–∞–ø—Ä–æ—Å–∞", False, error=str(e))
            return False

    def test_backend_validation_details(self):
        """Test to get detailed validation error information"""
        try:
            # Test with invalid delivery_method to see exact validation message
            cargo_data = self.create_test_cargo_data("invalid_method")
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code in [400, 422]:
                error_text = response.text
                self.log_test(
                    "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ backend",
                    True,
                    f"Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_text}"
                )
                return True
            else:
                self.log_test(
                    "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ backend",
                    False,
                    error=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ backend", False, error=str(e))
            return False

    def cleanup_test_data(self):
        """Clean up created test cargo (optional)"""
        if not self.created_cargo_ids:
            return
            
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(self.created_cargo_ids)} –∑–∞—è–≤–æ–∫...")
        # Note: We don't actually delete the test data as it might be useful for debugging
        # and the system should handle test data gracefully
        print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: {self.created_cargo_ids}")

    def run_all_tests(self):
        """Run all delivery_method tests"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò delivery_method –≤ TAJLINE.TJ")
        print("=" * 80)
        print()
        print("–ö–û–ù–¢–ï–ö–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–ª –æ—à–∏–±–∫—É 'input should be pickup or home_delivery'")
        print("–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Frontend —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç 'city_delivery' ‚Üí 'home_delivery'")
        print()
        
        # Authentication
        if not self.authenticate_operator():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT /api/operator/cargo/accept:")
        print("-" * 60)
        
        # Run delivery_method tests
        test_results = []
        test_results.append(self.test_delivery_method_pickup())
        test_results.append(self.test_delivery_method_home_delivery())
        test_results.append(self.test_delivery_method_city_delivery())
        test_results.append(self.test_frontend_fix_simulation())
        test_results.append(self.test_backend_validation_details())
        
        # Summary
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # Detailed results
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 40)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    üìã {result['details']}")
            if result["error"]:
                print(f"    ‚ùå {result['error']}")
        
        print()
        
        # Final assessment
        if success_rate >= 80:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ delivery_method –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
            print("‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 'pickup' –∏ 'home_delivery'")
            print("‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç 'city_delivery'")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π frontend –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ")
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        # Cleanup
        self.cleanup_test_data()
        
        return success_rate >= 75

if __name__ == "__main__":
    tester = DeliveryMethodTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)