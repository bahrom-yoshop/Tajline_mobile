#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

def authenticate():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    session = requests.Session()
    
    response = session.post(f"{API_BASE}/auth/login", json={
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    })
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        session.headers.update({
            "Authorization": f"Bearer {auth_token}"
        })
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return session
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return None

def check_transports(session):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã"""
    print("\nüöõ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        response = session.get(f"{API_BASE}/transport/list")
        if response.status_code == 200:
            data = response.json()
            transports = data if isinstance(data, list) else data.get("transports", [])
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {len(transports)}")
            
            for transport in transports[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {transport.get('transport_number', 'N/A')} (—Å—Ç–∞—Ç—É—Å: {transport.get('status', 'N/A')})")
            
            return transports
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return []

def create_test_transport(session):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
    
    transport_data = {
        "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
        "driver_phone": "+79999999999",
        "transport_number": "001–ê–ê01",
        "capacity_kg": 5000.0,
        "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
    }
    
    try:
        response = session.post(f"{API_BASE}/admin/transport/create", json=transport_data)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {data.get('transport_number')}")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return None

def check_placement_records(session):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
        response = session.get(f"{API_BASE}/operator/cargo/fully-placed")
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", []) if isinstance(data, dict) else data
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(items)}")
            
            if items:
                for item in items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    cargo_number = item.get("cargo_number", "N/A")
                    print(f"   - –ó–∞—è–≤–∫–∞ {cargo_number}")
            
            return items
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return []

def main():
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø CARGO-TO-TRANSPORT")
    print("=" * 60)
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    session = authenticate()
    if not session:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
    transports = check_transports(session)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, —Å–æ–∑–¥–∞–µ–º
    target_transport = None
    for transport in transports:
        if transport.get("transport_number") == "001–ê–ê01":
            target_transport = transport
            break
    
    if not target_transport:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç 001–ê–ê01 –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
        target_transport = create_test_transport(session)
    else:
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω: {target_transport.get('transport_number')} (—Å—Ç–∞—Ç—É—Å: {target_transport.get('status')})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
    placement_records = check_placement_records(session)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {len(transports)}")
    print(f"   –†–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(placement_records)}")
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {'‚úÖ –ì–æ—Ç–æ–≤' if target_transport else '‚ùå –ù–µ –≥–æ—Ç–æ–≤'}")

if __name__ == "__main__":
    main()