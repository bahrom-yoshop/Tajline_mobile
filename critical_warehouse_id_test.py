#!/usr/bin/env python3
"""
Critical Test for Warehouse ID Fix in TAJLINE.TJ
Tests the critical fix for adding warehouse_id to cargo from pickup requests
"""

import requests
import sys
import json
from datetime import datetime

class CriticalWarehouseIdTester:
    def __init__(self, base_url="https://cargo-tracker-33.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üéØ CRITICAL WAREHOUSE_ID FIX TESTER")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 60)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: dict = None, token: str = None) -> tuple[bool, dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_critical_warehouse_id_fix(self):
        """Test CRITICAL FIX: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ warehouse_id –∫ –≥—Ä—É–∑–∞–º –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø WAREHOUSE_ID")
        print("   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ warehouse_id –∫ –≥—Ä—É–∑–∞–º –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        print("   üìã –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("   1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)")
        print("   2) –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ GET /api/operator/warehouse-notifications")
        print("   3) –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - –ø—Ä–∏–Ω—è—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ POST /api/operator/warehouse-notifications/{id}/accept")
        print("   4) –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ POST /api/operator/warehouse-notifications/{id}/complete —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print("   5) –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: GET /api/warehouses/placed-cargo - –î–û–õ–ñ–ù–´ –ø–æ—è–≤–∏—Ç—å—Å—è –≥—Ä—É–∑—ã —Å warehouse_id")
        print("   6) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç: warehouse_id (–Ω–µ null), pickup_request_id, —Å—Ç–∞—Ç—É—Å 'placement_ready'")
        
        all_success = True
        
        # Test 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)
        print("\n   üîê Test 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Warehouse Operator Login for Critical Fix",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        all_success &= success
        
        operator_token = None
        if success and 'access_token' in login_response:
            operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            operator_user_number = operator_user.get('user_number')
            
            print(f"   ‚úÖ Operator login successful: {operator_name}")
            print(f"   üëë Role: {operator_role}")
            print(f"   üìû Phone: {operator_user.get('phone')}")
            print(f"   üÜî User Number: {operator_user_number}")
            
            # Verify role is warehouse_operator
            if operator_role == 'warehouse_operator':
                print("   ‚úÖ Operator role correctly set to 'warehouse_operator'")
            else:
                print(f"   ‚ùå Operator role incorrect: expected 'warehouse_operator', got '{operator_role}'")
                all_success = False
            
            self.tokens['warehouse_operator'] = operator_token
        else:
            print("   ‚ùå Operator login failed - no access token received")
            print(f"   üìÑ Response: {login_response}")
            all_success = False
            return False
        
        # Test 2: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ß–ï–†–ï–ó GET /api/operator/warehouse-notifications
        print("\n   üì¨ Test 2: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ß–ï–†–ï–ó GET /api/operator/warehouse-notifications...")
        
        success, notifications_response = self.run_test(
            "Get Warehouse Notifications",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token
        )
        all_success &= success
        
        active_notification_id = None
        if success:
            print("   ‚úÖ /api/operator/warehouse-notifications endpoint working")
            
            # Check if there are any notifications
            if isinstance(notifications_response, list):
                notification_count = len(notifications_response)
                print(f"   üìä Found {notification_count} notifications")
                
                # Look for an active notification (status != 'completed')
                for notification in notifications_response:
                    notification_status = notification.get('status', '')
                    notification_id = notification.get('id', '')
                    
                    if notification_status in ['pending', 'accepted']:
                        active_notification_id = notification_id
                        print(f"   üéØ Found active notification: {notification_id} (status: {notification_status})")
                        break
                
                if not active_notification_id and notification_count > 0:
                    # Use the first notification for testing
                    active_notification_id = notifications_response[0].get('id')
                    notification_status = notifications_response[0].get('status', 'unknown')
                    print(f"   ‚ÑπÔ∏è  Using first notification for testing: {active_notification_id} (status: {notification_status})")
                    
            elif isinstance(notifications_response, dict):
                notifications = notifications_response.get('notifications', [])
                notification_count = len(notifications)
                print(f"   üìä Found {notification_count} notifications")
                
                if notification_count > 0:
                    active_notification_id = notifications[0].get('id')
                    notification_status = notifications[0].get('status', 'unknown')
                    print(f"   ‚ÑπÔ∏è  Using first notification for testing: {active_notification_id} (status: {notification_status})")
            
            if not active_notification_id:
                print("   ‚ö†Ô∏è  No active notifications found - cannot test complete workflow")
                print("   ‚ÑπÔ∏è  This may be expected if no pickup requests have been delivered to warehouse")
        else:
            print("   ‚ùå /api/operator/warehouse-notifications endpoint failed")
            all_success = False
        
        # Test 3: –ü–†–ò–ù–Ø–¢–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ)
        notification_accepted = False
        if active_notification_id:
            print(f"\n   ‚úÖ Test 3: –ü–†–ò–ù–Ø–¢–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø {active_notification_id}...")
            
            success, accept_response = self.run_test(
                f"Accept Warehouse Notification {active_notification_id}",
                "POST",
                f"/api/operator/warehouse-notifications/{active_notification_id}/accept",
                200,
                token=operator_token
            )
            
            if success:
                print(f"   ‚úÖ Notification {active_notification_id} accepted successfully")
                notification_accepted = True
            else:
                print(f"   ‚ùå Failed to accept notification {active_notification_id}")
                # Continue with testing even if accept fails (might already be accepted)
                notification_accepted = True  # Assume it was already accepted
        else:
            print("\n   ‚ö†Ô∏è  Test 3: –ü–†–û–ü–£–©–ï–ù - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è")
        
        # Test 4: –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–§–û–†–ú–õ–ï–ù–ò–Ø –° –¢–ï–°–¢–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò
        if active_notification_id and notification_accepted:
            print(f"\n   üìù Test 4: –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–§–û–†–ú–õ–ï–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø {active_notification_id}...")
            
            # Test data as specified in the review request
            complete_data = {
                "sender_full_name": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¢–µ—Å—Ç–æ–≤—ã–π",
                "sender_phone": "+7999888777",
                "sender_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è, 1",
                "recipient_full_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π",
                "recipient_phone": "+992901111111",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è, 2",
                "cargo_items": [
                    {"name": "–ì—Ä—É–∑ —Å warehouse_id", "weight": "5.0", "price": "1000"}
                ],
                "payment_method": "cash",
                "delivery_method": "pickup"
            }
            
            success, complete_response = self.run_test(
                f"Complete Warehouse Notification Processing {active_notification_id}",
                "POST",
                f"/api/operator/warehouse-notifications/{active_notification_id}/complete",
                200,
                complete_data,
                operator_token
            )
            
            if success:
                print(f"   ‚úÖ Notification {active_notification_id} completed successfully")
                print("   ‚úÖ Test cargo created from pickup request")
                
                # Check if cargo was created
                if isinstance(complete_response, dict):
                    created_cargo = complete_response.get('cargo', [])
                    if created_cargo:
                        print(f"   üì¶ Created {len(created_cargo)} cargo items")
                        for cargo in created_cargo:
                            cargo_number = cargo.get('cargo_number', 'Unknown')
                            print(f"   üì¶ Cargo: {cargo_number}")
                    else:
                        print("   ‚ö†Ô∏è  No cargo information in response")
            else:
                print(f"   ‚ùå Failed to complete notification {active_notification_id}")
                all_success = False
        else:
            print("\n   ‚ö†Ô∏è  Test 4: –ü–†–û–ü–£–©–ï–ù - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        
        # Test 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - GET /api/warehouses/placed-cargo
        print("\n   üéØ Test 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - GET /api/warehouses/placed-cargo...")
        print("   üìã –î–û–õ–ñ–ù–´ –ø–æ—è–≤–∏—Ç—å—Å—è –≥—Ä—É–∑—ã —Å warehouse_id –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        
        success, placed_cargo_response = self.run_test(
            "Get Placed Cargo (Critical Test for warehouse_id)",
            "GET",
            "/api/warehouses/placed-cargo",
            200,
            token=operator_token
        )
        all_success &= success
        
        warehouse_id_fix_verified = False
        if success:
            print("   ‚úÖ /api/warehouses/placed-cargo endpoint working")
            
            # Check response structure
            placed_cargo = []
            if isinstance(placed_cargo_response, list):
                placed_cargo = placed_cargo_response
            elif isinstance(placed_cargo_response, dict):
                placed_cargo = placed_cargo_response.get('items', []) or placed_cargo_response.get('cargo', [])
            
            cargo_count = len(placed_cargo)
            print(f"   üìä Found {cargo_count} placed cargo items")
            
            if cargo_count > 0:
                # Test 6: –ü–†–û–í–ï–†–ò–¢–¨ –ß–¢–û –ì–†–£–ó–´ –ò–ú–ï–Æ–¢ warehouse_id, pickup_request_id, —Å—Ç–∞—Ç—É—Å
                print("\n   üîç Test 6: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –ì–†–£–ó–û–í (warehouse_id, pickup_request_id, —Å—Ç–∞—Ç—É—Å)...")
                
                cargo_with_warehouse_id = 0
                cargo_with_pickup_request_id = 0
                cargo_with_placement_ready_status = 0
                
                for i, cargo in enumerate(placed_cargo[:5]):  # Check first 5 cargo items
                    cargo_number = cargo.get('cargo_number', f'Cargo_{i+1}')
                    warehouse_id = cargo.get('warehouse_id')
                    pickup_request_id = cargo.get('pickup_request_id')
                    status = cargo.get('status', '')
                    processing_status = cargo.get('processing_status', '')
                    
                    print(f"   üì¶ Cargo {cargo_number}:")
                    
                    # Check warehouse_id (CRITICAL FIX)
                    if warehouse_id and warehouse_id != 'null' and warehouse_id != '':
                        print(f"      ‚úÖ warehouse_id: {warehouse_id}")
                        cargo_with_warehouse_id += 1
                        warehouse_id_fix_verified = True
                    else:
                        print(f"      ‚ùå warehouse_id: {warehouse_id} (CRITICAL: should not be null/empty)")
                    
                    # Check pickup_request_id
                    if pickup_request_id and pickup_request_id != 'null' and pickup_request_id != '':
                        print(f"      ‚úÖ pickup_request_id: {pickup_request_id}")
                        cargo_with_pickup_request_id += 1
                    else:
                        print(f"      ‚ö†Ô∏è  pickup_request_id: {pickup_request_id}")
                    
                    # Check status
                    if status == 'placement_ready' or processing_status == 'placement_ready':
                        print(f"      ‚úÖ status: {status or processing_status}")
                        cargo_with_placement_ready_status += 1
                    else:
                        print(f"      ‚ÑπÔ∏è  status: {status}, processing_status: {processing_status}")
                
                # Summary of critical fix verification
                print(f"\n   üìä –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–í–ï–†–ï–ù–û:")
                print(f"      üè≠ Cargo with warehouse_id: {cargo_with_warehouse_id}/{min(5, cargo_count)}")
                print(f"      üöö Cargo with pickup_request_id: {cargo_with_pickup_request_id}/{min(5, cargo_count)}")
                print(f"      üìã Cargo with placement_ready status: {cargo_with_placement_ready_status}/{min(5, cargo_count)}")
                
                if cargo_with_warehouse_id > 0:
                    print("   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –∏–º–µ—é—Ç warehouse_id!")
                    warehouse_id_fix_verified = True
                else:
                    print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢: –ì—Ä—É–∑—ã –Ω–µ –∏–º–µ—é—Ç warehouse_id")
                    all_success = False
            else:
                print("   ‚ö†Ô∏è  No placed cargo found - cannot verify warehouse_id fix")
                print("   ‚ÑπÔ∏è  This may be expected if no pickup requests have been processed yet")
        else:
            print("   ‚ùå /api/warehouses/placed-cargo endpoint failed")
            all_success = False
        
        # SUMMARY
        print("\n   üìä –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WAREHOUSE_ID SUMMARY:")
        
        if all_success and warehouse_id_fix_verified:
            print("   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û!")
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: GET /api/warehouses/placed-cargo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä—É–∑—ã —Å warehouse_id")
            print("   ‚úÖ –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤–∏–¥–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã'")
            print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è get_operator_warehouse_ids(current_user.id) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚úÖ –ü–æ–ª–µ warehouse_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–º –≥—Ä—É–∑–∞–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ complete_cargo_processing")
            print("   üéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º!")
        elif all_success and not warehouse_id_fix_verified:
            print("   ‚ö†Ô∏è  BACKEND –°–¢–ê–ë–ò–õ–ï–ù, –ù–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û")
            print("   ‚úÖ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚ùå –ì—Ä—É–∑—ã —Å warehouse_id –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   ‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("      - –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞")
            print("      - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ –Ω–æ–≤—ã–º –≥—Ä—É–∑–∞–º")
            print("      - –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–£–°–ü–ï–®–ù–û")
            print("   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤—ã—à–µ")
            print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é warehouse_id")
        
        return all_success and warehouse_id_fix_verified

if __name__ == "__main__":
    tester = CriticalWarehouseIdTester()
    result = tester.test_critical_warehouse_id_fix()
    
    print("\n" + "="*60)
    print("FINAL CRITICAL TEST RESULT")
    print("="*60)
    
    print(f"\nüìä OVERALL RESULTS:")
    print(f"   Total tests run: {tester.tests_run}")
    print(f"   Tests passed: {tester.tests_passed}")
    print(f"   Success rate: {(tester.tests_passed/tester.tests_run*100):.1f}%" if tester.tests_run > 0 else "   Success rate: 0%")
    
    if result:
        print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WAREHOUSE_ID –†–ê–ë–û–¢–ê–ï–¢!")
        print("   ‚úÖ –ì—Ä—É–∑—ã –∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –∏–º–µ—é—Ç warehouse_id")
        print("   ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã")
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è get_operator_warehouse_ids() —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ –ü–æ–ª–µ warehouse_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≥—Ä—É–∑–∞–º –≤ complete_cargo_processing")
        sys.exit(0)
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WAREHOUSE_ID –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
        print("   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—à–µ")
        sys.exit(1)