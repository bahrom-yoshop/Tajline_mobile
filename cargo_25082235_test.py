#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ 25082235 –≤ API endpoint /api/operator/cargo/fully-placed

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É 25082235 –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ review request.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 25082235 –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–µ placing_operator - –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∞ –Ω–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–µ operator_name - –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ (USR648425)
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:
   - sender_full_name, sender_phone (–§–ò–û, —Ç–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
   - recipient_full_name, recipient_phone (–§–ò–û, —Ç–µ–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—è)
   - payment_method (—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã)
   - delivery_method (—Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–∞)
   - accepting_warehouse, delivery_warehouse (—Å–∫–ª–∞–¥—ã)
   - pickup_city, delivery_city (–≥–æ—Ä–æ–¥–∞)
   - cargo_items (—Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏)
   - individual_units —Å placement_info (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ë?-–ü?-–Ø?)
   - action_history (–∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- placing_operator –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∞ –Ω–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
- –í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è warehouse_operator (+79777888999, warehouse123) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-8.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

# –¶–µ–ª–µ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TARGET_CARGO_NUMBER = "25082235"

class Cargo25082235Tester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.target_cargo = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è warehouse_operator (+79777888999, warehouse123)...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator (+79777888999/warehouse123)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user.get('full_name')}' (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è warehouse_operator", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_fully_placed_endpoint_access(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ endpoint /api/operator/cargo/fully-placed"""
        try:
            print("üéØ –¢–ï–°–¢ 1: –î–û–°–¢–£–ü –ö ENDPOINT /api/operator/cargo/fully-placed")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["items", "pagination", "summary"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    items = data.get("items", [])
                    pagination = data.get("pagination", {})
                    summary = data.get("summary", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API)
                    pagination_fields = ["current_page", "per_page", "total_items", "total_pages", "has_next", "has_prev"]
                    missing_pagination = [field for field in pagination_fields if field not in pagination]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è summary (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API)
                    summary_fields = ["placed_requests", "total_units_placed"]
                    missing_summary = [field for field in summary_fields if field not in summary]
                    
                    if not missing_pagination and not missing_summary:
                        self.log_test(
                            "–î–æ—Å—Ç—É–ø –∫ endpoint –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                            True,
                            f"Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–æ–ª–∏ warehouse_operator, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—è–º–∏ {list(data.keys())}, –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (items, pagination —Å {len(pagination)} –ø–æ–ª—è–º–∏, summary —Å {len(summary)} –ø–æ–ª—è–º–∏)"
                        )
                        return True, data
                    else:
                        self.log_test(
                            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ endpoint",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ pagination: {missing_pagination}, –≤ summary: {missing_summary}",
                            "–í—Å–µ –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ summary",
                            f"pagination: {list(pagination.keys())}, summary: {list(summary.keys())}"
                        )
                        return False, None
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ endpoint",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return False, None
            else:
                self.log_test(
                    "–î–æ—Å—Ç—É–ø –∫ endpoint /api/operator/cargo/fully-placed",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False, None
                
        except Exception as e:
            self.log_test("–î–æ—Å—Ç—É–ø –∫ endpoint", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False, None

    def find_cargo_25082235(self, endpoint_data):
        """–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235 –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        try:
            print(f"üéØ –¢–ï–°–¢ 2: –ü–û–ò–°–ö –ó–ê–Ø–í–ö–ò {TARGET_CARGO_NUMBER} –í –°–ü–ò–°–ö–ï –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ó–ê–Ø–í–û–ö")
            
            items = endpoint_data.get("items", [])
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
            target_cargo = None
            for item in items:
                cargo_number = item.get("cargo_number") or item.get("application_number")
                if cargo_number == TARGET_CARGO_NUMBER:
                    target_cargo = item
                    break
            
            if target_cargo:
                self.target_cargo = target_cargo
                self.log_test(
                    f"–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É {TARGET_CARGO_NUMBER} –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {TARGET_CARGO_NUMBER} –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫! –°—Ç–∞—Ç—É—Å: {target_cargo.get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
                )
                return True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                found_numbers = []
                for item in items:
                    cargo_number = item.get("cargo_number") or item.get("application_number")
                    if cargo_number:
                        found_numbers.append(cargo_number)
                
                self.log_test(
                    f"–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É {TARGET_CARGO_NUMBER} –≤ —Å–ø–∏—Å–∫–µ",
                    False,
                    f"–ó–∞—è–≤–∫–∞ {TARGET_CARGO_NUMBER} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ù–∞–π–¥–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏: {found_numbers[:10]}{'...' if len(found_numbers) > 10 else ''}",
                    f"–ó–∞—è–≤–∫–∞ {TARGET_CARGO_NUMBER} –≤ —Å–ø–∏—Å–∫–µ",
                    f"–ó–∞—è–≤–∫–∏: {found_numbers[:5]}{'...' if len(found_numbers) > 5 else ''}"
                )
                return False
                
        except Exception as e:
            self.log_test(f"–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {TARGET_CARGO_NUMBER}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placing_operator_field(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è placing_operator - –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∞ –Ω–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'"""
        try:
            print("üéØ –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø PLACING_OPERATOR")
            
            if not self.target_cargo:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ placing_operator", False, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return False
            
            placing_operator = self.target_cargo.get("placing_operator")
            
            if placing_operator:
                if placing_operator != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and placing_operator != "Unknown" and len(placing_operator.strip()) > 0:
                    self.log_test(
                        "–ü–æ–ª–µ placing_operator",
                        True,
                        f"placing_operator –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: '{placing_operator}'"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü–æ–ª–µ placing_operator",
                        False,
                        f"placing_operator —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{placing_operator}'",
                        "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        placing_operator
                    )
                    return False
            else:
                self.log_test(
                    "–ü–æ–ª–µ placing_operator",
                    False,
                    "–ü–æ–ª–µ placing_operator –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ",
                    "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ placing_operator", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_operator_name_field(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è operator_name - –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ (USR648425)"""
        try:
            print("üéØ –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–Ø OPERATOR_NAME")
            
            if not self.target_cargo:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_name", False, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return False
            
            operator_name = self.target_cargo.get("operator_name") or self.target_cargo.get("accepting_operator")
            
            if operator_name:
                if len(operator_name.strip()) > 0 and operator_name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and operator_name != "Unknown":
                    self.log_test(
                        "–ü–æ–ª–µ operator_name",
                        True,
                        f"operator_name —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–µ–º–∞: '{operator_name}'"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü–æ–ª–µ operator_name",
                        False,
                        f"operator_name —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{operator_name}'",
                        "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ (USR648425)",
                        operator_name
                    )
                    return False
            else:
                self.log_test(
                    "–ü–æ–ª–µ operator_name",
                    False,
                    "–ü–æ–ª–µ operator_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ",
                    "–§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ (USR648425)",
                    "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ operator_name", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_modal_window_fields(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            print("üéØ –¢–ï–°–¢ 5: –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–û–õ–ï–ô –î–õ–Ø –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê")
            
            if not self.target_cargo:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞", False, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return False
            
            # –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            required_modal_fields = {
                "sender_full_name": "–§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                "sender_phone": "—Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è", 
                "recipient_full_name": "–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                "recipient_phone": "—Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                "payment_method": "—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                "delivery_method": "—Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–∞",
                "accepting_warehouse": "—Å–∫–ª–∞–¥ –ø—Ä–∏–µ–º–∞",
                "delivery_warehouse": "—Å–∫–ª–∞–¥ –≤—ã–¥–∞—á–∏",
                "pickup_city": "–≥–æ—Ä–æ–¥ –∑–∞–±–æ—Ä–∞",
                "delivery_city": "–≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏",
                "cargo_items": "—Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏",
                "individual_units": "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü",
                "action_history": "–∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π"
            }
            
            present_fields = []
            missing_fields = []
            empty_fields = []
            
            for field, description in required_modal_fields.items():
                field_value = self.target_cargo.get(field)
                
                if field_value is not None:
                    if isinstance(field_value, (list, dict)):
                        if len(field_value) > 0:
                            present_fields.append(f"{field} ({description})")
                        else:
                            empty_fields.append(f"{field} ({description}) - –ø—É—Å—Ç–æ–π")
                    elif isinstance(field_value, str):
                        if len(field_value.strip()) > 0:
                            present_fields.append(f"{field} ({description})")
                        else:
                            empty_fields.append(f"{field} ({description}) - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
                    else:
                        present_fields.append(f"{field} ({description})")
                else:
                    missing_fields.append(f"{field} ({description})")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ individual_units —Å placement_info
            individual_units = self.target_cargo.get("individual_units", [])
            placement_info_count = 0
            if individual_units:
                for unit in individual_units:
                    if unit.get("placement_info"):
                        placement_info_count += 1
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ action_history
            action_history = self.target_cargo.get("action_history", [])
            action_history_valid = len(action_history) > 0 if action_history else False
            
            # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            total_fields = len(required_modal_fields)
            present_count = len(present_fields)
            success_rate = (present_count / total_fields) * 100
            
            details = []
            if present_fields:
                details.append(f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è ({present_count}/{total_fields}): {', '.join(present_fields[:5])}{'...' if len(present_fields) > 5 else ''}")
            
            if individual_units:
                details.append(f"individual_units —Å–æ–¥–µ—Ä–∂–∏—Ç {len(individual_units)} –µ–¥–∏–Ω–∏—Ü, {placement_info_count} —Å placement_info")
            
            if action_history_valid:
                details.append(f"action_history —Å–æ–¥–µ—Ä–∂–∏—Ç {len(action_history)} –¥–µ–π—Å—Ç–≤–∏–π")
            
            if missing_fields:
                details.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields[:3])}{'...' if len(missing_fields) > 3 else ''}")
            
            if empty_fields:
                details.append(f"–ü—É—Å—Ç—ã–µ –ø–æ–ª—è: {', '.join(empty_fields[:3])}{'...' if len(empty_fields) > 3 else ''}")
            
            if success_rate >= 80:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 80% –ø–æ–ª–µ–π
                self.log_test(
                    "–í—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                    True,
                    f"–ü–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ({success_rate:.1f}%): {'; '.join(details)}"
                )
                return True
            else:
                self.log_test(
                    "–í—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                    False,
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ ({success_rate:.1f}%): {'; '.join(details)}",
                    "–ú–∏–Ω–∏–º—É–º 80% –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω—ã",
                    f"{success_rate:.1f}% –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_individual_units_placement_info(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ individual_units —Å placement_info (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ë?-–ü?-–Ø?)"""
        try:
            print("üéØ –¢–ï–°–¢ 6: –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê INDIVIDUAL_UNITS –° PLACEMENT_INFO")
            
            if not self.target_cargo:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ individual_units", False, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return False
            
            individual_units = self.target_cargo.get("individual_units", [])
            
            if not individual_units:
                self.log_test(
                    "Individual_units —Å placement_info",
                    False,
                    "–ü–æ–ª–µ individual_units –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ",
                    "–°–ø–∏—Å–æ–∫ –µ–¥–∏–Ω–∏—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏",
                    "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É
            units_analysis = []
            placed_units = 0
            awaiting_units = 0
            
            for i, unit in enumerate(individual_units):
                unit_number = unit.get("individual_number", f"–µ–¥–∏–Ω–∏—Ü–∞_{i+1}")
                status = unit.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                status_label = unit.get("status_label", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                placement_info = unit.get("placement_info", "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                if status == "placed":
                    placed_units += 1
                    if placement_info and placement_info != "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" and "–ë" in placement_info and "–ü" in placement_info and "–Ø" in placement_info:
                        units_analysis.append(f"{unit_number}: ‚úÖ –†–∞–∑–º–µ—â–µ–Ω ({placement_info}) - status: \"{status}\", status_label: \"{status_label}\"")
                    else:
                        units_analysis.append(f"{unit_number}: ‚úÖ –†–∞–∑–º–µ—â–µ–Ω (üìç {placement_info}) - status: \"{status}\", status_label: \"{status_label}\"")
                elif status == "awaiting_placement":
                    awaiting_units += 1
                    units_analysis.append(f"{unit_number}: ‚è≥ –ñ–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - status: \"{status}\", status_label: \"{status_label}\", placement_info: \"{placement_info}\"")
                else:
                    units_analysis.append(f"{unit_number}: ‚ùì –°—Ç–∞—Ç—É—Å: {status} - status_label: \"{status_label}\", placement_info: \"{placement_info}\"")
            
            total_units = len(individual_units)
            placement_percentage = (placed_units / total_units * 100) if total_units > 0 else 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            cargo_status = self.target_cargo.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            is_partially_placed = self.target_cargo.get("is_partially_placed", False)
            
            details = [
                f"–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}",
                f"–†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {placed_units} ({placement_percentage:.0f}%)",
                f"–°—Ç–∞—Ç—É—Å: {cargo_status} ‚úÖ" if cargo_status in ["partially_placed", "fully_placed"] else f"–°—Ç–∞—Ç—É—Å: {cargo_status}",
                f"Is partially placed: {is_partially_placed} ‚úÖ" if is_partially_placed else f"Is partially placed: {is_partially_placed}",
                "–°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã:"
            ]
            details.extend([f"  - {analysis}" for analysis in units_analysis])
            
            self.log_test(
                "Individual_units —Å placement_info (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ë?-–ü?-–Ø?)",
                True,
                "; ".join(details)
            )
            return True
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ individual_units", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235"""
        print(f"üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò {TARGET_CARGO_NUMBER} –í API ENDPOINT /api/operator/cargo/fully-placed")
        print("=" * 100)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ endpoint
        endpoint_success, endpoint_data = self.test_fully_placed_endpoint_access()
        if not endpoint_success:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ endpoint")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append((f"–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É {TARGET_CARGO_NUMBER} –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", self.find_cargo_25082235(endpoint_data)))
        
        if self.target_cargo:  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
            test_results.append(("–ü–æ–ª–µ placing_operator - –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∞ –Ω–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'", self.test_placing_operator_field()))
            test_results.append(("–ü–æ–ª–µ operator_name - –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏–µ–º–∞ (USR648425)", self.test_operator_name_field()))
            test_results.append(("–í—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞", self.test_modal_window_fields()))
            test_results.append(("Individual_units —Å placement_info (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ë?-–ü?-–Ø?)", self.test_individual_units_placement_info()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 100)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò {TARGET_CARGO_NUMBER}:")
        print("=" * 100)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print(f"üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ó–ê–Ø–í–ö–ò {TARGET_CARGO_NUMBER} –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ placing_operator —Å–æ–¥–µ—Ä–∂–∏—Ç –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∞ –Ω–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'")
            print("‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
            print("‚úÖ Individual_units —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
        elif success_rate >= 80:
            print(f"üéØ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞—è–≤–∫–∏ {TARGET_CARGO_NUMBER} –ø—Ä–æ–π–¥–µ–Ω—ã.")
        elif success_rate >= 60:
            print(f"‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∏ {TARGET_CARGO_NUMBER} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        else:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –ó–∞—è–≤–∫–∞ {TARGET_CARGO_NUMBER} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
        
        return success_rate >= 80  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 80% –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = Cargo25082235Tester()
    success = tester.run_all_tests()
    
    if success:
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò {TARGET_CARGO_NUMBER} –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ review request")
        return 0
    else:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò {TARGET_CARGO_NUMBER} –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        return 1

if __name__ == "__main__":
    exit(main())