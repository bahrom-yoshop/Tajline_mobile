#!/usr/bin/env python3
"""
–û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –ß–ï–†–ï–ó –ê–î–ú–ò–ù –î–û–°–¢–£–ü –ò –ê–ù–ê–õ–ò–ó PLACEMENT RECORDS
================================================================

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –≤—Å–µ —Å–∫–ª–∞–¥—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å placement_records
–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ 003
"""

import requests
import json
import sys
import os
from datetime import datetime
from collections import defaultdict

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class AdminWarehouseDiscoveryTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.user_info = None
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
            
            auth_data = {
                "phone": ADMIN_PHONE,
                "password": ADMIN_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.user_info = user_response.json()
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.user_info.get('full_name')} (—Ä–æ–ª—å: {self.user_info.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def discover_all_warehouses(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API"""
        try:
            self.log("üèóÔ∏è –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω API...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ endpoints
            admin_endpoints = [
                "/admin/warehouses",
                "/admin/warehouses/list",
                "/warehouses",
                "/warehouses/all"
            ]
            
            all_warehouses = []
            
            for endpoint in admin_endpoints:
                try:
                    self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω endpoint: {endpoint}")
                    response = self.session.get(f"{API_BASE}{endpoint}")
                    
                    if response.status_code == 200:
                        warehouses = response.json()
                        self.log(f"‚úÖ Endpoint {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
                        
                        if warehouses:
                            all_warehouses.extend(warehouses)
                            self.analyze_warehouses(warehouses, endpoint)
                        else:
                            self.log("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç", "WARNING")
                    else:
                        self.log(f"‚ùå Endpoint {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                        
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint}: {str(e)}", "ERROR")
            
            return all_warehouses
            
        except Exception as e:
            self.log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {str(e)}", "ERROR")
            return []
    
    def analyze_warehouses(self, warehouses, endpoint):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤"""
        try:
            self.log(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ endpoint {endpoint}:")
            
            for i, warehouse in enumerate(warehouses):
                self.log(f"  {i+1}. –°–∫–ª–∞–¥:")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å–∫–ª–∞–¥–∞
                for key, value in warehouse.items():
                    self.log(f"     {key}: {value}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º layout API –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
                warehouse_id = warehouse.get("id")
                if warehouse_id:
                    self.test_layout_api_for_warehouse(warehouse_id, warehouse.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                
                self.log("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–ª–∞–¥–æ–≤: {str(e)}", "ERROR")
    
    def test_layout_api_for_warehouse(self, warehouse_id, warehouse_name):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id} ({warehouse_name})...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses/{warehouse_id}/layout-with-cargo")
            
            if response.status_code == 200:
                layout_data = response.json()
                placement_records = layout_data.get("placement_records", [])
                blocks = layout_data.get("blocks", [])
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
                occupied_cells = 0
                total_cells = 0
                for block in blocks:
                    for shelf in block.get("shelves", []):
                        for cell in shelf.get("cells", []):
                            total_cells += 1
                            if cell.get("is_occupied", False):
                                occupied_cells += 1
                
                self.log(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}")
                self.log(f"   üìç Placement records: {len(placement_records)}")
                self.log(f"   üì¶ –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {occupied_cells}")
                self.log(f"   üìã –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}")
                self.log(f"   üèóÔ∏è –ë–ª–æ–∫–æ–≤: {len(blocks)}")
                
                if len(placement_records) > 0:
                    self.log(f"üéØ –ù–ê–ô–î–ï–ù –ê–ö–¢–ò–í–ù–´–ô –°–ö–õ–ê–î –° –†–ê–ó–ú–ï–©–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò!")
                    self.analyze_placement_records_detailed(placement_records)
                
            elif response.status_code == 404:
                self.log(f"‚ùå –°–∫–ª–∞–¥ {warehouse_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ layout-with-cargo")
            elif response.status_code == 403:
                self.log(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}: {response.status_code}")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ {warehouse_id}: {str(e)}", "ERROR")
    
    def analyze_placement_records_detailed(self, placement_records):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ placement_records"""
        try:
            self.log(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(placement_records)} placement_records:")
            
            warehouse_id_counts = defaultdict(int)
            location_formats = defaultdict(int)
            cargo_numbers = set()
            
            for i, record in enumerate(placement_records):
                warehouse_id = record.get("warehouse_id", "N/A")
                cargo_number = record.get("cargo_number", "N/A")
                individual_number = record.get("individual_number", "N/A")
                location = record.get("location", "N/A")
                
                warehouse_id_counts[warehouse_id] += 1
                cargo_numbers.add(cargo_number)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç location
                if location and location != "N/A":
                    if "-" in location and len(location.split("-")) >= 3:
                        location_formats["dash_format"] += 1
                    elif "–ë" in location and "–ü" in location and "–Ø" in location:
                        location_formats["cyrillic_format"] += 1
                    else:
                        location_formats["unknown_format"] += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                if i < 10:
                    self.log(f"   {i+1}. {cargo_number}/{individual_number} -> {location} (warehouse_id: {warehouse_id})")
            
            if len(placement_records) > 10:
                self.log(f"   ... –∏ –µ—â–µ {len(placement_records) - 10} –∑–∞–ø–∏—Å–µ–π")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ warehouse_id
            self.log(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ warehouse_id:")
            for wid, count in warehouse_id_counts.items():
                self.log(f"   - '{wid}': {count} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ warehouse_id = "003"
                if wid == "003":
                    self.log(f"üéØ –ù–ê–ô–î–ï–ù –°–ö–õ–ê–î 003 –í PLACEMENT_RECORDS!")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º location
            self.log(f"üìä –§–æ—Ä–º–∞—Ç—ã location:")
            for format_type, count in location_formats.items():
                self.log(f"   - {format_type}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            self.log(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {len(cargo_numbers)}")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ placement_records: {str(e)}", "ERROR")
    
    def check_placement_progress_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ API –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            self.log("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
            
            response = self.session.get(f"{API_BASE}/operator/placement-progress")
            
            if response.status_code == 200:
                progress_data = response.json()
                self.log(f"‚úÖ API placement-progress –¥–æ—Å—Ç—É–ø–µ–Ω:")
                self.log(f"   üì¶ –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {progress_data.get('total_units', 0)}")
                self.log(f"   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {progress_data.get('placed_units', 0)}")
                self.log(f"   ‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {progress_data.get('pending_units', 0)}")
                self.log(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_data.get('progress_percentage', 0)}%")
                
                return progress_data
            else:
                self.log(f"‚ùå API placement-progress –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ placement-progress: {str(e)}", "ERROR")
            return None
    
    def search_for_warehouse_003_in_data(self):
        """–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∫–ª–∞–¥–∞ 003 –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API"""
        try:
            self.log("üîç –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∫–ª–∞–¥–∞ 003 –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å –≥—Ä—É–∑–∞–º–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            search_apis = [
                "/operator/cargo/available-for-placement",
                "/operator/cargo/individual-units-for-placement"
            ]
            
            for api in search_apis:
                try:
                    self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API: {api}")
                    response = self.session.get(f"{API_BASE}{api}")
                    
                    if response.status_code == 200:
                        data = response.json()
                        
                        if isinstance(data, dict) and "items" in data:
                            items = data["items"]
                        elif isinstance(data, list):
                            items = data
                        else:
                            items = []
                        
                        self.log(f"‚úÖ API {api} –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
                        
                        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ 003
                        warehouse_003_mentions = 0
                        for item in items:
                            item_str = json.dumps(item, ensure_ascii=False)
                            if "003" in item_str:
                                warehouse_003_mentions += 1
                        
                        if warehouse_003_mentions > 0:
                            self.log(f"üéØ –ù–ê–ô–î–ï–ù–û {warehouse_003_mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∫–ª–∞–¥–∞ 003 –≤ {api}!")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º 003
                            shown = 0
                            for item in items:
                                item_str = json.dumps(item, ensure_ascii=False)
                                if "003" in item_str and shown < 3:
                                    self.log(f"   –≠–ª–µ–º–µ–Ω—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º 003:")
                                    for key, value in item.items():
                                        if "003" in str(value):
                                            self.log(f"     {key}: {value}")
                                    shown += 1
                        else:
                            self.log(f"‚ùå –£–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∫–ª–∞–¥–∞ 003 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {api}")
                    else:
                        self.log(f"‚ùå API {api} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                        
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {api}: {str(e)}", "ERROR")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–ª–∞–¥–∞ 003: {str(e)}", "ERROR")
    
    def run_comprehensive_discovery(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        self.log("üéØ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í –ò –ü–û–ò–°–ö–ê –°–ö–õ–ê–î–ê 003")
        self.log("=" * 70)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞
        if not self.authenticate_admin():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω", "ERROR")
            return False
        
        # –≠—Ç–∞–ø 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
        warehouses = self.discover_all_warehouses()
        
        # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        self.check_placement_progress_api()
        
        # –≠—Ç–∞–ø 4: –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–∫–ª–∞–¥–∞ 003 –≤ –¥–∞–Ω–Ω—ã—Ö
        self.search_for_warehouse_003_in_data()
        
        self.log("=" * 70)
        self.log("üìã –ü–û–õ–ù–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AdminWarehouseDiscoveryTester()
    
    try:
        success = tester.run_comprehensive_discovery()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        tester.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        sys.exit(1)
    except Exception as e:
        tester.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()