#!/usr/bin/env python3
"""
COMPREHENSIVE PICKUP REQUEST DIAGNOSIS
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä
"""

import requests
import json
from datetime import datetime

BACKEND_URL = "https://tajline-logistics-1.preview.emergentagent.com/api"

def log_step(step_name, details=""):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"\n[{timestamp}] üîç {step_name}")
    if details:
        print(f"   {details}")

def log_success(message):
    print(f"   ‚úÖ {message}")

def log_error(message):
    print(f"   ‚ùå {message}")

def log_info(message):
    print(f"   ‚ÑπÔ∏è {message}")

def authorize_admin():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    log_step("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
    
    response = requests.post(f"{BACKEND_URL}/auth/login", json={
        "phone": "+79999888777",
        "password": "admin123"
    })
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        user_info = data.get("user", {})
        log_success(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user_info.get('full_name', 'Unknown')}")
        return token
    else:
        log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return None

def authorize_operator():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    log_step("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
    
    response = requests.post(f"{BACKEND_URL}/auth/login", json={
        "phone": "+79777888999",
        "password": "warehouse123"
    })
    
    if response.status_code == 200:
        data = response.json()
        token = data.get("access_token")
        user_info = data.get("user", {})
        log_success(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {user_info.get('full_name', 'Unknown')}")
        return token
    else:
        log_error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return None

def create_test_cargo_with_pickup(admin_token):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –∑–∞–±–æ—Ä"""
    log_step("–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ì–†–£–ó–ê –° –ó–ê–Ø–í–ö–û–ô –ù–ê –ó–ê–ë–û–†")
    
    headers = {"Authorization": f"Bearer {admin_token}", "Content-Type": "application/json"}
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑ —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –∑–∞–±–æ—Ä
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
        "sender_phone": "+79991234567",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
        "recipient_phone": "+992123456789",
        "recipient_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
        "weight": 5.0,
        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
        "declared_value": 1000.0,
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è",
        "route": "moscow_to_tajikistan",
        "pickup_required": True,
        "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, 123",
        "pickup_date": "2025-08-15",
        "pickup_time_from": "10:00",
        "pickup_time_to": "18:00",
        "delivery_method": "pickup",
        "courier_fee": 500.0
    }
    
    response = requests.post(f"{BACKEND_URL}/operator/cargo", headers=headers, json=cargo_data)
    
    if response.status_code == 201:
        cargo_info = response.json()
        log_success(f"–°–æ–∑–¥–∞–Ω –≥—Ä—É–∑: {cargo_info.get('cargo_number', 'N/A')}")
        return cargo_info
    else:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞: {response.status_code} - {response.text}")
        return None

def check_pickup_requests_state(operator_token, stage):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
    log_step(f"–ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† - {stage}")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
    pickup_response = requests.get(f"{BACKEND_URL}/operator/pickup-requests", headers=headers)
    
    if pickup_response.status_code == 200:
        pickup_data = pickup_response.json()
        pickup_requests = pickup_data.get("pickup_requests", [])
        total_count = pickup_data.get("total_count", 0)
        
        log_info(f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {total_count}")
        log_info(f"–ó–∞—è–≤–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ: {len(pickup_requests)}")
        
        # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00
        zero_requests = [req for req in pickup_requests if req.get("request_number") == "000000/00"]
        if zero_requests:
            log_error(f"–ù–ê–ô–î–ï–ù–û {len(zero_requests)} –∑–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00!")
            for i, req in enumerate(zero_requests[:3]):
                log_info(f"  –ó–∞—è–≤–∫–∞ {i+1}: cargo_name='{req.get('cargo_name', 'N/A')}', sender='{req.get('sender_full_name', 'N/A')}'")
        else:
            log_info("–ó–∞—è–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return pickup_requests
    else:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_response.status_code}")
        return []

def check_warehouse_notifications_state(admin_token, stage):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞"""
    log_step(f"–ü–†–û–í–ï–†–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê - {stage}")
    
    headers = {"Authorization": f"Bearer {admin_token}"}
    
    notifications_response = requests.get(f"{BACKEND_URL}/operator/warehouse-notifications", headers=headers)
    
    if notifications_response.status_code == 200:
        data = notifications_response.json()
        notifications = data.get("notifications", [])
        
        log_info(f"–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
        
        # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º 000000/00
        zero_notifications = [notif for notif in notifications if notif.get("request_number") == "000000/00"]
        if zero_notifications:
            log_error(f"–ù–ê–ô–î–ï–ù–û {len(zero_notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º 000000/00!")
            for i, notif in enumerate(zero_notifications[:3]):
                log_info(f"  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i+1}: sender='{notif.get('sender_full_name', 'N/A')}', status='{notif.get('status', 'N/A')}'")
        else:
            log_info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return notifications
    else:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_response.status_code}")
        return []

def get_cargo_for_placement(operator_token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    log_step("–ü–û–õ–£–ß–ï–ù–ò–ï –ì–†–£–ó–û–í –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
    
    headers = {"Authorization": f"Bearer {operator_token}"}
    response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        cargo_items = data.get("items", [])
        log_success(f"–ü–æ–ª—É—á–µ–Ω–æ {len(cargo_items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–∑–æ–≤
        for i, cargo in enumerate(cargo_items[:5]):
            log_info(f"  –ì—Ä—É–∑ {i+1}: {cargo.get('cargo_number', 'N/A')} - {cargo.get('sender_full_name', 'N/A')}")
        
        return cargo_items[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    else:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.status_code}")
        return []

def perform_bulk_deletion(operator_token, cargo_items):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
    if not cargo_items:
        log_error("–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return False
    
    log_step("–ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–û–í –ò–ó –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
    
    cargo_ids = [cargo.get("id") for cargo in cargo_items if cargo.get("id")]
    cargo_numbers = [cargo.get("cargo_number") for cargo in cargo_items if cargo.get("cargo_number")]
    
    log_info(f"–£–¥–∞–ª—è–µ–º {len(cargo_ids)} –≥—Ä—É–∑–æ–≤: {cargo_numbers}")
    
    headers = {"Authorization": f"Bearer {operator_token}", "Content-Type": "application/json"}
    payload = {"cargo_ids": cargo_ids}
    
    response = requests.delete(f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement", 
                             headers=headers, json=payload)
    
    if response.status_code == 200:
        data = response.json()
        deleted_count = data.get("deleted_count", 0)
        log_success(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –≥—Ä—É–∑–æ–≤")
        return True
    else:
        log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
        return False

def main():
    print("=" * 80)
    print("üîç COMPREHENSIVE PICKUP REQUEST DIAGNOSIS")
    print("   –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã")
    print("=" * 80)
    
    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    admin_token = authorize_admin()
    operator_token = authorize_operator()
    
    if not admin_token or not operator_token:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    log_step("–≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ê –ù–ê–ß–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø")
    pickup_requests_initial = check_pickup_requests_state(operator_token, "–ù–ê–ß–ê–õ–¨–ù–û–ï")
    notifications_initial = check_warehouse_notifications_state(admin_token, "–ù–ê–ß–ê–õ–¨–ù–û–ï")
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –∑–∞–±–æ—Ä
    log_step("–≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    test_cargo = create_test_cargo_with_pickup(admin_token)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞
    log_step("–≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø –ì–†–£–ó–ê")
    pickup_requests_after_create = check_pickup_requests_state(operator_token, "–ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø")
    notifications_after_create = check_warehouse_notifications_state(admin_token, "–ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø")
    
    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    log_step("–≠–¢–ê–ü 4: –ü–û–î–ì–û–¢–û–í–ö–ê –ö –£–î–ê–õ–ï–ù–ò–Æ")
    cargo_items = get_cargo_for_placement(operator_token)
    
    if not cargo_items:
        log_error("–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è - –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É")
        return
    
    # 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    log_step("–≠–¢–ê–ü 5: –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï")
    deletion_success = perform_bulk_deletion(operator_token, cargo_items)
    
    if not deletion_success:
        log_error("–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    log_step("–≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø")
    pickup_requests_after_delete = check_pickup_requests_state(operator_token, "–ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø")
    notifications_after_delete = check_warehouse_notifications_state(admin_token, "–ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø")
    
    # 8. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    log_step("–≠–¢–ê–ü 7: –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    
    zero_pickup_initial = len([req for req in pickup_requests_initial if req.get("request_number") == "000000/00"])
    zero_pickup_final = len([req for req in pickup_requests_after_delete if req.get("request_number") == "000000/00"])
    
    zero_notif_initial = len([notif for notif in notifications_initial if notif.get("request_number") == "000000/00"])
    zero_notif_final = len([notif for notif in notifications_after_delete if notif.get("request_number") == "000000/00"])
    
    print("\n" + "=" * 80)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 80)
    
    print(f"–ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–†:")
    print(f"  - –î–æ —É–¥–∞–ª–µ–Ω–∏—è: {len(pickup_requests_initial)} (000000/00: {zero_pickup_initial})")
    print(f"  - –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {len(pickup_requests_after_delete)} (000000/00: {zero_pickup_final})")
    
    print(f"–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–ê:")
    print(f"  - –î–æ —É–¥–∞–ª–µ–Ω–∏—è: {len(notifications_initial)} (000000/00: {zero_notif_initial})")
    print(f"  - –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {len(notifications_after_delete)} (000000/00: {zero_notif_final})")
    
    if zero_pickup_final > zero_pickup_initial or zero_notif_final > zero_notif_initial:
        print("\nüö® –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê:")
        print("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–µ—Ä–æ–º 000000/00 —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è!")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤")
        print("   2. –î–æ–±–∞–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏")
        print("   3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π cargo_name, cargo_number, sender_full_name")
    else:
        print("\n‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ù–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê")
        print("   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("=" * 80)

if __name__ == "__main__":
    main()