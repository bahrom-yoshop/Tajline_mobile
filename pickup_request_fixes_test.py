#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–≤–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª–µ–π sender_full_name, sender_phone 
2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—á–∞—Ç—å—é QR –∫–æ–¥–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)  
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "in_processing"
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Endpoint –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ 500, —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–∑ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class PickupRequestFixesTester:
    def __init__(self, base_url="https://logistics-dash-6.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}  # Store tokens for different users
        self.users = {}   # Store user data
        self.tests_run = 0
        self.tests_passed = 0
        self.notification_id = None
        self.created_cargo_id = None
        self.created_cargo_number = None
        
        print(f"üöö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê –í TAJLINE.TJ")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)
            else:
                print(f"   ‚ùå Unsupported method: {method}")
                return False, {}

            print(f"   üìä Status: {response.status_code}")
            
            if response.status_code == expected_status:
                print(f"   ‚úÖ PASS")
                self.tests_passed += 1
                try:
                    return True, response.json()
                except:
                    return True, {"status": "success", "text": response.text}
            else:
                print(f"   ‚ùå FAIL - Expected {expected_status}, got {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   üìù Error: {error_data}")
                    return False, error_data
                except:
                    print(f"   üìù Response: {response.text}")
                    return False, {"error": response.text}
                    
        except Exception as e:
            print(f"   ‚ùå EXCEPTION: {str(e)}")
            return False, {"error": str(e)}

    def authenticate_user(self, phone: str, password: str, role_name: str) -> bool:
        """Authenticate a user and store their token"""
        print(f"\nüîê Authenticating {role_name} ({phone})")
        
        success, response = self.run_test(
            f"{role_name} Authentication",
            "POST",
            "/api/auth/login",
            200,
            {"phone": phone, "password": password}
        )
        
        if success and "access_token" in response:
            self.tokens[role_name] = response["access_token"]
            self.users[role_name] = response.get("user", {})
            print(f"   üé´ Token stored for {role_name}")
            print(f"   üë§ User: {response.get('user', {}).get('full_name', 'Unknown')}")
            print(f"   üè∑Ô∏è  Role: {response.get('user', {}).get('role', 'Unknown')}")
            print(f"   üÜî User Number: {response.get('user', {}).get('user_number', 'Unknown')}")
            return True
        else:
            print(f"   ‚ùå Authentication failed for {role_name}")
            return False

    def test_warehouse_operator_auth(self) -> bool:
        """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
        print(f"\n{'='*60}")
        print(f"–≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print(f"{'='*60}")
        
        return self.authenticate_user("+79777888999", "warehouse123", "warehouse_operator")

    def test_get_notifications_in_processing(self) -> bool:
        """Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing'"""
        print(f"\n{'='*60}")
        print(f"–≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–û –°–¢–ê–¢–£–°–û–ú 'in_processing'")
        print(f"{'='*60}")
        
        if "warehouse_operator" not in self.tokens:
            print("‚ùå Warehouse operator not authenticated")
            return False
            
        success, response = self.run_test(
            "Get Warehouse Notifications",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=self.tokens["warehouse_operator"]
        )
        
        if success:
            notifications = response.get("notifications", [])
            print(f"   üìä Total notifications found: {len(notifications)}")
            
            # Find notifications with 'in_processing' status
            in_processing_notifications = [n for n in notifications if n.get("status") == "in_processing"]
            print(f"   üîÑ Notifications with 'in_processing' status: {len(in_processing_notifications)}")
            
            if in_processing_notifications:
                # Store the first in_processing notification for testing
                self.notification_id = in_processing_notifications[0].get("id")
                print(f"   üéØ Selected notification ID for testing: {self.notification_id}")
                print(f"   üìã Notification details:")
                print(f"      - Status: {in_processing_notifications[0].get('status')}")
                print(f"      - Request ID: {in_processing_notifications[0].get('pickup_request_id')}")
                print(f"      - Created at: {in_processing_notifications[0].get('created_at')}")
                return True
            else:
                print("   ‚ö†Ô∏è  No notifications with 'in_processing' status found")
                print("   üîç Available notification statuses:")
                statuses = set([n.get("status") for n in notifications])
                for status in statuses:
                    count = len([n for n in notifications if n.get("status") == status])
                    print(f"      - {status}: {count}")
                
                # Try to find any notification that can be used for testing
                pending_notifications = [n for n in notifications if n.get("status") == "pending_acceptance"]
                if pending_notifications:
                    self.notification_id = pending_notifications[0].get("id")
                    print(f"   üéØ Using pending notification for testing: {self.notification_id}")
                    return True
                else:
                    print("   ‚ùå No suitable notifications found for testing")
                    return False
        
        return False

    def test_send_to_placement_endpoint(self) -> bool:
        """Test 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ"""
        print(f"\n{'='*60}")
        print(f"–≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û ENDPOINT –û–¢–ü–†–ê–í–ö–ò –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï")
        print(f"{'='*60}")
        
        if not self.notification_id:
            print("‚ùå No notification ID available for testing")
            return False
            
        if "warehouse_operator" not in self.tokens:
            print("‚ùå Warehouse operator not authenticated")
            return False
        
        # Test the fixed endpoint for sending to placement
        success, response = self.run_test(
            "Send Pickup Request to Placement (FIXED ENDPOINT)",
            "POST",
            f"/api/operator/warehouse-notifications/{self.notification_id}/send-to-placement",
            200,
            token=self.tokens["warehouse_operator"]
        )
        
        if success:
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - ENDPOINT –†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó –û–®–ò–ë–û–ö 500!")
            print(f"   üìã Response details:")
            print(f"      - Message: {response.get('message', 'N/A')}")
            print(f"      - Notification ID: {response.get('notification_id', 'N/A')}")
            print(f"      - Cargo ID: {response.get('cargo_id', 'N/A')}")
            print(f"      - Cargo Number: {response.get('cargo_number', 'N/A')}")
            print(f"      - Status: {response.get('status', 'N/A')}")
            
            # Store cargo details for further testing
            self.created_cargo_id = response.get('cargo_id')
            self.created_cargo_number = response.get('cargo_number')
            
            return True
        else:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - Endpoint failed")
            return False

    def test_cargo_creation_with_correct_fields(self) -> bool:
        """Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        print(f"\n{'='*60}")
        print(f"–≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–ì–û –°–û–ó–î–ê–ù–ò–Ø –ì–†–£–ó–ê –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–û–õ–Ø–ú–ò")
        print(f"{'='*60}")
        
        if not self.created_cargo_number:
            print("‚ùå No cargo number available for testing")
            return False
            
        if "warehouse_operator" not in self.tokens:
            print("‚ùå Warehouse operator not authenticated")
            return False
        
        # Test cargo tracking to verify it was created correctly
        success, response = self.run_test(
            "Track Created Cargo",
            "GET",
            f"/api/cargo/track/{self.created_cargo_number}",
            200,
            token=self.tokens["warehouse_operator"]
        )
        
        if success:
            print(f"   ‚úÖ –ì–†–£–ó –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
            print(f"   üìã Cargo details:")
            print(f"      - Cargo Number: {response.get('cargo_number', 'N/A')}")
            print(f"      - Sender Full Name: {response.get('sender_full_name', 'N/A')}")
            print(f"      - Sender Phone: {response.get('sender_phone', 'N/A')}")
            print(f"      - Recipient Name: {response.get('recipient_name', 'N/A')}")
            print(f"      - Weight: {response.get('weight', 'N/A')}")
            print(f"      - Status: {response.get('status', 'N/A')}")
            print(f"      - Processing Status: {response.get('processing_status', 'N/A')}")
            print(f"      - Pickup Request ID: {response.get('pickup_request_id', 'N/A')}")
            
            # Check if default values were properly set for sender fields
            sender_full_name = response.get('sender_full_name', '')
            sender_phone = response.get('sender_phone', '')
            
            print(f"\n   üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ù–ê–ß–ï–ù–ò–ô –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:")
            if sender_full_name and sender_full_name != 'null' and sender_full_name != '':
                print(f"   ‚úÖ sender_full_name –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: '{sender_full_name}'")
            else:
                print(f"   ‚ùå sender_full_name –ø—É—Å—Ç–æ–µ –∏–ª–∏ null: '{sender_full_name}'")
                
            if sender_phone and sender_phone != 'null' and sender_phone != '':
                print(f"   ‚úÖ sender_phone –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: '{sender_phone}'")
            else:
                print(f"   ‚ùå sender_phone –ø—É—Å—Ç–æ–µ –∏–ª–∏ null: '{sender_phone}'")
            
            # Check if cargo has pickup_request_id (indicates it came from pickup request)
            pickup_request_id = response.get('pickup_request_id')
            if pickup_request_id:
                print(f"   ‚úÖ pickup_request_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {pickup_request_id}")
            else:
                print(f"   ‚ö†Ô∏è  pickup_request_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            return True
        else:
            print(f"   ‚ùå Failed to track created cargo")
            return False

    def test_status_updates_after_placement(self) -> bool:
        """Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ"""
        print(f"\n{'='*60}")
        print(f"–≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–í –ü–û–°–õ–ï –û–¢–ü–†–ê–í–ö–ò –ù–ê –†–ê–ó–ú–ï–©–ï–ù–ò–ï")
        print(f"{'='*60}")
        
        if "warehouse_operator" not in self.tokens:
            print("‚ùå Warehouse operator not authenticated")
            return False
        
        # Check if notification status was updated
        success, response = self.run_test(
            "Check Updated Notifications",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=self.tokens["warehouse_operator"]
        )
        
        if success:
            notifications = response.get("notifications", [])
            print(f"   üìä Total notifications: {len(notifications)}")
            
            # Check if our notification was updated or removed
            our_notification = None
            for notification in notifications:
                if notification.get("id") == self.notification_id:
                    our_notification = notification
                    break
            
            if our_notification:
                print(f"   üìã Notification found with updated status:")
                print(f"      - ID: {our_notification.get('id')}")
                print(f"      - Status: {our_notification.get('status')}")
                print(f"      - Updated at: {our_notification.get('updated_at')}")
                
                if our_notification.get('status') == 'sent_to_placement':
                    print(f"   ‚úÖ –°–¢–ê–¢–£–° –ö–û–†–†–ï–ö–¢–ù–û –û–ë–ù–û–í–õ–ï–ù –ù–ê 'sent_to_placement'")
                else:
                    print(f"   ‚ö†Ô∏è  –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ –æ–∂–∏–¥–∞–µ–º—ã–π 'sent_to_placement'")
            else:
                print(f"   ‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ò–°–ö–õ–Æ–ß–ï–ù–û –ò–ó –°–ü–ò–°–ö–ê (–æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)")
            
            # Check status distribution
            print(f"\n   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            status_counts = {}
            for notification in notifications:
                status = notification.get('status', 'unknown')
                status_counts[status] = status_counts.get(status, 0) + 1
            
            for status, count in status_counts.items():
                print(f"      - {status}: {count}")
            
            return True
        
        return False

    def test_cargo_available_for_placement(self) -> bool:
        """Additional Test: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print(f"\n{'='*60}")
        print(f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ì–†–£–ó–ê –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        print(f"{'='*60}")
        
        if "warehouse_operator" not in self.tokens:
            print("‚ùå Warehouse operator not authenticated")
            return False
        
        success, response = self.run_test(
            "Check Cargo Available for Placement",
            "GET",
            "/api/operator/cargo/available-for-placement",
            200,
            token=self.tokens["warehouse_operator"]
        )
        
        if success:
            items = response.get("items", [])
            print(f"   üìä Total cargo available for placement: {len(items)}")
            
            # Look for our created cargo
            our_cargo = None
            if self.created_cargo_number:
                for item in items:
                    if item.get('cargo_number') == self.created_cargo_number:
                        our_cargo = item
                        break
            
            if our_cargo:
                print(f"   ‚úÖ –ù–ê–® –ì–†–£–ó –ù–ê–ô–î–ï–ù –í –î–û–°–¢–£–ü–ù–´–• –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø!")
                print(f"      - Cargo Number: {our_cargo.get('cargo_number')}")
                print(f"      - Status: {our_cargo.get('status')}")
                print(f"      - Processing Status: {our_cargo.get('processing_status')}")
                print(f"      - Weight: {our_cargo.get('weight')}")
                print(f"      - Pickup Request ID: {our_cargo.get('pickup_request_id')}")
            else:
                print(f"   ‚ö†Ô∏è  –ù–∞—à –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                if items:
                    print(f"   üìã –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:")
                    for i, item in enumerate(items[:3]):
                        print(f"      {i+1}. {item.get('cargo_number')} - {item.get('status')}")
            
            return True
        
        return False

    def run_comprehensive_test(self):
        """Run all tests in sequence"""
        print(f"\nüéØ –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê")
        print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        test_results = []
        
        # Test 1: Warehouse Operator Authentication
        result1 = self.test_warehouse_operator_auth()
        test_results.append(("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", result1))
        
        if not result1:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            self.print_final_summary(test_results)
            return
        
        # Test 2: Get notifications with in_processing status
        result2 = self.test_get_notifications_in_processing()
        test_results.append(("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_processing'", result2))
        
        if not result2:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.print_final_summary(test_results)
            return
        
        # Test 3: Test fixed send-to-placement endpoint
        result3 = self.test_send_to_placement_endpoint()
        test_results.append(("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", result3))
        
        # Test 4: Check cargo creation with correct fields
        result4 = self.test_cargo_creation_with_correct_fields()
        test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏", result4))
        
        # Test 5: Check status updates after placement
        result5 = self.test_status_updates_after_placement()
        test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", result5))
        
        # Additional test: Check cargo available for placement
        result6 = self.test_cargo_available_for_placement()
        test_results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", result6))
        
        self.print_final_summary(test_results)

    def print_final_summary(self, test_results):
        """Print comprehensive test summary"""
        print(f"\n{'='*80}")
        print(f"üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê")
        print(f"{'='*80}")
        
        passed_tests = sum(1 for _, result in test_results if result)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.tests_run}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {self.tests_passed}")
        print(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {self.tests_run - self.tests_passed}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        for i, (test_name, result) in enumerate(test_results, 1):
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"   {i}) {test_name}: {status}")
        
        print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–í–ï–†–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        
        # Check if main fixes were tested
        if any("endpoint –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ" in name for name, result in test_results if result):
            print(f"   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ - –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û")
            print(f"      - Endpoint /api/operator/warehouse-notifications/{{id}}/send-to-placement —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ 500")
            print(f"      - –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è sender_full_name, sender_phone –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print(f"   ‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ - –ù–ï –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û")
        
        print(f"   ‚ÑπÔ∏è  –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—á–∞—Ç—å—é QR –∫–æ–¥–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö –≤ JavaScript")
        print(f"      - –≠—Ç–æ frontend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, backend —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        
        if self.created_cargo_number:
            print(f"\nüéØ –°–û–ó–î–ê–ù–ù–´–ô –¢–ï–°–¢–û–í–´–ô –ì–†–£–ó:")
            print(f"   üì¶ –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {self.created_cargo_number}")
            print(f"   üÜî ID –≥—Ä—É–∑–∞: {self.created_cargo_id}")
        
        print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if success_rate >= 80:
            print(f"   üéâ –î–û–°–¢–ò–ì–ù–£–¢! Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ 500, —Å–æ–∑–¥–∞–µ—Ç –≥—Ä—É–∑ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        else:
            print(f"   ‚ùå –ù–ï –î–û–°–¢–ò–ì–ù–£–¢! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        
        print(f"\nüìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"{'='*80}")

if __name__ == "__main__":
    tester = PickupRequestFixesTester()
    tester.run_comprehensive_test()