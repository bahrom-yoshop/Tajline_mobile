#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —á—Ç–µ–Ω–∏—è QR –∫–æ–¥–æ–≤
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ review request
"""

import requests
import sys
import json
from datetime import datetime

class QRStabilityTester:
    def __init__(self):
        # Use the correct backend URL from frontend/.env
        self.base_url = "https://placement-manager.preview.emergentagent.com"
        self.tokens = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print("üéØ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–û–°–õ–ï –£–õ–£–ß–®–ï–ù–ò–ô QR –ö–û–î–û–í")
        print(f"üì° Backend URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data=None, token=None, params=None):
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_warehouse_operator_authentication(self):
        """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ +79777888999/warehouse123 —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"""
        print("\nüîê –¢–ï–°–¢ 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Warehouse Operator Login (Stable Authentication)",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        
        if success and 'access_token' in login_response:
            operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            
            print(f"   ‚úÖ Operator login successful: {operator_name}")
            print(f"   üëë Role: {operator_role}")
            print(f"   üìû Phone: {operator_user.get('phone')}")
            
            # Verify role is warehouse_operator
            if operator_role == 'warehouse_operator':
                print("   ‚úÖ Operator role correctly set to 'warehouse_operator'")
                self.tokens['warehouse_operator'] = operator_token
                return True
            else:
                print(f"   ‚ùå Operator role incorrect: expected 'warehouse_operator', got '{operator_role}'")
                return False
        else:
            print("   ‚ùå Operator login failed")
            return False

    def test_cargo_placement_endpoints(self):
        """Test 2: Endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏"""
        print("\nüèóÔ∏è –¢–ï–°–¢ 2: ENDPOINTS –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–ê –û–°–¢–ê–Æ–¢–°–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ú–ò")
        
        if 'warehouse_operator' not in self.tokens:
            print("   ‚ùå No operator token available")
            return False
            
        operator_token = self.tokens['warehouse_operator']
        all_success = True
        
        # Test 2.1: /api/operator/placement-statistics
        print("\n   üìä Test 2.1: /api/operator/placement-statistics...")
        
        success, stats_response = self.run_test(
            "Operator Placement Statistics",
            "GET",
            "/api/operator/placement-statistics",
            200,
            token=operator_token
        )
        all_success &= success
        
        if success:
            print("   ‚úÖ /api/operator/placement-statistics working")
            required_stats = ['operator_name', 'today_placements', 'session_placements', 'recent_placements']
            missing_stats = [field for field in required_stats if field not in stats_response]
            
            if not missing_stats:
                print("   ‚úÖ All placement statistics fields present")
                print(f"   üìä Operator: {stats_response.get('operator_name')}")
                print(f"   üìä Today placements: {stats_response.get('today_placements', 0)}")
                print(f"   üìä Session placements: {stats_response.get('session_placements', 0)}")
            else:
                print(f"   ‚ùå Missing statistics fields: {missing_stats}")
                all_success = False
        
        # Test 2.2: Get warehouses for testing
        print("\n   üè≠ Test 2.2: Get warehouses for placement testing...")
        
        success, warehouses_response = self.run_test(
            "Get Warehouses for Placement Testing",
            "GET",
            "/api/warehouses",
            200,
            token=operator_token
        )
        all_success &= success
        
        test_warehouse = None
        if success and warehouses_response:
            test_warehouse = warehouses_response[0] if isinstance(warehouses_response, list) else None
            if test_warehouse:
                warehouse_id = test_warehouse.get('id')
                warehouse_name = test_warehouse.get('name', 'Test Warehouse')
                print(f"   üè≠ Using warehouse: {warehouse_name}")
        
        # Test 2.3: /api/warehouse/available-cells
        if test_warehouse:
            print("\n   üèóÔ∏è Test 2.3: /api/warehouse/available-cells...")
            
            warehouse_id = test_warehouse.get('id')
            
            success, cells_response = self.run_test(
                "Get Available Warehouse Cells",
                "GET",
                f"/api/warehouses/{warehouse_id}/available-cells",
                200,
                token=operator_token
            )
            all_success &= success
            
            if success:
                print("   ‚úÖ /api/warehouse/available-cells working")
                if isinstance(cells_response, dict) and 'available_cells' in cells_response:
                    available_count = len(cells_response.get('available_cells', []))
                    print(f"   üìä Found {available_count} available cells")
                elif isinstance(cells_response, list):
                    print(f"   üìä Found {len(cells_response)} available cells")
        
        # Test 2.4: Create test cargo for placement
        print("\n   üì¶ Test 2.4: Create test cargo for placement...")
        
        cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
            "sender_phone": "+79991234567",
            "recipient_full_name": "–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
            "recipient_phone": "+992987654321",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. QR –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, 1",
            "weight": 5.0,
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏",
            "declared_value": 2000.0,
            "description": "–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π QR –∫–æ–¥–æ–≤",
            "route": "moscow_dushanbe",
            "payment_method": "cash",
            "payment_amount": 2000.0
        }
        
        success, cargo_response = self.run_test(
            "Create Test Cargo for Placement",
            "POST",
            "/api/operator/cargo/accept",
            200,
            cargo_data,
            operator_token
        )
        all_success &= success
        
        if success and 'cargo_number' in cargo_response:
            test_cargo_number = cargo_response['cargo_number']
            print(f"   ‚úÖ Test cargo created: {test_cargo_number}")
        
        return all_success

    def test_qr_scanning_endpoints(self):
        """Test 3: QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
        print("\nüì± –¢–ï–°–¢ 3: QR –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        
        if 'warehouse_operator' not in self.tokens:
            print("   ‚ùå No operator token available")
            return False
            
        operator_token = self.tokens['warehouse_operator']
        all_success = True
        
        # Test 3.1: Create test cargo for QR scanning
        print("\n   üì¶ Test 3.1: Create test cargo for QR scanning...")
        
        cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç QR –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "sender_phone": "+79991234568",
            "recipient_full_name": "–¢–µ—Å—Ç QR –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
            "recipient_phone": "+992987654322",
            "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. QR –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, 2",
            "weight": 3.0,
            "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            "declared_value": 1500.0,
            "description": "–¢–µ—Å—Ç QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π",
            "route": "moscow_dushanbe",
            "payment_method": "cash",
            "payment_amount": 1500.0
        }
        
        success, cargo_response = self.run_test(
            "Create Test Cargo for QR Scanning",
            "POST",
            "/api/operator/cargo/accept",
            200,
            cargo_data,
            operator_token
        )
        all_success &= success
        
        test_cargo_number = None
        if success and 'cargo_number' in cargo_response:
            test_cargo_number = cargo_response['cargo_number']
            print(f"   ‚úÖ Test cargo created: {test_cargo_number}")
        
        # Test 3.2: /api/cargo/track/{cargo_number} endpoint
        if test_cargo_number:
            print("\n   üéØ Test 3.2: /api/cargo/track/{cargo_number} endpoint...")
            
            success, track_response = self.run_test(
                f"Track Cargo by Number (QR Search)",
                "GET",
                f"/api/cargo/track/{test_cargo_number}",
                200,
                token=operator_token
            )
            all_success &= success
            
            if success:
                print("   ‚úÖ /api/cargo/track/{cargo_number} endpoint working")
                required_fields = ['cargo_number', 'cargo_name', 'weight', 'recipient_name', 'recipient_phone', 'status']
                missing_fields = [field for field in required_fields if field not in track_response]
                
                if not missing_fields:
                    print("   ‚úÖ All required fields present for QR operations")
                    if track_response.get('cargo_number') == test_cargo_number:
                        print("   ‚úÖ Cargo found by number - QR search working correctly")
                    else:
                        print(f"   ‚ùå Cargo number mismatch")
                        all_success = False
                else:
                    print(f"   ‚ùå Missing required fields: {missing_fields}")
                    all_success = False
        
        # Test 3.3: /api/cargo/scan-qr endpoint
        if test_cargo_number:
            print("\n   üì± Test 3.3: /api/cargo/scan-qr endpoint...")
            
            qr_scan_data = {
                "qr_text": test_cargo_number  # QR code contains cargo number
            }
            
            success, scan_response = self.run_test(
                "QR Scan for Operations",
                "POST",
                "/api/cargo/scan-qr",
                200,
                qr_scan_data,
                operator_token
            )
            all_success &= success
            
            if success:
                print("   ‚úÖ QR scanning working correctly")
                if scan_response.get('success'):
                    print("   ‚úÖ QR scan successful")
                    cargo_info = scan_response.get('cargo', {})
                    if cargo_info and cargo_info.get('cargo_number') == test_cargo_number:
                        print("   ‚úÖ Correct cargo found by QR scanning")
                        operations = cargo_info.get('available_operations', [])
                        if operations:
                            print(f"   ‚úÖ Available operations: {operations}")
                        else:
                            print("   ‚ùå No available operations")
                            all_success = False
                    else:
                        print("   ‚ùå Wrong cargo found by QR scanning")
                        all_success = False
                else:
                    print("   ‚ùå QR scan not successful")
                    all_success = False
        
        return all_success

    def test_existing_api_calls(self):
        """Test 4: –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API –≤—ã–∑–æ–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
        print("\nüîó –¢–ï–°–¢ 4: –í–°–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï API –í–´–ó–û–í–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û")
        
        if 'warehouse_operator' not in self.tokens:
            print("   ‚ùå No operator token available")
            return False
            
        operator_token = self.tokens['warehouse_operator']
        all_success = True
        
        # Test existing API endpoints that should remain stable
        existing_endpoints = [
            ("/api/auth/me", "Current User Info"),
            ("/api/operator/warehouses", "Operator Warehouses"),
            ("/api/operator/cargo/list", "Operator Cargo List"),
            ("/api/operator/cargo/available-for-placement", "Available Cargo for Placement"),
            ("/api/warehouses", "Warehouses List"),
        ]
        
        for endpoint, description in existing_endpoints:
            print(f"\n   üîç Testing {description} ({endpoint})...")
            
            success, response = self.run_test(
                description,
                "GET",
                endpoint,
                200,
                token=operator_token
            )
            all_success &= success
            
            if success:
                print(f"   ‚úÖ {description} working")
                # Check for basic response structure
                if isinstance(response, (dict, list)):
                    print(f"   ‚úÖ Response structure correct")
                else:
                    print(f"   ‚ùå Unexpected response format")
                    all_success = False
            else:
                print(f"   ‚ùå {description} failing")
        
        return all_success

    def run_all_tests(self):
        """Run all stability tests"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò BACKEND...")
        
        results = {}
        
        # Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        results['authentication'] = self.test_warehouse_operator_authentication()
        
        # Test 2: Endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞
        results['placement_endpoints'] = self.test_cargo_placement_endpoints()
        
        # Test 3: QR —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
        results['qr_scanning'] = self.test_qr_scanning_endpoints()
        
        # Test 4: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API –≤—ã–∑–æ–≤—ã
        results['existing_apis'] = self.test_existing_api_calls()
        
        # Summary
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò BACKEND")
        print("=" * 80)
        
        passed_tests = sum(1 for result in results.values() if result)
        total_tests = len(results)
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"\nüìà –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.tests_run}")
        print(f"   –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.tests_passed/self.tests_run*100):.1f}%")
        
        print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for test_name, result in results.items():
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"   {test_name}: {status}")
        
        print(f"\nüìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate:.1f}% ({passed_tests}/{total_tests})")
        
        if all(results.values()):
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123) —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            print("‚úÖ Endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏")
            print("‚úÖ Backend –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ handleExternalCellScan –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ UI")
            print("‚úÖ –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API –≤—ã–∑–æ–≤—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("\nüéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: Backend –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —á—Ç–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR –∫–æ–¥–æ–≤ —è—á–µ–µ–∫")
            return True
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            failed_tests = [name for name, result in results.items() if not result]
            print(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏: {', '.join(failed_tests)}")
            print("\nüîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π")
            return False

if __name__ == "__main__":
    tester = QRStabilityTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)