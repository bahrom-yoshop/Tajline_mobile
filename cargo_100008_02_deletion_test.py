#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞ 100008/02 (ID: 100004) –≤ TAJLINE.TJ

–ù–∞–π–¥–µ–Ω –≥—Ä—É–∑ 100008/02 —Å ID: 100004 –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
–ü—Ä–æ–≤–µ–¥–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥—Ä—É–∑–∞.
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-tracker.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

class SpecificCargoDeletionTest:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.target_cargo_number = "100008/02"
        self.target_cargo_id = "100004"
        self.cargo_data = None
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'N/A')} ({user_info.get('role', 'N/A')})")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_detailed_cargo_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ 100008/02"""
        print(f"\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ {self.target_cargo_number}...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_items = data.get('items', [])
                
                # –ò—â–µ–º –Ω–∞—à –≥—Ä—É–∑
                target_cargo = None
                for cargo in cargo_items:
                    if cargo.get('cargo_number') == self.target_cargo_number:
                        target_cargo = cargo
                        break
                
                if target_cargo:
                    self.cargo_data = target_cargo
                    
                    print(f"üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–†–£–ó–ï {self.target_cargo_number}:")
                    print(f"=" * 60)
                    for key, value in target_cargo.items():
                        print(f"   {key}: {value}")
                    print(f"=" * 60)
                    
                    return True
                else:
                    print(f"‚ùå –ì—Ä—É–∑ {self.target_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ: {e}")
            return False
    
    def test_single_cargo_deletion(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
        print(f"\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ {self.target_cargo_number}...")
        
        # –ú–µ—Ç–æ–¥ 1: DELETE /api/operator/cargo/{cargo_id}/remove-from-placement
        print(f"\nüîÑ –ú–µ—Ç–æ–¥ 1: DELETE /api/operator/cargo/{self.target_cargo_id}/remove-from-placement")
        try:
            response = self.session.delete(
                f"{BACKEND_URL}/operator/cargo/{self.target_cargo_id}/remove-from-placement",
                timeout=10
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º 1!")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º 1")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–µ—Ç–æ–¥–µ 1: {e}")
        
        # –ú–µ—Ç–æ–¥ 2: DELETE /api/admin/cargo/{cargo_id}
        print(f"\nüîÑ –ú–µ—Ç–æ–¥ 2: DELETE /api/admin/cargo/{self.target_cargo_id}")
        try:
            response = self.session.delete(
                f"{BACKEND_URL}/admin/cargo/{self.target_cargo_id}",
                timeout=10
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º 2!")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º 2")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–µ—Ç–æ–¥–µ 2: {e}")
        
        # –ú–µ—Ç–æ–¥ 3: DELETE /api/cargo/{cargo_id}
        print(f"\nüîÑ –ú–µ—Ç–æ–¥ 3: DELETE /api/cargo/{self.target_cargo_id}")
        try:
            response = self.session.delete(
                f"{BACKEND_URL}/cargo/{self.target_cargo_id}",
                timeout=10
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º 3!")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–º 3")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–µ—Ç–æ–¥–µ 3: {e}")
        
        return False
    
    def test_bulk_cargo_deletion(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
        print(f"\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ {self.target_cargo_number}...")
        
        # –ú–µ—Ç–æ–¥ 1: POST /api/operator/cargo/bulk-remove-from-placement
        print(f"\nüîÑ –ú–µ—Ç–æ–¥ 1: POST /api/operator/cargo/bulk-remove-from-placement")
        try:
            payload = {
                "cargo_ids": [self.target_cargo_id]
            }
            
            response = self.session.delete(
                f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement",
                json=payload,
                timeout=10
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ!")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        
        return False
    
    def test_cargo_status_change(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞"""
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞ {self.target_cargo_number}...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞
        status_endpoints = [
            f"/admin/cargo/{self.target_cargo_id}/status",
            f"/operator/cargo/{self.target_cargo_id}/status",
            f"/cargo/{self.target_cargo_id}/status"
        ]
        
        new_statuses = ["removed", "deleted", "cancelled", "completed"]
        
        for endpoint in status_endpoints:
            for status in new_statuses:
                print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ '{status}' —á–µ—Ä–µ–∑ {endpoint}")
                try:
                    payload = {"status": status}
                    
                    response = self.session.put(
                        f"{BACKEND_URL}{endpoint}",
                        json=payload,
                        timeout=10
                    )
                    
                    print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                    
                    if response.status_code == 200:
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ '{status}'!")
                        return True
                        
                except Exception as e:
                    print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        return False
    
    def verify_cargo_removal(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ {self.target_cargo_number}...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_items = data.get('items', [])
                
                # –ò—â–µ–º –Ω–∞—à –≥—Ä—É–∑
                found = False
                for cargo in cargo_items:
                    if cargo.get('cargo_number') == self.target_cargo_number:
                        found = True
                        break
                
                if found:
                    print(f"‚ùå –ì—Ä—É–∑ {self.target_cargo_number} –í–°–ï –ï–©–ï –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
                    return False
                else:
                    print(f"‚úÖ –ì—Ä—É–∑ {self.target_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
                    return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return False
    
    def analyze_cargo_dependencies(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≥—Ä—É–∑–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"""
        print(f"\nüîó –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≥—Ä—É–∑–∞ {self.target_cargo_number}...")
        
        if not self.cargo_data:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–∑–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π –≥—Ä—É–∑–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        critical_fields = [
            'status', 'processing_status', 'payment_status',
            'warehouse_id', 'block_number', 'shelf_number', 'cell_number',
            'assigned_courier_id', 'transport_id', 'placed_by_operator_id'
        ]
        
        blocking_factors = []
        
        for field in critical_fields:
            value = self.cargo_data.get(field)
            if value and value != 'N/A' and value != '':
                print(f"   ‚ö†Ô∏è {field}: {value} (–º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ)")
                blocking_factors.append(f"{field}={value}")
            else:
                print(f"   ‚úÖ {field}: {value or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
        
        if blocking_factors:
            print(f"\nüö® –ù–ê–ô–î–ï–ù–´ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ë–õ–û–ö–ò–†–£–Æ–©–ò–ï –§–ê–ö–¢–û–†–´:")
            for factor in blocking_factors:
                print(f"   - {factor}")
            
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω –ª–∏ –≥—Ä—É–∑ –≤ —è—á–µ–π–∫–µ —Å–∫–ª–∞–¥–∞")
            print(f"   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –≥—Ä—É–∑ –∫—É—Ä—å–µ—Ä—É")
            print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –≥—Ä—É–∑ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            print(f"   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print(f"\n‚úÖ –ë–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def run_comprehensive_deletion_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ 100008/02"""
        print("=" * 80)
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ 100008/02")
        print("=" * 80)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ
        if not self.get_detailed_cargo_info():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ")
            return False
        
        # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.analyze_cargo_dependencies()
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        single_deletion_success = self.test_single_cargo_deletion()
        
        if single_deletion_success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            if self.verify_cargo_removal():
                print(f"\nüéâ –£–°–ü–ï–•: –ì—Ä—É–∑ {self.target_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –µ–¥–∏–Ω–∏—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!")
                return True
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        bulk_deletion_success = self.test_bulk_cargo_deletion()
        
        if bulk_deletion_success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            if self.verify_cargo_removal():
                print(f"\nüéâ –£–°–ü–ï–•: –ì—Ä—É–∑ {self.target_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –º–∞—Å—Å–æ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º!")
                return True
        
        # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_change_success = self.test_cargo_status_change()
        
        if status_change_success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            if self.verify_cargo_removal():
                print(f"\nüéâ –£–°–ü–ï–•: –ì—Ä—É–∑ {self.target_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞!")
                return True
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\n" + "=" * 80)
        print(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"=" * 80)
        
        if not self.verify_cargo_removal():
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –ì—Ä—É–∑ {self.target_cargo_number} –ù–ï –£–î–ê–õ–Ø–ï–¢–°–Ø!")
            print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–†–û–í–ê–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            print(f"   1. –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   2. –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç") 
            print(f"   3. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ï–®–ï–ù–ò–Ø:")
            print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å backend –∫–æ–¥ –¥–ª—è endpoint'–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è")
            print(f"   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print(f"   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞")
            
            return False
        else:
            print(f"‚úÖ –ì—Ä—É–∑ {self.target_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    test = SpecificCargoDeletionTest()
    
    try:
        success = test.run_comprehensive_deletion_test()
        
        if success:
            print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—è–≤–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—ã!")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    main()