#!/usr/bin/env python3
"""
üéØ –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∞–≥–∞
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://placement-view.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class SimpleSyncTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    print(f"‚úÖ –°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})")
                    return True
                else:
                    print("‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞: {str(e)}")
            return False

    def check_warehouse_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞"""
        print("\nüèóÔ∏è –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –°–ö–õ–ê–î–ê")
        print("=" * 40)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_id}/statistics", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞:")
                print(f"   –í—Å–µ–≥–æ —è—á–µ–µ–∫: {data.get('total_cells', 'N/A')}")
                print(f"   –ó–∞–Ω—è—Ç–æ —è—á–µ–µ–∫: {data.get('occupied_cells', 'N/A')}")
                print(f"   –°–≤–æ–±–æ–¥–Ω–æ —è—á–µ–µ–∫: {data.get('free_cells', 'N/A')}")
                print(f"   –ó–∞–≥—Ä—É–∑–∫–∞: {data.get('occupancy_percentage', 'N/A')}%")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
                warehouse_response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_id}", timeout=30)
                if warehouse_response.status_code == 200:
                    warehouse_data = warehouse_response.json()
                    print(f"üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–ª–∞–¥–∞:")
                    print(f"   –ë–ª–æ–∫–æ–≤: {warehouse_data.get('blocks_count', 'N/A')}")
                    print(f"   –ü–æ–ª–æ–∫ –Ω–∞ –±–ª–æ–∫: {warehouse_data.get('shelves_per_block', 'N/A')}")
                    print(f"   –Ø—á–µ–µ–∫ –Ω–∞ –ø–æ–ª–∫—É: {warehouse_data.get('cells_per_shelf', 'N/A')}")
                    
                    return {
                        "blocks_count": warehouse_data.get('blocks_count', 4),
                        "shelves_per_block": warehouse_data.get('shelves_per_block', 4),
                        "cells_per_shelf": warehouse_data.get('cells_per_shelf', 10)
                    }
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞: {warehouse_response.status_code}")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞: {str(e)}")
            return None

    def test_placement_with_valid_positions(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –° –í–ê–õ–ò–î–ù–´–ú–ò –ü–û–ó–ò–¶–ò–Ø–ú–ò")
        print("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
        warehouse_structure = self.check_warehouse_structure()
        if not warehouse_structure:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
        
        if available_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {available_response.status_code}")
            return False
        
        available_data = available_response.json()
        available_items = available_data.get("items", [])
        
        if not available_items:
            print("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É
        first_cargo = available_items[0]
        cargo_number = first_cargo.get("cargo_number")
        print(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É: {cargo_number}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        cargo_items = first_cargo.get("cargo_items", [])
        if not cargo_items:
            print("‚ùå –ù–µ—Ç cargo_items")
            return False
        
        individual_items = cargo_items[0].get("individual_items", [])
        if not individual_items:
            print("‚ùå –ù–µ—Ç individual_items")
            return False
        
        # –ò—â–µ–º –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É
        test_unit = None
        for unit in individual_items:
            if not unit.get("is_placed", False):
                test_unit = unit
                break
        
        if not test_unit:
            print("‚ùå –í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
            return False
        
        individual_number = test_unit.get("individual_number")
        print(f"üìã –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É: {individual_number}")
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º: is_placed = {test_unit.get('is_placed', False)}")
        
        # –ü—Ä–æ–±—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∫–ª–∞–¥–∞
        valid_positions = [
            (1, 1, 1),  # –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 1
            (1, 1, 2),  # –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 2
            (1, 1, 3),  # –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 3
            (1, 2, 1),  # –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 2, –Ø—á–µ–π–∫–∞ 1
            (2, 1, 1),  # –ë–ª–æ–∫ 2, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 1
        ]
        
        for attempt, (block, shelf, cell) in enumerate(valid_positions):
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ë–ª–æ–∫ {block}, –ü–æ–ª–∫–∞ {shelf}, –Ø—á–µ–π–∫–∞ {cell}")
            
            placement_data = {
                "individual_number": individual_number,
                "block_number": block,
                "shelf_number": shelf,
                "cell_number": cell
            }
            
            place_response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            print(f"   üì° HTTP —Å—Ç–∞—Ç—É—Å: {place_response.status_code}")
            
            if place_response.status_code == 200:
                place_data = place_response.json()
                print(f"   ‚úÖ –£–°–ü–ï–®–ù–û! –ï–¥–∏–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {place_data.get('message', '–£—Å–ø–µ—à–Ω–æ')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
                if "placement_details" in place_data:
                    placement_details = place_data["placement_details"]
                    print(f"   üìç –î–µ—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placement_details}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
                print("   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
                time.sleep(3)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                updated_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
                
                if updated_response.status_code == 200:
                    updated_data = updated_response.json()
                    updated_items = updated_data.get("items", [])
                    
                    # –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                    updated_cargo = None
                    for item in updated_items:
                        if item.get("cargo_number") == cargo_number:
                            updated_cargo = item
                            break
                    
                    if updated_cargo:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        updated_cargo_items = updated_cargo.get("cargo_items", [])
                        if updated_cargo_items:
                            updated_individual_items = updated_cargo_items[0].get("individual_items", [])
                            
                            updated_unit = None
                            for unit in updated_individual_items:
                                if unit.get("individual_number") == individual_number:
                                    updated_unit = unit
                                    break
                            
                            if updated_unit:
                                is_placed_after = updated_unit.get("is_placed", False)
                                print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: is_placed = {is_placed_after}")
                                
                                if is_placed_after:
                                    print("   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ò–°–ü–†–ê–í–õ–ï–ù! individual_items.is_placed –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                                    print("   üéâ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –†–ê–ë–û–¢–ê–ï–¢!")
                                    return True
                                else:
                                    print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù! individual_items.is_placed –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
                                    return False
                            else:
                                print("   ‚ùå –†–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç cargo_items –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print("   üìã –ó–∞—è–≤–∫–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ available-for-placement")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fully-placed
                        fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
                        if fully_placed_response.status_code == 200:
                            fully_placed_data = fully_placed_response.json()
                            fully_placed_items = fully_placed_data.get("items", [])
                            
                            found_in_fully_placed = False
                            for item in fully_placed_items:
                                if item.get("cargo_number") == cargo_number:
                                    found_in_fully_placed = True
                                    break
                            
                            if found_in_fully_placed:
                                print("   ‚úÖ –û–¢–õ–ò–ß–ù–û! –ó–∞—è–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed")
                                print("   üéâ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –†–ê–ë–û–¢–ê–ï–¢!")
                                return True
                            else:
                                print("   ‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed")
                                return False
                        else:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fully-placed: {fully_placed_response.status_code}")
                            return False
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {updated_response.status_code}")
                    return False
                    
            elif place_response.status_code == 400:
                try:
                    error_data = place_response.json()
                    error_detail = error_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ 400: {error_detail}")
                except:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ 400: {place_response.text}")
            elif place_response.status_code == 500:
                print(f"   ‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ 500")
                try:
                    error_data = place_response.json()
                    print(f"   üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
                except:
                    print(f"   üìù –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {place_response.text}")
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {place_response.status_code}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É –Ω–∏ –≤ –æ–¥–Ω—É –∏–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        return False

    def check_existing_placements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –†–ê–ó–ú–ï–©–ï–ù–ò–ô")
        print("=" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        progress_response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
        
        if progress_response.status_code == 200:
            progress_data = progress_response.json()
            total_units = progress_data.get("total_units", 0)
            placed_units = progress_data.get("placed_units", 0)
            
            print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}")
            print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_units}")
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_data.get('progress_percentage', 0):.1f}%")
            
            if placed_units > 0:
                print(f"‚úÖ –í —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã ({placed_units})")
                print("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {progress_response.status_code}")
            return False

    def run_simple_test(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("üéØ –ù–ê–ß–ê–õ–û –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        has_existing_placements = self.check_existing_placements()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        placement_success = self.test_placement_with_valid_positions()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        if placement_success:
            print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ò–°–ü–†–ê–í–õ–ï–ù!")
            print("   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É placement_records –∏ individual_items —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   üìã individual_items.is_placed –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
            print("   üéØ –ó–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –º–µ–∂–¥—É —Å–ø–∏—Å–∫–∞–º–∏")
            print("   üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif has_existing_placements:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•:")
            print("   ‚úÖ –í —Å–∏—Å—Ç–µ–º–µ –µ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
            print("   üîç –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ–∑–∏—Ü–∏–π –∏–ª–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç—å—é —è—á–µ–µ–∫")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù!")
            print("   ‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   ‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("   üö® –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê!")
        
        return placement_success or has_existing_placements

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SimpleSyncTester()
    success = tester.run_simple_test()
    
    if success:
        print("\nüéØ –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        return 0
    else:
        print("\n‚ùå –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        return 1

if __name__ == "__main__":
    exit(main())