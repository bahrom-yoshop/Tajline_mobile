#!/usr/bin/env python3
"""
Backend Test for TAJLINE.TJ Placement Statistics Improvements
Testing the enhanced placement statistics system according to review request.

–£–õ–£–ß–®–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–ê –í TAJLINE.TJ:

–†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: –∑–∞ —Å–µ—Å—Å–∏—é, –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –æ—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å
- –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
- –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ì—Ä—É–∑ ‚Ññ 000000/01 - –ë1-–ü1-–Ø1" —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –£–±—Ä–∞–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∑–∞–º–µ–Ω–µ–Ω–∞ –ø–æ–ª–µ–∑–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
- –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
- API –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É today_placements
- –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –î–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å cargo_number –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

TEST PLAN:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ API /api/operator/placement-statistics –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
3. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import requests
import json
import sys
import os
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-ops.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementStatisticsTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        
    def log(self, message, level="INFO"):
        """Log message with timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """Authenticate warehouse operator"""
        self.log("üîê Authenticating warehouse operator...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                # Set authorization header
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ Successfully authenticated warehouse operator: {self.operator_info.get('full_name', 'Unknown')}")
                self.log(f"   User Number: {self.operator_info.get('user_number', 'N/A')}")
                self.log(f"   Role: {self.operator_info.get('role', 'N/A')}")
                return True
            else:
                self.log(f"‚ùå Authentication failed: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Authentication error: {str(e)}", "ERROR")
            return False
    
    def test_placement_statistics_api(self):
        """Test the placement statistics API endpoint"""
        self.log("üìä Testing placement statistics API...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/placement-statistics",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log("‚úÖ Placement statistics API is accessible")
                
                # Check required fields for improved interface
                required_fields = ['today_placements', 'session_placements', 'recent_placements']
                missing_fields = []
                
                for field in required_fields:
                    if field not in data:
                        missing_fields.append(field)
                
                if missing_fields:
                    self.log(f"‚ö†Ô∏è Missing required fields: {missing_fields}", "WARNING")
                else:
                    self.log("‚úÖ All required statistics fields are present")
                
                # Display statistics data
                self.log(f"   Today placements: {data.get('today_placements', 'N/A')}")
                self.log(f"   Session placements: {data.get('session_placements', 'N/A')}")
                self.log(f"   Recent placements count: {len(data.get('recent_placements', []))}")
                
                # Check recent placements format
                recent_placements = data.get('recent_placements', [])
                if recent_placements:
                    self.log("üìã Recent placements format check:")
                    for i, placement in enumerate(recent_placements[:3]):  # Check first 3
                        cargo_number = placement.get('cargo_number', 'N/A')
                        location = placement.get('location_code', 'N/A')
                        placed_at = placement.get('placed_at', 'N/A')
                        self.log(f"   {i+1}. –ì—Ä—É–∑ ‚Ññ {cargo_number} - {location} ({placed_at})")
                
                return True, data
            else:
                self.log(f"‚ùå Placement statistics API failed: {response.status_code} - {response.text}", "ERROR")
                return False, None
                
        except Exception as e:
            self.log(f"‚ùå Placement statistics API error: {str(e)}", "ERROR")
            return False, None
    
    def test_available_cargo_for_placement(self):
        """Test available cargo for placement to calculate percentages"""
        self.log("üì¶ Testing available cargo for placement...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # Check if it's paginated response
                if 'items' in data:
                    cargo_list = data['items']
                    total_count = data.get('total_count', len(cargo_list))
                    self.log(f"‚úÖ Available cargo API accessible (paginated)")
                    self.log(f"   Total available cargo: {total_count}")
                    self.log(f"   Current page items: {len(cargo_list)}")
                else:
                    cargo_list = data if isinstance(data, list) else []
                    total_count = len(cargo_list)
                    self.log(f"‚úÖ Available cargo API accessible (simple list)")
                    self.log(f"   Total available cargo: {total_count}")
                
                # Check cargo data structure for display requirements
                if cargo_list:
                    sample_cargo = cargo_list[0]
                    required_fields = ['cargo_number', 'id']
                    missing_fields = []
                    
                    for field in required_fields:
                        if field not in sample_cargo:
                            missing_fields.append(field)
                    
                    if missing_fields:
                        self.log(f"‚ö†Ô∏è Sample cargo missing fields: {missing_fields}", "WARNING")
                    else:
                        self.log("‚úÖ Cargo data contains required fields for display")
                        self.log(f"   Sample cargo number: {sample_cargo.get('cargo_number', 'N/A')}")
                        self.log(f"   Sample cargo ID: {sample_cargo.get('id', 'N/A')}")
                
                return True, total_count, cargo_list
            else:
                self.log(f"‚ùå Available cargo API failed: {response.status_code} - {response.text}", "ERROR")
                return False, 0, []
                
        except Exception as e:
            self.log(f"‚ùå Available cargo API error: {str(e)}", "ERROR")
            return False, 0, []
    
    def test_percentage_calculation_readiness(self, statistics_data, total_available_cargo):
        """Test if system is ready for percentage calculations"""
        self.log("üßÆ Testing percentage calculation readiness...")
        
        try:
            today_placements = statistics_data.get('today_placements', 0)
            session_placements = statistics_data.get('session_placements', 0)
            
            # Calculate percentages for session (if there are any placements)
            if session_placements > 0 and total_available_cargo > 0:
                session_percentage = (session_placements / (session_placements + total_available_cargo)) * 100
                self.log(f"‚úÖ Session completion percentage: {session_percentage:.1f}%")
                self.log(f"   ({session_placements} placed / {session_placements + total_available_cargo} total)")
            else:
                self.log("‚ÑπÔ∏è No placements in current session for percentage calculation")
            
            # Check remaining to place calculation
            remaining_to_place = total_available_cargo
            self.log(f"‚úÖ Remaining to place: {remaining_to_place}")
            
            # Verify data structure for improved interface
            interface_ready = True
            
            if not isinstance(today_placements, int):
                self.log("‚ö†Ô∏è today_placements is not integer", "WARNING")
                interface_ready = False
            
            if not isinstance(session_placements, int):
                self.log("‚ö†Ô∏è session_placements is not integer", "WARNING")
                interface_ready = False
            
            if not isinstance(statistics_data.get('recent_placements', []), list):
                self.log("‚ö†Ô∏è recent_placements is not list", "WARNING")
                interface_ready = False
            
            if interface_ready:
                self.log("‚úÖ All data types are correct for improved interface")
            
            return interface_ready
            
        except Exception as e:
            self.log(f"‚ùå Percentage calculation test error: {str(e)}", "ERROR")
            return False
    
    def test_cargo_number_format_compatibility(self, cargo_list):
        """Test cargo number formats for display compatibility"""
        self.log("üî¢ Testing cargo number format compatibility...")
        
        try:
            if not cargo_list:
                self.log("‚ö†Ô∏è No cargo available for format testing", "WARNING")
                return True
            
            format_stats = {
                'new_format': 0,  # 2501XXXXXX
                'old_format': 0,  # 100XXX/XX
                'other_format': 0
            }
            
            for cargo in cargo_list[:10]:  # Check first 10 cargo
                cargo_number = cargo.get('cargo_number', '')
                
                if cargo_number.startswith('2501') and len(cargo_number) >= 6:
                    format_stats['new_format'] += 1
                elif '/' in cargo_number and cargo_number.startswith('100'):
                    format_stats['old_format'] += 1
                else:
                    format_stats['other_format'] += 1
            
            self.log(f"‚úÖ Cargo number format analysis:")
            self.log(f"   New format (2501XXXXXX): {format_stats['new_format']}")
            self.log(f"   Old format (100XXX/XX): {format_stats['old_format']}")
            self.log(f"   Other formats: {format_stats['other_format']}")
            
            # All formats should be displayable
            self.log("‚úÖ All cargo number formats are compatible for display")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Cargo number format test error: {str(e)}", "ERROR")
            return False
    
    def run_comprehensive_test(self):
        """Run comprehensive test of placement statistics improvements"""
        self.log("üöÄ Starting comprehensive placement statistics test...")
        self.log("=" * 80)
        
        # Test results tracking
        test_results = {
            'authentication': False,
            'placement_statistics_api': False,
            'available_cargo_api': False,
            'percentage_calculation': False,
            'cargo_format_compatibility': False
        }
        
        # 1. Authenticate warehouse operator
        if self.authenticate_warehouse_operator():
            test_results['authentication'] = True
        else:
            self.log("‚ùå Cannot proceed without authentication", "ERROR")
            return self.generate_final_report(test_results)
        
        # 2. Test placement statistics API
        stats_success, statistics_data = self.test_placement_statistics_api()
        test_results['placement_statistics_api'] = stats_success
        
        # 3. Test available cargo API
        cargo_success, total_cargo, cargo_list = self.test_available_cargo_for_placement()
        test_results['available_cargo_api'] = cargo_success
        
        # 4. Test percentage calculation readiness
        if stats_success and cargo_success and statistics_data:
            percentage_ready = self.test_percentage_calculation_readiness(statistics_data, total_cargo)
            test_results['percentage_calculation'] = percentage_ready
        
        # 5. Test cargo number format compatibility
        if cargo_success and cargo_list:
            format_compatible = self.test_cargo_number_format_compatibility(cargo_list)
            test_results['cargo_format_compatibility'] = format_compatible
        
        return self.generate_final_report(test_results, statistics_data if stats_success else None, total_cargo if cargo_success else 0)
    
    def generate_final_report(self, test_results, statistics_data=None, total_cargo=0):
        """Generate final test report"""
        self.log("=" * 80)
        self.log("üìã FINAL TEST REPORT - PLACEMENT STATISTICS IMPROVEMENTS")
        self.log("=" * 80)
        
        # Calculate success rate
        passed_tests = sum(1 for result in test_results.values() if result)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        self.log(f"üéØ SUCCESS RATE: {success_rate:.1f}% ({passed_tests}/{total_tests} tests passed)")
        self.log("")
        
        # Detailed results
        self.log("üìä DETAILED TEST RESULTS:")
        test_names = {
            'authentication': 'Warehouse Operator Authentication (+79777888999/warehouse123)',
            'placement_statistics_api': 'Placement Statistics API (/api/operator/placement-statistics)',
            'available_cargo_api': 'Available Cargo API (/api/operator/cargo/available-for-placement)',
            'percentage_calculation': 'Percentage Calculation Readiness',
            'cargo_format_compatibility': 'Cargo Number Format Compatibility'
        }
        
        for key, result in test_results.items():
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            self.log(f"   {status}: {test_names[key]}")
        
        self.log("")
        
        # Summary of improvements readiness
        if statistics_data:
            self.log("üéâ –£–õ–£–ß–®–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–û–¢–û–í–´:")
            self.log(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {statistics_data.get('today_placements', 0)} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π")
            self.log(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ—Å—Å–∏—é: {statistics_data.get('session_placements', 0)} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π")
            self.log(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {total_cargo} –≥—Ä—É–∑–æ–≤")
            self.log(f"   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(statistics_data.get('recent_placements', []))} –∑–∞–ø–∏—Å–µ–π")
        
        # Critical checks status
        self.log("")
        self.log("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        
        critical_checks = [
            ("API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É today_placements", test_results['placement_statistics_api']),
            ("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", test_results['percentage_calculation']),
            ("–î–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç cargo_number –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", test_results['cargo_format_compatibility']),
            ("Backend –≥–æ—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", all(test_results.values()))
        ]
        
        for check_name, check_result in critical_checks:
            status = "‚úÖ –í–´–ü–û–õ–ù–ï–ù–û" if check_result else "‚ùå –ù–ï –í–´–ü–û–õ–ù–ï–ù–û"
            self.log(f"   {status}: {check_name}")
        
        self.log("")
        
        # Final verdict
        if success_rate >= 80:
            self.log("üéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend –≥–æ—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
        elif success_rate >= 60:
            self.log("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–æ, –Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: Backend –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        
        return success_rate >= 80

def main():
    """Main test execution"""
    print("üè≠ TAJLINE.TJ Placement Statistics Improvements Backend Test")
    print("=" * 80)
    
    tester = PlacementStatisticsTester()
    success = tester.run_comprehensive_test()
    
    # Exit with appropriate code
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()