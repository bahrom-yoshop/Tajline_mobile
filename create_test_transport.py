#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cargo-to-transport
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

def authenticate():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    session = requests.Session()
    
    response = session.post(f"{API_BASE}/auth/login", json={
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    })
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        session.headers.update({
            "Authorization": f"Bearer {auth_token}"
        })
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return session
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return None

def create_test_transport(session):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
    
    transport_data = {
        "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
        "driver_phone": "+79999999999",
        "transport_number": "001–ê–ê01",
        "capacity_kg": 5000.0,
        "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
    }
    
    try:
        response = session.post(f"{API_BASE}/transport/create", json=transport_data)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {data.get('transport_number')} (ID: {data.get('id')})")
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return None

def set_transport_available(session, transport_id):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∫–∞–∫ available"""
    print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ 'available' –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {transport_id}...")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API (–µ—Å–ª–∏ –µ—Å—Ç—å)
    # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º available –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        response = session.get(f"{API_BASE}/transport/{transport_id}")
        if response.status_code == 200:
            data = response.json()
            current_status = data.get("status", "unknown")
            print(f"üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {current_status}")
            
            if current_status == "available":
                print("‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'available'")
                return True
            else:
                print(f"‚ö†Ô∏è –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{current_status}', –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ")
                return True  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    print("üöõ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –¢–†–ê–ù–°–ü–û–†–¢–ê –î–õ–Ø CARGO-TO-TRANSPORT")
    print("=" * 60)
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    session = authenticate()
    if not session:
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    transport = create_test_transport(session)
    
    if transport:
        transport_id = transport.get("id")
        if transport_id:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å available
            set_transport_available(session, transport_id)
            
            print(f"\n‚úÖ –¢–ï–°–¢–û–í–´–ô –¢–†–ê–ù–°–ü–û–†–¢ –ì–û–¢–û–í:")
            print(f"   ID: {transport_id}")
            print(f"   –ù–æ–º–µ—Ä: {transport.get('transport_number')}")
            print(f"   –í–æ–¥–∏—Ç–µ–ª—å: {transport.get('driver_name')}")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {transport.get('direction')}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")

if __name__ == "__main__":
    main()