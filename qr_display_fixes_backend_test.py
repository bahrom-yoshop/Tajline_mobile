#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ò–§–†–û–í–û–ì–û QR –ö–û–î–ê –ò REACT –û–®–ò–ë–ö–ò –í TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
- –ü–æ–ª–µ –≤–≤–æ–¥–∞ —è—á–µ–π–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ QR (03010101) –≤–º–µ—Å—Ç–æ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–ë1-–ü1-–Ø1)
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ React –æ—à–∏–±–∫–∞ "Objects are not valid as a React child" –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handlePlaceCargo
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–∞ response –æ—Ç API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞
- –£–ª—É—á—à–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê:
- API /api/operator/cargo/place –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ warehouse_name, location_code
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É—Å–ø–µ—Ö–∞
- –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç –≥–¥–µ –æ–±—ä–µ–∫—Ç—ã —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ React

–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–ù:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API /api/operator/cargo/place –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: warehouse_name, location_code, cargo_number, placed_at

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.
"""

import requests
import json
import sys
from datetime import datetime
from typing import Dict, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-system.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRDisplayFixesTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_info = None
        self.test_results = []
        
    def log_result(self, test_name, success, message, details=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ ({WAREHOUSE_OPERATOR['phone']})...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user", {})
                
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    
                    operator_name = self.operator_info.get('full_name', 'Unknown')
                    operator_role = self.operator_info.get('role', 'Unknown')
                    operator_number = self.operator_info.get('user_number', 'Unknown')
                    
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {operator_name} (—Ä–æ–ª—å: {operator_role}, –Ω–æ–º–µ—Ä: {operator_number})",
                        {
                            "operator_name": operator_name,
                            "operator_role": operator_role,
                            "operator_number": operator_number,
                            "token_received": True
                        }
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"Exception: {str(e)}")
            return False
    
    def get_available_cargo_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print(f"\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                total_count = data.get("total_count", len(items))
                
                if items:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞
                    sample_cargo = items[0]
                    required_fields = ["id", "cargo_number", "processing_status", "weight", "sender_full_name", "recipient_full_name"]
                    missing_fields = [field for field in required_fields if field not in sample_cargo]
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤—Å–µ–≥–æ: {total_count})",
                        {
                            "cargo_count": len(items),
                            "total_count": total_count,
                            "sample_cargo": sample_cargo,
                            "missing_fields": missing_fields,
                            "structure_valid": len(missing_fields) == 0
                        }
                    )
                    return items
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {"response_data": data}
                    )
                    return []
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"Exception: {str(e)}")
            return []
    
    def test_cargo_placement_api_structure(self, cargo_items):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/operator/cargo/place –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞"""
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API /api/operator/cargo/place...")
        
        if not cargo_items:
            self.log_result(
                "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                False,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
            )
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cargo = cargo_items[0]
        cargo_id = test_cargo.get("id")
        cargo_number = test_cargo.get("cargo_number")
        
        print(f"   üì¶ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {cargo_number} (ID: {cargo_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ warehouse_id
        try:
            warehouses_response = self.session.get(f"{BACKEND_URL}/operator/warehouses", timeout=30)
            
            if warehouses_response.status_code != 200:
                self.log_result(
                    "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            warehouses = warehouses_response.json()
            if not warehouses:
                self.log_result(
                    "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    False,
                    "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥
            test_warehouse = warehouses[0]
            warehouse_id = test_warehouse.get("id")
            warehouse_name = test_warehouse.get("name")
            
            print(f"   üè≠ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥: {warehouse_name} (ID: {warehouse_id})")
            
        except Exception as e:
            self.log_result(
                "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {str(e)}"
            )
            return False
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞
        placement_data = {
            "cargo_id": cargo_id,
            "warehouse_id": warehouse_id,
            "block_number": 1,
            "shelf_number": 1,
            "cell_number": 1
        }
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                required_fields = ["warehouse_name", "location_code", "cargo_number", "placed_at"]
                present_fields = []
                missing_fields = []
                
                for field in required_fields:
                    if field in data:
                        present_fields.append(field)
                    else:
                        missing_fields.append(field)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–ª—è
                additional_fields = ["message", "success", "cargo_id", "warehouse_id", "operator_name"]
                additional_present = [field for field in additional_fields if field in data]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
                field_types = {}
                for field in present_fields:
                    field_types[field] = type(data[field]).__name__
                
                success = len(missing_fields) == 0
                
                self.log_result(
                    "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                    success,
                    f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ {'—É—Å–ø–µ—à–Ω–æ' if success else '—Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏'}: {len(present_fields)}/{len(required_fields)} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π",
                    {
                        "cargo_number": cargo_number,
                        "warehouse_name": warehouse_name,
                        "required_fields": required_fields,
                        "present_fields": present_fields,
                        "missing_fields": missing_fields,
                        "additional_fields": additional_present,
                        "field_types": field_types,
                        "full_response": data,
                        "response_structure_valid": success
                    }
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if success:
                    print(f"   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–Ø –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢:")
                    print(f"      - warehouse_name: '{data.get('warehouse_name')}' ({type(data.get('warehouse_name')).__name__})")
                    print(f"      - location_code: '{data.get('location_code')}' ({type(data.get('location_code')).__name__})")
                    print(f"      - cargo_number: '{data.get('cargo_number')}' ({type(data.get('cargo_number')).__name__})")
                    print(f"      - placed_at: '{data.get('placed_at')}' ({type(data.get('placed_at')).__name__})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏ (—á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ React –æ—à–∏–±–∫—É)
                    object_fields = []
                    for field in required_fields:
                        if isinstance(data.get(field), (dict, list)):
                            object_fields.append(field)
                    
                    if object_fields:
                        print(f"   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–±—ä–µ–∫—Ç—ã (–º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å React –æ—à–∏–±–∫—É): {object_fields}")
                    else:
                        print(f"   ‚úÖ –í—Å–µ –ø–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã (—Å—Ç—Ä–æ–∫–∏/—á–∏—Å–ª–∞) - React –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
                
                return success
                
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                error_message = response.text
                if "already occupied" in error_message.lower():
                    # –Ø—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é —è—á–µ–π–∫—É
                    print(f"   ‚ö†Ô∏è  –Ø—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é...")
                    
                    for cell_num in range(2, 6):  # –ü—Ä–æ–±—É–µ–º —è—á–µ–π–∫–∏ 2-5
                        placement_data["cell_number"] = cell_num
                        retry_response = self.session.post(
                            f"{BACKEND_URL}/operator/cargo/place",
                            json=placement_data,
                            timeout=30
                        )
                        
                        if retry_response.status_code == 200:
                            data = retry_response.json()
                            required_fields = ["warehouse_name", "location_code", "cargo_number", "placed_at"]
                            missing_fields = [field for field in required_fields if field not in data]
                            success = len(missing_fields) == 0
                            
                            self.log_result(
                                "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                                success,
                                f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ —è—á–µ–π–∫—É {cell_num} —É—Å–ø–µ—à–Ω–æ: {len(required_fields) - len(missing_fields)}/{len(required_fields)} –ø–æ–ª–µ–π",
                                {
                                    "cell_number": cell_num,
                                    "required_fields": required_fields,
                                    "missing_fields": missing_fields,
                                    "full_response": data
                                }
                            )
                            return success
                    
                    # –ï—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∑–∞–Ω—è—Ç—ã
                    self.log_result(
                        "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        "–í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —è—á–µ–π–∫–∏ –∑–∞–Ω—è—Ç—ã, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ"
                    )
                    return False
                else:
                    self.log_result(
                        "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        f"HTTP {response.status_code}: {error_message}"
                    )
                    return False
                
        except Exception as e:
            self.log_result(
                "API /api/operator/cargo/place —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def verify_digital_qr_code_support(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞ (03010101)"""
        print(f"\nüî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ warehouse_number
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                
                if warehouses:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∫–ª–∞–¥—ã –∏–º–µ—é—Ç warehouse_number –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    warehouses_with_numbers = []
                    warehouses_without_numbers = []
                    
                    for warehouse in warehouses:
                        warehouse_number = warehouse.get("warehouse_number")
                        if warehouse_number is not None:
                            warehouses_with_numbers.append({
                                "name": warehouse.get("name"),
                                "id": warehouse.get("id"),
                                "warehouse_number": warehouse_number
                            })
                        else:
                            warehouses_without_numbers.append({
                                "name": warehouse.get("name"),
                                "id": warehouse.get("id")
                            })
                    
                    success = len(warehouses_with_numbers) > 0
                    
                    self.log_result(
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞",
                        success,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(warehouses_with_numbers)} —Å–∫–ª–∞–¥–æ–≤ —Å warehouse_number –∏–∑ {len(warehouses)} –æ–±—â–∏—Ö",
                        {
                            "total_warehouses": len(warehouses),
                            "warehouses_with_numbers": len(warehouses_with_numbers),
                            "warehouses_without_numbers": len(warehouses_without_numbers),
                            "sample_warehouse_numbers": warehouses_with_numbers[:3],
                            "digital_qr_ready": success
                        }
                    )
                    
                    if success:
                        print(f"   ‚úÖ –°–∫–ª–∞–¥—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR —Ñ–æ—Ä–º–∞—Ç–∞:")
                        for wh in warehouses_with_numbers[:3]:
                            print(f"      - {wh['name']}: warehouse_number = {wh['warehouse_number']}")
                    
                    return success
                else:
                    self.log_result(
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞",
                        False,
                        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    )
                    return False
            else:
                self.log_result(
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR –∫–æ–¥–∞",
                False,
                f"Exception: {str(e)}"
            )
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ò–§–†–û–í–û–ì–û QR –ö–û–î–ê –ò REACT –û–®–ò–ë–ö–ò –í TAJLINE.TJ")
        print("=" * 120)
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        available_cargo = self.get_available_cargo_for_placement()
        
        # –¢–µ—Å—Ç 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞
        placement_api_success = self.test_cargo_placement_api_structure(available_cargo)
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR —Ñ–æ—Ä–º–∞—Ç–∞
        digital_qr_support = self.verify_digital_qr_code_support()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("=" * 120)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"   {status} {result['test']}: {result['message']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        if placement_api_success:
            print("   ‚úÖ API /api/operator/cargo/place –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞")
            print("   ‚úÖ –ü–æ–ª—è warehouse_name, location_code, cargo_number, placed_at –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print("   ‚úÖ React –æ—à–∏–±–∫–∞ 'Objects are not valid as a React child' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            print("   ‚ùå API /api/operator/cargo/place –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–∞")
            print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        if digital_qr_support:
            print("   ‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR –∫–æ–¥–∞ (warehouse_number –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
        else:
            print("   ‚ùå Backend –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ QR —Ñ–æ—Ä–º–∞—Ç–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç warehouse_number)")
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 75.0:
            print(f"\nüéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢!")
            print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            print("‚úÖ API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è React –æ—à–∏–±–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –Ω–∞ backend —É—Ä–æ–≤–Ω–µ")
            return True
        else:
            print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!")
            print("‚ùå Backend –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = QRDisplayFixesTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        sys.exit(1)

if __name__ == "__main__":
    main()