#!/usr/bin/env python3
"""
Final comprehensive test for courier +992936999880 with correct password baha3337
Tests authentication and GPS functionality for TAJLINE.TJ system
"""

import requests
import sys
import json
from datetime import datetime

class FinalCourierTest:
    def __init__(self, base_url="https://cargo-sync.preview.emergentagent.com"):
        self.base_url = base_url
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üöö FINAL Courier +992936999880 Test (Correct Password)")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 60)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data=None, token=None, params=None):
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_courier_complete_functionality(self):
        """Complete test of courier +992936999880 with correct password baha3337"""
        print("\nüáπüáØ COMPLETE COURIER +992936999880 FUNCTIONALITY TEST")
        print("   üéØ –¶–ï–õ–¨: –û–±–µ—Å–ø–µ—á–∏—Ç—å —á—Ç–æ –∫—É—Ä—å–µ—Ä +992936999880 –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPS –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏")
        print("   üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: baha3337")
        
        all_success = True
        
        # Test 1: Courier Authentication with correct password
        print("\n   üîê Test 1: COURIER AUTHENTICATION (+992936999880/baha3337)...")
        
        courier_login_data = {
            "phone": "+992936999880",
            "password": "baha3337"
        }
        
        success, login_response = self.run_test(
            "Courier Login with Correct Password (+992936999880/baha3337)",
            "POST",
            "/api/auth/login",
            200,
            courier_login_data
        )
        
        courier_token = None
        if success and 'access_token' in login_response:
            courier_token = login_response['access_token']
            courier_user = login_response.get('user', {})
            courier_role = courier_user.get('role')
            courier_name = courier_user.get('full_name')
            courier_phone = courier_user.get('phone')
            courier_user_number = courier_user.get('user_number')
            
            print("   ‚úÖ COURIER LOGIN SUCCESSFUL!")
            print(f"   üë§ Name: {courier_name}")
            print(f"   üìû Phone: {courier_phone}")
            print(f"   üëë Role: {courier_role}")
            print(f"   üÜî User Number: {courier_user_number}")
            print(f"   üîë JWT Token: {courier_token[:50]}...")
            
            # Verify role
            if courier_role == 'courier':
                print("   ‚úÖ Role correctly set to 'courier'")
            else:
                print(f"   ‚ö†Ô∏è  Role is '{courier_role}', expected 'courier'")
                # Don't fail completely as user can still use GPS
            
            all_success &= success
        else:
            print("   ‚ùå COURIER LOGIN FAILED")
            print(f"   üìÑ Response: {login_response}")
            all_success = False
            return False
        
        # Test 2: GPS Location Update - Status: online (–í —Å–µ—Ç–∏, —Å–≤–æ–±–æ–¥–µ–Ω)
        if courier_token:
            print("\n   üìç Test 2: GPS LOCATION UPDATE - STATUS: ONLINE (–í —Å–µ—Ç–∏, —Å–≤–æ–±–æ–¥–µ–Ω)...")
            
            gps_data_online = {
                "latitude": 38.5598,  # –î—É—à–∞–Ω–±–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                "longitude": 68.7870,
                "status": "online",  # –í —Å–µ—Ç–∏, —Å–≤–æ–±–æ–¥–µ–Ω
                "current_address": "–î—É—à–∞–Ω–±–µ, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω - –¶–µ–Ω—Ç—Ä",
                "accuracy": 8.5,
                "speed": 0.0,  # –°—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
                "heading": 0.0
            }
            
            success, gps_response = self.run_test(
                "GPS Update - Status: online (–í —Å–µ—Ç–∏, —Å–≤–æ–±–æ–¥–µ–Ω)",
                "POST",
                "/api/courier/location/update",
                200,
                gps_data_online,
                courier_token
            )
            
            if success:
                print("   ‚úÖ GPS UPDATE SUCCESSFUL!")
                location_id = gps_response.get('location_id')
                print(f"   üìç Location ID: {location_id}")
                print(f"   üåç Coordinates: {gps_data_online['latitude']}, {gps_data_online['longitude']}")
                print(f"   üìä Status: {gps_data_online['status']} (–í —Å–µ—Ç–∏, —Å–≤–æ–±–æ–¥–µ–Ω)")
                print(f"   üìç Address: {gps_data_online['current_address']}")
                print(f"   üéØ Accuracy: {gps_data_online['accuracy']} meters")
                
                all_success &= success
            else:
                print("   ‚ùå GPS UPDATE FAILED")
                all_success = False
        
        # Test 3: GPS Location Update - Status: on_route (–ï–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É)
        if courier_token:
            print("\n   üöó Test 3: GPS LOCATION UPDATE - STATUS: ON_ROUTE (–ï–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É)...")
            
            gps_data_on_route = {
                "latitude": 38.5650,  # –ù–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–≤–∏–∂–µ–Ω–∏–µ)
                "longitude": 68.7900,
                "status": "on_route",  # –ï–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É
                "current_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏ - –¥–≤–∏–∂–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç—É",
                "accuracy": 12.0,
                "speed": 35.5,  # –°–∫–æ—Ä–æ—Å—Ç—å 35.5 –∫–º/—á
                "heading": 45.0  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫
            }
            
            success, gps_response = self.run_test(
                "GPS Update - Status: on_route (–ï–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É)",
                "POST",
                "/api/courier/location/update",
                200,
                gps_data_on_route,
                courier_token
            )
            
            if success:
                print("   ‚úÖ GPS UPDATE SUCCESSFUL!")
                location_id = gps_response.get('location_id')
                print(f"   üìç Location ID: {location_id}")
                print(f"   üåç Coordinates: {gps_data_on_route['latitude']}, {gps_data_on_route['longitude']}")
                print(f"   üìä Status: {gps_data_on_route['status']} (–ï–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É)")
                print(f"   üìç Address: {gps_data_on_route['current_address']}")
                print(f"   üöó Speed: {gps_data_on_route['speed']} –∫–º/—á")
                print(f"   üß≠ Heading: {gps_data_on_route['heading']}¬∞ (—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫)")
                
                all_success &= success
            else:
                print("   ‚ùå GPS UPDATE FAILED")
                all_success = False
        
        # Test 4: GPS Location Update - Status: at_pickup (–ù–∞ –º–µ—Å—Ç–µ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞)
        if courier_token:
            print("\n   üì¶ Test 4: GPS LOCATION UPDATE - STATUS: AT_PICKUP (–ù–∞ –º–µ—Å—Ç–µ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞)...")
            
            gps_data_at_pickup = {
                "latitude": 38.5720,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –∑–∞–±–æ—Ä–∞
                "longitude": 68.7950,
                "status": "at_pickup",  # –ù–∞ –º–µ—Å—Ç–µ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞
                "current_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ò—Å–º–æ–∏–ª–∏ –°–æ–º–æ–Ω–∏, 24 - –º–µ—Å—Ç–æ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞",
                "accuracy": 5.0,  # –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –º–µ—Å—Ç–µ
                "speed": 0.0,  # –°—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
                "heading": 0.0
            }
            
            success, gps_response = self.run_test(
                "GPS Update - Status: at_pickup (–ù–∞ –º–µ—Å—Ç–µ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞)",
                "POST",
                "/api/courier/location/update",
                200,
                gps_data_at_pickup,
                courier_token
            )
            
            if success:
                print("   ‚úÖ GPS UPDATE SUCCESSFUL!")
                location_id = gps_response.get('location_id')
                print(f"   üìç Location ID: {location_id}")
                print(f"   üåç Coordinates: {gps_data_at_pickup['latitude']}, {gps_data_at_pickup['longitude']}")
                print(f"   üìä Status: {gps_data_at_pickup['status']} (–ù–∞ –º–µ—Å—Ç–µ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞)")
                print(f"   üìç Address: {gps_data_at_pickup['current_address']}")
                print(f"   üéØ Accuracy: {gps_data_at_pickup['accuracy']} meters (–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)")
                
                all_success &= success
            else:
                print("   ‚ùå GPS UPDATE FAILED")
                all_success = False
        
        # Test 5: GPS Location Update - Status: at_delivery (–ù–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏)
        if courier_token:
            print("\n   üè† Test 5: GPS LOCATION UPDATE - STATUS: AT_DELIVERY (–ù–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏)...")
            
            gps_data_at_delivery = {
                "latitude": 38.5800,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                "longitude": 68.8000,
                "status": "at_delivery",  # –ù–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏
                "current_address": "–î—É—à–∞–Ω–±–µ, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω –°–æ–º–æ–Ω–∏, –¥–æ–º 15 - –º–µ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏",
                "accuracy": 3.0,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
                "speed": 0.0,  # –°—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
                "heading": 0.0
            }
            
            success, gps_response = self.run_test(
                "GPS Update - Status: at_delivery (–ù–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏)",
                "POST",
                "/api/courier/location/update",
                200,
                gps_data_at_delivery,
                courier_token
            )
            
            if success:
                print("   ‚úÖ GPS UPDATE SUCCESSFUL!")
                location_id = gps_response.get('location_id')
                print(f"   üìç Location ID: {location_id}")
                print(f"   üåç Coordinates: {gps_data_at_delivery['latitude']}, {gps_data_at_delivery['longitude']}")
                print(f"   üìä Status: {gps_data_at_delivery['status']} (–ù–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏)")
                print(f"   üìç Address: {gps_data_at_delivery['current_address']}")
                print(f"   üéØ Accuracy: {gps_data_at_delivery['accuracy']} meters (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å)")
                
                all_success &= success
            else:
                print("   ‚ùå GPS UPDATE FAILED")
                all_success = False
        
        # Test 6: Check Current GPS Status
        if courier_token:
            print("\n   üìä Test 6: CHECK CURRENT GPS STATUS...")
            
            success, status_response = self.run_test(
                "Check Current Courier GPS Status",
                "GET",
                "/api/courier/location/status",
                200,
                token=courier_token
            )
            
            if success:
                print("   ‚úÖ GPS STATUS CHECK SUCCESSFUL!")
                tracking_enabled = status_response.get('tracking_enabled')
                current_status = status_response.get('current_status')
                current_address = status_response.get('current_address')
                last_update = status_response.get('last_update')
                
                print(f"   üõ∞Ô∏è Tracking Enabled: {tracking_enabled}")
                print(f"   üìä Current Status: {current_status}")
                print(f"   üìç Current Address: {current_address}")
                print(f"   ‚è∞ Last Update: {last_update}")
                
                # Verify tracking is enabled
                if tracking_enabled:
                    print("   ‚úÖ GPS tracking is enabled for courier")
                else:
                    print("   ‚ö†Ô∏è  GPS tracking is not enabled")
                
                # Verify status matches last update (should be at_delivery)
                if current_status == 'at_delivery':
                    print("   ‚úÖ Status correctly shows 'at_delivery' (–ù–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏)")
                else:
                    print(f"   ‚ÑπÔ∏è  Current status: {current_status}")
                
                all_success &= success
            else:
                print("   ‚ùå GPS STATUS CHECK FAILED")
                all_success = False
        
        # Test 7: Admin View Courier GPS Data
        print("\n   üëë Test 7: ADMIN VIEW COURIER GPS DATA...")
        
        # First login as admin
        admin_login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        success, admin_login_response = self.run_test(
            "Admin Login",
            "POST",
            "/api/auth/login",
            200,
            admin_login_data
        )
        
        if success and 'access_token' in admin_login_response:
            admin_token = admin_login_response['access_token']
            admin_user = admin_login_response.get('user', {})
            
            print(f"   ‚úÖ Admin login successful: {admin_user.get('full_name')}")
            print(f"   üëë Role: {admin_user.get('role')}")
            
            # Get all courier locations
            success, admin_gps_response = self.run_test(
                "Admin View All Courier GPS Locations",
                "GET",
                "/api/admin/couriers/locations",
                200,
                token=admin_token
            )
            
            if success:
                print("   ‚úÖ ADMIN CAN ACCESS COURIER GPS DATA!")
                
                # Look for our courier
                locations = admin_gps_response if isinstance(admin_gps_response, list) else admin_gps_response.get('locations', [])
                print(f"   üìä Total courier locations: {len(locations)}")
                
                courier_found = False
                for location in locations:
                    if location.get('courier_phone') == '+992936999880':
                        courier_found = True
                        print("   ‚úÖ –ö–£–†–¨–ï–† +992936999880 –ù–ê–ô–î–ï–ù –í GPS –î–ê–ù–ù–´–• –ê–î–ú–ò–ù–ê!")
                        print(f"   üë§ Name: {location.get('courier_name')}")
                        print(f"   üìû Phone: {location.get('courier_phone')}")
                        print(f"   üìä Status: {location.get('status')}")
                        print(f"   üåç Coordinates: {location.get('latitude')}, {location.get('longitude')}")
                        print(f"   üìç Address: {location.get('current_address')}")
                        print(f"   üöó Speed: {location.get('speed', 'N/A')} –∫–º/—á")
                        print(f"   üéØ Accuracy: {location.get('accuracy', 'N/A')} meters")
                        print(f"   ‚è∞ Last Update: {location.get('last_updated')}")
                        break
                
                if not courier_found:
                    print("   ‚ö†Ô∏è  –ö—É—Ä—å–µ—Ä +992936999880 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GPS –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∞")
                    print("   ‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("       - GPS –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å")
                    print("       - –ö—É—Ä—å–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –∫—É—Ä—å–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
                    print("       - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—É")
                
                all_success &= success
            else:
                print("   ‚ùå ADMIN CANNOT ACCESS COURIER GPS DATA")
                all_success = False
        else:
            print("   ‚ùå ADMIN LOGIN FAILED")
            all_success = False
        
        # Test 8: Test GPS Status: busy (–ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏)
        if courier_token:
            print("\n   ‚è≥ Test 8: GPS LOCATION UPDATE - STATUS: BUSY (–ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏)...")
            
            gps_data_busy = {
                "latitude": 38.5598,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ü–µ–Ω—Ç—Ä
                "longitude": 68.7870,
                "status": "busy",  # –ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏
                "current_address": "–î—É—à–∞–Ω–±–µ, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω - –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏",
                "accuracy": 10.0,
                "speed": 0.0,
                "heading": 0.0
            }
            
            success, gps_response = self.run_test(
                "GPS Update - Status: busy (–ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏)",
                "POST",
                "/api/courier/location/update",
                200,
                gps_data_busy,
                courier_token
            )
            
            if success:
                print("   ‚úÖ GPS UPDATE SUCCESSFUL!")
                print(f"   üìä Status: {gps_data_busy['status']} (–ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏)")
                print(f"   üìç Address: {gps_data_busy['current_address']}")
                
                all_success &= success
            else:
                print("   ‚ùå GPS UPDATE FAILED")
                all_success = False
        
        # Test 9: Test GPS Status: offline (–ù–µ –≤ —Å–µ—Ç–∏ / –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ)
        if courier_token:
            print("\n   üì¥ Test 9: GPS LOCATION UPDATE - STATUS: OFFLINE (–ù–µ –≤ —Å–µ—Ç–∏)...")
            
            gps_data_offline = {
                "latitude": 38.5598,
                "longitude": 68.7870,
                "status": "offline",  # –ù–µ –≤ —Å–µ—Ç–∏ / –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ
                "current_address": "–î—É—à–∞–Ω–±–µ, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ",
                "accuracy": 15.0,
                "speed": 0.0,
                "heading": 0.0
            }
            
            success, gps_response = self.run_test(
                "GPS Update - Status: offline (–ù–µ –≤ —Å–µ—Ç–∏)",
                "POST",
                "/api/courier/location/update",
                200,
                gps_data_offline,
                courier_token
            )
            
            if success:
                print("   ‚úÖ GPS UPDATE SUCCESSFUL!")
                print(f"   üìä Status: {gps_data_offline['status']} (–ù–µ –≤ —Å–µ—Ç–∏ / –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ)")
                print(f"   üìç Address: {gps_data_offline['current_address']}")
                
                all_success &= success
            else:
                print("   ‚ùå GPS UPDATE FAILED")
                all_success = False
        
        # Final Status Check
        if courier_token:
            print("\n   üìä Test 10: FINAL GPS STATUS CHECK...")
            
            success, final_status_response = self.run_test(
                "Final GPS Status Check",
                "GET",
                "/api/courier/location/status",
                200,
                token=courier_token
            )
            
            if success:
                print("   ‚úÖ FINAL GPS STATUS CHECK SUCCESSFUL!")
                final_status = final_status_response.get('current_status')
                final_address = final_status_response.get('current_address')
                
                print(f"   üìä Final Status: {final_status}")
                print(f"   üìç Final Address: {final_address}")
                
                if final_status == 'offline':
                    print("   ‚úÖ Status correctly shows 'offline' (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)")
                
                all_success &= success
            else:
                print("   ‚ùå FINAL GPS STATUS CHECK FAILED")
                all_success = False
        
        # Summary
        print("\n   üìä COMPLETE COURIER FUNCTIONALITY TEST SUMMARY:")
        
        if all_success:
            print("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("   ‚úÖ –ö—É—Ä—å–µ—Ä +992936999880 –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ")
            print("   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–∞—Ä–æ–ª–µ–º: baha3337")
            print("   ‚úÖ GPS –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
            print("   ‚úÖ –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫—É—Ä—å–µ—Ä–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
            print("       - online (–í —Å–µ—Ç–∏, —Å–≤–æ–±–æ–¥–µ–Ω) ‚úÖ")
            print("       - on_route (–ï–¥–µ—Ç –∫ –∫–ª–∏–µ–Ω—Ç—É) ‚úÖ")
            print("       - at_pickup (–ù–∞ –º–µ—Å—Ç–µ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞) ‚úÖ")
            print("       - at_delivery (–ù–∞ –º–µ—Å—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏) ‚úÖ")
            print("       - busy (–ó–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –¥–µ–ª–∞–º–∏) ‚úÖ")
            print("       - offline (–ù–µ –≤ —Å–µ—Ç–∏ / –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ) ‚úÖ")
            print("   ‚úÖ –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å GPS –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞")
            print("   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Å–∫–æ—Ä–æ—Å—Ç—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ç–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: –ö—É—Ä—å–µ—Ä +992936999880 –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPS –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏!")
        else:
            print("   ‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            print("   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤—ã—à–µ")
            print("   ‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            print("       - GPS endpoints –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
            print("       - –ö—É—Ä—å–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ")
            print("       - –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏–ª–∏ —Ä–æ–ª—è–º–∏")
        
        return all_success

    def run_all_tests(self):
        """Run all tests"""
        print("üöÄ Starting Final Courier +992936999880 Testing...")
        
        test_result = self.test_courier_complete_functionality()
        
        # Final summary
        print(f"\n{'='*60}")
        print(f"üìä FINAL RESULTS:")
        print(f"   Tests Run: {self.tests_run}")
        print(f"   Tests Passed: {self.tests_passed}")
        print(f"   Success Rate: {(self.tests_passed/self.tests_run*100):.1f}%" if self.tests_run > 0 else "0%")
        
        if test_result:
            print(f"   üéâ SUCCESS: –ö—É—Ä—å–µ—Ä +992936999880 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
            print(f"   ‚úÖ –ú–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPS –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏")
        else:
            print(f"   ‚ùå FAILED: –ü—Ä–æ–±–ª–µ–º—ã —Å –∫—É—Ä—å–µ—Ä–æ–º +992936999880")
            print(f"   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        return test_result

if __name__ == "__main__":
    tester = FinalCourierTest()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)