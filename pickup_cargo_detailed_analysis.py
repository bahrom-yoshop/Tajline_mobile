#!/usr/bin/env python3
"""
–£–ì–õ–£–ë–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó: –ü–æ–∏—Å–∫ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≥—Ä—É–∑—ã –∏ —Å–µ–∫—Ü–∏–µ–π "–ù–∞ –ó–∞–±–æ—Ä"

–ü–æ—Å–∫–æ–ª—å–∫—É –≤ /api/operator/pickup-requests –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫, 
–ø—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:
1. /admin/cargo-requests - –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã
2. /operator/warehouse-notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
3. –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –∑–∞–±–æ—Ä–æ–º
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-ops.preview.emergentagent.com/api"

class PickupCargoDetailedAnalysis:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": "+79777888999",
                "password": "warehouse123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {data.get('user', {}).get('full_name')}")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def analyze_cargo_requests(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã"""
        self.log("üìã –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó–´ (/admin/cargo-requests)")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
            
            if response.status_code == 200:
                cargo_requests = response.json()
                self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã: {len(cargo_requests)}")
                
                if cargo_requests:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    first_request = cargo_requests[0]
                    self.log(f"   üìÑ –ü–æ–ª—è –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –≥—Ä—É–∑: {list(first_request.keys())}")
                    
                    # –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º
                    pickup_fields = []
                    for key in first_request.keys():
                        if 'pickup' in key.lower():
                            pickup_fields.append(key)
                    
                    if pickup_fields:
                        self.log(f"   üéØ –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º: {pickup_fields}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                        for field in pickup_fields:
                            value = first_request.get(field)
                            self.log(f"     - {field}: {value}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
                    statuses = {}
                    for request in cargo_requests:
                        status = request.get('status', 'unknown')
                        statuses[status] = statuses.get(status, 0) + 1
                    
                    self.log(f"   üìä –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫: {statuses}")
                    
                    # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –∑–∞–±–æ—Ä–æ–º
                    pickup_related_requests = []
                    for request in cargo_requests:
                        status = request.get('status', '').lower()
                        if 'pickup' in status or '–∑–∞–±–æ—Ä' in status or status == 'pending':
                            pickup_related_requests.append(request)
                    
                    if pickup_related_requests:
                        self.log(f"   üéØ –ó–∞—è–≤–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º: {len(pickup_related_requests)}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö –∑–∞—è–≤–æ–∫
                        for i, request in enumerate(pickup_related_requests[:3]):
                            self.log(f"     üìÑ –ó–∞—è–≤–∫–∞ #{i+1}:")
                            self.log(f"       - ID: {request.get('id')}")
                            self.log(f"       - –ù–æ–º–µ—Ä: {request.get('request_number')}")
                            self.log(f"       - –°—Ç–∞—Ç—É—Å: {request.get('status')}")
                            self.log(f"       - –ì—Ä—É–∑: {request.get('cargo_name')}")
                            self.log(f"       - –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {request.get('sender_full_name')}")
                    
                    return cargo_requests
                else:
                    self.log("   ‚ö†Ô∏è –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    return []
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞—è–≤–æ–∫: {e}")
            return None
    
    def analyze_warehouse_notifications(self):
        """–ê–Ω–∞–ª–∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞"""
        self.log("üîî –ê–ù–ê–õ–ò–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê (/operator/warehouse-notifications)")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouse-notifications")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
                self.log(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                
                notifications = data.get('notifications', [])
                if notifications:
                    self.log(f"   üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    if notifications:
                        first_notification = notifications[0]
                        self.log(f"   üìÑ –ü–æ–ª—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {list(first_notification.keys())}")
                        
                        # –ò—â–µ–º –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä
                        pickup_fields = []
                        for key in first_notification.keys():
                            if 'pickup' in key.lower() or 'request' in key.lower():
                                pickup_fields.append(key)
                        
                        if pickup_fields:
                            self.log(f"   üéØ –ü–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞—è–≤–∫–∞–º–∏: {pickup_fields}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                            for field in pickup_fields:
                                value = first_notification.get(field)
                                self.log(f"     - {field}: {value}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        notification_types = {}
                        for notif in notifications:
                            notif_type = notif.get('type', 'unknown')
                            notification_types[notif_type] = notification_types.get(notif_type, 0) + 1
                        
                        self.log(f"   üìä –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_types}")
                        
                        # –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º
                        pickup_notifications = []
                        for notif in notifications:
                            message = notif.get('message', '').lower()
                            notif_type = notif.get('type', '').lower()
                            
                            if ('pickup' in message or '–∑–∞–±–æ—Ä' in message or 
                                'pickup' in notif_type or '–∑–∞–±–æ—Ä' in notif_type):
                                pickup_notifications.append(notif)
                        
                        if pickup_notifications:
                            self.log(f"   üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–±–æ—Ä–µ: {len(pickup_notifications)}")
                            
                            for i, notif in enumerate(pickup_notifications[:3]):
                                self.log(f"     üìÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{i+1}:")
                                self.log(f"       - ID: {notif.get('id')}")
                                self.log(f"       - –¢–∏–ø: {notif.get('type')}")
                                self.log(f"       - –°–æ–æ–±—â–µ–Ω–∏–µ: {notif.get('message', '')[:100]}...")
                                
                                # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ ID
                                for key, value in notif.items():
                                    if 'id' in key.lower() and key != 'id':
                                        self.log(f"       - {key}: {value}")
                    
                    return notifications
                else:
                    self.log("   ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    return []
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return None
    
    def search_pickup_related_cargo(self):
        """–ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–±–æ—Ä–æ–º"""
        self.log("üîç –ü–û–ò–°–ö –ì–†–£–ó–û–í –°–í–Ø–ó–ê–ù–ù–´–• –° –ó–ê–ë–û–†–û–ú")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
        cargo_endpoints = [
            "/operator/cargo/available-for-placement",
            "/admin/cargo",
            "/operator/cargo/placed"
        ]
        
        pickup_related_cargo = []
        
        for endpoint in cargo_endpoints:
            try:
                self.log(f"   üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º {endpoint}")
                response = self.session.get(f"{BACKEND_URL}{endpoint}")
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
                    cargo_list = []
                    if isinstance(data, list):
                        cargo_list = data
                    elif isinstance(data, dict):
                        if 'items' in data:
                            cargo_list = data['items']
                        elif 'cargo' in data:
                            cargo_list = data['cargo']
                        else:
                            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                            for value in data.values():
                                if isinstance(value, list) and value:
                                    cargo_list = value
                                    break
                    
                    if cargo_list:
                        self.log(f"     ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {len(cargo_list)}")
                        
                        # –ò—â–µ–º –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –∑–∞–±–æ—Ä–æ–º
                        for cargo in cargo_list:
                            if isinstance(cargo, dict):
                                status = cargo.get('status', '').lower()
                                processing_status = cargo.get('processing_status', '').lower()
                                
                                if ('pickup' in status or '–∑–∞–±–æ—Ä' in status or
                                    'pickup' in processing_status or '–∑–∞–±–æ—Ä' in processing_status):
                                    pickup_related_cargo.append(cargo)
                    else:
                        self.log(f"     ‚ö†Ô∏è –ì—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    self.log(f"     ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                self.log(f"     ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        if pickup_related_cargo:
            self.log(f"   üéØ –ù–ê–ô–î–ï–ù–û –ì–†–£–ó–û–í –°–í–Ø–ó–ê–ù–ù–´–• –° –ó–ê–ë–û–†–û–ú: {len(pickup_related_cargo)}")
            
            for i, cargo in enumerate(pickup_related_cargo[:3]):
                self.log(f"     üì¶ –ì—Ä—É–∑ #{i+1}:")
                self.log(f"       - ID: {cargo.get('id')}")
                self.log(f"       - –ù–æ–º–µ—Ä: {cargo.get('cargo_number')}")
                self.log(f"       - –°—Ç–∞—Ç—É—Å: {cargo.get('status')}")
                self.log(f"       - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {cargo.get('processing_status')}")
        else:
            self.log(f"   ‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–±–æ—Ä–æ–º")
        
        return pickup_related_cargo
    
    def test_deletion_endpoints_with_real_data(self, cargo_requests, notifications):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints —É–¥–∞–ª–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        self.log("üóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINTS –£–î–ê–õ–ï–ù–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
        
        # –°–æ–±–∏—Ä–∞–µ–º ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_ids = {
            'cargo_request_ids': [],
            'notification_ids': [],
            'pickup_request_ids': []
        }
        
        # –ò–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã
        if cargo_requests:
            for request in cargo_requests[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
                if request.get('id'):
                    test_ids['cargo_request_ids'].append(request['id'])
        
        # –ò–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notifications:
            for notif in notifications[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
                if notif.get('id'):
                    test_ids['notification_ids'].append(notif['id'])
                
                # –ò—â–µ–º pickup_request_id –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
                for key, value in notif.items():
                    if 'pickup_request_id' in key.lower() and value:
                        test_ids['pickup_request_ids'].append(value)
        
        self.log(f"   üéØ –î–û–°–¢–£–ü–ù–´–ï ID –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        for key, ids in test_ids.items():
            self.log(f"     - {key}: {len(ids)} —à—Ç. {ids[:2] if ids else '[]'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints
        deletion_endpoints = [
            # –î–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã
            ("DELETE", "/admin/cargo-requests/{id}", "cargo_request_ids"),
            ("DELETE", "/operator/cargo-requests/{id}", "cargo_request_ids"),
            
            # –î–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–º ID)
            ("DELETE", "/admin/pickup-requests/{id}", "pickup_request_ids"),
            ("DELETE", "/operator/pickup-requests/{id}", "pickup_request_ids"),
            
            # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            ("DELETE", "/operator/warehouse-notifications/{id}", "notification_ids"),
            ("DELETE", "/admin/notifications/{id}", "notification_ids"),
        ]
        
        working_endpoints = []
        
        for method, endpoint_template, id_type in deletion_endpoints:
            if not test_ids[id_type]:
                self.log(f"   ‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù {endpoint_template} - –Ω–µ—Ç {id_type}")
                continue
            
            test_id = test_ids[id_type][0]
            endpoint = endpoint_template.format(id=test_id)
            
            try:
                self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: {method} {endpoint}")
                
                if method == "DELETE":
                    # –ù–ï –í–´–ü–û–õ–ù–Ø–ï–ú —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–µ–ª–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º OPTIONS
                    response = self.session.options(f"{BACKEND_URL}{endpoint}")
                    
                    if response.status_code in [200, 204, 405]:  # 405 = Method Not Allowed, –Ω–æ endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        self.log(f"     ‚úÖ ENDPOINT –°–£–©–ï–°–¢–í–£–ï–¢ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                        working_endpoints.append((method, endpoint, response.status_code))
                    elif response.status_code == 404:
                        self.log(f"     ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                    elif response.status_code == 403:
                        self.log(f"     ‚ö†Ô∏è –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
                    else:
                        self.log(f"     ‚ö†Ô∏è –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô –°–¢–ê–¢–£–°: {response.status_code}")
                        
            except Exception as e:
                self.log(f"     ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return working_endpoints
    
    def run_detailed_analysis(self):
        """–ó–∞–ø—É—Å–∫ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –£–ì–õ–£–ë–õ–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –°–í–Ø–ó–ï–ô –ó–ê–Ø–í–û–ö –ò –°–ï–ö–¶–ò–ò '–ù–ê –ó–ê–ë–û–†'")
        self.log("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            return
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã
        cargo_requests = self.analyze_cargo_requests()
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞
        notifications = self.analyze_warehouse_notifications()
        
        # –ü–æ–∏—Å–∫ –≥—Ä—É–∑–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–±–æ—Ä–æ–º
        pickup_cargo = self.search_pickup_related_cargo()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints —É–¥–∞–ª–µ–Ω–∏—è
        working_endpoints = self.test_deletion_endpoints_with_real_data(cargo_requests, notifications)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.log("=" * 80)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –£–ì–õ–£–ë–õ–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        
        self.log(f"   üìã –ù–ê–ô–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
        self.log(f"     - –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã: {len(cargo_requests) if cargo_requests else 0}")
        self.log(f"     - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {len(notifications) if notifications else 0}")
        self.log(f"     - –ì—Ä—É–∑—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ä–æ–º: {len(pickup_cargo) if pickup_cargo else 0}")
        
        self.log(f"   üîß ENDPOINTS:")
        self.log(f"     - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–±–æ—á–∏—Ö: {len(working_endpoints) if working_endpoints else 0}")
        
        if working_endpoints:
            self.log(f"   ‚úÖ –í–û–ó–ú–û–ñ–ù–´–ï –°–ü–û–°–û–ë–´ –£–î–ê–õ–ï–ù–ò–Ø:")
            for method, endpoint, status in working_endpoints:
                self.log(f"     - {method} {endpoint} (—Å—Ç–∞—Ç—É—Å: {status})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log(f"   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if cargo_requests:
            self.log(f"     1. ‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø –ß–ï–†–ï–ó –ó–ê–Ø–í–ö–ò –ù–ê –ì–†–£–ó–´:")
            self.log(f"        - –£–¥–∞–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã —á–µ—Ä–µ–∑ /admin/cargo-requests/{id}")
            self.log(f"        - –≠—Ç–æ –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±—Ä–∞—Ç—å –≥—Ä—É–∑ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
        
        if notifications:
            self.log(f"     2. ‚úÖ –°–¢–†–ê–¢–ï–ì–ò–Ø –ß–ï–†–ï–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
            self.log(f"        - –£–¥–∞–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ /operator/warehouse-notifications/{id}")
            self.log(f"        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏ pickup_request_id –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö")
        
        if not working_endpoints:
            self.log(f"     3. ‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï:")
            self.log(f"        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å backend –∫–æ–¥ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–≤—è–∑–µ–π")
            self.log(f"        - –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
        
        self.log("üèÅ –£–ì–õ–£–ë–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    analysis = PickupCargoDetailedAnalysis()
    analysis.run_detailed_analysis()