#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API placement-status –¥–ª—è –≥–æ—Ä–æ–¥–∞ –Ø–≤–∞–Ω
==============================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –Ø–≤–∞–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3" (ID 003), 
–∞ –Ω–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ —Å –≥–æ—Ä–æ–¥–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –Ø–≤–∞–Ω:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å `delivery_city` - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–Ø–≤–∞–Ω" –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "–Ø–≤–∞–Ω"
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å `target_warehouse_name` - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3" (–ù–ï "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1")
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å `delivery_warehouse` - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3"
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –Ø–≤–∞–Ω
3. –õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –Ø–≤–∞–Ω –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è –∏–∑ "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3" —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞–ø–ø–∏–Ω–≥—É

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è `get_warehouse_by_city()` –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –≤ –ø–æ–ª—è—Ö `served_cities`, `service_area`, `delivery_cities`
- –î–æ–±–∞–≤–ª–µ–Ω –º–∞–ø–ø–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤: –Ø–≤–∞–Ω ‚Üí "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3" (ID 003)
- –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- –î–ª—è –≥–æ—Ä–æ–¥–∞ –Ø–≤–∞–Ω: `target_warehouse_name` = "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3" (—Ä–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –Ø–≤–∞–Ω)
- –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Ç–∏–ø–∞ "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1"
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_CITY = "–Ø–≤–∞–Ω"
EXPECTED_WAREHOUSE_NAME = "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3"
EXPECTED_WAREHOUSE_ID = "003"

class YavanWarehouseMappingTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "applications_found": False,
            "yavan_application_found": False,
            "correct_warehouse_mapping": False,
            "no_virtual_warehouses": False,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_available_applications(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        self.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data if isinstance(data, list) else data.get("items", [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                self.test_results["applications_found"] = len(items) > 0
                return items
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code} - {response.text}", "ERROR")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}", "ERROR")
            return []
    
    def find_yavan_application(self, applications):
        """–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É —Å –≥–æ—Ä–æ–¥–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –Ø–≤–∞–Ω"""
        self.log(f"üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ —Å –≥–æ—Ä–æ–¥–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ '{TARGET_CITY}'...")
        
        yavan_applications = []
        
        for app in applications:
            cargo_id = app.get("id")
            cargo_number = app.get("cargo_number")
            recipient_address = app.get("recipient_address", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ä–æ–¥–∞ –Ø–≤–∞–Ω
            if TARGET_CITY.lower() in recipient_address.lower():
                self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ —Å –Ø–≤–∞–Ω: {cargo_number} (–∞–¥—Ä–µ—Å: {recipient_address})")
                yavan_applications.append({
                    "cargo_id": cargo_id,
                    "cargo_number": cargo_number,
                    "recipient_address": recipient_address
                })
        
        if yavan_applications:
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(yavan_applications)} –∑–∞—è–≤–æ–∫ —Å –≥–æ—Ä–æ–¥–æ–º {TARGET_CITY}")
            self.test_results["yavan_application_found"] = True
            return yavan_applications
        else:
            self.log(f"‚ùå –ó–∞—è–≤–∫–∏ —Å –≥–æ—Ä–æ–¥–æ–º {TARGET_CITY} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "ERROR")
            return []
    
    def test_placement_status_api(self, cargo_id, cargo_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        self.log(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/{cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ API placement-status –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                delivery_city = data.get("delivery_city", "")
                target_warehouse_name = data.get("target_warehouse_name", "")
                delivery_warehouse = data.get("delivery_warehouse", "")
                
                self.log(f"üìç delivery_city: '{delivery_city}'")
                self.log(f"üè¢ target_warehouse_name: '{target_warehouse_name}'")
                self.log(f"üöö delivery_warehouse: '{delivery_warehouse}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
                test_result = {
                    "cargo_number": cargo_number,
                    "delivery_city": delivery_city,
                    "target_warehouse_name": target_warehouse_name,
                    "delivery_warehouse": delivery_warehouse,
                    "tests": {}
                }
                
                # –¢–µ—Å—Ç 1: delivery_city –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å "–Ø–≤–∞–Ω"
                city_test = TARGET_CITY.lower() in delivery_city.lower()
                test_result["tests"]["delivery_city_contains_yavan"] = city_test
                self.log(f"üîç –¢–µ—Å—Ç 1 - delivery_city —Å–æ–¥–µ—Ä–∂–∏—Ç '{TARGET_CITY}': {'‚úÖ –ü–†–û–ô–î–ï–ù' if city_test else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
                
                # –¢–µ—Å—Ç 2: target_warehouse_name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3"
                warehouse_name_test = target_warehouse_name == EXPECTED_WAREHOUSE_NAME
                test_result["tests"]["correct_target_warehouse"] = warehouse_name_test
                self.log(f"üîç –¢–µ—Å—Ç 2 - target_warehouse_name = '{EXPECTED_WAREHOUSE_NAME}': {'‚úÖ –ü–†–û–ô–î–ï–ù' if warehouse_name_test else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
                
                # –¢–µ—Å—Ç 3: delivery_warehouse –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3"
                delivery_warehouse_test = delivery_warehouse == EXPECTED_WAREHOUSE_NAME
                test_result["tests"]["correct_delivery_warehouse"] = delivery_warehouse_test
                self.log(f"üîç –¢–µ—Å—Ç 3 - delivery_warehouse = '{EXPECTED_WAREHOUSE_NAME}': {'‚úÖ –ü–†–û–ô–î–ï–ù' if delivery_warehouse_test else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
                
                # –¢–µ—Å—Ç 4: –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Ç–∏–ø–∞ "–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1"
                virtual_warehouse_test = "–Ø–≤–∞–Ω –°–∫–ª–∞–¥" not in target_warehouse_name and "–Ø–≤–∞–Ω –°–∫–ª–∞–¥" not in delivery_warehouse
                test_result["tests"]["no_virtual_warehouses"] = virtual_warehouse_test
                self.log(f"üîç –¢–µ—Å—Ç 4 - –ù–ï–¢ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ '–Ø–≤–∞–Ω –°–∫–ª–∞–¥': {'‚úÖ –ü–†–û–ô–î–ï–ù' if virtual_warehouse_test else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
                
                # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
                all_tests_passed = all(test_result["tests"].values())
                test_result["overall_success"] = all_tests_passed
                
                self.log(f"üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ {cargo_number}: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_tests_passed else '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
                
                return test_result
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API placement-status: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ placement-status: {e}", "ERROR")
            return None
    
    def verify_real_warehouse_exists(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ '–î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ"""
        self.log(f"üè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞ '{EXPECTED_WAREHOUSE_NAME}'...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
            response = self.session.get(f"{API_BASE}/warehouses/all-cities")
            
            if response.status_code == 200:
                data = response.json()
                warehouses = data.get("warehouses", [])
                
                # –ò—â–µ–º —Å–∫–ª–∞–¥ —Å –Ω—É–∂–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                target_warehouse = None
                for warehouse in warehouses:
                    if warehouse.get("name") == EXPECTED_WAREHOUSE_NAME:
                        target_warehouse = warehouse
                        break
                
                if target_warehouse:
                    warehouse_id = target_warehouse.get("warehouse_id_number", "")
                    self.log(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–∞–π–¥–µ–Ω: {EXPECTED_WAREHOUSE_NAME} (ID: {warehouse_id})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Å–∫–ª–∞–¥–∞
                    if warehouse_id == EXPECTED_WAREHOUSE_ID:
                        self.log(f"‚úÖ ID —Å–∫–ª–∞–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {EXPECTED_WAREHOUSE_ID}")
                        return True
                    else:
                        self.log(f"‚ö†Ô∏è ID —Å–∫–ª–∞–¥–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: –ø–æ–ª—É—á–µ–Ω {warehouse_id}, –æ–∂–∏–¥–∞–ª—Å—è {EXPECTED_WAREHOUSE_ID}")
                        return True  # –°–∫–ª–∞–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ ID –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
                else:
                    self.log(f"‚ùå –†–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ '{EXPECTED_WAREHOUSE_NAME}' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∫–ª–∞–¥–æ–≤: {e}", "ERROR")
            return False
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –°–ö–õ–ê–î–û–í –î–õ–Ø –ì–û–†–û–î–ê {TARGET_CITY}")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üè¢ –û–∂–∏–¥–∞–µ–º—ã–π —Å–∫–ª–∞–¥: {EXPECTED_WAREHOUSE_NAME} (ID: {EXPECTED_WAREHOUSE_ID})")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['applications_found'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ —Å –≥–æ—Ä–æ–¥–æ–º {TARGET_CITY}: {'‚úÖ –ù–ê–ô–î–ï–ù–´' if self.test_results['yavan_application_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞—è–≤–∫–∞–º
        if self.test_results["detailed_results"]:
            self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ó–ê–Ø–í–ö–ê–ú:")
            
            all_applications_passed = True
            for i, result in enumerate(self.test_results["detailed_results"], 1):
                cargo_number = result["cargo_number"]
                overall_success = result["overall_success"]
                
                self.log(f"\n  üì¶ –ó–ê–Ø–í–ö–ê #{i}: {cargo_number}")
                self.log(f"    üìç delivery_city: '{result['delivery_city']}'")
                self.log(f"    üè¢ target_warehouse_name: '{result['target_warehouse_name']}'")
                self.log(f"    üöö delivery_warehouse: '{result['delivery_warehouse']}'")
                
                self.log(f"    üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
                for test_name, test_result in result["tests"].items():
                    status = "‚úÖ –ü–†–û–ô–î–ï–ù" if test_result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
                    self.log(f"      - {test_name}: {status}")
                
                self.log(f"    üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if overall_success else '‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
                
                if not overall_success:
                    all_applications_passed = False
            
            self.test_results["correct_warehouse_mapping"] = all_applications_passed
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if self.test_results["correct_warehouse_mapping"]:
            self.log("‚úÖ –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –°–ö–õ–ê–î–û–í –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            self.log(f"üè¢ –î–ª—è –≥–æ—Ä–æ–¥–∞ {TARGET_CITY} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ '{EXPECTED_WAREHOUSE_NAME}'")
            self.log("üö´ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã —Ç–∏–ø–∞ '–Ø–≤–∞–Ω –°–∫–ª–∞–¥ ‚Ññ1' –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
            self.log("üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_warehouse_by_city() —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        else:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –õ–û–ì–ò–ö–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í!")
            self.log("üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Å–∫–ª–∞–¥–æ–≤")
        
        return self.test_results["correct_warehouse_mapping"]
    
    def run_yavan_warehouse_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –Ø–≤–∞–Ω"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –°–ö–õ–ê–î–û–í")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
        if not self.verify_real_warehouse_exists():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –†–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", "ERROR")
            return False
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        applications = self.get_available_applications()
        if not applications:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫", "ERROR")
            return False
        
        # 4. –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ —Å –≥–æ—Ä–æ–¥–æ–º –Ø–≤–∞–Ω
        yavan_applications = self.find_yavan_application(applications)
        if not yavan_applications:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ó–∞—è–≤–∫–∏ —Å –≥–æ—Ä–æ–¥–æ–º –Ø–≤–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "ERROR")
            return False
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API placement-status –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏ —Å –Ø–≤–∞–Ω
        detailed_results = []
        for app in yavan_applications:
            result = self.test_placement_status_api(app["cargo_id"], app["cargo_number"])
            if result:
                detailed_results.append(result)
        
        self.test_results["detailed_results"] = detailed_results
        
        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = YavanWarehouseMappingTester()
    
    try:
        success = tester.run_yavan_warehouse_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –î–ª—è –≥–æ—Ä–æ–¥–∞ {TARGET_CITY} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫–ª–∞–¥ '{EXPECTED_WAREHOUSE_NAME}'")
            print("üö´ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–ª–∞–¥—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
            print("üìä –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Å–∫–ª–∞–¥–æ–≤")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()