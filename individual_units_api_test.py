#!/usr/bin/env python3
"""
üéØ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Individual Units API –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ backend API endpoint GET /api/operator/cargo/individual-units-for-placement 
–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è individual units –∏–∑ cargo_items —Å quantity > 0.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –ö–û–î–ï:
1. –£–±—Ä–∞–Ω–∞ –∂–µ—Å—Ç–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –±–µ–∑ individual_items
2. –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è individual units –∏–∑ quantity
3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤—ã—Ö individual_items, —Ç–∞–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ –ª–µ—Ç—É

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–æ–∫ —Å cargo_items
2. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è individual units
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
5. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ individual_number —Ñ–æ—Ä–º–∞—Ç–∞ (250101/01/01)
"""

import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://logistics-dash-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class IndividualUnitsAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_results = []
        self.test_cargo_id = None
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {self.operator_user.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def create_test_cargo_with_multiple_items(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ cargo_items –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è individual units"""
        try:
            print("üéØ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò CARGO_ITEMS")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å 2 —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞: 2 + 3 = 5 –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å Individual Units",
                "sender_phone": "+79999111222",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å Individual Units",
                "recipient_phone": "+79999333444",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥–æ–º 123",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ individual units API",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,  # 2 –µ–¥–∏–Ω–∏—Ü—ã
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG", 
                        "quantity": 3,  # 3 –µ–¥–∏–Ω–∏—Ü—ã
                        "weight": 8.0,
                        "price_per_kg": 80.0,
                        "total_amount": 640.0
                    }
                ]
            }
            
            response = self.session.post(f"{API_BASE}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                self.test_cargo_id = data.get("cargo_id")
                cargo_number = data.get("cargo_number")
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ cargo_items",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {self.test_cargo_id}). –ì—Ä—É–∑—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung (2 —à—Ç) + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG (3 —à—Ç) = 5 –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º"
                )
                return cargo_number
            else:
                error_text = response.text
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                    False,
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {error_text}"
                )
                return None
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None

    def test_individual_units_api_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ individual-units-for-placement API"""
        try:
            print("üéØ –¢–ï–°–¢ 1: –ë–ê–ó–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ individual-units-for-placement API")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["individual_units", "total", "page", "per_page"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    total_units = data.get("total", 0)
                    individual_units = data.get("individual_units", [])
                    
                    self.log_test(
                        "GET /api/operator/cargo/individual-units-for-placement",
                        True,
                        f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(individual_units)} individual units, –≤—Å–µ–≥–æ: {total_units}"
                    )
                    return data
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ individual-units-for-placement",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return None
            else:
                self.log_test(
                    "GET /api/operator/cargo/individual-units-for-placement",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_test("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å individual-units-for-placement", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None

    def test_individual_units_structure(self, api_data, test_cargo_number):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã individual units –∏ –ø–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            print("üéØ –¢–ï–°–¢ 2: –°–¢–†–£–ö–¢–£–†–ê INDIVIDUAL UNITS –ò –ü–û–ò–°–ö –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò")
            
            if not api_data or not api_data.get("individual_units"):
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units", False, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö individual_units –≤ –æ—Ç–≤–µ—Ç–µ API")
                return False
            
            individual_units = api_data.get("individual_units", [])
            
            # –ò—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å—Ä–µ–¥–∏ individual units
            test_units = []
            for unit in individual_units:
                if unit.get("cargo_request_number") == test_cargo_number:
                    test_units.append(unit)
            
            if not test_units:
                self.log_test(
                    "–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ individual units",
                    False,
                    f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {test_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {len(individual_units)} individual units"
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual units –¥–ª—è –Ω–∞—à–µ–π –∑–∞—è–≤–∫–∏
            expected_count = 5  # 2 + 3 = 5 –µ–¥–∏–Ω–∏—Ü
            actual_count = len(test_units)
            
            if actual_count == expected_count:
                self.log_test(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual units",
                    True,
                    f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual units: {actual_count} (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ quantity cargo_items: 2+3=5)"
                )
            else:
                self.log_test(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual units",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual units",
                    str(expected_count),
                    str(actual_count)
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ individual unit
            required_unit_fields = ["individual_number", "cargo_number", "type_number", "unit_index", "placement_status", "is_placed"]
            
            structure_valid = True
            individual_numbers = []
            
            for i, unit in enumerate(test_units):
                missing_fields = [field for field in required_unit_fields if field not in unit]
                if missing_fields:
                    self.log_test(
                        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual unit #{i+1}",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}"
                    )
                    structure_valid = False
                else:
                    individual_number = unit.get("individual_number")
                    individual_numbers.append(individual_number)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç individual_number (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å CARGO_NUMBER/TYPE/UNIT)
                    if "/" in individual_number and len(individual_number.split("/")) == 3:
                        self.log_test(
                            f"–§–æ—Ä–º–∞—Ç individual_number #{i+1}",
                            True,
                            f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {individual_number}"
                        )
                    else:
                        self.log_test(
                            f"–§–æ—Ä–º–∞—Ç individual_number #{i+1}",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç individual_number: {individual_number}",
                            "CARGO_NUMBER/TYPE/UNIT",
                            individual_number
                        )
                        structure_valid = False
            
            if structure_valid:
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Å–µ—Ö individual units",
                    True,
                    f"–í—Å–µ {len(test_units)} individual units –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. Individual numbers: {individual_numbers}"
                )
            
            return structure_valid
            
        except Exception as e:
            self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_individual_number_format(self, api_data, test_cargo_number):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ individual_number (CARGO_NUMBER/TYPE/UNIT)"""
        try:
            print("üéØ –¢–ï–°–¢ 3: –§–û–†–ú–ê–¢ INDIVIDUAL_NUMBER")
            
            individual_units = api_data.get("individual_units", [])
            test_units = [unit for unit in individual_units if unit.get("cargo_request_number") == test_cargo_number]
            
            if not test_units:
                self.log_test("–§–æ—Ä–º–∞—Ç individual_number", False, "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö units –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞")
                return False
            
            format_valid = True
            expected_patterns = [
                f"{test_cargo_number}/01/01",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung, –µ–¥–∏–Ω–∏—Ü–∞ 1
                f"{test_cargo_number}/01/02",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung, –µ–¥–∏–Ω–∏—Ü–∞ 2
                f"{test_cargo_number}/02/01",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 1
                f"{test_cargo_number}/02/02",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 2
                f"{test_cargo_number}/02/03",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 3
            ]
            
            actual_numbers = [unit.get("individual_number") for unit in test_units]
            actual_numbers.sort()
            expected_patterns.sort()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            if set(actual_numbers) == set(expected_patterns):
                self.log_test(
                    "–§–æ—Ä–º–∞—Ç individual_number",
                    True,
                    f"–í—Å–µ individual_number –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (CARGO_NUMBER/TYPE/UNIT): {actual_numbers}"
                )
            else:
                self.log_test(
                    "–§–æ—Ä–º–∞—Ç individual_number",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω—ã–µ individual_number",
                    str(expected_patterns),
                    str(actual_numbers)
                )
                format_valid = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º type_number –∏ unit_index –æ—Ç–¥–µ–ª—å–Ω–æ
            type_numbers = {}
            for unit in test_units:
                type_num = unit.get("type_number")
                unit_idx = unit.get("unit_index")
                
                if type_num not in type_numbers:
                    type_numbers[type_num] = []
                type_numbers[type_num].append(unit_idx)
            
            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Ç–∏–ø–∞: 01 (2 –µ–¥–∏–Ω–∏—Ü—ã) –∏ 02 (3 –µ–¥–∏–Ω–∏—Ü—ã)
            if len(type_numbers) == 2 and "01" in type_numbers and "02" in type_numbers:
                if len(type_numbers["01"]) == 2 and len(type_numbers["02"]) == 3:
                    self.log_test(
                        "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ type_number",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: —Ç–∏–ø 01 ({len(type_numbers['01'])} –µ–¥–∏–Ω–∏—Ü), —Ç–∏–ø 02 ({len(type_numbers['02'])} –µ–¥–∏–Ω–∏—Ü)"
                    )
                else:
                    self.log_test(
                        "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ type_number",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –≤ —Ç–∏–ø–∞—Ö: —Ç–∏–ø 01 ({len(type_numbers.get('01', []))} –µ–¥–∏–Ω–∏—Ü), —Ç–∏–ø 02 ({len(type_numbers.get('02', []))} –µ–¥–∏–Ω–∏—Ü)"
                    )
                    format_valid = False
            else:
                self.log_test(
                    "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ type_number",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω—ã–µ type_number: {list(type_numbers.keys())}"
                )
                format_valid = False
            
            return format_valid
            
        except Exception as e:
            self.log_test("–§–æ—Ä–º–∞—Ç individual_number", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_status_defaults(self, api_data, test_cargo_number):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è placement_status –∏ is_placed"""
        try:
            print("üéØ –¢–ï–°–¢ 4: –ó–ù–ê–ß–ï–ù–ò–Ø –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ (placement_status, is_placed)")
            
            individual_units = api_data.get("individual_units", [])
            test_units = [unit for unit in individual_units if unit.get("cargo_request_number") == test_cargo_number]
            
            if not test_units:
                self.log_test("–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö units –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return False
            
            defaults_valid = True
            
            for i, unit in enumerate(test_units):
                placement_status = unit.get("placement_status")
                is_placed = unit.get("is_placed")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º placement_status = "awaiting_placement"
                if placement_status == "awaiting_placement":
                    self.log_test(
                        f"placement_status unit #{i+1}",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {placement_status}"
                    )
                else:
                    self.log_test(
                        f"placement_status unit #{i+1}",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ placement_status",
                        "awaiting_placement",
                        str(placement_status)
                    )
                    defaults_valid = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º is_placed = false
                if is_placed == False:
                    self.log_test(
                        f"is_placed unit #{i+1}",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {is_placed}"
                    )
                else:
                    self.log_test(
                        f"is_placed unit #{i+1}",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ is_placed",
                        "false",
                        str(is_placed)
                    )
                    defaults_valid = False
            
            return defaults_valid
            
        except Exception as e:
            self.log_test("–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_filtering_by_cargo_type(self, test_cargo_number):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ cargo_type_filter"""
        try:
            print("üéØ –¢–ï–°–¢ 5: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û CARGO_TYPE_FILTER")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞ "01"
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?cargo_type_filter=01")
            
            if response.status_code == 200:
                data = response.json()
                individual_units = data.get("individual_units", [])
                
                # –ò—â–µ–º –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Ç–∏–ø–∞ "01"
                test_type_01_units = [
                    unit for unit in individual_units 
                    if unit.get("cargo_number") == test_cargo_number and unit.get("type_number") == "01"
                ]
                
                if len(test_type_01_units) == 2:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –µ–¥–∏–Ω–∏—Ü—ã —Ç–∏–ø–∞ "01"
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter=01",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(test_type_01_units)} –µ–¥–∏–Ω–∏—Ü —Ç–∏–ø–∞ '01'"
                    )
                else:
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter=01",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É '01'",
                        "2 –µ–¥–∏–Ω–∏—Ü—ã",
                        f"{len(test_type_01_units)} –µ–¥–∏–Ω–∏—Ü"
                    )
                    return False
            else:
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter=01",
                    False,
                    f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {response.status_code}"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞ "02"
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?cargo_type_filter=02")
            
            if response.status_code == 200:
                data = response.json()
                individual_units = data.get("individual_units", [])
                
                # –ò—â–µ–º –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Ç–∏–ø–∞ "02"
                test_type_02_units = [
                    unit for unit in individual_units 
                    if unit.get("cargo_number") == test_cargo_number and unit.get("type_number") == "02"
                ]
                
                if len(test_type_02_units) == 3:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –µ–¥–∏–Ω–∏—Ü—ã —Ç–∏–ø–∞ "02"
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter=02",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(test_type_02_units)} –µ–¥–∏–Ω–∏—Ü —Ç–∏–ø–∞ '02'"
                    )
                    return True
                else:
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter=02",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É '02'",
                        "3 –µ–¥–∏–Ω–∏—Ü—ã",
                        f"{len(test_type_02_units)} –µ–¥–∏–Ω–∏—Ü"
                    )
                    return False
            else:
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter=02",
                    False,
                    f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_filtering_by_status(self, test_cargo_number):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ status_filter"""
        try:
            print("üéØ –¢–ï–°–¢ 6: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û STATUS_FILTER")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É "awaiting_placement"
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?status_filter=awaiting_placement")
            
            if response.status_code == 200:
                data = response.json()
                individual_units = data.get("individual_units", [])
                
                # –ò—â–µ–º –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "awaiting_placement"
                test_awaiting_units = [
                    unit for unit in individual_units 
                    if unit.get("cargo_number") == test_cargo_number and unit.get("placement_status") == "awaiting_placement"
                ]
                
                if len(test_awaiting_units) == 5:  # –í—Å–µ 5 –µ–¥–∏–Ω–∏—Ü –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å—Ç–∞—Ç—É—Å "awaiting_placement"
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ status_filter=awaiting_placement",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(test_awaiting_units)} –µ–¥–∏–Ω–∏—Ü —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'awaiting_placement'"
                    )
                    return True
                else:
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ status_filter=awaiting_placement",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É 'awaiting_placement'",
                        "5 –µ–¥–∏–Ω–∏—Ü",
                        f"{len(test_awaiting_units)} –µ–¥–∏–Ω–∏—Ü"
                    )
                    return False
            else:
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ status_filter=awaiting_placement",
                    False,
                    f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ status_filter", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_pagination(self):
        """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            print("üéØ –¢–ï–°–¢ 7: –ü–ê–ì–ò–ù–ê–¶–ò–Ø")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å per_page=2
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?page=1&per_page=2")
            
            if response.status_code == 200:
                data = response.json()
                
                page = data.get("page")
                per_page = data.get("per_page")
                total_count = data.get("total")
                individual_units = data.get("individual_units", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                if page == 1 and per_page == 2 and len(individual_units) <= 2:
                    self.log_test(
                        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è (page=1, per_page=2)",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {per_page}, –ø–æ–ª—É—á–µ–Ω–æ {len(individual_units)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—Å–µ–≥–æ {total_count}"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è (page=1, per_page=2)",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è: page={page}, per_page={per_page}, –ø–æ–ª—É—á–µ–Ω–æ {len(individual_units)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("=" * 80)
        print("üéØ –ü–û–í–¢–û–†–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Individual Units API –≤ TAJLINE.TJ")
        print("=" * 80)
        print()
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return False
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        test_cargo_number = self.create_test_cargo_with_multiple_items()
        if not test_cargo_number:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        api_data = self.test_individual_units_api_basic()
        if not api_data:
            print("‚ùå –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return False
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if not self.test_individual_units_structure(api_data, test_cargo_number):
            print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual units –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
            return False
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ individual_number
        if not self.test_individual_number_format(api_data, test_cargo_number):
            print("‚ùå –§–æ—Ä–º–∞—Ç individual_number –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return False
        
        # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not self.test_placement_status_defaults(api_data, test_cargo_number):
            print("‚ùå –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
            return False
        
        # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞
        if not self.test_filtering_by_cargo_type(test_cargo_number):
            print("‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ cargo_type_filter –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            return False
        
        # –®–∞–≥ 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if not self.test_filtering_by_status(test_cargo_number):
            print("‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ status_filter –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            return False
        
        # –®–∞–≥ 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if not self.test_pagination():
            print("‚ùå –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            return False
        
        return True

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - passed_tests
        
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
        print(f"   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if failed_tests > 0:
            print("‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"   ‚Ä¢ {result['test']}: {result['details']}")
            print()
        
        print("‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        for result in self.test_results:
            if result["success"]:
                print(f"   ‚Ä¢ {result['test']}")
        
        print("\n" + "=" * 80)
        
        if success_rate >= 90:
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ Individual Units API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
        elif success_rate >= 70:
            print("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        else:
            print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("üö® –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º.")
        
        print("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IndividualUnitsAPITester()
    
    try:
        success = tester.run_comprehensive_test()
        tester.print_summary()
        
        return success
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return False

if __name__ == "__main__":
    main()