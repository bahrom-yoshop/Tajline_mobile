#!/usr/bin/env python3
"""
–£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –≥—Ä—É–∑–∞ 100008/01 –∏ 100008/02
–ò—Å—Å–ª–µ–¥—É–µ—Ç –ø–æ—á–µ–º—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ 100004 —É–¥–∞–ª—è–µ—Ç—Å—è –≥—Ä—É–∑ 100012/02
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-6.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class CargoIDMismatchDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        login_data = {
            "phone": ADMIN_PHONE,
            "password": ADMIN_PASSWORD
        }
        
        response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.admin_token = data.get("access_token")
            self.session.headers.update({
                "Authorization": f"Bearer {self.admin_token}",
                "Content-Type": "application/json"
            })
            return True
        return False
    
    def get_all_placement_cargo(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä—É–∑—ã –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        print("üîç –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –ì–†–£–ó–û–í –í –†–ê–ó–ú–ï–©–ï–ù–ò–ò...")
        
        response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            
            print(f"   üìã –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {len(items)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            id_groups = {}
            for item in items:
                cargo_id = item.get("id")
                if cargo_id not in id_groups:
                    id_groups[cargo_id] = []
                id_groups[cargo_id].append(item)
            
            print(f"   üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(id_groups)}")
            
            # –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã ID
            duplicates = {k: v for k, v in id_groups.items() if len(v) > 1}
            if duplicates:
                print(f"   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ ID:")
                for cargo_id, cargo_list in duplicates.items():
                    print(f"      ID {cargo_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(cargo_list)} —Ä–∞–∑:")
                    for i, cargo in enumerate(cargo_list):
                        print(f"         {i+1}. –ù–æ–º–µ—Ä: {cargo.get('cargo_number')}, –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {cargo.get('sender_full_name')}")
            
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥—Ä—É–∑—ã
            target_cargo = {}
            for item in items:
                cargo_number = item.get("cargo_number")
                if cargo_number in ["100008/01", "100008/02", "100012/02"]:
                    target_cargo[cargo_number] = item
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–∑ {cargo_number}:")
                    print(f"      ID: {item.get('id')}")
                    print(f"      –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {item.get('sender_full_name')}")
                    print(f"      –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {item.get('recipient_full_name')}")
                    print(f"      –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {item.get('processing_status')}")
                    print(f"      –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {item.get('payment_status')}")
            
            return items, target_cargo, id_groups
        
        return [], {}, {}
    
    def test_specific_cargo_deletion(self, target_cargo):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        print(f"\nüóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –ì–†–£–ó–û–í...")
        
        if "100008/01" in target_cargo:
            cargo_100008_01 = target_cargo["100008/01"]
            cargo_id = cargo_100008_01.get("id")
            
            print(f"\n   üéØ –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ó–ê 100008/01 (ID: {cargo_id}):")
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            print(f"      üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:")
            print(f"         –ù–æ–º–µ—Ä –≥—Ä—É–∑–∞: {cargo_100008_01.get('cargo_number')}")
            print(f"         ID: {cargo_id}")
            print(f"         –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {cargo_100008_01.get('sender_full_name')}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            response = self.session.delete(f"{BACKEND_URL}/operator/cargo/{cargo_id}/remove-from-placement")
            print(f"      üóëÔ∏è DELETE /operator/cargo/{cargo_id}/remove-from-placement")
            print(f"      üìä Status: {response.status_code}")
            
            if response.status_code == 200:
                response_data = response.json()
                print(f"      üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(response_data, indent=8, ensure_ascii=False)}")
                
                deleted_cargo_number = response_data.get("cargo_number")
                if deleted_cargo_number != "100008/01":
                    print(f"      üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê!")
                    print(f"      ‚ùå –ó–∞–ø—Ä–æ—Å–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ: 100008/01 (ID: {cargo_id})")
                    print(f"      ‚ùå –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω: {deleted_cargo_number}")
                    print(f"      üîç –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –º–∞–ø–ø–∏–Ω–≥–æ–º ID -> –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞")
                    
                    return True  # –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.text}")
        
        return False
    
    def investigate_id_mapping_issue(self, items, target_cargo):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–∞–ø–ø–∏–Ω–≥–∞ ID –Ω–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤"""
        print(f"\nüî¨ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ú–ê–ü–ü–ò–ù–ì–ê ID -> –ù–û–ú–ï–† –ì–†–£–ó–ê...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É ID -> —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤
        id_to_numbers = {}
        for item in items:
            cargo_id = item.get("id")
            cargo_number = item.get("cargo_number")
            
            if cargo_id not in id_to_numbers:
                id_to_numbers[cargo_id] = []
            id_to_numbers[cargo_id].append(cargo_number)
        
        # –ò—â–µ–º ID, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        problematic_ids = {k: v for k, v in id_to_numbers.items() if len(set(v)) > 1}
        
        if problematic_ids:
            print(f"   üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–ù–´–ï ID (–æ–¥–∏–Ω ID -> –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤):")
            for cargo_id, numbers in problematic_ids.items():
                unique_numbers = list(set(numbers))
                print(f"      ID {cargo_id} —Å–≤—è–∑–∞–Ω —Å –Ω–æ–º–µ—Ä–∞–º–∏: {unique_numbers}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –Ω–∞—à–∏ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã
                target_numbers = ["100008/01", "100008/02", "100012/02"]
                intersection = set(unique_numbers) & set(target_numbers)
                if intersection:
                    print(f"         ‚ö†Ô∏è –í–∫–ª—é—á–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã: {list(intersection)}")
        else:
            print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∫–∞–∂–¥—ã–π ID —Å–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –Ω–æ–º–µ—Ä -> —Å–ø–∏—Å–æ–∫ ID
        number_to_ids = {}
        for item in items:
            cargo_id = item.get("id")
            cargo_number = item.get("cargo_number")
            
            if cargo_number not in number_to_ids:
                number_to_ids[cargo_number] = []
            number_to_ids[cargo_number].append(cargo_id)
        
        # –ò—â–µ–º –Ω–æ–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ ID
        problematic_numbers = {k: v for k, v in number_to_ids.items() if len(set(v)) > 1}
        
        if problematic_numbers:
            print(f"\n   üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–ù–´–ï –ù–û–ú–ï–†–ê (–æ–¥–∏–Ω –Ω–æ–º–µ—Ä -> –Ω–µ—Å–∫–æ–ª—å–∫–æ ID):")
            for cargo_number, ids in problematic_numbers.items():
                unique_ids = list(set(ids))
                print(f"      –ù–æ–º–µ—Ä {cargo_number} —Å–≤—è–∑–∞–Ω —Å ID: {unique_ids}")
        else:
            print(f"   ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä —Å–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º ID")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–∞—à–∏—Ö —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤
        print(f"\n   üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–ï–í–´–• –ì–†–£–ó–û–í:")
        target_numbers = ["100008/01", "100008/02", "100012/02"]
        
        for number in target_numbers:
            if number in number_to_ids:
                ids = list(set(number_to_ids[number]))
                print(f"      {number} -> ID: {ids}")
                
                if len(ids) > 1:
                    print(f"         ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –û–¥–∏–Ω –Ω–æ–º–µ—Ä —Å–≤—è–∑–∞–Ω —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ ID!")
            else:
                print(f"      {number} -> –ù–ï –ù–ê–ô–î–ï–ù")
        
        return problematic_ids, problematic_numbers
    
    def check_database_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
        print(f"\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
        endpoints_to_check = [
            "/admin/cargo",
            "/operator/cargo",
            "/admin/system/stats"
        ]
        
        for endpoint in endpoints_to_check:
            try:
                response = self.session.get(f"{BACKEND_URL}{endpoint}")
                print(f"   üìä {endpoint} - Status: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    if isinstance(data, dict) and "items" in data:
                        items = data["items"]
                        print(f"      üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(items)}")
                    elif isinstance(data, list):
                        print(f"      üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(data)}")
                    else:
                        print(f"      üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {endpoint}: {e}")
    
    def run_investigation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        print("=" * 80)
        print("üî¨ –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í")
        print("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        items, target_cargo, id_groups = self.get_all_placement_cargo()
        
        # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–∞–ø–ø–∏–Ω–≥–∞
        problematic_ids, problematic_numbers = self.investigate_id_mapping_issue(items, target_cargo)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        deletion_issue_confirmed = self.test_specific_cargo_deletion(target_cargo)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.check_database_consistency()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        print(f"üìã –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {len(items)}")
        print(f"üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(id_groups)}")
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤: {len(target_cargo)}")
        
        if problematic_ids:
            print(f"üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ ID (–æ–¥–∏–Ω ID -> –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤): {len(problematic_ids)}")
        
        if problematic_numbers:
            print(f"üö® –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–æ–¥–∏–Ω –Ω–æ–º–µ—Ä -> –Ω–µ—Å–∫–æ–ª—å–∫–æ ID): {len(problematic_numbers)}")
        
        if deletion_issue_confirmed:
            print(f"üö® –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –ø–æ ID —É–¥–∞–ª—è–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥—Ä—É–∑!")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print(f"   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–∞ –ø–æ ID –≤ backend –∫–æ–¥–µ")
        print(f"   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ ID –≥—Ä—É–∑–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print(f"   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã MongoDB –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –≥—Ä—É–∑–æ–≤")
        print(f"   4. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ race conditions –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤")
        print(f"   5. –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è")
        
        return True

def main():
    diagnostic = CargoIDMismatchDiagnostic()
    
    try:
        success = diagnostic.run_investigation()
        
        if success:
            print(f"\n‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            sys.exit(0)
        else:
            print(f"\n‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()