#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–û –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´ –í –ó–ê–Ø–í–ö–ï –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê TAJLINE.TJ

–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–¢–ê–¢–£–°–ê –û–ü–õ–ê–¢–´:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: GET /api/operator/warehouse-notifications
3. –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å pickup_request_id
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GET /api/operator/pickup-requests/{pickup_request_id} –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:
   - –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_status –≤ response?
   - –ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ payment_status (paid, not_paid, partially_paid)?
   - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–∏—Ä–∞–ª –∫—É—Ä—å–µ—Ä?
   - –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_method –≤ –¥–∞–Ω–Ω—ã—Ö?

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
5. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –∫—É—Ä—å–µ—Ä–∞ –≥–¥–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä—è–º–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–∏ payment_status –æ—Ç –∫—É—Ä—å–µ—Ä–∞
7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ modal_data.payment_info —Å–æ–¥–µ—Ä–∂–∏—Ç payment_status

–ö–õ–Æ–ß–ï–í–´–ï –í–û–ü–†–û–°–´:
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏ backend payment_status –∫–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É?
- –ü–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ª–∏ payment_status –≤ endpoint /api/operator/pickup-requests/{pickup_request_id}?
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ payment_info –≤ modal_data?
- –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –≤ payment_info —Å–µ–∫—Ü–∏–∏?

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≥–¥–µ —Ç–µ—Ä—è—é—Ç—Å—è —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class PaymentStatusInvestigationTester:
    def __init__(self, base_url="https://tajline-logistics-1.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}
        self.users = {}
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üîç TAJLINE.TJ PAYMENT STATUS INVESTIGATION")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def investigate_payment_status_issue(self):
        """Investigate payment status issue in pickup requests according to review request"""
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–û –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´ –í –ó–ê–Ø–í–ö–ï –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê")
        print("   üìã –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ TAJLINE.TJ")
        
        all_success = True
        investigation_results = {}
        
        # –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)
        print("\n   üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Operator Authentication",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        
        if not success or 'access_token' not in login_response:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            return False
        
        operator_token = login_response['access_token']
        operator_user = login_response.get('user', {})
        operator_role = operator_user.get('role')
        operator_name = operator_user.get('full_name')
        
        print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {operator_name}")
        print(f"   üëë –†–æ–ª—å: {operator_role}")
        print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {operator_user.get('phone')}")
        
        investigation_results['operator_auth'] = {
            'success': True,
            'operator_name': operator_name,
            'operator_role': operator_role
        }
        
        # –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø: GET /api/operator/warehouse-notifications
        print("\n   üì¨ –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–ê...")
        
        success, notifications_response = self.run_test(
            "Get Warehouse Notifications",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=operator_token
        )
        
        if not success:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
            return False
        
        notifications = notifications_response if isinstance(notifications_response, list) else []
        notification_count = len(notifications)
        
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–ª–∞–¥–∞")
        
        investigation_results['notifications'] = {
            'total_count': notification_count,
            'notifications': notifications
        }
        
        # –≠–¢–ê–ü 3: –ù–ê–ô–¢–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –° pickup_request_id
        print("\n   üîç –≠–¢–ê–ü 3: –ü–û–ò–°–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –° pickup_request_id...")
        
        pickup_notifications = []
        for notification in notifications:
            if 'pickup_request_id' in notification and notification.get('pickup_request_id'):
                pickup_notifications.append(notification)
                print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å pickup_request_id: {notification.get('pickup_request_id')}")
                print(f"      - ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification.get('id')}")
                print(f"      - –°—Ç–∞—Ç—É—Å: {notification.get('status')}")
                print(f"      - –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.get('message', '')[:100]}...")
        
        if not pickup_notifications:
            print("   ‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id")
            print("   ‚ÑπÔ∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ:")
            print("      1) –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞")
            print("      2) –ö—É—Ä—å–µ—Ä—ã –µ—â–µ –Ω–µ —Å–¥–∞–ª–∏ –≥—Ä—É–∑—ã –Ω–∞ —Å–∫–ª–∞–¥")
            print("      3) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if notifications:
                sample_notification = notifications[0]
                print(f"   üìã –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
                print(f"      - ID: {sample_notification.get('id')}")
                print(f"      - –¢–∏–ø: {sample_notification.get('type', 'unknown')}")
                print(f"      - –°—Ç–∞—Ç—É—Å: {sample_notification.get('status')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–ø–ª–∞—Ç–æ–π
                payment_fields = ['payment_status', 'payment_method', 'payment_info']
                found_payment_fields = []
                for field in payment_fields:
                    if field in sample_notification:
                        found_payment_fields.append(field)
                        print(f"      - {field}: {sample_notification.get(field)}")
                
                if found_payment_fields:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –æ–ø–ª–∞—Ç—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {found_payment_fields}")
                else:
                    print("   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´ –ø–æ–ª—è –æ–ø–ª–∞—Ç—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
        else:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pickup_notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å pickup_request_id")
        
        investigation_results['pickup_notifications'] = pickup_notifications
        
        # –≠–¢–ê–ü 4: –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ GET /api/operator/pickup-requests/{pickup_request_id}
        print("\n   üéØ –≠–¢–ê–ü 4: –ê–ù–ê–õ–ò–ó ENDPOINT /api/operator/pickup-requests/{pickup_request_id}...")
        
        pickup_request_analysis = []
        
        if pickup_notifications:
            for notification in pickup_notifications[:3]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                pickup_request_id = notification.get('pickup_request_id')
                print(f"\n   üìã –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞: {pickup_request_id}")
                
                success, pickup_request_response = self.run_test(
                    f"Get Pickup Request Details ({pickup_request_id})",
                    "GET",
                    f"/api/operator/pickup-requests/{pickup_request_id}",
                    200,
                    token=operator_token
                )
                
                if success:
                    print("   ‚úÖ Endpoint /api/operator/pickup-requests/{pickup_request_id} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó: –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_status –≤ response?
                    payment_status = pickup_request_response.get('payment_status')
                    payment_method = pickup_request_response.get('payment_method')
                    payment_info = pickup_request_response.get('payment_info')
                    modal_data = pickup_request_response.get('modal_data', {})
                    
                    analysis = {
                        'pickup_request_id': pickup_request_id,
                        'endpoint_works': True,
                        'has_payment_status': payment_status is not None,
                        'payment_status_value': payment_status,
                        'has_payment_method': payment_method is not None,
                        'payment_method_value': payment_method,
                        'has_payment_info': payment_info is not None,
                        'payment_info_value': payment_info,
                        'has_modal_data': bool(modal_data),
                        'modal_data_keys': list(modal_data.keys()) if modal_data else []
                    }
                    
                    print(f"   üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–ö–ò {pickup_request_id}:")
                    print(f"      ‚ùì –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_status? {analysis['has_payment_status']}")
                    if analysis['has_payment_status']:
                        print(f"      üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ payment_status: {analysis['payment_status_value']}")
                    else:
                        print("      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ payment_status –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ –æ—Ç–≤–µ—Ç–µ")
                    
                    print(f"      ‚ùì –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_method? {analysis['has_payment_method']}")
                    if analysis['has_payment_method']:
                        print(f"      üí≥ –ó–Ω–∞—á–µ–Ω–∏–µ payment_method: {analysis['payment_method_value']}")
                    else:
                        print("      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ payment_method –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ –æ—Ç–≤–µ—Ç–µ")
                    
                    print(f"      ‚ùì –ï—Å—Ç—å –ª–∏ –ø–æ–ª–µ payment_info? {analysis['has_payment_info']}")
                    if analysis['has_payment_info']:
                        print(f"      üìä –ó–Ω–∞—á–µ–Ω–∏–µ payment_info: {analysis['payment_info_value']}")
                    else:
                        print("      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ payment_info –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ –æ—Ç–≤–µ—Ç–µ")
                    
                    print(f"      ‚ùì –ï—Å—Ç—å –ª–∏ modal_data? {analysis['has_modal_data']}")
                    if analysis['has_modal_data']:
                        print(f"      üìã –ö–ª—é—á–∏ modal_data: {analysis['modal_data_keys']}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏–º modal_data.payment_info
                        modal_payment_info = modal_data.get('payment_info')
                        if modal_payment_info:
                            print(f"      ‚úÖ modal_data.payment_info –Ω–∞–π–¥–µ–Ω: {modal_payment_info}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ payment_status
                            if isinstance(modal_payment_info, dict) and 'payment_status' in modal_payment_info:
                                print(f"      ‚úÖ modal_data.payment_info —Å–æ–¥–µ—Ä–∂–∏—Ç payment_status: {modal_payment_info['payment_status']}")
                                analysis['modal_payment_info_has_status'] = True
                                analysis['modal_payment_status'] = modal_payment_info['payment_status']
                            else:
                                print("      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: modal_data.payment_info –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç payment_status")
                                analysis['modal_payment_info_has_status'] = False
                        else:
                            print("      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: modal_data.payment_info –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                            analysis['modal_payment_info_has_status'] = False
                    else:
                        print("      ‚ùå –ü–†–û–ë–õ–ï–ú–ê: modal_data –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ –æ—Ç–≤–µ—Ç–µ")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
                    print(f"      üîç –í—Å–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {list(pickup_request_response.keys())}")
                    
                    # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö 'payment' –∏–ª–∏ 'pay'
                    payment_related_fields = []
                    for key in pickup_request_response.keys():
                        if 'payment' in key.lower() or 'pay' in key.lower():
                            payment_related_fields.append(key)
                            print(f"      üí∞ –ü–æ–ª–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –æ–ø–ª–∞—Ç–æ–π: {key} = {pickup_request_response[key]}")
                    
                    analysis['payment_related_fields'] = payment_related_fields
                    
                    pickup_request_analysis.append(analysis)
                    
                else:
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê: Endpoint /api/operator/pickup-requests/{pickup_request_id} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    pickup_request_analysis.append({
                        'pickup_request_id': pickup_request_id,
                        'endpoint_works': False,
                        'error': 'Endpoint failed'
                    })
        else:
            print("   ‚ö†Ô∏è  –ù–µ—Ç pickup_request_id –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ endpoint")
        
        investigation_results['pickup_request_analysis'] = pickup_request_analysis
        
        # –≠–¢–ê–ü 5: –ù–ê–ô–¢–ò –ó–ê–Ø–í–ö–£ –ö–£–†–¨–ï–†–ê –ì–î–ï –ë–´–õ –£–°–¢–ê–ù–û–í–õ–ï–ù –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´
        print("\n   üöö –≠–¢–ê–ü 5: –ü–û–ò–°–ö –ó–ê–Ø–í–û–ö –ö–£–†–¨–ï–†–ê –°–û –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        courier_login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        success, courier_login_response = self.run_test(
            "Courier Authentication for Investigation",
            "POST",
            "/api/auth/login",
            200,
            courier_login_data
        )
        
        if success and 'access_token' in courier_login_response:
            courier_token = courier_login_response['access_token']
            courier_user = courier_login_response.get('user', {})
            
            print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞: {courier_user.get('full_name')}")
            
            # –ü–æ–ª—É—á–∏–º –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            success, courier_requests = self.run_test(
                "Get Courier Requests History",
                "GET",
                "/api/courier/requests/history",
                200,
                token=courier_token
            )
            
            if success:
                requests_list = courier_requests.get('items', []) if isinstance(courier_requests, dict) else courier_requests if isinstance(courier_requests, list) else []
                print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(requests_list)} –∑–∞—è–≤–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ
                courier_payment_analysis = []
                for request in requests_list[:3]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏
                    request_id = request.get('id')
                    request_type = request.get('request_type', 'unknown')
                    
                    print(f"   üîç –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ –∫—É—Ä—å–µ—Ä–∞: {request_id} (—Ç–∏–ø: {request_type})")
                    
                    # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –æ–ø–ª–∞—Ç—ã –≤ –∑–∞—è–≤–∫–µ –∫—É—Ä—å–µ—Ä–∞
                    payment_fields_found = {}
                    for key, value in request.items():
                        if 'payment' in key.lower() or 'pay' in key.lower():
                            payment_fields_found[key] = value
                            print(f"      üí∞ {key}: {value}")
                    
                    courier_payment_analysis.append({
                        'request_id': request_id,
                        'request_type': request_type,
                        'payment_fields': payment_fields_found
                    })
                
                investigation_results['courier_payment_analysis'] = courier_payment_analysis
                
                if not any(analysis['payment_fields'] for analysis in courier_payment_analysis):
                    print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–ï –ù–ê–ô–î–ï–ù–´ –ø–æ–ª—è –æ–ø–ª–∞—Ç—ã –≤ –∑–∞—è–≤–∫–∞—Ö –∫—É—Ä—å–µ—Ä–∞")
                else:
                    print("   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –æ–ø–ª–∞—Ç—ã –≤ –∑–∞—è–≤–∫–∞—Ö –∫—É—Ä—å–µ—Ä–∞")
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–∞")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫—É—Ä—å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –≠–¢–ê–ü 6: –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ò –í–´–í–û–î–´
        print("\n   üìä –≠–¢–ê–ü 6: –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ò –í–´–í–û–î–´...")
        
        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º
        problems_found = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ï—Å—Ç—å –ª–∏ payment_status –≤ pickup requests
        if pickup_request_analysis:
            requests_without_payment_status = [r for r in pickup_request_analysis if not r.get('has_payment_status', False)]
            if requests_without_payment_status:
                problems_found.append(f"‚ùå {len(requests_without_payment_status)} –∑–∞—è–≤–æ–∫ –ë–ï–ó –ø–æ–ª—è payment_status")
            
            requests_without_payment_method = [r for r in pickup_request_analysis if not r.get('has_payment_method', False)]
            if requests_without_payment_method:
                problems_found.append(f"‚ùå {len(requests_without_payment_method)} –∑–∞—è–≤–æ–∫ –ë–ï–ó –ø–æ–ª—è payment_method")
            
            requests_without_modal_payment_info = [r for r in pickup_request_analysis if not r.get('modal_payment_info_has_status', False)]
            if requests_without_modal_payment_info:
                problems_found.append(f"‚ùå {len(requests_without_modal_payment_info)} –∑–∞—è–≤–æ–∫ –ë–ï–ó modal_data.payment_info.payment_status")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n   üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
        
        if problems_found:
            print("   ‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for problem in problems_found:
                print(f"      {problem}")
        else:
            print("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\n   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        
        if pickup_request_analysis:
            missing_payment_status = any(not r.get('has_payment_status', False) for r in pickup_request_analysis)
            missing_payment_method = any(not r.get('has_payment_method', False) for r in pickup_request_analysis)
            missing_modal_payment_info = any(not r.get('modal_payment_info_has_status', False) for r in pickup_request_analysis)
            
            if missing_payment_status:
                print("   üîß 1. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ payment_status –≤ endpoint /api/operator/pickup-requests/{pickup_request_id}")
            
            if missing_payment_method:
                print("   üîß 2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ payment_method –≤ endpoint /api/operator/pickup-requests/{pickup_request_id}")
            
            if missing_modal_payment_info:
                print("   üîß 3. –î–æ–±–∞–≤–∏—Ç—å payment_status –≤ modal_data.payment_info –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            
            print("   üîß 4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ—Ç –∫—É—Ä—å–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("   üîß 5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ courier_requests –≤ pickup_requests")
        else:
            print("   üîß 1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            print("   üîß 2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫—É—Ä—å–µ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã")
            print("   üîß 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å workflow –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        
        investigation_results['problems_found'] = problems_found
        investigation_results['recommendations'] = [
            "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è payment_status –∏ payment_method –≤ endpoint pickup-requests",
            "–û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç –∫—É—Ä—å–µ—Ä–∞",
            "–î–æ–±–∞–≤–∏—Ç—å payment_info –≤ modal_data –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å workflow –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫—É—Ä—å–µ—Ä–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"
        ]
        
        return investigation_results

    def run_full_investigation(self):
        """Run full payment status investigation"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –°–û –°–¢–ê–¢–£–°–û–ú –û–ü–õ–ê–¢–´")
        
        try:
            results = self.investigate_payment_status_issue()
            
            print("\n" + "="*80)
            print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–Ø")
            print("="*80)
            
            if results:
                # Operator authentication
                if results.get('operator_auth', {}).get('success'):
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –£–°–ü–ï–®–ù–û")
                else:
                    print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –ù–ï–£–î–ê–ß–ù–û")
                
                # Notifications analysis
                notification_count = results.get('notifications', {}).get('total_count', 0)
                pickup_notification_count = len(results.get('pickup_notifications', []))
                print(f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {notification_count} –≤—Å–µ–≥–æ, {pickup_notification_count} —Å pickup_request_id")
                
                # Pickup request analysis
                pickup_analysis = results.get('pickup_request_analysis', [])
                if pickup_analysis:
                    working_endpoints = len([r for r in pickup_analysis if r.get('endpoint_works')])
                    with_payment_status = len([r for r in pickup_analysis if r.get('has_payment_status')])
                    with_payment_method = len([r for r in pickup_analysis if r.get('has_payment_method')])
                    with_modal_payment_info = len([r for r in pickup_analysis if r.get('modal_payment_info_has_status')])
                    
                    print(f"üéØ –ê–Ω–∞–ª–∏–∑ pickup requests: {working_endpoints}/{len(pickup_analysis)} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç")
                    print(f"üí∞ –° payment_status: {with_payment_status}/{len(pickup_analysis)}")
                    print(f"üí≥ –° payment_method: {with_payment_method}/{len(pickup_analysis)}")
                    print(f"üìã –° modal payment_info: {with_modal_payment_info}/{len(pickup_analysis)}")
                else:
                    print("‚ö†Ô∏è  Pickup requests –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # Problems summary
                problems = results.get('problems_found', [])
                if problems:
                    print(f"\n‚ùå –ù–ê–ô–î–ï–ù–û {len(problems)} –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú:")
                    for i, problem in enumerate(problems, 1):
                        print(f"   {i}. {problem}")
                else:
                    print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                
                # Recommendations
                recommendations = results.get('recommendations', [])
                if recommendations:
                    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(recommendations)}):")
                    for i, rec in enumerate(recommendations, 1):
                        print(f"   {i}. {rec}")
                
                print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
                print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
                print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {self.tests_passed}")
                print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.tests_passed/self.tests_run*100):.1f}%" if self.tests_run > 0 else "0%")
                
                return True
            else:
                print("‚ùå –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return False

if __name__ == "__main__":
    tester = PaymentStatusInvestigationTester()
    success = tester.run_full_investigation()
    
    if success:
        print("\nüéâ –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã")
    else:
        print("\n‚ùå –†–ê–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
    
    sys.exit(0 if success else 1)