#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API layout-with-cargo: –ü–æ—á–µ–º—É –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç 4 —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü—ã
====================================================================================

–ù–ê–ô–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ü–†–ï–î–´–î–£–©–ï–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
- –í placement_records –Ω–∞–π–¥–µ–Ω–æ 4 –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–∫–ª–∞–¥–∞ 001 (d0a8362d-b4d3-4947-b335-28c94658a021)
- –ó–∞—è–≤–∫–∞ 250101: 1 –µ–¥–∏–Ω–∏—Ü–∞ (250101/01/02 –≤ –ë1-–ü2-–Ø5)
- –ó–∞—è–≤–∫–∞ 25082235: 3 –µ–¥–∏–Ω–∏—Ü—ã (25082235/01/02, 25082235/02/01, 25082235/01/01)
- –ó–∞—è–≤–∫–∞ 25082298: 0 –µ–¥–∏–Ω–∏—Ü (–ù–ï –ù–ê–ô–î–ï–ù–ê)

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –∑–∞–ø–∏—Å–µ–π –≤–º–µ—Å—Ç–æ 4 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
2. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ API
3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ placement_records —Å –æ—Ç–≤–µ—Ç–æ–º API
4. –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import sys
import os
from datetime import datetime
from pymongo import MongoClient

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# MongoDB –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'cargo_transport')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
MOSCOW_WAREHOUSE_ID = "d0a8362d-b4d3-4947-b335-28c94658a021"
MOSCOW_WAREHOUSE_NAME = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
MOSCOW_WAREHOUSE_NUMBER = "001"

FOUND_PLACEMENT_RECORDS = [
    {"cargo_number": "250101", "individual_number": "250101/01/02", "location": "–ë1-–ü2-–Ø5"},
    {"cargo_number": "25082235", "individual_number": "25082235/01/02", "location": "–ë1-–ü3-–Ø2"},
    {"cargo_number": "25082235", "individual_number": "25082235/02/01", "location": "–ë1-–ü3-–Ø2"},
    {"cargo_number": "25082235", "individual_number": "25082235/01/01", "location": "–ë1-–ü3-–Ø3"}
]

class LayoutWithCargoAPIDiagnosticTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.mongo_client = None
        self.db = None
        self.test_results = {
            "auth_success": False,
            "api_response_received": False,
            "api_cargo_count": 0,
            "expected_cargo_count": 4,
            "placement_records_in_db": 0,
            "api_vs_db_mismatch": False,
            "critical_issues": []
        }
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.test_results["auth_success"] = True
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def connect_to_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
            
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.mongo_client.admin.command('ping')
            self.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {str(e)}", "ERROR")
            return False
    
    def verify_placement_records_in_db(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            placement_collection = self.db['placement_records']
            
            # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∫–ª–∞–¥–∞ 001
            moscow_records = list(placement_collection.find({
                "warehouse_id": MOSCOW_WAREHOUSE_ID
            }))
            
            self.test_results["placement_records_in_db"] = len(moscow_records)
            self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(moscow_records)} placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 001 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            for record in moscow_records:
                cargo_number = record.get('cargo_number', 'N/A')
                individual_number = record.get('individual_number', 'N/A')
                location = record.get('location', 'N/A')
                placed_at = record.get('placed_at', 'N/A')
                placed_by = record.get('placed_by', 'N/A')
                
                self.log(f"   - {cargo_number}/{individual_number} –≤ {location} (—Ä–∞–∑–º–µ—â–µ–Ω: {placed_at}, –∫–µ–º: {placed_by})")
            
            return moscow_records
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ placement_records: {str(e)}", "ERROR")
            return []
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo"""
        try:
            self.log("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo...")
            self.log(f"üìç –°–∫–ª–∞–¥: {MOSCOW_WAREHOUSE_NAME} (ID: {MOSCOW_WAREHOUSE_ID})")
            
            # –í—ã–∑–æ–≤ API
            api_url = f"{API_BASE}/warehouses/{MOSCOW_WAREHOUSE_ID}/layout-with-cargo"
            self.log(f"üåê URL: {api_url}")
            
            response = self.session.get(api_url)
            
            if response.status_code == 200:
                self.test_results["api_response_received"] = True
                data = response.json()
                
                self.log("‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
                self.log(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
                
                # –ê–Ω–∞–ª–∏–∑ cargo_info
                cargo_info = data.get('cargo_info', [])
                self.test_results["api_cargo_count"] = len(cargo_info)
                
                self.log(f"üì¶ API –≤–µ—Ä–Ω—É–ª {len(cargo_info)} –∑–∞–ø–∏—Å–µ–π cargo_info")
                
                if len(cargo_info) == 0:
                    self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π cargo_info")
                    self.test_results["critical_issues"].append("API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π cargo_info")
                else:
                    self.log("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ cargo_info:")
                    for i, cargo in enumerate(cargo_info):
                        cargo_number = cargo.get('cargo_number', 'N/A')
                        individual_number = cargo.get('individual_number', 'N/A')
                        location = cargo.get('location', 'N/A')
                        self.log(f"   {i+1}. {cargo_number}/{individual_number} –≤ {location}")
                
                # –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                layout_structure = data.get('layout_structure', {})
                warehouse_info = data.get('warehouse_info', {})
                
                self.log(f"üèóÔ∏è Layout structure: {len(layout_structure.get('blocks', []))} –±–ª–æ–∫–æ–≤")
                self.log(f"üè¢ Warehouse info: {warehouse_info.get('name', 'N/A')}")
                
                return data
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                self.log(f"‚ùå –û—Ç–≤–µ—Ç: {response.text}")
                self.test_results["critical_issues"].append(f"API layout-with-cargo –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {str(e)}", "ERROR")
            return None
    
    def analyze_api_logic_issue(self, placement_records):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ API"""
        try:
            self.log("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –í –õ–û–ì–ò–ö–ï API...")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            db_count = len(placement_records)
            api_count = self.test_results["api_cargo_count"]
            
            self.log(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_count} –∑–∞–ø–∏—Å–µ–π")
            self.log(f"üìä API –æ—Ç–≤–µ—Ç: {api_count} –∑–∞–ø–∏—Å–µ–π")
            
            if db_count > api_count:
                self.test_results["api_vs_db_mismatch"] = True
                self.log(f"‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                self.test_results["critical_issues"].append(f"API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {api_count} –∑–∞–ø–∏—Å–µ–π, –∞ –≤ –ë–î {db_count}")
                
                # –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
                self.log("\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
                
                # 1. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ warehouse_id
                self.log("1. üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ warehouse_id:")
                self.log(f"   - –û–∂–∏–¥–∞–µ–º—ã–π warehouse_id: {MOSCOW_WAREHOUSE_ID}")
                self.log(f"   - –í–æ–∑–º–æ–∂–Ω–æ API –∏—â–µ—Ç –ø–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—é (warehouse_id_number: {MOSCOW_WAREHOUSE_NUMBER})")
                
                # 2. –ü—Ä–æ–±–ª–µ–º–∞ —Å JOIN –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                self.log("2. üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å JOIN –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏:")
                self.log("   - API –º–æ–∂–µ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
                self.log("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É placement_records –∏ cargo/operator_cargo")
                
                # 3. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
                self.log("3. üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö:")
                self.log("   - –§–æ—Ä–º–∞—Ç location: –ë1-–ü2-–Ø5 (–Ω–∞–π–¥–µ–Ω –≤ –ë–î)")
                self.log("   - API –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç")
                
                # 4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∑–∞–ø–∏—Å–µ–π
                self.log("4. üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
                self.log("   - API –º–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ —Ñ–ª–∞–≥–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                
            elif db_count == api_count:
                self.log("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            else:
                self.log("‚ö†Ô∏è API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –≤ –ë–î (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏–∫–∏ API: {str(e)}", "ERROR")
    
    def test_alternative_warehouse_search(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            self.log("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ö–†–ò–¢–ï–†–ò–ï–í –ü–û–ò–°–ö–ê...")
            
            # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ warehouse_id_number
            self.log("1. üß™ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ warehouse_id_number...")
            
            placement_collection = self.db['placement_records']
            
            # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å warehouse_id_number
            records_by_number = list(placement_collection.find({
                "warehouse_id_number": MOSCOW_WAREHOUSE_NUMBER
            }))
            
            self.log(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(records_by_number)} –∑–∞–ø–∏—Å–µ–π –ø–æ warehouse_id_number = '{MOSCOW_WAREHOUSE_NUMBER}'")
            
            # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–∫–ª–∞–¥–∞
            self.log("2. üß™ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–∫–ª–∞–¥–∞...")
            
            records_by_name = list(placement_collection.find({
                "warehouse_name": {"$regex": "–ú–æ—Å–∫–≤–∞", "$options": "i"}
            }))
            
            self.log(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(records_by_name)} –∑–∞–ø–∏—Å–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–∫–ª–∞–¥–∞ —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É '–ú–æ—Å–∫–≤–∞'")
            
            # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏ –∞–Ω–∞–ª–∏–∑ warehouse_id
            self.log("3. üß™ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö warehouse_id –≤ placement_records...")
            
            all_records = list(placement_collection.find({}))
            warehouse_ids = set()
            
            for record in all_records:
                warehouse_id = record.get('warehouse_id')
                if warehouse_id:
                    warehouse_ids.add(warehouse_id)
            
            self.log(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(warehouse_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö warehouse_id:")
            for wid in warehouse_ids:
                count = placement_collection.count_documents({"warehouse_id": wid})
                self.log(f"      - {wid}: {count} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –Ω–∞—à —Å–∫–ª–∞–¥
                if wid == MOSCOW_WAREHOUSE_ID:
                    self.log(f"      ‚úÖ –≠–¢–û –ù–ê–® –°–ö–õ–ê–î 001!")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {str(e)}", "ERROR")
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ API"""
        try:
            self.log("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API layout-with-cargo")
            self.log("=" * 80)
            
            # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate_operator():
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False
            
            # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if not self.connect_to_mongodb():
                self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records –≤ –ë–î
            placement_records = self.verify_placement_records_in_db()
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
            api_response = self.test_layout_with_cargo_api()
            
            # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ API
            self.analyze_api_logic_issue(placement_records)
            
            # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞
            self.test_alternative_warehouse_search()
            
            # 7. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.generate_final_report()
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}", "ERROR")
            return False
        finally:
            if self.mongo_client:
                self.mongo_client.close()
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            self.log("\n" + "=" * 80)
            self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API layout-with-cargo")
            self.log("=" * 80)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '–û–®–ò–ë–ö–ê'}")
            self.log(f"‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {'–î–ê' if self.test_results['api_response_received'] else '–ù–ï–¢'}")
            self.log(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {self.test_results['placement_records_in_db']}")
            self.log(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ API: {self.test_results['api_cargo_count']}")
            self.log(f"üìä –û–∂–∏–¥–∞–ª–æ—Å—å: {self.test_results['expected_cargo_count']}")
            
            # –ü—Ä–æ–±–ª–µ–º–∞
            if self.test_results["api_vs_db_mismatch"]:
                self.log(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
                self.log(f"   API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {self.test_results['api_cargo_count']} –∑–∞–ø–∏—Å–µ–π")
                self.log(f"   –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ {self.test_results['placement_records_in_db']} –∑–∞–ø–∏—Å–µ–π")
                self.log(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª {self.test_results['expected_cargo_count']} –∑–∞–ø–∏—Å–µ–π")
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            if self.test_results["critical_issues"]:
                self.log(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.test_results['critical_issues'])}):")
                for issue in self.test_results["critical_issues"]:
                    self.log(f"‚ùå {issue}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            
            if self.test_results["api_cargo_count"] == 0 and self.test_results["placement_records_in_db"] > 0:
                self.log("üîß 1. –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: API –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ placement_records")
                self.log("üîß 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É JOIN –º–µ–∂–¥—É placement_records –∏ –¥—Ä—É–≥–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏")
                self.log("üîß 3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ warehouse_id")
                self.log("üîß 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ placement_records")
                self.log("üîß 5. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if self.test_results["api_cargo_count"] == self.test_results["expected_cargo_count"]:
                success_rate = 100.0
                self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨: {success_rate}% - –í–°–ï –ó–ê–ü–ò–°–ò –ù–ê–ô–î–ï–ù–´")
            else:
                success_rate = (self.test_results["api_cargo_count"] / self.test_results["expected_cargo_count"]) * 100
                self.log(f"\nüìä –£–°–ü–ï–®–ù–û–°–¢–¨: {success_rate:.1f}% - –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê")
            
            # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
            self.log(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            self.log("1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É API layout-with-cargo")
            self.log("2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–æ—Ä–º–∞—Ç–∞–º warehouse_id")
            self.log("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            self.log("4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ 13 –æ–∂–∏–¥–∞–µ–º—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}", "ERROR")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API layout-with-cargo: –ü–æ–∏—Å–∫ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
    print("=" * 80)
    
    tester = LayoutWithCargoAPIDiagnosticTester()
    
    try:
        success = tester.run_comprehensive_diagnosis()
        
        if success:
            print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        else:
            print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()