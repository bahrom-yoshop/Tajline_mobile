#!/usr/bin/env python3
"""
üéâ –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Ç—Ä–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–¢–û–ì–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–¢–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª–∏ —Ä–µ—à–µ–Ω—ã –≤—Å–µ 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:

‚úÖ –ü–†–û–ë–õ–ï–ú–ê 1: –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —è—á–µ–π–∫–∏
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω–µ–Ω —Å—Ç–∞—Ä—ã–π API `/api/operator/cargo/place` –Ω–∞ –Ω–æ–≤—ã–π `/api/operator/cargo/place-individual` –≤ —Ñ—É–Ω–∫—Ü–∏–∏ `performAutoPlacement`

‚úÖ –ü–†–û–ë–õ–ï–ú–ê 2: –ö–Ω–æ–ø–∫–∞ –ø–µ—á–∞—Ç–∏ QR –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç  
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ onClick handler –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–î–µ–π—Å—Ç–≤–∏—è"

‚úÖ –ü–†–û–ë–õ–ï–ú–ê 3: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π API `/api/operator/cargo/fully-placed` –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤"

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï TESTS –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
1. GET /api/operator/cargo/fully-placed 
   - –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 5/5, 10/10 (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ)
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: items, pagination, summary
   - Individual units –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
2. POST /api/operator/cargo/place-individual
   - –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ warehouse_id (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ individual units
   - –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å placement_details

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
3. GET /api/operator/placement-progress
   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
4. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É 5/5:
   - –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–∑ —Å 5 –µ–¥–∏–Ω–∏—Ü–∞–º–∏
   - –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤—Å–µ 5 –µ–¥–∏–Ω–∏—Ü
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ `/api/operator/cargo/fully-placed`

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- 100% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö endpoints
- –ù–æ–≤—ã–π API `/api/operator/cargo/fully-placed` —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- Individual units —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API
- –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
- –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class CriticalFixesFinalTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_cargo_id = None
        self.test_individual_numbers = []
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_fully_placed_api(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–†–û–í–ï–†–ö–ê –ù–û–í–û–ì–û API –î–õ–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ó–ê–Ø–í–û–ö")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["items", "pagination"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    items = data.get("items", [])
                    pagination = data.get("pagination", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    pagination_fields = ["total_count", "page", "per_page", "total_pages"]
                    missing_pagination = [field for field in pagination_fields if field not in pagination]
                    
                    if not missing_pagination:
                        total_count = pagination.get("total_count", 0)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if items:
                            first_item = items[0]
                            item_fields = ["cargo_number", "individual_units"]
                            missing_item_fields = [field for field in item_fields if field not in first_item]
                            
                            if not missing_item_fields:
                                individual_units = first_item.get("individual_units", [])
                                
                                self.log_test(
                                    "–ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                                    True,
                                    f"API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –°—Ç—Ä—É–∫—Ç—É—Ä–∞: items ({len(items)}), pagination (total: {total_count}), individual units –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏"
                                )
                                return True
                            else:
                                self.log_test(
                                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ fully-placed API",
                                    False,
                                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö: {missing_item_fields}",
                                    str(item_fields),
                                    str(list(first_item.keys()))
                                )
                                return False
                        else:
                            # –ù–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                            self.log_test(
                                "–ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                                True,
                                f"API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {total_count}"
                            )
                            return True
                    else:
                        self.log_test(
                            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ fully-placed API",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {missing_pagination}",
                            str(pagination_fields),
                            str(list(pagination.keys()))
                        )
                        return False
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ fully-placed API",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "–ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_fixed_place_individual_api(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è units: {units_response.status_code}")
                return False
            
            units_data = units_response.json()
            items = units_data.get("items", [])
            
            if not items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö individual units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            first_group = items[0]
            units = first_group.get("units", [])
            
            if not units:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, "–ù–µ—Ç –µ–¥–∏–Ω–∏—Ü –≤ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ")
                return False
            
            test_unit = units[0]
            individual_number = test_unit.get("individual_number")
            
            if not individual_number:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual number", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç individual_number")
                return False
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ë–ï–ó warehouse_id (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            placement_data = {
                "individual_number": individual_number,
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
                # –ù–ï –£–ö–ê–ó–´–í–ê–ï–ú warehouse_id - –¥–æ–ª–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            }
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                if data.get("success", False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å placement_details
                    placement_details = data.get("placement_details", {})
                    
                    if placement_details:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –≤ placement_details
                        detail_fields = ["block", "shelf", "cell", "placed_by", "placed_at"]
                        present_details = [field for field in detail_fields if field in placement_details]
                        
                        if len(present_details) >= 3:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 3 –∏–∑ 5 –ø–æ–ª–µ–π
                            self.log_test(
                                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ë–ï–ó warehouse_id",
                                True,
                                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ! –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ individual units, –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å placement_details: {placement_details}"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å placement_details",
                                False,
                                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª–µ–π –≤ placement_details. –ù–∞–π–¥–µ–Ω–æ: {present_details}",
                                f"–ú–∏–Ω–∏–º—É–º 3 –∏–∑ {detail_fields}",
                                str(present_details)
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å placement_details",
                            False,
                            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç placement_details –≤ –æ—Ç–≤–µ—Ç–µ",
                            "placement_details –æ–±—ä–µ–∫—Ç",
                            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                        )
                        return False
                else:
                    error_message = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.log_test(
                        "–†–∞–∑–º–µ—â–µ–Ω–∏–µ individual unit",
                        False,
                        f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {error_message}",
                        "success: true",
                        f"success: false, message: {error_message}"
                    )
                    return False
            else:
                self.log_test(
                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}",
                    "200",
                    str(response.status_code)
                )
                return False
                
        except Exception as e:
            self.log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_progress_update(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response_before = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
            
            if response_before.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–¥–æ)", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {response_before.status_code}")
                return False
            
            progress_before = response_before.json()
            placed_before = progress_before.get("placed_units", 0)
            total_before = progress_before.get("total_units", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞
            pending_before = progress_before.get("pending_units", 0)
            progress_percentage_before = progress_before.get("progress_percentage", 0)
            progress_text_before = progress_before.get("progress_text", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            if total_before == placed_before + pending_before:
                expected_percentage = (placed_before / total_before * 100) if total_before > 0 else 0
                
                if abs(progress_percentage_before - expected_percentage) < 0.1:  # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    self.log_test(
                        "–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: —Ä–∞–∑–º–µ—â–µ–Ω–æ {placed_before}/{total_before}, –ø—Ä–æ—Ü–µ–Ω—Ç: {progress_percentage_before}%, —Ç–µ–∫—Å—Ç: '{progress_text_before}'"
                    )
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    response_after = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
                    
                    if response_after.status_code == 200:
                        progress_after = response_after.json()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã
                        if (progress_after.get("total_units") == total_before and 
                            progress_after.get("placed_units") >= placed_before):  # –ú–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –∏–∑-–∑–∞ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
                            
                            self.log_test(
                                "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                True,
                                f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–±–∏–ª–µ–Ω –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è. –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {progress_after.get('placed_units')}/{progress_after.get('total_units')}"
                            )
                            return True
                        else:
                            self.log_test(
                                "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                False,
                                f"–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã",
                                f"total: {total_before}, placed: >= {placed_before}",
                                f"total: {progress_after.get('total_units')}, placed: {progress_after.get('placed_units')}"
                            )
                            return False
                    else:
                        self.log_test("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", False, f"–û—à–∏–±–∫–∞: {response_after.status_code}")
                        return False
                else:
                    self.log_test(
                        "–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞",
                        f"{expected_percentage:.1f}%",
                        f"{progress_percentage_before}%"
                    )
                    return False
            else:
                self.log_test(
                    "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞: {total_before} ‚â† {placed_before} + {pending_before}",
                    f"{placed_before + pending_before}",
                    f"{total_before}"
                )
                return False
                
        except Exception as e:
            self.log_test("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_create_fully_placed_application(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 4: –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ó–ú–ï–©–ï–ù–ù–û–ô –ó–ê–Ø–í–ö–ò –î–õ–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å 5 –µ–¥–∏–Ω–∏—Ü–∞–º–∏
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79999999999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "+79888888888",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ 5/5",
                        "quantity": 5,
                        "weight": 10.0,
                        "price_per_kg": 100.0,
                        "total_amount": 1000.0
                    }
                ]
            }
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑
            create_response = self.session.post(
                f"{API_BASE}/operator/cargo/accept",
                json=cargo_data,
                timeout=30
            )
            
            if create_response.status_code != 200:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ 5/5", False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {create_response.status_code}")
                return False
            
            created_cargo = create_response.json()
            cargo_id = created_cargo.get("cargo_id")
            cargo_number = created_cargo.get("cargo_number")
            
            if not cargo_id or not cargo_number:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ 5/5", False, "–ù–µ –ø–æ–ª—É—á–µ–Ω—ã cargo_id –∏–ª–∏ cargo_number")
                return False
            
            self.log_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ 5/5",
                True,
                f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id})"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            
            units_response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if units_response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual units —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", False, f"–û—à–∏–±–∫–∞: {units_response.status_code}")
                return False
            
            units_data = units_response.json()
            items = units_data.get("items", [])
            
            # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É
            target_group = None
            for group in items:
                if group.get("cargo_number") == cargo_number:
                    target_group = group
                    break
            
            if not target_group:
                self.log_test("–ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ó–∞—è–≤–∫–∞ {cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                return False
            
            units = target_group.get("units", [])
            
            if len(units) != 5:
                self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥–∏–Ω–∏—Ü", False, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 –µ–¥–∏–Ω–∏—Ü, –ø–æ–ª—É—á–µ–Ω–æ: {len(units)}")
                return False
            
            # –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ 5 –µ–¥–∏–Ω–∏—Ü
            placed_count = 0
            for i, unit in enumerate(units):
                individual_number = unit.get("individual_number")
                
                if not individual_number:
                    continue
                
                placement_data = {
                    "individual_number": individual_number,
                    "block_number": 1,
                    "shelf_number": 1,
                    "cell_number": i + 1  # –†–∞–∑–Ω—ã–µ —è—á–µ–π–∫–∏
                }
                
                place_response = self.session.post(
                    f"{API_BASE}/operator/cargo/place-individual",
                    json=placement_data,
                    timeout=30
                )
                
                if place_response.status_code == 200:
                    place_data = place_response.json()
                    if place_data.get("success", False):
                        placed_count += 1
                        print(f"   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ {i+1}/5: {individual_number}")
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É {i+1}/5: {place_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                else:
                    print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –µ–¥–∏–Ω–∏—Ü—ã {i+1}/5: {place_response.status_code}")
            
            if placed_count == 5:
                self.log_test(
                    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö 5 –µ–¥–∏–Ω–∏—Ü",
                    True,
                    f"–í—Å–µ 5 –µ–¥–∏–Ω–∏—Ü —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ fully-placed
                time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                
                fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
                
                if fully_placed_response.status_code == 200:
                    fully_placed_data = fully_placed_response.json()
                    fully_placed_items = fully_placed_data.get("items", [])
                    
                    # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
                    found_in_fully_placed = False
                    for item in fully_placed_items:
                        if item.get("cargo_number") == cargo_number:
                            found_in_fully_placed = True
                            break
                    
                    if found_in_fully_placed:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ fully-placed",
                            True,
                            f"–ó–∞—è–≤–∫–∞ {cargo_number} —É—Å–ø–µ—à–Ω–æ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ fully-placed",
                            False,
                            f"–ó–∞—è–≤–∫–∞ {cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                            f"–ó–∞—è–≤–∫–∞ {cargo_number} –≤ —Å–ø–∏—Å–∫–µ",
                            f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ {len(fully_placed_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                        )
                        return False
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ fully-placed –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {fully_placed_response.status_code}")
                    return False
            else:
                self.log_test(
                    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö 5 –µ–¥–∏–Ω–∏—Ü",
                    False,
                    f"–†–∞–∑–º–µ—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ {placed_count} –∏–∑ 5 –µ–¥–∏–Ω–∏—Ü",
                    "5 –µ–¥–∏–Ω–∏—Ü",
                    f"{placed_count} –µ–¥–∏–Ω–∏—Ü"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üéâ –ù–ê–ß–ê–õ–û –ò–¢–û–ì–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –í TAJLINE.TJ")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        test_results = []
        
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 1: –ù–æ–≤—ã–π API –¥–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫", self.test_fully_placed_api()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ë–ï–ó warehouse_id", self.test_fixed_place_individual_api()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", self.test_placement_progress_update()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ 5/5", self.test_create_fully_placed_application()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–¢–û–ì–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
            print("‚úÖ –ù–æ–≤—ã–π API `/api/operator/cargo/fully-placed` —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ Individual units —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API")
            print("‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        elif success_rate >= 75:
            print("üéØ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        elif success_rate >= 50:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç.")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        return success_rate >= 75  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 75% –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CriticalFixesFinalTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\n‚ùå –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        return 1

if __name__ == "__main__":
    exit(main())