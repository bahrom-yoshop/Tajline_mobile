#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ TAJLINE.TJ:

1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ /api/operator/cargo/available-for-placement
3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:
   - POST /api/operator/cargo/bulk-remove-from-placement
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 2-3 —Ä–µ–∞–ª—å–Ω—ã—Ö cargo_id –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø:
- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —á–µ–∫–±–æ–∫—Å–æ–º "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" 
- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
- –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
- –ß–µ–∫–±–æ–∫—Å –Ω–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –≥—Ä—É–∑–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
- Backend API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ 100 –≥—Ä—É–∑–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö

–¢–ï–°–¢–ò–†–£–ï–ú–´–ï –°–¶–ï–ù–ê–†–ò–ò:
1. –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ 2-3 –≥—Ä—É–∑–æ–≤
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 100 –≥—Ä—É–∑–æ–≤)
3. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- API –¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
- –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: deleted_count, total_requested, deleted_cargo_numbers
- –°–æ–∑–¥–∞–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
- –ò–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–æ–≤ –Ω–∞ "removed_from_placement"
"""

import requests
import json
import sys
from datetime import datetime
from typing import List, Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-logistics-1.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
WAREHOUSE_OPERATOR = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class BulkDeletionTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.operator_info = None
        self.test_results = []
        self.available_cargo = []
        
    def log_result(self, test_name: str, success: bool, message: str, details: Any = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {details}")
    
    def authenticate_warehouse_operator(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ ({WAREHOUSE_OPERATOR['phone']})...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user", {})
                
                if self.operator_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.operator_token}"
                    })
                    
                    operator_name = self.operator_info.get('full_name', 'Unknown')
                    operator_role = self.operator_info.get('role', 'Unknown')
                    operator_number = self.operator_info.get('user_number', 'Unknown')
                    
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (–Ω–æ–º–µ—Ä: {operator_number}), —Ä–æ–ª—å: {operator_role}",
                        {
                            "operator_name": operator_name,
                            "operator_role": operator_role,
                            "operator_number": operator_number,
                            "token_received": True
                        }
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
                    False, 
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"Exception: {str(e)}")
            return False
    
    def get_available_cargo_for_placement(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print(f"\nüì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                if items:
                    self.available_cargo = items
                    cargo_count = len(items)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    sample_cargo_ids = [cargo.get("id") for cargo in items[:5] if cargo.get("id")]
                    sample_cargo_numbers = [cargo.get("cargo_number") for cargo in items[:5] if cargo.get("cargo_number")]
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {
                            "total_cargo": cargo_count,
                            "sample_cargo_ids": sample_cargo_ids,
                            "sample_cargo_numbers": sample_cargo_numbers,
                            "first_cargo_structure": items[0] if items else None
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {"response_data": data}
                    )
                    return False
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", 
                False, 
                f"Exception: {str(e)}"
            )
            return False
    
    def test_bulk_deletion_success(self, cargo_ids: List[str]) -> bool:
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è 2-3 –≥—Ä—É–∑–æ–≤"""
        print(f"\nüóëÔ∏è –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è {len(cargo_ids)} –≥—Ä—É–∑–æ–≤...")
        
        try:
            request_data = {
                "cargo_ids": cargo_ids
            }
            
            response = self.session.delete(
                f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement",
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                success = data.get("success", False)
                deleted_count = data.get("deleted_count", 0)
                total_requested = data.get("total_requested", 0)
                deleted_cargo_numbers = data.get("deleted_cargo_numbers", [])
                message = data.get("message", "")
                
                if success and deleted_count > 0:
                    self.log_result(
                        "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ (2-3 –≥—Ä—É–∑–∞)",
                        True,
                        f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} –≥—Ä—É–∑–æ–≤",
                        {
                            "success": success,
                            "deleted_count": deleted_count,
                            "total_requested": total_requested,
                            "deleted_cargo_numbers": deleted_cargo_numbers,
                            "message": message,
                            "requested_cargo_ids": cargo_ids
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ (2-3 –≥—Ä—É–∑–∞)",
                        False,
                        f"–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: success={success}, deleted_count={deleted_count}",
                        data
                    )
                    return False
            else:
                self.log_result(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ (2-3 –≥—Ä—É–∑–∞)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ (2-3 –≥—Ä—É–∑–∞)", 
                False, 
                f"Exception: {str(e)}"
            )
            return False
    
    def test_bulk_deletion_limit_validation(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º 100 –≥—Ä—É–∑–æ–≤"""
        print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 –≥—Ä—É–∑–æ–≤)...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ 101 —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ cargo_id
            fake_cargo_ids = [f"fake-cargo-id-{i:03d}" for i in range(1, 102)]
            
            request_data = {
                "cargo_ids": fake_cargo_ids
            }
            
            response = self.session.delete(
                f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement",
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 422:
                error_data = response.json()
                detail = error_data.get("detail", [])
                
                # Check if it's a Pydantic validation error for too many items
                if isinstance(detail, list) and len(detail) > 0:
                    first_error = detail[0]
                    if (first_error.get("type") == "too_long" and 
                        "cargo_ids" in first_error.get("loc", []) and
                        first_error.get("ctx", {}).get("max_length") == 100):
                        self.log_result(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 –≥—Ä—É–∑–æ–≤)",
                            True,
                            f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —Å {len(fake_cargo_ids)} –≥—Ä—É–∑–∞–º–∏ (Pydantic validation)",
                            {
                                "status_code": response.status_code,
                                "validation_error": first_error,
                                "requested_count": len(fake_cargo_ids)
                            }
                        )
                        return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 –≥—Ä—É–∑–æ–≤)",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {detail}",
                        error_data
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 –≥—Ä—É–∑–æ–≤)",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 –≥—Ä—É–∑–æ–≤)", 
                False, 
                f"Exception: {str(e)}"
            )
            return False
    
    def test_empty_cargo_ids_validation(self) -> bool:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ cargo_ids"""
        print(f"\nüö´ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ cargo_ids...")
        
        try:
            request_data = {
                "cargo_ids": []
            }
            
            response = self.session.delete(
                f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement",
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 422:
                error_data = response.json()
                detail = error_data.get("detail", [])
                
                # Check if it's a Pydantic validation error for empty list
                if isinstance(detail, list) and len(detail) > 0:
                    first_error = detail[0]
                    if (first_error.get("type") == "too_short" and 
                        "cargo_ids" in first_error.get("loc", []) and
                        first_error.get("ctx", {}).get("min_length") == 1):
                        self.log_result(
                            "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ cargo_ids",
                            True,
                            "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º (Pydantic validation)",
                            {
                                "status_code": response.status_code,
                                "validation_error": first_error
                            }
                        )
                        return True
                else:
                    self.log_result(
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ cargo_ids",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {detail}",
                        error_data
                    )
                    return False
            else:
                self.log_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ cargo_ids",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ cargo_ids", 
                False, 
                f"Exception: {str(e)}"
            )
            return False
    
    def test_nonexistent_cargo_ids(self) -> bool:
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id"""
        print(f"\nüëª –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ cargo_id
            fake_cargo_ids = [
                "nonexistent-cargo-id-1",
                "nonexistent-cargo-id-2",
                "fake-uuid-12345"
            ]
            
            request_data = {
                "cargo_ids": fake_cargo_ids
            }
            
            response = self.session.delete(
                f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement",
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                success = data.get("success", False)
                deleted_count = data.get("deleted_count", 0)
                total_requested = data.get("total_requested", 0)
                deleted_cargo_numbers = data.get("deleted_cargo_numbers", [])
                
                # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ deleted_count –±—É–¥–µ—Ç 0, —Ç–∞–∫ –∫–∞–∫ –≥—Ä—É–∑—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if success and deleted_count == 0 and total_requested == len(fake_cargo_ids):
                    self.log_result(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ cargo_id: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested}",
                        {
                            "success": success,
                            "deleted_count": deleted_count,
                            "total_requested": total_requested,
                            "deleted_cargo_numbers": deleted_cargo_numbers,
                            "fake_cargo_ids": fake_cargo_ids
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={success}, deleted_count={deleted_count}",
                        data
                    )
                    return False
            else:
                self.log_result(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id", 
                False, 
                f"Exception: {str(e)}"
            )
            return False
    
    def verify_cargo_status_change(self, cargo_ids: List[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–æ–≤ –Ω–∞ 'removed_from_placement'"""
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
            response = self.session.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                current_items = data.get("items", [])
                current_cargo_ids = [cargo.get("id") for cargo in current_items if cargo.get("id")]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –±–æ–ª—å—à–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ
                removed_cargo_ids = []
                still_present_cargo_ids = []
                
                for cargo_id in cargo_ids:
                    if cargo_id not in current_cargo_ids:
                        removed_cargo_ids.append(cargo_id)
                    else:
                        still_present_cargo_ids.append(cargo_id)
                
                if len(removed_cargo_ids) > 0 and len(still_present_cargo_ids) == 0:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–æ–≤",
                        True,
                        f"–í—Å–µ {len(removed_cargo_ids)} –≥—Ä—É–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        {
                            "removed_cargo_ids": removed_cargo_ids,
                            "still_present_cargo_ids": still_present_cargo_ids,
                            "current_available_count": len(current_items)
                        }
                    )
                    return True
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–æ–≤",
                        False,
                        f"–ù–µ –≤—Å–µ –≥—Ä—É–∑—ã —É–¥–∞–ª–µ–Ω—ã: —É–¥–∞–ª–µ–Ω–æ {len(removed_cargo_ids)}, –æ—Å—Ç–∞–ª–æ—Å—å {len(still_present_cargo_ids)}",
                        {
                            "removed_cargo_ids": removed_cargo_ids,
                            "still_present_cargo_ids": still_present_cargo_ids
                        }
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–æ–≤",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–æ–≤", 
                False, 
                f"Exception: {str(e)}"
            )
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ TAJLINE.TJ")
        print("=" * 100)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if not self.get_available_cargo_for_placement():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        self.test_empty_cargo_ids_validation()
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ 100 –≥—Ä—É–∑–æ–≤
        self.test_bulk_deletion_limit_validation()
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö cargo_id
        self.test_nonexistent_cargo_ids()
        
        # –®–∞–≥ 6: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
        if len(self.available_cargo) >= 2:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo_count = min(3, len(self.available_cargo))
            test_cargo_ids = [cargo.get("id") for cargo in self.available_cargo[:test_cargo_count] if cargo.get("id")]
            
            if len(test_cargo_ids) >= 2:
                print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {len(test_cargo_ids)} —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
                print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ cargo_id: {test_cargo_ids}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                bulk_deletion_success = self.test_bulk_deletion_success(test_cargo_ids)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if bulk_deletion_success:
                    self.verify_cargo_status_change(test_cargo_ids)
            else:
                print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ cargo_id –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        return success_rate >= 75.0
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"   {status} {result['test']}: {result['message']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        critical_tests = [
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", 
            "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ (2-3 –≥—Ä—É–∑–∞)"
        ]
        
        critical_success = all(
            any(result["test"] == test and result["success"] for result in self.test_results)
            for test in critical_tests
        )
        
        print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        if critical_success:
            print("   ‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("   ‚úÖ API –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print("   ‚úÖ –°–æ–∑–¥–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")
            print("   ‚úÖ –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–æ–≤ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 'removed_from_placement'")
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
            print("   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ")
        
        print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        if success_rate >= 90:
            print("   üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
        elif success_rate >= 75:
            print("   ‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        else:
            print("   ‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    tester = BulkDeletionTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        sys.exit(1)