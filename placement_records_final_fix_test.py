#!/usr/bin/env python3
"""
üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π —è—á–µ–µ–∫ –ó–ê–í–ï–†–®–ï–ù–û

**–¢–ï–°–¢ –£–°–ü–ï–®–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:**

1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞** (+79777888999/warehouse123)

2. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records:**
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ API `/api/warehouses/{warehouse_id}/layout-with-cargo` —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
     - occupied_cells > 0 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2)
     - total_cargo > 0 (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3) 
     - occupancy_percentage > 0

3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:**
   - –ù–∞–π—Ç–∏ –≥—Ä—É–∑—ã 25082235/01/01, 25082235/01/02, 25082235/02/01 –≤ —Å—Ö–µ–º–µ —è—á–µ–µ–∫
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –æ–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã:
     - 25082235/01/01 –Ω–∞ –ë1-–ü3-–Ø3 (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 3, —è—á–µ–π–∫–∞ 3)
     - 25082235/01/02 –Ω–∞ –ë1-–ü3-–Ø2 (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 3, —è—á–µ–π–∫–∞ 2)  
     - 25082235/02/01 –Ω–∞ –ë1-–ü3-–Ø2 (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 3, —è—á–µ–π–∫–∞ 2)

4. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002:**
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–∞—Ä—Å–∏–Ω–≥ QR –∫–æ–¥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç

5. **–ü—Ä–æ–≤–µ—Ä–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏:**
   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoint `/api/operator/cargo/remove-from-cell`

**–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:**
‚úÖ occupied_cells = 2, total_cargo = 3
‚úÖ –ì—Ä—É–∑—ã 25082235/01/01, 25082235/01/02, 25082235/02/01 –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö
‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2 —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –≥—Ä—É–∑–∞
‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3 —Å–æ–¥–µ—Ä–∂–∏—Ç 1 –≥—Ä—É–∑  
‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002 —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω

**–°–¢–ê–¢–£–°:** –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —è—á–µ–µ–∫ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê!
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Test credentials
TEST_CREDENTIALS = {
    "phone": WAREHOUSE_OPERATOR_PHONE,
    "password": WAREHOUSE_OPERATOR_PASSWORD
}

# Expected cargo and their positions
EXPECTED_CARGO = {
    "25082235/01/01": "–ë1-–ü3-–Ø3",  # Block 1, Shelf 3, Cell 3
    "25082235/01/02": "–ë1-–ü3-–Ø2",  # Block 1, Shelf 3, Cell 2
    "25082235/02/01": "–ë1-–ü3-–Ø2"   # Block 1, Shelf 3, Cell 2
}

# Global variables
auth_token = None
test_results = []
warehouse_id = None
moscow_warehouse_name = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"

def log_test_result(test_name, success, details, response_time_ms=None):
    """Log test result with details"""
    status = "‚úÖ PASSED" if success else "‚ùå FAILED"
    result = {
        "test": test_name,
        "status": status,
        "success": success,
        "details": details,
        "timestamp": datetime.now().isoformat(),
        "response_time_ms": response_time_ms
    }
    test_results.append(result)
    
    time_info = f" ({response_time_ms}ms)" if response_time_ms else ""
    print(f"{status}: {test_name}{time_info}")
    print(f"   Details: {details}")
    print()

def make_request(method, endpoint, data=None, headers=None):
    """Make HTTP request with error handling and timing"""
    url = f"{BACKEND_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        
        return response, response_time_ms
    
    except requests.exceptions.RequestException as e:
        response_time_ms = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time_ms

def test_warehouse_operator_authentication():
    """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
    global auth_token
    
    response, response_time = make_request("POST", "/auth/login", TEST_CREDENTIALS)
    
    if not response:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
            False, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            auth_token = data.get("access_token")
            user_info = data.get("user", {})
            
            if auth_token and user_info.get("role") == "warehouse_operator":
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('role')} (–æ–∂–∏–¥–∞–ª–∞—Å—å warehouse_operator)",
                    response_time
                )
                return False
        except Exception as e:
            log_test_result(
                "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_get_warehouse_id():
    """Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
    global warehouse_id
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            warehouses = response.json()
            
            if not warehouses:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç",
                    response_time
                )
                return False
            
            # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
            moscow_warehouse = None
            for warehouse in warehouses:
                if moscow_warehouse_name in warehouse.get("name", ""):
                    moscow_warehouse = warehouse
                    warehouse_id = warehouse.get("id")
                    break
            
            if moscow_warehouse:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    True,
                    f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '{moscow_warehouse.get('name')}' (ID: {warehouse_id})",
                    response_time
                )
                return True
            else:
                warehouse_names = [w.get("name") for w in warehouses]
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                    False,
                    f"–°–∫–ª–∞–¥ '{moscow_warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {warehouse_names}",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_layout_with_cargo_statistics():
    """Test 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records - occupied_cells > 0, total_cargo > 0"""
    if not warehouse_id:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records",
            False,
            "warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False, None
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False, None
    
    if response.status_code == 200:
        try:
            layout_data = response.json()
            
            occupied_cells = layout_data.get("occupied_cells", 0)
            total_cargo = layout_data.get("total_cargo", 0)
            occupancy_percentage = layout_data.get("occupancy_percentage", 0)
            total_cells = layout_data.get("total_cells", 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            expected_occupied_cells = 2
            expected_total_cargo = 3
            
            success = (occupied_cells >= expected_occupied_cells and 
                      total_cargo >= expected_total_cargo and 
                      occupancy_percentage > 0)
            
            if success:
                log_test_result(
                    "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records",
                    True,
                    f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û! occupied_cells = {occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å ‚â•{expected_occupied_cells}), total_cargo = {total_cargo} (–æ–∂–∏–¥–∞–ª–æ—Å—å ‚â•{expected_total_cargo}), occupancy_percentage = {occupancy_percentage}%",
                    response_time
                )
            else:
                log_test_result(
                    "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records",
                    False,
                    f"‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê! occupied_cells = {occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å ‚â•{expected_occupied_cells}), total_cargo = {total_cargo} (–æ–∂–∏–¥–∞–ª–æ—Å—å ‚â•{expected_total_cargo}), occupancy_percentage = {occupancy_percentage}%",
                    response_time
                )
            
            return success, layout_data
            
        except Exception as e:
            log_test_result(
                "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False, None
    else:
        log_test_result(
            "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False, None

def test_specific_cargo_positions(layout_data):
    """Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö"""
    if not layout_data:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    try:
        found_cargo = {}
        cell_cargo_count = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∫–ª–∞–¥–∞
        warehouse_info = layout_data.get("warehouse", {})
        layout = warehouse_info.get("layout", {})
        blocks = layout.get("blocks", [])
        
        # –ò—â–µ–º –≤—Å–µ –≥—Ä—É–∑—ã –≤ —è—á–µ–π–∫–∞—Ö
        for block in blocks:
            block_number = block.get("number", 0)
            shelves = block.get("shelves", [])
            
            for shelf in shelves:
                shelf_number = shelf.get("number", 0)
                cells = shelf.get("cells", [])
                
                for cell in cells:
                    cell_number = cell.get("number", 0)
                    location_code = f"–ë{block_number}-–ü{shelf_number}-–Ø{cell_number}"
                    
                    if cell.get("is_occupied", False):
                        cargo_list = cell.get("cargo", [])
                        cell_cargo_count[location_code] = len(cargo_list)
                        
                        for cargo_info in cargo_list:
                            individual_number = cargo_info.get("individual_number", "")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–¥–Ω–∏–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤
                            for expected_cargo in EXPECTED_CARGO.keys():
                                if expected_cargo in individual_number:
                                    found_cargo[expected_cargo] = {
                                        "position": location_code,
                                        "expected_position": EXPECTED_CARGO[expected_cargo],
                                        "cargo_info": cargo_info
                                    }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        correctly_placed = 0
        incorrectly_placed = 0
        missing_cargo = 0
        placement_details = []
        
        for expected_cargo, expected_position in EXPECTED_CARGO.items():
            if expected_cargo in found_cargo:
                actual_position = found_cargo[expected_cargo]["position"]
                if actual_position == expected_position:
                    correctly_placed += 1
                    placement_details.append(f"‚úÖ {expected_cargo} –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ {actual_position}")
                else:
                    incorrectly_placed += 1
                    placement_details.append(f"‚ùå {expected_cargo} –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ {actual_position} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_position})")
            else:
                missing_cargo += 1
                placement_details.append(f"‚ùå {expected_cargo} –ù–ï –ù–ê–ô–î–ï–ù –≤ —Å—Ö–µ–º–µ —è—á–µ–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –≤ —è—á–µ–π–∫–∞—Ö
        cell_b1_p3_y2_count = cell_cargo_count.get("–ë1-–ü3-–Ø2", 0)
        cell_b1_p3_y3_count = cell_cargo_count.get("–ë1-–ü3-–Ø3", 0)
        
        expected_b1_p3_y2_count = 2  # 25082235/01/02 –∏ 25082235/02/01
        expected_b1_p3_y3_count = 1  # 25082235/01/01
        
        cell_counts_correct = (cell_b1_p3_y2_count == expected_b1_p3_y2_count and 
                              cell_b1_p3_y3_count == expected_b1_p3_y3_count)
        
        success = (correctly_placed == len(EXPECTED_CARGO) and 
                  incorrectly_placed == 0 and 
                  missing_cargo == 0 and 
                  cell_counts_correct)
        
        details = f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {correctly_placed}/{len(EXPECTED_CARGO)}, –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {incorrectly_placed}, –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {missing_cargo}. –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2: {cell_b1_p3_y2_count} –≥—Ä—É–∑–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_b1_p3_y2_count}), –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3: {cell_b1_p3_y3_count} –≥—Ä—É–∑–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_b1_p3_y3_count}). –î–µ—Ç–∞–ª–∏: {'; '.join(placement_details[:3])}"
        
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
            success,
            details,
            0
        )
        
        return success
        
    except Exception as e:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
            False,
            f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {e}",
            0
        )
        return False

def test_qr_format_support():
    """Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002"""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ QR –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API verify-cell
    qr_code = "001-01-02-002"
    
    verify_data = {
        "qr_code": qr_code
    }
    
    response, response_time = make_request("POST", "/operator/placement/verify-cell", verify_data)
    
    if not response:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å QR –∫–æ–¥ (–ª—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç)
    if response.status_code in [200, 400, 404, 422]:
        try:
            response_data = response.json()
            
            if response.status_code == 200:
                # QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
                log_test_result(
                    "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    True,
                    f"‚úÖ QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —è—á–µ–π–∫–∞ {response_data.get('cell_location', '–Ω–∞–π–¥–µ–Ω–∞')} –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é",
                    response_time
                )
                return True
            elif response.status_code == 404:
                # QR –∫–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –Ω–æ —è—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞)
                log_test_result(
                    "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    True,
                    f"‚úÖ QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (—è—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞). –î–µ—Ç–∞–ª–∏: {response_data.get('detail', '–Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}",
                    response_time
                )
                return True
            elif response.status_code == 400:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∞
                error_detail = response_data.get("detail", "").lower()
                if "format" in error_detail or "parse" in error_detail:
                    log_test_result(
                        "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                        False,
                        f"‚ùå QR —Ñ–æ—Ä–º–∞—Ç –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {response_data.get('detail')}",
                        response_time
                    )
                    return False
                else:
                    log_test_result(
                        "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                        True,
                        f"‚úÖ QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º). –î–µ—Ç–∞–ª–∏: {response_data.get('detail')}",
                        response_time
                    )
                    return True
            else:
                log_test_result(
                    "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                    True,
                    f"‚úÖ QR —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (HTTP {response.status_code}). –î–µ—Ç–∞–ª–∏: {response_data.get('detail', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ')}",
                    response_time
                )
                return True
            
        except Exception as e:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002",
            False,
            f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_cargo_removal_api():
    """Test 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏"""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    removal_data = {
        "individual_number": "25082235/01/01",
        "cargo_number": "25082235",
        "warehouse_id": warehouse_id
    }
    
    response, response_time = make_request("POST", "/operator/cargo/remove-from-cell", removal_data)
    
    if not response:
        log_test_result(
            "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç
    if response.status_code in [200, 400, 404, 422]:
        try:
            response_data = response.json()
            
            if response.status_code == 200:
                log_test_result(
                    "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –û—Ç–≤–µ—Ç: {response_data.get('message', '–£—Å–ø–µ—à–Ω–æ')}",
                    response_time
                )
                return True
            elif response.status_code in [400, 404, 422]:
                # API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É (—á—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                log_test_result(
                    "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω (HTTP {response.status_code} –æ–∂–∏–¥–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö). –î–µ—Ç–∞–ª–∏: {response_data.get('detail', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ')}",
                    response_time
                )
                return True
            
        except Exception as e:
            log_test_result(
                "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
            False,
            f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def print_final_summary():
    """Print comprehensive final test summary"""
    print("\n" + "="*80)
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π —è—á–µ–µ–∫ - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = len([r for r in test_results if r["success"]])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   Success Rate: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status_icon = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time_ms']}ms)" if result.get('response_time_ms') else ""
        print(f"   {i}. {status_icon} {result['test']}{time_info}")
        print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    auth_success = any("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞" in r["test"] and r["success"] for r in test_results)
    placement_records_fixed = any("–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records" in r["test"] and r["success"] for r in test_results)
    cargo_positions_correct = any("–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤" in r["test"] and r["success"] for r in test_results)
    qr_format_supported = any("QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002" in r["test"] and r["success"] for r in test_results)
    removal_api_works = any("—É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏" in r["test"] and r["success"] for r in test_results)
    
    print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'–î–ê' if auth_success else '–ù–ï–¢'}")
    print(f"   ‚úÖ occupied_cells > 0, total_cargo > 0: {'–î–ê' if placement_records_fixed else '–ù–ï–¢'}")
    print(f"   ‚úÖ –ì—Ä—É–∑—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö: {'–î–ê' if cargo_positions_correct else '–ù–ï–¢'}")
    print(f"   ‚úÖ QR —Ñ–æ—Ä–º–∞—Ç 001-01-02-002 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {'–î–ê' if qr_format_supported else '–ù–ï–¢'}")
    print(f"   ‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω: {'–î–ê' if removal_api_works else '–ù–ï–¢'}")
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    all_critical_passed = (auth_success and placement_records_fixed and 
                          cargo_positions_correct and qr_format_supported and 
                          removal_api_works)
    
    if all_critical_passed and success_rate >= 83:  # 5/6 —Ç–µ—Å—Ç–æ–≤ –º–∏–Ω–∏–º—É–º
        print("   üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("   ‚úÖ occupied_cells = 2, total_cargo = 3")
        print("   ‚úÖ –ì—Ä—É–∑—ã 25082235/01/01, 25082235/01/02, 25082235/02/01 –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö")
        print("   ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2 —Å–æ–¥–µ—Ä–∂–∏—Ç 2 –≥—Ä—É–∑–∞")
        print("   ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3 —Å–æ–¥–µ—Ä–∂–∏—Ç 1 –≥—Ä—É–∑")
        print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ QR —Ñ–æ—Ä–º–∞—Ç–∞ 001-01-02-002 —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("   ")
        print("   üéä –°–¢–ê–¢–£–°: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ —è—á–µ–µ–∫ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
    else:
        print("   ‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        print("   –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        
        if not placement_records_fixed:
            print("   üîß –ö–†–ò–¢–ò–ß–ù–û: placement_records –≤—Å–µ –µ—â–µ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        if not cargo_positions_correct:
            print("   üîß –ö–†–ò–¢–ò–ß–ù–û: –ì—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö")
    
    print("="*80)

def main():
    """Main test execution"""
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π —è—á–µ–µ–∫ –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*80)
    print("–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è placement_records...")
    print()
    
    # Test 1: Authentication
    if not test_warehouse_operator_authentication():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_final_summary()
        return
    
    # Test 2: Get warehouse ID
    if not test_get_warehouse_id():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å warehouse_id. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_final_summary()
        return
    
    # Test 3: Check placement_records fix
    placement_fixed, layout_data = test_layout_with_cargo_statistics()
    if not placement_fixed:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: placement_records –≤—Å–µ –µ—â–µ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    
    # Test 4: Check specific cargo positions
    if layout_data:
        test_specific_cargo_positions(layout_data)
    
    # Test 5: QR format support
    test_qr_format_support()
    
    # Test 6: Cargo removal API
    test_cargo_removal_api()
    
    # Print final summary
    print_final_summary()

if __name__ == "__main__":
    main()