#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π QR-–∫–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ë–õ–ï–ú–´:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª, —á—Ç–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—ë–º –≥—Ä—É–∑–∞" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ 
(–∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –≥—Ä—É–∑" –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ì—Ä—É–∑—ã" ‚Üí "–ü—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π –≥—Ä—É–∑") 
QR-–∫–æ–¥—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç "–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏" –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏—Ö QR-–∫–æ–¥–æ–≤.

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞
2. API endpoint POST /api/operator/cargo/accept –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å cargo_items
3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å CargoItem —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è quantity (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) –∏ total_amount (–æ–±—â–∞—è —Å—É–º–º–∞)
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_number –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
5. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ cargo_items (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 —Ç–∏–ø–∞ –≥—Ä—É–∑–∞: –ø–µ—Ä–≤—ã–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 2, –≤—Ç–æ—Ä–æ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 3)
6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
Backend –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ cargo_items —Å –ø–æ–ª—è–º–∏ quantity –∏ total_amount, 
—á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –Ω–∞ frontend (–ø–æ –æ–¥–Ω–æ–º—É QR-–∫–æ–¥—É –Ω–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É –≥—Ä—É–∑–∞).
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-6.preview.emergentagent.com/api"

def test_warehouse_operator_authorization():
    """
    –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞
    """
    print("1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –§–û–†–ú–ï –ü–†–ò–ï–ú–ê –ì–†–£–ó–ê")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        login_response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            login_result = login_response.json()
            token = login_result.get("access_token")
            user_info = login_result.get("user", {})
            
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: '{user_info.get('full_name', 'Unknown')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'Unknown')}, —Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
            if user_info.get('role') == 'warehouse_operator':
                print(f"   ‚úÖ –†–æ–ª—å 'warehouse_operator' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω")
                return token, user_info
            else:
                print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å: {user_info.get('role')} (–æ–∂–∏–¥–∞–ª–∞—Å—å: warehouse_operator)")
                return None, None
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {login_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {login_response.text}")
            return None, None
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None, None

def test_cargo_accept_endpoint_with_cargo_items(token):
    """
    –¢–µ—Å—Ç 2: API endpoint POST /api/operator/cargo/accept –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å cargo_items
    """
    print("\n2Ô∏è‚É£ API ENDPOINT POST /api/operator/cargo/accept –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò –° CARGO_ITEMS")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    try:
        warehouses_response = requests.get(f"{BACKEND_URL}/operator/warehouses", headers=headers)
        if warehouses_response.status_code != 200:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {warehouses_response.status_code}")
            return None
        
        warehouses = warehouses_response.json()
        if not warehouses:
            print(f"   ‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
            return None
            
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {warehouses[0].get('name', 'Unknown')}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {e}")
        return None
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ cargo_items —Å–æ–≥–ª–∞—Å–Ω–æ review request
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR", 
        "recipient_phone": "+992900111222",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è QR, 123",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55\"",
                "quantity": 2,  # –ü–µ—Ä–≤—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 2
                "weight": 15.0,
                "price_per_kg": 100.0,
                "total_amount": 3000.0  # 2 * 15.0 * 100.0
            },
            {
                "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG", 
                "quantity": 3,  # –í—Ç–æ—Ä–æ–π —Ç–∏–ø –≥—Ä—É–∑–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 3
                "weight": 8.0,
                "price_per_kg": 80.0,
                "total_amount": 1920.0  # 3 * 8.0 * 80.0
            }
        ]
    }
    
    print(f"   üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ cargo_items:")
    print(f"      –ì—Ä—É–∑ ‚Ññ1: {cargo_data['cargo_items'][0]['cargo_name']} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cargo_data['cargo_items'][0]['quantity']})")
    print(f"      –ì—Ä—É–∑ ‚Ññ2: {cargo_data['cargo_items'][1]['cargo_name']} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cargo_data['cargo_items'][1]['quantity']})")
    total_units = cargo_data['cargo_items'][0]['quantity'] + cargo_data['cargo_items'][1]['quantity']
    print(f"      üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {total_units} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {total_units} QR-–∫–æ–¥–æ–≤)")
    
    try:
        cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
        
        if cargo_response.status_code == 200:
            cargo_result = cargo_response.json()
            cargo_number = cargo_result.get("cargo_number")
            cargo_id = cargo_result.get("cargo_id")
            
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (cargo_number): {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
            
            if cargo_number:
                print(f"   ‚úÖ Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_number –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤")
                return cargo_result, cargo_number
            else:
                print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Backend –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_number!")
                return None, None
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: HTTP {cargo_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
            return None, None
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return None, None

def test_cargo_item_model_fields(cargo_result):
    """
    –¢–µ—Å—Ç 3: –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å CargoItem —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è quantity –∏ total_amount
    """
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ú–û–î–ï–õ–ò CARGOITEM - –ü–û–õ–Ø QUANTITY –ò TOTAL_AMOUNT")
    
    if not cargo_result:
        print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_items –≤ –æ—Ç–≤–µ—Ç–µ
    if "cargo_items" not in cargo_result:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ API!")
        print(f"   üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(cargo_result.keys())}")
        return False
    
    cargo_items = cargo_result["cargo_items"]
    print(f"   ‚úÖ cargo_items –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ ({len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç cargo_items
    all_fields_present = True
    for i, item in enumerate(cargo_items, 1):
        print(f"   üì¶ –ì—Ä—É–∑ #{i}: {item.get('cargo_name', 'Unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['quantity', 'total_amount', 'weight', 'price_per_kg', 'cargo_name']
        for field in required_fields:
            if field in item:
                print(f"      ‚úÖ {field}: {item[field]}")
            else:
                print(f"      ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢: {field}")
                all_fields_present = False
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è QR-–∫–æ–¥–æ–≤
        if 'quantity' not in item:
            print(f"      üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ 'quantity' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ CargoItem –º–æ–¥–µ–ª–∏!")
        if 'total_amount' not in item:
            print(f"      üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ 'total_amount' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ CargoItem –º–æ–¥–µ–ª–∏!")
    
    if all_fields_present:
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å CargoItem —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤–∫–ª—é—á–∞—è quantity –∏ total_amount")
        return True
    else:
        print(f"   ‚ùå –ú–æ–¥–µ–ª—å CargoItem –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
        return False

def test_qr_code_generation_readiness(cargo_result, cargo_number):
    """
    –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
    """
    print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–ê–ù–ù–´–• –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò QR-–ö–û–î–û–í")
    
    if not cargo_result or not cargo_number:
        print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ QR-–∫–æ–¥–æ–≤")
        return False
    
    cargo_items = cargo_result.get("cargo_items", [])
    if not cargo_items:
        print("   ‚ùå cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã")
        return False
    
    print(f"   üìã –ë–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
    print(f"   üè∑Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR-–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞:")
    
    total_qr_codes = 0
    for cargo_index, item in enumerate(cargo_items, 1):
        quantity = item.get('quantity', 0)
        cargo_name = item.get('cargo_name', 'Unknown')
        
        print(f"      –ì—Ä—É–∑ #{cargo_index}: {cargo_name} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
        
        for unit_index in range(1, quantity + 1):
            qr_code_id = f"{cargo_number}/{cargo_index:02d}/{unit_index}"
            print(f"         - QR –∫–æ–¥ #{total_qr_codes + 1}: {qr_code_id}")
            total_qr_codes += 1
    
    print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {total_qr_codes}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑ review request (2+3=5)
    expected_total = 5  # 2 –µ–¥–∏–Ω–∏—Ü—ã –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞ + 3 –µ–¥–∏–Ω–∏—Ü—ã –≤—Ç–æ—Ä–æ–≥–æ –≥—Ä—É–∑–∞
    if total_qr_codes == expected_total:
        print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: {expected_total}")
        print(f"   ‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞")
        return True
    else:
        print(f"   ‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QR-–∫–æ–¥–æ–≤ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: {total_qr_codes} != {expected_total}")
        return False

def test_database_data_persistence(token, cargo_number):
    """
    –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ API endpoints
    endpoints_to_check = [
        f"/operator/pickup-requests",  # –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        f"/cargo/all",  # –í—Å–µ –≥—Ä—É–∑—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    ]
    
    for endpoint in endpoints_to_check:
        try:
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {endpoint}")
            response = requests.get(f"{BACKEND_URL}{endpoint}", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É
                found_cargo = None
                if isinstance(data, list):
                    for item in data:
                        if item.get("cargo_number") == cargo_number or item.get("request_number") == cargo_number:
                            found_cargo = item
                            break
                elif isinstance(data, dict) and "items" in data:
                    for item in data["items"]:
                        if item.get("cargo_number") == cargo_number or item.get("request_number") == cargo_number:
                            found_cargo = item
                            break
                
                if found_cargo:
                    print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ {endpoint}")
                    print(f"      üìã –ù–æ–º–µ—Ä: {found_cargo.get('cargo_number', found_cargo.get('request_number', 'Unknown'))}")
                    print(f"      üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {found_cargo.get('sender_full_name', 'Unknown')}")
                    print(f"      üì¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {found_cargo.get('recipient_full_name', 'Unknown')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_items
                    if "cargo_items" in found_cargo:
                        cargo_items = found_cargo["cargo_items"]
                        print(f"      ‚úÖ cargo_items —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ({len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                        
                        for i, item in enumerate(cargo_items, 1):
                            print(f"         –ì—Ä—É–∑ #{i}: {item.get('cargo_name', 'Unknown')}")
                            print(f"            quantity: {item.get('quantity', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                            print(f"            total_amount: {item.get('total_amount', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')}")
                    else:
                        print(f"      ‚ö†Ô∏è cargo_items –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                    
                    return True
                else:
                    print(f"   ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ {endpoint}")
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {endpoint}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {endpoint}: {e}")
    
    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints")
    print(f"   ‚ÑπÔ∏è –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π API")
    return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π QR-–∫–æ–¥–æ–≤ –≤ —Ñ–æ—Ä–º–µ –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ TAJLINE.TJ")
    print("=" * 100)
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    print()
    
    # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    token, user_info = test_warehouse_operator_authorization()
    if not token:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return False
    
    # –¢–µ—Å—Ç 2: API endpoint POST /api/operator/cargo/accept
    cargo_result, cargo_number = test_cargo_accept_endpoint_with_cargo_items(token)
    if not cargo_result:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ API")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ CargoItem
    model_check = test_cargo_item_model_fields(cargo_result)
    
    # –¢–µ—Å—Ç 4: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤
    qr_readiness = test_qr_code_generation_readiness(cargo_result, cargo_number)
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_persistence = test_database_data_persistence(token, cargo_number)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 100)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if token else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   2Ô∏è‚É£ API endpoint POST /api/operator/cargo/accept: {'‚úÖ –ü–†–û–ô–î–ï–ù' if cargo_result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   3Ô∏è‚É£ –ú–æ–¥–µ–ª—å CargoItem (quantity, total_amount): {'‚úÖ –ü–†–û–ô–î–ï–ù' if model_check else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   4Ô∏è‚É£ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤: {'‚úÖ –ü–†–û–ô–î–ï–ù' if qr_readiness else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–†–û–ô–î–ï–ù' if db_persistence else '‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û'}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    critical_tests_passed = all([token, cargo_result, model_check, qr_readiness])
    
    if critical_tests_passed:
        print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ cargo_items —Å –ø–æ–ª—è–º–∏ quantity –∏ total_amount")
        print("‚úÖ Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_number –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –Ω–∞ frontend")
        print("‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞")
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π QR-–∫–æ–¥–æ–≤")
        if not model_check:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ú–æ–¥–µ–ª—å CargoItem –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è quantity –∏ total_amount")
        if not qr_readiness:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Backend –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ QR-–∫–æ–¥–æ–≤")
    
    return critical_tests_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)