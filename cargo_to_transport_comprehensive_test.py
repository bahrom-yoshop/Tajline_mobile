#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–û–õ–ù–´–ô WORKFLOW –≠–¢–ê–ü–ê 2 - –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
===================================================================================

–¶–ï–õ–¨: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π workflow —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TransportStatus enum.

–ü–û–õ–ù–´–ô WORKFLOW:
1. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available'
2. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ‚Üí —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–µ—Å—Å–∏—è, —Å—Ç–∞—Ç—É—Å 'loading'
3. –°–æ–∑–¥–∞—Ç—å –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥–µ
4. –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –≥—Ä—É–∑–∞ ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–µ—Å—Å–∏—é
5. –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
6. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é ‚Üí —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ 'loaded'

ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- POST /api/logistics/cargo-to-transport/scan-transport
- POST /api/logistics/cargo-to-transport/scan-cargo  
- GET /api/logistics/cargo-to-transport/session
- DELETE /api/logistics/cargo-to-transport/session

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- ‚úÖ –í—Å–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
- ‚úÖ –ü–æ–ª–Ω—ã–π workflow –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ
- ‚úÖ –°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –≥—Ä—É–∑–æ–≤ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- ‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"""

import requests
import json
import sys
import os
from datetime import datetime
import time
import uuid
from pymongo import MongoClient

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'cargo_transport')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class CargoToTransportComprehensiveTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_transport_id = None
        self.test_cargo_number = None
        self.current_session_id = None
        self.mongo_client = None
        self.db = None
        self.test_results = {
            "auth_success": False,
            "transport_setup_success": False,
            "cargo_creation_success": False,
            "cargo_placement_success": False,
            "scan_transport_success": False,
            "scan_cargo_success": False,
            "get_session_success": False,
            "delete_session_success": False,
            "full_workflow_success": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def add_test_result(self, test_name, success, details="", response_time=None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results["total_tests"] += 1
        if success:
            self.test_results["passed_tests"] += 1
            status = "‚úÖ –ü–†–û–ô–î–ï–ù"
        else:
            self.test_results["failed_tests"] += 1
            status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            
        time_info = f" ({response_time}ms)" if response_time else ""
        result_entry = f"{status}: {test_name}{time_info}"
        if details:
            result_entry += f" - {details}"
            
        self.test_results["detailed_results"].append(result_entry)
        self.log(result_entry)
        
    def connect_to_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        try:
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            self.mongo_client.admin.command('ping')
            self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {str(e)}", "ERROR")
            return False
        
    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    operator_name = self.operator_info.get("full_name", "Unknown")
                    
                    self.test_results["auth_success"] = True
                    self.add_test_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
                        True, 
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (—Ä–æ–ª—å: warehouse_operator)",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", False, f"HTTP {user_response.status_code}")
                    return False
            else:
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def setup_test_transport(self):
        """–°–æ–∑–¥–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
        self.log("üöõ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        transport_number = f"TEST{int(time.time() % 10000):04d}"
        
        start_time = time.time()
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            response = self.session.post(f"{API_BASE}/transport/create", json={
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
                "driver_phone": "+79999999999",
                "transport_number": transport_number,
                "capacity_kg": 1000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.test_transport_id = data.get("transport_id")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'available' —á–µ—Ä–µ–∑ MongoDB
                if self.db is not None:
                    result = self.db.transports.update_one(
                        {"id": self.test_transport_id},
                        {"$set": {"status": "available", "updated_at": datetime.utcnow()}}
                    )
                    
                    if result.modified_count > 0:
                        self.test_results["transport_setup_success"] = True
                        self.add_test_result(
                            "–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                            True, 
                            f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_number} —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available'",
                            response_time
                        )
                        return True
                    else:
                        self.add_test_result("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
                        return False
                else:
                    self.add_test_result("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB")
                    return False
            else:
                self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {response.status_code}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def create_and_place_test_cargo(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
        self.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞...")
        
        start_time = time.time()
        try:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑
            cargo_response = self.session.post(f"{API_BASE}/operator/cargo/accept", json={
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79999999998",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 
                "recipient_phone": "+79999999997",
                "recipient_address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                "cargo_items": [{
                    "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    "quantity": 1,
                    "weight": 5.0,
                    "price_per_kg": 100.0,
                    "total_amount": 500.0
                }],
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                "payment_method": "cash",
                "payment_amount": 500.0
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if cargo_response.status_code == 200:
                cargo_data = cargo_response.json()
                self.test_cargo_number = cargo_data.get("cargo_number")
                
                self.test_results["cargo_creation_success"] = True
                self.add_test_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", 
                    True, 
                    f"–ì—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {self.test_cargo_number}",
                    response_time
                )
                
                # –†–∞–∑–º–µ—â–∞–µ–º –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥–µ
                return self.place_cargo_on_warehouse()
            else:
                self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"HTTP {cargo_response.status_code}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def place_cargo_on_warehouse(self):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
        self.log("üè≠ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ...")
        
        start_time = time.time()
        try:
            placement_response = self.session.post(f"{API_BASE}/operator/cargo/place-individual", json={
                "individual_number": f"{self.test_cargo_number}/01/01",
                "cell_code": "001-01-01-001"
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if placement_response.status_code == 200:
                self.test_results["cargo_placement_success"] = True
                self.add_test_result(
                    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ", 
                    True, 
                    f"–ì—Ä—É–∑ {self.test_cargo_number} —Ä–∞–∑–º–µ—â–µ–Ω –≤ —è—á–µ–π–∫–µ 001-01-01-001",
                    response_time
                )
                return True
            else:
                self.add_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ", False, f"HTTP {placement_response.status_code}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_scan_transport(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        transport_response = self.session.get(f"{API_BASE}/transport/{self.test_transport_id}")
        if transport_response.status_code != 200:
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {transport_response.status_code}")
            return False
            
        transport_data = transport_response.json()
        transport_number = transport_data.get("transport_number")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º QR –∫–æ–¥
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        qr_code = f"TRANSPORT_{transport_number}_{timestamp}"
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "qr_code": qr_code
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.current_session_id = data.get("session_id")
                
                if self.current_session_id:
                    self.test_results["scan_transport_success"] = True
                    self.add_test_result(
                        "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", 
                        True, 
                        f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.current_session_id}, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'loading'",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç session_id –≤ –æ—Ç–≤–µ—Ç–µ", response_time)
                    return False
            else:
                self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"HTTP {response.status_code}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_scan_cargo(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –≥—Ä—É–∑–∞"""
        self.log("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –≥—Ä—É–∑–∞...")
        
        if not self.current_session_id:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –≥—Ä—É–∑–∞", False, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
            return False
        
        start_time = time.time()
        try:
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-cargo", json={
                "qr_code": self.test_cargo_number
            })
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                cargo_info = data.get("cargo_info", {})
                cargo_number = cargo_info.get("cargo_number", "Unknown")
                
                self.test_results["scan_cargo_success"] = True
                self.add_test_result(
                    "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –≥—Ä—É–∑–∞", 
                    True, 
                    f"–ì—Ä—É–∑ {cargo_number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    response_time
                )
                return True
            else:
                error_detail = response.json().get("detail", "Unknown error") if response.headers.get("content-type", "").startswith("application/json") else response.text
                self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –≥—Ä—É–∑–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –≥—Ä—É–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_session(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        self.log("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏...")
        
        start_time = time.time()
        try:
            response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/session")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                session_id = data.get("session_id")
                loaded_cargo = data.get("loaded_cargo", [])
                
                if session_id:
                    self.test_results["get_session_success"] = True
                    self.add_test_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", 
                        True, 
                        f"–°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {session_id}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {len(loaded_cargo)}",
                        response_time
                    )
                    return True
                else:
                    self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç session_id –≤ –æ—Ç–≤–µ—Ç–µ", response_time)
                    return False
            else:
                self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, f"HTTP {response.status_code}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_delete_session(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        self.log("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...")
        
        start_time = time.time()
        try:
            response = self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                transport_status = data.get("transport_status", "unknown")
                loaded_cargo_count = data.get("loaded_cargo_count", 0)
                
                self.test_results["delete_session_success"] = True
                self.add_test_result(
                    "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", 
                    True, 
                    f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {transport_status}, –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–∑–æ–≤: {loaded_cargo_count}",
                    response_time
                )
                return True
            else:
                self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, f"HTTP {response.status_code}", response_time)
                return False
                
        except Exception as e:
            self.add_test_result("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
            if self.current_session_id:
                try:
                    self.session.delete(f"{API_BASE}/logistics/cargo-to-transport/session")
                except:
                    pass
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            if self.test_transport_id:
                try:
                    self.session.delete(f"{API_BASE}/transport/{self.test_transport_id}")
                except:
                    pass
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.mongo_client:
                self.mongo_client.close()
                    
        except Exception as e:
            self.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}", "WARNING")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í –ù–ê –¢–†–ê–ù–°–ü–û–†–¢")
        self.log("=" * 90)
        
        try:
            # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            if not self.connect_to_mongodb():
                return self.generate_final_report()
            
            # 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate():
                return self.generate_final_report()
            
            # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if not self.setup_test_transport():
                return self.generate_final_report()
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞
            if not self.create_and_place_test_cargo():
                return self.generate_final_report()
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow
            scan_transport_ok = self.test_scan_transport()
            scan_cargo_ok = self.test_scan_cargo()
            get_session_ok = self.test_get_session()
            delete_session_ok = self.test_delete_session()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π workflow
            if scan_transport_ok and scan_cargo_ok and get_session_ok and delete_session_ok:
                self.test_results["full_workflow_success"] = True
                self.add_test_result("–ü–æ–ª–Ω—ã–π workflow —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", True, "–í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            self.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
        
        finally:
            self.cleanup_test_data()
            
        return self.generate_final_report()
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("=" * 90)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        self.log("=" * 90)
        
        total_tests = self.test_results["total_tests"]
        passed_tests = self.test_results["passed_tests"]
        failed_tests = self.test_results["failed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        self.log(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        self.log(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        self.log(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        self.log("")
        
        self.log("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results["detailed_results"]:
            self.log(f"   {result}")
        self.log("")
        
        self.log("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        if self.test_results["full_workflow_success"]:
            self.log("   ‚úÖ –ü–û–õ–ù–´–ô WORKFLOW –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í –ù–ê –¢–†–ê–ù–°–ü–û–†–¢ –†–ê–ë–û–¢–ê–ï–¢!")
            self.log("   ‚úÖ –í—Å–µ API endpoints —ç—Ç–∞–ø–∞ 2 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("   ‚úÖ TransportStatus enum –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            self.log("   ‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è, —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("   ‚úÖ –°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –∏ –≥—Ä—É–∑–æ–≤ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            self.log("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        else:
            self.log("   ‚ùå WORKFLOW –ù–ï –ó–ê–í–ï–†–®–ï–ù –ü–û–õ–ù–û–°–¢–¨–Æ")
            
            if not self.test_results["scan_transport_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            if not self.test_results["scan_cargo_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥—Ä—É–∑–æ–≤")
            if not self.test_results["get_session_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏")
            if not self.test_results["delete_session_success"]:
                self.log("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏")
        
        self.log("")
        
        if success_rate >= 80:
            self.log("üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            final_status = "SUCCESS"
        elif success_rate >= 60:
            self.log("‚ö†Ô∏è  –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            final_status = "WARNING"
        else:
            self.log("‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
            final_status = "FAILURE"
        
        self.log("=" * 90)
        
        return {
            "status": final_status,
            "success_rate": success_rate,
            "full_workflow_success": self.test_results["full_workflow_success"],
            "detailed_results": self.test_results["detailed_results"]
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CargoToTransportComprehensiveTester()
    result = tester.run_comprehensive_test()
    
    if result["status"] == "SUCCESS":
        sys.exit(0)
    elif result["status"] == "WARNING":
        sys.exit(1)
    else:
        sys.exit(2)

if __name__ == "__main__":
    main()