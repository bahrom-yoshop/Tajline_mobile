#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
- –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ processing_status = "paid" –≤ /api/operator/cargo/available-for-placement
- –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –≤ /api/cargo/place-in-cell
- –¢–µ–ø–µ—Ä—å –í–°–ï –≥—Ä—É–∑—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ" –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã

–ü–õ–ê–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ /api/operator/cargo/available-for-placement
3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≥—Ä—É–∑—ã —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã (–Ω–µ —Ç–æ–ª—å–∫–æ "paid")
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Å –Ω–µ–øaid —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ /api/cargo/place-in-cell

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≥—Ä—É–∑—ã —Å–æ –≤—Å–µ–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ (payment_pending, paid, etc.)
- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
"""

import requests
import json
import sys
import os
from datetime import datetime

# Configuration
BACKEND_URL = "https://logistics-dash-6.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class CargoPlacementAnyStatusTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìã {details}")
        if error_msg:
            print(f"   üö® {error_msg}")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                operator_name = self.operator_info.get("full_name", "Unknown")
                operator_role = self.operator_info.get("role", "Unknown")
                operator_number = self.operator_info.get("user_number", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}' (–Ω–æ–º–µ—Ä: {operator_number}), —Ä–æ–ª—å: {operator_role}"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    error_msg=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                error_msg=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            )
            return False

    def get_available_cargo_for_placement(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                cargo_items = data.get("items", [])
                total_cargo = len(cargo_items)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–æ–≤
                status_counts = {}
                payment_status_counts = {}
                processing_status_counts = {}
                
                for cargo in cargo_items:
                    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                    status = cargo.get("status", "unknown")
                    status_counts[status] = status_counts.get(status, 0) + 1
                    
                    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ–ø–ª–∞—Ç—ã
                    payment_status = cargo.get("payment_status", "unknown")
                    payment_status_counts[payment_status] = payment_status_counts.get(payment_status, 0) + 1
                    
                    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    processing_status = cargo.get("processing_status", "unknown")
                    processing_status_counts[processing_status] = processing_status_counts.get(processing_status, 0) + 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                has_non_paid_cargo = any(status != "paid" for status in processing_status_counts.keys())
                has_multiple_payment_statuses = len(payment_status_counts) > 1
                has_multiple_processing_statuses = len(processing_status_counts) > 1
                
                details = f"–ù–∞–π–¥–µ–Ω–æ {total_cargo} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. "
                details += f"–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_status_counts}. "
                details += f"–°—Ç–∞—Ç—É—Å—ã –æ–ø–ª–∞—Ç—ã: {payment_status_counts}. "
                
                if has_non_paid_cargo or has_multiple_processing_statuses:
                    details += "‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ–ø–ª–∞—Ç—ã!"
                else:
                    details += "‚ö†Ô∏è –í—Å–µ –≥—Ä—É–∑—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å"
                
                self.log_test(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: GET /api/operator/cargo/available-for-placement",
                    True,
                    details
                )
                
                return cargo_items
                
            else:
                self.log_test(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: GET /api/operator/cargo/available-for-placement",
                    False,
                    error_msg=f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_test(
                "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: GET /api/operator/cargo/available-for-placement",
                False,
                error_msg=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return []

    def test_cargo_placement_any_status(self, cargo_items):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã"""
        if not cargo_items:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º",
                False,
                error_msg="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        # –ò—â–µ–º –≥—Ä—É–∑ —Å –Ω–µ–øaid —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cargo = None
        for cargo in cargo_items:
            processing_status = cargo.get("processing_status", "")
            payment_status = cargo.get("payment_status", "")
            
            # –ò—â–µ–º –≥—Ä—É–∑ —Å –Ω–µ–øaid —Å—Ç–∞—Ç—É—Å–æ–º
            if processing_status != "paid" or payment_status != "paid":
                test_cargo = cargo
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–µ–øaid –≥—Ä—É–∑, –±–µ—Ä–µ–º –ª—é–±–æ–π –ø–µ—Ä–≤—ã–π
        if not test_cargo and cargo_items:
            test_cargo = cargo_items[0]
        
        if not test_cargo:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º",
                False,
                error_msg="–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        try:
            cargo_id = test_cargo.get("id")
            cargo_number = test_cargo.get("cargo_number", "Unknown")
            processing_status = test_cargo.get("processing_status", "Unknown")
            payment_status = test_cargo.get("payment_status", "Unknown")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑ –≤ —Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —è—á–µ–π–∫–∏
            test_cells = ["001-01-01-002", "001-01-01-003", "001-01-01-004", "001-01-01-005"]
            
            placement_success = False
            last_error = ""
            
            for cell_code in test_cells:
                placement_data = {
                    "cargo_number": cargo_number,
                    "cell_code": cell_code
                }
                
                response = self.session.post(
                    f"{BACKEND_URL}/cargo/place-in-cell",
                    json=placement_data
                )
                
                if response.status_code == 200:
                    data = response.json()
                    details = f"–ì—Ä—É–∑ {cargo_number} (processing_status: {processing_status}, payment_status: {payment_status}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –≤ —è—á–µ–π–∫—É {cell_code}. "
                    details += f"–û—Ç–≤–µ—Ç API: {data}"
                    
                    self.log_test(
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ /api/cargo/place-in-cell",
                        True,
                        details
                    )
                    placement_success = True
                    break
                else:
                    last_error = f"HTTP {response.status_code}: {response.text}"
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —è—á–µ–π–∫–∏
                    continue
            
            if not placement_success:
                error_details = f"–ì—Ä—É–∑ {cargo_number} (processing_status: {processing_status}, payment_status: {payment_status}). "
                error_details += f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –≤ –æ–¥–Ω—É –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —è—á–µ–µ–∫. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}"
                
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º —á–µ—Ä–µ–∑ /api/cargo/place-in-cell",
                    False,
                    error_msg=error_details
                )
                return False
            
            return True
                
        except Exception as e:
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º",
                False,
                error_msg=f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}"
            )
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ TAJLINE.TJ")
        print("=" * 80)
        print()
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
        if not self.authenticate_warehouse_operator():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # 2. –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã
        cargo_items = self.get_available_cargo_for_placement()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        self.test_cargo_placement_any_status(cargo_items)
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("=" * 80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print()
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests*100):.1f}%")
        print()
        
        if failed_tests == 0:
            print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ –ì—Ä—É–∑—ã —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –æ–ø–ª–∞—Ç—ã –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è")
            print("‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä—É–∑—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã")
        else:
            print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        return failed_tests == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = CargoPlacementAnyStatusTester()
    success = tester.run_comprehensive_test()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()