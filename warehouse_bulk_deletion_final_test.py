#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ

–ù–ê–ô–î–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:
Endpoint DELETE /api/admin/warehouses/bulk —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 
–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: warehouse_ids: dict –≤–º–µ—Å—Ç–æ Pydantic –º–æ–¥–µ–ª–∏.

–†–ï–®–ï–ù–ò–ï:
–ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å endpoint –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BulkDeleteRequest –º–æ–¥–µ–ª–∏.
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class WarehouseBulkDeletionFinalTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.admin_user_info = None
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def test_admin_authorization(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.log("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (+79999888777/admin123)")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": ADMIN_PHONE,
                "password": ADMIN_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_user_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                user_name = self.admin_user_info.get("full_name", "Unknown")
                user_number = self.admin_user_info.get("user_number", "Unknown")
                
                self.log(f"‚úÖ –£–°–ü–ï–•: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω '{user_name}' (–Ω–æ–º–µ—Ä: {user_number})")
                return True
            else:
                self.log(f"‚ùå –û–®–ò–ë–ö–ê: –°—Ç–∞—Ç—É—Å {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            return False
    
    def get_warehouses_for_testing(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üìã –ü–û–õ–£–ß–ï–ù–ò–ï: –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                if len(warehouses) >= 2:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∫–ª–∞–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    test_warehouses = warehouses[-2:]
                    
                    self.log(f"‚úÖ –ù–ê–ô–î–ï–ù–û: {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤, –≤—ã–±—Ä–∞–Ω–æ 2 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    for i, warehouse in enumerate(test_warehouses):
                        name = warehouse.get("name", "Unknown")
                        location = warehouse.get("location", "Unknown")
                        self.log(f"   –°–∫–ª–∞–¥ {i+1}: '{name}' - {location}")
                    
                    return test_warehouses
                else:
                    self.log(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤")
                    return warehouses
            else:
                self.log(f"‚ùå –û–®–ò–ë–ö–ê: –°—Ç–∞—Ç—É—Å {response.status_code}")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            return []
    
    def test_bulk_deletion_current_implementation(self, warehouse_ids):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.log("üóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        test_data = {"ids": warehouse_ids}
        
        self.log(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_data, indent=2)}")
        
        try:
            response = self.session.delete(f"{BACKEND_URL}/admin/warehouses/bulk", json=test_data)
            
            self.log(f"üìä –û–¢–í–ï–¢: –°—Ç–∞—Ç—É—Å {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                self.log(f"‚úÖ –£–°–ü–ï–•: {json.dumps(result, indent=2, ensure_ascii=False)}")
                
                deleted_count = result.get("deleted_count", 0)
                total_requested = result.get("total_requested", 0)
                errors = result.get("errors", [])
                
                if deleted_count > 0:
                    self.log(f"üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} —Å–∫–ª–∞–¥–æ–≤")
                else:
                    self.log(f"üö® –ü–†–û–ë–õ–ï–ú–ê: –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–∫–ª–∞–¥–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–ª–∞–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≥—Ä—É–∑—ã)")
                
                if errors:
                    self.log("‚ö†Ô∏è –û–®–ò–ë–ö–ò:")
                    for error in errors:
                        self.log(f"   - {error}")
                
                return True
            else:
                self.log(f"‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            return False
    
    def test_wrong_data_structures(self, warehouse_ids):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
        
        wrong_structures = [
            {"warehouse_ids": warehouse_ids},  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            warehouse_ids,  # –ü—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫
            {"warehouses": warehouse_ids},  # –î—Ä—É–≥–æ–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            {}  # –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        ]
        
        for i, wrong_data in enumerate(wrong_structures):
            self.log(f"üìù –¢–µ—Å—Ç {i+1}: {json.dumps(wrong_data, indent=2)}")
            
            try:
                response = self.session.delete(f"{BACKEND_URL}/admin/warehouses/bulk", json=wrong_data)
                
                if response.status_code == 400:
                    self.log(f"‚úÖ –û–ñ–ò–î–ê–ï–ú–û: –û—à–∏–±–∫–∞ 400 - {response.json().get('detail', 'Unknown error')}")
                elif response.status_code == 422:
                    self.log(f"‚úÖ –û–ñ–ò–î–ê–ï–ú–û: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ 422")
                else:
                    self.log(f"‚ö†Ô∏è –ù–ï–û–ñ–ò–î–ê–ù–ù–û: –°—Ç–∞—Ç—É—Å {response.status_code}")
                    
            except Exception as e:
                self.log(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
    
    def analyze_root_cause(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"""
        self.log("üîç –ê–ù–ê–õ–ò–ó: –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã")
        
        self.log("üìã –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        self.log("   1. ‚úÖ Endpoint DELETE /api/admin/warehouses/bulk –°–£–©–ï–°–¢–í–£–ï–¢")
        self.log("   2. ‚úÖ Endpoint –†–ê–ë–û–¢–ê–ï–¢ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö {'ids': [...]}")
        self.log("   3. ‚ö†Ô∏è Endpoint –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'warehouse_ids: dict' –≤–º–µ—Å—Ç–æ Pydantic –º–æ–¥–µ–ª–∏")
        self.log("   4. ‚ùå Frontend –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö")
        
        self.log("üéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:")
        self.log("   –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ backend endpoint'–µ - –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        self.log("   –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        self.log("   - Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö")
        self.log("   - –°–∫–ª–∞–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≥—Ä—É–∑—ã –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã")
        self.log("   - –ü—Ä–æ–±–ª–µ–º–∞ –≤ UI –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        self.log("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        self.log("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∫–æ–¥ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ {'ids': [...]} —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        self.log("   2. –£–ª—É—á—à–∏—Ç—å endpoint: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BulkDeleteRequest –º–æ–¥–µ–ª—å")
        self.log("   3. –î–æ–±–∞–≤–∏—Ç—å –ª—É—á—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ UI")
        self.log("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–∫–ª–∞–¥—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –≥—Ä—É–∑—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
    
    def run_final_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤")
        self.log("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.test_admin_authorization():
            self.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
        
        self.log("-" * 80)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        warehouses = self.get_warehouses_for_testing()
        if not warehouses:
            self.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        warehouse_ids = [w.get("id") for w in warehouses if w.get("id")]
        
        self.log("-" * 80)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        bulk_deletion_works = self.test_bulk_deletion_current_implementation(warehouse_ids)
        
        self.log("-" * 80)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        self.test_wrong_data_structures(warehouse_ids)
        
        self.log("-" * 80)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
        self.analyze_root_cause()
        
        self.log("=" * 80)
        self.log("üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
        return bulk_deletion_works

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè• –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ")
    print("=" * 80)
    
    tester = WarehouseBulkDeletionFinalTester()
    
    try:
        success = tester.run_final_diagnosis()
        
        if success:
            print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ frontend –∏–ª–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Å–∫–ª–∞–¥–æ–≤")
            return 0
        else:
            print("\n‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–Ø–í–ò–õ–ê –ü–†–û–ë–õ–ï–ú–´ –í BACKEND")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê")
        return 1
    except Exception as e:
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())