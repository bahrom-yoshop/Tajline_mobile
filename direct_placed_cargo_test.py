#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint /api/warehouses/placed-cargo –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import requests
import sys
import json
from datetime import datetime

class DirectPlacedCargoTest:
    def __init__(self, base_url="https://cargo-qr-system.preview.emergentagent.com"):
        self.base_url = base_url
        self.token = None
        
        print(f"üéØ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï /api/warehouses/placed-cargo")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 60)

    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        response = requests.post(f"{self.base_url}/api/auth/login", json=login_data)
        if response.status_code == 200:
            data = response.json()
            self.token = data["access_token"]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            headers = {'Authorization': f'Bearer {self.token}'}
            user_response = requests.get(f"{self.base_url}/api/auth/me", headers=headers)
            if user_response.status_code == 200:
                user_data = user_response.json()
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('full_name')}")
                print(f"   üè∑Ô∏è –†–æ–ª—å: {user_data.get('role')}")
                print(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')}")
                print(f"   üÜî ID: {user_data.get('user_number')}")
                return True
        
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return False

    def test_placed_cargo_endpoint(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç endpoint"""
        print(f"\nüéØ –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢: GET /api/warehouses/placed-cargo")
        
        if not self.token:
            return False
        
        headers = {'Authorization': f'Bearer {self.token}'}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        test_cases = [
            {"page": 1, "per_page": 25},
            {"page": 1, "per_page": 50},
            {"page": 1, "per_page": 10}
        ]
        
        for i, params in enumerate(test_cases, 1):
            print(f"\n   üìã –¢–µ—Å—Ç {i}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {params['page']}, –ø–æ {params['per_page']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            response = requests.get(f"{self.base_url}/api/warehouses/placed-cargo", 
                                  headers=headers, params=params)
            
            print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                pagination = data.get("pagination", {})
                
                print(f"   üì¶ –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {pagination.get('total', 0)}")
                print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {pagination.get('page', 0)}")
                print(f"   üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(items)}")
                print(f"   üìö –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {pagination.get('pages', 0)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–∑—ã
                placement_ready_count = 0
                placed_in_warehouse_count = 0
                pickup_request_count = 0
                request_format_count = 0
                
                print(f"   üîç –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–∑–æ–≤:")
                for j, cargo in enumerate(items[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    cargo_number = cargo.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    status = cargo.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    pickup_request_id = cargo.get("pickup_request_id")
                    processing_status = cargo.get("processing_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    print(f"      {j+1}. {cargo_number}")
                    print(f"         üìä –°—Ç–∞—Ç—É—Å: {status}")
                    print(f"         ‚öôÔ∏è –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_status}")
                    
                    if status == "placement_ready":
                        placement_ready_count += 1
                        print(f"         ‚úÖ –ù–ê–ô–î–ï–ù —Å—Ç–∞—Ç—É—Å 'placement_ready'!")
                    
                    if status == "placed_in_warehouse":
                        placed_in_warehouse_count += 1
                        print(f"         ‚úÖ –ù–ê–ô–î–ï–ù —Å—Ç–∞—Ç—É—Å 'placed_in_warehouse'!")
                    
                    if pickup_request_id:
                        pickup_request_count += 1
                        print(f"         üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä: {pickup_request_id}")
                    
                    if "/" in cargo_number:
                        request_format_count += 1
                        print(f"         üìã –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏: {cargo_number}")
                
                print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ {i}:")
                print(f"      üéØ placement_ready: {placement_ready_count}")
                print(f"      üè≠ placed_in_warehouse: {placed_in_warehouse_count}")
                print(f"      üöö –° pickup_request_id: {pickup_request_count}")
                print(f"      üìã –§–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏ (—Å '/'): {request_format_count}")
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   üìÑ –û—Ç–≤–µ—Ç: {json.dumps(error_data, ensure_ascii=False, indent=6)}")
                except:
                    print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        
        return True

    def check_operator_cargo_collection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo —á–µ—Ä–µ–∑ API"""
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–õ–õ–ï–ö–¶–ò–ò operator_cargo")
        
        if not self.token:
            return False
        
        headers = {'Authorization': f'Bearer {self.token}'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≥—Ä—É–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        response = requests.get(f"{self.base_url}/api/operator/cargo/list", 
                              headers=headers, params={"page": 1, "per_page": 50})
        
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            pagination = data.get("pagination", {})
            
            print(f"   üì¶ –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ operator_cargo: {pagination.get('total', 0)}")
            print(f"   üìã –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(items)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
            status_counts = {}
            pickup_request_count = 0
            
            for cargo in items:
                status = cargo.get("status", "unknown")
                pickup_request_id = cargo.get("pickup_request_id")
                
                status_counts[status] = status_counts.get(status, 0) + 1
                
                if pickup_request_id:
                    pickup_request_count += 1
            
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status, count in status_counts.items():
                print(f"      {status}: {count}")
            
            print(f"   üöö –ì—Ä—É–∑—ã —Å pickup_request_id: {pickup_request_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–∑—ã —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            interesting_statuses = ["placement_ready", "placed_in_warehouse", "courier_delivered_to_warehouse"]
            print(f"   üéØ –ì—Ä—É–∑—ã —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏:")
            
            for cargo in items:
                status = cargo.get("status", "")
                if status in interesting_statuses:
                    cargo_number = cargo.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    pickup_request_id = cargo.get("pickup_request_id")
                    print(f"      üì¶ {cargo_number} - {status}")
                    if pickup_request_id:
                        print(f"         üöö –ó–∞—è–≤–∫–∞: {pickup_request_id}")
        
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.status_code}")
        
        return True

    def run_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞"""
        print(f"üöÄ –ó–ê–ü–£–°–ö –ü–†–Ø–ú–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if not self.authenticate():
            return False
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        self.test_placed_cargo_endpoint()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.check_operator_cargo_collection()
        
        print(f"\n{'='*60}")
        print(f"üìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print(f"{'='*60}")
        print(f"‚úÖ Endpoint /api/warehouses/placed-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ - endpoint –∏—â–µ—Ç –≤ operator_cargo")
        print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Ç–∞—Ç—É—Å—ã 'placed_in_warehouse' –∏ 'placement_ready'")
        print(f"‚ö†Ô∏è –í —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≥—Ä—É–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'placement_ready'")
        print(f"üìù –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Å—Ç–∞—Ç—É—Å –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è workflow –∑–∞—è–≤–æ–∫")
        
        return True

if __name__ == "__main__":
    tester = DirectPlacedCargoTest()
    tester.run_test()