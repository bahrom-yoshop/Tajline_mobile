#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ "–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-tracker-28.preview.emergentagent.com/api"

def test_bulk_deletion_diagnosis():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
    print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–±–ª–µ–º–∞ '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏")
    print("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    test_cargo_ids = []
    test_cargo_numbers = []
    headers = {}
    
    # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        
        if response.status_code == 200:
            auth_result = response.json()
            token = auth_result.get("access_token")
            user_info = auth_result.get("user")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
            
            headers = {"Authorization": f"Bearer {token}"}
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
            return
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö ID –≥—Ä—É–∑–æ–≤
    print("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• ID –ì–†–£–ó–û–í –ò–ó /api/operator/cargo/available-for-placement")
    
    try:
        response = requests.get(f"{BACKEND_URL}/operator/cargo/available-for-placement", headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.status_code}")
        
        if response.status_code == 200:
            cargo_data = response.json()
            available_cargo = cargo_data.get("items", [])
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(available_cargo)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            
            if len(available_cargo) >= 2:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –≥—Ä—É–∑–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                test_cargo_ids = [cargo["id"] for cargo in available_cargo[:2]]
                test_cargo_numbers = [cargo["cargo_number"] for cargo in available_cargo[:2]]
                print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–µ –≥—Ä—É–∑—ã: {test_cargo_numbers} (IDs: {test_cargo_ids})")
            else:
                print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                return
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤: {response.text}")
            return
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤: {e}")
        return
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint DELETE /api/admin/cargo/bulk
    print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT DELETE /api/admin/cargo/bulk")
    
    bulk_data_1 = {"ids": test_cargo_ids}
    
    try:
        response = requests.delete(f"{BACKEND_URL}/admin/cargo/bulk", json=bulk_data_1, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å DELETE /api/admin/cargo/bulk: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Endpoint /api/admin/cargo/bulk —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            result = response.json()
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return  # –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint
        else:
            print(f"‚ùå Endpoint /api/admin/cargo/bulk –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ /api/admin/cargo/bulk: {e}")
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ì–û –§–û–†–ú–ê–¢–ê –î–ê–ù–ù–´–• {{cargo_ids: [...]}}")
    
    bulk_data_2 = {"cargo_ids": test_cargo_ids}
    
    try:
        response = requests.delete(f"{BACKEND_URL}/admin/cargo/bulk", json=bulk_data_2, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å —Å cargo_ids: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ –§–æ—Ä–º–∞—Ç {{cargo_ids: [...]}} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            result = response.json()
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return
        else:
            print(f"‚ùå –§–æ—Ä–º–∞—Ç {{cargo_ids: [...]}} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ cargo_ids —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ endpoint DELETE /api/operator/cargo/bulk-remove-from-placement
    print("\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–†–û–ì–û ENDPOINT DELETE /api/operator/cargo/bulk-remove-from-placement")
    
    bulk_data_3 = {"cargo_ids": test_cargo_ids}
    
    try:
        response = requests.delete(f"{BACKEND_URL}/operator/cargo/bulk-remove-from-placement", json=bulk_data_3, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å bulk-remove-from-placement: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ –°—Ç–∞—Ä—ã–π endpoint bulk-remove-from-placement —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            result = response.json()
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return
        else:
            print(f"‚ùå –°—Ç–∞—Ä—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ endpoint: {e}")
    
    # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/admin/cargo/bulk-delete
    print("\n6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT DELETE /api/admin/cargo/bulk-delete")
    
    try:
        response = requests.delete(f"{BACKEND_URL}/admin/cargo/bulk-delete", json=bulk_data_2, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å bulk-delete: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Endpoint bulk-delete —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            result = response.json()
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return
        else:
            print(f"‚ùå Endpoint bulk-delete –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ bulk-delete: {e}")
    
    # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/admin/cargo/bulk —Å method DELETE
    print("\n7Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POST /api/admin/cargo/bulk –° METHOD DELETE")
    
    bulk_data_4 = {
        "method": "DELETE",
        "cargo_ids": test_cargo_ids
    }
    
    try:
        response = requests.post(f"{BACKEND_URL}/admin/cargo/bulk", json=bulk_data_4, headers=headers)
        print(f"–°—Ç–∞—Ç—É—Å POST —Å method DELETE: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ POST —Å method DELETE —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            result = response.json()
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return
        else:
            print(f"‚ùå POST —Å method DELETE –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ POST —Å method DELETE: {e}")
    
    # –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints —á–µ—Ä–µ–∑ OPTIONS
    print("\n8Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–´–• ENDPOINTS –ß–ï–†–ï–ó OPTIONS")
    
    endpoints_to_check = [
        "/admin/cargo/bulk",
        "/admin/cargo/bulk-delete", 
        "/operator/cargo/bulk-remove-from-placement",
        "/admin/cargo/delete-multiple"
    ]
    
    for endpoint in endpoints_to_check:
        try:
            response = requests.options(f"{BACKEND_URL}{endpoint}", headers=headers)
            print(f"OPTIONS {endpoint}: {response.status_code}")
            if response.status_code == 200:
                allowed_methods = response.headers.get("Allow", "")
                print(f"  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {allowed_methods}")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ OPTIONS {endpoint}: {e}")
    
    # –®–∞–≥ 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("\n9Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ï–î–ò–ù–ò–ß–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø")
    
    if test_cargo_ids:
        single_cargo_id = test_cargo_ids[0]
        
        try:
            response = requests.delete(f"{BACKEND_URL}/admin/cargo/{single_cargo_id}", headers=headers)
            print(f"–°—Ç–∞—Ç—É—Å –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
            if response.status_code == 200:
                print("‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                print(f"‚ùå –ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    print("\n" + "=" * 80)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("‚ùå –ù–ò –û–î–ò–ù –ò–ó ENDPOINTS –î–õ–Ø –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é endpoint'–æ–≤ –≤ backend/server.py")
    print("2. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–æ–ª–∏ warehouse_operator")
    print("4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ü–∏–∫–ª–µ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")

if __name__ == "__main__":
    test_bulk_deletion_diagnosis()