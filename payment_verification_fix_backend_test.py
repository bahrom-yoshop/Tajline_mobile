#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≥—Ä—É–∑–∞

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é "–û–ø–µ—Ä–∞—Ü–∏–∏" -> "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑" —Å–∏—Å—Ç–µ–º–∞ –≤—ã–¥–∞–≤–∞–ª–∞ –æ—à–∏–±–∫—É 
"–ì—Ä—É–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ" –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞ –≥—Ä—É–∑–∞.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
–û—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ payment_status –≤ API `/api/operator/placement/verify-cargo`. 
–¢–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø:
‚úÖ API verify-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true –¥–ª—è –ª—é–±–æ–≥–æ –≥—Ä—É–∑–∞
‚úÖ –ù–µ—Ç –æ—à–∏–±–∫–∏ "–ì—Ä—É–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"  
‚úÖ –í –ª–æ–≥–∞—Ö –≤–∏–¥–Ω–æ "–†–ê–ó–ú–ï–©–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–û"
‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç payment_status

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≥—Ä—É–∑—ã –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []
test_cargo_number = "25082235"  # –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –∏–∑ review request

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_find_unpaid_cargo():
    """–¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global test_cargo_number
    
    print("\nüîç –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥—Ä—É–∑ 25082235
    response, response_time = make_request("GET", f"/operator/cargo/available-for-placement?search={test_cargo_number}")
    
    if not response:
        return log_test("–ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        
        # –ò—â–µ–º –≥—Ä—É–∑ 25082235
        target_cargo = None
        for item in items:
            if item.get("cargo_number") == test_cargo_number:
                target_cargo = item
                break
        
        if target_cargo:
            payment_status = target_cargo.get("payment_status", "unknown")
            details = f"–ù–∞–π–¥–µ–Ω –≥—Ä—É–∑ {test_cargo_number}, —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {payment_status}"
            return log_test("–ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞", True, details, response_time)
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥—Ä—É–∑, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
            unpaid_cargo = None
            for item in items:
                if item.get("payment_status") in ["not_paid", "pending", None]:
                    unpaid_cargo = item
                    break
            
            if unpaid_cargo:
                cargo_number = unpaid_cargo.get("cargo_number")
                payment_status = unpaid_cargo.get("payment_status", "unknown")
                details = f"–ù–∞–π–¥–µ–Ω –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –≥—Ä—É–∑ {cargo_number}, —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {payment_status}"
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞
                test_cargo_number = cargo_number
                return log_test("–ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞", True, details, response_time)
            else:
                details = f"–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ {len(items)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"
                return log_test("–ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_verify_cargo_api():
    """–¢–µ—Å—Ç 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API verify-cargo —Å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –≥—Ä—É–∑–æ–º"""
    print(f"\nüéØ –¢–ï–°–¢ 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API verify-cargo —Å –≥—Ä—É–∑–æ–º {test_cargo_number}")
    
    verify_data = {
        "qr_code": test_cargo_number
    }
    
    response, response_time = make_request("POST", "/operator/placement/verify-cargo", verify_data)
    
    if not response:
        return log_test("API verify-cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        success = data.get("success", False)
        message = data.get("message", "")
        error_code = data.get("error_code", "")
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ VERIFY-CARGO:")
        print(f"   - success: {success}")
        print(f"   - message: {message}")
        print(f"   - error_code: {error_code}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: API –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å success=true
        if success:
            if "–†–ê–ó–ú–ï–©–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–û" in message or "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ" in message.lower():
                details = f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•! API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true, —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'"
                return log_test("API verify-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true", True, details, response_time)
            else:
                details = f"‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ: '{message}'"
                return log_test("API verify-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true", True, details, response_time)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ä–∞—è –æ—à–∏–±–∫–∞ CARGO_UNPAID
            if error_code == "CARGO_UNPAID" or "–Ω–µ –æ–ø–ª–∞—á–µ–Ω" in message:
                details = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –°—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞. –ö–æ–¥: {error_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'"
                return log_test("API verify-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true", False, details, response_time)
            else:
                details = f"‚ùå API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=false –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ. –ö–æ–¥: {error_code}, —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'"
                return log_test("API verify-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("API verify-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_verify_cargo_with_different_payment_statuses():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ verify-cargo —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ–ø–ª–∞—Ç—ã"""
    print("\nüí≥ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ verify-cargo —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ–ø–ª–∞—Ç—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement?per_page=10")
    
    if not response or response.status_code != 200:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤", response_time)
    
    data = response.json()
    items = data.get("items", [])
    
    if not items:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", response_time)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    tested_statuses = set()
    successful_tests = 0
    total_tests = 0
    
    for item in items[:5]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º—É–º 5 –≥—Ä—É–∑–æ–≤
        cargo_number = item.get("cargo_number")
        payment_status = item.get("payment_status", "unknown")
        
        if payment_status not in tested_statuses:
            tested_statuses.add(payment_status)
            
            verify_data = {"qr_code": cargo_number}
            verify_response, verify_time = make_request("POST", "/operator/placement/verify-cargo", verify_data)
            
            total_tests += 1
            
            if verify_response and verify_response.status_code == 200:
                verify_data_response = verify_response.json()
                success = verify_data_response.get("success", False)
                
                if success:
                    successful_tests += 1
                    print(f"   ‚úÖ –ì—Ä—É–∑ {cargo_number} (—Å—Ç–∞—Ç—É—Å: {payment_status}) - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
                else:
                    error_code = verify_data_response.get("error_code", "")
                    message = verify_data_response.get("message", "")
                    print(f"   ‚ùå –ì—Ä—É–∑ {cargo_number} (—Å—Ç–∞—Ç—É—Å: {payment_status}) - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: {error_code} - {message}")
            else:
                print(f"   ‚ùå –ì—Ä—É–∑ {cargo_number} (—Å—Ç–∞—Ç—É—Å: {payment_status}) - –æ—à–∏–±–∫–∞ API")
    
    if total_tests > 0:
        success_rate = (successful_tests / total_tests) * 100
        details = f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_tests} –≥—Ä—É–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ–ø–ª–∞—Ç—ã, —É—Å–ø–µ—à–Ω–æ: {successful_tests}/{total_tests} ({success_rate:.1f}%)"
        
        # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –≤—Å–µ –≥—Ä—É–∑—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        test_success = successful_tests == total_tests
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã", test_success, details, response_time)
    else:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ–ø–ª–∞—Ç—ã", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞", response_time)

def test_placement_logs_check():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    print("\nüìù –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
    # –ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã API
    
    verify_data = {
        "qr_code": test_cargo_number
    }
    
    response, response_time = make_request("POST", "/operator/placement/verify-cargo", verify_data)
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        message = data.get("message", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        placement_allowed_indicators = [
            "–†–ê–ó–ú–ï–©–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–û",
            "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ",
            "placement allowed",
            "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ",
            "allowed"
        ]
        
        has_placement_info = any(indicator in message.lower() for indicator in [ind.lower() for ind in placement_allowed_indicators])
        
        if has_placement_info:
            details = f"‚úÖ –í –æ—Ç–≤–µ—Ç–µ API –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: '{message}'"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", True, details, response_time)
        else:
            details = f"‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —è–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: '{message}'"
            # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ success=true
            success = data.get("success", False)
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", success, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_no_payment_blocking():
    """–¢–µ—Å—Ç 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ"""
    print("\nüö´ –¢–ï–°–¢ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
    response, response_time = make_request("GET", "/operator/cargo/available-for-placement?per_page=20")
    
    if not response:
        return log_test("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        items = data.get("items", [])
        
        if not items:
            return log_test("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", response_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
        unpaid_cargo_count = 0
        paid_cargo_count = 0
        unknown_status_count = 0
        
        for item in items:
            payment_status = item.get("payment_status", "unknown")
            if payment_status in ["not_paid", "pending"]:
                unpaid_cargo_count += 1
            elif payment_status in ["paid", "completed"]:
                paid_cargo_count += 1
            else:
                unknown_status_count += 1
        
        total_cargo = len(items)
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–£–ó–û–í –î–û–°–¢–£–ü–ù–´–• –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:")
        print(f"   - –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {total_cargo}")
        print(f"   - –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ: {unpaid_cargo_count}")
        print(f"   - –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ: {paid_cargo_count}")
        print(f"   - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {unknown_status_count}")
        
        if unpaid_cargo_count > 0:
            details = f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢! –ù–∞–π–¥–µ–Ω–æ {unpaid_cargo_count} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ —Å—Ä–µ–¥–∏ {total_cargo} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
            return log_test("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ", True, details, response_time)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
            if total_cargo > 0:
                details = f"‚ö†Ô∏è –í—Å–µ {total_cargo} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç 'not_paid' –∏–ª–∏ 'pending'"
                return log_test("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ", True, details, response_time)
            else:
                details = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                return log_test("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*80)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–í–ï–†–ö–ò –û–ü–õ–ê–¢–´")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ PASS" if result["success"] else "‚ùå FAIL"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      ‚îî‚îÄ {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
    critical_tests = [
        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
        "API verify-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success=true",
        "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ –æ–ø–ª–∞—Ç–µ"
    ]
    
    critical_passed = 0
    for test_name in critical_tests:
        test_result = next((r for r in test_results if test_name in r["test"]), None)
        if test_result and test_result["success"]:
            critical_passed += 1
            print(f"   ‚úÖ {test_name}")
        else:
            print(f"   ‚ùå {test_name}")
    
    critical_success_rate = (critical_passed / len(critical_tests) * 100) if critical_tests else 0
    
    print(f"\nüèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if critical_success_rate >= 100:
        print("   üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("   ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≥—Ä—É–∑—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã")
        print("   ‚úÖ API verify-cargo –±–æ–ª—å—à–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    elif critical_success_rate >= 66:
        print("   ‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û, –ù–û –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
        print("   üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    else:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("   üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    print(f"   üìà –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {critical_success_rate:.1f}%")
    print("="*80)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –≥—Ä—É–∑–∞")
    print("="*80)
    print("–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≥—Ä—É–∑—ã –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã!")
    print("="*80)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_find_unpaid_cargo,
        test_verify_cargo_api,
        test_verify_cargo_with_different_payment_statuses,
        test_placement_logs_check,
        test_no_payment_blocking
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(0.5)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_summary()

if __name__ == "__main__":
    main()