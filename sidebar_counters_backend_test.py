#!/usr/bin/env python3
"""
üî¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–û–í –ë–û–ö–û–í–û–ì–û –ú–ï–ù–Æ: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–¢–æ–ª—å–∫–æ —á—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ. 
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
2. ‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤: –ö—Ä–∞—Å–Ω—ã–µ (–æ—Å–Ω–æ–≤–Ω—ã–µ), —Å–∏–Ω–∏–µ (–ø–æ–¥–ø—É–Ω–∫—Ç—ã), –∑–µ–ª–µ–Ω—ã–µ (–≤–ª–æ–∂–µ–Ω–Ω—ã–µ)
3. ‚úÖ –£–º–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –°–∫—Ä—ã—Ç–∏–µ –Ω—É–ª–µ–π, "99+" –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
4. ‚úÖ –†–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö

ENDPOINTS –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
1. POST /api/operator/cargo/accept - –°–æ–∑–¥–∞—Ç—å 5-7 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ "–ì—Ä—É–∑—ã"
2. GET /api/operator/cargo/individual-units-for-placement - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ "–†–∞–∑–º–µ—â–µ–Ω–∏–µ"
3. GET /api/operator/warehouses - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ "–°–∫–ª–∞–¥—ã"
4. GET /api/operator/placement-progress - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
5. GET /api/operator/cargo - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
6. GET /api/users (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∫—É—Ä—å–µ—Ä–æ–≤
7. GET /api/operator/unpaid-cargo - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Å—Å—ã

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
- –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤
- –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
- Backend –≥–æ—Ç–æ–≤ –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –í–ù–ò–ú–ê–ù–ò–ï:
- –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤
- –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ frontend
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤

–¶–ï–õ–¨: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å backend –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
"""

import requests
import json
import time
from datetime import datetime, timedelta
import os
import random

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

class SidebarCountersTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        self.warehouse_id = None
        self.test_results = []
        self.created_cargo_ids = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.current_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.current_user.get('full_name')} (—Ä–æ–ª—å: {self.current_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=ADMIN_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.current_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.current_user.get('full_name')} (—Ä–æ–ª—å: {self.current_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def create_test_cargo_data(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ 5-7 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–ì—Ä—É–∑—ã'"""
        try:
            print("üéØ –¢–ï–°–¢ 1: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –î–õ–Ø –°–ß–ï–¢–ß–ò–ö–ê '–ì–†–£–ó–´'")
            
            # –°–æ–∑–¥–∞–µ–º 6 —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤
            test_cargos = [
                {
                    "sender_full_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                    "sender_phone": "+79161234567",
                    "recipient_full_name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
                    "recipient_phone": "+992987654321",
                    "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, 15",
                    "cargo_items": [
                        {
                            "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                            "quantity": 2,
                            "weight": 5.5,
                            "price_per_kg": 150.0,
                            "total_amount": 825.0
                        }
                    ],
                    "description": "–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
                    "route": "moscow_to_tajikistan",
                    "payment_method": "cash_on_delivery"
                },
                {
                    "sender_full_name": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤",
                    "sender_phone": "+79162345678",
                    "recipient_full_name": "–§–∞—Ä—Ö–æ–¥ –†–∞—Ö–∏–º–æ–≤",
                    "recipient_phone": "+992987654322",
                    "recipient_address": "–•—É–¥–∂–∞–Ω–¥, —É–ª. –õ–µ–Ω–∏–Ω–∞, 25",
                    "cargo_items": [
                        {
                            "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
                            "quantity": 1,
                            "weight": 12.0,
                            "price_per_kg": 80.0,
                            "total_amount": 960.0
                        }
                    ],
                    "description": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å",
                    "route": "moscow_to_tajikistan",
                    "payment_method": "cash"
                },
                {
                    "sender_full_name": "–û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
                    "sender_phone": "+79163456789",
                    "recipient_full_name": "–ó–∞—Ä–∏–Ω–∞ –ù–∞–∑–∞—Ä–æ–≤–∞",
                    "recipient_phone": "+992987654323",
                    "recipient_address": "–î—É—à–∞–Ω–±–µ, –ø—Ä. –ò—Å–º–æ–∏–ª–∏ –°–æ–º–æ–Ω–∏, 45",
                    "cargo_items": [
                        {
                            "cargo_name": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
                            "quantity": 3,
                            "weight": 8.2,
                            "price_per_kg": 120.0,
                            "total_amount": 984.0
                        }
                    ],
                    "description": "–ó–∏–º–Ω—è—è –æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
                    "route": "moscow_to_tajikistan",
                    "payment_method": "card_transfer"
                },
                {
                    "sender_full_name": "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
                    "sender_phone": "+79164567890",
                    "recipient_full_name": "–î–∂–∞–º—à–µ–¥ –ö–∞—Ä–∏–º–æ–≤",
                    "recipient_phone": "+992987654324",
                    "recipient_address": "–ö—É–ª—è–±, —É–ª. –§–∏—Ä–¥–∞–≤—Å–∏, 12",
                    "cargo_items": [
                        {
                            "cargo_name": "–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏",
                            "quantity": 4,
                            "weight": 15.8,
                            "price_per_kg": 200.0,
                            "total_amount": 3160.0
                        }
                    ],
                    "description": "–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è Toyota",
                    "route": "moscow_to_tajikistan",
                    "payment_method": "credit",
                    "debt_due_date": "2025-02-15"
                },
                {
                    "sender_full_name": "–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞",
                    "sender_phone": "+79165678901",
                    "recipient_full_name": "–ù–∏–≥–æ—Ä–∞ –Æ—Å—É–ø–æ–≤–∞",
                    "recipient_phone": "+992987654325",
                    "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –ê–π–Ω–∏, 78",
                    "cargo_items": [
                        {
                            "cargo_name": "–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏—è",
                            "quantity": 5,
                            "weight": 3.2,
                            "price_per_kg": 300.0,
                            "total_amount": 960.0
                        }
                    ],
                    "description": "–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
                    "route": "moscow_to_tajikistan",
                    "payment_method": "cash_on_delivery"
                },
                {
                    "sender_full_name": "–°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤",
                    "sender_phone": "+79166789012",
                    "recipient_full_name": "–†—É—Å—Ç–∞–º –•–æ–ª–æ–≤",
                    "recipient_phone": "+992987654326",
                    "recipient_address": "–•—É–¥–∂–∞–Ω–¥, —É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 33",
                    "cargo_items": [
                        {
                            "cargo_name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
                            "quantity": 2,
                            "weight": 6.5,
                            "price_per_kg": 250.0,
                            "total_amount": 1625.0
                        }
                    ],
                    "description": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–±–æ—Ä—ã",
                    "route": "moscow_to_tajikistan",
                    "payment_method": "cash"
                }
            ]
            
            created_count = 0
            
            for i, cargo_data in enumerate(test_cargos, 1):
                try:
                    response = self.session.post(
                        f"{API_BASE}/operator/cargo/accept",
                        json=cargo_data,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        cargo_id = result.get("cargo_id")
                        cargo_number = result.get("cargo_number")
                        
                        if cargo_id:
                            self.created_cargo_ids.append(cargo_id)
                            created_count += 1
                            print(f"  ‚úÖ –ì—Ä—É–∑ #{i} —Å–æ–∑–¥–∞–Ω: {cargo_number} (ID: {cargo_id})")
                        else:
                            print(f"  ‚ö†Ô∏è –ì—Ä—É–∑ #{i} —Å–æ–∑–¥–∞–Ω, –Ω–æ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                            created_count += 1
                    else:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞ #{i}: {response.status_code}")
                        
                except Exception as e:
                    print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–∑–∞ #{i}: {str(e)}")
            
            if created_count >= 5:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–ì—Ä—É–∑—ã'",
                    True,
                    f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–ì—Ä—É–∑—ã'",
                    False,
                    f"–°–æ–∑–¥–∞–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤: {created_count}",
                    "–ú–∏–Ω–∏–º—É–º 5 –≥—Ä—É–∑–æ–≤",
                    f"{created_count} –≥—Ä—É–∑–æ–≤"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–ì—Ä—É–∑—ã'", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_counter_data(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ'"""
        try:
            print("üéØ –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –°–ß–ï–¢–ß–ò–ö–ê '–†–ê–ó–ú–ï–©–ï–ù–ò–ï'")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/operator/cargo/individual-units-for-placement
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                total = data.get("total", 0)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual units
                total_units = 0
                for group in items:
                    units = group.get("units", [])
                    total_units += len(units)
                
                self.log_test(
                    "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ' (Individual Units)",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≥—Ä—É–ø–ø –≥—Ä—É–∑–æ–≤ —Å {total_units} individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/operator/placement-progress
                progress_response = self.session.get(f"{API_BASE}/operator/placement-progress", timeout=30)
                
                if progress_response.status_code == 200:
                    progress_data = progress_response.json()
                    total_units_progress = progress_data.get("total_units", 0)
                    placed_units = progress_data.get("placed_units", 0)
                    pending_units = progress_data.get("pending_units", 0)
                    progress_text = progress_data.get("progress_text", "")
                    
                    self.log_test(
                        "–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞",
                        True,
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {progress_text} (–≤—Å–µ–≥–æ: {total_units_progress}, —Ä–∞–∑–º–µ—â–µ–Ω–æ: {placed_units}, –æ–∂–∏–¥–∞–µ—Ç: {pending_units})"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞",
                        False,
                        f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress_response.status_code}"
                    )
                    return False
            else:
                self.log_test(
                    "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ'",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è individual units: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ'", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_warehouses_counter_data(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–°–∫–ª–∞–¥—ã'"""
        try:
            print("üéØ –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –°–ß–ï–¢–ß–ò–ö–ê '–°–ö–õ–ê–î–´'")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                warehouse_count = len(warehouses)
                
                if warehouse_count > 0:
                    warehouse_names = [w.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for w in warehouses]
                    self.log_test(
                        "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–°–∫–ª–∞–¥—ã'",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤: {', '.join(warehouse_names)}"
                    )
                    return True
                else:
                    self.log_test(
                        "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–°–∫–ª–∞–¥—ã'",
                        False,
                        "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                    )
                    return False
            else:
                self.log_test(
                    "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–°–∫–ª–∞–¥—ã'",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–°–∫–ª–∞–¥—ã'", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_cargo_list_counter_data(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞"""
        try:
            print("üéØ –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê –°–ü–ò–°–ö–ê –ì–†–£–ó–û–í –î–õ–Ø –û–°–ù–û–í–ù–û–ì–û –°–ß–ï–¢–ß–ò–ö–ê")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/list", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, dict) and "items" in data:
                    # –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    items = data.get("items", [])
                    total = data.get("total", 0)
                    
                    self.log_test(
                        "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –≤—Å–µ–≥–æ: {total}"
                    )
                elif isinstance(data, list):
                    # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                    cargo_count = len(data)
                    
                    self.log_test(
                        "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤ –≤ —Å–ø–∏—Å–∫–µ"
                    )
                else:
                    self.log_test(
                        "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(data)}"
                    )
                    return False
                
                return True
            else:
                self.log_test(
                    "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_users_counter_data(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∫—É—Ä—å–µ—Ä–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            print("üéØ –¢–ï–°–¢ 5: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô/–ö–£–†–¨–ï–†–û–í (–î–õ–Ø –ê–î–ú–ò–ù–û–í)")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if not self.authenticate_admin():
                self.log_test("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_response = self.session.get(f"{API_BASE}/users", timeout=30)
            
            if users_response.status_code == 200:
                users_data = users_response.json()
                
                if isinstance(users_data, dict) and "items" in users_data:
                    users = users_data.get("items", [])
                    total_users = users_data.get("total", 0)
                else:
                    users = users_data if isinstance(users_data, list) else []
                    total_users = len(users)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
                role_counts = {}
                for user in users:
                    role = user.get("role", "unknown")
                    role_counts[role] = role_counts.get(role, 0) + 1
                
                self.log_test(
                    "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º: {role_counts}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤
                couriers_response = self.session.get(f"{API_BASE}/admin/couriers/list", timeout=30)
                
                if couriers_response.status_code == 200:
                    couriers_data = couriers_response.json()
                    
                    if isinstance(couriers_data, dict) and "items" in couriers_data:
                        couriers = couriers_data.get("items", [])
                        total_couriers = couriers_data.get("total", 0)
                    else:
                        couriers = couriers_data if isinstance(couriers_data, list) else []
                        total_couriers = len(couriers)
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
                    active_couriers = len([c for c in couriers if c.get("is_active", True)])
                    inactive_couriers = total_couriers - active_couriers
                    
                    self.log_test(
                        "–î–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {total_couriers} –∫—É—Ä—å–µ—Ä–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_couriers}, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_couriers})"
                    )
                    return True
                else:
                    self.log_test(
                        "–î–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞",
                        False,
                        f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤: {couriers_response.status_code}"
                    )
                    return False
            else:
                self.log_test(
                    "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∫—É—Ä—å–µ—Ä–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_unpaid_cargo_counter_data(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Å—Å—ã (–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)"""
        try:
            print("üéØ –¢–ï–°–¢ 6: –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –°–ß–ï–¢–ß–ò–ö–ê –ö–ê–°–°–´")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            if not self.authenticate_operator():
                self.log_test("–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
                return False
            
            response = self.session.get(f"{API_BASE}/cashier/unpaid-cargo", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, dict) and "items" in data:
                    unpaid_items = data.get("items", [])
                    total_unpaid = data.get("total", 0)
                else:
                    unpaid_items = data if isinstance(data, list) else []
                    total_unpaid = len(unpaid_items)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                total_amount = 0
                for item in unpaid_items:
                    amount = item.get("amount", 0) or item.get("declared_value", 0)
                    total_amount += amount
                
                self.log_test(
                    "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Å—Å—ã (–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {total_unpaid} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {total_amount:.2f} —Ä—É–±."
                )
                return True
            else:
                self.log_test(
                    "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Å—Å—ã",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Å—Å—ã", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_performance_multiple_requests(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö"""
        try:
            print("üéØ –¢–ï–°–¢ 7: –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–ò –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ó–ê–ü–†–û–°–ê–•")
            
            # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            endpoints = [
                "/operator/cargo/list",
                "/operator/warehouses", 
                "/operator/placement-progress",
                "/operator/cargo/individual-units-for-placement"
            ]
            
            total_time = 0
            successful_requests = 0
            
            for endpoint in endpoints:
                start_time = time.time()
                
                try:
                    response = self.session.get(f"{API_BASE}{endpoint}", timeout=30)
                    end_time = time.time()
                    request_time = end_time - start_time
                    
                    if response.status_code == 200:
                        successful_requests += 1
                        total_time += request_time
                        print(f"  ‚úÖ {endpoint}: {request_time:.3f}s")
                    else:
                        print(f"  ‚ùå {endpoint}: HTTP {response.status_code}")
                        
                except Exception as e:
                    print(f"  ‚ùå {endpoint}: {str(e)}")
            
            if successful_requests > 0:
                avg_time = total_time / successful_requests
                
                if avg_time < 2.0:  # –û–∂–∏–¥–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥
                    self.log_test(
                        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö",
                        True,
                        f"–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {successful_requests}/{len(endpoints)} –∑–∞–ø—Ä–æ—Å–æ–≤. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.3f}s"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö",
                        False,
                        f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg_time:.3f}s",
                        "–ú–µ–Ω–µ–µ 2.0s",
                        f"{avg_time:.3f}s"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö",
                    False,
                    "–ù–∏ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é"""
        print("üî¢ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–û–í –ë–û–ö–û–í–û–ì–û –ú–ï–ù–Æ –í TAJLINE.TJ")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–ì—Ä—É–∑—ã'", self.create_test_cargo_data()))
        test_results.append(("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–†–∞–∑–º–µ—â–µ–Ω–∏–µ'", self.test_placement_counter_data()))
        test_results.append(("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ '–°–∫–ª–∞–¥—ã'", self.test_warehouses_counter_data()))
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        test_results.append(("–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞", self.test_cargo_list_counter_data()))
        test_results.append(("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤", self.test_users_counter_data()))
        test_results.append(("–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Å—Å—ã", self.test_unpaid_cargo_counter_data()))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_results.append(("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö", self.test_performance_multiple_requests()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–û–í –ë–û–ö–û–í–û–ì–û –ú–ï–ù–Æ:")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï ENDPOINTS –î–õ–Ø –°–ß–ï–¢–ß–ò–ö–û–í –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û! Backend –≥–æ—Ç–æ–≤ –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 85:
            print("üéØ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. Backend –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤.")
        elif success_rate >= 70:
            print("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –û—Å–Ω–æ–≤–Ω—ã–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –ú–Ω–æ–≥–∏–µ endpoints –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if self.created_cargo_ids:
            print(f"\nüì¶ –°–û–ó–î–ê–ù–ù–´–ï –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
            print(f"   –°–æ–∑–¥–∞–Ω–æ {len(self.created_cargo_ids)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤")
            print(f"   ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {', '.join(self.created_cargo_ids[:3])}{'...' if len(self.created_cargo_ids) > 3 else ''}")
        
        return success_rate >= 85  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 85% –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SidebarCountersTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–û–í –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        return 0
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ endpoints –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤")
        return 1

if __name__ == "__main__":
    exit(main())