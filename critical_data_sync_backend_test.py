#!/usr/bin/env python3
"""
üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É placement_records –∏ individual_items –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –∑–∞—è–≤–∫–∏ 250109

–ö–û–ù–¢–ï–ö–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥: POST /api/operator/cargo/place-individual —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞–ø–∏—Å–∏ –≤ placement_records, 
–Ω–æ –ù–ï –æ–±–Ω–æ–≤–ª—è–ª individual_items.is_placed –≤ –æ—Å–Ω–æ–≤–Ω–æ–º cargo –¥–æ–∫—É–º–µ–Ω—Ç–µ. –≠—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ individual_items.is_placed = True –≤ –æ—Å–Ω–æ–≤–Ω–æ–º cargo –¥–æ–∫—É–º–µ–Ω—Ç–µ
2. ‚úÖ –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ operator_cargo –∏ cargo –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
3. ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: placement_info, placed_by, placed_at, warehouse_name

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. POST /api/operator/cargo/place-individual - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
2. GET /api/operator/cargo/available-for-placement - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
3. GET /api/operator/cargo/fully-placed - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
4. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—è–≤–∫–∏ 250109
5. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class CriticalDataSyncTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_cargo_id = None
        self.test_cargo_number = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, "–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                    return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def create_test_cargo_with_individual_units(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å individual units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å individual units...")
            
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                "sender_phone": "+79999999999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                "recipient_phone": "+79888888888",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É placement_records –∏ individual_items",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Ç–∏–ø 1",
                        "quantity": 2,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    },
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Ç–∏–ø 2", 
                        "quantity": 3,
                        "weight": 3.0,
                        "price_per_kg": 150.0,
                        "total_amount": 450.0
                    }
                ]
            }
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/accept",
                json=cargo_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.test_cargo_id = data.get("cargo_id")
                self.test_cargo_number = data.get("cargo_number")
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å individual units",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {self.test_cargo_number} (ID: {self.test_cargo_id}), –≥—Ä—É–∑—ã: 2 —Ç–∏–ø–∞ (2+3=5 –µ–¥–∏–Ω–∏—Ü)"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                    False,
                    f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {response.status_code} - {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_data_synchronization_place_individual(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ POST /api/operator/cargo/place-individual"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {response.status_code}")
                return False
            
            data = response.json()
            items = data.get("items", [])
            
            # –ò—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
            test_cargo = None
            for item in items:
                if item.get("cargo_number") == self.test_cargo_number:
                    test_cargo = item
                    break
            
            if not test_cargo:
                self.log_test("–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {self.test_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º individual_items
            cargo_items = test_cargo.get("cargo_items", [])
            if not cargo_items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ cargo_items", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç cargo_items –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ")
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            first_cargo_item = cargo_items[0]
            individual_items = first_cargo_item.get("individual_items", [])
            
            if not individual_items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual_items", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç individual_items")
                return False
            
            test_unit = individual_items[0]
            individual_number = test_unit.get("individual_number")
            
            if not individual_number:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ individual_number", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç individual_number")
                return False
            
            print(f"   üìã –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É: {individual_number}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
            is_placed_before = test_unit.get("is_placed", False)
            print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º: is_placed = {is_placed_before}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É
            placement_data = {
                "individual_number": individual_number,
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            place_response = self.session.post(
                f"{API_BASE}/operator/cargo/place-individual",
                json=placement_data,
                timeout=30
            )
            
            if place_response.status_code != 200:
                self.log_test(
                    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ individual unit",
                    False,
                    f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {place_response.status_code} - {place_response.text}"
                )
                return False
            
            place_data = place_response.json()
            print(f"   ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {place_data.get('message', '–£—Å–ø–µ—à–Ω–æ')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            updated_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if updated_response.status_code == 200:
                updated_data = updated_response.json()
                updated_items = updated_data.get("items", [])
                
                # –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                updated_cargo = None
                for item in updated_items:
                    if item.get("cargo_number") == self.test_cargo_number:
                        updated_cargo = item
                        break
                
                if updated_cargo:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ individual_items
                    updated_cargo_items = updated_cargo.get("cargo_items", [])
                    if updated_cargo_items:
                        updated_individual_items = updated_cargo_items[0].get("individual_items", [])
                        if updated_individual_items:
                            updated_unit = None
                            for unit in updated_individual_items:
                                if unit.get("individual_number") == individual_number:
                                    updated_unit = unit
                                    break
                            
                            if updated_unit:
                                is_placed_after = updated_unit.get("is_placed", False)
                                print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: is_placed = {is_placed_after}")
                                
                                if is_placed_after:
                                    self.log_test(
                                        "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: individual_items.is_placed –æ–±–Ω–æ–≤–ª–µ–Ω",
                                        True,
                                        f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ò–°–ü–†–ê–í–õ–ï–ù! individual_items.is_placed –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å {is_placed_before} –Ω–∞ {is_placed_after}"
                                    )
                                    return True
                                else:
                                    self.log_test(
                                        "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: individual_items.is_placed –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω",
                                        False,
                                        f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù! individual_items.is_placed –æ—Å—Ç–∞–ª—Å—è {is_placed_after}",
                                        "True",
                                        str(is_placed_after)
                                    )
                                    return False
                            else:
                                self.log_test("–ü–æ–∏—Å–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã", False, "–†–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                                return False
                        else:
                            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö individual_items", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç individual_items –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                            return False
                    else:
                        self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö cargo_items", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç cargo_items –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                        return False
                else:
                    # –ó–∞—è–≤–∫–∞ –º–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ available-for-placement –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞
                    print("   üìã –ó–∞—è–≤–∫–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ available-for-placement - –ø—Ä–æ–≤–µ—Ä—è–µ–º fully-placed")
                    
                    fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
                    if fully_placed_response.status_code == 200:
                        fully_placed_data = fully_placed_response.json()
                        fully_placed_items = fully_placed_data.get("items", [])
                        
                        # –ò—â–µ–º –∑–∞—è–≤–∫—É –≤ fully-placed
                        found_in_fully_placed = False
                        for item in fully_placed_items:
                            if item.get("cargo_number") == self.test_cargo_number:
                                found_in_fully_placed = True
                                break
                        
                        if found_in_fully_placed:
                            self.log_test(
                                "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed",
                                True,
                                f"‚úÖ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ó–∞—è–≤–∫–∞ {self.test_cargo_number} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ fully-placed",
                                False,
                                f"–ó–∞—è–≤–∫–∞ {self.test_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ available-for-placement, –Ω–∏ –≤ fully-placed"
                            )
                            return False
                    else:
                        self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ fully-placed –∑–∞—è–≤–æ–∫", False, f"–û—à–∏–±–∫–∞: {fully_placed_response.status_code}")
                        return False
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {updated_response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_available_for_placement_filtering(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ GET /api/operator/cargo/available-for-placement"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê–¶–ò–ò AVAILABLE-FOR-PLACEMENT")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                total = data.get("total", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É—é—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                partially_placed_count = 0
                fully_placed_count = 0
                
                for item in items:
                    cargo_items = item.get("cargo_items", [])
                    total_units = 0
                    placed_units = 0
                    
                    for cargo_item in cargo_items:
                        individual_items = cargo_item.get("individual_items", [])
                        total_units += len(individual_items)
                        placed_units += sum(1 for unit in individual_items if unit.get("is_placed", False))
                    
                    if placed_units == 0:
                        # –ù–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞
                        pass
                    elif placed_units < total_units:
                        # –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞
                        partially_placed_count += 1
                    else:
                        # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ)
                        fully_placed_count += 1
                
                if fully_placed_count == 0:
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è available-for-placement",
                        True,
                        f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫, –∏–∑ –Ω–∏—Ö {partially_placed_count} —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, 0 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö"
                    )
                    return True
                else:
                    self.log_test(
                        "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è available-for-placement",
                        False,
                        f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {fully_placed_count}",
                        "0 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                        f"{fully_placed_count} –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
                    )
                    return False
            else:
                self.log_test(
                    "GET available-for-placement",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ available-for-placement", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_fully_placed_endpoint(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/operator/cargo/fully-placed"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FULLY-PLACED ENDPOINT")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["items", "pagination", "summary"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    items = data.get("items", [])
                    pagination = data.get("pagination", {})
                    summary = data.get("summary", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω—ã
                    incorrect_items = 0
                    
                    for item in items:
                        cargo_items = item.get("cargo_items", [])
                        total_units = 0
                        placed_units = 0
                        
                        for cargo_item in cargo_items:
                            individual_items = cargo_item.get("individual_items", [])
                            total_units += len(individual_items)
                            placed_units += sum(1 for unit in individual_items if unit.get("is_placed", False))
                        
                        if placed_units < total_units:
                            incorrect_items += 1
                    
                    if incorrect_items == 0:
                        self.log_test(
                            "Fully-placed endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å",
                            True,
                            f"‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í—Å–µ {len(items)} –∑–∞—è–≤–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω—ã"
                        )
                        return True
                    else:
                        self.log_test(
                            "Fully-placed endpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å",
                            False,
                            f"‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {incorrect_items}",
                            "0 –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
                            f"{incorrect_items} –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
                        )
                        return False
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ fully-placed endpoint",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "GET fully-placed",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fully-placed endpoint", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_application_250109_diagnosis(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ 250109"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 2: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–Ø–í–ö–ò 250109")
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 250109 –≤ available-for-placement
            available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            found_in_available = False
            
            if available_response.status_code == 200:
                available_data = available_response.json()
                available_items = available_data.get("items", [])
                
                for item in available_items:
                    if item.get("cargo_number") == "250109":
                        found_in_available = True
                        print(f"   üìã –ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ available-for-placement")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ individual_items
                        cargo_items = item.get("cargo_items", [])
                        total_units = 0
                        placed_units = 0
                        
                        for cargo_item in cargo_items:
                            individual_items = cargo_item.get("individual_items", [])
                            total_units += len(individual_items)
                            placed_units += sum(1 for unit in individual_items if unit.get("is_placed", False))
                        
                        print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ individual_items: {placed_units}/{total_units} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                        break
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 250109 –≤ fully-placed
            fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            found_in_fully_placed = False
            
            if fully_placed_response.status_code == 200:
                fully_placed_data = fully_placed_response.json()
                fully_placed_items = fully_placed_data.get("items", [])
                
                for item in fully_placed_items:
                    if item.get("cargo_number") == "250109":
                        found_in_fully_placed = True
                        print(f"   üìã –ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed")
                        break
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if found_in_available and found_in_fully_placed:
                self.log_test(
                    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—è–≤–∫–∏ 250109",
                    False,
                    "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ó–∞—è–≤–∫–∞ 250109 –Ω–∞–π–¥–µ–Ω–∞ –≤ –û–ë–û–ò–• —Å–ø–∏—Å–∫–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!",
                    "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ",
                    "–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ available-for-placement –ò fully-placed"
                )
                return False
            elif found_in_available:
                self.log_test(
                    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—è–≤–∫–∏ 250109",
                    True,
                    "‚úÖ –ó–∞—è–≤–∫–∞ 250109 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ available-for-placement (—Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è)"
                )
                return True
            elif found_in_fully_placed:
                self.log_test(
                    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—è–≤–∫–∏ 250109",
                    True,
                    "‚úÖ –ó–∞—è–≤–∫–∞ 250109 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ fully-placed (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞)"
                )
                return True
            else:
                self.log_test(
                    "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—è–≤–∫–∏ 250109",
                    False,
                    "‚ùå –ó–∞—è–≤–∫–∞ 250109 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤",
                    "–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤",
                    "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—è–≤–∫–∏ 250109", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_full_cycle_placement(self):
        """–ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            print("üéØ –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–û–õ–ù–´–ô –¶–ò–ö–õ –°–û–ó–î–ê–ù–ò–Ø –ò –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å 3 –µ–¥–∏–Ω–∏—Ü–∞–º–∏
            cycle_cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¶–∏–∫–ª–∞",
                "sender_phone": "+79777777777",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –¶–∏–∫–ª–∞",
                "recipient_phone": "+79666666666",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ü–∏–∫–ª–∞",
                        "quantity": 3,
                        "weight": 2.0,
                        "price_per_kg": 200.0,
                        "total_amount": 400.0
                    }
                ]
            }
            
            create_response = self.session.post(
                f"{API_BASE}/operator/cargo/accept",
                json=cycle_cargo_data,
                timeout=30
            )
            
            if create_response.status_code != 200:
                self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞", False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {create_response.status_code}")
                return False
            
            create_data = create_response.json()
            cycle_cargo_id = create_data.get("cargo_id")
            cycle_cargo_number = create_data.get("cargo_number")
            
            print(f"   üì¶ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {cycle_cargo_number}")
            
            # –ü–æ–ª—É—á–∞–µ–º individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ individual_items
            
            available_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
            if available_response.status_code != 200:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ü–∏–∫–ª–∞", False, f"–û—à–∏–±–∫–∞: {available_response.status_code}")
                return False
            
            available_data = available_response.json()
            available_items = available_data.get("items", [])
            
            # –ò—â–µ–º –Ω–∞—à—É –∑–∞—è–≤–∫—É
            cycle_cargo = None
            for item in available_items:
                if item.get("cargo_number") == cycle_cargo_number:
                    cycle_cargo = item
                    break
            
            if not cycle_cargo:
                self.log_test("–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ü–∏–∫–ª–∞", False, f"–ó–∞—è–≤–∫–∞ {cycle_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ individual units –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            cargo_items = cycle_cargo.get("cargo_items", [])
            if not cargo_items:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ cargo_items –¥–ª—è —Ü–∏–∫–ª–∞", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç cargo_items")
                return False
            
            all_individual_units = []
            for cargo_item in cargo_items:
                individual_items = cargo_item.get("individual_items", [])
                all_individual_units.extend(individual_items)
            
            if len(all_individual_units) != 3:
                self.log_test(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual units",
                    False,
                    f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 –µ–¥–∏–Ω–∏—Ü—ã, –ø–æ–ª—É—á–µ–Ω–æ {len(all_individual_units)}",
                    "3",
                    str(len(all_individual_units))
                )
                return False
            
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(all_individual_units)} –µ–¥–∏–Ω–∏—Ü –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
            placement_results = []
            
            for i, unit in enumerate(all_individual_units):
                individual_number = unit.get("individual_number")
                print(f"   üìç –†–∞–∑–º–µ—â–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É {i+1}/3: {individual_number}")
                
                placement_data = {
                    "individual_number": individual_number,
                    "block_number": 1,
                    "shelf_number": 1,
                    "cell_number": i + 2  # –†–∞–∑–Ω—ã–µ —è—á–µ–π–∫–∏
                }
                
                place_response = self.session.post(
                    f"{API_BASE}/operator/cargo/place-individual",
                    json=placement_data,
                    timeout=30
                )
                
                if place_response.status_code == 200:
                    placement_results.append(True)
                    print(f"     ‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ {i+1} —Ä–∞–∑–º–µ—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    time.sleep(1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    check_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
                    if check_response.status_code == 200:
                        check_data = check_response.json()
                        check_items = check_data.get("items", [])
                        
                        # –ò—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                        updated_cargo = None
                        for item in check_items:
                            if item.get("cargo_number") == cycle_cargo_number:
                                updated_cargo = item
                                break
                        
                        if updated_cargo:
                            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                            updated_cargo_items = updated_cargo.get("cargo_items", [])
                            placed_count = 0
                            total_count = 0
                            
                            for cargo_item in updated_cargo_items:
                                individual_items = cargo_item.get("individual_items", [])
                                total_count += len(individual_items)
                                placed_count += sum(1 for unit in individual_items if unit.get("is_placed", False))
                            
                            print(f"     üìä –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è {i+1}: {placed_count}/{total_count} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                        else:
                            # –ó–∞—è–≤–∫–∞ –º–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ available-for-placement –µ—Å–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞
                            if i == len(all_individual_units) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –µ–¥–∏–Ω–∏—Ü–∞
                                print(f"     üìã –ó–∞—è–≤–∫–∞ –∏—Å—á–µ–∑–ª–∞ –∏–∑ available-for-placement –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü")
                else:
                    placement_results.append(False)
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –µ–¥–∏–Ω–∏—Ü—ã {i+1}: {place_response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            successful_placements = sum(placement_results)
            
            if successful_placements == 3:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed
                fully_placed_response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
                if fully_placed_response.status_code == 200:
                    fully_placed_data = fully_placed_response.json()
                    fully_placed_items = fully_placed_data.get("items", [])
                    
                    found_in_fully_placed = False
                    for item in fully_placed_items:
                        if item.get("cargo_number") == cycle_cargo_number:
                            found_in_fully_placed = True
                            break
                    
                    if found_in_fully_placed:
                        self.log_test(
                            "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            True,
                            f"‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –ó–∞—è–≤–∫–∞ {cycle_cargo_number} —Å–æ–∑–¥–∞–Ω–∞, –≤—Å–µ 3 –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã, –∑–∞—è–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ fully-placed"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ fully-placed",
                            False,
                            f"–ó–∞—è–≤–∫–∞ {cycle_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                        )
                        return False
                else:
                    self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ fully-placed", False, f"–û—à–∏–±–∫–∞: {fully_placed_response.status_code}")
                    return False
            else:
                self.log_test(
                    "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"–ù–µ –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ: {successful_placements}/3",
                    "3/3",
                    f"{successful_placements}/3"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("üî• –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.get_operator_warehouse():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        if not self.create_test_cargo_with_individual_units():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É")
            return False
        
        # –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ place-individual", self.test_data_synchronization_place_individual()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è available-for-placement", self.test_available_for_placement_filtering()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 2: Fully-placed endpoint", self.test_fully_placed_endpoint()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞—è–≤–∫–∏ 250109", self.test_application_250109_diagnosis()))
        test_results.append(("–ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", self.test_full_cycle_placement()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•:")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù! 100% —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É placement_records –∏ individual_items. –ó–∞—è–≤–∫–∞ 250109 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ fully-placed. –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 80:
            print("üéØ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–°–¢–ê–Æ–¢–°–Ø! –ë–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.")
        
        return success_rate >= 80  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 80% –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CriticalDataSyncTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –±–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        return 0
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        return 1

if __name__ == "__main__":
    exit(main())