#!/usr/bin/env python3
"""
PICKUP REQUEST DIAGNOSTIC TEST FOR TAJLINE.TJ
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ" –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ pickup_request_id

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É —Ñ—É–Ω–∫—Ü–∏—è handleAcceptWarehouseDelivery –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç API –∏–ª–∏ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
- –ö–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ?
- –ï—Å—Ç—å –ª–∏ —É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Ññ100010 pickup_request_id?
- –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ endpoint /api/operator/pickup-requests/{pickup_request_id}?
- –ü–æ—á–µ–º—É –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"?
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class PickupRequestDiagnosticTester:
    def __init__(self, base_url="https://tajline-cargo-5.preview.emergentagent.com"):
        self.base_url = base_url
        self.operator_token = None
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üîç PICKUP REQUEST DIAGNOSTIC TEST FOR TAJLINE.TJ")
        print(f"üì° Base URL: {self.base_url}")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_operator_authentication(self):
        """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)"""
        print("\nüîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê")
        print("   üìã –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, login_response = self.run_test(
            "Operator Authentication (+79777888999/warehouse123)",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        
        if success and 'access_token' in login_response:
            self.operator_token = login_response['access_token']
            operator_user = login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            operator_phone = operator_user.get('phone')
            operator_user_number = operator_user.get('user_number')
            
            print(f"   ‚úÖ Operator login successful!")
            print(f"   üë§ Name: {operator_name}")
            print(f"   üìû Phone: {operator_phone}")
            print(f"   üëë Role: {operator_role}")
            print(f"   üÜî User Number: {operator_user_number}")
            print(f"   üîë JWT Token: {self.operator_token[:50]}...")
            
            # Verify role is warehouse_operator
            if operator_role == 'warehouse_operator':
                print("   ‚úÖ Operator role correctly set to 'warehouse_operator'")
                return True
            else:
                print(f"   ‚ùå Operator role incorrect: expected 'warehouse_operator', got '{operator_role}'")
                return False
        else:
            print("   ‚ùå Operator login failed - no access token received")
            print(f"   üìÑ Response: {login_response}")
            return False

    def test_get_all_warehouse_notifications(self):
        """Test 2: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: GET /api/operator/warehouse-notifications"""
        print("\nüìã –≠–¢–ê–ü 2: –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –°–ö–õ–ê–î–ê")
        print("   üìã GET /api/operator/warehouse-notifications")
        
        if not self.operator_token:
            print("   ‚ùå No operator token available")
            return False, []
        
        success, notifications_response = self.run_test(
            "Get All Warehouse Notifications",
            "GET",
            "/api/operator/warehouse-notifications",
            200,
            token=self.operator_token
        )
        
        if success:
            notifications = notifications_response if isinstance(notifications_response, list) else []
            notification_count = len(notifications)
            
            print(f"   ‚úÖ Found {notification_count} warehouse notifications")
            
            # Display all notifications with their IDs and key information
            print("\n   üìã –°–ü–ò–°–û–ö –í–°–ï–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:")
            for i, notification in enumerate(notifications, 1):
                notification_id = notification.get('id', 'N/A')
                notification_number = notification.get('notification_number', 'N/A')
                pickup_request_id = notification.get('pickup_request_id', 'N/A')
                status = notification.get('status', 'N/A')
                sender_name = notification.get('sender_full_name', 'N/A')
                created_at = notification.get('created_at', 'N/A')
                
                print(f"   {i}. ID: {notification_id}")
                print(f"      Number: {notification_number}")
                print(f"      pickup_request_id: {pickup_request_id}")
                print(f"      Status: {status}")
                print(f"      Sender: {sender_name}")
                print(f"      Created: {created_at}")
                print(f"      ---")
            
            return True, notifications
        else:
            print("   ‚ùå Failed to get warehouse notifications")
            return False, []

    def test_find_notification_100010(self, notifications):
        """Test 3: –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Ññ100010 –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        print("\nüîç –≠–¢–ê–ü 3: –ü–û–ò–°–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ‚Ññ100010")
        print("   üìã –ü–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Ññ100010 (–∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ UI)")
        
        # Search for notification #100010
        notification_100010 = None
        for notification in notifications:
            notification_number = str(notification.get('notification_number', ''))
            notification_id = str(notification.get('id', ''))
            
            # Check both notification_number and id fields
            if notification_number == '100010' or notification_id == '100010':
                notification_100010 = notification
                break
        
        if notification_100010:
            print(f"   ‚úÖ Found notification #100010!")
            
            # Analyze the notification structure
            print("\n   üìä –°–¢–†–£–ö–¢–£–†–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø #100010:")
            for key, value in notification_100010.items():
                print(f"   {key}: {value}")
            
            # Check for pickup_request_id
            pickup_request_id = notification_100010.get('pickup_request_id')
            
            print(f"\n   üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - pickup_request_id:")
            if pickup_request_id and pickup_request_id != 'N/A' and pickup_request_id is not None:
                print(f"   ‚úÖ pickup_request_id –ù–ê–ô–î–ï–ù: {pickup_request_id}")
                return True, pickup_request_id, notification_100010
            else:
                print(f"   ‚ùå pickup_request_id –ù–ï –ù–ê–ô–î–ï–ù –∏–ª–∏ –ø—É—Å—Ç–æ–π: {pickup_request_id}")
                return False, None, notification_100010
        else:
            print("   ‚ùå Notification #100010 NOT FOUND!")
            print("   üìã Available notification numbers:")
            for notification in notifications:
                notification_number = notification.get('notification_number', 'N/A')
                notification_id = notification.get('id', 'N/A')
                print(f"      - Number: {notification_number}, ID: {notification_id}")
            
            return False, None, None

    def test_pickup_request_endpoint(self, pickup_request_id):
        """Test 4: –ï—Å–ª–∏ pickup_request_id –µ—Å—Ç—å, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoint GET /api/operator/pickup-requests/{pickup_request_id}"""
        print(f"\nüîó –≠–¢–ê–ü 4: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT /api/operator/pickup-requests/{pickup_request_id}")
        print(f"   üìã GET /api/operator/pickup-requests/{pickup_request_id}")
        
        if not self.operator_token:
            print("   ‚ùå No operator token available")
            return False
        
        success, pickup_request_response = self.run_test(
            f"Get Pickup Request Details ({pickup_request_id})",
            "GET",
            f"/api/operator/pickup-requests/{pickup_request_id}",
            200,
            token=self.operator_token
        )
        
        if success:
            print(f"   ‚úÖ Endpoint /api/operator/pickup-requests/{pickup_request_id} –†–ê–ë–û–¢–ê–ï–¢!")
            
            # Analyze the pickup request structure
            print("\n   üìä –°–¢–†–£–ö–¢–£–†–ê PICKUP REQUEST:")
            for key, value in pickup_request_response.items():
                print(f"   {key}: {value}")
            
            # Check for key fields that might be needed for "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"
            key_fields = ['id', 'request_number', 'sender_full_name', 'sender_phone', 'pickup_address', 'status']
            missing_fields = []
            
            for field in key_fields:
                if field not in pickup_request_response:
                    missing_fields.append(field)
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è  Missing key fields: {missing_fields}")
            else:
                print("   ‚úÖ All key fields present for pickup request processing")
            
            return True
        else:
            print(f"   ‚ùå Endpoint /api/operator/pickup-requests/{pickup_request_id} –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
            return False

    def test_find_notification_with_pickup_request_id(self, notifications):
        """Test 5: –ï—Å–ª–∏ pickup_request_id –ù–ï–¢ —É #100010, –Ω–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å pickup_request_id –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ"""
        print("\nüîç –≠–¢–ê–ü 5: –ü–û–ò–°–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –° pickup_request_id")
        print("   üìã –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–µ–ø—É—Å—Ç—ã–º pickup_request_id")
        
        notifications_with_pickup_id = []
        
        for notification in notifications:
            pickup_request_id = notification.get('pickup_request_id')
            if pickup_request_id and pickup_request_id != 'N/A' and pickup_request_id is not None:
                notifications_with_pickup_id.append({
                    'notification': notification,
                    'pickup_request_id': pickup_request_id
                })
        
        if notifications_with_pickup_id:
            print(f"   ‚úÖ Found {len(notifications_with_pickup_id)} notifications with pickup_request_id")
            
            # Test the first one
            test_notification = notifications_with_pickup_id[0]
            notification = test_notification['notification']
            pickup_request_id = test_notification['pickup_request_id']
            
            notification_number = notification.get('notification_number', 'N/A')
            notification_id = notification.get('id', 'N/A')
            
            print(f"   üîç Testing notification: Number={notification_number}, ID={notification_id}")
            print(f"   üîç pickup_request_id: {pickup_request_id}")
            
            # Test the pickup request endpoint
            success = self.test_pickup_request_endpoint(pickup_request_id)
            
            if success:
                print(f"   ‚úÖ Pickup request endpoint working for notification {notification_number}")
                return True, pickup_request_id, notification
            else:
                print(f"   ‚ùå Pickup request endpoint failed for notification {notification_number}")
                return False, pickup_request_id, notification
        else:
            print("   ‚ùå NO notifications found with pickup_request_id!")
            print("   üìã This might be the root cause of the '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ' button issue")
            return False, None, None

    def test_console_log_investigation(self, notification_100010):
        """Test 6: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏"""
        print("\nüîç –≠–¢–ê–ü 6: –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–ù–°–û–õ–¨–ù–´–ú–ò –õ–û–ì–ê–ú–ò")
        print("   üìã –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ'")
        
        if notification_100010:
            print("\n   üìä –ê–ù–ê–õ–ò–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø #100010:")
            
            # Check notification status
            status = notification_100010.get('status', 'N/A')
            print(f"   Status: {status}")
            
            if status == 'completed':
                print("   ‚ö†Ô∏è  –í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (status: completed)")
                print("   üí° –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ' –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            elif status == 'pending_acceptance':
                print("   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è (status: pending_acceptance)")
                print("   üí° –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
            
            # Check pickup_request_id again
            pickup_request_id = notification_100010.get('pickup_request_id')
            if not pickup_request_id or pickup_request_id == 'N/A':
                print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: pickup_request_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                print("   üí° –§—É–Ω–∫—Ü–∏—è handleAcceptWarehouseDelivery –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å pickup_request_id")
                print("   üí° –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ API –≤—ã–∑–æ–≤–æ–≤ –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤")
            else:
                print(f"   ‚úÖ pickup_request_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {pickup_request_id}")
            
            # Check other required fields
            required_fields = ['id', 'notification_number', 'sender_full_name', 'cargo_items']
            missing_fields = []
            
            for field in required_fields:
                if field not in notification_100010 or not notification_100010.get(field):
                    missing_fields.append(field)
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}")
                print("   üí° –≠—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ handleAcceptWarehouseDelivery")
            else:
                print("   ‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        else:
            print("   ‚ùå Notification #100010 not available for analysis")
        
        # General recommendations
        print("\n   üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å browser console –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JavaScript –æ—à–∏–±–æ–∫")
        print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ pickup_request_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é handleAcceptWarehouseDelivery")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ endpoint /api/operator/pickup-requests/{pickup_request_id} –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'pending_acceptance'")
        print("   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")

    def run_full_diagnostic(self):
        """Run complete diagnostic test"""
        print("üöÄ STARTING FULL PICKUP REQUEST DIAGNOSTIC")
        
        # Step 1: Operator Authentication
        auth_success = self.test_operator_authentication()
        if not auth_success:
            print("\n‚ùå DIAGNOSTIC FAILED: Cannot authenticate operator")
            return False
        
        # Step 2: Get All Warehouse Notifications
        notifications_success, notifications = self.test_get_all_warehouse_notifications()
        if not notifications_success:
            print("\n‚ùå DIAGNOSTIC FAILED: Cannot get warehouse notifications")
            return False
        
        # Step 3: Find Notification #100010
        found_100010, pickup_request_id_100010, notification_100010 = self.test_find_notification_100010(notifications)
        
        # Step 4: Test pickup request endpoint if pickup_request_id exists for #100010
        if found_100010 and pickup_request_id_100010:
            endpoint_success = self.test_pickup_request_endpoint(pickup_request_id_100010)
            if endpoint_success:
                print(f"\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #100010 –∏–º–µ–µ—Ç pickup_request_id –∏ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: pickup_request_id –µ—Å—Ç—å, –Ω–æ endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            # Step 5: Find any notification with pickup_request_id
            found_alternative, pickup_request_id_alt, notification_alt = self.test_find_notification_with_pickup_request_id(notifications)
            
            if found_alternative:
                print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –£ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #100010 –Ω–µ—Ç pickup_request_id, –Ω–æ –¥—Ä—É–≥–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–º–µ—é—Ç")
            else:
                print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ò –û–î–ù–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç pickup_request_id")
        
        # Step 6: Console Log Investigation
        self.test_console_log_investigation(notification_100010)
        
        # Final Summary
        print("\n" + "="*80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*80)
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.tests_run}")
        print(f"–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: {self.tests_passed}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.tests_passed/self.tests_run*100):.1f}%" if self.tests_run > 0 else "0%")
        
        print("\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
        
        if notification_100010:
            pickup_request_id = notification_100010.get('pickup_request_id')
            status = notification_100010.get('status', 'N/A')
            
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #100010 –Ω–∞–π–¥–µ–Ω–æ")
            print(f"üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}")
            
            if pickup_request_id and pickup_request_id != 'N/A':
                print(f"‚úÖ pickup_request_id –Ω–∞–π–¥–µ–Ω: {pickup_request_id}")
                print(f"üí° –í–ï–†–û–Ø–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: –ü—Ä–æ–±–ª–µ–º–∞ –≤ frontend –∫–æ–¥–µ –∏–ª–∏ endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå pickup_request_id –ù–ï –ù–ê–ô–î–ï–ù")
                print(f"üí° –û–°–ù–û–í–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: handleAcceptWarehouseDelivery –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å pickup_request_id")
                print(f"üí° –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å pickup_request_id –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é #100010")
        else:
            print(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #100010 –ù–ï –ù–ê–ô–î–ï–ù–û")
            print(f"üí° –û–°–ù–û–í–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê: UI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∫—É–¥–∞ UI –±–µ—Ä–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #100010")
        print("2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å—Ç—å pickup_request_id")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ endpoint /api/operator/pickup-requests/{pickup_request_id} —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("4. –î–æ–±–∞–≤–∏—Ç—å console.log –≤ handleAcceptWarehouseDelivery –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
        print("5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ' –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
        
        return True

if __name__ == "__main__":
    tester = PickupRequestDiagnosticTester()
    tester.run_full_diagnostic()