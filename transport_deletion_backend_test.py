#!/usr/bin/env python3
"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–õ–æ–≥–∏—Å—Ç–∏–∫–∞" ‚Üí "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤" –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞

–ü–û–î–û–ó–†–ï–ù–ò–Ø:
1. Frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ backend
2. Backend endpoint —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –ø–æ–∏—Å–∫–∞ (id vs transport_id vs transport_number)
4. Endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

–ù–£–ñ–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ GET /api/admin/transport
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ (–∫–∞–∫–∏–µ –ø–æ–ª—è ID –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ DELETE endpoint
5. –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π: id, transport_id, transport_number
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è endpoints: /api/admin/transport/{id}, /api/admin/transports/{id}

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import requests
import json
import os
from datetime import datetime
import time

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://550bba2e-5014-4d23-b2e8-7c38c4ea5482.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class TransportDeletionTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.user_info = None
        self.test_results = []
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def add_test_result(self, test_name, success, details):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
        
    def authenticate_admin(self, phone="+79999888777", password="admin123"):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º"""
        try:
            self.log("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞–º...")
            
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": phone,
                "password": password
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.user_info = data.get("user")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {self.user_info.get('full_name')} (—Ä–æ–ª—å: {self.user_info.get('role')})")
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user_info.get('full_name')}, —Ä–æ–ª—å: {self.user_info.get('role')}")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            self.add_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def get_transport_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints"""
        transport_data = []
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        possible_endpoints = [
            "/transport/list",  # –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π endpoint
            "/admin/transport",
            "/admin/transports", 
            "/transport",
            "/transports",
            "/admin/transport/list",
            "/admin/transports/list"
        ]
        
        self.log("üöõ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints...")
        
        for endpoint in possible_endpoints:
            try:
                self.log(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET {endpoint}...")
                response = self.session.get(f"{API_BASE}{endpoint}")
                
                if response.status_code == 200:
                    data = response.json()
                    self.log(f"‚úÖ Endpoint GET {endpoint} —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {len(data) if isinstance(data, list) else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                    if isinstance(data, list) and len(data) > 0:
                        sample_transport = data[0]
                        self.log(f"   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {list(sample_transport.keys())}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π ID
                        id_fields = []
                        if 'id' in sample_transport:
                            id_fields.append(f"id: {sample_transport['id']}")
                        if 'transport_id' in sample_transport:
                            id_fields.append(f"transport_id: {sample_transport['transport_id']}")
                        if 'transport_number' in sample_transport:
                            id_fields.append(f"transport_number: {sample_transport['transport_number']}")
                        
                        self.log(f"   üîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è ID: {', '.join(id_fields)}")
                        
                        transport_data = data
                        self.add_test_result(f"GET {endpoint}", True, f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤, –ø–æ–ª—è ID: {id_fields}")
                        break
                    else:
                        self.log(f"   ‚ö†Ô∏è Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                        self.add_test_result(f"GET {endpoint}", True, "Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
                        
                elif response.status_code == 404:
                    self.log(f"   ‚ùå Endpoint GET {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    self.add_test_result(f"GET {endpoint}", False, "Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                else:
                    self.log(f"   ‚ùå Endpoint GET {endpoint} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                    self.add_test_result(f"GET {endpoint}", False, f"HTTP {response.status_code}: {response.text[:200]}")
                    
            except Exception as e:
                self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GET {endpoint}: {e}")
                self.add_test_result(f"GET {endpoint}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        return transport_data
    
    def create_test_transport(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            self.log("üöõ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è...")
            
            test_transport_data = {
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å –£–¥–∞–ª–µ–Ω–∏—è",
                "driver_phone": "+79999000001",
                "transport_number": "TEST001DEL",
                "capacity_kg": 1000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            }
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            creation_endpoints = [
                "/admin/transport",
                "/admin/transports",
                "/transport",
                "/transports"
            ]
            
            for endpoint in creation_endpoints:
                try:
                    self.log(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST {endpoint}...")
                    response = self.session.post(f"{API_BASE}{endpoint}", json=test_transport_data)
                    
                    if response.status_code in [200, 201]:
                        data = response.json()
                        self.log(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ POST {endpoint}")
                        self.log(f"   üìã –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                        
                        self.add_test_result(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ POST {endpoint}", True, f"–°–æ–∑–¥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data}")
                        return data
                        
                    elif response.status_code == 404:
                        self.log(f"   ‚ùå Endpoint POST {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                        self.add_test_result(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ POST {endpoint}", False, "Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    else:
                        self.log(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ POST {endpoint}: {response.status_code} - {response.text}")
                        self.add_test_result(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ POST {endpoint}", False, f"HTTP {response.status_code}: {response.text}")
                        
                except Exception as e:
                    self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ POST {endpoint}: {e}")
                    self.add_test_result(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ POST {endpoint}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints")
            return None
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {e}")
            self.add_test_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None
    
    def test_transport_deletion(self, transport_data):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –∏ –º–µ—Ç–æ–¥—ã"""
        if not transport_data:
            self.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False
        
        self.log("üóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ ID
        transport_ids = {}
        if isinstance(transport_data, list) and len(transport_data) > 0:
            sample_transport = transport_data[0]
        else:
            sample_transport = transport_data
            
        if 'id' in sample_transport:
            transport_ids['id'] = sample_transport['id']
        if 'transport_id' in sample_transport:
            transport_ids['transport_id'] = sample_transport['transport_id']
        if 'transport_number' in sample_transport:
            transport_ids['transport_number'] = sample_transport['transport_number']
        
        self.log(f"   üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {transport_ids}")
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        deletion_endpoints = [
            "/admin/transports/{id}",  # –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π endpoint
            "/admin/transport/{id}",
            "/transport/{id}",
            "/transports/{id}",
            "/admin/transport/delete/{id}",
            "/admin/transports/delete/{id}"
        ]
        
        deletion_success = False
        
        for endpoint_template in deletion_endpoints:
            for id_field, id_value in transport_ids.items():
                try:
                    endpoint = endpoint_template.replace("{id}", str(id_value))
                    self.log(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE {endpoint} (–∏—Å–ø–æ–ª—å–∑—É—è {id_field}: {id_value})...")
                    
                    response = self.session.delete(f"{API_BASE}{endpoint}")
                    
                    if response.status_code == 200:
                        self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DELETE {endpoint}!")
                        try:
                            data = response.json()
                            self.log(f"   üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(data, indent=2, ensure_ascii=False)}")
                        except:
                            self.log(f"   üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                        
                        self.add_test_result(f"–£–¥–∞–ª–µ–Ω–∏–µ DELETE {endpoint}", True, f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å {id_field}: {id_value}")
                        deletion_success = True
                        return True
                        
                    elif response.status_code == 404:
                        if "not found" in response.text.lower() or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in response.text.lower():
                            self.log(f"   ‚ùå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ DELETE {endpoint} (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID)")
                            self.add_test_result(f"–£–¥–∞–ª–µ–Ω–∏–µ DELETE {endpoint}", False, f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —Å {id_field}: {id_value}")
                        else:
                            self.log(f"   ‚ùå Endpoint DELETE {endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                            self.add_test_result(f"–£–¥–∞–ª–µ–Ω–∏–µ DELETE {endpoint}", False, "Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    else:
                        self.log(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ DELETE {endpoint}: {response.status_code} - {response.text}")
                        self.add_test_result(f"–£–¥–∞–ª–µ–Ω–∏–µ DELETE {endpoint}", False, f"HTTP {response.status_code}: {response.text}")
                        
                except Exception as e:
                    self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ DELETE {endpoint}: {e}")
                    self.add_test_result(f"–£–¥–∞–ª–µ–Ω–∏–µ DELETE {endpoint}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        
        if not deletion_success:
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints")
            
        return deletion_success
    
    def analyze_backend_code_structure(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã backend –∫–æ–¥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è endpoints —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üîç –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints —á–µ—Ä–µ–∑ –æ–ø—Ü–∏–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        test_endpoints = [
            "/admin/transport",
            "/admin/transports",
            "/transport", 
            "/transports"
        ]
        
        for endpoint in test_endpoints:
            try:
                response = self.session.options(f"{API_BASE}{endpoint}")
                if response.status_code == 200:
                    allowed_methods = response.headers.get('Allow', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    self.log(f"   üìã {endpoint}: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {allowed_methods}")
                    self.add_test_result(f"OPTIONS {endpoint}", True, f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {allowed_methods}")
                else:
                    self.log(f"   ‚ùå OPTIONS {endpoint}: {response.status_code}")
                    self.add_test_result(f"OPTIONS {endpoint}", False, f"HTTP {response.status_code}")
            except Exception as e:
                self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ OPTIONS {endpoint}: {e}")
                self.add_test_result(f"OPTIONS {endpoint}", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üö® –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        transport_data = self.get_transport_list()
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã endpoints
        self.analyze_backend_code_structure()
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)
        if not transport_data:
            self.log("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç...")
            test_transport = self.create_test_transport()
            if test_transport:
                transport_data = [test_transport]
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        if transport_data:
            self.test_transport_deletion(transport_data)
        else:
            self.log("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
            self.add_test_result("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", False, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # 6. –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_diagnosis_summary()
        
        return True
    
    def print_diagnosis_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("=" * 80)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –£–î–ê–õ–ï–ù–ò–Ø –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log("=" * 80)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - successful_tests
        
        self.log(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í:")
        self.log(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        self.log(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        self.log(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        self.log(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests*100):.1f}%" if total_tests > 0 else "   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: 0%")
        
        self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            self.log(f"   {status} {result['test']}: {result['details']}")
        
        # –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log(f"\nüéØ –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç
        working_get_endpoints = [r for r in self.test_results if r["test"].startswith("GET") and r["success"]]
        working_delete_endpoints = [r for r in self.test_results if r["test"].startswith("–£–¥–∞–ª–µ–Ω–∏–µ DELETE") and r["success"]]
        
        if working_get_endpoints:
            self.log(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ GET endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            for endpoint in working_get_endpoints:
                self.log(f"      - {endpoint['test']}")
        else:
            self.log(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´ —Ä–∞–±–æ—á–∏–µ GET endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            self.log(f"      –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é endpoints –≤ backend")
        
        if working_delete_endpoints:
            self.log(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ DELETE endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            for endpoint in working_delete_endpoints:
                self.log(f"      - {endpoint['test']}")
        else:
            self.log(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´ —Ä–∞–±–æ—á–∏–µ DELETE endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            self.log(f"      –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å DELETE endpoint –≤ backend")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π ID
        id_field_tests = [r for r in self.test_results if "–ø–æ–ª—è ID:" in r["details"]]
        if id_field_tests:
            self.log(f"   üîë –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π ID –≤ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:")
            for test in id_field_tests:
                self.log(f"      - {test['details']}")
        
        self.log(f"\nüö® –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´:")
        if not working_get_endpoints:
            self.log(f"   1. Backend –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–±–æ—á–∏—Ö endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
        if not working_delete_endpoints:
            self.log(f"   2. Backend –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–±–æ—á–∏—Ö endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
        if working_get_endpoints and not working_delete_endpoints:
            self.log(f"   3. –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É GET –∏ DELETE endpoints")
            self.log(f"   4. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        self.log(f"   1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ backend —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã endpoints:")
        self.log(f"      - GET /api/admin/transport (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞)")
        self.log(f"      - DELETE /api/admin/transport/{{id}} (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)")
        self.log(f"   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π ID –º–µ–∂–¥—É frontend –∏ backend")
        self.log(f"   3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ frontend –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        self.log(f"   4. –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ backend –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è")
        
        self.log("=" * 80)
        self.log("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    tester = TransportDeletionTester()
    
    try:
        tester.run_comprehensive_diagnosis()
    except KeyboardInterrupt:
        tester.log("‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        tester.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    return tester.test_results

if __name__ == "__main__":
    main()