#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API layout-with-cargo: –ü–æ—á–µ–º—É –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ USR648425
====================================================================

–ù–ê–ô–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:
- –ó–∞—è–≤–∫–∞ 25082298: 7 –µ–¥–∏–Ω–∏—Ü —Ä–∞–∑–º–µ—â–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º "–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á"
- –ó–∞—è–≤–∫–∞ 250101: 1 –µ–¥–∏–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —Ç–µ–º –∂–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
- –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ /operator/cargo/fully-placed

–ü–†–û–ë–õ–ï–ú–ê: API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4 –µ–¥–∏–Ω–∏—Ü—ã, –Ω–µ –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ USR648425

–¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É layout-with-cargo –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class LayoutWithCargoDebugger:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.warehouse_id = None
        self.warehouse_info = None

    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                    return True
            
            return False
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False

    def get_warehouse_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses")
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    self.warehouse_info = warehouses[0]
                    self.warehouse_id = self.warehouse_info["id"]
                    self.log(f"‚úÖ –°–∫–ª–∞–¥: {self.warehouse_info['name']} (ID: {self.warehouse_id})")
                    return True
            
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ")
            return False
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {e}", "ERROR")
            return False

    def analyze_fully_placed_data(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ fully-placed API"""
        try:
            self.log("üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ò–ó fully-placed API...")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed")
            if response.status_code != 200:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è fully-placed: {response.status_code}")
                return None
            
            data = response.json()
            items = data.get("items", [])
            
            self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(items)}")
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 25082298
            target_application = None
            for item in items:
                if "25082298" in item.get("cargo_number", ""):
                    target_application = item
                    break
            
            if target_application:
                self.log("üéØ –ù–ê–ô–î–ï–ù–ê –¶–ï–õ–ï–í–ê–Ø –ó–ê–Ø–í–ö–ê 25082298:")
                self.log(f"   –ù–æ–º–µ—Ä: {target_application.get('cargo_number')}")
                self.log(f"   –†–∞–∑–º–µ—â–∞—é—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {target_application.get('placing_operator')}")
                self.log(f"   warehouse_id: {target_application.get('warehouse_id', '–ù–ï –£–ö–ê–ó–ê–ù')}")
                
                # –ê–Ω–∞–ª–∏–∑ individual_units
                individual_units = target_application.get("individual_units", [])
                self.log(f"   Individual units: {len(individual_units)}")
                
                placed_units = []
                for unit in individual_units:
                    if unit.get("status") == "placed":
                        placed_units.append(unit)
                        self.log(f"      ‚úÖ {unit.get('individual_number')}: {unit.get('placement_info')}")
                
                self.log(f"   üìä –ò–¢–û–ì–û –†–ê–ó–ú–ï–©–ï–ù–û: {len(placed_units)} –µ–¥–∏–Ω–∏—Ü")
                
                return {
                    "application": target_application,
                    "placed_units": placed_units,
                    "warehouse_id": target_application.get("warehouse_id")
                }
            else:
                self.log("‚ùå –ó–∞—è–≤–∫–∞ 25082298 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ fully-placed: {e}", "ERROR")
            return None

    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo"""
        try:
            self.log("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API layout-with-cargo...")
            
            if not self.warehouse_id:
                self.log("‚ùå warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                return None
            
            response = self.session.get(f"{API_BASE}/warehouses/{self.warehouse_id}/layout-with-cargo")
            
            if response.status_code != 200:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API layout-with-cargo: {response.status_code}")
                return None
            
            data = response.json()
            self.log("‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ê–Ω–∞–ª–∏–∑ cargo_info
            cargo_info = data.get("cargo_info", [])
            self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü –≤ cargo_info: {len(cargo_info)}")
            
            # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö USR648425
            usr_units = []
            for unit in cargo_info:
                placed_by = unit.get("placed_by", "")
                if "–Æ–ª–¥–∞—à–µ–≤" in placed_by or "USR648425" in placed_by:
                    usr_units.append(unit)
            
            self.log(f"üîç –ï–¥–∏–Ω–∏—Ü –æ—Ç USR648425/–Æ–ª–¥–∞—à–µ–≤: {len(usr_units)}")
            
            if usr_units:
                self.log("‚úÖ –ù–ê–ô–î–ï–ù–´ –ï–î–ò–ù–ò–¶–´ –û–¢ USR648425:")
                for unit in usr_units[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    self.log(f"   üì¶ {unit.get('cargo_number')}: {unit.get('cargo_name')}")
                    self.log(f"      –†–∞–∑–º–µ—â–µ–Ω: {unit.get('placed_by')}")
                    self.log(f"      –Ø—á–µ–π–∫–∞: {unit.get('cell_location')}")
            else:
                self.log("‚ùå –ï–î–ò–ù–ò–¶–´ –û–¢ USR648425 –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ cargo_info")
            
            # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            self.analyze_cargo_info_sources(cargo_info)
            
            return {
                "cargo_info": cargo_info,
                "usr_units": usr_units,
                "total_units": len(cargo_info)
            }
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è layout-with-cargo: {e}", "ERROR")
            return None

    def analyze_cargo_info_sources(self, cargo_info):
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ cargo_info"""
        try:
            self.log("üîç –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–• –í cargo_info:")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
            sources = {}
            
            for unit in cargo_info:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
                if "placement_record_id" in unit:
                    source = "placement_records"
                elif "operator_cargo_id" in unit:
                    source = "operator_cargo"
                elif unit.get("placed_by"):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å placed_by, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏–∑ placement_records
                    source = "placement_records"
                else:
                    source = "unknown"
                
                if source not in sources:
                    sources[source] = []
                sources[source].append(unit)
            
            self.log(f"üìä –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:")
            for source, units in sources.items():
                self.log(f"   {source}: {len(units)} –µ–¥–∏–Ω–∏—Ü")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                if units:
                    sample = units[0]
                    fields = list(sample.keys())
                    self.log(f"      –ü–æ–ª—è: {', '.join(fields[:8])}{'...' if len(fields) > 8 else ''}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo
            if "operator_cargo" not in sources and "placement_records" in sources:
                self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ placement_records, operator_cargo –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!")
            elif "operator_cargo" in sources:
                self.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo –Ω–∞–π–¥–µ–Ω—ã")
            else:
                self.log("‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}", "ERROR")

    def compare_data_sources(self, fully_placed_data, layout_data):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            self.log("üîç –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –†–ê–ó–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í:")
            
            if not fully_placed_data or not layout_data:
                self.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                return
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑ fully-placed
            fully_placed_units = len(fully_placed_data["placed_units"])
            fully_placed_warehouse_id = fully_placed_data["warehouse_id"]
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑ layout-with-cargo
            layout_units = layout_data["total_units"]
            layout_usr_units = len(layout_data["usr_units"])
            
            self.log(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï:")
            self.log(f"   fully-placed: {fully_placed_units} –µ–¥–∏–Ω–∏—Ü –æ—Ç USR648425")
            self.log(f"   layout-with-cargo: {layout_usr_units} –µ–¥–∏–Ω–∏—Ü –æ—Ç USR648425")
            self.log(f"   layout-with-cargo –≤—Å–µ–≥–æ: {layout_units} –µ–¥–∏–Ω–∏—Ü")
            
            # –ê–Ω–∞–ª–∏–∑ warehouse_id
            self.log(f"üè¢ WAREHOUSE_ID:")
            self.log(f"   fully-placed –¥–∞–Ω–Ω—ã–µ: {fully_placed_warehouse_id}")
            self.log(f"   —Ç–µ–∫—É—â–∏–π —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {self.warehouse_id}")
            
            if fully_placed_warehouse_id != self.warehouse_id:
                self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: warehouse_id –≤ fully-placed –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–∫–ª–∞–¥–æ–º!")
                self.log("   –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø–æ—á–µ–º—É layout-with-cargo –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ")
            else:
                self.log("‚úÖ warehouse_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            
            # –í—ã–≤–æ–¥—ã
            if fully_placed_units > layout_usr_units:
                self.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç –º–µ–Ω—å—à–µ –µ–¥–∏–Ω–∏—Ü —á–µ–º fully-placed")
                self.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                self.log("   1. API layout-with-cargo –Ω–µ –∏—â–µ—Ç –≤ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
                self.log("   2. –§–∏–ª—å—Ç—Ä –ø–æ warehouse_id –∏—Å–∫–ª—é—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo")
                self.log("   3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ operator_cargo –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
            else:
                self.log("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")

    def test_placement_records_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ placement_records API"""
        try:
            self.log("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï placement_records...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –¥–ª—è placement_records
            endpoints = [
                f"/warehouses/{self.warehouse_id}/placement-records",
                "/operator/placement-records",
                "/placement-records"
            ]
            
            for endpoint in endpoints:
                try:
                    response = self.session.get(f"{API_BASE}{endpoint}")
                    if response.status_code == 200:
                        data = response.json()
                        self.log(f"‚úÖ {endpoint}: –Ω–∞–π–¥–µ–Ω–æ {len(data) if isinstance(data, list) else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ USR648425
                        if isinstance(data, list):
                            usr_records = [r for r in data if "–Æ–ª–¥–∞—à–µ–≤" in str(r.get("placed_by", ""))]
                            self.log(f"   –ó–∞–ø–∏—Å–∏ –æ—Ç USR648425: {len(usr_records)}")
                        
                        return data
                    else:
                        self.log(f"‚ö†Ô∏è {endpoint}: {response.status_code}")
                except:
                    continue
            
            self.log("‚ùå placement_records API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è placement_records: {e}", "ERROR")
            return None

    def generate_diagnosis_report(self, fully_placed_data, layout_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 80)
        self.log("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ API layout-with-cargo")
        self.log("=" * 80)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
        if fully_placed_data and layout_data:
            fully_placed_units = len(fully_placed_data["placed_units"])
            layout_usr_units = len(layout_data["usr_units"])
            
            self.log(f"üéØ –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
            self.log(f"   ‚úÖ –ó–∞—è–≤–∫–∞ 25082298 –Ω–∞–π–¥–µ–Ω–∞ –≤ fully-placed API")
            self.log(f"   ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä '–Æ–ª–¥–∞—à–µ–≤ –ñ–∞—Å—É—Ä–±–µ–∫ –ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á' –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            self.log(f"   üìä fully-placed –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {fully_placed_units} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü")
            self.log(f"   üìä layout-with-cargo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {layout_usr_units} –µ–¥–∏–Ω–∏—Ü –æ—Ç USR648425")
            
            if fully_placed_units > layout_usr_units:
                self.log(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
                self.log(f"   API layout-with-cargo –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425")
                self.log(f"   –ù–µ–¥–æ—Å—Ç–∞–µ—Ç: {fully_placed_units - layout_usr_units} –µ–¥–∏–Ω–∏—Ü")
                
                # –ê–Ω–∞–ª–∏–∑ warehouse_id
                fully_placed_warehouse_id = fully_placed_data.get("warehouse_id")
                if fully_placed_warehouse_id != self.warehouse_id:
                    self.log(f"\nüîç –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:")
                    self.log(f"   warehouse_id –≤ –¥–∞–Ω–Ω—ã—Ö: {fully_placed_warehouse_id}")
                    self.log(f"   warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {self.warehouse_id}")
                    self.log(f"   ‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï warehouse_id!")
                    self.log(f"   API layout-with-cargo —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                    self.log(f"   –Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ operator_cargo –∏–º–µ—é—Ç –¥—Ä—É–≥–æ–π/–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π warehouse_id")
                else:
                    self.log(f"\nüîç –î–†–£–ì–ò–ï –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
                    self.log(f"   1. API layout-with-cargo –Ω–µ –∏—â–µ—Ç –≤ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
                    self.log(f"   2. –õ–æ–≥–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
                    self.log(f"   3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ individual_items –≤ operator_cargo –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
            else:
                self.log(f"\n‚úÖ –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê:")
                self.log(f"   layout-with-cargo –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ")
        else:
            self.log(f"‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–• –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        self.log(f"1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É API layout-with-cargo:")
        self.log(f"   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏—â–µ—Ç –≤ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö (placement_records + operator_cargo)")
        self.log(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ warehouse_id")
        self.log(f"2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å warehouse_id –≤ operator_cargo –∑–∞–ø–∏—Å—è—Ö:")
        self.log(f"   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π warehouse_id –¥–ª—è –∑–∞–ø–∏—Å–µ–π USR648425")
        self.log(f"   - –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        self.log(f"3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
        self.log(f"   - placement_records (—Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫)")
        self.log(f"   - operator_cargo —Å is_placed=true (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫)")
        
        self.log("\n" + "=" * 80)

    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API layout-with-cargo")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
        if not self.get_warehouse_info():
            return False
        
        # 3. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö fully-placed
        fully_placed_data = self.analyze_fully_placed_data()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ layout-with-cargo
        layout_data = self.test_layout_with_cargo_api()
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ placement_records
        self.test_placement_records_api()
        
        # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.compare_data_sources(fully_placed_data, layout_data)
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_diagnosis_report(fully_placed_data, layout_data)
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    debugger = LayoutWithCargoDebugger()
    
    try:
        success = debugger.run_comprehensive_diagnosis()
        
        if success:
            print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return 0
        else:
            print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())