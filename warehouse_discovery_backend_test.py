#!/usr/bin/env python3
"""
–û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –°–ö–õ–ê–î–û–í –ò –ü–û–ò–°–ö –°–ö–õ–ê–î–ê 003
===============================================

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–ª—è —Å–∫–ª–∞–¥–∞ 003
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class WarehouseDiscoveryTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    operator_info = user_response.json()
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {operator_info.get('full_name')} (—Ä–æ–ª—å: {operator_info.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def discover_warehouses(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤"""
        try:
            self.log("üèóÔ∏è –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
            endpoints = [
                "/operator/warehouses",
                "/warehouses/all",
                "/admin/warehouses/list"
            ]
            
            for endpoint in endpoints:
                try:
                    self.log(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint: {endpoint}")
                    response = self.session.get(f"{API_BASE}{endpoint}")
                    
                    if response.status_code == 200:
                        warehouses = response.json()
                        self.log(f"‚úÖ Endpoint {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
                        
                        if warehouses:
                            self.analyze_warehouses(warehouses, endpoint)
                        else:
                            self.log("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç", "WARNING")
                    else:
                        self.log(f"‚ùå Endpoint {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                        
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint}: {str(e)}", "ERROR")
            
        except Exception as e:
            self.log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {str(e)}", "ERROR")
    
    def analyze_warehouses(self, warehouses, endpoint):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤"""
        try:
            self.log(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–∫–ª–∞–¥–æ–≤ –∏–∑ endpoint {endpoint}:")
            
            warehouse_003_candidates = []
            
            for i, warehouse in enumerate(warehouses):
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                warehouse_id = warehouse.get("id", "N/A")
                warehouse_name = warehouse.get("name", "N/A")
                warehouse_location = warehouse.get("location", "N/A")
                warehouse_id_number = warehouse.get("warehouse_id_number", "N/A")
                
                self.log(f"  {i+1}. ID: {warehouse_id}")
                self.log(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {warehouse_name}")
                self.log(f"     –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {warehouse_location}")
                self.log(f"     ID –Ω–æ–º–µ—Ä: {warehouse_id_number}")
                
                # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥ 003
                if (warehouse_id_number == "003" or 
                    "003" in warehouse_name or 
                    "–°–∫–ª–∞–¥ ‚Ññ3" in warehouse_name or
                    "–î—É—à–∞–Ω–±–µ" in warehouse_name):
                    warehouse_003_candidates.append({
                        "id": warehouse_id,
                        "name": warehouse_name,
                        "location": warehouse_location,
                        "id_number": warehouse_id_number,
                        "reason": self.get_match_reason(warehouse, "003")
                    })
                
                self.log("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            
            # –û—Ç—á–µ—Ç –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥ 003
            if warehouse_003_candidates:
                self.log("üéØ –ù–ê–ô–î–ï–ù–´ –ö–ê–ù–î–ò–î–ê–¢–´ –ù–ê –°–ö–õ–ê–î 003:")
                for j, candidate in enumerate(warehouse_003_candidates, 1):
                    self.log(f"  {j}. ID: {candidate['id']}")
                    self.log(f"     –ù–∞–∑–≤–∞–Ω–∏–µ: {candidate['name']}")
                    self.log(f"     ID –Ω–æ–º–µ—Ä: {candidate['id_number']}")
                    self.log(f"     –ü—Ä–∏—á–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {candidate['reason']}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º layout-with-cargo –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    self.test_layout_api_for_warehouse(candidate['id'], candidate['name'])
                    self.log("")
            else:
                self.log("‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥ 003 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "WARNING")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫–ª–∞–¥–æ–≤: {str(e)}", "ERROR")
    
    def get_match_reason(self, warehouse, target):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞"""
        reasons = []
        
        warehouse_id_number = warehouse.get("warehouse_id_number", "")
        warehouse_name = warehouse.get("name", "")
        warehouse_location = warehouse.get("location", "")
        
        if warehouse_id_number == target:
            reasons.append(f"ID –Ω–æ–º–µ—Ä = {target}")
        if target in warehouse_name:
            reasons.append(f"'{target}' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
        if "–°–∫–ª–∞–¥ ‚Ññ3" in warehouse_name:
            reasons.append("'–°–∫–ª–∞–¥ ‚Ññ3' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
        if "–î—É—à–∞–Ω–±–µ" in warehouse_name:
            reasons.append("'–î—É—à–∞–Ω–±–µ' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
            
        return ", ".join(reasons) if reasons else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
    
    def test_layout_api_for_warehouse(self, warehouse_id, warehouse_name):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id} ({warehouse_name})...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses/{warehouse_id}/layout-with-cargo")
            
            if response.status_code == 200:
                layout_data = response.json()
                placement_records = layout_data.get("placement_records", [])
                blocks = layout_data.get("blocks", [])
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
                occupied_cells = 0
                for block in blocks:
                    for shelf in block.get("shelves", []):
                        for cell in shelf.get("cells", []):
                            if cell.get("is_occupied", False):
                                occupied_cells += 1
                
                self.log(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}")
                self.log(f"   üìç Placement records: {len(placement_records)}")
                self.log(f"   üì¶ –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {occupied_cells}")
                self.log(f"   üèóÔ∏è –ë–ª–æ–∫–æ–≤: {len(blocks)}")
                
                if len(placement_records) > 0:
                    self.log(f"üéØ –ù–ê–ô–î–ï–ù –ê–ö–¢–ò–í–ù–´–ô –°–ö–õ–ê–î –° –†–ê–ó–ú–ï–©–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò!")
                    self.analyze_placement_records_summary(placement_records)
                
            elif response.status_code == 404:
                self.log(f"‚ùå –°–∫–ª–∞–¥ {warehouse_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ layout-with-cargo")
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_id}: {response.status_code}")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ {warehouse_id}: {str(e)}", "ERROR")
    
    def analyze_placement_records_summary(self, placement_records):
        """–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ placement_records"""
        try:
            warehouse_ids = set()
            cargo_numbers = set()
            
            for record in placement_records[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                warehouse_id = record.get("warehouse_id", "N/A")
                cargo_number = record.get("cargo_number", "N/A")
                individual_number = record.get("individual_number", "N/A")
                location = record.get("location", "N/A")
                
                warehouse_ids.add(warehouse_id)
                cargo_numbers.add(cargo_number)
                
                self.log(f"   üìç {cargo_number}/{individual_number} -> {location} (warehouse_id: {warehouse_id})")
            
            if len(placement_records) > 5:
                self.log(f"   ... –∏ –µ—â–µ {len(placement_records) - 5} –∑–∞–ø–∏—Å–µ–π")
            
            self.log(f"   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö warehouse_id: {len(warehouse_ids)} ({list(warehouse_ids)})")
            self.log(f"   üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {len(cargo_numbers)}")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ placement_records: {str(e)}", "ERROR")
    
    def run_discovery(self):
        """–ó–∞–ø—É—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤"""
        self.log("üéØ –ù–ê–ß–ê–õ–û –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–í –ò –ü–û–ò–°–ö–ê –°–ö–õ–ê–î–ê 003")
        self.log("=" * 60)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # –≠—Ç–∞–ø 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
        self.discover_warehouses()
        
        self.log("=" * 60)
        self.log("üìã –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –ó–ê–í–ï–†–®–ï–ù–û")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseDiscoveryTester()
    
    try:
        success = tester.run_discovery()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        tester.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        sys.exit(1)
    except Exception as e:
        tester.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()