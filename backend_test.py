#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞.
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ 4 –Ω–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞.

–ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. GET /api/warehouses/{warehouse_id}/cities - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å–∫–ª–∞–¥–∞
2. POST /api/warehouses/{warehouse_id}/cities - –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ –∫ —Å–∫–ª–∞–¥—É
3. POST /api/warehouses/{warehouse_id}/cities/bulk - –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
4. DELETE /api/warehouses/{warehouse_id}/cities - —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–∫–ª–∞–¥–∞
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-tracker-31.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class WarehouseCityTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_warehouse_id = None
        self.test_warehouse_name = None
        self.test_results = []
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        result = f"{status} - {test_name}: {details}"
        self.test_results.append(result)
        print(result)
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º"""
        print("\nüîê –≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        # –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_credentials = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json=admin_credentials)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
                )
                return True
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_warehouse_for_testing(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüè¢ –≠–¢–ê–ü 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                if warehouses:
                    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    test_warehouse = warehouses[0]
                    self.test_warehouse_id = test_warehouse.get("id")
                    self.test_warehouse_name = test_warehouse.get("name")
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤. –í—ã–±—Ä–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: '{self.test_warehouse_name}' (ID: {self.test_warehouse_id})"
                    )
                    return True
                else:
                    self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç")
                    return False
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_warehouse_cities_initial(self):
        """–¢–µ—Å—Ç GET /api/warehouses/{warehouse_id}/cities (–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ)"""
        print("\nüìã –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET cities (–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities")
            
            if response.status_code == 200:
                data = response.json()
                cities = data.get("cities", [])
                cities_count = data.get("cities_count", 0)
                
                self.log_result(
                    "GET warehouse cities (–Ω–∞—á–∞–ª—å–Ω–æ–µ)",
                    True,
                    f"–°–∫–ª–∞–¥ '{data.get('warehouse_name')}' –∏–º–µ–µ—Ç {cities_count} –≥–æ—Ä–æ–¥–æ–≤: {cities}"
                )
                return True
            else:
                self.log_result(
                    "GET warehouse cities (–Ω–∞—á–∞–ª—å–Ω–æ–µ)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET warehouse cities (–Ω–∞—á–∞–ª—å–Ω–æ–µ)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_add_single_city(self):
        """–¢–µ—Å—Ç POST /api/warehouses/{warehouse_id}/cities - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥ "–î—É—à–∞–Ω–±–µ" """
        print("\n‚ûï –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST single city - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ '–î—É—à–∞–Ω–±–µ'")
        
        city_data = {
            "city_name": "–î—É—à–∞–Ω–±–µ"
        }
        
        try:
            response = self.session.post(
                f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities",
                json=city_data
            )
            
            if response.status_code == 200:
                data = response.json()
                
                self.log_result(
                    "POST single city (–î—É—à–∞–Ω–±–µ)",
                    True,
                    f"{data.get('message')}. –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {data.get('total_cities')}"
                )
                return True
            else:
                self.log_result(
                    "POST single city (–î—É—à–∞–Ω–±–µ)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("POST single city (–î—É—à–∞–Ω–±–µ)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_add_bulk_cities(self):
        """–¢–µ—Å—Ç POST /api/warehouses/{warehouse_id}/cities/bulk - –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–∏—Ç—å ["–•—É–¥–∂–∞–Ω–¥", "–ö—É–ª—è–±", "–ö—É—Ä–≥–∞–Ω-–¢—é–±–µ"]"""
        print("\nüì¶ –≠–¢–ê–ü 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST bulk cities - –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
        
        cities_data = {
            "city_names": ["–•—É–¥–∂–∞–Ω–¥", "–ö—É–ª—è–±", "–ö—É—Ä–≥–∞–Ω-–¢—é–±–µ"]
        }
        
        try:
            response = self.session.post(
                f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities/bulk",
                json=cities_data
            )
            
            if response.status_code == 200:
                data = response.json()
                
                self.log_result(
                    "POST bulk cities",
                    True,
                    f"{data.get('message')}. –î–æ–±–∞–≤–ª–µ–Ω–æ: {data.get('added_count')} –≥–æ—Ä–æ–¥–æ–≤ {data.get('added_cities')}. –ü—Ä–æ–ø—É—â–µ–Ω–æ: {data.get('skipped_count')} –≥–æ—Ä–æ–¥–æ–≤ {data.get('skipped_cities')}. –í—Å–µ–≥–æ: {data.get('total_cities')}"
                )
                return True
            else:
                self.log_result(
                    "POST bulk cities",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("POST bulk cities", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_warehouse_cities_after_additions(self):
        """–¢–µ—Å—Ç GET /api/warehouses/{warehouse_id}/cities —Å–Ω–æ–≤–∞ - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"""
        print("\nüìã –≠–¢–ê–ü 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET cities (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π)")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities")
            
            if response.status_code == 200:
                data = response.json()
                cities = data.get("cities", [])
                cities_count = data.get("cities_count", 0)
                
                expected_cities = ["–î—É—à–∞–Ω–±–µ", "–•—É–¥–∂–∞–Ω–¥", "–ö—É–ª—è–±", "–ö—É—Ä–≥–∞–Ω-–¢—é–±–µ"]
                all_cities_present = all(city in cities for city in expected_cities)
                
                self.log_result(
                    "GET warehouse cities (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π)",
                    all_cities_present,
                    f"–°–∫–ª–∞–¥ '{data.get('warehouse_name')}' –∏–º–µ–µ—Ç {cities_count} –≥–æ—Ä–æ–¥–æ–≤: {cities}. –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {all_cities_present}"
                )
                return all_cities_present
            else:
                self.log_result(
                    "GET warehouse cities (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET warehouse cities (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_delete_city(self):
        """–¢–µ—Å—Ç DELETE /api/warehouses/{warehouse_id}/cities - —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –≥–æ—Ä–æ–¥ "–ö—É–ª—è–±" """
        print("\nüóëÔ∏è –≠–¢–ê–ü 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE city - —É–¥–∞–ª–µ–Ω–∏–µ '–ö—É–ª—è–±'")
        
        city_data = {
            "city_name": "–ö—É–ª—è–±"
        }
        
        try:
            response = self.session.delete(
                f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities",
                json=city_data
            )
            
            if response.status_code == 200:
                data = response.json()
                
                self.log_result(
                    "DELETE city (–ö—É–ª—è–±)",
                    True,
                    f"{data.get('message')}. –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: {data.get('total_cities')}"
                )
                return True
            else:
                self.log_result(
                    "DELETE city (–ö—É–ª—è–±)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("DELETE city (–ö—É–ª—è–±)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_get_warehouse_cities_final(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GET /api/warehouses/{warehouse_id}/cities - –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –±–µ–∑ "–ö—É–ª—è–±" """
        print("\nüèÅ –≠–¢–ê–ü 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GET cities (–±–µ–∑ '–ö—É–ª—è–±')")
        
        try:
            response = self.session.get(f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities")
            
            if response.status_code == 200:
                data = response.json()
                cities = data.get("cities", [])
                cities_count = data.get("cities_count", 0)
                
                expected_cities = ["–î—É—à–∞–Ω–±–µ", "–•—É–¥–∂–∞–Ω–¥", "–ö—É—Ä–≥–∞–Ω-–¢—é–±–µ"]
                kulyab_absent = "–ö—É–ª—è–±" not in cities
                expected_cities_present = all(city in cities for city in expected_cities)
                
                success = kulyab_absent and expected_cities_present
                
                self.log_result(
                    "GET warehouse cities (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)",
                    success,
                    f"–°–∫–ª–∞–¥ '{data.get('warehouse_name')}' –∏–º–µ–µ—Ç {cities_count} –≥–æ—Ä–æ–¥–æ–≤: {cities}. '–ö—É–ª—è–±' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {kulyab_absent}. –û—Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {expected_cities_present}"
                )
                return success
            else:
                self.log_result(
                    "GET warehouse cities (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("GET warehouse cities (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_security_validations(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–∫–ª–∞–¥–æ–≤ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø"""
        print("\nüîí –≠–¢–ê–ü 9: –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –¢–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        temp_session = requests.Session()
        
        try:
            response = temp_session.get(f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities")
            
            if response.status_code == 403:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)",
                    True,
                    "–î–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
                return True
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 403, –ø–æ–ª—É—á–µ–Ω HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_data_validation(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø—É—Å—Ç—ã–µ –≥–æ—Ä–æ–¥–∞, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Ç.–¥.)"""
        print("\n‚úÖ –≠–¢–ê–ü 10: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        try:
            empty_city_data = {"city_name": ""}
            response = self.session.post(
                f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities",
                json=empty_city_data
            )
            
            if response.status_code == 422:  # Validation error
                self.log_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø—É—Å—Ç–æ–π –≥–æ—Ä–æ–¥)",
                    True,
                    "–ü—É—Å—Ç–æ–π –≥–æ—Ä–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω"
                )
            else:
                self.log_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø—É—Å—Ç–æ–π –≥–æ—Ä–æ–¥)",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 422, –ø–æ–ª—É—á–µ–Ω HTTP {response.status_code}"
                )
            
            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞
            duplicate_city_data = {"city_name": "–î—É—à–∞–Ω–±–µ"}  # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
            response = self.session.post(
                f"{API_BASE}/warehouses/{self.test_warehouse_id}/cities",
                json=duplicate_city_data
            )
            
            if response.status_code == 400:  # Bad request for duplicate
                self.log_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥—É–±–ª–∏–∫–∞—Ç –≥–æ—Ä–æ–¥–∞)",
                    True,
                    "–î—É–±–ª–∏–∫–∞—Ç –≥–æ—Ä–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω"
                )
                return True
            else:
                self.log_result(
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥—É–±–ª–∏–∫–∞—Ç –≥–æ—Ä–æ–¥–∞)",
                    False,
                    f"–û–∂–∏–¥–∞–ª—Å—è HTTP 400, –ø–æ–ª—É—á–µ–Ω HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏ —Å–∫–ª–∞–¥–æ–≤ –≤ TAJLINE.TJ")
        print("=" * 100)
        
        test_steps = [
            self.authenticate_admin,
            self.get_warehouse_for_testing,
            self.test_get_warehouse_cities_initial,
            self.test_add_single_city,
            self.test_add_bulk_cities,
            self.test_get_warehouse_cities_after_additions,
            self.test_delete_city,
            self.test_get_warehouse_cities_final,
            self.test_security_validations,
            self.test_data_validation
        ]
        
        passed_tests = 0
        total_tests = len(test_steps)
        
        for test_step in test_steps:
            try:
                if test_step():
                    passed_tests += 1
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_step.__name__}: {str(e)}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(result)
        
        return success_rate >= 80

if __name__ == "__main__":
    tester = WarehouseCityTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –í–°–ï –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–û–†–û–î–ê–ú–ò –°–ö–õ–ê–î–û–í –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ù–û–í–´–• –≠–ù–î–ü–û–ò–ù–¢–ê–•!")