#!/usr/bin/env python3
"""
–ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê API available-for-placement –¥–ª—è –∑–∞—è–≤–∫–∏ 250101
=============================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏ 250101

–ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ó–∞–ø—Ä–æ—Å –∫ `/api/operator/cargo/available-for-placement`
3. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101 –≤ –æ—Ç–≤–µ—Ç–µ
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è:
   - `total_placed` (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2)
   - `placement_progress` (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '2/4')
   - `overall_placement_status`

–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ 1/4 –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 2/4. 
–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
    
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/login", json=login_data, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            user_info = data.get("user", {})
            
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
            return token
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None

def test_available_for_placement_api(token):
    """–¢–µ—Å—Ç API available-for-placement –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ 250101"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API available-for-placement...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(f"{API_BASE}/operator/cargo/available-for-placement", 
                              headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            
            print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫")
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101
            target_cargo = None
            for item in items:
                cargo_number = item.get("cargo_number", "")
                if cargo_number == "250101":
                    target_cargo = item
                    break
            
            if target_cargo:
                print(f"\nüéØ –ó–ê–Ø–í–ö–ê 250101 –ù–ê–ô–î–ï–ù–ê!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                total_placed = target_cargo.get("total_placed")
                placement_progress = target_cargo.get("placement_progress")
                overall_placement_status = target_cargo.get("overall_placement_status")
                
                print(f"üìä –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò 250101:")
                print(f"   ‚Ä¢ total_placed: {total_placed}")
                print(f"   ‚Ä¢ placement_progress: '{placement_progress}'")
                print(f"   ‚Ä¢ overall_placement_status: '{overall_placement_status}'")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo_items –µ—Å–ª–∏ –µ—Å—Ç—å
                cargo_items = target_cargo.get("cargo_items", [])
                if cargo_items:
                    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO ITEMS ({len(cargo_items)} —à—Ç.):")
                    for i, item in enumerate(cargo_items, 1):
                        cargo_name = item.get("cargo_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        placed_count = item.get("placed_count", 0)
                        total_count = item.get("total_count", 0)
                        individual_items = item.get("individual_items", [])
                        
                        print(f"   Cargo Item {i}: '{cargo_name}' - {placed_count}/{total_count} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                        
                        # –ê–Ω–∞–ª–∏–∑ individual_items
                        if individual_items:
                            for j, ind_item in enumerate(individual_items, 1):
                                individual_number = ind_item.get("individual_number", "")
                                is_placed = ind_item.get("is_placed", False)
                                status = "‚úÖ —Ä–∞–∑–º–µ—â–µ–Ω" if is_placed else "‚è≥ –æ–∂–∏–¥–∞–µ—Ç"
                                print(f"     - {individual_number}: {status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –û–ñ–ò–î–ê–ù–ò–Ø–ú:")
                if total_placed == 2:
                    print(f"‚úÖ total_placed = 2 (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—é)")
                else:
                    print(f"‚ùå total_placed = {total_placed} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 2)")
                
                if placement_progress == "2/4":
                    print(f"‚úÖ placement_progress = '2/4' (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—é)")
                else:
                    print(f"‚ùå placement_progress = '{placement_progress}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '2/4')")
                
                return True
            else:
                print(f"‚ùå –ó–ê–Ø–í–ö–ê 250101 –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"\nüìã –î–û–°–¢–£–ü–ù–´–ï –ó–ê–Ø–í–ö–ò ({len(items)} —à—Ç.):")
                for item in items[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    cargo_number = item.get("cargo_number", "")
                    total_placed = item.get("total_placed", 0)
                    placement_progress = item.get("placement_progress", "")
                    print(f"   ‚Ä¢ {cargo_number}: {placement_progress}")
                
                return False
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê API available-for-placement –¥–ª—è –∑–∞—è–≤–∫–∏ 250101")
    print("=" * 70)
    
    # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    token = test_warehouse_operator_auth()
    if not token:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        sys.exit(1)
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    success = test_available_for_placement_api(token)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    if success:
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Backend API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏ 250101")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏—è–º")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
        print("üîç –ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("=" * 70)

if __name__ == "__main__":
    main()