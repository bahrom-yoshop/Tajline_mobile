#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –∫–≥ (–∞ –Ω–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã) –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞ (‚ÇΩ)" –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –∫–≥ (–∞ –Ω–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã) –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞ (‚ÇΩ)" –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞ (‚ÇΩ)" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ü–µ–Ω–∞ –∑–∞ –∫–≥ (price_per_kg), –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø–æ–ª–Ω–∏–ª –∫—É—Ä—å–µ—Ä, –∞ –Ω–µ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (total_value).

–ó–ê–î–ê–ß–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —Å —á–µ—Ç–∫–æ —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
   - price_per_kg: 50 ‚ÇΩ/–∫–≥ (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞")
   - weight: 10 –∫–≥
   - total_value: 500 ‚ÇΩ (—ç—Ç–æ –ù–ï –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞")

2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint GET /api/operator/pickup-requests/{request_id}:
   - –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ price_per_kg
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_info —Å price_per_kg

3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É frontend –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
   - –í handleViewNotification –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è cargo_info.price_per_kg
   - –í handleViewCargo –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è cargoItem.price_per_kg
   - –ù–ï –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è total_value –∏–ª–∏ declared_value –¥–ª—è –ø–æ–ª—è price

–ü–†–ò–ú–ï–† –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:
- –ì—Ä—É–∑: "–¢–µ–ª–µ–≤–∏–∑–æ—Ä"
- –í–µ—Å: 10 –∫–≥
- –¶–µ–Ω–∞ –∑–∞ –∫–≥: 50 ‚ÇΩ (–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞ (‚ÇΩ)")
- –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 500 ‚ÇΩ (–ù–ï –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞")

–ö–†–ò–¢–ï–†–ò–ô –£–°–ü–ï–•–ê:
–í –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –ø–æ–ª–µ "–¶–µ–Ω–∞ (‚ÇΩ)" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "50", –∞ –Ω–µ "500".
"""

import requests
import json
import sys
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://03054c56-0cb9-443b-a828-f3e224602a32.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

OPERATOR_CREDENTIALS = {
    "phone": "+79777888999", 
    "password": "warehouse123"
}

class PricePerKgModalTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_user = None
        self.operator_user = None
        self.test_results = []
        self.test_pickup_request_id = None
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        print(f"{status} {test_name}: {details}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data["access_token"]
                self.admin_user = data["user"]
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.admin_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.admin_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data["access_token"]
                self.operator_user = data["user"]
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.operator_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.operator_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def create_test_pickup_request_with_price_per_kg(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ price_per_kg —Å–æ–≥–ª–∞—Å–Ω–æ review request"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ review request
            pickup_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –¢–µ–ª–µ–≤–∏–∑–æ—Ä–∞",
                "sender_phone": "+79111222333",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 123, –∫–≤. 45",
                "pickup_date": "2025-01-20",
                "pickup_time_from": "10:00",
                "pickup_time_to": "12:00",
                "destination": "–î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥. 100",
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä",  # –°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É –∏–∑ review request
                "weight": 10.0,  # 10 –∫–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É
                "price_per_kg": 50.0,  # 50 ‚ÇΩ –∑–∞ –∫–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É - –ö–õ–Æ–ß–ï–í–û–ï –ü–û–õ–ï –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
                "total_value": 500.0,  # 10 √ó 50 = 500 ‚ÇΩ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É
                "declared_value": 500.0,  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "payment_method": "cash",
                "courier_fee": 200.0,
                "delivery_method": "pickup",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è price_per_kg (50‚ÇΩ) –≤–º–µ—Å—Ç–æ total_value (500‚ÇΩ) –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ"
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/admin/courier/pickup-request",
                json=pickup_data,
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                self.test_pickup_request_id = data.get("request_id")
                
                self.log_test(
                    "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° PRICE_PER_KG",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {self.test_pickup_request_id}, –Ω–æ–º–µ—Ä: {data.get('request_number')}, –≥—Ä—É–∑: –¢–µ–ª–µ–≤–∏–∑–æ—Ä, –≤–µ—Å: 10 –∫–≥, —Ü–µ–Ω–∞ –∑–∞ –∫–≥: 50 ‚ÇΩ, –∏—Ç–æ–≥–æ: 500 ‚ÇΩ"
                )
                return True
            else:
                self.log_test(
                    "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° PRICE_PER_KG",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° PRICE_PER_KG", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_price_per_kg_field_saved(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª–µ price_per_kg –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞"""
        try:
            if not self.test_pickup_request_id:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø PRICE_PER_KG",
                    False,
                    "–ù–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_info = data.get("cargo_info", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è price_per_kg
                price_per_kg = cargo_info.get("price_per_kg")
                total_value = cargo_info.get("total_value")
                
                if price_per_kg is not None:
                    if price_per_kg == 50.0:  # –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä—É
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ total_value –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç price_per_kg
                        if total_value == 500.0 and total_value != price_per_kg:
                            self.log_test(
                                "–ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø PRICE_PER_KG",
                                True,
                                f"–ü–æ–ª–µ price_per_kg –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {price_per_kg} ‚ÇΩ/–∫–≥ (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç total_value: {total_value} ‚ÇΩ)"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø PRICE_PER_KG",
                                False,
                                f"–ü—Ä–æ–±–ª–µ–º–∞ —Å total_value: –æ–∂–∏–¥–∞–ª–æ—Å—å 500.0, –ø–æ–ª—É—á–µ–Ω–æ {total_value}"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø PRICE_PER_KG",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ price_per_kg: –æ–∂–∏–¥–∞–ª–æ—Å—å 50.0, –ø–æ–ª—É—á–µ–Ω–æ {price_per_kg}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø PRICE_PER_KG",
                        False,
                        f"–ü–æ–ª–µ price_per_kg –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ cargo_info. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(cargo_info.keys())}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø PRICE_PER_KG",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø PRICE_PER_KG", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_modal_data_structure(self):
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ modal_data.cargo_info –µ—Å—Ç—å –ø–æ–ª–µ price_per_kg"""
        try:
            if not self.test_pickup_request_id:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ MODAL_DATA",
                    False,
                    "–ù–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É modal_data
                required_sections = ["cargo_info", "sender_data", "payment_info"]
                missing_sections = []
                present_sections = []
                
                for section in required_sections:
                    if section in data:
                        present_sections.append(section)
                    else:
                        missing_sections.append(section)
                
                if not missing_sections:
                    cargo_info = data.get("cargo_info", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –≤ cargo_info
                    required_cargo_fields = ["price_per_kg", "weight", "total_value", "cargo_name"]
                    cargo_fields_present = []
                    cargo_fields_missing = []
                    
                    for field in required_cargo_fields:
                        if field in cargo_info and cargo_info[field] is not None:
                            cargo_fields_present.append(f"{field}={cargo_info[field]}")
                        else:
                            cargo_fields_missing.append(field)
                    
                    if not cargo_fields_missing:
                        self.log_test(
                            "–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ MODAL_DATA",
                            True,
                            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ modal_data –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. cargo_info —Å–æ–¥–µ—Ä–∂–∏—Ç: {', '.join(cargo_fields_present)}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ MODAL_DATA",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ cargo_info: {', '.join(cargo_fields_missing)}. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(cargo_fields_present)}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ MODAL_DATA",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {', '.join(missing_sections)}. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(present_sections)}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ MODAL_DATA",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ MODAL_DATA", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_price_calculation(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã: –≤–µ—Å √ó price_per_kg = total_value"""
        try:
            if not self.test_pickup_request_id:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–ë–©–ï–ô –°–£–ú–ú–´",
                    False,
                    "–ù–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_info = data.get("cargo_info", {})
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                weight = cargo_info.get("weight")
                price_per_kg = cargo_info.get("price_per_kg")
                total_value = cargo_info.get("total_value")
                
                if weight is not None and price_per_kg is not None and total_value is not None:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    expected_total = weight * price_per_kg
                    
                    if abs(total_value - expected_total) < 0.01:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å float
                        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ price_per_kg (50) != total_value (500)
                        if price_per_kg != total_value:
                            self.log_test(
                                "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–ë–©–ï–ô –°–£–ú–ú–´",
                                True,
                                f"–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {weight} –∫–≥ √ó {price_per_kg} ‚ÇΩ/–∫–≥ = {total_value} ‚ÇΩ. –ö–†–ò–¢–ò–ß–ù–û: price_per_kg ({price_per_kg}) ‚â† total_value ({total_value})"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–ë–©–ï–ô –°–£–ú–ú–´",
                                False,
                                f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: price_per_kg ({price_per_kg}) —Ä–∞–≤–Ω–æ total_value ({total_value}), –Ω–æ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–ë–©–ï–ô –°–£–ú–ú–´",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç: {weight} –∫–≥ √ó {price_per_kg} ‚ÇΩ/–∫–≥ = {expected_total} ‚ÇΩ, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {total_value} ‚ÇΩ"
                        )
                        return False
                else:
                    missing_fields = []
                    if weight is None:
                        missing_fields.append("weight")
                    if price_per_kg is None:
                        missing_fields.append("price_per_kg")
                    if total_value is None:
                        missing_fields.append("total_value")
                    
                    self.log_test(
                        "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–ë–©–ï–ô –°–£–ú–ú–´",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: {', '.join(missing_fields)}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–ë–©–ï–ô –°–£–ú–ú–´",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–ë–©–ï–ô –°–£–ú–ú–´", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_critical_modal_price_display_logic(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å price_per_kg (50), –∞ –ù–ï total_value (500)"""
        try:
            if not self.test_pickup_request_id:
                self.log_test(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï",
                    False,
                    "–ù–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_info = data.get("cargo_info", {})
                
                # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                price_per_kg = cargo_info.get("price_per_kg")
                total_value = cargo_info.get("total_value")
                declared_value = cargo_info.get("declared_value")
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã–µ
                if price_per_kg == 50.0 and total_value == 500.0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –≤ 10 —Ä–∞–∑
                    if total_value == price_per_kg * 10:
                        self.log_test(
                            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï",
                            True,
                            f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç price_per_kg={price_per_kg}‚ÇΩ –∏ total_value={total_value}‚ÇΩ. –í –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø–æ–ª–µ '–¶–µ–Ω–∞ (‚ÇΩ)' –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å {price_per_kg}, –∞ –ù–ï {total_value}!"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: price_per_kg={price_per_kg}, total_value={total_value}, –Ω–æ –æ–∂–∏–¥–∞–ª–æ—Å—å 10-–∫—Ä–∞—Ç–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ"
                        )
                        return False
                else:
                    self.log_test(
                        "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï",
                        False,
                        f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: price_per_kg={price_per_kg} (–æ–∂–∏–¥–∞–ª–æ—Å—å 50.0), total_value={total_value} (–æ–∂–∏–¥–∞–ª–æ—Å—å 500.0)"
                    )
                    return False
            else:
                self.log_test(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –¶–ï–ù–´ –í –ú–û–î–ê–õ–¨–ù–û–ú –û–ö–ù–ï", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_endpoint_response_structure(self):
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoint GET /api/operator/pickup-requests/{request_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.test_pickup_request_id:
                self.log_test(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT RESPONSE",
                    False,
                    "–ù–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                expected_sections = [
                    "request_info", "courier_info", "sender_data", 
                    "recipient_data", "cargo_info", "payment_info", "full_request"
                ]
                
                present_sections = []
                missing_sections = []
                
                for section in expected_sections:
                    if section in data:
                        present_sections.append(section)
                    else:
                        missing_sections.append(section)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –≤ cargo_info
                cargo_info = data.get("cargo_info", {})
                cargo_fields = ["cargo_name", "weight", "price_per_kg", "total_value", "declared_value"]
                cargo_present = []
                cargo_missing = []
                
                for field in cargo_fields:
                    if field in cargo_info and cargo_info[field] is not None:
                        cargo_present.append(f"{field}={cargo_info[field]}")
                    else:
                        cargo_missing.append(field)
                
                if not missing_sections and not cargo_missing:
                    self.log_test(
                        "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT RESPONSE",
                        True,
                        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –°–µ–∫—Ü–∏–∏: {len(present_sections)}/{len(expected_sections)}, cargo_info: {', '.join(cargo_present)}"
                    )
                    return True
                else:
                    issues = []
                    if missing_sections:
                        issues.append(f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {', '.join(missing_sections)}")
                    if cargo_missing:
                        issues.append(f"–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è cargo_info: {', '.join(cargo_missing)}")
                    
                    self.log_test(
                        "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT RESPONSE",
                        False,
                        f"–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: {'; '.join(issues)}"
                    )
                    return False
            else:
                self.log_test(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT RESPONSE",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT RESPONSE", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            if not self.test_pickup_request_id:
                return True
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            
            response = self.session.delete(
                f"{BACKEND_URL}/admin/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                self.log_test(
                    "–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•",
                    True,
                    f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {self.test_pickup_request_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
                )
                return True
            else:
                self.log_test(
                    "–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –∫–≥ (–∞ –Ω–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã) –≤ –ø–æ–ª–µ '–¶–µ–Ω–∞ (‚ÇΩ)' –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        print("=" * 120)
        print("–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–µ '–¶–µ–Ω–∞ (‚ÇΩ)' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 50‚ÇΩ (price_per_kg), –∞ –ù–ï 500‚ÇΩ (total_value)")
        print("=" * 120)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not self.authenticate_admin():
            return False
        
        if not self.authenticate_operator():
            return False
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ review request
        tests = [
            self.create_test_pickup_request_with_price_per_kg,
            self.test_price_per_kg_field_saved,
            self.test_endpoint_response_structure,
            self.test_modal_data_structure,
            self.test_price_calculation,
            self.test_critical_modal_price_display_logic  # –ù–û–í–´–ô –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢
        ]
        
        success_count = 0
        for test in tests:
            if test():
                success_count += 1
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.cleanup_test_data()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 120)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r["success"]])
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")
        
        print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['details']}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î
        if successful_tests == total_tests:
            print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç price_per_kg –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç total_value!")
            print("‚úÖ –í –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–µ '–¶–µ–Ω–∞ (‚ÇΩ)' –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å 50‚ÇΩ, –∞ –Ω–µ 500‚ÇΩ")
        else:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ price_per_kg vs total_value")
        
        return successful_tests == total_tests

if __name__ == "__main__":
    tester = PricePerKgModalTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)