#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ frontend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:
1. ‚úÖ –ò–∑–º–µ–Ω–µ–Ω endpoint —Å `/api/admin/cargo-applications/{id}` –Ω–∞ `/api/admin/pickup-requests/{id}`
2. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ, —Ç–∞–∫ –∏ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
3. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å "–∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑" –Ω–∞ "–∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä"

–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ GET /api/operator/pickup-requests
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint DELETE /api/admin/pickup-requests/{request_id}
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–æ–≤–æ–≥–æ endpoint
6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ endpoint DELETE /api/admin/courier/pickup-requests/{request_id}

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints, frontend –∏ backend —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
if not BACKEND_URL.endswith('/api'):
    BACKEND_URL = f"{BACKEND_URL}/api"

print(f"üîß Backend URL: {BACKEND_URL}")

class PickupRequestDeletionTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_results = []
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        print(f"   üìã {details}")
        print()
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'Unknown')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')}, —Ä–æ–ª—å: {user_info.get('role', 'N/A')})"
                )
                return True
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            )
            return False
    
    def get_pickup_requests_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ GET /api/operator/pickup-requests"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests")
            
            if response.status_code == 200:
                data = response.json()
                pickup_requests = data if isinstance(data, list) else data.get('items', [])
                
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(pickup_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä. Endpoint /api/operator/pickup-requests —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                )
                return pickup_requests
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return []
    
    def test_individual_deletion_main_endpoint(self, request_id: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π endpoint DELETE /api/admin/pickup-requests/{request_id}"""
        try:
            response = self.session.delete(f"{BACKEND_URL}/admin/pickup-requests/{request_id}")
            
            if response.status_code == 200:
                data = response.json()
                self.log_result(
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–π endpoint)",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {request_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ /api/admin/pickup-requests/{{id}}. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            elif response.status_code == 404:
                self.log_result(
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–π endpoint)",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (HTTP 404) - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"
                )
                return True
            else:
                self.log_result(
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–π endpoint)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–π endpoint)",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def test_individual_deletion_alternative_endpoint(self, request_id: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint DELETE /api/admin/courier/pickup-requests/{request_id}"""
        try:
            response = self.session.delete(f"{BACKEND_URL}/admin/courier/pickup-requests/{request_id}")
            
            if response.status_code == 200:
                data = response.json()
                self.log_result(
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {request_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ /api/admin/courier/pickup-requests/{{id}}. –û—Ç–≤–µ—Ç: {data}"
                )
                return True
            elif response.status_code == 404:
                self.log_result(
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (HTTP 404) - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"
                )
                return True
            else:
                self.log_result(
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint)",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def verify_deletion_from_database(self, request_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞—è–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É –ø–æ ID
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests/{request_id}")
            
            if response.status_code == 404:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (HTTP 404) - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                )
                return True
            elif response.status_code == 200:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–ó–∞—è–≤–∫–∞ {request_id} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª–µ–Ω–∏–µ –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
                )
                return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                    False,
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def test_bulk_deletion_endpoint(self, request_ids: list):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ DELETE /api/admin/pickup-requests/bulk"""
        try:
            if not request_ids:
                self.log_result(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫",
                    True,
                    "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è - —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω"
                )
                return True
            
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_ids = request_ids[:3]
            
            bulk_data = {"ids": test_ids}
            response = self.session.delete(f"{BACKEND_URL}/admin/pickup-requests/bulk", json=bulk_data)
            
            if response.status_code == 200:
                data = response.json()
                deleted_count = data.get('deleted_count', 0)
                total_requested = data.get('total_requested', 0)
                
                self.log_result(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫",
                    True,
                    f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} –∑–∞—è–≤–æ–∫. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}"
                )
                return True
            else:
                self.log_result(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def test_response_structure(self, request_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–æ–≤–æ–≥–æ endpoint"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            response = self.session.get(f"{BACKEND_URL}/operator/pickup-requests")
            
            if response.status_code == 200:
                data = response.json()
                pickup_requests = data if isinstance(data, list) else data.get('items', [])
                
                if pickup_requests:
                    sample_request = pickup_requests[0]
                    required_fields = ['id', 'request_number', 'sender_full_name', 'pickup_address', 'status']
                    
                    missing_fields = [field for field in required_fields if field not in sample_request]
                    
                    if not missing_fields:
                        self.log_result(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞",
                            True,
                            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –û–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è: {list(sample_request.keys())}"
                        )
                        return True
                    else:
                        self.log_result(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(sample_request.keys())}"
                        )
                        return False
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞",
                        True,
                        "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã - —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω"
                    )
                    return True
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞",
                    False,
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return False
    
    def create_test_pickup_request(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
            request_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ó–∞—è–≤–∫–∏",
                "sender_phone": "+79999123456",
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 123",
                "pickup_date": "2025-01-16",
                "pickup_time_from": "10:00",
                "pickup_time_to": "18:00",
                "delivery_method": "pickup",
                "courier_fee": 500.0
            }
            
            response = self.session.post(f"{BACKEND_URL}/admin/courier/pickup-request", json=request_data)
            
            if response.status_code == 200:
                data = response.json()
                request_id = data.get('request_id') or data.get('id')
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
                    True,
                    f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ID: {request_id}. –û—Ç–≤–µ—Ç: {data}"
                )
                return request_id
            else:
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return None

    def test_deletion_endpoints_directly(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ ID"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
            test_id = "100083"  # ID –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            
            response = self.session.delete(f"{BACKEND_URL}/admin/pickup-requests/{test_id}")
            
            if response.status_code in [200, 404]:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DELETE endpoint",
                    True,
                    f"Endpoint /api/admin/pickup-requests/{{id}} –¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response.status_code}: {response.text[:200]}"
                )
            else:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ DELETE endpoint",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
            response2 = self.session.delete(f"{BACKEND_URL}/admin/courier/pickup-requests/{test_id}")
            
            if response2.status_code in [200, 404]:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ DELETE endpoint",
                    True,
                    f"Endpoint /api/admin/courier/pickup-requests/{{id}} –¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response2.status_code}: {response2.text[:200]}"
                )
            else:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ DELETE endpoint",
                    False,
                    f"HTTP {response2.status_code}: {response2.text}"
                )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            bulk_data = {"ids": ["100084", "100085"]}
            response3 = self.session.delete(f"{BACKEND_URL}/admin/pickup-requests/bulk", json=bulk_data)
            
            if response3.status_code in [200, 404]:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ DELETE endpoint",
                    True,
                    f"Endpoint /api/admin/pickup-requests/bulk –¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response3.status_code}: {response3.text[:200]}"
                )
            else:
                self.log_result(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ DELETE endpoint",
                    False,
                    f"HTTP {response3.status_code}: {response3.text}"
                )
                
        except Exception as e:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE endpoints",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )

    def check_courier_pickup_requests_endpoint(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∫—É—Ä—å–µ—Ä–æ–≤"""
        try:
            response = self.session.get(f"{BACKEND_URL}/courier/pickup-requests")
            
            if response.status_code == 200:
                data = response.json()
                pickup_requests = data if isinstance(data, list) else data.get('items', [])
                
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫",
                    True,
                    f"GET /api/courier/pickup-requests: –ø–æ–ª—É—á–µ–Ω–æ {len(pickup_requests)} –∑–∞—è–≤–æ–∫"
                )
                return pickup_requests
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫",
                False,
                f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            return []

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –ø–æ—Å–ª–µ frontend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        print("=" * 100)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        pickup_requests = self.get_pickup_requests_list()
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        created_request_ids = []
        if len(pickup_requests) < 3:
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            for i in range(3):
                request_id = self.create_test_pickup_request()
                if request_id:
                    created_request_ids.append(request_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            pickup_requests = self.get_pickup_requests_list()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
        courier_requests = self.check_courier_pickup_requests_endpoint()
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        self.test_response_structure(None)
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE endpoints –Ω–∞–ø—Ä—è–º—É—é
        self.test_deletion_endpoints_directly()
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∏)
        if pickup_requests:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_request = pickup_requests[0]
            request_id = test_request.get('id')
            
            if request_id:
                print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ID: {request_id}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
                self.test_individual_deletion_main_endpoint(request_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                self.verify_deletion_from_database(request_id)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∑–∞—è–≤–∫–∏, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
                if len(pickup_requests) > 1:
                    alt_request_id = pickup_requests[1].get('id')
                    if alt_request_id:
                        self.test_individual_deletion_alternative_endpoint(alt_request_id)
                        self.verify_deletion_from_database(alt_request_id)
        
        # 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞—è–≤–∫–∏)
        if len(pickup_requests) > 2:
            remaining_ids = [req.get('id') for req in pickup_requests[2:] if req.get('id')]
            self.test_bulk_deletion_endpoint(remaining_ids)
        elif created_request_ids:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            self.test_bulk_deletion_endpoint(created_request_ids)
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
        
        return True
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("=" * 100)
        print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print()
        
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            print(f"   {result['status']}: {result['test']}")
        
        print()
        if success_rate >= 80:
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä —É–¥–∞–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ endpoints")
            print("‚úÖ Frontend –∏ backend —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
        else:
            print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print("=" * 100)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = PickupRequestDeletionTester()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()