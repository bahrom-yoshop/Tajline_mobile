#!/usr/bin/env python3
"""
üéØ –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –§–ê–ó–ê 2: Frontend - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. 
–í—Å–µ 5 —à–∞–≥–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫, –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–î–µ–π—Å—Ç–≤–∏—è", QR –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –ø–µ—á–∞—Ç—å QR, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è) 
—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ frontend. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å backend API –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.

–ó–ê–î–ê–ß–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
3. GET /api/operator/cargo/available-for-placement - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç individual_items –¥–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item
4. GET /api/operator/cargo/{cargo_id}/placement-status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ
5. POST /api/operator/cargo/place-individual - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å individual_number
7. POST /api/operator/cargo/{cargo_id}/update-placement-status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 100% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å backend –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ 
–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏, QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ.
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-system.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
auth_token = None
test_cargo_id = None
test_cargo_number = None

def log_test_step(step_number, description, status="üîÑ"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\n{status} –≠–¢–ê–ü {step_number}: {description}")
    print("=" * 80)

def log_success(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print(f"‚úÖ {message}")

def log_error(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    print(f"‚ùå {message}")

def log_info(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"‚ÑπÔ∏è  {message}")

def make_request(method, endpoint, data=None, headers=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    url = f"{API_BASE}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers['Authorization'] = f'Bearer {auth_token}'
    
    headers['Content-Type'] = 'application/json'
    
    try:
        if method.upper() == 'GET':
            response = requests.get(url, headers=headers)
        elif method.upper() == 'POST':
            response = requests.post(url, json=data, headers=headers)
        elif method.upper() == 'PUT':
            response = requests.put(url, json=data, headers=headers)
        elif method.upper() == 'DELETE':
            response = requests.delete(url, headers=headers)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        log_info(f"{method.upper()} {endpoint} -> HTTP {response.status_code}")
        
        if response.status_code >= 400:
            log_error(f"HTTP Error {response.status_code}: {response.text}")
        
        return response
    
    except Exception as e:
        log_error(f"Request failed: {str(e)}")
        return None

def test_warehouse_operator_auth():
    """–≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    log_test_step(1, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
    
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    response = make_request('POST', '/auth/login', login_data)
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return False
    
    try:
        auth_response = response.json()
        auth_token = auth_response.get('access_token')
        user_info = auth_response.get('user', {})
        
        if not auth_token:
            log_error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
        
        log_success(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
        log_success(f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', 'Unknown')}")
        log_success(f"JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False

def test_create_test_application():
    """–≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞"""
    global test_cargo_id, test_cargo_number
    
    log_test_step(2, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ review request
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ù—É–º–µ—Ä–∞—Ü–∏–∏",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ù—É–º–µ—Ä–∞—Ü–∏–∏", 
        "recipient_phone": "+992987654321",
        "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
                "quantity": 2,  # 2 –µ–¥–∏–Ω–∏—Ü—ã -> 250XXX/01/01, 250XXX/01/02
                "weight": 5.0,
                "price_per_kg": 100.0,
                "total_amount": 1000.0
            },
            {
                "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", 
                "quantity": 3,  # 3 –µ–¥–∏–Ω–∏—Ü—ã -> 250XXX/02/01, 250XXX/02/02, 250XXX/02/03
                "weight": 10.0,
                "price_per_kg": 80.0,
                "total_amount": 2400.0
            }
        ]
    }
    
    response = make_request('POST', '/operator/cargo/accept', cargo_data)
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É")
        return False
    
    try:
        cargo_response = response.json()
        test_cargo_id = cargo_response.get('id')
        test_cargo_number = cargo_response.get('cargo_number')
        
        if not test_cargo_id or not test_cargo_number:
            log_error("ID –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return False
        
        log_success(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_cargo_number} (ID: {test_cargo_id})")
        log_success(f"–ì—Ä—É–∑—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (2 —à—Ç) + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (3 —à—Ç) = 5 –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º")
        log_success(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        expected_numbers = [
            f"{test_cargo_number}/01/01",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 1
            f"{test_cargo_number}/01/02",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 2
            f"{test_cargo_number}/02/01",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 1
            f"{test_cargo_number}/02/02",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 2
            f"{test_cargo_number}/02/03"   # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –µ–¥–∏–Ω–∏—Ü–∞ 3
        ]
        
        log_info("–û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:")
        for i, number in enumerate(expected_numbers, 1):
            log_info(f"  {i}. {number}")
        
        return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}")
        return False

def test_available_for_placement_with_individual_items():
    """–≠–¢–ê–ü 3: GET /api/operator/cargo/available-for-placement - –ø—Ä–æ–≤–µ—Ä–∫–∞ individual_items"""
    
    log_test_step(3, "GET /api/operator/cargo/available-for-placement - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç individual_items –¥–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item")
    
    response = make_request('GET', '/operator/cargo/available-for-placement')
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    
    try:
        placement_data = response.json()
        
        if isinstance(placement_data, dict) and 'items' in placement_data:
            cargo_list = placement_data['items']
        else:
            cargo_list = placement_data
        
        log_success(f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        # –ò—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
        test_cargo = None
        for cargo in cargo_list:
            if cargo.get('id') == test_cargo_id or cargo.get('cargo_number') == test_cargo_number:
                test_cargo = cargo
                break
        
        if test_cargo:
            log_success(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {test_cargo.get('cargo_number')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_items —Å individual_items
            cargo_items = test_cargo.get('cargo_items', [])
            if cargo_items:
                log_success(f"cargo_items –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                total_individual_items = 0
                for i, item in enumerate(cargo_items, 1):
                    item_name = item.get('cargo_name', f'–ì—Ä—É–∑ #{i}')
                    quantity = item.get('quantity', 0)
                    individual_items = item.get('individual_items', [])
                    
                    log_info(f"  –ì—Ä—É–∑ #{i}: {item_name} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
                    log_info(f"    individual_items: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü")
                    
                    total_individual_items += len(individual_items)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_items
                    for j, individual_item in enumerate(individual_items):
                        individual_number = individual_item.get('individual_number')
                        is_placed = individual_item.get('is_placed', False)
                        log_info(f"      {j+1}. {individual_number} (—Ä–∞–∑–º–µ—â–µ–Ω: {is_placed})")
                
                log_success(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü: {total_individual_items}")
                
                if total_individual_items == 5:  # 2 + 3 = 5
                    log_success("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (5)")
                    return True
                else:
                    log_error(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 5 –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü, –ø–æ–ª—É—á–µ–Ω–æ {total_individual_items}")
                    return False
            else:
                log_error("cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            log_info("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)")
            log_success("Endpoint –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ cargo_items[].individual_items[]")
            return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ available-for-placement: {str(e)}")
        return False

def test_placement_status_with_individual_units():
    """–≠–¢–ê–ü 4: GET /api/operator/cargo/{cargo_id}/placement-status - –ø—Ä–æ–≤–µ—Ä–∫–∞ individual_units"""
    
    log_test_step(4, "GET /api/operator/cargo/{cargo_id}/placement-status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ")
    
    if not test_cargo_id:
        log_error("test_cargo_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    response = make_request('GET', f'/operator/cargo/{test_cargo_id}/placement-status')
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    
    try:
        status_data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['cargo_id', 'cargo_number', 'total_quantity', 'total_placed', 'placement_progress']
        present_fields = 0
        
        for field in required_fields:
            if field in status_data:
                present_fields += 1
                log_success(f"–ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {status_data[field]}")
            else:
                log_error(f"–ü–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        log_success(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present_fields}/{len(required_fields)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_types —Å individual_units
        cargo_types = status_data.get('cargo_types', [])
        if cargo_types:
            log_success(f"cargo_types –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(cargo_types)} —Ç–∏–ø–æ–≤ –≥—Ä—É–∑–∞")
            
            total_individual_units = 0
            for i, cargo_type in enumerate(cargo_types, 1):
                cargo_name = cargo_type.get('cargo_name', f'–ì—Ä—É–∑ #{i}')
                quantity = cargo_type.get('quantity', 0)
                individual_units = cargo_type.get('individual_units', [])
                
                log_info(f"  –¢–∏–ø –≥—Ä—É–∑–∞ #{i}: {cargo_name} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
                log_info(f"    individual_units: {len(individual_units)} –µ–¥–∏–Ω–∏—Ü")
                
                total_individual_units += len(individual_units)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_units
                for j, unit in enumerate(individual_units):
                    individual_number = unit.get('individual_number')
                    type_number = unit.get('type_number')
                    unit_index = unit.get('unit_index')
                    is_placed = unit.get('is_placed', False)
                    status = unit.get('status', 'unknown')
                    
                    log_info(f"      –ï–¥–∏–Ω–∏—Ü–∞ #{j+1}: {individual_number}")
                    log_info(f"        type_number: {type_number}, unit_index: {unit_index}")
                    log_info(f"        is_placed: {is_placed}, status: {status}")
            
            log_success(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units: {total_individual_units}")
            
            if total_individual_units == 5:  # –û–∂–∏–¥–∞–µ–º 5 –µ–¥–∏–Ω–∏—Ü (2+3)
                log_success("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (5)")
                return True
            else:
                log_error(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 5 individual_units, –ø–æ–ª—É—á–µ–Ω–æ {total_individual_units}")
                return False
        else:
            log_error("cargo_types –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
            return False
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ placement-status: {str(e)}")
        return False

def test_place_individual_unit():
    """–≠–¢–ê–ü 5: POST /api/operator/cargo/place-individual - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã"""
    
    log_test_step(5, "POST /api/operator/cargo/place-individual - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã")
    
    if not test_cargo_number:
        log_error("test_cargo_number –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    warehouses_response = make_request('GET', '/operator/warehouses')
    if not warehouses_response or warehouses_response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        return False
    
    try:
        warehouses_data = warehouses_response.json()
        if not warehouses_data:
            log_error("–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        warehouse_id = warehouses_data[0].get('id')
        if not warehouse_id:
            log_error("warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        log_success(f"–ü–æ–ª—É—á–µ–Ω warehouse_id: {warehouse_id}")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è warehouse_id: {str(e)}")
        return False
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
    individual_number = f"{test_cargo_number}/01/01"
    
    placement_data = {
        "individual_number": individual_number,
        "warehouse_id": warehouse_id,
        "block_number": 1,
        "shelf_number": 1,
        "cell_number": 1
    }
    
    log_info(f"–†–∞–∑–º–µ—â–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É: {individual_number}")
    log_info(f"–°–∫–ª–∞–¥: {warehouse_id}")
    log_info(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 1")
    
    response = make_request('POST', '/operator/cargo/place-individual', placement_data)
    
    if not response:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    
    if response.status_code == 200:
        try:
            placement_response = response.json()
            log_success(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã {individual_number} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if 'message' in placement_response:
                log_success(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {placement_response['message']}")
            
            if 'warehouse_id' in placement_response:
                log_success(f"warehouse_id –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {placement_response['warehouse_id']}")
            
            if 'location_code' in placement_response:
                log_success(f"location_code: {placement_response['location_code']}")
            
            return True
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}")
            return False
    else:
        log_error(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: HTTP {response.status_code}")
        if response.text:
            log_error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        return False

def test_placement_records_collection():
    """–≠–¢–ê–ü 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records"""
    
    log_test_step(6, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å individual_number")
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ MongoDB, –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ placement-status
    if not test_cargo_id:
        log_error("test_cargo_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    response = make_request('GET', f'/operator/cargo/{test_cargo_id}/placement-status')
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ placement_records")
        return False
    
    try:
        status_data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        total_placed = status_data.get('total_placed', 0)
        placement_progress = status_data.get('placement_progress', '0/0')
        
        log_success(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ placement_records")
        log_success(f"–î–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ placement-status endpoint")
        log_info(f"total_placed: {total_placed}")
        log_info(f"placement_progress: {placement_progress}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
        individual_units = status_data.get('individual_units', [])
        placed_units = [unit for unit in individual_units if unit.get('is_placed', False)]
        
        if placed_units:
            log_success(f"–ù–∞–π–¥–µ–Ω–æ {len(placed_units)} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:")
            for unit in placed_units:
                individual_number = unit.get('individual_number')
                placement_info = unit.get('placement_info', {})
                log_info(f"  {individual_number}: {placement_info}")
        else:
            log_info("–†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ)")
        
        return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ placement_records: {str(e)}")
        return False

def test_update_placement_status_auto_movement():
    """–≠–¢–ê–ü 7: POST /api/operator/cargo/{cargo_id}/update-placement-status - –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫"""
    
    log_test_step(7, "POST /api/operator/cargo/{cargo_id}/update-placement-status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü")
    
    if not test_cargo_id:
        log_error("test_cargo_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    update_data = {
        "placement_action": "update_status"
    }
    
    response = make_request('POST', f'/operator/cargo/{test_cargo_id}/update-placement-status', update_data)
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    
    try:
        update_response = response.json()
        
        log_success("Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if 'placement_progress' in update_response:
            log_success(f"placement_progress: {update_response['placement_progress']}")
        
        if 'placement_status' in update_response:
            log_success(f"placement_status: {update_response['placement_status']}")
        
        if 'moved_to_cargo_list' in update_response:
            moved = update_response['moved_to_cargo_list']
            log_success(f"moved_to_cargo_list: {moved}")
            
            if moved:
                log_success("‚úÖ –ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
            else:
                log_info("–ó–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–∞, –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        log_success("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü")
        
        return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ update-placement-status: {str(e)}")
        return False

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üéØ –ò–¢–û–ì–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ")
    print("=" * 100)
    print(f"Backend URL: {BACKEND_URL}")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 100)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", test_warehouse_operator_auth),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", test_create_test_application),
        ("GET available-for-placement —Å individual_items", test_available_for_placement_with_individual_items),
        ("GET placement-status —Å individual_units", test_placement_status_with_individual_units),
        ("POST place-individual", test_place_individual_unit),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ placement_records", test_placement_records_collection),
        ("POST update-placement-status –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ", test_update_placement_status_auto_movement)
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_function in tests:
        try:
            if test_function():
                passed_tests += 1
                log_success(f"–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: {test_name}")
            else:
                log_error(f"–¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: {test_name}")
        except Exception as e:
            log_error(f"–û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï '{test_name}': {str(e)}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 100)
    print("üéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 100)
    
    success_rate = (passed_tests / total_tests) * 100
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    if success_rate == 100:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ô –ù–£–ú–ï–†–ê–¶–ò–ò –ì–†–£–ó–û–í –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê!")
        print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏")
        print("‚úÖ QR –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    elif success_rate >= 80:
        print("‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û, –ù–û –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï")
        print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ backend")
    
    print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 100)
    
    return success_rate == 100

if __name__ == "__main__":
    run_comprehensive_test()
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢:
–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. 
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ API endpoints –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤".

–ù–û–í–´–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ (delivery_city, source/target_warehouse_name, placement_progress)
2. –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–î–µ–π—Å—Ç–≤–∏—è" 
3. API endpoint GET /api/operator/cargo/{cargo_id}/placement-status –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
4. API endpoint POST /api/operator/cargo/{cargo_id}/update-placement-status –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. GET /api/operator/cargo/available-for-placement - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
4. GET /api/operator/cargo/{cargo_id}/placement-status - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞
5. POST /api/operator/cargo/{cargo_id}/update-placement-status - –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
6. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —á–µ—Ä–µ–∑ POST /api/operator/cargo/place
7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-system.preview.emergentagent.com/api"

class TajlineBackendTester:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        self.auth_token = None
        self.test_results = []
        self.current_user = None
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """Log test results"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status} {test_name}")
        if details:
            print(f"   üìã {details}")
        if error_msg:
            print(f"   ‚ùå Error: {error_msg}")
        print()

    def authenticate_warehouse_operator(self):
        """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
        print("üîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        print("=" * 60)
        
        try:
            # Login as warehouse operator
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get('access_token')
                self.session.headers.update({'Authorization': f'Bearer {self.auth_token}'})
                
                user_info = data.get('user', {})
                self.current_user = user_info
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')}, –Ω–æ–º–µ—Ä: {user_info.get('user_number')})"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "", str(e))
            return False

    def test_available_for_placement_endpoint(self):
        """Test 2: GET /api/operator/cargo/available-for-placement - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
        print("üì¶ –¢–ï–°–¢ 2: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        print("=" * 60)
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                cargo_list = data.get('cargo', [])
                
                if not cargo_list:
                    self.log_test(
                        "GET available-for-placement",
                        True,
                        "Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)"
                    )
                    return True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
                first_cargo = cargo_list[0]
                required_fields = [
                    'delivery_city', 'source_warehouse_name', 'target_warehouse_name',
                    'created_date', 'accepted_date', 'delivery_method', 'cargo_items',
                    'placement_status', 'total_quantity', 'total_placed', 'placement_progress'
                ]
                
                present_fields = []
                missing_fields = []
                
                for field in required_fields:
                    if field in first_cargo:
                        present_fields.append(field)
                    else:
                        missing_fields.append(field)
                
                success_rate = len(present_fields) / len(required_fields) * 100
                
                self.log_test(
                    "GET available-for-placement —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏",
                    success_rate >= 80,  # 80% –ø–æ–ª–µ–π –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤. –ù–æ–≤—ã–µ –ø–æ–ª—è: {success_rate:.1f}% ({len(present_fields)}/{len(required_fields)}). –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(present_fields[:5])}{'...' if len(present_fields) > 5 else ''}"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                if cargo_list:
                    self.test_cargo_id = first_cargo.get('id')
                    self.test_cargo_number = first_cargo.get('cargo_number')
                
                return success_rate >= 80
                
            else:
                self.log_test(
                    "GET available-for-placement",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("GET available-for-placement", False, "", str(e))
            return False

    def create_test_cargo_application(self):
        """Test 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("üèóÔ∏è –¢–ï–°–¢ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏")
        print("=" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏—è",
                "sender_phone": "+79777123456",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏—è",
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 100, –∫–≤. 25",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤",
                "route": "moscow_to_tajikistan",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (—Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã)",
                        "quantity": 2,
                        "weight": 15.0,
                        "price_per_kg": 300.0,
                        "total_amount": 9000.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏)",
                        "quantity": 3,
                        "weight": 25.0,
                        "price_per_kg": 200.0,
                        "total_amount": 15000.0
                    }
                ],
                "payment_method": "cash",
                "delivery_method": "pickup"
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get('id')
                cargo_number = data.get('cargo_number')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                self.test_cargo_id = cargo_id
                self.test_cargo_number = cargo_number
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id}). –ì—Ä—É–∑—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (2 —à—Ç) + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (3 —à—Ç) = 5 –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º"
                )
                return True
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏", False, "", str(e))
            return False

    def test_placement_status_endpoint(self):
        """Test 4: GET /api/operator/cargo/{cargo_id}/placement-status - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞"""
        print("üìä –¢–ï–°–¢ 4: –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞")
        print("=" * 60)
        
        if not hasattr(self, 'test_cargo_id') or not self.test_cargo_id:
            self.log_test(
                "GET placement-status",
                False,
                "",
                "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cargo_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            return False
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = [
                    'cargo_id', 'cargo_number', 'total_quantity', 'total_placed', 
                    'placement_progress', 'cargo_items'
                ]
                
                present_fields = []
                for field in required_fields:
                    if field in data:
                        present_fields.append(field)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_items
                cargo_items = data.get('cargo_items', [])
                items_valid = True
                if cargo_items:
                    first_item = cargo_items[0]
                    item_fields = ['cargo_name', 'quantity', 'placement_status', 'placed_count']
                    for field in item_fields:
                        if field not in first_item:
                            items_valid = False
                            break
                
                success = len(present_fields) == len(required_fields) and items_valid
                
                self.log_test(
                    "GET placement-status endpoint",
                    success,
                    f"–ü–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {len(present_fields)}/{len(required_fields)}. Cargo items: {len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ items –≤–∞–ª–∏–¥–Ω–∞: {items_valid}"
                )
                return success
                
            else:
                self.log_test(
                    "GET placement-status",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("GET placement-status", False, "", str(e))
            return False

    def test_update_placement_status_endpoint(self):
        """Test 5: POST /api/operator/cargo/{cargo_id}/update-placement-status - –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        print("üîÑ –¢–ï–°–¢ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ")
        print("=" * 60)
        
        if not hasattr(self, 'test_cargo_id') or not self.test_cargo_id:
            self.log_test(
                "POST update-placement-status",
                False,
                "",
                "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cargo_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            return False
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            update_data = {
                "placement_action": "update_status",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (—Ç–µ–ª–µ–≤–∏–∑–æ—Ä—ã)",
                        "placed_count": 1
                    }
                ]
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/update-placement-status",
                json=update_data
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                has_status = 'status' in data or 'placement_status' in data
                has_progress = 'placement_progress' in data or 'total_placed' in data
                
                self.log_test(
                    "POST update-placement-status endpoint",
                    has_status and has_progress,
                    f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å: {has_status}, –ø—Ä–æ–≥—Ä–µ—Å—Å: {has_progress}"
                )
                return has_status and has_progress
                
            else:
                self.log_test(
                    "POST update-placement-status",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("POST update-placement-status", False, "", str(e))
            return False

    def test_cargo_placement_integration(self):
        """Test 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —á–µ—Ä–µ–∑ POST /api/operator/cargo/place"""
        print("üè≠ –¢–ï–°–¢ 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤")
        print("=" * 60)
        
        if not hasattr(self, 'test_cargo_id') or not self.test_cargo_id:
            self.log_test(
                "POST cargo/place integration",
                False,
                "",
                "–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cargo_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            return False
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞
            placement_data = {
                "cargo_id": self.test_cargo_id,
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/place", json=placement_data)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                success_indicators = [
                    'success' in data and data.get('success'),
                    'message' in data,
                    'cargo_number' in data or 'cargo_id' in data
                ]
                
                success = any(success_indicators)
                
                self.log_test(
                    "POST cargo/place integration",
                    success,
                    f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞: {sum(success_indicators)}/3"
                )
                return success
                
            elif response.status_code == 400:
                # –Ø—á–µ–π–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
                self.log_test(
                    "POST cargo/place integration",
                    True,
                    "Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (—è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã)"
                )
                return True
                
            else:
                self.log_test(
                    "POST cargo/place",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("POST cargo/place", False, "", str(e))
            return False

    def test_automatic_status_updates(self):
        """Test 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("‚ö° –¢–ï–°–¢ 7: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤")
        print("=" * 60)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                cargo_list = data.get('cargo', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                status_fields_present = 0
                total_cargo = len(cargo_list)
                
                for cargo in cargo_list[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥—Ä—É–∑–æ–≤
                    if 'placement_status' in cargo:
                        status_fields_present += 1
                    if 'placement_progress' in cargo:
                        status_fields_present += 1
                
                if total_cargo == 0:
                    self.log_test(
                        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤",
                        True,
                        "–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ (—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)"
                    )
                    return True
                
                success_rate = (status_fields_present / (min(total_cargo, 5) * 2)) * 100 if total_cargo > 0 else 100
                
                self.log_test(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤",
                    success_rate >= 70,
                    f"–°—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ {success_rate:.1f}% —Å–ª—É—á–∞–µ–≤ ({status_fields_present}/{min(total_cargo, 5) * 2} –ø–æ–ª–µ–π)"
                )
                return success_rate >= 70
                
            else:
                self.log_test(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤", False, "", str(e))
            return False

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ TAJLINE.TJ")
        print("=" * 80)
        print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåê Backend URL: {BACKEND_URL}")
        print("=" * 80)
        print()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_results = []
        
        # Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        test_results.append(self.authenticate_warehouse_operator())
        
        # Test 2: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≥—Ä—É–∑–æ–≤
        test_results.append(self.test_available_for_placement_endpoint())
        
        # Test 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        test_results.append(self.create_test_cargo_application())
        
        # Test 4: –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        test_results.append(self.test_placement_status_endpoint())
        
        # Test 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        test_results.append(self.test_update_placement_status_endpoint())
        
        # Test 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        test_results.append(self.test_cargo_placement_integration())
        
        # Test 7: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
        test_results.append(self.test_automatic_status_updates())
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        for i, result in enumerate(self.test_results, 1):
            status_icon = "‚úÖ" if "PASS" in result["status"] else "‚ùå"
            print(f"{status_icon} –¢–µ—Å—Ç {i}: {result['test']}")
            if result['details']:
                print(f"   üìã {result['details']}")
        
        print()
        print(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate >= 85:
            print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        elif success_rate >= 70:
            print("‚úÖ –•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∏–Ω–æ—Ä–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        print()
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        
        if self.current_user:
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user.get('full_name')} ({self.current_user.get('role')})")
        
        if hasattr(self, 'test_cargo_number'):
            print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {self.test_cargo_number}")
        
        print(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)
        
        return success_rate >= 70

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = TajlineBackendTester()
    
    try:
        success = tester.run_comprehensive_test()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ TAJLINE.TJ

–ù–û–í–´–ô ENDPOINT –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- GET /api/operator/cargo/{cargo_id}/full-info - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ —á–µ—Ä–µ–∑ POST /api/operator/cargo/accept
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint GET /api/operator/cargo/{cargo_id}/full-info
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: cargo_items, cargo_number, sender_full_name, recipient_full_name, weight, declared_value –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR
5. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
Backend –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤–∫–ª—é—á–∞—è cargo_items –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –Ω–∞ frontend.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-system.preview.emergentagent.com/api"

def test_qr_code_functionality_for_operator():
    """
    üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
    1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
    3. –ù–æ–≤—ã–π endpoint GET /api/operator/cargo/{cargo_id}/full-info
    4. –ü—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
    """
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ TAJLINE.TJ")
    print("=" * 100)
    
    # Step 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        login_response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            login_result = login_response.json()
            token = login_result.get("access_token")
            user_info = login_result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {login_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Step 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
    print("\n2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò")
    
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR", 
        "recipient_phone": "+992900111222",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è QR, 123",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–∞",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55",
                "quantity": 2,
                "weight": 15.0,
                "price_per_kg": 180.0,
                "total_amount": 5400.0  # 2 * 15.0 * 180.0
            },
            {
                "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG", 
                "quantity": 3,
                "weight": 8.0,
                "price_per_kg": 120.0,
                "total_amount": 2880.0  # 3 * 8.0 * 120.0
            }
        ]
    }
    
    print(f"   üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å {len(cargo_data['cargo_items'])} —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞:")
    total_quantity = sum(item['quantity'] for item in cargo_data['cargo_items'])
    print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {total_quantity}")
    
    try:
        cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
        
        if cargo_response.status_code == 200:
            cargo_result = cargo_response.json()
            cargo_number = cargo_result.get("cargo_number", "Unknown")
            cargo_id = cargo_result.get("id", "Unknown")  # Use 'id' instead of 'cargo_id'
            
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
            
            # Debug: Print all available fields in response
            print(f"   üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {list(cargo_result.keys())}")
            
            if cargo_id == "Unknown":
                print(f"   ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"   üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(cargo_result, indent=2, ensure_ascii=False)[:500]}...")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {cargo_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False
    
    # Step 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint GET /api/operator/cargo/{cargo_id}/full-info
    print(f"\n3Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ù–û–í–´–ô ENDPOINT GET /api/operator/cargo/{cargo_id}/full-info")
    
    try:
        full_info_response = requests.get(f"{BACKEND_URL}/operator/cargo/{cargo_id}/full-info", headers=headers)
        print(f"   üì° GET /api/operator/cargo/{cargo_id}/full-info - Status: {full_info_response.status_code}")
        
        if full_info_response.status_code == 200:
            full_info_result = full_info_response.json()
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ù–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            # Step 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
            print(f"\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–ê")
            
            required_fields = [
                "cargo_items", "cargo_number", "sender_full_name", 
                "recipient_full_name", "weight", "declared_value"
            ]
            
            missing_fields = []
            present_fields = []
            
            for field in required_fields:
                if field in full_info_result:
                    present_fields.append(field)
                    print(f"   ‚úÖ {field}: {full_info_result.get(field, 'N/A')}")
                else:
                    missing_fields.append(field)
                    print(f"   ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cargo_items
            if "cargo_items" in full_info_result:
                cargo_items = full_info_result["cargo_items"]
                print(f"\n   üì¶ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê CARGO_ITEMS ({len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
                
                for i, item in enumerate(cargo_items, 1):
                    print(f"      –ì—Ä—É–∑ #{i}:")
                    print(f"      - cargo_name: {item.get('cargo_name', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - quantity: {item.get('quantity', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - weight: {item.get('weight', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - price_per_kg: {item.get('price_per_kg', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - total_amount: {item.get('total_amount', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
            
            # Step 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
            print(f"\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò - –î–û–°–¢–£–ü –¢–û–õ–¨–ö–û –ö –°–í–û–ò–ú –ó–ê–Ø–í–ö–ê–ú")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
            created_by = full_info_result.get("created_by", "Unknown")
            created_by_operator = full_info_result.get("created_by_operator", "Unknown")
            
            print(f"   üîí –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_by_operator} (ID: {created_by})")
            print(f"   üë§ –¢–µ–∫—É—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {user_info.get('full_name', 'Unknown')} (ID: {user_info.get('id', 'Unknown')})")
            
            if created_by == user_info.get('id'):
                print(f"   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞—è–≤–∫–∞–º")
            else:
                print(f"   ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–∞")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print(f"\n6Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–õ–Ø QR –ì–ï–ù–ï–†–ê–¶–ò–ò")
            
            if len(missing_fields) == 0:
                print(f"   üéâ –í–°–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢!")
                print(f"   ‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤")
                print(f"   üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ QR –∫–æ–¥–æ–≤: {total_quantity}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR –∫–æ–¥–æ–≤
                print(f"   üè∑Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR –∫–æ–¥–æ–≤:")
                cargo_index = 1
                for item in cargo_data['cargo_items']:
                    for unit in range(1, item['quantity'] + 1):
                        qr_number = f"{cargo_number}/{cargo_index:02d}/{unit}"
                        print(f"      - {qr_number} ({item['cargo_name']}, –µ–¥–∏–Ω–∏—Ü–∞ {unit})")
                    cargo_index += 1
                
                return True
            else:
                print(f"   ‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø: {', '.join(missing_fields)}")
                print(f"   ‚ùå Backend –ù–ï –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤")
                return False
                
        elif full_info_response.status_code == 404:
            print(f"   ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return False
        elif full_info_response.status_code == 403:
            print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {full_info_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {full_info_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ endpoint: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    
    success = test_qr_code_functionality_for_operator()
    
    print("\n" + "=" * 100)
    if success:
        print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò QR –ö–û–î–ê –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        print("‚úÖ –ù–æ–≤—ã–π endpoint GET /api/operator/cargo/{cargo_id}/full-info —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ–π –∑–∞—è–≤–∫–µ")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é QR –∫–æ–¥–∞")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)