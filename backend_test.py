#!/usr/bin/env python3
"""
üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–∑–∞—Ö

–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ë–û–¢–´:
–û–±–Ω–æ–≤–ª–µ–Ω backend API layout-with-cargo –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö –∏ —Å–æ–∑–¥–∞–Ω–æ —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø:
‚úÖ cargo_name –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–°–∞–º–æ–∫–∞—Ç –í–ò–í–û", "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞")
‚úÖ sender_full_name –∑–∞–ø–æ–ª–Ω–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ë–∞—Ö—Ä–æ–º –§–∞–π–∑—É–ª–ª–æ–µ–≤–∏—á –ë–æ–±–æ–Ω–∞–∑–∞—Ä–æ–≤")
‚úÖ placed_by_operator –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
‚úÖ API —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏
‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ backend API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_get_warehouse_id():
    """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
    global warehouse_id
    
    print("\nüè¢ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'")
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response:
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        warehouses = response.json()
        
        # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
        moscow_warehouse = None
        for warehouse in warehouses:
            if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                moscow_warehouse = warehouse
                break
        
        if moscow_warehouse:
            warehouse_id = moscow_warehouse.get("id")
            details = f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' (ID: {warehouse_id})"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", True, details, response_time)
        else:
            available_warehouses = [w.get("name", "Unknown") for w in warehouses]
            details = f"–°–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {available_warehouses}"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_warehouse_statistics_api():
    """–¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    print("\nüìä –¢–ï–°–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    if not warehouse_id:
        return log_test("API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/statistics")
    
    if not response:
        return log_test("API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        occupied_cells = data.get("occupied_cells", 0)
        total_placed_cargo = data.get("total_placed_cargo", 0)
        
        print(f"üìç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò:")
        print(f"   - occupied_cells: {occupied_cells}")
        print(f"   - total_placed_cargo: {total_placed_cargo}")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò
        success = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: occupied_cells –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2
        if occupied_cells != 2:
            success = False
            issues.append(f"occupied_cells = {occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: total_placed_cargo –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3
        if total_placed_cargo != 3:
            success = False
            issues.append(f"total_placed_cargo = {total_placed_cargo} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
        
        if success:
            details = f"‚úÖ occupied_cells = {occupied_cells}, total_placed_cargo = {total_placed_cargo}"
            return log_test("API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_diagnostic_logging():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    if not warehouse_id:
        return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/statistics")
    
    if not response:
        return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        placement_statistics = data.get("placement_statistics", {})
        
        if placement_statistics:
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            for key, value in placement_statistics.items():
                print(f"   - {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            data_source = placement_statistics.get("data_source")
            unique_occupied_cells = placement_statistics.get("unique_occupied_cells")
            placement_records_count = placement_statistics.get("placement_records_count")
            
            success = True
            issues = []
            
            if data_source != "placement_records":
                success = False
                issues.append(f"data_source = {data_source} (–æ–∂–∏–¥–∞–ª–æ—Å—å 'placement_records')")
            
            if unique_occupied_cells != 2:
                success = False
                issues.append(f"unique_occupied_cells = {unique_occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)")
            
            if success:
                details = f"‚úÖ data_source = {data_source}, unique_occupied_cells = {unique_occupied_cells}"
                return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", True, details, response_time)
            else:
                details = f"‚ùå {', '.join(issues)}"
                return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", False, details, response_time)
        else:
            return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", False, "placement_statistics –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_layout_with_cargo_consistency():
    """–¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π (layout-with-cargo)"""
    
    print("\nüó∫Ô∏è –¢–ï–°–¢ 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π")
    
    if not warehouse_id:
        return log_test("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        occupied_cells_layout = data.get("occupied_cells", 0)
        total_cargo_layout = data.get("total_cargo", 0)
        
        print(f"üó∫Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ LAYOUT-WITH-CARGO:")
        print(f"   - occupied_cells: {occupied_cells_layout}")
        print(f"   - total_cargo: {total_cargo_layout}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        success = True
        issues = []
        
        if occupied_cells_layout != 2:
            success = False
            issues.append(f"layout occupied_cells = {occupied_cells_layout} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)")
        
        if total_cargo_layout != 3:
            success = False
            issues.append(f"layout total_cargo = {total_cargo_layout} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
        
        if success:
            details = f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: occupied_cells = {occupied_cells_layout}, total_cargo = {total_cargo_layout}"
            return log_test("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å layout-with-cargo", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_target_cargo_verification():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ"""
    
    print("\nüéØ –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤")
    
    if not warehouse_id:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        # –ò—â–µ–º —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –≤ —Å—Ö–µ–º–µ
        target_cargo = ["25082235/01/01", "25082235/01/02", "25082235/02/01"]
        found_cargo = []
        
        blocks = data.get("blocks", [])
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied"):
                        cargo_info = cell.get("cargo_info", {})
                        individual_number = cargo_info.get("individual_number")
                        if individual_number in target_cargo:
                            found_cargo.append(individual_number)
                            cell_location = cell.get("location_code", "Unknown")
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–∑ {individual_number} –≤ —è—á–µ–π–∫–µ {cell_location}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã
        missing_cargo = [cargo for cargo in target_cargo if cargo not in found_cargo]
        
        if not missing_cargo:
            details = f"‚úÖ –í—Å–µ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–∑—ã –Ω–∞–π–¥–µ–Ω—ã: {found_cargo}"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤", True, details, response_time)
        else:
            details = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã: {missing_cargo}. –ù–∞–π–¥–µ–Ω—ã: {found_cargo}"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    statistics_test = next((r for r in test_results if "API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞" in r["test"]), None)
    layout_test = next((r for r in test_results if "layout-with-cargo" in r["test"]), None)
    cargo_test = next((r for r in test_results if "—Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤" in r["test"]), None)
    
    if statistics_test and statistics_test["success"]:
        print("   ‚úÖ occupied_cells = 2 (–±—ã–ª–æ 14)")
        print("   ‚úÖ total_placed_cargo = 3")
    else:
        print("   ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    if layout_test and layout_test["success"]:
        print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π")
    else:
        print("   ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ —Å—Ö–µ–º–æ–π")
    
    if cargo_test and cargo_test["success"]:
        print("   ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–µ–ª–µ–≤—ã—Ö –≥—Ä—É–∑–æ–≤")
    
    print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if success_rate >= 80:
        print("   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –£–°–ü–ï–®–ù–û!")
        print("   üìç –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–∫–ª–∞–¥–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ 2 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏!")
    else:
        print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   üìç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_get_warehouse_id,
        test_warehouse_statistics_api,
        test_diagnostic_logging,
        test_layout_with_cargo_consistency,
        test_target_cargo_verification
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_summary()

if __name__ == "__main__":
    main()