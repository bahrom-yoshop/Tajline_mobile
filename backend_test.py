#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞ (—Ü–µ–Ω–∞ –≥—Ä—É–∑–∞, —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞) –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ backend 
–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.

–ó–ê–î–ê–ß–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞
2. –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–∞—á–∏ –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º –Ω–∞ —Å–∫–ª–∞–¥
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è:
   - pickup_date (–¥–∞—Ç–∞ –∑–∞–±–æ—Ä–∞)
   - pickup_time_from, pickup_time_to (–≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞)
   - payment_method (—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ—Ç –∫—É—Ä—å–µ—Ä–∞)
   - total_value –∏–ª–∏ declared_value (—Ü–µ–Ω–∞ –≥—Ä—É–∑–∞ –æ—Ç –∫—É—Ä—å–µ—Ä–∞)
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoint GET /api/operator/pickup-requests/{request_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
5. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ modal_data:
   - sender_data.pickup_date
   - sender_data.pickup_time_from, pickup_time_to
   - payment_info.payment_method
   - cargo_info.total_value –∏–ª–∏ cargo_info.declared_value

–í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
- –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∫—É—Ä—å–µ—Ä (–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä)
- –¶–µ–Ω–∞ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ –ø–æ–ª—è total_value –∏–ª–∏ declared_value
- –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –∫—É—Ä—å–µ—Ä
- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import requests
import json
import sys
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-tracker-28.preview.emergentagent.com/api"
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

class CourierListUpdateTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.admin_user = None
        self.test_results = []
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        print(f"{status} {test_name}: {details}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data["access_token"]
                self.admin_user = data["user"]
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.admin_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.admin_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_active_couriers_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤"""
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/couriers/list")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and 'items' in data:
                    return len(data['items'])
                elif isinstance(data, list):
                    return len(data)
                else:
                    return 0
            return 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {e}")
            return 0
    
    def get_inactive_couriers_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤"""
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/couriers/inactive")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and 'items' in data:
                    return len(data['items'])
                elif isinstance(data, list):
                    return len(data)
                else:
                    return 0
            return 0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {e}")
            return 0
    
    def get_inactive_couriers_list(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤"""
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/couriers/inactive")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and 'items' in data:
                    return data['items']
                elif isinstance(data, list):
                    return data
                else:
                    return []
            else:
                self.log_test(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ù–ï–ê–ö–¢–ò–í–ù–´–• –ö–£–†–¨–ï–†–û–í",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
        except Exception as e:
            self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ù–ï–ê–ö–¢–ò–í–ù–´–• –ö–£–†–¨–ï–†–û–í", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return []
    
    def create_test_courier(self, name_suffix=""):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
            warehouses_response = self.session.get(f"{BACKEND_URL}/warehouses")
            if warehouses_response.status_code != 200:
                self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –î–õ–Ø –¢–ï–°–¢–û–í–û–ì–û –ö–£–†–¨–ï–†–ê", False, f"HTTP {warehouses_response.status_code}")
                return None
                
            warehouses = warehouses_response.json()
            if not warehouses:
                self.log_test("–ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –î–õ–Ø –¢–ï–°–¢–û–í–û–ì–û –ö–£–†–¨–ï–†–ê", False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                return None
            
            warehouse_id = warehouses[0]["id"]
            
            import random
            phone_suffix = random.randint(1000, 9999)
            courier_data = {
                "full_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –ö—É—Ä—å–µ—Ä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏{name_suffix}",
                "phone": f"+7999{phone_suffix}{random.randint(100, 999)}",
                "password": "courier123",
                "address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, 123",
                "transport_type": "car",
                "transport_number": f"TEST{phone_suffix}",
                "transport_capacity": 500.0,
                "assigned_warehouse_id": warehouse_id
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/admin/couriers/create",
                json=courier_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫—É—Ä—å–µ—Ä–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                courier = {
                    "id": result["courier_id"],
                    "full_name": courier_data["full_name"],
                    "phone": courier_data["phone"]
                }
                self.log_test(
                    f"–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ö–£–†–¨–ï–†–ê{name_suffix}",
                    True,
                    f"–ö—É—Ä—å–µ—Ä '{courier['full_name']}' —Å–æ–∑–¥–∞–Ω —Å ID: {courier['id'][:8]}..."
                )
                return courier
            else:
                self.log_test(
                    f"–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ö–£–†–¨–ï–†–ê{name_suffix}",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_test(f"–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ö–£–†–¨–ï–†–ê{name_suffix}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return None
    
    def deactivate_courier(self, courier_id):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞ (soft delete)"""
        try:
            response = self.session.delete(f"{BACKEND_URL}/admin/couriers/{courier_id}")
            
            if response.status_code == 200:
                result = response.json()
                self.log_test(
                    "–î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê",
                    True,
                    f"–ö—É—Ä—å–µ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {result.get('message', '–£—Å–ø–µ—à–Ω–æ')}"
                )
                return True
            else:
                self.log_test(
                    "–î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def activate_courier(self, courier_id):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞"""
        try:
            response = self.session.post(f"{BACKEND_URL}/admin/couriers/{courier_id}/activate")
            
            if response.status_code == 200:
                result = response.json()
                self.log_test(
                    "–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê",
                    True,
                    f"–ö—É—Ä—å–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {result.get('message', '–£—Å–ø–µ—à–Ω–æ')}"
                )
                return True
            else:
                self.log_test(
                    "–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def permanent_delete_courier(self, courier_id):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞"""
        try:
            response = self.session.delete(f"{BACKEND_URL}/admin/couriers/{courier_id}/permanent")
            
            if response.status_code == 200:
                result = response.json()
                self.log_test(
                    "–ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ö–£–†–¨–ï–†–ê",
                    True,
                    f"–ö—É—Ä—å–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω: {result.get('message', '–£—Å–ø–µ—à–Ω–æ')}"
                )
                return True
            else:
                self.log_test(
                    "–ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ö–£–†–¨–ï–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–û–õ–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ö–£–†–¨–ï–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_courier_list_synchronization(self):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        print("\n" + "="*80)
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–ü–ò–°–ö–û–í –ö–£–†–¨–ï–†–û–í")
        print("="*80)
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        initial_active_count = self.get_active_couriers_count()
        initial_inactive_count = self.get_inactive_couriers_count()
        
        self.log_test(
            "–ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ü–ò–°–ö–û–í",
            True,
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {initial_active_count}, –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {initial_inactive_count}"
        )
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ (–æ–Ω –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º)
        test_courier = self.create_test_courier("_Sync")
        if not test_courier:
            return False
        
        courier_id = test_courier["id"]
        courier_name = test_courier["full_name"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—É—Ä—å–µ—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        active_count_after_create = self.get_active_couriers_count()
        
        if active_count_after_create == initial_active_count + 1:
            self.log_test(
                "–ü–û–Ø–í–õ–ï–ù–ò–ï –í –ê–ö–¢–ò–í–ù–û–ú –°–ü–ò–°–ö–ï –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø",
                True,
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {active_count_after_create} (–±—ã–ª–æ {initial_active_count})"
            )
        else:
            self.log_test(
                "–ü–û–Ø–í–õ–ï–ù–ò–ï –í –ê–ö–¢–ò–í–ù–û–ú –°–ü–ò–°–ö–ï –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {initial_active_count + 1}, –ø–æ–ª—É—á–µ–Ω–æ {active_count_after_create}"
            )
        
        # –®–∞–≥ 3: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–∞
        if not self.deactivate_courier(courier_id):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        time.sleep(1)
        active_count_after_deactivate = self.get_active_couriers_count()
        inactive_count_after_deactivate = self.get_inactive_couriers_count()
        
        # –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if active_count_after_deactivate == initial_active_count:
            self.log_test(
                "–ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï –ò–ó –ê–ö–¢–ò–í–ù–û–ì–û –°–ü–ò–°–ö–ê –ü–û–°–õ–ï –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò",
                True,
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {active_count_after_deactivate} (–æ–∂–∏–¥–∞–ª–æ—Å—å {initial_active_count})"
            )
        else:
            self.log_test(
                "–ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï –ò–ó –ê–ö–¢–ò–í–ù–û–ì–û –°–ü–ò–°–ö–ê –ü–û–°–õ–ï –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {initial_active_count}, –ø–æ–ª—É—á–µ–Ω–æ {active_count_after_deactivate}"
            )
        
        # –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
        if inactive_count_after_deactivate == initial_inactive_count + 1:
            self.log_test(
                "–ü–û–Ø–í–õ–ï–ù–ò–ï –í –ù–ï–ê–ö–¢–ò–í–ù–û–ú –°–ü–ò–°–ö–ï –ü–û–°–õ–ï –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò",
                True,
                f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {inactive_count_after_deactivate} (–±—ã–ª–æ {initial_inactive_count})"
            )
        else:
            self.log_test(
                "–ü–û–Ø–í–õ–ï–ù–ò–ï –í –ù–ï–ê–ö–¢–ò–í–ù–û–ú –°–ü–ò–°–ö–ï –ü–û–°–õ–ï –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {initial_inactive_count + 1}, –ø–æ–ª—É—á–µ–Ω–æ {inactive_count_after_deactivate}"
            )
        
        # –®–∞–≥ 4: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É—Ä—å–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ
        if not self.activate_courier(courier_id):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        time.sleep(1)
        active_count_after_activate = self.get_active_couriers_count()
        inactive_count_after_activate = self.get_inactive_couriers_count()
        
        # –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
        if active_count_after_activate == initial_active_count + 1:
            self.log_test(
                "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ü–û–Ø–í–õ–ï–ù–ò–ï –í –ê–ö–¢–ò–í–ù–û–ú –°–ü–ò–°–ö–ï –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò",
                True,
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {active_count_after_activate} (–æ–∂–∏–¥–∞–ª–æ—Å—å {initial_active_count + 1})"
            )
        else:
            self.log_test(
                "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ü–û–Ø–í–õ–ï–ù–ò–ï –í –ê–ö–¢–ò–í–ù–û–ú –°–ü–ò–°–ö–ï –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {initial_active_count + 1}, –ø–æ–ª—É—á–µ–Ω–æ {active_count_after_activate}"
            )
        
        # –ö—É—Ä—å–µ—Ä –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if inactive_count_after_activate == initial_inactive_count:
            self.log_test(
                "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï –ò–ó –ù–ï–ê–ö–¢–ò–í–ù–û–ì–û –°–ü–ò–°–ö–ê –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò",
                True,
                f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤: {inactive_count_after_activate} (–æ–∂–∏–¥–∞–ª–æ—Å—å {initial_inactive_count})"
            )
        else:
            self.log_test(
                "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–ï –ò–ó –ù–ï–ê–ö–¢–ò–í–ù–û–ì–û –°–ü–ò–°–ö–ê –ü–û–°–õ–ï –ê–ö–¢–ò–í–ê–¶–ò–ò",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {initial_inactive_count}, –ø–æ–ª—É—á–µ–Ω–æ {inactive_count_after_activate}"
            )
        
        # –®–∞–≥ 5: –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.permanent_delete_courier(courier_id)
        
        return True
    
    def test_multiple_courier_operations(self):
        """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—É—Ä—å–µ—Ä–∞–º–∏"""
        print("\n" + "="*80)
        print("üîÑ –¢–ï–°–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –û–ü–ï–†–ê–¶–ò–ô –° –ö–£–†–¨–ï–†–ê–ú–ò")
        print("="*80)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        couriers = []
        for i in range(3):
            courier = self.create_test_courier(f"_Multi{i}")
            if courier:
                couriers.append(courier)
        
        if len(couriers) < 3:
            self.log_test("–°–û–ó–î–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ö–£–†–¨–ï–†–û–í", False, f"–°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ {len(couriers)} –∏–∑ 3")
            return False
        
        self.log_test("–°–û–ó–î–ê–ù–ò–ï –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ö–£–†–¨–ï–†–û–í", True, f"–°–æ–∑–¥–∞–Ω–æ {len(couriers)} –∫—É—Ä—å–µ—Ä–æ–≤")
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        initial_active = self.get_active_couriers_count()
        initial_inactive = self.get_inactive_couriers_count()
        
        for courier in couriers:
            self.deactivate_courier(courier["id"])
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        time.sleep(2)
        active_after_mass_deactivate = self.get_active_couriers_count()
        inactive_after_mass_deactivate = self.get_inactive_couriers_count()
        
        expected_active = initial_active - 3
        expected_inactive = initial_inactive + 3
        
        if active_after_mass_deactivate == expected_active:
            self.log_test(
                "–ú–ê–°–°–û–í–ê–Ø –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø - –ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö",
                True,
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_after_mass_deactivate} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_active})"
            )
        else:
            self.log_test(
                "–ú–ê–°–°–û–í–ê–Ø –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø - –ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_active}, –ø–æ–ª—É—á–µ–Ω–æ {active_after_mass_deactivate}"
            )
        
        if inactive_after_mass_deactivate == expected_inactive:
            self.log_test(
                "–ú–ê–°–°–û–í–ê–Ø –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø - –ù–ï–ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö",
                True,
                f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_after_mass_deactivate} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_inactive})"
            )
        else:
            self.log_test(
                "–ú–ê–°–°–û–í–ê–Ø –î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø - –ù–ï–ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_inactive}, –ø–æ–ª—É—á–µ–Ω–æ {inactive_after_mass_deactivate}"
            )
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        first_courier = couriers[0]
        self.activate_courier(first_courier["id"])
        time.sleep(1)
        
        active_after_single_activate = self.get_active_couriers_count()
        inactive_after_single_activate = self.get_inactive_couriers_count()
        
        if active_after_single_activate == expected_active + 1:
            self.log_test(
                "–û–î–ò–ù–û–ß–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–°–õ–ï –ú–ê–°–°–û–í–û–ô –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò",
                True,
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_after_single_activate} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_active + 1})"
            )
        else:
            self.log_test(
                "–û–î–ò–ù–û–ß–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–°–õ–ï –ú–ê–°–°–û–í–û–ô –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò",
                False,
                f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_active + 1}, –ø–æ–ª—É—á–µ–Ω–æ {active_after_single_activate}"
            )
        
        # –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤
        for courier in couriers:
            self.permanent_delete_courier(courier["id"])
        
        return True
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        print("\n" + "="*80)
        print("‚ö†Ô∏è –¢–ï–°–¢ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
        print("="*80)
        
        # –¢–µ—Å—Ç 1: –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        active_courier = self.create_test_courier("_EdgeActive")
        if active_courier:
            # –ö—É—Ä—å–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
            response = self.session.post(f"{BACKEND_URL}/admin/couriers/{active_courier['id']}/activate")
            
            if response.status_code in [200, 400]:  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                self.log_test(
                    "–ê–ö–¢–ò–í–ê–¶–ò–Ø –£–ñ–ï –ê–ö–¢–ò–í–ù–û–ì–û –ö–£–†–¨–ï–†–ê",
                    True,
                    f"HTTP {response.status_code}: {response.json().get('message', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')}"
                )
            else:
                self.log_test(
                    "–ê–ö–¢–ò–í–ê–¶–ò–Ø –£–ñ–ï –ê–ö–¢–ò–í–ù–û–ì–û –ö–£–†–¨–ï–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
            
            self.permanent_delete_courier(active_courier["id"])
        
        # –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        fake_courier_id = "00000000-0000-0000-0000-000000000000"
        response = self.session.delete(f"{BACKEND_URL}/admin/couriers/{fake_courier_id}")
        
        if response.status_code == 404:
            self.log_test(
                "–î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ö–£–†–¨–ï–†–ê",
                True,
                f"HTTP 404: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞"
            )
        else:
            self.log_test(
                "–î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ö–£–†–¨–ï–†–ê",
                False,
                f"HTTP {response.status_code}: –û–∂–∏–¥–∞–ª—Å—è 404"
            )
        
        # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        response = self.session.post(f"{BACKEND_URL}/admin/couriers/{fake_courier_id}/activate")
        
        if response.status_code == 404:
            self.log_test(
                "–ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ö–£–†–¨–ï–†–ê",
                True,
                f"HTTP 404: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—É—Ä—å–µ—Ä–∞"
            )
        else:
            self.log_test(
                "–ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –ö–£–†–¨–ï–†–ê",
                False,
                f"HTTP {response.status_code}: –û–∂–∏–¥–∞–ª—Å—è 404"
            )
        
        return True
    
    def test_api_endpoints_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API endpoints"""
        print("\n" + "="*80)
        print("üîó –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò API ENDPOINTS")
        print("="*80)
        
        endpoints_to_test = [
            ("GET", "/admin/couriers/list", "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤"),
            ("GET", "/admin/couriers/inactive", "–°–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤"),
            ("POST", "/admin/couriers/create", "–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞"),
            ("DELETE", "/admin/couriers/{id}", "–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞"),
            ("POST", "/admin/couriers/{id}/activate", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞"),
            ("DELETE", "/admin/couriers/{id}/permanent", "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞")
        ]
        
        for method, endpoint, description in endpoints_to_test:
            try:
                if method == "GET":
                    response = self.session.get(f"{BACKEND_URL}{endpoint}")
                elif method == "POST":
                    # –î–ª—è POST endpoints –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                    response = self.session.post(f"{BACKEND_URL}{endpoint.replace('{id}', 'test')}", json={})
                elif method == "DELETE":
                    response = self.session.delete(f"{BACKEND_URL}{endpoint.replace('{id}', 'test')}")
                
                # Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –µ—Å–ª–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404 (Not Found)
                if response.status_code != 404:
                    self.log_test(
                        f"ENDPOINT {method} {endpoint}",
                        True,
                        f"{description} - HTTP {response.status_code} (endpoint –¥–æ—Å—Ç—É–ø–µ–Ω)"
                    )
                else:
                    self.log_test(
                        f"ENDPOINT {method} {endpoint}",
                        False,
                        f"{description} - HTTP 404 (endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω)"
                    )
                    
            except Exception as e:
                self.log_test(
                    f"ENDPOINT {method} {endpoint}",
                    False,
                    f"{description} - –û—à–∏–±–∫–∞: {str(e)}"
                )
        
        return True
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –≤ TAJLINE.TJ")
        print("="*120)
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Backend URL: {BACKEND_URL}")
        print("="*120)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("API ENDPOINTS AVAILABILITY", self.test_api_endpoints_availability),
            ("COURIER LIST SYNCHRONIZATION", self.test_courier_list_synchronization),
            ("MULTIPLE COURIER OPERATIONS", self.test_multiple_courier_operations),
            ("EDGE CASES", self.test_edge_cases)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            print(f"\n{'='*60}")
            print(f"üß™ –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–ê: {test_name}")
            print(f"{'='*60}")
            
            try:
                if test_func():
                    passed_tests += 1
                    print(f"‚úÖ –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
                else:
                    print(f"‚ùå –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
            except Exception as e:
                print(f"‚ùå –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ï–ù –° –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï–ú: {str(e)}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*120)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º
        successful_checks = sum(1 for result in self.test_results if result["success"])
        total_checks = len(self.test_results)
        check_success_rate = (successful_checks / total_checks) * 100 if total_checks > 0 else 0
        
        print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {successful_checks}/{total_checks} ({check_success_rate:.1f}%)")
        
        # –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        failed_tests = [result for result in self.test_results if not result["success"]]
        if failed_tests:
            print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –ü–†–û–í–ï–†–ö–ò ({len(failed_tests)}):")
            for failed in failed_tests:
                print(f"   ‚Ä¢ {failed['test']}: {failed['details']}")
        
        print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if success_rate >= 90:
            print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è frontend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ handleActivateCourier –∏ handlePermanentDeleteCourier")
        elif success_rate >= 70:
            print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
        return success_rate >= 70

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CourierListUpdateTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()