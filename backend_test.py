#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ TAJLINE.TJ

–ù–û–í–´–ô ENDPOINT –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- GET /api/operator/cargo/{cargo_id}/full-info - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ —á–µ—Ä–µ–∑ POST /api/operator/cargo/accept
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint GET /api/operator/cargo/{cargo_id}/full-info
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: cargo_items, cargo_number, sender_full_name, recipient_full_name, weight, declared_value –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR
5. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
Backend –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤–∫–ª—é—á–∞—è cargo_items –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –Ω–∞ frontend.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://fd92835b-6e3a-415a-a86b-831b5b2d57c1.preview.emergentagent.com/api"

def test_qr_code_functionality_for_operator():
    """
    üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
    1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
    3. –ù–æ–≤—ã–π endpoint GET /api/operator/cargo/{cargo_id}/full-info
    4. –ü—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
    """
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ TAJLINE.TJ")
    print("=" * 100)
    
    # Step 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        login_response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            login_result = login_response.json()
            token = login_result.get("access_token")
            user_info = login_result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {login_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Step 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏
    print("\n2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ì–†–£–ó–ê–ú–ò")
    
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR", 
        "recipient_phone": "+992900111222",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è QR, 123",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–∞",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung 55",
                "quantity": 2,
                "weight": 15.0,
                "price_per_kg": 180.0,
                "total_amount": 5400.0  # 2 * 15.0 * 180.0
            },
            {
                "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG", 
                "quantity": 3,
                "weight": 8.0,
                "price_per_kg": 120.0,
                "total_amount": 2880.0  # 3 * 8.0 * 120.0
            }
        ]
    }
    
    print(f"   üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å {len(cargo_data['cargo_items'])} —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞:")
    total_quantity = sum(item['quantity'] for item in cargo_data['cargo_items'])
    print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {total_quantity}")
    
    try:
        cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
        
        if cargo_response.status_code == 200:
            cargo_result = cargo_response.json()
            cargo_number = cargo_result.get("cargo_number", "Unknown")
            cargo_id = cargo_result.get("cargo_id", "Unknown")
            
            print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {cargo_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False
    
    # Step 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint GET /api/operator/cargo/{cargo_id}/full-info
    print(f"\n3Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ù–û–í–´–ô ENDPOINT GET /api/operator/cargo/{cargo_id}/full-info")
    
    try:
        full_info_response = requests.get(f"{BACKEND_URL}/operator/cargo/{cargo_id}/full-info", headers=headers)
        print(f"   üì° GET /api/operator/cargo/{cargo_id}/full-info - Status: {full_info_response.status_code}")
        
        if full_info_response.status_code == 200:
            full_info_result = full_info_response.json()
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ù–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            # Step 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
            print(f"\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–ê")
            
            required_fields = [
                "cargo_items", "cargo_number", "sender_full_name", 
                "recipient_full_name", "weight", "declared_value"
            ]
            
            missing_fields = []
            present_fields = []
            
            for field in required_fields:
                if field in full_info_result:
                    present_fields.append(field)
                    print(f"   ‚úÖ {field}: {full_info_result.get(field, 'N/A')}")
                else:
                    missing_fields.append(field)
                    print(f"   ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cargo_items
            if "cargo_items" in full_info_result:
                cargo_items = full_info_result["cargo_items"]
                print(f"\n   üì¶ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê CARGO_ITEMS ({len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤):")
                
                for i, item in enumerate(cargo_items, 1):
                    print(f"      –ì—Ä—É–∑ #{i}:")
                    print(f"      - cargo_name: {item.get('cargo_name', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - quantity: {item.get('quantity', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - weight: {item.get('weight', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - price_per_kg: {item.get('price_per_kg', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                    print(f"      - total_amount: {item.get('total_amount', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
            
            # Step 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
            print(f"\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò - –î–û–°–¢–£–ü –¢–û–õ–¨–ö–û –ö –°–í–û–ò–ú –ó–ê–Ø–í–ö–ê–ú")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
            created_by = full_info_result.get("created_by", "Unknown")
            created_by_operator = full_info_result.get("created_by_operator", "Unknown")
            
            print(f"   üîí –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_by_operator} (ID: {created_by})")
            print(f"   üë§ –¢–µ–∫—É—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {user_info.get('full_name', 'Unknown')} (ID: {user_info.get('id', 'Unknown')})")
            
            if created_by == user_info.get('id'):
                print(f"   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞—è–≤–∫–∞–º")
            else:
                print(f"   ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–∞")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print(f"\n6Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–õ–Ø QR –ì–ï–ù–ï–†–ê–¶–ò–ò")
            
            if len(missing_fields) == 0:
                print(f"   üéâ –í–°–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢!")
                print(f"   ‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤")
                print(f"   üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ QR –∫–æ–¥–æ–≤: {total_quantity}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR –∫–æ–¥–æ–≤
                print(f"   üè∑Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR –∫–æ–¥–æ–≤:")
                cargo_index = 1
                for item in cargo_data['cargo_items']:
                    for unit in range(1, item['quantity'] + 1):
                        qr_number = f"{cargo_number}/{cargo_index:02d}/{unit}"
                        print(f"      - {qr_number} ({item['cargo_name']}, –µ–¥–∏–Ω–∏—Ü–∞ {unit})")
                    cargo_index += 1
                
                return True
            else:
                print(f"   ‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø: {', '.join(missing_fields)}")
                print(f"   ‚ùå Backend –ù–ï –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤")
                return False
                
        elif full_info_response.status_code == 404:
            print(f"   ‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return False
        elif full_info_response.status_code == 403:
            print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
            return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {full_info_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {full_info_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ endpoint: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    
    success = test_qr_code_functionality_for_operator()
    
    print("\n" + "=" * 100)
    if success:
        print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò QR –ö–û–î–ê –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        print("‚úÖ –ù–æ–≤—ã–π endpoint GET /api/operator/cargo/{cargo_id}/full-info —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ–π –∑–∞—è–≤–∫–µ")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é QR –∫–æ–¥–∞")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)