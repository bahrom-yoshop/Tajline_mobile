#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" TAJLINE.TJ

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1) –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è Pydantic –º–æ–¥–µ–ª—å BulkDeleteRequest —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ids: List[str] (1-100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
2) –ò–∑–º–µ–Ω–µ–Ω endpoint DELETE /api/admin/cargo/bulk - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
3) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ - —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç {"ids": [...]} –≤–º–µ—Å—Ç–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ dict
4) –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
5) –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ "success": True –≤ –æ—Ç–≤–µ—Ç –¥–ª—è frontend

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)
2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" —á–µ—Ä–µ–∑ GET /api/cargo/all –∏–ª–∏ GET /api/admin/cargo
3) –í—ã–±–æ—Ä 2-3 —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
4) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint DELETE /api/admin/cargo/bulk —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π {"ids": [...]}
5) –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –æ–±–µ–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (cargo –∏ operator_cargo)
6) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ backend –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤" –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ HTTP 404
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-ops.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def log_test_result(test_name, success, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {status} {test_name}")
    if details:
        print(f"    üìã {details}")
    print()

def test_admin_authorization():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)"""
    print("üîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)")
    
    try:
        login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        response = requests.post(f"{API_BASE}/auth/login", json=login_data)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            user_info = data.get("user", {})
            
            if token and user_info.get("role") == "admin":
                log_test_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
                    True, 
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number')}), —Ä–æ–ª—å: {user_info.get('role')}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                )
                return token
            else:
                log_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ —Ä–æ–ª—å –Ω–µ admin")
                return None
        else:
            log_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"HTTP {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        log_test_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return None

def test_get_cargo_list(token):
    """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'"""
    print("üì¶ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # –ü—Ä–æ–±—É–µ–º GET /api/cargo/all (–æ—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤)
        response = requests.get(f"{API_BASE}/cargo/all", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            cargo_list = data.get("items", data) if isinstance(data, dict) else data
            
            if isinstance(cargo_list, list) and len(cargo_list) > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –≥—Ä—É–∑–æ–≤
                status_counts = {}
                for cargo in cargo_list[:100]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    status = cargo.get("status", "unknown")
                    status_counts[status] = status_counts.get(status, 0) + 1
                
                log_test_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤", 
                    True, 
                    f"–ù–∞–π–¥–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤'. –°—Ç–∞—Ç—É—Å—ã: {dict(list(status_counts.items())[:5])}"
                )
                return cargo_list[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            else:
                log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤", False, "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return []
        else:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint GET /api/admin/cargo
            response = requests.get(f"{API_BASE}/admin/cargo", headers=headers)
            if response.status_code == 200:
                data = response.json()
                cargo_list = data.get("items", data) if isinstance(data, dict) else data
                
                if isinstance(cargo_list, list) and len(cargo_list) > 0:
                    log_test_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤", 
                        True, 
                        f"–ù–∞–π–¥–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ —á–µ—Ä–µ–∑ GET /api/admin/cargo"
                    )
                    return cargo_list[:10]
                    
            log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤", False, f"HTTP {response.status_code}: {response.text}")
            return []
            
    except Exception as e:
        log_test_result("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return []

def test_bulk_delete_validation(token):
    """–¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è BulkDeleteRequest –º–æ–¥–µ–ª–∏"""
    print("üîç –¢–ï–°–¢ 3: –í–∞–ª–∏–¥–∞—Ü–∏—è BulkDeleteRequest –º–æ–¥–µ–ª–∏")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –¢–µ—Å—Ç 3.1: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ids (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    try:
        response = requests.delete(f"{API_BASE}/admin/cargo/bulk", 
                                 headers=headers, 
                                 json={"ids": []})
        
        if response.status_code == 422:
            log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞", True, "–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ids –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (HTTP 422)")
        else:
            log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞", False, f"–û–∂–∏–¥–∞–ª—Å—è HTTP 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
    except Exception as e:
        log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –¢–µ—Å—Ç 3.2: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (>100, –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    try:
        large_list = [f"test-id-{i}" for i in range(101)]  # 101 —ç–ª–µ–º–µ–Ω—Ç
        response = requests.delete(f"{API_BASE}/admin/cargo/bulk", 
                                 headers=headers, 
                                 json={"ids": large_list})
        
        if response.status_code == 422:
            log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞", True, "–°–ø–∏—Å–æ–∫ >100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (HTTP 422)")
        else:
            log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞", False, f"–û–∂–∏–¥–∞–ª—Å—è HTTP 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
    except Exception as e:
        log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –¢–µ—Å—Ç 3.3: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
    try:
        response = requests.delete(f"{API_BASE}/admin/cargo/bulk", 
                                 headers=headers, 
                                 json={"cargo_ids": ["test-id-1", "test-id-2"]})  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        
        if response.status_code == 422:
            log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", True, "–°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç cargo_ids –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω (HTTP 422)")
        else:
            log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", False, f"–û–∂–∏–¥–∞–ª—Å—è HTTP 422, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
    except Exception as e:
        log_test_result("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", False, f"–û—à–∏–±–∫–∞: {str(e)}")

def test_bulk_delete_functionality(token, cargo_list):
    """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint DELETE /api/admin/cargo/bulk"""
    print("üéØ –¢–ï–°–¢ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint DELETE /api/admin/cargo/bulk")
    
    if len(cargo_list) < 2:
        log_test_result("–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º 2-3 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_cargo = cargo_list[:3]
    test_ids = [cargo.get("id") for cargo in test_cargo if cargo.get("id")]
    
    if len(test_ids) < 2:
        log_test_result("–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", False, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã ID –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"    üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ {len(test_ids)} –≥—Ä—É–∑–æ–≤:")
    for i, cargo in enumerate(test_cargo[:len(test_ids)]):
        print(f"       {i+1}. {cargo.get('cargo_number', 'N/A')} (ID: {cargo.get('id', 'N/A')[:8]}...)")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É {"ids": [...]}
        delete_data = {"ids": test_ids}
        
        response = requests.delete(f"{API_BASE}/admin/cargo/bulk", 
                                 headers=headers, 
                                 json=delete_data)
        
        print(f"    üì° HTTP Status: {response.status_code}")
        print(f"    üì° Response: {response.text[:500]}...")
        
        if response.status_code == 200:
            try:
                data = response.json()
                success = data.get("success", False)
                deleted_count = data.get("deleted_count", 0)
                
                if success and deleted_count > 0:
                    log_test_result(
                        "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", 
                        True, 
                        f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {len(test_ids)} –≥—Ä—É–∑–æ–≤. –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç success: {success}"
                    )
                    return True
                else:
                    log_test_result(
                        "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", 
                        False, 
                        f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ success: {success}, deleted_count: {deleted_count}"
                    )
                    return False
            except json.JSONDecodeError:
                log_test_result("–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", False, "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
                return False
        elif response.status_code == 404:
            log_test_result(
                "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", 
                False, 
                "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: HTTP 404 '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!"
            )
            return False
        else:
            log_test_result(
                "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", 
                False, 
                f"HTTP {response.status_code}: {response.text}"
            )
            return False
            
    except Exception as e:
        log_test_result("–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_cargo_deletion_verification(token, original_count):
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–ª–∏—Å—å"""
    print("üîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤
        response = requests.get(f"{API_BASE}/cargo/all", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            cargo_list = data.get("items", data) if isinstance(data, dict) else data
            new_count = len(cargo_list) if isinstance(cargo_list, list) else 0
            
            if new_count < original_count:
                log_test_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                    True, 
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å —Å {original_count} –¥–æ {new_count} (—É–¥–∞–ª–µ–Ω–æ: {original_count - new_count})"
                )
                return True
            else:
                log_test_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", 
                    False, 
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: {original_count} -> {new_count}"
                )
                return False
        else:
            log_test_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        log_test_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_nonexistent_ids(token):
    """–¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID"""
    print("üîç –¢–ï–°–¢ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID")
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ ID
        fake_ids = ["nonexistent-id-1", "nonexistent-id-2", "fake-cargo-id-3"]
        delete_data = {"ids": fake_ids}
        
        response = requests.delete(f"{API_BASE}/admin/cargo/bulk", 
                                 headers=headers, 
                                 json=delete_data)
        
        if response.status_code == 200:
            try:
                data = response.json()
                deleted_count = data.get("deleted_count", 0)
                
                if deleted_count == 0:
                    log_test_result(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID", 
                        True, 
                        f"–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: deleted_count = {deleted_count}"
                    )
                    return True
                else:
                    log_test_result(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID", 
                        False, 
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID"
                    )
                    return False
            except json.JSONDecodeError:
                log_test_result("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID", False, "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
                return False
        else:
            log_test_result(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID", 
                False, 
                f"HTTP {response.status_code}: {response.text}"
            )
            return False
            
    except Exception as e:
        log_test_result("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID", False, f"–û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 80)
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
    print("üìç –†–∞–∑–¥–µ–ª: '–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤' –≤ TAJLINE.TJ")
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è BulkDeleteRequest –∏ endpoint DELETE /api/admin/cargo/bulk")
    print("=" * 80)
    print()
    
    # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    token = test_admin_authorization()
    if not token:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        print("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤
    cargo_list = test_get_cargo_list(token)
    if not cargo_list:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤")
        print("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        return
    
    original_count = len(cargo_list)
    
    # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è BulkDeleteRequest –º–æ–¥–µ–ª–∏
    test_bulk_delete_validation(token)
    
    # –¢–µ—Å—Ç 4: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    deletion_success = test_bulk_delete_functionality(token, cargo_list)
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ)
    if deletion_success:
        test_cargo_deletion_verification(token, original_count)
    
    # –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID
    test_nonexistent_ids(token)
    
    print("=" * 80)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 80)
    
    if deletion_success:
        print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üìã Endpoint DELETE /api/admin/cargo/bulk —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ {'ids': [...]} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("üìã BulkDeleteRequest –º–æ–¥–µ–ª—å –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìã –û—à–∏–±–∫–∞ HTTP 404 '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' –ò–°–ü–†–ê–í–õ–ï–ù–ê!")
    else:
        print("‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print()

if __name__ == "__main__":
    main()
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è React –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –†–ï–®–ï–ù–ò–Ø:
1) "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –∏ –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
2) React DOM –æ—à–∏–±–∫–∏: "insertBefore" –∏ "removeChild" - –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1) –î–æ–±–∞–≤–ª–µ–Ω try-catch –±–ª–æ–∫ –≤ executeDelete –¥–ª—è cargo-placement —Ç–∏–ø–∞
2) –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ (timeout) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
3) –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤
4) –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∞—Ö
5) –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

–û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
3) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
4) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ React DOM –æ—à–∏–±–æ–∫
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-ops.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class TajlineCargoRemovalTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.available_cargo = []
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        if error_msg:
            print(f"   –û—à–∏–±–∫–∞: {error_msg}")
        print()

    def test_warehouse_operator_auth(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
        try:
            auth_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                operator_name = self.operator_info.get("full_name", "Unknown")
                operator_role = self.operator_info.get("role", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}', —Ä–æ–ª—å: {operator_role}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                False,
                "",
                str(e)
            )
            return False

    def test_get_available_cargo_for_placement(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "items" in data:
                    self.available_cargo = data["items"]
                    cargo_count = len(self.available_cargo)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≥—Ä—É–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if cargo_count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞
                        first_cargo = self.available_cargo[0]
                        required_fields = ["id", "cargo_number", "sender_full_name", "recipient_full_name", "weight"]
                        missing_fields = [field for field in required_fields if field not in first_cargo]
                        
                        if not missing_fields:
                            self.log_test(
                                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                True,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                False,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}",
                                "–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            False,
                            "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç",
                            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ",
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                False,
                "",
                str(e)
            )
            return False

    def test_single_cargo_deletion(self):
        """–¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
        try:
            if not self.available_cargo:
                self.log_test(
                    "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                    False,
                    "",
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo = self.available_cargo[0]
            cargo_id = test_cargo["id"]
            cargo_number = test_cargo["cargo_number"]
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            response = self.session.delete(f"{API_BASE}/operator/cargo/{cargo_id}/remove-from-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫
                expected_fields = ["success", "message", "cargo_number"]
                missing_fields = [field for field in expected_fields if field not in data]
                
                if not missing_fields:
                    success_status = data.get("success", False)
                    message = data.get("message", "")
                    returned_cargo_number = data.get("cargo_number", "")
                    
                    if success_status and returned_cargo_number:
                        self.log_test(
                            "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                            True,
                            f"–ì—Ä—É–∑ {returned_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫: {data}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                            False,
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data}",
                            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ API"
                        )
                        return False
                else:
                    self.log_test(
                        "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}",
                        f"–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å React –æ—à–∏–±–∫–∏: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_bulk_cargo_deletion(self):
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
        try:
            if len(self.available_cargo) < 2:
                self.log_test(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    "",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)"
                )
                return False
            
            # –ë–µ—Ä–µ–º 2-3 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            test_cargo_ids = [cargo["id"] for cargo in self.available_cargo[1:4]]  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2-3 –≥—Ä—É–∑–∞
            test_cargo_numbers = [cargo["cargo_number"] for cargo in self.available_cargo[1:4]]
            
            bulk_delete_data = {
                "cargo_ids": test_cargo_ids
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            response = self.session.delete(f"{API_BASE}/operator/cargo/bulk-remove-from-placement", json=bulk_delete_data)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫
                expected_fields = ["deleted_count", "total_requested", "deleted_cargo_numbers"]
                missing_fields = [field for field in expected_fields if field not in data]
                
                if not missing_fields:
                    deleted_count = data.get("deleted_count", 0)
                    total_requested = data.get("total_requested", 0)
                    deleted_cargo_numbers = data.get("deleted_cargo_numbers", [])
                    
                    if deleted_count > 0 and total_requested == len(test_cargo_ids):
                        self.log_test(
                            "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                            True,
                            f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} –≥—Ä—É–∑–æ–≤, –Ω–æ–º–µ—Ä–∞: {deleted_cargo_numbers}, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                            False,
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ: deleted_count={deleted_count}, total_requested={total_requested}",
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {data}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}",
                        f"–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å React –æ—à–∏–±–∫–∏: {data}"
                    )
                    return False
            elif response.status_code == 422:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Pydantic
                data = response.json()
                self.log_test(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                    True,
                    f"Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {data}",
                    "–≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                )
                return True
            else:
                self.log_test(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                False,
                "",
                str(e)
            )
            return False

    def test_response_structure_validation(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "items" in data:
                    updated_cargo = data["items"]
                    updated_count = len(updated_cargo)
                    original_count = len(self.available_cargo)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å (–≥—Ä—É–∑—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã) –∏–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º
                    if updated_count <= original_count:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –≤–∞–ª–∏–¥–Ω—ã (–Ω–µ—Ç null/undefined –∑–Ω–∞—á–µ–Ω–∏–π)
                        invalid_items = []
                        for i, cargo in enumerate(updated_cargo):
                            if not cargo or not isinstance(cargo, dict):
                                invalid_items.append(f"–ò–Ω–¥–µ–∫—Å {i}: {cargo}")
                            elif not cargo.get("id") or not cargo.get("cargo_number"):
                                invalid_items.append(f"–ò–Ω–¥–µ–∫—Å {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                        
                        if not invalid_items:
                            self.log_test(
                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                                True,
                                f"–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –±—ã–ª–æ {original_count} –≥—Ä—É–∑–æ–≤, —Å—Ç–∞–ª–æ {updated_count}, –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã, –Ω–µ—Ç null/undefined –∑–Ω–∞—á–µ–Ω–∏–π"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                                False,
                                f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ: {invalid_items}",
                                "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å React DOM –æ—à–∏–±–∫–∏"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                            False,
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –±—ã–ª–æ {original_count}, —Å—Ç–∞–ª–æ {updated_count}",
                            "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–∑–æ–≤"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                        False,
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ",
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                False,
                "",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è React –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ")
        print("=" * 100)
        print()
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_warehouse_operator_auth,
            self.test_get_available_cargo_for_placement,
            self.test_single_cargo_deletion,
            self.test_bulk_cargo_deletion,
            self.test_response_structure_validation
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            if test():
                passed_tests += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            import time
            time.sleep(1)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        if success_rate >= 80:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: Backend –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π React –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤!")
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ API –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç React DOM –æ—à–∏–±–∫–∏")
            print("‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ –∏ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: Backend –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π React –æ—à–∏–±–æ–∫")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API endpoints")
        
        print()
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("-" * 50)
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
            if result["error"]:
                print(f"   ‚ö†Ô∏è {result['error']}")
        
        return success_rate >= 80

if __name__ == "__main__":
    tester = TajlineCargoRemovalTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ React DOM –æ—à–∏–±–æ–∫!")
    else:
        print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫")