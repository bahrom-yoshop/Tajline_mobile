#!/usr/bin/env python3
"""
–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• individual_items –î–õ–Ø –ó–ê–Ø–í–ö–ò 250101
==========================================================

–¶–ï–õ–¨: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö `individual_items` –≤ –æ—Ç–≤–µ—Ç–µ API available-for-placement –¥–ª—è –∑–∞—è–≤–∫–∏ 250101

–î–ï–¢–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ó–∞–ø—Ä–æ—Å –∫ `/api/operator/cargo/available-for-placement`
3. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101
4. –î–ï–¢–ê–õ–¨–ù–û –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π cargo_item:
   - –ü–æ–ª—è `placed_count` –∏ `quantity` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item
   - –°—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–∞ `individual_items` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item
   - –ó–Ω–∞—á–µ–Ω–∏—è `is_placed` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ individual_item
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É `placed_count` –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º individual_items —Å `is_placed: true`

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: Frontend –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ 
`individual_items.filter(unit => unit.is_placed === true).length`, 
–ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤ `individual_items` –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ `is_placed`.

–ü–†–û–ë–õ–ï–ú–ê: Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `total_placed=2`, –Ω–æ frontend –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 1/4, 
—á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤ –¥–∞–Ω–Ω—ã—Ö `individual_items`.
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_APPLICATION = "250101"

class DetailedIndividualItemsAnalyzer:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_available_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ available-for-placement"""
        self.log("üìã –ó–∞–ø—Ä–æ—Å –∫ /api/operator/cargo/available-for-placement...")
        
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}", "ERROR")
            return None
    
    def find_application_250101(self, applications):
        """–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101 –≤ —Å–ø–∏—Å–∫–µ"""
        self.log(f"üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}...")
        
        for app in applications:
            if app.get("cargo_number") == TARGET_APPLICATION:
                self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞!")
                return app
        
        self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ", "ERROR")
        return None
    
    def analyze_application_overview(self, application):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏"""
        self.log("üìä –ê–ù–ê–õ–ò–ó –û–ë–©–ò–• –î–ê–ù–ù–´–• –ó–ê–Ø–í–ö–ò 250101:")
        self.log("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        cargo_number = application.get("cargo_number")
        total_placed = application.get("total_placed", 0)
        placement_progress = application.get("placement_progress", "N/A")
        overall_status = application.get("overall_placement_status", "N/A")
        
        self.log(f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
        self.log(f"üìä total_placed: {total_placed}")
        self.log(f"üìà placement_progress: {placement_progress}")
        self.log(f"üéØ overall_placement_status: {overall_status}")
        
        # –ê–Ω–∞–ª–∏–∑ cargo_items
        cargo_items = application.get("cargo_items", [])
        self.log(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cargo_items: {len(cargo_items)}")
        
        return {
            "cargo_number": cargo_number,
            "total_placed": total_placed,
            "placement_progress": placement_progress,
            "overall_status": overall_status,
            "cargo_items_count": len(cargo_items)
        }
    
    def analyze_cargo_item_detailed(self, cargo_item, item_index):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ cargo_item"""
        self.log(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO_ITEM #{item_index + 1}:")
        self.log("-" * 50)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è cargo_item
        cargo_name = cargo_item.get("cargo_name", "N/A")
        quantity = cargo_item.get("quantity", 0)
        placed_count = cargo_item.get("placed_count", 0)
        
        self.log(f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞: {cargo_name}")
        self.log(f"üî¢ quantity: {quantity}")
        self.log(f"‚úÖ placed_count: {placed_count}")
        
        # –ê–Ω–∞–ª–∏–∑ individual_items
        individual_items = cargo_item.get("individual_items", [])
        self.log(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_items: {len(individual_items)}")
        
        if not individual_items:
            self.log("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: individual_items –ø—É—Å—Ç–æ–π!", "WARNING")
            return {
                "cargo_name": cargo_name,
                "quantity": quantity,
                "placed_count": placed_count,
                "individual_items_count": 0,
                "placed_items_count": 0,
                "consistency_check": False,
                "issues": ["individual_items –ø—É—Å—Ç–æ–π"]
            }
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ individual_item
        placed_items_count = 0
        issues = []
        
        self.log("\nüìã –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ì–û INDIVIDUAL_ITEM:")
        for i, item in enumerate(individual_items):
            individual_number = item.get("individual_number", "N/A")
            is_placed = item.get("is_placed", False)
            placement_info = item.get("placement_info", "N/A")
            
            status_icon = "‚úÖ" if is_placed else "‚è≥"
            self.log(f"  {status_icon} {individual_number}: is_placed={is_placed}, placement_info='{placement_info}'")
            
            if is_placed:
                placed_items_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        consistency_check = (placed_count == placed_items_count)
        
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò:")
        self.log(f"  placed_count (–∏–∑ cargo_item): {placed_count}")
        self.log(f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö (is_placed=true): {placed_items_count}")
        self.log(f"  –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ –î–ê' if consistency_check else '‚ùå –ù–ï–¢'}")
        
        if not consistency_check:
            issues.append(f"placed_count ({placed_count}) != —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö ({placed_items_count})")
        
        return {
            "cargo_name": cargo_name,
            "quantity": quantity,
            "placed_count": placed_count,
            "individual_items_count": len(individual_items),
            "placed_items_count": placed_items_count,
            "consistency_check": consistency_check,
            "issues": issues,
            "individual_items_details": [
                {
                    "individual_number": item.get("individual_number"),
                    "is_placed": item.get("is_placed", False),
                    "placement_info": item.get("placement_info")
                }
                for item in individual_items
            ]
        }
    
    def analyze_frontend_calculation(self, application):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, –∫–∞–∫ frontend –±—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        self.log("\nüñ•Ô∏è –ê–ù–ê–õ–ò–ó –†–ê–°–ß–ï–¢–ê FRONTEND:")
        self.log("=" * 60)
        
        cargo_items = application.get("cargo_items", [])
        
        # –°–∏–º—É–ª—è—Ü–∏—è frontend —Ä–∞—Å—á–µ—Ç–∞
        total_individual_items = 0
        total_placed_frontend = 0
        
        for cargo_item in cargo_items:
            individual_items = cargo_item.get("individual_items", [])
            total_individual_items += len(individual_items)
            
            # Frontend –ª–æ–≥–∏–∫–∞: individual_items.filter(unit => unit.is_placed === true).length
            placed_in_this_item = sum(1 for item in individual_items if item.get("is_placed") == True)
            total_placed_frontend += placed_in_this_item
        
        self.log(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_items: {total_individual_items}")
        self.log(f"‚úÖ Frontend –ø–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {total_placed_frontend}")
        self.log(f"üìà Frontend –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_placed_frontend}/{total_individual_items}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å backend –¥–∞–Ω–Ω—ã–º–∏
        backend_total_placed = application.get("total_placed", 0)
        backend_progress = application.get("placement_progress", "N/A")
        
        self.log(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï BACKEND vs FRONTEND:")
        self.log(f"  Backend total_placed: {backend_total_placed}")
        self.log(f"  Frontend —Ä–∞—Å—á–µ—Ç: {total_placed_frontend}")
        self.log(f"  Backend progress: {backend_progress}")
        self.log(f"  Frontend progress: {total_placed_frontend}/{total_individual_items}")
        
        consistency = (backend_total_placed == total_placed_frontend)
        self.log(f"  –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ –î–ê' if consistency else '‚ùå –ù–ï–¢'}")
        
        return {
            "total_individual_items": total_individual_items,
            "frontend_placed_count": total_placed_frontend,
            "backend_placed_count": backend_total_placed,
            "frontend_progress": f"{total_placed_frontend}/{total_individual_items}",
            "backend_progress": backend_progress,
            "consistency": consistency
        }
    
    def generate_detailed_report(self, application, cargo_items_analysis, frontend_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ó–ê–Ø–í–ö–ê: {application.get('cargo_number')}")
        self.log(f"üìÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.log(f"\nüìä –û–ë–©–ò–ï –î–ê–ù–ù–´–ï:")
        self.log(f"  total_placed (backend): {application.get('total_placed')}")
        self.log(f"  placement_progress (backend): {application.get('placement_progress')}")
        self.log(f"  overall_placement_status: {application.get('overall_placement_status')}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ cargo_items
        self.log(f"\nüì¶ –ê–ù–ê–õ–ò–ó CARGO_ITEMS ({len(cargo_items_analysis)} —à—Ç.):")
        for i, analysis in enumerate(cargo_items_analysis):
            self.log(f"  Cargo Item #{i+1}: {analysis['cargo_name']}")
            self.log(f"    quantity: {analysis['quantity']}")
            self.log(f"    placed_count: {analysis['placed_count']}")
            self.log(f"    individual_items: {analysis['individual_items_count']}")
            self.log(f"    —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {analysis['placed_items_count']}")
            self.log(f"    –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if analysis['consistency_check'] else '‚ùå'}")
            
            if analysis['issues']:
                self.log(f"    ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(analysis['issues'])}")
        
        # Frontend –∞–Ω–∞–ª–∏–∑
        self.log(f"\nüñ•Ô∏è FRONTEND –ê–ù–ê–õ–ò–ó:")
        self.log(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_items: {frontend_analysis['total_individual_items']}")
        self.log(f"  Frontend –ø–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {frontend_analysis['frontend_placed_count']}")
        self.log(f"  Backend –ø–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö: {frontend_analysis['backend_placed_count']}")
        self.log(f"  Frontend –ø—Ä–æ–≥—Ä–µ—Å—Å: {frontend_analysis['frontend_progress']}")
        self.log(f"  Backend –ø—Ä–æ–≥—Ä–µ—Å—Å: {frontend_analysis['backend_progress']}")
        self.log(f"  –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if frontend_analysis['consistency'] else '‚ùå'}")
        
        # –í—ã–≤–æ–¥—ã
        self.log(f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        if frontend_analysis['consistency']:
            self.log("‚úÖ –î–ê–ù–ù–´–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–´: Backend –∏ Frontend –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        else:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É Backend –∏ Frontend –¥–∞–Ω–Ω—ã–º–∏")
            self.log(f"   Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {frontend_analysis['backend_placed_count']} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö")
            self.log(f"   Frontend –ø–æ–¥—Å—á–∏—Ç–∞–µ—Ç: {frontend_analysis['frontend_placed_count']} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö")
            self.log("   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –≤ cargo_items
        total_issues = sum(len(analysis['issues']) for analysis in cargo_items_analysis)
        if total_issues > 0:
            self.log(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û {total_issues} –ü–†–û–ë–õ–ï–ú –í CARGO_ITEMS:")
            for i, analysis in enumerate(cargo_items_analysis):
                if analysis['issues']:
                    self.log(f"   Cargo Item #{i+1} ({analysis['cargo_name']}): {', '.join(analysis['issues'])}")
        
        return {
            "application_number": application.get('cargo_number'),
            "analysis_timestamp": datetime.now().isoformat(),
            "backend_data": {
                "total_placed": application.get('total_placed'),
                "placement_progress": application.get('placement_progress'),
                "overall_status": application.get('overall_placement_status')
            },
            "cargo_items_analysis": cargo_items_analysis,
            "frontend_analysis": frontend_analysis,
            "critical_issues_found": not frontend_analysis['consistency'] or total_issues > 0,
            "total_issues": total_issues
        }
    
    def run_detailed_analysis(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê individual_items –î–õ–Ø –ó–ê–Ø–í–ö–ò 250101")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö available-for-placement
        applications = self.get_available_for_placement()
        if not applications:
            return False
        
        # 3. –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101
        application = self.find_application_250101(applications)
        if not application:
            return False
        
        # 4. –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
        overview = self.analyze_application_overview(application)
        
        # 5. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ cargo_item
        cargo_items = application.get("cargo_items", [])
        cargo_items_analysis = []
        
        for i, cargo_item in enumerate(cargo_items):
            analysis = self.analyze_cargo_item_detailed(cargo_item, i)
            cargo_items_analysis.append(analysis)
        
        # 6. –ê–Ω–∞–ª–∏–∑ frontend —Ä–∞—Å—á–µ—Ç–∞
        frontend_analysis = self.analyze_frontend_calculation(application)
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report = self.generate_detailed_report(application, cargo_items_analysis, frontend_analysis)
        
        # 8. –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
        self.log("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        if report['critical_issues_found']:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í –î–ê–ù–ù–´–•!")
            return False
        else:
            self.log("‚úÖ –î–ê–ù–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´, –ü–†–û–ë–õ–ï–ú –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û")
            return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = DetailedIndividualItemsAnalyzer()
    
    try:
        success = analyzer.run_detailed_analysis()
        
        if success:
            print("\n" + "="*80)
            print("‚úÖ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
            print("üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ individual_items –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print("üéØ –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö backend")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö individual_items")
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ backend –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
"""
–ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê API available-for-placement –¥–ª—è –∑–∞—è–≤–∫–∏ 250101
=============================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏ 250101

–ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ó–∞–ø—Ä–æ—Å –∫ `/api/operator/cargo/available-for-placement`
3. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101 –≤ –æ—Ç–≤–µ—Ç–µ
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è:
   - `total_placed` (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2)
   - `placement_progress` (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '2/4')
   - `overall_placement_status`

–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ 1/4 –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 2/4. 
–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
    
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/login", json=login_data, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            user_info = data.get("user", {})
            
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})")
            return token
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None

def test_available_for_placement_api(token):
    """–¢–µ—Å—Ç API available-for-placement –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏ 250101"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API available-for-placement...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(f"{API_BASE}/operator/cargo/available-for-placement", 
                              headers=headers, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            
            print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫")
            
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101
            target_cargo = None
            for item in items:
                cargo_number = item.get("cargo_number", "")
                if cargo_number == "250101":
                    target_cargo = item
                    break
            
            if target_cargo:
                print(f"\nüéØ –ó–ê–Ø–í–ö–ê 250101 –ù–ê–ô–î–ï–ù–ê!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                total_placed = target_cargo.get("total_placed")
                placement_progress = target_cargo.get("placement_progress")
                overall_placement_status = target_cargo.get("overall_placement_status")
                
                print(f"üìä –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò 250101:")
                print(f"   ‚Ä¢ total_placed: {total_placed}")
                print(f"   ‚Ä¢ placement_progress: '{placement_progress}'")
                print(f"   ‚Ä¢ overall_placement_status: '{overall_placement_status}'")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo_items –µ—Å–ª–∏ –µ—Å—Ç—å
                cargo_items = target_cargo.get("cargo_items", [])
                if cargo_items:
                    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CARGO ITEMS ({len(cargo_items)} —à—Ç.):")
                    for i, item in enumerate(cargo_items, 1):
                        cargo_name = item.get("cargo_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        placed_count = item.get("placed_count", 0)
                        total_count = item.get("total_count", 0)
                        individual_items = item.get("individual_items", [])
                        
                        print(f"   Cargo Item {i}: '{cargo_name}' - {placed_count}/{total_count} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                        
                        # –ê–Ω–∞–ª–∏–∑ individual_items
                        if individual_items:
                            for j, ind_item in enumerate(individual_items, 1):
                                individual_number = ind_item.get("individual_number", "")
                                is_placed = ind_item.get("is_placed", False)
                                status = "‚úÖ —Ä–∞–∑–º–µ—â–µ–Ω" if is_placed else "‚è≥ –æ–∂–∏–¥–∞–µ—Ç"
                                print(f"     - {individual_number}: {status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –û–ñ–ò–î–ê–ù–ò–Ø–ú:")
                if total_placed == 2:
                    print(f"‚úÖ total_placed = 2 (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—é)")
                else:
                    print(f"‚ùå total_placed = {total_placed} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 2)")
                
                if placement_progress == "2/4":
                    print(f"‚úÖ placement_progress = '2/4' (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—é)")
                else:
                    print(f"‚ùå placement_progress = '{placement_progress}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '2/4')")
                
                return True
            else:
                print(f"‚ùå –ó–ê–Ø–í–ö–ê 250101 –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"\nüìã –î–û–°–¢–£–ü–ù–´–ï –ó–ê–Ø–í–ö–ò ({len(items)} —à—Ç.):")
                for item in items[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    cargo_number = item.get("cargo_number", "")
                    total_placed = item.get("total_placed", 0)
                    placement_progress = item.get("placement_progress", "")
                    print(f"   ‚Ä¢ {cargo_number}: {placement_progress}")
                
                return False
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê API available-for-placement –¥–ª—è –∑–∞—è–≤–∫–∏ 250101")
    print("=" * 70)
    
    # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    token = test_warehouse_operator_auth()
    if not token:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        sys.exit(1)
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    success = test_available_for_placement_api(token)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    if success:
        print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ Backend API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏ 250101")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏—è–º")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
        print("üîç –ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("=" * 70)

if __name__ == "__main__":
    main()