#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞ (—Ü–µ–Ω–∞ –≥—Ä—É–∑–∞, —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞) –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ backend 
–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.

–ó–ê–î–ê–ß–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞
2. –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–∞—á–∏ –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º –Ω–∞ —Å–∫–ª–∞–¥
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è:
   - pickup_date (–¥–∞—Ç–∞ –∑–∞–±–æ—Ä–∞)
   - pickup_time_from, pickup_time_to (–≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞)
   - payment_method (—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –æ—Ç –∫—É—Ä—å–µ—Ä–∞)
   - total_value –∏–ª–∏ declared_value (—Ü–µ–Ω–∞ –≥—Ä—É–∑–∞ –æ—Ç –∫—É—Ä—å–µ—Ä–∞)
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoint GET /api/operator/pickup-requests/{request_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
5. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ modal_data:
   - sender_data.pickup_date
   - sender_data.pickup_time_from, pickup_time_to
   - payment_info.payment_method
   - cargo_info.total_value –∏–ª–∏ cargo_info.declared_value

–í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
- –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—Ä–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∫—É—Ä—å–µ—Ä (–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä)
- –¶–µ–Ω–∞ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ –ø–æ–ª—è total_value –∏–ª–∏ declared_value
- –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –∫—É—Ä—å–µ—Ä
- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import requests
import json
import sys
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://03054c56-0cb9-443b-a828-f3e224602a32.preview.emergentagent.com/api"

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

OPERATOR_CREDENTIALS = {
    "phone": "+79777888999", 
    "password": "warehouse123"
}

class CourierModalDataTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_user = None
        self.operator_user = None
        self.test_results = []
        self.test_pickup_request_id = None
        self.test_notification_id = None
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details
        })
        print(f"{status} {test_name}: {details}")
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data["access_token"]
                self.admin_user = data["user"]
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.admin_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.admin_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data["access_token"]
                self.operator_user = data["user"]
                
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.operator_user['full_name']}' (–Ω–æ–º–µ—Ä: {self.operator_user.get('user_number', 'N/A')}, —Ä–æ–ª—å: {self.operator_user['role']})"
                )
                return True
            else:
                self.log_test(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def create_test_pickup_request(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            
            # –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç –∫—É—Ä—å–µ—Ä–∞
            pickup_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ö—É—Ä—å–µ—Ä—Å–∫–∏—Ö –î–∞–Ω–Ω—ã—Ö",
                "sender_phone": "+79111222333",
                "pickup_address": "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 123, –∫–≤. 45",
                "pickup_date": "2025-01-20",
                "pickup_time_from": "10:00",
                "pickup_time_to": "12:00",
                "destination": "–î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥. 100",
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞",
                "weight": 5.5,
                "total_value": 2500.0,  # –¶–µ–Ω–∞ –≥—Ä—É–∑–∞ –æ—Ç –∫—É—Ä—å–µ—Ä–∞
                "declared_value": 2500.0,  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "payment_method": "cash",  # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—å–µ—Ä–æ–º
                "courier_fee": 500.0,
                "delivery_method": "pickup",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ"
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/admin/courier/pickup-request",
                json=pickup_data,
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                self.test_pickup_request_id = data.get("request_id")
                
                self.log_test(
                    "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê",
                    True,
                    f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {self.test_pickup_request_id}, –Ω–æ–º–µ—Ä: {data.get('request_number')}"
                )
                return True
            else:
                self.log_test(
                    "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò –ù–ê –ó–ê–ë–û–† –ì–†–£–ó–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_pickup_request_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å endpoint GET /api/operator/pickup-requests/{request_id}"""
        try:
            if not self.test_pickup_request_id:
                self.log_test(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT PICKUP-REQUESTS",
                    False,
                    "–ù–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É modal_data
                required_sections = ["sender_data", "payment_info", "cargo_info"]
                missing_sections = []
                present_sections = []
                
                for section in required_sections:
                    if section in data:
                        present_sections.append(section)
                    else:
                        missing_sections.append(section)
                
                if not missing_sections:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
                    sender_data = data.get("sender_data", {})
                    payment_info = data.get("payment_info", {})
                    cargo_info = data.get("cargo_info", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º sender_data
                    sender_fields = ["pickup_date", "pickup_time_from", "pickup_time_to"]
                    sender_present = [f for f in sender_fields if f in sender_data and sender_data[f] is not None]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º payment_info
                    payment_fields = ["payment_method"]
                    payment_present = [f for f in payment_fields if f in payment_info and payment_info[f] is not None]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_info
                    cargo_fields = ["total_value", "declared_value"]
                    cargo_present = [f for f in cargo_fields if f in cargo_info and cargo_info[f] is not None]
                    
                    details = f"sender_data: {sender_present}, payment_info: {payment_present}, cargo_info: {cargo_present}"
                    
                    if sender_present and payment_present and cargo_present:
                        self.log_test(
                            "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT PICKUP-REQUESTS",
                            True,
                            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ modal_data –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. {details}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT PICKUP-REQUESTS",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. {details}"
                        )
                        return False
                else:
                    self.log_test(
                        "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT PICKUP-REQUESTS",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {', '.join(missing_sections)}. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(present_sections)}"
                    )
                    return False
            else:
                self.log_test(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT PICKUP-REQUESTS",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT PICKUP-REQUESTS", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def test_courier_data_accuracy(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ"""
        try:
            if not self.test_pickup_request_id:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ö–£–†–¨–ï–†–ê",
                    False,
                    "–ù–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            response = self.session.get(
                f"{BACKEND_URL}/operator/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # –û–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞
                expected_data = {
                    "pickup_date": "2025-01-20",
                    "pickup_time_from": "10:00",
                    "pickup_time_to": "12:00",
                    "payment_method": "cash",
                    "total_value": 2500.0,
                    "declared_value": 2500.0
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
                sender_data = data.get("sender_data", {})
                payment_info = data.get("payment_info", {})
                cargo_info = data.get("cargo_info", {})
                
                checks = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞
                if sender_data.get("pickup_date") == expected_data["pickup_date"]:
                    checks.append("‚úÖ pickup_date –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    checks.append(f"‚ùå pickup_date: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_data['pickup_date']}, –ø–æ–ª—É—á–µ–Ω–æ {sender_data.get('pickup_date')}")
                
                if sender_data.get("pickup_time_from") == expected_data["pickup_time_from"]:
                    checks.append("‚úÖ pickup_time_from –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    checks.append(f"‚ùå pickup_time_from: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_data['pickup_time_from']}, –ø–æ–ª—É—á–µ–Ω–æ {sender_data.get('pickup_time_from')}")
                
                if sender_data.get("pickup_time_to") == expected_data["pickup_time_to"]:
                    checks.append("‚úÖ pickup_time_to –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    checks.append(f"‚ùå pickup_time_to: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_data['pickup_time_to']}, –ø–æ–ª—É—á–µ–Ω–æ {sender_data.get('pickup_time_to')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                if payment_info.get("payment_method") == expected_data["payment_method"]:
                    checks.append("‚úÖ payment_method –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                else:
                    checks.append(f"‚ùå payment_method: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_data['payment_method']}, –ø–æ–ª—É—á–µ–Ω–æ {payment_info.get('payment_method')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≥—Ä—É–∑–∞
                if cargo_info.get("total_value") == expected_data["total_value"]:
                    checks.append("‚úÖ total_value –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    checks.append(f"‚ùå total_value: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_data['total_value']}, –ø–æ–ª—É—á–µ–Ω–æ {cargo_info.get('total_value')}")
                
                if cargo_info.get("declared_value") == expected_data["declared_value"]:
                    checks.append("‚úÖ declared_value –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    checks.append(f"‚ùå declared_value: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_data['declared_value']}, –ø–æ–ª—É—á–µ–Ω–æ {cargo_info.get('declared_value')}")
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                successful_checks = len([c for c in checks if c.startswith("‚úÖ")])
                total_checks = len(checks)
                
                if successful_checks == total_checks:
                    self.log_test(
                        "–ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ö–£–†–¨–ï–†–ê",
                        True,
                        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ({successful_checks}/{total_checks}): {'; '.join(checks)}"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ö–£–†–¨–ï–†–ê",
                        False,
                        f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ({successful_checks}/{total_checks}): {'; '.join(checks)}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ö–£–†–¨–ï–†–ê",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–†–û–í–ï–†–ö–ê –¢–û–ß–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ö–£–†–¨–ï–†–ê", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            if not self.test_pickup_request_id:
                return True
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            
            response = self.session.delete(
                f"{BACKEND_URL}/admin/pickup-requests/{self.test_pickup_request_id}",
                headers=headers
            )
            
            if response.status_code == 200:
                self.log_test(
                    "–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•",
                    True,
                    f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {self.test_pickup_request_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
                )
                return True
            else:
                self.log_test(
                    "–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
        print("=" * 100)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not self.authenticate_admin():
            return False
        
        if not self.authenticate_operator():
            return False
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = [
            self.create_test_pickup_request,
            self.test_pickup_request_endpoint,
            self.test_courier_data_accuracy
        ]
        
        success_count = 0
        for test in tests:
            if test():
                success_count += 1
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.cleanup_test_data()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r["success"]])
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")
        
        print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['details']}")
        
        return successful_tests == total_tests

if __name__ == "__main__":
    tester = CourierModalDataTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)