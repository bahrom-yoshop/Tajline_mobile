#!/usr/bin/env python3
"""
üñ®Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• API: –ü–µ—á–∞—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è Individual Units –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ backend API endpoints –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤ Individual Units –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ì—Ä—É–∑—ã" ‚Üí "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞".

–ù–û–í–´–ï API ENDPOINTS:
1. POST /api/operator/qr/generate-individual - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞
2. POST /api/operator/qr/generate-batch - –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –µ–¥–∏–Ω–∏—Ü
3. GET /api/operator/qr/print-layout - –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –º–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–æ–≤

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö QR API endpoints
- –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç TAJLINE|INDIVIDUAL|{individual_number}|{timestamp}
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π QR –∫–æ–¥–æ–≤
- –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–µ –æ–ø—Ü–∏–π –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏
"""

import requests
import json
import base64
import re
from datetime import datetime
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = "https://logistics-dash-6.preview.emergentagent.com/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class QRCodeAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_cargo_id = None
        self.test_individual_numbers = []
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(
                    f"{BACKEND_URL}/auth/me",
                    headers={"Authorization": f"Bearer {self.auth_token}"}
                )
                
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    def create_test_cargo_with_individual_units(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å individual units –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤"""
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ —Å individual units...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–∑ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
            cargo_data = {
                "sender_full_name": "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á –°–º–∏—Ä–Ω–æ–≤",
                "sender_phone": "+79161234567",
                "recipient_full_name": "–§–∞—Ä—Ö–æ–¥ –†–∞—Ö–∏–º–æ–≤–∏—á –ù–∞–∑–∞—Ä–æ–≤",
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 125, –∫–≤. 45",
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ QR –∫–æ–¥–æ–≤ Individual Units",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,
                        "weight": 5.5,
                        "price_per_kg": 150.0,
                        "total_amount": 825.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG",
                        "quantity": 3,
                        "weight": 8.2,
                        "price_per_kg": 120.0,
                        "total_amount": 984.0
                    }
                ]
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                self.test_cargo_id = result.get("cargo_id")
                cargo_number = result.get("cargo_number")
                
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {cargo_number} (ID: {self.test_cargo_id})")
                
                # –ü–æ–ª—É—á–∞–µ–º individual numbers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                self.get_individual_numbers_from_cargo()
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–∑–∞: {str(e)}")
            return False
    
    def get_individual_numbers_from_existing_cargo(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ individual numbers –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–∑–æ–≤"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ individual numbers –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–∑–æ–≤...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∑–Ω–∞–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞—é—Ç
        self.test_individual_numbers = [
            '250999/01/01',
            '250999/01/02', 
            '250999/02/01',
            '250999/02/02',
            '250999/02/03'
        ]
        self.test_cargo_id = 'dba8ddad-c7bb-45e3-afda-6777933383bf'
        
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ individual numbers: {self.test_individual_numbers}")
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: 250999 (ID: {self.test_cargo_id})")
        return True
    
    def test_generate_individual_qr(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã"""
        print("\nüéØ –¢–ï–°–¢ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã")
        
        if not self.test_individual_numbers:
            print("‚ùå –ù–µ—Ç individual numbers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_individual_number = self.test_individual_numbers[0]
        print(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –¥–ª—è: {test_individual_number}")
        
        try:
            request_data = {
                "individual_number": test_individual_number
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["success", "qr_info", "message"]
                for field in required_fields:
                    if field not in result:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                        return False
                
                qr_info = result.get("qr_info", {})
                required_qr_fields = ["individual_number", "cargo_number", "cargo_name", "sender_name", "recipient_name", "qr_data", "qr_base64"]
                
                for field in required_qr_fields:
                    if field not in qr_info:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ qr_info: {field}")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö
                qr_data = qr_info.get("qr_data", "")
                expected_pattern = r"TAJLINE\|INDIVIDUAL\|.+\|\d+"
                
                if not re.match(expected_pattern, qr_data):
                    print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö: {qr_data}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                qr_base64 = qr_info.get("qr_base64", "")
                if not qr_base64:
                    print("‚ùå QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    return False
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å base64
                    base64.b64decode(qr_base64)
                    print("‚úÖ QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ")
                except:
                    print("‚ùå QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ")
                    return False
                
                print(f"‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {test_individual_number}")
                print(f"   üìã QR –¥–∞–Ω–Ω—ã–µ: {qr_data}")
                print(f"   üì¶ –ì—Ä—É–∑: {qr_info.get('cargo_name')} (‚Ññ{qr_info.get('cargo_number')})")
                print(f"   üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {qr_info.get('sender_name')}")
                print(f"   üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {qr_info.get('recipient_name')}")
                
                return True
            else:
                print(f"‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {str(e)}")
            return False
    
    def test_generate_batch_qr(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤"""
        print("\nüéØ –¢–ï–°–¢ 2: –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤")
        
        if len(self.test_individual_numbers) < 2:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ individual numbers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_numbers = self.test_individual_numbers[:3]
        print(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è: {test_numbers}")
        
        try:
            request_data = {
                "individual_numbers": test_numbers
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-batch",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["success", "qr_batch", "failed_items", "total_generated", "total_failed"]
                for field in required_fields:
                    if field not in result:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                        return False
                
                qr_batch = result.get("qr_batch", [])
                failed_items = result.get("failed_items", [])
                total_generated = result.get("total_generated", 0)
                total_failed = result.get("total_failed", 0)
                
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_generated}")
                print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_failed}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QR –∫–æ–¥
                for qr_item in qr_batch:
                    required_qr_fields = ["individual_number", "cargo_number", "cargo_name", "qr_data", "qr_base64"]
                    
                    for field in required_qr_fields:
                        if field not in qr_item:
                            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ QR —ç–ª–µ–º–µ–Ω—Ç–µ")
                            return False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö
                    qr_data = qr_item.get("qr_data", "")
                    expected_pattern = r"TAJLINE\|INDIVIDUAL\|.+\|\d+"
                    
                    if not re.match(expected_pattern, qr_data):
                        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –¥–∞–Ω–Ω—ã—Ö: {qr_data}")
                        return False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    qr_base64 = qr_item.get("qr_base64", "")
                    if not qr_base64:
                        print(f"‚ùå QR base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è {qr_item.get('individual_number')}")
                        return False
                
                print(f"‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   üìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(qr_batch)} QR –∫–æ–¥–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤
                for i, qr_item in enumerate(qr_batch[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    print(f"   üñ®Ô∏è QR #{i+1}: {qr_item.get('individual_number')} - {qr_item.get('cargo_name')}")
                
                return True
            else:
                print(f"‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {str(e)}")
            return False
    
    def test_print_layout_options(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏"""
        print("\nüéØ –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏")
        
        try:
            response = self.session.get(
                f"{BACKEND_URL}/operator/qr/print-layout",
                headers={"Authorization": f"Bearer {self.auth_token}"}
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["success", "layout_options", "default_layout"]
                for field in required_fields:
                    if field not in result:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                        return False
                
                layout_options = result.get("layout_options", {})
                expected_layouts = ["single", "grid_2x2", "grid_3x3", "compact"]
                
                for layout in expected_layouts:
                    if layout not in layout_options:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞–∫–µ—Ç: {layout}")
                        return False
                    
                    layout_info = layout_options[layout]
                    required_layout_fields = ["name", "description", "qr_size", "per_page"]
                    
                    for field in required_layout_fields:
                        if field not in layout_info:
                            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ –º–∞–∫–µ—Ç–µ {layout}")
                            return False
                
                print(f"‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–∫–µ—Ç—ã:")
                
                for layout_key, layout_info in layout_options.items():
                    print(f"   üñ®Ô∏è {layout_key}: {layout_info.get('name')} ({layout_info.get('per_page')} QR/—Å—Ç—Ä–∞–Ω–∏—Ü–∞)")
                
                default_layout = result.get("default_layout")
                print(f"   üéØ –ú–∞–∫–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_layout}")
                
                return True
            else:
                print(f"‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {str(e)}")
            return False
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print("\nüéØ –¢–ï–°–¢ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        tests_passed = 0
        total_tests = 4
        
        # –¢–µ—Å—Ç 4.1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π individual_number
        print("üîç –¢–µ—Å—Ç 4.1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π individual_number")
        try:
            request_data = {"individual_number": "NONEXISTENT/99/99"}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 404:
                print("‚úÖ –¢–µ—Å—Ç 4.1 –ø—Ä–æ–π–¥–µ–Ω: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞")
                tests_passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç 4.1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –û–∂–∏–¥–∞–ª—Å—è 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 4.1 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {str(e)}")
        
        # –¢–µ—Å—Ç 4.2: –ü—É—Å—Ç–æ–π individual_number
        print("üîç –¢–µ—Å—Ç 4.2: –ü—É—Å—Ç–æ–π individual_number")
        try:
            request_data = {"individual_number": ""}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 400:
                print("‚úÖ –¢–µ—Å—Ç 4.2 –ø—Ä–æ–π–¥–µ–Ω: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
                tests_passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç 4.2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 4.2 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {str(e)}")
        
        # –¢–µ—Å—Ç 4.3: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print("üîç –¢–µ—Å—Ç 4.3: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        try:
            request_data = {"individual_numbers": []}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-batch",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 400:
                print("‚úÖ –¢–µ—Å—Ç 4.3 –ø—Ä–æ–π–¥–µ–Ω: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
                tests_passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç 4.3 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –û–∂–∏–¥–∞–ª—Å—è 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 4.3 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {str(e)}")
        
        # –¢–µ—Å—Ç 4.4: –°–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –Ω–æ–º–µ—Ä–∞)
        print("üîç –¢–µ—Å—Ç 4.4: –°–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤")
        try:
            mixed_numbers = [
                self.test_individual_numbers[0] if self.test_individual_numbers else "VALID/01/01",
                "INVALID/99/99",
                "NONEXISTENT/88/88"
            ]
            
            request_data = {"individual_numbers": mixed_numbers}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-batch",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                qr_batch = result.get("qr_batch", [])
                failed_items = result.get("failed_items", [])
                
                if len(qr_batch) > 0 and len(failed_items) > 0:
                    print(f"‚úÖ –¢–µ—Å—Ç 4.4 –ø—Ä–æ–π–¥–µ–Ω: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (—É—Å–ø–µ—à–Ω–æ: {len(qr_batch)}, –æ—à–∏–±–æ–∫: {len(failed_items)})")
                    tests_passed += 1
                else:
                    print(f"‚ùå –¢–µ—Å—Ç 4.4 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            else:
                print(f"‚ùå –¢–µ—Å—Ç 4.4 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç 4.4 –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {str(e)}")
        
        print(f"üìä –¢–ï–°–¢ 4 –†–ï–ó–£–õ–¨–¢–ê–¢: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return tests_passed == total_tests
    
    def test_qr_code_quality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ QR –∫–æ–¥–æ–≤"""
        print("\nüéØ –¢–ï–°–¢ 5: –ö–∞—á–µ—Å—Ç–≤–æ QR –∫–æ–¥–æ–≤")
        
        if not self.test_individual_numbers:
            print("‚ùå –ù–µ—Ç individual numbers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_individual_number = self.test_individual_numbers[0]
        
        try:
            request_data = {"individual_number": test_individual_number}
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/qr/generate-individual",
                json=request_data,
                headers={
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                qr_info = result.get("qr_info", {})
                qr_data = qr_info.get("qr_data", "")
                qr_base64 = qr_info.get("qr_base64", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç TAJLINE
                if not qr_data.startswith("TAJLINE|INDIVIDUAL|"):
                    print(f"‚ùå QR –∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É TAJLINE: {qr_data}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ timestamp
                parts = qr_data.split("|")
                if len(parts) != 4:
                    print(f"‚ùå QR –∫–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 4 —á–∞—Å—Ç–∏: {qr_data}")
                    return False
                
                try:
                    timestamp = int(parts[3])
                    current_time = int(time.time())
                    
                    # Timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
                    if abs(current_time - timestamp) > 60:
                        print(f"‚ùå Timestamp QR –∫–æ–¥–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π: {timestamp}")
                        return False
                except ValueError:
                    print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π timestamp –≤ QR –∫–æ–¥–µ: {parts[3]}")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    decoded_image = base64.b64decode(qr_base64)
                    image_size = len(decoded_image)
                    
                    # QR –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–±–æ–ª—å—à–µ 1KB, –º–µ–Ω—å—à–µ 100KB)
                    if image_size < 1000:
                        print(f"‚ùå QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: {image_size} –±–∞–π—Ç")
                        return False
                    
                    if image_size > 100000:
                        print(f"‚ùå QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {image_size} –±–∞–π—Ç")
                        return False
                    
                    print(f"‚úÖ –¢–ï–°–¢ 5 –ü–†–û–ô–î–ï–ù: QR –∫–æ–¥ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π")
                    print(f"   üìã –§–æ—Ä–º–∞—Ç: {qr_data}")
                    print(f"   üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_size} –±–∞–π—Ç")
                    print(f"   ‚è∞ Timestamp: {timestamp} ({datetime.fromtimestamp(timestamp)})")
                    
                    return True
                    
                except Exception as decode_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {str(decode_error)}")
                    return False
            else:
                print(f"‚ùå –¢–ï–°–¢ 5 –ù–ï –ü–†–û–ô–î–ï–ù: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 5 –ù–ï –ü–†–û–ô–î–ï–ù: {str(e)}")
            return False
    
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üñ®Ô∏è –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–´–• API: –ü–µ—á–∞—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è Individual Units")
        print("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö)
        if not self.get_individual_numbers_from_existing_cargo():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        test_results.append(("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã", self.test_generate_individual_qr()))
        test_results.append(("–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤", self.test_generate_batch_qr()))
        test_results.append(("–û–ø—Ü–∏–∏ –º–∞–∫–µ—Ç–æ–≤ –ø–µ—á–∞—Ç–∏", self.test_print_layout_options()))
        test_results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", self.test_error_handling()))
        test_results.append(("–ö–∞—á–µ—Å—Ç–≤–æ QR –∫–æ–¥–æ–≤", self.test_qr_code_quality()))
        
        # –û—á–∏—Å—Ç–∫–∞
        self.cleanup_test_data()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{status}: {test_name}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        elif success_rate >= 80:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –ú–Ω–æ–≥–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        
        return success_rate == 100

if __name__ == "__main__":
    tester = QRCodeAPITester()
    success = tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        exit(0)
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        exit(1)
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• API: –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ —Å–æ —Å–∫–∞–Ω–µ—Ä–æ–º –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ backend API endpoints –¥–ª—è –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ 
—Å QR —Å–∫–∞–Ω–µ—Ä–æ–º, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞.

–ù–û–í–´–ï API ENDPOINTS:
1. POST /api/operator/placement/verify-cargo - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –ø–æ QR –∫–æ–¥—É
2. POST /api/operator/placement/verify-cell - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —è—á–µ–π–∫–∏ –ø–æ QR –∫–æ–¥—É  
3. POST /api/operator/placement/place-cargo - –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫—É —Å–æ —Å–∫–∞–Ω–µ—Ä–æ–º
4. GET /api/operator/placement/session-history - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞ —Å–µ—Å—Å–∏—é
5. DELETE /api/operator/placement/undo-last - –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
"""

import requests
import json
import uuid
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://logistics-dash-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.test_cargo_id = None
        self.test_cargo_number = None
        self.session_id = str(uuid.uuid4())
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def get_operator_warehouse(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            self.log("üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            response = self.session.get(f"{API_BASE}/operator/warehouses", timeout=30)
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    self.log(f"‚úÖ –°–∫–ª–∞–¥ –ø–æ–ª—É—á–µ–Ω: {warehouse.get('name')} (ID: {self.warehouse_id})")
                    return True
                else:
                    self.log("‚ùå –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {str(e)}", "ERROR")
            return False
    
    def create_test_cargo(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            self.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞...")
            
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79991234567",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 
                "recipient_phone": "+79997654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 123",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                        "quantity": 2,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    },
                    {
                        "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG",
                        "quantity": 3,
                        "weight": 8.0,
                        "price_per_kg": 80.0,
                        "total_amount": 640.0
                    }
                ],
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash_on_delivery",
                "delivery_method": "pickup"
            }
            
            response = self.session.post(
                f"{API_BASE}/operator/cargo/accept",
                json=cargo_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                self.test_cargo_id = result.get("cargo_id")
                self.test_cargo_number = result.get("cargo_number")
                self.log(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å–æ–∑–¥–∞–Ω: {self.test_cargo_number} (ID: {self.test_cargo_id})")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–∑–∞: {str(e)}", "ERROR")
            return False
    
    def test_verify_cargo_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/operator/placement/verify-cargo"""
        try:
            self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ verify-cargo endpoint...")
            
            test_cases = [
                {
                    "name": "–ü—Ä–æ—Å—Ç–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞",
                    "qr_code": self.test_cargo_number,
                    "should_succeed": True
                },
                {
                    "name": "–§–æ—Ä–º–∞—Ç individual_number",
                    "qr_code": f"{self.test_cargo_number}/01/01",
                    "should_succeed": True
                },
                {
                    "name": "–§–æ—Ä–º–∞—Ç TAJLINE",
                    "qr_code": f"TAJLINE|UNIT|{self.test_cargo_id}|{datetime.now().isoformat()}",
                    "should_succeed": True
                },
                {
                    "name": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä—É–∑",
                    "qr_code": "999999999",
                    "should_succeed": False
                },
                {
                    "name": "–ü—É—Å—Ç–æ–π QR –∫–æ–¥",
                    "qr_code": "",
                    "should_succeed": False
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                self.log(f"  üìã –¢–µ—Å—Ç: {test_case['name']}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cargo",
                    json={"qr_code": test_case["qr_code"]},
                    timeout=30
                )
                
                if test_case["should_succeed"]:
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            cargo_info = data.get("cargo_info", {})
                            self.log(f"    ‚úÖ –ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω: {cargo_info.get('cargo_number')}")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: {data.get('error')}")
                    else:
                        self.log(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                else:
                    if response.status_code == 200:
                        data = response.json()
                        if not data.get("success"):
                            self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {data.get('error')}")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö")
                    else:
                        self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        success_count += 1
            
            self.log(f"üìä verify-cargo: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            return success_count == total_tests
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ verify-cargo: {str(e)}", "ERROR")
            return False
    
    def test_verify_cell_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/operator/placement/verify-cell"""
        try:
            self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ verify-cell endpoint...")
            
            test_cases = [
                {
                    "name": "–§–æ—Ä–º–∞—Ç –ë1-–ü1-–Ø1",
                    "qr_code": "–ë1-–ü1-–Ø1",
                    "should_succeed": False,  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è layout
                    "expected_error": "warehouse_id"
                },
                {
                    "name": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                    "qr_code": "invalid_format",
                    "should_succeed": False
                },
                {
                    "name": "–ü—É—Å—Ç–æ–π QR –∫–æ–¥",
                    "qr_code": "",
                    "should_succeed": False
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                self.log(f"  üìã –¢–µ—Å—Ç: {test_case['name']}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/verify-cell",
                    json={"qr_code": test_case["qr_code"]},
                    timeout=30
                )
                
                if test_case["should_succeed"]:
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            cell_info = data.get("cell_info", {})
                            self.log(f"    ‚úÖ –Ø—á–µ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {cell_info.get('cell_address')} (–≥—Ä—É–∑–æ–≤: {cell_info.get('current_cargo_count', 0)})")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –Ø—á–µ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data.get('error')}")
                    else:
                        self.log(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                else:
                    # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
                    if response.status_code != 200:
                        self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        success_count += 1
                    elif response.status_code == 200:
                        data = response.json()
                        if not data.get("success"):
                            self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {data.get('error')}")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö")
                    else:
                        self.log(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            self.log(f"üìä verify-cell: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            return success_count == total_tests
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ verify-cell: {str(e)}", "ERROR")
            return False
    
    def test_place_cargo_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/operator/placement/place-cargo"""
        try:
            self.log("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ place-cargo endpoint...")
            
            test_cases = [
                {
                    "name": "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫—É –ë1-–ü1-–Ø1",
                    "cargo_qr": self.test_cargo_number,
                    "cell_qr": "–ë1-–ü1-–Ø1",
                    "should_succeed": False  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —è—á–µ–π–∫–æ–π
                },
                {
                    "name": "–†–∞–∑–º–µ—â–µ–Ω–∏–µ individual unit",
                    "cargo_qr": f"{self.test_cargo_number}/01/02",
                    "cell_qr": "–ë1-–ü1-–Ø2",
                    "should_succeed": False  # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —è—á–µ–π–∫–æ–π
                },
                {
                    "name": "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä—É–∑",
                    "cargo_qr": "999999999",
                    "cell_qr": "–ë1-–ü1-–Ø3",
                    "should_succeed": False
                },
                {
                    "name": "–ü—É—Å—Ç—ã–µ QR –∫–æ–¥—ã",
                    "cargo_qr": "",
                    "cell_qr": "",
                    "should_succeed": False
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                self.log(f"  üìã –¢–µ—Å—Ç: {test_case['name']}")
                
                response = self.session.post(
                    f"{API_BASE}/operator/placement/place-cargo",
                    json={
                        "cargo_qr_code": test_case["cargo_qr"],
                        "cell_qr_code": test_case["cell_qr"],
                        "session_id": self.session_id
                    },
                    timeout=30
                )
                
                if test_case["should_succeed"]:
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            placement_info = data.get("placement_info", {})
                            self.log(f"    ‚úÖ –ì—Ä—É–∑ —Ä–∞–∑–º–µ—â–µ–Ω: {placement_info.get('cargo_number')} ‚Üí {placement_info.get('cell_address')}")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {data.get('error')}")
                    else:
                        self.log(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                else:
                    # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
                    if response.status_code != 200:
                        self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        success_count += 1
                    elif response.status_code == 200:
                        data = response.json()
                        if not data.get("success"):
                            self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {data.get('error')}")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö")
                    else:
                        self.log(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            self.log(f"üìä place-cargo: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            return success_count == total_tests
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ place-cargo: {str(e)}", "ERROR")
            return False
    
    def test_session_history_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/operator/placement/session-history"""
        try:
            self.log("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ session-history endpoint...")
            
            test_cases = [
                {
                    "name": "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏",
                    "params": {"session_id": self.session_id},
                    "should_succeed": True
                },
                {
                    "name": "–ò—Å—Ç–æ—Ä–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏",
                    "params": {},
                    "should_succeed": True
                },
                {
                    "name": "–ò—Å—Ç–æ—Ä–∏—è —Å –ª–∏–º–∏—Ç–æ–º",
                    "params": {"limit": 10},
                    "should_succeed": True
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                self.log(f"  üìã –¢–µ—Å—Ç: {test_case['name']}")
                
                response = self.session.get(
                    f"{API_BASE}/operator/placement/session-history",
                    params=test_case["params"],
                    timeout=30
                )
                
                if test_case["should_succeed"]:
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            history = data.get("history", [])
                            sessions = data.get("sessions", [])
                            statistics = data.get("statistics", {})
                            
                            self.log(f"    ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(history)} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π, {len(sessions)} —Å–µ—Å—Å–∏–π")
                            self.log(f"    üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {statistics.get('total_placements')} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {statistics.get('operator_name')}")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {data.get('error')}")
                    else:
                        self.log(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                else:
                    self.log(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç")
            
            self.log(f"üìä session-history: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            return success_count == total_tests
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ session-history: {str(e)}", "ERROR")
            return False
    
    def test_undo_last_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/operator/placement/undo-last"""
        try:
            self.log("‚Ü©Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ undo-last endpoint...")
            
            test_cases = [
                {
                    "name": "–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏",
                    "session_id": self.session_id,
                    "should_succeed": True
                },
                {
                    "name": "–û—Ç–º–µ–Ω–∞ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏",
                    "session_id": "nonexistent_session",
                    "should_succeed": False
                }
            ]
            
            success_count = 0
            total_tests = len(test_cases)
            
            for test_case in test_cases:
                self.log(f"  üìã –¢–µ—Å—Ç: {test_case['name']}")
                
                response = self.session.delete(
                    f"{API_BASE}/operator/placement/undo-last",
                    params={"session_id": test_case["session_id"]},
                    timeout=30
                )
                
                if test_case["should_succeed"]:
                    if response.status_code == 200:
                        data = response.json()
                        if data.get("success"):
                            self.log(f"    ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –û—Ç–º–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {data.get('error')}")
                    else:
                        self.log(f"    ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                else:
                    if response.status_code == 200:
                        data = response.json()
                        if not data.get("success"):
                            self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {data.get('error')}")
                            success_count += 1
                        else:
                            self.log(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö")
                    else:
                        self.log(f"    ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                        success_count += 1
            
            self.log(f"üìä undo-last: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
            return success_count == total_tests
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ undo-last: {str(e)}", "ERROR")
            return False
    
    def test_full_placement_workflow(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
        try:
            self.log("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞...")
            
            workflow_session_id = str(uuid.uuid4())
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–∑
            self.log("  1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞...")
            cargo_response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cargo",
                json={"qr_code": self.test_cargo_number},
                timeout=30
            )
            
            if cargo_response.status_code != 200 or not cargo_response.json().get("success"):
                self.log("    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–∑–∞")
                return False
            
            self.log("    ‚úÖ –ì—Ä—É–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫—É (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è layout)
            self.log("  2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —è—á–µ–π–∫–∏...")
            cell_response = self.session.post(
                f"{API_BASE}/operator/placement/verify-cell",
                json={"qr_code": "–ë1-–ü1-–Ø5"},
                timeout=30
            )
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å warehouse layout
            if cell_response.status_code == 200 and cell_response.json().get("success"):
                self.log("    ‚úÖ –Ø—á–µ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –®–∞–≥ 3: –†–∞–∑–º–µ—â–∞–µ–º –≥—Ä—É–∑ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É)
                self.log("  3Ô∏è‚É£ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–∑–∞...")
                placement_response = self.session.post(
                    f"{API_BASE}/operator/placement/place-cargo",
                    json={
                        "cargo_qr_code": self.test_cargo_number,
                        "cell_qr_code": "–ë1-–ü1-–Ø5",
                        "session_id": workflow_session_id
                    },
                    timeout=30
                )
                
                if placement_response.status_code == 200 and placement_response.json().get("success"):
                    self.log("    ‚úÖ –ì—Ä—É–∑ —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    self.log("  4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
                    history_response = self.session.get(
                        f"{API_BASE}/operator/placement/session-history",
                        params={"session_id": workflow_session_id},
                        timeout=30
                    )
                    
                    if history_response.status_code == 200 and history_response.json().get("success"):
                        history_data = history_response.json()
                        history = history_data.get("history", [])
                        self.log(f"    ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {len(history)} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –®–∞–≥ 5: –û—Ç–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
                        self.log("  5Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è...")
                        undo_response = self.session.delete(
                            f"{API_BASE}/operator/placement/undo-last",
                            params={"session_id": workflow_session_id},
                            timeout=30
                        )
                        
                        if undo_response.status_code == 200 and undo_response.json().get("success"):
                            self.log("    ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                            self.log("üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                            return True
                        else:
                            self.log("    ‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–æ–∂–∏–¥–∞–µ–º–æ)")
                    else:
                        self.log("    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)")
                else:
                    self.log("    ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ (–æ–∂–∏–¥–∞–µ–º–æ)")
            else:
                self.log("    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è—á–µ–π–∫–∏ (–æ–∂–∏–¥–∞–µ–º–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è warehouse layout)")
            
            # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –≥—Ä—É–∑ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É
            self.log("üîÑ –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å warehouse layout")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}", "ERROR")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞")
        self.log("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        if not self.get_operator_warehouse():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "ERROR")
            return False
        
        if not self.create_test_cargo():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑", "ERROR")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
        test_results = []
        
        test_results.append(("verify-cargo", self.test_verify_cargo_endpoint()))
        test_results.append(("verify-cell", self.test_verify_cell_endpoint()))
        test_results.append(("place-cargo", self.test_place_cargo_endpoint()))
        test_results.append(("session-history", self.test_session_history_endpoint()))
        test_results.append(("undo-last", self.test_undo_last_endpoint()))
        test_results.append(("full-workflow", self.test_full_placement_workflow()))
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.log("=" * 80)
        self.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        passed_tests = 0
        total_tests = len(test_results)
        
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            self.log(f"  {test_name}: {status}")
            if result:
                passed_tests += 1
        
        success_rate = (passed_tests / total_tests) * 100
        self.log(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate == 100:
            self.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! API endpoints –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        elif success_rate >= 80:
            self.log("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")
        
        return success_rate == 100

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacementAPITester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ –Ω–æ–≤—ã–µ API endpoints –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫")
    
    return success

if __name__ == "__main__":
    main()
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û API: individual-units-for-placement
–ö–û–ù–¢–ï–ö–°–¢: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π backend endpoint –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–∑–∞ –≤–º–µ—Å—Ç–æ –∑–∞—è–≤–æ–∫
–¶–ï–õ–¨: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GET /api/operator/cargo/individual-units-for-placement
"""

import requests
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://logistics-dash-6.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class IndividualUnitsAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ endpoint"""
        try:
            print("üéØ –¢–ï–°–¢ 1: –ë–ê–ó–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["items", "total", "page", "per_page"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    self.log_test(
                        "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ endpoint",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {data.get('total', 0)}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {data.get('page', 1)}"
                    )
                    return data
                else:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                        str(required_fields),
                        str(list(data.keys()))
                    )
                    return None
            else:
                self.log_test(
                    "–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ endpoint",
                    False,
                    f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}",
                    "200",
                    str(response.status_code)
                )
                return None
                
        except Exception as e:
            self.log_test("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return None

    def test_data_structure(self, sample_data):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üéØ –¢–ï–°–¢ 2: –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•")
            
            if not sample_data or not sample_data.get("items"):
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", True, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)")
                return True
            
            items = sample_data.get("items", [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if items:
                first_item = items[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≥—Ä—É–ø–ø—ã
                group_required_fields = ["request_number", "units"]
                group_missing_fields = [field for field in group_required_fields if field not in first_item]
                
                if group_missing_fields:
                    self.log_test(
                        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø–ø—ã –∑–∞—è–≤–æ–∫",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –≥—Ä—É–ø–ø–µ: {group_missing_fields}",
                        str(group_required_fields),
                        str(list(first_item.keys()))
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–∑–∞
                units = first_item.get("units", [])
                if units:
                    first_unit = units[0]
                    unit_required_fields = ["individual_number", "cargo_request_number", "cargo_name", "type_number", "unit_index"]
                    unit_missing_fields = [field for field in unit_required_fields if field not in first_unit]
                    
                    if unit_missing_fields:
                        self.log_test(
                            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –µ–¥–∏–Ω–∏—Ü–µ: {unit_missing_fields}",
                            str(unit_required_fields),
                            str(list(first_unit.keys()))
                        )
                        return False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç individual_number
                    individual_number = first_unit.get("individual_number", "")
                    if "/" in individual_number:
                        parts = individual_number.split("/")
                        if len(parts) == 3:
                            self.log_test(
                                "–§–æ—Ä–º–∞—Ç individual_number",
                                True,
                                f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {individual_number} (–∑–∞—è–≤–∫–∞/—Ç–∏–ø/–µ–¥–∏–Ω–∏—Ü–∞)"
                            )
                        else:
                            self.log_test(
                                "–§–æ—Ä–º–∞—Ç individual_number",
                                False,
                                f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {individual_number}",
                                "–ó–ê–Ø–í–ö–ê/–¢–ò–ü/–ï–î–ò–ù–ò–¶–ê",
                                individual_number
                            )
                            return False
                    else:
                        self.log_test(
                            "–§–æ—Ä–º–∞—Ç individual_number",
                            False,
                            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –Ω–æ–º–µ—Ä–µ: {individual_number}",
                            "–ó–ê–Ø–í–ö–ê/–¢–ò–ü/–ï–î–ò–ù–ò–¶–ê",
                            individual_number
                        )
                        return False
                
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö",
                    True,
                    f"–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ì—Ä—É–ø–ø: {len(items)}, –µ–¥–∏–Ω–∏—Ü –≤ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ: {len(units)}"
                )
                return True
            else:
                self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", True, "–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
                return True
                
        except Exception as e:
            self.log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_filtering(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å—É"""
        try:
            print("üéØ –¢–ï–°–¢ 3: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø")
            
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?cargo_type_filter=01")
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞ (01)",
                    True,
                    f"–§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {data.get('total', 0)}"
                )
            else:
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –≥—Ä—É–∑–∞",
                    False,
                    f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}"
                )
            
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?status_filter=awaiting")
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (awaiting)",
                    True,
                    f"–§–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {data.get('total', 0)}"
                )
            else:
                self.log_test(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                    False,
                    f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}"
                )
            
            # –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?cargo_type_filter=01&status_filter=awaiting")
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                    True,
                    f"–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {data.get('total', 0)}"
                )
                return True
            else:
                self.log_test(
                    "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
                    False,
                    f"–û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_pagination(self):
        """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        try:
            print("üéØ –¢–ï–°–¢ 4: –ü–ê–ì–ò–ù–ê–¶–ò–Ø")
            
            # –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?page=1&per_page=5")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                pagination_fields = ["total", "page", "per_page", "total_pages"]
                missing_pagination = [field for field in pagination_fields if field not in data]
                
                if not missing_pagination:
                    total = data.get("total", 0)
                    page = data.get("page", 1)
                    per_page = data.get("per_page", 5)
                    total_pages = data.get("total_pages", 1)
                    
                    self.log_test(
                        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–æ–ª—è",
                        True,
                        f"–í—Å–µ –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç. –í—Å–µ–≥–æ: {total}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/{total_pages}, –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {per_page}"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ total_pages
                    expected_pages = (total + per_page - 1) // per_page if total > 0 else 1
                    if total_pages == expected_pages:
                        self.log_test(
                            "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - —Ä–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü",
                            True,
                            f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
                        )
                    else:
                        self.log_test(
                            "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - —Ä–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü",
                            str(expected_pages),
                            str(total_pages)
                        )
                        return False
                    
                    # –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                    if total > per_page:
                        response2 = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?page=2&per_page=5")
                        if response2.status_code == 200:
                            data2 = response2.json()
                            self.log_test(
                                "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                                True,
                                f"–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data2.get('items', []))}"
                            )
                        else:
                            self.log_test(
                                "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                                False,
                                f"–û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response2.status_code}"
                            )
                    
                    return True
                else:
                    self.log_test(
                        "–ü–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–æ–ª—è",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {missing_pagination}",
                        str(pagination_fields),
                        str(list(data.keys()))
                    )
                    return False
            else:
                self.log_test(
                    "–ü–∞–≥–∏–Ω–∞—Ü–∏—è",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_grouping_functionality(self, sample_data):
        """–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–∞—è–≤–∫–∞–º"""
        try:
            print("üéØ –¢–ï–°–¢ 5: –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ó–ê–Ø–í–ö–ê–ú")
            
            if not sample_data or not sample_data.get("items"):
                self.log_test("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º", True, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                return True
            
            items = sample_data.get("items", [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π request_number
            request_numbers = [item.get("request_number") for item in items]
            unique_numbers = set(request_numbers)
            
            if len(request_numbers) == len(unique_numbers):
                self.log_test(
                    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫",
                    True,
                    f"–í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã. –ì—Ä—É–ø–ø: {len(items)}"
                )
            else:
                self.log_test(
                    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫",
                    False,
                    f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫",
                    f"{len(unique_numbers)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö",
                    f"{len(request_numbers)} –≤—Å–µ–≥–æ"
                )
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ–¥–∏–Ω–∏—Ü—ã –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–µ
            for item in items:
                request_number = item.get("request_number")
                units = item.get("units", [])
                
                for unit in units:
                    unit_request_number = unit.get("cargo_request_number")
                    if unit_request_number != request_number:
                        self.log_test(
                            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –∑–∞—è–≤–∫–∞–º",
                            False,
                            f"–ï–¥–∏–Ω–∏—Ü–∞ {unit.get('individual_number')} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥—Ä—É–ø–ø–µ",
                            request_number,
                            unit_request_number
                        )
                        return False
            
            self.log_test(
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º",
                True,
                f"–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(items)} –≥—Ä—É–ø–ø"
            )
            return True
            
        except Exception as e:
            self.log_test("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_sorting(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏"""
        try:
            print("üéØ –¢–ï–°–¢ 6: –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –ù–û–ú–ï–†–£ –ó–ê–Ø–í–ö–ò")
            
            response = self.session.get(f"{API_BASE}/operator/cargo/individual-units-for-placement?per_page=10")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                if len(items) > 1:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
                    request_numbers = [item.get("request_number", "") for item in items]
                    sorted_numbers = sorted(request_numbers)
                    
                    if request_numbers == sorted_numbers:
                        self.log_test(
                            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                            True,
                            f"–ó–∞—è–≤–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–µ—Ä–≤–∞—è: {request_numbers[0]}, –ø–æ—Å–ª–µ–¥–Ω—è—è: {request_numbers[-1]}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                            str(sorted_numbers[:3]),
                            str(request_numbers[:3])
                        )
                        return False
                else:
                    self.log_test(
                        "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                        True,
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)"
                    )
                    return True
            else:
                self.log_test(
                    "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–û–ì–û API: individual-units-for-placement")
        print("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        sample_data = self.test_basic_functionality()
        if sample_data is None:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        if not self.test_data_structure(sample_data):
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        self.test_filtering()
        
        # –¢–µ—Å—Ç 4: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        self.test_pagination()
        
        # –¢–µ—Å—Ç 5: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        self.test_grouping_functionality(sample_data)
        
        # –¢–µ—Å—Ç 6: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        self.test_sorting()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
        
        return True

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("=" * 80)
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        successful_tests = len([t for t in self.test_results if t["success"]])
        failed_tests = total_tests - successful_tests
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests} ‚úÖ")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests} ‚ùå")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if failed_tests > 0:
            print("‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for test in self.test_results:
                if not test["success"]:
                    print(f"  ‚Ä¢ {test['test']}: {test['details']}")
            print()
        
        # –û–±—â–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 90:
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ù–æ–≤—ã–π API endpoint individual-units-for-placement —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif success_rate >= 70:
            print("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        else:
            print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
            print("üö® –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = IndividualUnitsAPITester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()