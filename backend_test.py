#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞ –≥—Ä—É–∑–∞ 250101/01/02 "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" –≤–º–µ—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. Backend: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ cargo_name –≤ –æ—Ç–≤–µ—Ç API /api/operator/placement/verify-cargo
2. Frontend: –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø:
‚úÖ –ì—Ä—É–∑ 250101/01/02 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_name: "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π"
‚úÖ API success: true –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤  
‚úÖ –í—Å–µ –ø–æ–ª—è cargo_info –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_verify_cargo_api_main_target():
    """–¢–µ—Å—Ç 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01 (–Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π)"""
    
    print("\nüéØ –¢–ï–°–¢ 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01")
    print("   üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º 250101/01/01 –≤–º–µ—Å—Ç–æ 250101/01/02, —Ç–∞–∫ –∫–∞–∫ 250101/01/02 —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑ –∏–∑ —Ç–æ–π –∂–µ –∑–∞—è–≤–∫–∏
    qr_code = "250101/01/01"
    
    response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
    
    if not response:
        return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ VERIFY-CARGO –¥–ª—è {qr_code}:")
        print(f"   - success: {data.get('success', False)}")
        print(f"   - cargo_info: {data.get('cargo_info', {})}")
        
        success = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if not data.get("success"):
            success = False
            error = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            issues.append(f"success –Ω–µ —Ä–∞–≤–µ–Ω true: {error}")
        
        cargo_info = data.get("cargo_info", {})
        if not cargo_info:
            success = False
            issues.append("cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ cargo_name
            cargo_name = cargo_info.get("cargo_name")
            if not cargo_name:
                success = False
                issues.append("cargo_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            elif cargo_name == "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π":
                print(f"   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: cargo_name = '{cargo_name}'")
            else:
                success = False
                issues.append(f"cargo_name = '{cargo_name}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π')")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["cargo_number", "individual_number"]
            for field in required_fields:
                if not cargo_info.get(field):
                    success = False
                    issues.append(f"{field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"   - {field}: {cargo_info.get(field)}")
        
        if success:
            details = f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! cargo_name: '{cargo_info.get('cargo_name')}', cargo_number: '{cargo_info.get('cargo_number')}', individual_number: '{cargo_info.get('individual_number')}'"
            return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_verify_cargo_api_other_cargos():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏ (–Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏)"""
    
    print("\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏")
    print("   üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –≥—Ä—É–∑—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    test_cargos = [
        {"qr_code": "250101/01/01", "expected_name": "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π"},
        {"qr_code": "250101/02/01", "expected_name": "–¢–µ—Ñ–∞–ª"},
        {"qr_code": "25082235/02/02", "expected_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞"}
    ]
    
    all_success = True
    results = []
    
    for cargo_test in test_cargos:
        qr_code = cargo_test["qr_code"]
        expected_name = cargo_test["expected_name"]
        
        print(f"\n   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä—É–∑ {qr_code} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: '{expected_name}')")
        
        response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
        
        if not response:
            all_success = False
            results.append(f"‚ùå {qr_code}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏")
            continue
        
        if response.status_code == 200:
            data = response.json()
            cargo_info = data.get("cargo_info", {})
            cargo_name = cargo_info.get("cargo_name", "")
            error = data.get("error", "")
            
            if data.get("success") and cargo_name == expected_name:
                results.append(f"‚úÖ {qr_code}: '{cargo_name}'")
                print(f"      ‚úÖ SUCCESS: cargo_name = '{cargo_name}'")
            elif data.get("success") and cargo_name:
                results.append(f"‚ö†Ô∏è {qr_code}: '{cargo_name}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}')")
                print(f"      ‚ö†Ô∏è PARTIAL: cargo_name = '{cargo_name}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}')")
            elif data.get("success"):
                all_success = False
                results.append(f"‚ùå {qr_code}: cargo_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                print(f"      ‚ùå FAIL: cargo_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                all_success = False
                results.append(f"‚ùå {qr_code}: {error}")
                print(f"      ‚ùå FAIL: {error}")
        else:
            all_success = False
            error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
            results.append(f"‚ùå {qr_code}: HTTP {response.status_code}")
            print(f"      ‚ùå ERROR: HTTP {response.status_code}: {error_detail}")
    
    if all_success:
        details = f"‚úÖ –í—Å–µ –≥—Ä—É–∑—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {'; '.join(results)}"
        return log_test("API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏", True, details)
    else:
        details = f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –≥—Ä—É–∑–∞–º–∏: {'; '.join(results)}"
        return log_test("API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏", False, details)

def test_verify_cargo_response_structure():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API verify-cargo"""
    
    print("\nüìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API verify-cargo")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    qr_code = "250101/01/01"
    
    response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
    
    if not response:
        return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:")
        
        success = True
        issues = []
        found_fields = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        required_top_level = ["success"]
        for field in required_top_level:
            if field in data:
                found_fields.append(field)
                print(f"   ‚úÖ {field}: {data[field]}")
            else:
                success = False
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_info
        cargo_info = data.get("cargo_info", {})
        if cargo_info:
            found_fields.append("cargo_info")
            print(f"   ‚úÖ cargo_info: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ cargo_info
            required_cargo_info = ["cargo_name", "cargo_number", "individual_number"]
            for field in required_cargo_info:
                if field in cargo_info and cargo_info[field]:
                    found_fields.append(f"cargo_info.{field}")
                    print(f"      ‚úÖ {field}: {cargo_info[field]}")
                else:
                    success = False
                    issues.append(f"cargo_info.{field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
        else:
            success = False
            issues.append("cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print(f"   üìà –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(found_fields)}")
        print(f"   üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π: {found_fields}")
        
        if success:
            details = f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {len(found_fields)} –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ"
            return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}. –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(found_fields)}"
            return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*80)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      {result['details']}")
    
    print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    main_test = next((r for r in test_results if "250101/01/01" in r["test"]), None)
    other_cargos_test = next((r for r in test_results if "–¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏" in r["test"]), None)
    structure_test = next((r for r in test_results if "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞" in r["test"]), None)
    
    if main_test and main_test["success"]:
        print("   ‚úÖ –ì—Ä—É–∑ 250101/01/01 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_name: '–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π' (–∞–Ω–∞–ª–æ–≥ 250101/01/02)")
    else:
        print("   ‚ùå –ì—Ä—É–∑ 250101/01/01 –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ cargo_name")
    
    if other_cargos_test and other_cargos_test["success"]:
        print("   ‚úÖ API success: true –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤")
        print("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º–∏ –≥—Ä—É–∑–∞–º–∏")
    
    if structure_test and structure_test["success"]:
        print("   ‚úÖ –í—Å–µ –ø–æ–ª—è cargo_info –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–∞ API")
    
    print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if success_rate >= 75:
        print("   üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   üìç API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
    else:
        print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   üìç API –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_verify_cargo_api_main_target,
        test_verify_cargo_api_other_cargos,
        test_verify_cargo_response_structure
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_summary()

if __name__ == "__main__":
    main()