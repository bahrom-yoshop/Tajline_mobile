#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ó–´ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤ –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê: –°–∏—Å—Ç–µ–º–∞ TAJLINE.TJ - –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞–º–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ú–æ—Å–∫–≤–∞-–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω

–ö–û–ù–¢–ï–ö–°–¢ –§–ê–ó–´ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤:
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ñ–æ–∫—É—Å
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –£–ª—É—á—à–µ–Ω—ã –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞
- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: scannerProcessingInput, scannerAutoFocusTarget, scannerClickProtection

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö backend API endpoints –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –§–ê–ó–´ 3
"""

import requests
import json
import sys
import time
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

ADMIN_CREDENTIALS = {
    "phone": "+79999888777", 
    "password": "admin123"
}

class BackendTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.admin_token = None
        self.test_results = []
        self.warehouse_id = None
        self.test_cargo_id = None
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def authenticate_admin(self):
        """Authenticate admin for additional tests"""
        try:
            # Save operator session
            operator_headers = self.session.headers.copy()
            
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                
                # Test admin endpoints with admin token
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')})"
                    )
                    
                    # Restore operator session for main tests
                    self.session.headers = operator_headers
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, error=f"HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, error=str(e))
            return False

    def test_cargo_available_for_placement(self):
        """Test GET /api/operator/cargo/available-for-placement"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                pagination = data.get("pagination", {})
                
                # Store first cargo for further testing
                if items:
                    self.test_cargo_id = items[0].get("id")
                
                self.log_test(
                    "GET /api/operator/cargo/available-for-placement",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {pagination.get('total_count', 0)} –≤—Å–µ–≥–æ"
                )
                return True
            else:
                self.log_test(
                    "GET /api/operator/cargo/available-for-placement",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("GET /api/operator/cargo/available-for-placement", False, error=str(e))
            return False

    def test_cargo_placement_status(self):
        """Test GET /api/operator/cargo/{cargo_id}/placement-status"""
        if not self.test_cargo_id:
            self.log_test(
                "GET /api/operator/cargo/{cargo_id}/placement-status",
                False,
                error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
            
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/placement-status")
            
            if response.status_code == 200:
                data = response.json()
                required_fields = ["cargo_id", "cargo_number", "total_quantity", "total_placed", "placement_progress"]
                
                missing_fields = [field for field in required_fields if field not in data]
                
                if not missing_fields:
                    self.log_test(
                        "GET /api/operator/cargo/{cargo_id}/placement-status",
                        True,
                        f"–°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ {data.get('cargo_number')}: {data.get('placement_progress')} ({data.get('total_placed')}/{data.get('total_quantity')})"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/operator/cargo/{cargo_id}/placement-status",
                        False,
                        error=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/operator/cargo/{cargo_id}/placement-status",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("GET /api/operator/cargo/{cargo_id}/placement-status", False, error=str(e))
            return False

    def test_place_individual_cargo(self):
        """Test POST /api/operator/cargo/place-individual"""
        try:
            # Test data for individual placement - need warehouse_id
            placement_data = {
                "individual_number": "250001/01/01",  # Test individual number format
                "warehouse_id": self.warehouse_id or "test-warehouse-id",
                "block_number": 1,
                "shelf_number": 1,
                "cell_number": 1
            }
            
            response = self.session.post(
                f"{BACKEND_URL}/operator/cargo/place-individual",
                json=placement_data
            )
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "POST /api/operator/cargo/place-individual",
                    True,
                    f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã: {data.get('message', '–£—Å–ø–µ—à–Ω–æ')}"
                )
                return True
            elif response.status_code == 404:
                self.log_test(
                    "POST /api/operator/cargo/place-individual",
                    True,
                    "Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
                )
                return True
            elif response.status_code == 422:
                # Check if it's just validation error for missing data
                self.log_test(
                    "POST /api/operator/cargo/place-individual",
                    True,
                    "Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω (–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)"
                )
                return True
            else:
                self.log_test(
                    "POST /api/operator/cargo/place-individual",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("POST /api/operator/cargo/place-individual", False, error=str(e))
            return False

    def test_warehouse_cell_status(self):
        """Test GET /api/warehouses/cell/status"""
        try:
            # Get operator warehouses first
            warehouses_response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if warehouses_response.status_code == 200:
                warehouses = warehouses_response.json()
                if warehouses:
                    self.warehouse_id = warehouses[0].get("id")
                    
                    # Test cell status endpoint
                    params = {
                        "warehouse_id": self.warehouse_id,
                        "block_number": 1,
                        "shelf_number": 1,
                        "cell_number": 1
                    }
                    
                    response = self.session.get(f"{BACKEND_URL}/warehouses/cell/status", params=params)
                    
                    if response.status_code == 200:
                        data = response.json()
                        self.log_test(
                            "GET /api/warehouses/cell/status",
                            True,
                            f"–°—Ç–∞—Ç—É—Å —è—á–µ–π–∫–∏: {'–∑–∞–Ω—è—Ç–∞' if data.get('is_occupied') else '—Å–≤–æ–±–æ–¥–Ω–∞'}"
                        )
                        return True
                    else:
                        self.log_test(
                            "GET /api/warehouses/cell/status",
                            False,
                            error=f"HTTP {response.status_code}: {response.text}"
                        )
                        return False
                else:
                    self.log_test(
                        "GET /api/warehouses/cell/status",
                        False,
                        error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/warehouses/cell/status",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã: HTTP {warehouses_response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("GET /api/warehouses/cell/status", False, error=str(e))
            return False

    def test_qr_format_compatibility(self):
        """Test compatibility with new QR formats (individual numbering)"""
        try:
            # Test individual number format parsing
            test_formats = [
                "250001/01/01",  # Standard individual format
                "250002/02/03",  # Different cargo and unit numbers
                "250123/05/10"   # Higher numbers
            ]
            
            compatible_formats = 0
            
            for format_test in test_formats:
                # Test if the format is recognized by the placement endpoint
                placement_data = {
                    "individual_number": format_test,
                    "block_number": 1,
                    "shelf_number": 1,
                    "cell_number": 1
                }
                
                response = self.session.post(
                    f"{BACKEND_URL}/operator/cargo/place-individual",
                    json=placement_data
                )
                
                # 404 is acceptable (cargo not found), 400 would indicate format issue
                if response.status_code in [200, 404]:
                    compatible_formats += 1
            
            success = compatible_formats == len(test_formats)
            self.log_test(
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞–º–∏",
                success,
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è {compatible_formats}/{len(test_formats)} —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏"
            )
            return success
            
        except Exception as e:
            self.log_test("–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–æ–≤—ã–º–∏ QR —Ñ–æ—Ä–º–∞—Ç–∞–º–∏", False, error=str(e))
            return False

    def test_json_qr_structure_support(self):
        """Test support for JSON structure QR codes"""
        try:
            # Test if backend can handle JSON QR data
            if self.test_cargo_id:
                response = self.session.get(f"{BACKEND_URL}/operator/cargo/{self.test_cargo_id}/full-info")
                
                if response.status_code == 200:
                    data = response.json()
                    
                    # Check if data structure supports JSON QR generation
                    required_qr_fields = ["cargo_number", "cargo_items", "sender_full_name", "recipient_full_name"]
                    has_qr_fields = all(field in data for field in required_qr_fields)
                    
                    if has_qr_fields:
                        self.log_test(
                            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–æ–≤",
                            True,
                            "Backend –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤"
                        )
                        return True
                    else:
                        missing = [field for field in required_qr_fields if field not in data]
                        self.log_test(
                            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–æ–≤",
                            False,
                            error=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {missing}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–æ–≤",
                        False,
                        error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ: HTTP {response.status_code}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–æ–≤",
                    False,
                    error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ cargo_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–æ–≤", False, error=str(e))
            return False

    def test_multiple_elements_in_cells(self):
        """Test handling of multiple elements in warehouse cells"""
        try:
            if self.warehouse_id:
                # Get warehouse cells
                response = self.session.get(f"{BACKEND_URL}/warehouses/{self.warehouse_id}/cells")
                
                if response.status_code == 200:
                    data = response.json()
                    cells = data.get("cells", [])
                    
                    if cells:
                        # Check if cells can handle multiple cargo items
                        occupied_cells = [cell for cell in cells if cell.get("is_occupied")]
                        
                        self.log_test(
                            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —è—á–µ–π–∫–∞—Ö",
                            True,
                            f"–ù–∞–π–¥–µ–Ω–æ {len(occupied_cells)} –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –∏–∑ {len(cells)} –æ–±—â–∏—Ö. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                        )
                        return True
                    else:
                        self.log_test(
                            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —è—á–µ–π–∫–∞—Ö",
                            True,
                            "–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                        )
                        return True
                else:
                    self.log_test(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —è—á–µ–π–∫–∞—Ö",
                        False,
                        error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —è—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞: HTTP {response.status_code}"
                    )
                    return False
            else:
                self.log_test(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —è—á–µ–π–∫–∞—Ö",
                    False,
                    error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ warehouse_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
                
        except Exception as e:
            self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —è—á–µ–π–∫–∞—Ö", False, error=str(e))
            return False

    def test_operator_authorization_stability(self):
        """Test that operator authorization works correctly after Phase 3 changes"""
        try:
            # Test multiple operator endpoints to ensure authorization is stable
            endpoints_to_test = [
                "/operator/warehouses",
                "/operator/dashboard/analytics", 
                "/operator/pickup-requests",
                "/operator/warehouse-notifications"
            ]
            
            successful_endpoints = 0
            
            for endpoint in endpoints_to_test:
                response = self.session.get(f"{BACKEND_URL}{endpoint}")
                if response.status_code == 200:
                    successful_endpoints += 1
            
            success = successful_endpoints >= len(endpoints_to_test) * 0.75  # 75% success rate acceptable
            
            self.log_test(
                "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                success,
                f"–†–∞–±–æ—Ç–∞–µ—Ç {successful_endpoints}/{len(endpoints_to_test)} endpoints –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
            )
            return success
            
        except Exception as e:
            self.log_test("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", False, error=str(e))
            return False

    def run_all_tests(self):
        """Run all backend tests for Phase 3 cargo placement scanner"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ó–´ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤ –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –≤ TAJLINE.TJ")
        print("=" * 120)
        print()
        
        # Authentication tests
        if not self.authenticate_operator():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
            
        self.authenticate_admin()  # Optional for additional tests
        
        # Core cargo placement scanner API tests
        print("üîç –û–°–ù–û–í–ù–´–ï API ENDPOINTS –î–õ–Ø –°–ö–ê–ù–ï–†–ê –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –ì–†–£–ó–û–í:")
        print("-" * 60)
        
        test_results = []
        test_results.append(self.test_cargo_available_for_placement())
        test_results.append(self.test_cargo_placement_status())
        test_results.append(self.test_place_individual_cargo())
        test_results.append(self.test_warehouse_cell_status())
        
        print("üîß –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° –ù–û–í–´–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò –§–ê–ó–´ 3:")
        print("-" * 60)
        
        test_results.append(self.test_qr_format_compatibility())
        test_results.append(self.test_json_qr_structure_support())
        test_results.append(self.test_multiple_elements_in_cells())
        test_results.append(self.test_operator_authorization_stability())
        
        # Summary
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if success_rate >= 85:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend API –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –§–ê–ó–´ 3!")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ backend")
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints —Å–∫–∞–Ω–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã")
        elif success_rate >= 70:
            print("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend API –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤, –Ω–æ –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ backend API")
        
        print()
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 40)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    üìã {result['details']}")
            if result["error"]:
                print(f"    ‚ùå {result['error']}")
        
        return success_rate >= 75

if __name__ == "__main__":
    tester = BackendTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)
"""
üîß –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

–ö–û–ù–¢–ï–ö–°–¢: –í–Ω–µ—Å–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ" –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞. 
–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ backend –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.

–ó–ê–î–ê–ß–ò:
1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞** (+79777888999/warehouse123)
2. **–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint** - POST /api/operator/cargo/accept 
3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ QR endpoint** - POST /api/backend/generate-simple-qr

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend —Å—Ç–∞–±–∏–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"

class ModalFixTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_info = None
        self.test_results = []
        
    def log_test(self, test_name, success, details=""):
        """Log test result"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        print()
    
    def test_operator_authorization(self):
        """1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)"""
        print("üîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        
        try:
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_info = data.get("user", {})
                
                # Set authorization header
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                
                user_name = self.user_info.get("full_name", "Unknown")
                user_role = self.user_info.get("role", "Unknown")
                user_phone = self.user_info.get("phone", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_name} (—Ä–æ–ª—å: {user_role}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_phone})"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            )
            return False
    
    def test_cargo_accept_endpoint(self):
        """2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint - POST /api/operator/cargo/accept"""
        print("üì¶ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint - POST /api/operator/cargo/accept")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–≥–æ –û–∫–Ω–∞",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–≥–æ –û–∫–Ω–∞", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                        "quantity": 1,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                self.log_test(
                    "POST /api/operator/cargo/accept",
                    True,
                    f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id})"
                )
                return True
            else:
                self.log_test(
                    "POST /api/operator/cargo/accept",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/operator/cargo/accept",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            return False
    
    def test_qr_generate_endpoint(self):
        """3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ QR endpoint - POST /api/backend/generate-simple-qr"""
        print("üî≤ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ QR endpoint - POST /api/backend/generate-simple-qr")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–∞ —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
            qr_data = {
                "qr_text": "TEST_QR_MODAL_FIX_123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/backend/generate-simple-qr", json=qr_data)
            
            if response.status_code == 200:
                data = response.json()
                qr_code = data.get("qr_code")
                
                if qr_code and qr_code.startswith("data:image/png;base64,"):
                    self.log_test(
                        "POST /api/backend/generate-simple-qr",
                        True,
                        f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(qr_code)} —Å–∏–º–≤–æ–ª–æ–≤)"
                    )
                    return True
                else:
                    self.log_test(
                        "POST /api/backend/generate-simple-qr",
                        False,
                        "QR –∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
                    )
                    return False
            else:
                self.log_test(
                    "POST /api/backend/generate-simple-qr",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/backend/generate-simple-qr",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            return False
    
    def test_backend_stability(self):
        """4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend"""
        print("üîß –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            endpoints_to_check = [
                ("/operator/warehouses", "GET"),
                ("/operator/dashboard/analytics", "GET"),
                ("/auth/me", "GET")
            ]
            
            stable_endpoints = 0
            total_endpoints = len(endpoints_to_check)
            
            for endpoint, method in endpoints_to_check:
                try:
                    if method == "GET":
                        response = self.session.get(f"{BACKEND_URL}{endpoint}")
                    else:
                        response = self.session.post(f"{BACKEND_URL}{endpoint}")
                    
                    if response.status_code in [200, 201]:
                        stable_endpoints += 1
                        print(f"   ‚úÖ {method} {endpoint} - —Å—Ç–∞–±–∏–ª–µ–Ω")
                    else:
                        print(f"   ‚ùå {method} {endpoint} - HTTP {response.status_code}")
                        
                except Exception as e:
                    print(f"   ‚ùå {method} {endpoint} - –æ—à–∏–±–∫–∞: {str(e)}")
            
            stability_rate = (stable_endpoints / total_endpoints) * 100
            
            if stability_rate >= 80:
                self.log_test(
                    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend",
                    True,
                    f"Backend —Å—Ç–∞–±–∏–ª–µ–Ω: {stable_endpoints}/{total_endpoints} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç ({stability_rate:.1f}%)"
                )
                return True
            else:
                self.log_test(
                    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend",
                    False,
                    f"Backend –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω: {stable_endpoints}/{total_endpoints} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç ({stability_rate:.1f}%)"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend",
                False,
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {str(e)}"
            )
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üîß –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        print("=" * 80)
        print()
        
        # Run tests in sequence
        tests = [
            self.test_operator_authorization,
            self.test_cargo_accept_endpoint,
            self.test_qr_generate_endpoint,
            self.test_backend_stability
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_func in tests:
            if test_func():
                passed_tests += 1
        
        # Summary
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
        print("=" * 80)
        
        success_rate = (passed_tests / total_tests) * 100
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   {result['details']}")
        
        print()
        print(f"üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate >= 75:
            print("‚úÖ BACKEND –ì–û–¢–û–í –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!")
            print("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ' –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            print("‚ùå BACKEND –ù–ï –ì–û–¢–û–í –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
            print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print()
        print("üîß –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
        print("   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        print("   - API endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞")
        print("   - –ù–æ–≤—ã–π QR endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print("   - –û–±—â–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        
        return success_rate >= 75

def main():
    """Main function"""
    tester = ModalFixTester()
    success = tester.run_all_tests()
    
    # Exit with appropriate code
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
