#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π quantity –∏ total_amount –≤ TAJLINE.TJ

–ë–´–°–¢–†–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å POST /api/operator/cargo/accept —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ quantity –∏ total_amount –≤ CargoItem

–¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:
- –û–ø–µ—Ä–∞—Ç–æ—Ä: +79777888999/warehouse123  
- –ì—Ä—É–∑ 1: quantity=2, weight=10.0, price_per_kg=200.0, total_amount=4000.0
- –ì—Ä—É–∑ 2: quantity=3, weight=5.0, price_per_kg=150.0, total_amount=2250.0

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏, –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 5 QR –∫–æ–¥–æ–≤
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://freight-qr-system.preview.emergentagent.com/api"

def test_operator_cargo_accept_with_quantity_and_total_amount():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/operator/cargo/accept —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ quantity –∏ total_amount
    """
    print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π quantity –∏ total_amount –≤ TAJLINE.TJ")
    print("=" * 100)
    
    # Step 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
    print("\n1Ô∏è‚É£ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    try:
        login_response = requests.post(f"{BACKEND_URL}/auth/login", json=login_data)
        print(f"   üì° POST /api/auth/login - Status: {login_response.status_code}")
        
        if login_response.status_code == 200:
            login_result = login_response.json()
            token = login_result.get("access_token")
            user_info = login_result.get("user", {})
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
            print(f"   üîë JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {login_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {login_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Step 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    print("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê")
    try:
        warehouses_response = requests.get(f"{BACKEND_URL}/operator/warehouses", headers=headers)
        print(f"   üì° GET /api/operator/warehouses - Status: {warehouses_response.status_code}")
        
        if warehouses_response.status_code == 200:
            warehouses = warehouses_response.json()
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {len(warehouses)}")
            if warehouses:
                warehouse = warehouses[0]
                print(f"   üè¢ –°–∫–ª–∞–¥: {warehouse.get('name', 'Unknown')} (ID: {warehouse.get('id', 'Unknown')})")
            else:
                print("   ‚ö†Ô∏è –£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {warehouses_response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {e}")
        return False
    
    # Step 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/operator/cargo/accept —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    print("\n3Ô∏è‚É£ üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - POST /api/operator/cargo/accept –° –ù–û–í–´–ú–ò –ü–û–õ–Ø–ú–ò")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ review request
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å Quantity",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å Quantity", 
        "recipient_phone": "+992900111222",
        "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è Quantity, 123",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –ø–æ–ª—è–º–∏ quantity –∏ total_amount",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä Samsung",
                "quantity": 2,  # –ù–û–í–û–ï –ü–û–õ–ï
                "weight": 10.0,
                "price_per_kg": 200.0,
                "total_amount": 4000.0  # –ù–û–í–û–ï –ü–û–õ–ï (2 * 10.0 * 200.0)
            },
            {
                "cargo_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞ LG", 
                "quantity": 3,  # –ù–û–í–û–ï –ü–û–õ–ï
                "weight": 5.0,
                "price_per_kg": 150.0,
                "total_amount": 2250.0  # –ù–û–í–û–ï –ü–û–õ–ï (3 * 5.0 * 150.0)
            }
        ]
    }
    
    print(f"   üì¶ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"      –ì—Ä—É–∑ ‚Ññ1: {cargo_data['cargo_items'][0]['cargo_name']}")
    print(f"      - quantity: {cargo_data['cargo_items'][0]['quantity']}")
    print(f"      - weight: {cargo_data['cargo_items'][0]['weight']} –∫–≥")
    print(f"      - price_per_kg: {cargo_data['cargo_items'][0]['price_per_kg']} ‚ÇΩ/–∫–≥")
    print(f"      - total_amount: {cargo_data['cargo_items'][0]['total_amount']} ‚ÇΩ")
    print(f"      –ì—Ä—É–∑ ‚Ññ2: {cargo_data['cargo_items'][1]['cargo_name']}")
    print(f"      - quantity: {cargo_data['cargo_items'][1]['quantity']}")
    print(f"      - weight: {cargo_data['cargo_items'][1]['weight']} –∫–≥")
    print(f"      - price_per_kg: {cargo_data['cargo_items'][1]['price_per_kg']} ‚ÇΩ/–∫–≥")
    print(f"      - total_amount: {cargo_data['cargo_items'][1]['total_amount']} ‚ÇΩ")
    print(f"      üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü: {cargo_data['cargo_items'][0]['quantity'] + cargo_data['cargo_items'][1]['quantity']} (–≥–æ—Ç–æ–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 5 QR –∫–æ–¥–æ–≤)")
    
    try:
        cargo_response = requests.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data, headers=headers)
        print(f"   üì° POST /api/operator/cargo/accept - Status: {cargo_response.status_code}")
        
        if cargo_response.status_code == 200:
            cargo_result = cargo_response.json()
            cargo_number = cargo_result.get("cargo_number", "Unknown")
            cargo_id = cargo_result.get("cargo_id", "Unknown")
            
            print(f"   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–• - –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            print(f"   üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            print(f"   üÜî ID –∑–∞—è–≤–∫–∏: {cargo_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cargo_items —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            print(f"\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø CARGO_ITEMS –° –ù–û–í–´–ú–ò –ü–û–õ–Ø–ú–ò")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —á–µ—Ä–µ–∑ API
                print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π quantity –∏ total_amount...")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "cargo_items" in cargo_result:
                    saved_items = cargo_result["cargo_items"]
                    print(f"   ‚úÖ cargo_items –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ ({len(saved_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                    
                    for i, item in enumerate(saved_items, 1):
                        print(f"   üì¶ –ì—Ä—É–∑ #{i}:")
                        print(f"      - cargo_name: {item.get('cargo_name', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                        print(f"      - quantity: {item.get('quantity', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')} {'‚úÖ' if 'quantity' in item else '‚ùå'}")
                        print(f"      - weight: {item.get('weight', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                        print(f"      - price_per_kg: {item.get('price_per_kg', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                        print(f"      - total_amount: {item.get('total_amount', '–û–¢–°–£–¢–°–¢–í–£–ï–¢')} {'‚úÖ' if 'total_amount' in item else '‚ùå'}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
                        if 'quantity' not in item:
                            print(f"   ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ 'quantity' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ì—Ä—É–∑ #{i}!")
                        if 'total_amount' not in item:
                            print(f"   ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ 'total_amount' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ì—Ä—É–∑ #{i}!")
                else:
                    print(f"   ‚ö†Ô∏è cargo_items –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ API")
                    print(f"   üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(cargo_result, indent=2, ensure_ascii=False)}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
            # Step 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤
            print(f"\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í")
            total_quantity = cargo_data['cargo_items'][0]['quantity'] + cargo_data['cargo_items'][1]['quantity']
            print(f"   üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ QR –∫–æ–¥–æ–≤: {total_quantity}")
            print(f"   üè∑Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR –∫–æ–¥–æ–≤:")
            print(f"      - {cargo_number}/01/1 (–ì—Ä—É–∑ ‚Ññ1, –µ–¥–∏–Ω–∏—Ü–∞ 1)")
            print(f"      - {cargo_number}/01/2 (–ì—Ä—É–∑ ‚Ññ1, –µ–¥–∏–Ω–∏—Ü–∞ 2)")
            print(f"      - {cargo_number}/02/1 (–ì—Ä—É–∑ ‚Ññ2, –µ–¥–∏–Ω–∏—Ü–∞ 1)")
            print(f"      - {cargo_number}/02/2 (–ì—Ä—É–∑ ‚Ññ2, –µ–¥–∏–Ω–∏—Ü–∞ 2)")
            print(f"      - {cargo_number}/02/3 (–ì—Ä—É–∑ ‚Ññ2, –µ–¥–∏–Ω–∏—Ü–∞ 3)")
            print(f"   ‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {total_quantity} QR –∫–æ–¥–æ–≤")
            
            return True
            
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {cargo_response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {cargo_response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Backend URL: {BACKEND_URL}")
    
    success = test_operator_cargo_accept_with_quantity_and_total_amount()
    
    print("\n" + "=" * 100)
    if success:
        print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ POST /api/operator/cargo/accept —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ quantity –∏ total_amount")
        print("‚úÖ Backend –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞")
        print("‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª—è–º–∏ quantity –∏ total_amount")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)