#!/usr/bin/env python3
"""
üîß –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞

–ö–û–ù–¢–ï–ö–°–¢: –í–Ω–µ—Å–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ" –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞. 
–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ backend –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.

–ó–ê–î–ê–ß–ò:
1. **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞** (+79777888999/warehouse123)
2. **–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint** - POST /api/operator/cargo/accept 
3. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ QR endpoint** - POST /api/backend/generate-simple-qr

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend —Å—Ç–∞–±–∏–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
"""

import requests
import json
import sys
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-system.preview.emergentagent.com/api"

class ModalFixTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_info = None
        self.test_results = []
        
    def log_test(self, test_name, success, details=""):
        """Log test result"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        print()
    
    def test_operator_authorization(self):
        """1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)"""
        print("üîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        
        try:
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.user_info = data.get("user", {})
                
                # Set authorization header
                self.session.headers.update({
                    "Authorization": f"Bearer {self.token}"
                })
                
                user_name = self.user_info.get("full_name", "Unknown")
                user_role = self.user_info.get("role", "Unknown")
                user_phone = self.user_info.get("phone", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_name} (—Ä–æ–ª—å: {user_role}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_phone})"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
            )
            return False
    
    def test_cargo_accept_endpoint(self):
        """2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint - POST /api/operator/cargo/accept"""
        print("üì¶ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint - POST /api/operator/cargo/accept")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–≥–æ –û–∫–Ω–∞",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ú–æ–¥–∞–ª—å–Ω–æ–≥–æ –û–∫–Ω–∞", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞",
                        "quantity": 1,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                self.log_test(
                    "POST /api/operator/cargo/accept",
                    True,
                    f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number} (ID: {cargo_id})"
                )
                return True
            else:
                self.log_test(
                    "POST /api/operator/cargo/accept",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/operator/cargo/accept",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            return False
    
    def test_qr_generate_endpoint(self):
        """3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ QR endpoint - POST /api/backend/generate-simple-qr"""
        print("üî≤ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ QR endpoint - POST /api/backend/generate-simple-qr")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–∞ —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
            qr_data = {
                "qr_text": "TEST_QR_MODAL_FIX_123"
            }
            
            response = self.session.post(f"{BACKEND_URL}/backend/generate-simple-qr", json=qr_data)
            
            if response.status_code == 200:
                data = response.json()
                qr_code = data.get("qr_code")
                
                if qr_code and qr_code.startswith("data:image/png;base64,"):
                    self.log_test(
                        "POST /api/backend/generate-simple-qr",
                        True,
                        f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(qr_code)} —Å–∏–º–≤–æ–ª–æ–≤)"
                    )
                    return True
                else:
                    self.log_test(
                        "POST /api/backend/generate-simple-qr",
                        False,
                        "QR –∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
                    )
                    return False
            else:
                self.log_test(
                    "POST /api/backend/generate-simple-qr",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/backend/generate-simple-qr",
                False,
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            return False
    
    def test_backend_stability(self):
        """4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend"""
        print("üîß –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ backend –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            endpoints_to_check = [
                ("/operator/warehouses", "GET"),
                ("/operator/dashboard/analytics", "GET"),
                ("/auth/me", "GET")
            ]
            
            stable_endpoints = 0
            total_endpoints = len(endpoints_to_check)
            
            for endpoint, method in endpoints_to_check:
                try:
                    if method == "GET":
                        response = self.session.get(f"{BACKEND_URL}{endpoint}")
                    else:
                        response = self.session.post(f"{BACKEND_URL}{endpoint}")
                    
                    if response.status_code in [200, 201]:
                        stable_endpoints += 1
                        print(f"   ‚úÖ {method} {endpoint} - —Å—Ç–∞–±–∏–ª–µ–Ω")
                    else:
                        print(f"   ‚ùå {method} {endpoint} - HTTP {response.status_code}")
                        
                except Exception as e:
                    print(f"   ‚ùå {method} {endpoint} - –æ—à–∏–±–∫–∞: {str(e)}")
            
            stability_rate = (stable_endpoints / total_endpoints) * 100
            
            if stability_rate >= 80:
                self.log_test(
                    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend",
                    True,
                    f"Backend —Å—Ç–∞–±–∏–ª–µ–Ω: {stable_endpoints}/{total_endpoints} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç ({stability_rate:.1f}%)"
                )
                return True
            else:
                self.log_test(
                    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend",
                    False,
                    f"Backend –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω: {stable_endpoints}/{total_endpoints} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç ({stability_rate:.1f}%)"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å backend",
                False,
                f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {str(e)}"
            )
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üîß –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
        print("=" * 80)
        print()
        
        # Run tests in sequence
        tests = [
            self.test_operator_authorization,
            self.test_cargo_accept_endpoint,
            self.test_qr_generate_endpoint,
            self.test_backend_stability
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_func in tests:
            if test_func():
                passed_tests += 1
        
        # Summary
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
        print("=" * 80)
        
        success_rate = (passed_tests / total_tests) * 100
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   {result['details']}")
        
        print()
        print(f"üéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        
        if success_rate >= 75:
            print("‚úÖ BACKEND –ì–û–¢–û–í –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!")
            print("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ' –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            print("‚ùå BACKEND –ù–ï –ì–û–¢–û–í –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
            print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        print()
        print("üîß –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
        print("   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
        print("   - API endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞")
        print("   - –ù–æ–≤—ã–π QR endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        print("   - –û–±—â–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        
        return success_rate >= 75

def main():
    """Main function"""
    tester = ModalFixTester()
    success = tester.run_all_tests()
    
    # Exit with appropriate code
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
