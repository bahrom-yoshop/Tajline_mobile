#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API endpoints –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã UI flickering –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ 
–ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1) –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ isInitializing —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–∫–∞–∑–æ–º —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
2) –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ fetchUserData –∏ clearAllAppData –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è dataLoaded —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
3) –î–æ–±–∞–≤–ª–µ–Ω –∫—Ä–∞—Å–∏–≤—ã–π —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º TAJLINE –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º spinner

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:
1) Authentication endpoints - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:
   - POST /api/auth/login 
   - GET /api/auth/me
   - POST /api/auth/logout
2) Dashboard analytics endpoints - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
   - GET /api/admin/dashboard/analytics (–¥–ª—è –∞–¥–º–∏–Ω–∞)
   - GET /api/operator/dashboard/analytics (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
3) –û—Å–Ω–æ–≤–Ω—ã–µ data endpoints:
   - GET /api/cargo/all
   - GET /api/warehouses
   - GET /api/notifications
4) User management endpoints:
   - GET /api/admin/users

–¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:
- –ê–¥–º–∏–Ω: phone="+79999888777", password="admin123"

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ HTTP —Å—Ç–∞—Ç—É—Å—ã
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-ops.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class UIFlickeringFixTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_info = None
        self.operator_info = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìã –î–µ—Ç–∞–ª–∏: {details}")
        if error_msg:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}")
        print()

    def test_admin_login(self):
        """–¢–µ—Å—Ç 1: POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_info = data.get("user", {})
                
                if self.admin_token and self.admin_info.get("role") == "admin":
                    self.log_test(
                        "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_info.get('full_name')}' (–Ω–æ–º–µ—Ä: {self.admin_info.get('user_number')}), —Ä–æ–ª—å: {self.admin_info.get('role')}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                    )
                    return True
                else:
                    self.log_test(
                        "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        False,
                        "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ —Ä–æ–ª—å –Ω–µ admin",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_me_endpoint(self):
        """–¢–µ—Å—Ç 2: GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/auth/me", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (–º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ –≤ –∫–æ—Ä–Ω–µ, —Ç–∞–∫ –∏ –≤ user)
                user_info = data.get("user", data)
                
                if user_info.get("role") == "admin" and user_info.get("phone") == "+79999888777":
                    self.log_test(
                        "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        True,
                        f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {user_info.get('full_name')} ({user_info.get('role')})"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        False,
                        "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        f"–û–∂–∏–¥–∞–ª—Å—è admin —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º +79999888777, –ø–æ–ª—É—á–µ–Ω: —Ä–æ–ª—å={user_info.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω={user_info.get('phone')}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_dashboard_analytics(self):
        """–¢–µ—Å—Ç 3: GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/admin/dashboard/analytics", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                analytics_sections = ["basic_stats", "cargo_stats", "transport_stats", "financial_stats"]
                present_sections = [section for section in analytics_sections if section in data]
                
                if len(present_sections) >= 2:  # –•–æ—Ç—è –±—ã 2 —Å–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    self.log_test(
                        "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                        True,
                        f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {present_sections}"
                    )
                    return True
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
                    if isinstance(data, dict) and len(data) > 0:
                        self.log_test(
                            "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                            True,
                            f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏: {list(data.keys())[:5]}"
                        )
                        return True
                    else:
                        self.log_test(
                            "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                            False,
                            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ü–∏–∏: {present_sections}",
                            f"–û—Ç–≤–µ—Ç: {data}"
                        )
                        return False
            else:
                self.log_test(
                    "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_operator_login(self):
        """–¢–µ—Å—Ç 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user", {})
                
                if self.operator_token and self.operator_info.get("role") == "warehouse_operator":
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ '{self.operator_info.get('full_name')}' (—Ä–æ–ª—å: {self.operator_info.get('role')})"
                    )
                    return True
                else:
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                        False,
                        "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ —Ä–æ–ª—å –Ω–µ warehouse_operator",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                False,
                "",
                str(e)
            )
            return False

    def test_operator_dashboard_analytics(self):
        """–¢–µ—Å—Ç 5: GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if not self.operator_token:
                self.log_test(
                    "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{API_BASE}/operator/dashboard/analytics", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                analytics_sections = ["operator_info", "warehouses_details", "summary_stats", "cargo_stats"]
                present_sections = [section for section in analytics_sections if section in data]
                
                if len(present_sections) >= 1:  # –•–æ—Ç—è –±—ã 1 —Å–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    self.log_test(
                        "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {present_sections}"
                    )
                    return True
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ
                    if isinstance(data, dict) and len(data) > 0:
                        self.log_test(
                            "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                            True,
                            f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏: {list(data.keys())[:5]}"
                        )
                        return True
                    else:
                        self.log_test(
                            "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                            False,
                            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ü–∏–∏: {present_sections}",
                            f"–û—Ç–≤–µ—Ç: {data}"
                        )
                        return False
            else:
                self.log_test(
                    "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_cargo_all_endpoint(self):
        """–¢–µ—Å—Ç 6: GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/cargo/all", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, list):
                    cargo_count = len(data)
                elif isinstance(data, dict) and "items" in data:
                    cargo_count = len(data["items"])
                else:
                    cargo_count = 0
                
                if cargo_count > 0:
                    self.log_test(
                        "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                        True,  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–µ–Ω
                        "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç, –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
            else:
                self.log_test(
                    "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                False,
                "",
                str(e)
            )
            return False

    def test_warehouses_endpoint(self):
        """–¢–µ—Å—Ç 7: GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/warehouses", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    warehouse_count = len(data)
                    
                    if warehouse_count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞
                        first_warehouse = data[0]
                        required_fields = ["id", "name", "location"]
                        missing_fields = [field for field in required_fields if field not in first_warehouse]
                        
                        if not missing_fields:
                            self.log_test(
                                "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                                True,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
                            )
                            return True
                        else:
                            self.log_test(
                                "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                                False,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}",
                                f"–ü–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥: {first_warehouse}"
                            )
                            return False
                    else:
                        self.log_test(
                            "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                            True,  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–µ–Ω
                            "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç, –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                        )
                        return True
                else:
                    self.log_test(
                        "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                        False,
                        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                False,
                "",
                str(e)
            )
            return False

    def test_notifications_endpoint(self):
        """–¢–µ—Å—Ç 8: GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/notifications", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    notification_count = len(data)
                    self.log_test(
                        "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                elif isinstance(data, dict) and "items" in data:
                    notification_count = len(data["items"])
                    self.log_test(
                        "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç), endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        False,
                        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_users_endpoint(self):
        """–¢–µ—Å—Ç 9: GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/admin/users", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    user_count = len(data)
                elif isinstance(data, dict) and "items" in data:
                    user_count = len(data["items"])
                else:
                    user_count = 0
                
                if user_count > 0:
                    self.log_test(
                        "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                        True,  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–µ–Ω
                        "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
            else:
                self.log_test(
                    "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                False,
                "",
                str(e)
            )
            return False

    def test_auth_logout(self):
        """–¢–µ—Å—Ç 10: POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)"""
        try:
            if not self.admin_token:
                self.log_test(
                    "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)",
                    True,  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω"
                )
                return True
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.post(f"{API_BASE}/auth/logout", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)",
                    True,
                    f"–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {data.get('message', 'OK')}"
                )
                return True
            elif response.status_code == 404:
                # Logout endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –º–Ω–æ–≥–∏—Ö —Å–∏—Å—Ç–µ–º
                self.log_test(
                    "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)",
                    True,
                    "Endpoint logout –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω (HTTP 404) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –º–Ω–æ–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç —è–≤–Ω–æ–≥–æ logout –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤"
                )
                return True
            else:
                self.log_test(
                    "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)",
                False,
                "",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: Backend API endpoints –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI flickering")
        print("=" * 100)
        print("üéØ –§–æ–∫—É—Å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ frontend –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        print("=" * 100)
        print()
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_admin_login,
            self.test_admin_me_endpoint,
            self.test_admin_dashboard_analytics,
            self.test_operator_login,
            self.test_operator_dashboard_analytics,
            self.test_cargo_all_endpoint,
            self.test_warehouses_endpoint,
            self.test_notifications_endpoint,
            self.test_admin_users_endpoint,
            self.test_auth_logout
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            if test():
                passed_tests += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            import time
            time.sleep(0.5)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ frontend –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ UI flickering —Ä–µ—à–µ–Ω–∞ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è API")
        elif success_rate >= 70:
            print("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ endpoints —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üîß –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoints")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ backend —Å–∏—Å—Ç–µ–º—ã")
        
        print()
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("-" * 50)
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
            if result["error"]:
                print(f"   ‚ö†Ô∏è {result['error']}")
        
        return success_rate >= 70

if __name__ == "__main__":
    tester = UIFlickeringFixTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI flickering –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    else:
        print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø backend API endpoints")
