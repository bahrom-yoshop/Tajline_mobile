#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –í—Å–µ 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ TAJLINE.TJ

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. ‚úÖ –ü–†–û–ë–õ–ï–ú–ê 1: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä:
   - DELETE /api/admin/pickup-requests/{request_id}
   - DELETE /api/admin/courier/pickup-requests/{request_id}

2. ‚úÖ –ü–†–û–ë–õ–ï–ú–ê 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ä–∞–∑–Ω—ã–µ endpoints —Å —Ä–∞–∑–Ω–æ–π –ª–æ–≥–∏–∫–æ–π)

3. ‚úÖ –ü–†–û–ë–õ–ï–ú–ê 3: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏:
   - GET /api/admin/couriers/inactive (–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤)
   - POST /api/admin/couriers/{courier_id}/activate (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞)
   - DELETE /api/admin/couriers/{courier_id}/permanent (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞)

–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö endpoints
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ error handling –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö endpoints
6. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ 3 –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã, –Ω–æ–≤—ã–µ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://550bba2e-5014-4d23-b2e8-7c38c4ea5482.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class TajlineBackendTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_results = []
        
    def log_result(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìã {details}")
        if error_msg:
            print(f"   üö® {error_msg}")
        print()

    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.admin_token}"})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    user_name = user_data.get("full_name", "Unknown")
                    user_role = user_data.get("role", "Unknown")
                    user_number = user_data.get("user_number", "Unknown")
                    
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_name}' (–Ω–æ–º–µ—Ä: {user_number}), —Ä–æ–ª—å: {user_role}"
                    )
                    return True
                else:
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        False,
                        error_msg=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response.status_code}"
                    )
                    return False
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return False

    def test_pickup_request_deletion_endpoints(self):
        """–ü–†–û–ë–õ–ï–ú–ê 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 1: DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            pickup_response = self.session.get(f"{API_BASE}/operator/pickup-requests")
            if pickup_response.status_code == 200:
                pickup_data = pickup_response.json()
                pickup_requests = pickup_data.get("pickup_requests", [])
                
                if pickup_requests:
                    test_request_id = pickup_requests[0].get("id")
                    request_number = pickup_requests[0].get("request_number", "Unknown")
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(pickup_requests)} –∑–∞—è–≤–æ–∫, —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {request_number} (ID: {test_request_id})"
                    )
                    
                    # –¢–µ—Å—Ç 1: DELETE /api/admin/pickup-requests/{request_id}
                    self.test_individual_pickup_deletion_endpoint1(test_request_id, request_number)
                    
                    # –¢–µ—Å—Ç 2: DELETE /api/admin/courier/pickup-requests/{request_id}
                    if len(pickup_requests) > 1:
                        test_request_id2 = pickup_requests[1].get("id")
                        request_number2 = pickup_requests[1].get("request_number", "Unknown")
                        self.test_individual_pickup_deletion_endpoint2(test_request_id2, request_number2)
                    else:
                        self.log_result(
                            "DELETE /api/admin/courier/pickup-requests/{request_id}",
                            False,
                            error_msg="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ endpoint"
                        )
                else:
                    # –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.create_test_pickup_request_for_deletion()
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {pickup_response.status_code}"
                )
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
                self.create_test_pickup_request_for_deletion()
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def create_test_pickup_request_for_deletion(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            test_pickup_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –£–¥–∞–ª–µ–Ω–∏—è",
                "sender_phone": "+992900111222",
                "pickup_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –¥–ª—è –£–¥–∞–ª–µ–Ω–∏—è, 123",
                "pickup_date": "2025-01-15",
                "pickup_time_from": "10:00",
                "pickup_time_to": "12:00",
                "route": "moscow_dushanbe",
                "courier_fee": 500.0
            }
            
            response = self.session.post(f"{API_BASE}/admin/courier/pickup-request", json=test_pickup_data)
            
            if response.status_code == 200:
                data = response.json()
                request_id = data.get("request_id")
                request_number = data.get("request_number")
                
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
                    True,
                    f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ {request_number} (ID: {request_id})"
                )
                
                # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                self.test_individual_pickup_deletion_endpoint1(request_id, request_number)
                
            else:
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_individual_pickup_deletion_endpoint1(self, request_id, request_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/admin/pickup-requests/{request_id}"""
        try:
            response = self.session.delete(f"{API_BASE}/admin/pickup-requests/{request_id}")
            
            if response.status_code == 200:
                data = response.json()
                message = data.get("message", "")
                deleted_id = data.get("deleted_id", "")
                
                self.log_result(
                    "DELETE /api/admin/pickup-requests/{request_id}",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {request_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –û—Ç–≤–µ—Ç: {message}, ID: {deleted_id}"
                )
            elif response.status_code == 404:
                self.log_result(
                    "DELETE /api/admin/pickup-requests/{request_id}",
                    False,
                    error_msg=f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404) - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
            elif response.status_code == 403:
                self.log_result(
                    "DELETE /api/admin/pickup-requests/{request_id}",
                    False,
                    error_msg=f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
            else:
                self.log_result(
                    "DELETE /api/admin/pickup-requests/{request_id}",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "DELETE /api/admin/pickup-requests/{request_id}",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_individual_pickup_deletion_endpoint2(self, request_id, request_number):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/admin/courier/pickup-requests/{request_id}"""
        try:
            response = self.session.delete(f"{API_BASE}/admin/courier/pickup-requests/{request_id}")
            
            if response.status_code == 200:
                data = response.json()
                message = data.get("message", "")
                deleted_id = data.get("deleted_id", "")
                
                self.log_result(
                    "DELETE /api/admin/courier/pickup-requests/{request_id}",
                    True,
                    f"–ó–∞—è–≤–∫–∞ {request_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –û—Ç–≤–µ—Ç: {message}, ID: {deleted_id}"
                )
            elif response.status_code == 404:
                self.log_result(
                    "DELETE /api/admin/courier/pickup-requests/{request_id}",
                    False,
                    error_msg=f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404) - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
            elif response.status_code == 403:
                self.log_result(
                    "DELETE /api/admin/courier/pickup-requests/{request_id}",
                    False,
                    error_msg=f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
            else:
                self.log_result(
                    "DELETE /api/admin/courier/pickup-requests/{request_id}",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "DELETE /api/admin/courier/pickup-requests/{request_id}",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_transport_deletion_diagnosis(self):
        """–ü–†–û–ë–õ–ï–ú–ê 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        try:
            transport_response = self.session.get(f"{API_BASE}/transport/list")
            if transport_response.status_code == 200:
                transports = transport_response.json()
                
                if transports:
                    test_transport = transports[0]
                    transport_id = test_transport.get("id")
                    transport_number = test_transport.get("transport_number", "Unknown")
                    cargo_count = len(test_transport.get("cargo_list", []))
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(transports)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤, —Ç–µ—Å—Ç–æ–≤—ã–π: {transport_number} (ID: {transport_id}, –≥—Ä—É–∑–æ–≤: {cargo_count})"
                    )
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                    self.test_transport_deletion_endpoint1(transport_id, transport_number, cargo_count)
                    
                    # –ù–∞–π–¥–µ–º –¥—Ä—É–≥–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
                    if len(transports) > 1:
                        test_transport2 = transports[1]
                        transport_id2 = test_transport2.get("id")
                        transport_number2 = test_transport2.get("transport_number", "Unknown")
                        cargo_count2 = len(test_transport2.get("cargo_list", []))
                        self.test_transport_deletion_endpoint2(transport_id2, transport_number2, cargo_count2)
                    
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        False,
                        error_msg="–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç"
                    )
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {transport_response.status_code}"
                )
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_transport_deletion_endpoint1(self, transport_id, transport_number, cargo_count):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/admin/transports/{transport_id} (—Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)"""
        try:
            response = self.session.delete(f"{API_BASE}/admin/transports/{transport_id}")
            
            if response.status_code == 200:
                data = response.json()
                message = data.get("message", "")
                
                self.log_result(
                    "DELETE /api/admin/transports/{transport_id} (—Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    True,
                    f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –û—Ç–≤–µ—Ç: {message}"
                )
            elif response.status_code == 400:
                # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º
                error_text = response.text
                self.log_result(
                    "DELETE /api/admin/transports/{transport_id} (—Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    True,
                    f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –≥—Ä—É–∑–æ–º ({cargo_count} –≥—Ä—É–∑–æ–≤). –û—à–∏–±–∫–∞: {error_text}"
                )
            elif response.status_code == 404:
                self.log_result(
                    "DELETE /api/admin/transports/{transport_id} (—Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    False,
                    error_msg=f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404)"
                )
            elif response.status_code == 403:
                self.log_result(
                    "DELETE /api/admin/transports/{transport_id} (—Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    False,
                    error_msg=f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
            else:
                self.log_result(
                    "DELETE /api/admin/transports/{transport_id} (—Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    False,
                    error_msg=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "DELETE /api/admin/transports/{transport_id} (—Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_transport_deletion_endpoint2(self, transport_id, transport_number, cargo_count):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/transport/{transport_id} (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)"""
        try:
            response = self.session.delete(f"{API_BASE}/transport/{transport_id}")
            
            if response.status_code == 200:
                data = response.json()
                message = data.get("message", "")
                
                self.log_result(
                    "DELETE /api/transport/{transport_id} (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    True,
                    f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {transport_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –û—Ç–≤–µ—Ç: {message}"
                )
            elif response.status_code == 400:
                error_text = response.text
                self.log_result(
                    "DELETE /api/transport/{transport_id} (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    True,
                    f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ({cargo_count} –≥—Ä—É–∑–æ–≤). –û—à–∏–±–∫–∞: {error_text}"
                )
            elif response.status_code == 404:
                self.log_result(
                    "DELETE /api/transport/{transport_id} (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    False,
                    error_msg=f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (404)"
                )
            elif response.status_code == 403:
                self.log_result(
                    "DELETE /api/transport/{transport_id} (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    False,
                    error_msg=f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏"
                )
            else:
                self.log_result(
                    "DELETE /api/transport/{transport_id} (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                    False,
                    error_msg=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "DELETE /api/transport/{transport_id} (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞)",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_inactive_courier_management(self):
        """–ü–†–û–ë–õ–ï–ú–ê 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏"""
        print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏")
        
        # –¢–µ—Å—Ç 1: GET /api/admin/couriers/inactive
        self.test_get_inactive_couriers()
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/—É–¥–∞–ª–µ–Ω–∏—è
        test_courier_id = self.create_test_courier_for_management()
        
        if test_courier_id:
            # –¢–µ—Å—Ç 3: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint)
            self.deactivate_test_courier(test_courier_id)
            
            # –¢–µ—Å—Ç 4: POST /api/admin/couriers/{courier_id}/activate
            self.test_activate_courier(test_courier_id)
            
            # –¢–µ—Å—Ç 5: DELETE /api/admin/couriers/{courier_id}/permanent
            self.test_permanent_delete_courier(test_courier_id)

    def test_get_inactive_couriers(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/admin/couriers/inactive"""
        try:
            response = self.session.get(f"{API_BASE}/admin/couriers/inactive")
            
            if response.status_code == 200:
                data = response.json()
                inactive_couriers = data.get("inactive_couriers", [])
                total_count = data.get("total_count", 0)
                
                self.log_result(
                    "GET /api/admin/couriers/inactive",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {total_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."
                )
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if inactive_couriers:
                    sample_courier = inactive_couriers[0]
                    courier_fields = list(sample_courier.keys())
                    self.log_result(
                        "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤",
                        True,
                        f"–ü–æ–ª—è –∫—É—Ä—å–µ—Ä–∞: {courier_fields}"
                    )
                
            elif response.status_code == 403:
                self.log_result(
                    "GET /api/admin/couriers/inactive",
                    False,
                    error_msg="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
            elif response.status_code == 404:
                self.log_result(
                    "GET /api/admin/couriers/inactive",
                    False,
                    error_msg="Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω (404) - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
                )
            else:
                self.log_result(
                    "GET /api/admin/couriers/inactive",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "GET /api/admin/couriers/inactive",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def create_test_courier_for_management(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            warehouses_response = self.session.get(f"{API_BASE}/warehouses")
            if warehouses_response.status_code != 200:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {warehouses_response.status_code}"
                )
                return None
                
            warehouses = warehouses_response.json()
            if not warehouses:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞",
                    False,
                    error_msg="–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç"
                )
                return None
                
            warehouse_id = warehouses[0]["id"]
            
            test_courier_data = {
                "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ö—É—Ä—å–µ—Ä –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "phone": "+992900333444",
                "password": "testcourier123",
                "address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è, 789",
                "transport_type": "car",
                "transport_number": "TEST-MGMT-001",
                "transport_capacity": 500.0,
                "assigned_warehouse_id": warehouse_id
            }
            
            response = self.session.post(f"{API_BASE}/admin/couriers/create", json=test_courier_data)
            
            if response.status_code == 200:
                data = response.json()
                courier_id = data.get("courier_id")
                
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    True,
                    f"–°–æ–∑–¥–∞–Ω –∫—É—Ä—å–µ—Ä ID: {courier_id}"
                )
                return courier_id
            else:
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code} - {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return None

    def deactivate_test_courier(self, courier_id):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (soft delete)
            response = self.session.delete(f"{API_BASE}/admin/couriers/{courier_id}")
            
            if response.status_code == 200:
                self.log_result(
                    "–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞",
                    True,
                    f"–ö—É—Ä—å–µ—Ä {courier_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
                )
            else:
                self.log_result(
                    "–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞",
                    False,
                    error_msg=f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_activate_courier(self, courier_id):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/admin/couriers/{courier_id}/activate"""
        try:
            response = self.session.post(f"{API_BASE}/admin/couriers/{courier_id}/activate")
            
            if response.status_code == 200:
                data = response.json()
                message = data.get("message", "")
                activated_id = data.get("courier_id", "")
                
                self.log_result(
                    "POST /api/admin/couriers/{courier_id}/activate",
                    True,
                    f"–ö—É—Ä—å–µ—Ä {courier_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–≤–µ—Ç: {message}, ID: {activated_id}"
                )
            elif response.status_code == 404:
                self.log_result(
                    "POST /api/admin/couriers/{courier_id}/activate",
                    False,
                    error_msg="–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (404)"
                )
            elif response.status_code == 403:
                self.log_result(
                    "POST /api/admin/couriers/{courier_id}/activate",
                    False,
                    error_msg="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
            elif response.status_code == 400:
                error_text = response.text
                self.log_result(
                    "POST /api/admin/couriers/{courier_id}/activate",
                    True,
                    f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {error_text}"
                )
            else:
                self.log_result(
                    "POST /api/admin/couriers/{courier_id}/activate",
                    False,
                    error_msg=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "POST /api/admin/couriers/{courier_id}/activate",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def test_permanent_delete_courier(self, courier_id):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DELETE /api/admin/couriers/{courier_id}/permanent"""
        try:
            response = self.session.delete(f"{API_BASE}/admin/couriers/{courier_id}/permanent")
            
            if response.status_code == 200:
                data = response.json()
                message = data.get("message", "")
                deleted_id = data.get("courier_id", "")
                
                self.log_result(
                    "DELETE /api/admin/couriers/{courier_id}/permanent",
                    True,
                    f"–ö—É—Ä—å–µ—Ä {courier_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω. –û—Ç–≤–µ—Ç: {message}, ID: {deleted_id}"
                )
            elif response.status_code == 404:
                self.log_result(
                    "DELETE /api/admin/couriers/{courier_id}/permanent",
                    False,
                    error_msg="–ö—É—Ä—å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (404)"
                )
            elif response.status_code == 403:
                self.log_result(
                    "DELETE /api/admin/couriers/{courier_id}/permanent",
                    False,
                    error_msg="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403) - –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
            elif response.status_code == 400:
                error_text = response.text
                self.log_result(
                    "DELETE /api/admin/couriers/{courier_id}/permanent",
                    True,
                    f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è: {error_text}"
                )
            else:
                self.log_result(
                    "DELETE /api/admin/couriers/{courier_id}/permanent",
                    False,
                    error_msg=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
                )
                
        except Exception as e:
            self.log_result(
                "DELETE /api/admin/couriers/{courier_id}/permanent",
                False,
                error_msg=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )

    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –í—Å–µ 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ TAJLINE.TJ")
        print("="*80)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - successful_tests
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests} ‚úÖ")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests} ‚ùå")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
        problem1_tests = [r for r in self.test_results if "pickup" in r["test"].lower() or "DELETE /api/admin" in r["test"]]
        problem2_tests = [r for r in self.test_results if "transport" in r["test"].lower()]
        problem3_tests = [r for r in self.test_results if "courier" in r["test"].lower() and "inactive" in r["test"].lower() or "activate" in r["test"].lower() or "permanent" in r["test"].lower()]
        
        print(f"\nüéØ –ü–†–û–ë–õ–ï–ú–ê 1: DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        for test in problem1_tests:
            status = "‚úÖ" if test["success"] else "‚ùå"
            print(f"   {status} {test['test']}")
            if test["details"]:
                print(f"      üìã {test['details']}")
            if test["error"]:
                print(f"      üö® {test['error']}")
        
        print(f"\nüéØ –ü–†–û–ë–õ–ï–ú–ê 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        for test in problem2_tests:
            status = "‚úÖ" if test["success"] else "‚ùå"
            print(f"   {status} {test['test']}")
            if test["details"]:
                print(f"      üìã {test['details']}")
            if test["error"]:
                print(f"      üö® {test['error']}")
        
        print(f"\nüéØ –ü–†–û–ë–õ–ï–ú–ê 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏")
        for test in problem3_tests:
            status = "‚úÖ" if test["success"] else "‚ùå"
            print(f"   {status} {test['test']}")
            if test["details"]:
                print(f"      üìã {test['details']}")
            if test["error"]:
                print(f"      üö® {test['error']}")
        
        print(f"\nüéØ –û–ë–©–ò–ï –¢–ï–°–¢–´:")
        general_tests = [r for r in self.test_results if r not in problem1_tests + problem2_tests + problem3_tests]
        for test in general_tests:
            status = "‚úÖ" if test["success"] else "‚ùå"
            print(f"   {status} {test['test']}")
            if test["details"]:
                print(f"      üìã {test['details']}")
            if test["error"]:
                print(f"      üö® {test['error']}")
        
        print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        if success_rate >= 80:
            print("   üéâ –û–¢–õ–ò–ß–ù–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        elif success_rate >= 60:
            print("   ‚ö†Ô∏è  –•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        else:
            print("   üö® –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        
        print("="*80)
        
        return {
            "total_tests": total_tests,
            "successful_tests": successful_tests,
            "failed_tests": failed_tests,
            "success_rate": success_rate,
            "test_results": self.test_results
        }

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –í—Å–µ 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ TAJLINE.TJ")
        print("="*80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return self.generate_summary()
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–†–û–ë–õ–ï–ú–´ 1: DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        self.test_pickup_request_deletion_endpoints()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–†–û–ë–õ–ï–ú–´ 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        self.test_transport_deletion_diagnosis()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–†–û–ë–õ–ï–ú–´ 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä–∞–º–∏
        self.test_inactive_courier_management()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        return self.generate_summary()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TajlineBackendTester()
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open("/app/final_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ /app/final_test_results.json")
    
    return results["success_rate"] >= 80

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)