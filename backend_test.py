#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API –ø–æ—Å–ª–µ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π QR –∫–æ–¥–æ–≤ - —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –û–î–ò–ù QR –∫–æ–¥ –¥–ª—è –ö–ê–ñ–î–û–ì–û –¢–ò–ü–ê –ì–†–£–ó–ê (–≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥—É—é –µ–¥–∏–Ω–∏—Ü—É). 
–ù—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API endpoints –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø QR –ö–û–î–û–í:
1. ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –æ–¥–∏–Ω QR –∫–æ–¥ –Ω–∞ —Ç–∏–ø –≥—Ä—É–∑–∞ (–Ω–µ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É)
2. ‚úÖ QR –∫–æ–¥—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–∞–∂–¥–æ–º—É —Ä—è–¥—É –≥—Ä—É–∑–∞ –∏–∑ —Ñ–æ—Ä–º—ã
3. ‚úÖ –£–ª—É—á—à–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR –∫–æ–¥–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–∑–µ

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø - POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
2. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT –°–û–ó–î–ê–ù–ò–Ø –ì–†–£–ó–ê - POST /api/operator/cargo/accept - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞
3. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –§–û–†–ú–´ - GET /api/operator/warehouses, GET /api/warehouses/all-cities

–¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:
- –û–ø–µ—Ä–∞—Ç–æ—Ä: +79777888999/warehouse123
- –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å 2-3 —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–∞–∂–¥—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥
"""

import requests
import json
import sys
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º backend URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = "https://tajline-logistics-1.preview.emergentagent.com/api"

class TajlineBackendTester:
    def __init__(self):
        self.backend_url = BACKEND_URL
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.test_results = []
        self.test_cargo_number = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞
        
    def log_test(self, test_name, success, details="", error=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"   üìã {details}")
        if error:
            print(f"   ‚ùå Error: {error}")
        print()

    def test_admin_authentication(self):
        """1. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê"""
        print("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê...")
        
        try:
            # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{self.backend_url}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.log_test(
                    "POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})"
                )
                
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({"Authorization": f"Bearer {self.admin_token}"})
                
                return True
            else:
                self.log_test(
                    "POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                error=str(e)
            )
            return False

    def test_operator_authentication(self):
        """2. –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê"""
        print("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator_session = requests.Session()
            
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = operator_session.post(f"{self.backend_url}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.log_test(
                    "POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name')} (—Ä–æ–ª—å: {user_info.get('role')})"
                )
                
                return True
            else:
                self.log_test(
                    "POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/auth/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                error=str(e)
            )
            return False

    def test_auth_me_endpoint(self):
        """3. –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –¢–ï–ö–£–©–ï–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""
        print("üë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GET /api/auth/me...")
        
        try:
            response = self.session.get(f"{self.backend_url}/auth/me")
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    True,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('full_name')} (ID: {data.get('id')}, —Ä–æ–ª—å: {data.get('role')})"
                )
                return True
            else:
                self.log_test(
                    "GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                False,
                error=str(e)
            )
            return False

    def test_operator_warehouses(self):
        """4. –ü–û–õ–£–ß–ï–ù–ò–ï –°–ö–õ–ê–î–û–í –û–ü–ï–†–ê–¢–û–†–ê"""
        print("üè≠ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GET /api/operator/warehouses...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{self.backend_url}/operator/warehouses", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                warehouses_count = len(data) if isinstance(data, list) else 0
                
                self.log_test(
                    "GET /api/operator/warehouses - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {warehouses_count}"
                )
                return True
            else:
                self.log_test(
                    "GET /api/operator/warehouses - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/operator/warehouses - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                False,
                error=str(e)
            )
            return False

    def test_all_cities_endpoint(self):
        """5. –ü–û–õ–£–ß–ï–ù–ò–ï –ì–û–†–û–î–û–í –î–õ–Ø –ê–í–¢–û–ö–û–ú–ü–õ–ò–¢–ê"""
        print("üåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GET /api/warehouses/all-cities...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{self.backend_url}/warehouses/all-cities", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                cities_count = len(data) if isinstance(data, list) else 0
                
                self.log_test(
                    "GET /api/warehouses/all-cities - –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {cities_count}"
                )
                return True
            else:
                self.log_test(
                    "GET /api/warehouses/all-cities - –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/warehouses/all-cities - –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤",
                False,
                error=str(e)
            )
            return False

    def test_operator_dashboard_analytics(self):
        """6. –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –û–ü–ï–†–ê–¢–û–†–ê"""
        print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GET /api/operator/dashboard/analytics...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{self.backend_url}/operator/dashboard/analytics", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                self.log_test(
                    "GET /api/operator/dashboard/analytics - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return True
            else:
                self.log_test(
                    "GET /api/operator/dashboard/analytics - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/operator/dashboard/analytics - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
                False,
                error=str(e)
            )
            return False

    def test_cargo_accept_endpoint_with_multiple_cargo_types(self):
        """7. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò –° –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –¢–ò–ü–ê–ú–ò –ì–†–£–ó–ê"""
        print("üíæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POST /api/operator/cargo/accept —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å 3 —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞
            # –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ - –æ–¥–∏–Ω QR –∫–æ–¥ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR",
                "sender_phone": "+79991234567",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR",
                "recipient_phone": "+79997654321",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, –ø—Ä–æ—Å–ø–µ–∫—Ç –†—É–¥–∞–∫–∏, 123",
                "cargo_items": [
                    {
                        "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ (—Ç–µ–ª–µ–≤–∏–∑–æ—Ä)",
                        "weight": 15.0,
                        "price_per_kg": 200.0
                    },
                    {
                        "cargo_name": "–û–¥–µ–∂–¥–∞ (–∑–∏–º–Ω–∏–µ –∫—É—Ä—Ç–∫–∏)", 
                        "weight": 8.0,
                        "price_per_kg": 150.0
                    },
                    {
                        "cargo_name": "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è (—Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã)",
                        "weight": 5.0,
                        "price_per_kg": 300.0
                    }
                ],
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ - –∫–∞–∂–¥—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π QR –∫–æ–¥",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "payment_amount": 7700.0  # (15*200 + 8*150 + 5*300) = 3000 + 1200 + 1500 = 5700
            }
            
            response = self.session.post(f"{self.backend_url}/operator/cargo/accept", json=cargo_data, headers=headers)
            
            if response.status_code in [200, 201]:
                data = response.json()
                cargo_number = data.get("cargo_number", "N/A")
                cargo_items = data.get("cargo_items", [])
                qr_codes = data.get("qr_codes", [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏—Å—å QR –∫–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
                expected_qr_count = len(cargo_data["cargo_items"])
                actual_qr_count = len(qr_codes) if qr_codes else 0
                
                details = f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {cargo_number}. "
                details += f"–¢–∏–ø–æ–≤ –≥—Ä—É–∑–∞: {len(cargo_items)}, "
                details += f"QR –∫–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {actual_qr_count}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤
                if actual_qr_count == expected_qr_count:
                    details += f" ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ QR –∫–æ–¥–æ–≤ (–æ–¥–∏–Ω –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞)"
                else:
                    details += f" ‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å {expected_qr_count} QR –∫–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {actual_qr_count}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_items
                if cargo_items:
                    details += f". –ü–æ–ª—è cargo_items: {list(cargo_items[0].keys()) if cargo_items else 'N/A'}"
                
                self.log_test(
                    "POST /api/operator/cargo/accept - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞",
                    True,
                    details
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                self.test_cargo_number = cargo_number
                return True
            else:
                self.log_test(
                    "POST /api/operator/cargo/accept - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/operator/cargo/accept - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞",
                False,
                error=str(e)
            )
            return False

    def test_cargo_number_generation_uniqueness(self):
        """8. –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –ù–û–ú–ï–†–û–í –ì–†–£–ó–ê"""
        print("üî¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ì–ï–ù–ï–†–ê–¶–ò–ò cargo_number...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞ –≤ –∑–∞—è–≤–∫–µ –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
            if hasattr(self, 'test_cargo_number') and self.test_cargo_number:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–∞
                cargo_number = self.test_cargo_number
                
                # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: APPLICATION_NUMBER/01, APPLICATION_NUMBER/02, APPLICATION_NUMBER/03
                base_number = cargo_number.split('/')[0] if '/' in cargo_number else cargo_number
                
                details = f"–ë–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {base_number}. "
                
                # –î–ª—è –∑–∞—è–≤–∫–∏ —Å 3 —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–æ–º–µ—Ä–∞:
                # BASE_NUMBER/01, BASE_NUMBER/02, BASE_NUMBER/03
                expected_numbers = [f"{base_number}/01", f"{base_number}/02", f"{base_number}/03"]
                details += f"–û–∂–∏–¥–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞ QR –∫–æ–¥–æ–≤: {', '.join(expected_numbers)}"
                
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ cargo_number",
                    True,
                    details
                )
                return True
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ cargo_number",
                    False,
                    error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ cargo_number",
                False,
                error=str(e)
            )
            return False

    def test_warehouse_notifications_endpoint(self):
        """9. –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–ê"""
        print("üîî –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GET /api/operator/warehouse-notifications...")
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{self.backend_url}/operator/warehouse-notifications", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                notifications_count = len(data) if isinstance(data, list) else data.get("total_count", 0)
                
                self.log_test(
                    "GET /api/operator/warehouse-notifications - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications_count}"
                )
                return True
            else:
                self.log_test(
                    "GET /api/operator/warehouse-notifications - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/operator/warehouse-notifications - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞",
                False,
                error=str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API –ø–æ—Å–ª–µ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –≤ TAJLINE.TJ")
        print("=" * 120)
        print()
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç)
        operator_auth_success = self.test_operator_authentication()
        
        if not operator_auth_success:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞!")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: +79777888999/warehouse123")
            return
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º—ã
        print("üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –î–õ–Ø –§–û–†–ú–´...")
        self.test_operator_warehouses()
        self.test_all_cities_endpoint()
        
        # 3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –° –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –¢–ò–ü–ê–ú–ò –ì–†–£–ó–ê...")
        cargo_creation_success = self.test_cargo_accept_endpoint_with_multiple_cargo_types()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–∞
        if cargo_creation_success:
            self.test_cargo_number_generation_uniqueness()
        
        # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        admin_auth_success = self.test_admin_authentication()
        if admin_auth_success:
            self.test_auth_me_endpoint()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("=" * 120)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 120)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 80)
        
        for result in self.test_results:
            status = "‚úÖ PASS" if result["success"] else "‚ùå FAIL"
            print(f"{status} - {result['test']}")
            if result["details"]:
                print(f"   üìã {result['details']}")
            if result["error"]:
                print(f"   ‚ùå {result['error']}")
        
        print()
        print("=" * 120)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        if success_rate >= 90:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î: –í–°–ï API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø QR –ö–û–î–û–í!")
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –ù–ï –ü–û–í–õ–ò–Ø–õ–ò –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.")
            print("‚úÖ POST /api/operator/cargo/accept –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞.")
            print("‚úÖ –ö–∞–∂–¥—ã–π —Ç–∏–ø –≥—Ä—É–∑–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥ (—Ñ–æ—Ä–º–∞—Ç: APPLICATION_NUMBER/01, /02, /03).")
            print("‚úÖ –ü–æ–ª—è cargo_items –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è: cargo_name, quantity, weight, price_per_kg, total_amount.")
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è cargo_number –¥–ª—è QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        elif success_rate >= 75:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ endpoints —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å QR –∫–æ–¥–∞–º–∏.")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–º—Å—è —Ç–µ—Å—Ç–∞–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤.")
        else:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ API endpoints –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–æ–≤!")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend –ø—Ä–æ–±–ª–µ–º.")
            print("‚ùå –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è QR –∫–æ–¥–æ–≤ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.")
        
        print("=" * 120)

if __name__ == "__main__":
    tester = TajlineBackendTester()
    tester.run_all_tests()