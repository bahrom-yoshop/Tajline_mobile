#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π endpoint /api/operator/cargo/{cargo_id}/placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235

–ö–û–ù–¢–ï–ö–°–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π endpoint /api/operator/cargo/{cargo_id}/placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235:

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê:
1. –ü–æ–ª—É—á–∏—Ç—å placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235 (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –∑–∞—è–≤–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ endpoint —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:
   - sender_full_name, sender_phone, sender_address (–¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
   - recipient_full_name, recipient_phone, recipient_address (–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è)  
   - payment_method, delivery_method, payment_status (—Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è)
   - accepting_warehouse, delivery_warehouse, pickup_city, delivery_city (—Å–∫–ª–∞–¥—ã –∏ –≥–æ—Ä–æ–¥–∞)
   - operator_name, accepting_operator (–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)
   - created_date (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è)
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ endpoint –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 200
4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_types —Å individual_units
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ —Ä–∞–≤–Ω—ã null

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- HTTP 200 –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
- –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ
- –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ–ø–µ—Ä—å —Å–º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ warehouse_operator (+79777888999, warehouse123) –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import requests
import json
import time
from datetime import datetime
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-7.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PlacementStatusTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_user = None
        self.warehouse_id = None
        self.cargo_25082235_id = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", expected="", actual=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "expected": expected,
            "actual": actual,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and expected:
            print(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")
            print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ: {actual}")
        print()
        
    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/auth/login",
                json=OPERATOR_CREDENTIALS,
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me", timeout=30)
                if user_response.status_code == 200:
                    self.operator_user = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_user.get('full_name')} (—Ä–æ–ª—å: {self.operator_user.get('role')})"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", False, f"–û—à–∏–±–∫–∞: {user_response.status_code}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def find_cargo_25082235_id(self):
        """–ü–æ–∏—Å–∫ ID –∑–∞—è–≤–∫–∏ 25082235 –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            print("üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            response = self.session.get(f"{API_BASE}/operator/cargo/fully-placed", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                for item in items:
                    if item.get("cargo_number") == "25082235":
                        self.cargo_25082235_id = item.get("id")
                        self.log_test(
                            "–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235",
                            True,
                            f"–ó–∞—è–≤–∫–∞ 25082235 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö (ID: {self.cargo_25082235_id})"
                        )
                        return True
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                placement_response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement", timeout=30)
                
                if placement_response.status_code == 200:
                    placement_data = placement_response.json()
                    placement_items = placement_data.get("items", [])
                    
                    for item in placement_items:
                        if item.get("cargo_number") == "25082235":
                            self.cargo_25082235_id = item.get("id")
                            self.log_test(
                                "–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235",
                                True,
                                f"–ó–∞—è–≤–∫–∞ 25082235 –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (ID: {self.cargo_25082235_id})"
                            )
                            return True
                
                self.log_test("–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235", False, "–ó–∞—è–≤–∫–∞ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤")
                return False
            else:
                self.log_test("–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235", False, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 25082235", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def test_placement_status_endpoint(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: endpoint /api/operator/cargo/{cargo_id}/placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235"""
        try:
            print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: ENDPOINT PLACEMENT-STATUS –î–õ–Ø –ó–ê–Ø–í–ö–ò 25082235")
            
            if not self.cargo_25082235_id:
                self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ placement-status", False, "ID –∑–∞—è–≤–∫–∏ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            response = self.session.get(f"{API_BASE}/operator/cargo/{self.cargo_25082235_id}/placement-status", timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP 200 –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
                self.log_test(
                    "HTTP 200 –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫",
                    True,
                    f"Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 200 –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                required_modal_fields = [
                    "sender_full_name", "sender_phone", "sender_address",
                    "recipient_full_name", "recipient_phone", "recipient_address",
                    "payment_method", "delivery_method", "payment_status",
                    "accepting_warehouse", "delivery_warehouse", "pickup_city", "delivery_city",
                    "operator_name", "accepting_operator", "created_date"
                ]
                
                present_fields = []
                missing_fields = []
                null_fields = []
                
                for field in required_modal_fields:
                    if field in data:
                        present_fields.append(field)
                        if data[field] is None or data[field] == "":
                            null_fields.append(field)
                    else:
                        missing_fields.append(field)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_types —Å individual_units
                cargo_types_valid = False
                individual_units_count = 0
                
                if "cargo_types" in data:
                    cargo_types = data.get("cargo_types", [])
                    if isinstance(cargo_types, list) and len(cargo_types) > 0:
                        cargo_types_valid = True
                        for cargo_type in cargo_types:
                            if "individual_units" in cargo_type:
                                individual_units = cargo_type.get("individual_units", [])
                                individual_units_count += len(individual_units)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π
                fields_success_rate = (len(present_fields) / len(required_modal_fields)) * 100
                
                self.log_test(
                    "–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç",
                    len(missing_fields) == 0,
                    f"–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {len(present_fields)}/{len(required_modal_fields)} ({fields_success_rate:.1f}%)\n" +
                    f"   üìã –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {', '.join(present_fields)}\n" +
                    (f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {', '.join(missing_fields)}" if missing_fields else "   ‚úÖ –í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"),
                    "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing_fields}" if missing_fields else "–í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ —Ä–∞–≤–Ω—ã null
                self.log_test(
                    "–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ —Ä–∞–≤–Ω—ã null",
                    len(null_fields) == 0,
                    f"–ü—É—Å—Ç—ã–µ/null –ø–æ–ª—è: {len(null_fields)}/{len(present_fields)}\n" +
                    (f"   ‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –ø–æ–ª—è: {', '.join(null_fields)}" if null_fields else "   ‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"),
                    "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã",
                    f"–ü—É—Å—Ç—ã–µ –ø–æ–ª—è: {null_fields}" if null_fields else "–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_types —Å individual_units
                self.log_test(
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_types —Å individual_units",
                    cargo_types_valid and individual_units_count > 0,
                    f"cargo_types –≤–∞–ª–∏–¥–Ω–∞: {cargo_types_valid}, individual_units –Ω–∞–π–¥–µ–Ω–æ: {individual_units_count}",
                    "cargo_types –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å individual_units",
                    f"cargo_types –≤–∞–ª–∏–¥–Ω–∞: {cargo_types_valid}, individual_units: {individual_units_count}"
                )
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ 25082235
                cargo_number = data.get("cargo_number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                total_quantity = data.get("total_quantity", 0)
                total_placed = data.get("total_placed", 0)
                placement_progress = data.get("placement_progress", "0/0")
                
                self.log_test(
                    "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ 25082235",
                    True,
                    f"–ó–∞—è–≤–∫–∞: {cargo_number}, –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_quantity}, –†–∞–∑–º–µ—â–µ–Ω–æ: {total_placed}, –ü—Ä–æ–≥—Ä–µ—Å—Å: {placement_progress}"
                )
                
                # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                overall_success = (
                    len(missing_fields) == 0 and 
                    len(null_fields) <= 2 and  # –î–æ–ø—É—Å–∫–∞–µ–º –¥–æ 2 –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π –∫–∞–∫ minor issues
                    cargo_types_valid and 
                    individual_units_count > 0
                )
                
                return overall_success
                
            else:
                self.log_test(
                    "HTTP 200 –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫",
                    False,
                    f"Endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP {response.status_code} –≤–º–µ—Å—Ç–æ 200",
                    "HTTP 200",
                    f"HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ placement-status endpoint", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235"""
        print("üéØ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ENDPOINT PLACEMENT-STATUS –î–õ–Ø –ó–ê–Ø–í–ö–ò 25082235")
        print("=" * 80)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        if not self.authenticate_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False
        
        if not self.find_cargo_25082235_id():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 25082235")
            return False
        
        # –ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
        test_result = self.test_placement_status_endpoint()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò 25082235:")
        print("=" * 80)
        
        if test_result:
            print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: Endpoint /api/operator/cargo/{cargo_id}/placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235")
            print("üéâ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢:")
            print("   ‚úÖ HTTP 200 –æ—Ç–≤–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
            print("   ‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
            print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ cargo_types —Å individual_units –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            print("   ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ–ø–µ—Ä—å —Å–º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: Endpoint /api/operator/cargo/{cargo_id}/placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235")
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
            print("   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ —Ä–∞–≤–Ω—ã null")
            print("   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_types —Å individual_units")
        
        return test_result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacementStatusTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("Endpoint /api/operator/cargo/{cargo_id}/placement-status –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("–í—Å–µ –ø–æ–ª—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        return 0
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ endpoint –¥–ª—è –∑–∞—è–≤–∫–∏ 25082235")
        return 1

if __name__ == "__main__":
    exit(main())