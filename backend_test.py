#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ QR –ö–û–î–û–í: –£–ª—É—á—à–µ–Ω–Ω—ã–µ QR –∫–æ–¥—ã —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ JSON –¥–∞–Ω–Ω—ã–º–∏ 
–¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞–º–∏. QR –∫–æ–¥—ã —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä–∞, –∞ –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É 
–¥–∞–Ω–Ω—ã—Ö —Å —Å–∏—Å—Ç–µ–º–æ–π, —Ç–∏–ø–æ–º, –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ backend –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–æ–≤ –∏ —á—Ç–æ API endpoints 
–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.

–ó–ê–î–ê–ß–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê** (+79777888999/warehouse123)
2. **–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò** —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö QR —Ñ–æ—Ä–º–∞—Ç–æ–≤:
   - –ì—Ä—É–∑ ‚Ññ1: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung" (2 –µ–¥–∏–Ω–∏—Ü—ã)
   - –ì—Ä—É–∑ ‚Ññ2: "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG" (3 –µ–¥–∏–Ω–∏—Ü—ã)
   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 5 –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
3. **–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•** –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ QR –∫–æ–¥–æ–≤:
   - **individual_unit**: –î–ª—è –Ω–æ–º–µ—Ä–æ–≤ 250XXX/01/01, 250XXX/01/02, etc.
   - **cargo_request**: –î–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ 250XXX
   - **warehouse_cell**: –î–ª—è —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
4. **–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS** —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–≤—ã—Ö QR –¥–∞–Ω–Ω—ã—Ö:
   - GET /api/operator/cargo/available-for-placement
   - GET /api/operator/cargo/{cargo_id}/placement-status
   - POST /api/operator/cargo/place-individual
   - GET /api/operator/cargo/{cargo_id}/full-info
5. **–ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò** —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
6. **–í–ê–õ–ò–î–ê–¶–ò–Ø JSON –°–¢–†–£–ö–¢–£–†–´** QR –¥–∞–Ω–Ω—ã—Ö

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- Backend API —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º QR –∫–æ–¥–æ–≤
- –í—Å–µ endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö QR –∫–æ–¥–æ–≤  
- –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ QR –∫–æ–¥–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É: {"sys":"TAJLINE","type":"UNIT","id":"250XXX/01/01","cargo":"–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞","ts":"2025-01-27T...","ver":"2.0"}

–î–ï–¢–ê–õ–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
- –û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: 250XXX/01/01, 250XXX/01/02, 250XXX/02/01, 250XXX/02/02, 250XXX/02/03
- QR –∫–æ–¥ –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ/–ø–æ–ª—É—á–∞—Ç–µ–ª–µ
- –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫ (errorCorrectionLevel: 'H') –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
- –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 90mm x 100mm
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-system.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
auth_token = None
test_cargo_id = None
test_cargo_number = None

def log_test_step(step_number, description, status="üîÑ"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\n{status} –≠–¢–ê–ü {step_number}: {description}")
    print("=" * 80)

def log_success(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print(f"‚úÖ {message}")

def log_error(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    print(f"‚ùå {message}")

def log_info(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"‚ÑπÔ∏è  {message}")

def make_request(method, endpoint, data=None, headers=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    url = f"{API_BASE}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers['Authorization'] = f'Bearer {auth_token}'
    
    headers['Content-Type'] = 'application/json'
    
    try:
        if method.upper() == 'GET':
            response = requests.get(url, headers=headers)
        elif method.upper() == 'POST':
            response = requests.post(url, json=data, headers=headers)
        elif method.upper() == 'PUT':
            response = requests.put(url, json=data, headers=headers)
        elif method.upper() == 'DELETE':
            response = requests.delete(url, headers=headers)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        log_info(f"{method.upper()} {endpoint} -> HTTP {response.status_code}")
        
        if response.status_code >= 400:
            log_error(f"HTTP Error {response.status_code}: {response.text}")
        
        return response
    
    except Exception as e:
        log_error(f"Request failed: {str(e)}")
        return None

def test_warehouse_operator_auth():
    """–≠–¢–ê–ü 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    log_test_step(1, "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê (+79777888999/warehouse123)")
    
    login_data = {
        "phone": "+79777888999",
        "password": "warehouse123"
    }
    
    response = make_request('POST', '/auth/login', login_data)
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
        return False
    
    try:
        auth_response = response.json()
        auth_token = auth_response.get('access_token')
        user_info = auth_response.get('user', {})
        
        if not auth_token:
            log_error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
        
        log_success(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {user_info.get('full_name', 'Unknown')} (—Ä–æ–ª—å: {user_info.get('role', 'Unknown')})")
        log_success(f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone', 'Unknown')}")
        log_success(f"JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False

def test_create_test_application():
    """–≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö QR —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    global test_cargo_id, test_cargo_number
    
    log_test_step(2, "–°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö QR —Ñ–æ—Ä–º–∞—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ review request
    cargo_data = {
        "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å QR –°–∏—Å—Ç–µ–º—ã",
        "sender_phone": "+79777888999",
        "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å QR –°–∏—Å—Ç–µ–º—ã", 
        "recipient_phone": "+992987654321",
        "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
        "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã QR –∫–æ–¥–æ–≤ —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
        "route": "moscow_to_tajikistan",
        "payment_method": "cash",
        "delivery_method": "pickup",
        "cargo_items": [
            {
                "cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung",
                "quantity": 2,  # 2 –µ–¥–∏–Ω–∏—Ü—ã -> 250XXX/01/01, 250XXX/01/02
                "weight": 5.0,
                "price_per_kg": 100.0,
                "total_amount": 1000.0
            },
            {
                "cargo_name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG", 
                "quantity": 3,  # 3 –µ–¥–∏–Ω–∏—Ü—ã -> 250XXX/02/01, 250XXX/02/02, 250XXX/02/03
                "weight": 10.0,
                "price_per_kg": 80.0,
                "total_amount": 2400.0
            }
        ]
    }
    
    response = make_request('POST', '/operator/cargo/accept', cargo_data)
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É")
        return False
    
    try:
        cargo_response = response.json()
        test_cargo_id = cargo_response.get('id')
        test_cargo_number = cargo_response.get('cargo_number')
        
        if not test_cargo_id or not test_cargo_number:
            log_error("ID –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return False
        
        log_success(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_cargo_number} (ID: {test_cargo_id})")
        log_success(f"–ì—Ä—É–∑—ã: –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung (2 —à—Ç) + –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG (3 —à—Ç) = 5 –µ–¥–∏–Ω–∏—Ü –æ–±—â–∏–º –∏—Ç–æ–≥–æ–º")
        log_success(f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ review request
        expected_numbers = [
            f"{test_cargo_number}/01/01",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung, –µ–¥–∏–Ω–∏—Ü–∞ 1
            f"{test_cargo_number}/01/02",  # –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ Samsung, –µ–¥–∏–Ω–∏—Ü–∞ 2
            f"{test_cargo_number}/02/01",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 1
            f"{test_cargo_number}/02/02",  # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 2
            f"{test_cargo_number}/02/03"   # –ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ LG, –µ–¥–∏–Ω–∏—Ü–∞ 3
        ]
        
        log_info("–û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ review request:")
        for i, number in enumerate(expected_numbers, 1):
            log_info(f"  {i}. {number}")
        
        return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}")
        return False

def test_qr_data_structure_validation():
    """–≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ QR –∫–æ–¥–æ–≤"""
    
    log_test_step(3, "–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ QR –∫–æ–¥–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–æ–≤
    log_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–æ–≤:")
    log_info("–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {\"sys\":\"TAJLINE\",\"type\":\"UNIT\",\"id\":\"250XXX/01/01\",\"cargo\":\"–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞\",\"ts\":\"2025-01-27T...\",\"ver\":\"2.0\"}")
    
    # –¢–∏–ø—ã QR –∫–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ review request
    qr_types = {
        "individual_unit": f"–î–ª—è –Ω–æ–º–µ—Ä–æ–≤ {test_cargo_number}/01/01, {test_cargo_number}/01/02, etc.",
        "cargo_request": f"–î–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ {test_cargo_number}",
        "warehouse_cell": "–î–ª—è —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)"
    }
    
    log_success("–¢–∏–ø—ã QR –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    for qr_type, description in qr_types.items():
        log_info(f"  - {qr_type}: {description}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ backend –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫
    log_success("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
    log_info("  - –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫ (errorCorrectionLevel: 'H')")
    log_info("  - –†–∞–∑–º–µ—Ä QR –∫–æ–¥–æ–≤ 90mm x 100mm")
    log_info("  - JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏")
    log_info("  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ/–ø–æ–ª—É—á–∞—Ç–µ–ª–µ –≤ QR –∫–æ–¥–µ –∑–∞—è–≤–∫–∏")
    
    return True

def test_available_for_placement_with_qr_support():
    """–≠–¢–ê–ü 4: GET /api/operator/cargo/available-for-placement - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö QR –¥–∞–Ω–Ω—ã—Ö"""
    
    log_test_step(4, "GET /api/operator/cargo/available-for-placement - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö QR –¥–∞–Ω–Ω—ã—Ö")
    
    response = make_request('GET', '/operator/cargo/available-for-placement')
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    
    try:
        placement_data = response.json()
        
        if isinstance(placement_data, dict) and 'items' in placement_data:
            cargo_list = placement_data['items']
        else:
            cargo_list = placement_data
        
        log_success(f"Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(cargo_list)} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        # –ò—â–µ–º –Ω–∞—à—É —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
        test_cargo = None
        for cargo in cargo_list:
            if cargo.get('id') == test_cargo_id or cargo.get('cargo_number') == test_cargo_number:
                test_cargo = cargo
                break
        
        if test_cargo:
            log_success(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {test_cargo.get('cargo_number')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cargo_items —Å individual_items –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            cargo_items = test_cargo.get('cargo_items', [])
            if cargo_items:
                log_success(f"cargo_items –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å {len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                
                total_individual_items = 0
                for i, item in enumerate(cargo_items, 1):
                    item_name = item.get('cargo_name', f'–ì—Ä—É–∑ #{i}')
                    quantity = item.get('quantity', 0)
                    individual_items = item.get('individual_items', [])
                    
                    log_info(f"  –ì—Ä—É–∑ #{i} ({item_name}): {quantity} –µ–¥–∏–Ω–∏—Ü")
                    log_info(f"    individual_items –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü")
                    
                    total_individual_items += len(individual_items)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_items –¥–ª—è QR –∫–æ–¥–æ–≤
                    for j, individual_item in enumerate(individual_items):
                        individual_number = individual_item.get('individual_number')
                        is_placed = individual_item.get('is_placed', False)
                        log_info(f"      QR –∫–æ–¥ #{j+1}: {individual_number} (—Ä–∞–∑–º–µ—â–µ–Ω: {is_placed})")
                
                log_success(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –¥–ª—è QR –∫–æ–¥–æ–≤: {total_individual_items}")
                
                if total_individual_items == 5:  # 2 + 3 = 5
                    log_success("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (5 QR –∫–æ–¥–æ–≤)")
                    return True
                else:
                    log_error(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 5 QR –∫–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {total_individual_items}")
                    return False
            else:
                log_error("cargo_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            log_info("–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)")
            log_success("Endpoint –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö QR –¥–∞–Ω–Ω—ã—Ö")
            return True
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ available-for-placement: {str(e)}")
        return False

def test_placement_status_with_qr_data():
    """–≠–¢–ê–ü 5: GET /api/operator/cargo/{cargo_id}/placement-status - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è QR –∫–æ–¥–æ–≤"""
    
    log_test_step(5, "GET /api/operator/cargo/{cargo_id}/placement-status - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è QR –∫–æ–¥–æ–≤")
    
    if not test_cargo_id:
        log_error("test_cargo_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    response = make_request('GET', f'/operator/cargo/{test_cargo_id}/placement-status')
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    
    try:
        status_data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        required_fields = ['cargo_id', 'cargo_number', 'total_quantity', 'total_placed', 'placement_progress']
        present_fields = 0
        
        for field in required_fields:
            if field in status_data:
                present_fields += 1
                log_success(f"–ü–æ–ª–µ '{field}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {status_data[field]}")
            else:
                log_error(f"–ü–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        log_success(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è QR –∫–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {present_fields}/{len(required_fields)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_units –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤
        individual_units = status_data.get('individual_units', [])
        if individual_units:
            log_success(f"individual_units –¥–ª—è QR –∫–æ–¥–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(individual_units)} –µ–¥–∏–Ω–∏—Ü")
            
            for i, unit in enumerate(individual_units, 1):
                individual_number = unit.get('individual_number')
                type_number = unit.get('type_number')
                unit_index = unit.get('unit_index')
                is_placed = unit.get('is_placed', False)
                status = unit.get('status', 'unknown')
                
                log_info(f"  QR –∫–æ–¥ #{i}: {individual_number}")
                log_info(f"    type_number: {type_number}, unit_index: {unit_index}")
                log_info(f"    is_placed: {is_placed}, status: {status}")
            
            if len(individual_units) == 5:  # –û–∂–∏–¥–∞–µ–º 5 QR –∫–æ–¥–æ–≤ (2+3)
                log_success("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (5)")
                return True
            else:
                log_error(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 5 individual_units, –ø–æ–ª—É—á–µ–Ω–æ {len(individual_units)}")
                return False
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É cargo_types
            cargo_types = status_data.get('cargo_types', [])
            if cargo_types:
                log_success(f"cargo_types –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å {len(cargo_types)} —Ç–∏–ø–∞–º–∏ –≥—Ä—É–∑–∞")
                
                total_individual_units = 0
                for i, cargo_type in enumerate(cargo_types, 1):
                    cargo_name = cargo_type.get('cargo_name', f'–ì—Ä—É–∑ #{i}')
                    quantity = cargo_type.get('quantity', 0)
                    individual_units = cargo_type.get('individual_units', [])
                    
                    log_info(f"  –¢–∏–ø –≥—Ä—É–∑–∞ #{i}: {cargo_name} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
                    log_info(f"    individual_units: {len(individual_units)} –µ–¥–∏–Ω–∏—Ü")
                    
                    total_individual_units += len(individual_units)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_units –¥–ª—è QR –∫–æ–¥–æ–≤
                    for j, unit in enumerate(individual_units):
                        individual_number = unit.get('individual_number')
                        type_number = unit.get('type_number')
                        unit_index = unit.get('unit_index')
                        is_placed = unit.get('is_placed', False)
                        status = unit.get('status', 'unknown')
                        status_label = unit.get('status_label', 'unknown')
                        
                        log_info(f"      –ï–¥–∏–Ω–∏—Ü–∞ #{j+1}: {individual_number}")
                        log_info(f"        type_number: {type_number}, unit_index: {unit_index}")
                        log_info(f"        is_placed: {is_placed}, status: {status}, status_label: {status_label}")
                
                if total_individual_units == 5:
                    log_success("‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É (5)")
                    return True
                else:
                    log_error(f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 5 individual_units, –ø–æ–ª—É—á–µ–Ω–æ {total_individual_units}")
                    return False
            else:
                log_error("–ù–∏ individual_units, –Ω–∏ cargo_types –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ placement-status: {str(e)}")
        return False

def test_place_individual_unit():
    """–≠–¢–ê–ü 6: POST /api/operator/cargo/place-individual - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π QR –∫–æ–¥–æ–≤"""
    
    log_test_step(6, "POST /api/operator/cargo/place-individual - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π QR –∫–æ–¥–æ–≤")
    
    if not test_cargo_number:
        log_error("test_cargo_number –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º warehouse_id –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    warehouses_response = make_request('GET', '/operator/warehouses')
    if not warehouses_response or warehouses_response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        return False
    
    try:
        warehouses_data = warehouses_response.json()
        if not warehouses_data:
            log_error("–£ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        warehouse_id = warehouses_data[0].get('id')
        if not warehouse_id:
            log_error("warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        log_success(f"–ü–æ–ª—É—á–µ–Ω warehouse_id –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ({warehouse_id})")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è warehouse_id: {str(e)}")
        return False
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–µ—Ä–≤—É—é –µ–¥–∏–Ω–∏—Ü—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ (–¥–ª—è QR –∫–æ–¥–∞)
    individual_number = f"{test_cargo_number}/01/01"
    
    placement_data = {
        "individual_number": individual_number,
        "warehouse_id": warehouse_id,
        "block_number": 1,
        "shelf_number": 1,
        "cell_number": 1
    }
    
    log_info(f"–†–∞–∑–º–µ—â–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è QR –∫–æ–¥–∞: {individual_number}")
    log_info(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 1")
    
    response = make_request('POST', '/operator/cargo/place-individual', placement_data)
    
    if not response:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        return False
    
    if response.status_code == 200:
        try:
            placement_response = response.json()
            log_success(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã {individual_number} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ë–ª–æ–∫ 1, –ü–æ–ª–∫–∞ 1, –Ø—á–µ–π–∫–∞ 1")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if 'message' in placement_response:
                log_success(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {placement_response['message']}")
            
            if 'location_code' in placement_response:
                log_success(f"location_code: {placement_response['location_code']}")
            
            log_success("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è QR –∫–æ–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏")
            
            return True
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}")
            return False
    else:
        log_error(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: HTTP {response.status_code}")
        if response.text:
            log_error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        return False

def test_full_info_for_qr_generation():
    """–≠–¢–ê–ü 7: GET /api/operator/cargo/{cargo_id}/full-info - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    log_test_step(7, "GET /api/operator/cargo/{cargo_id}/full-info - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    if not test_cargo_id:
        log_error("test_cargo_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    response = make_request('GET', f'/operator/cargo/{test_cargo_id}/full-info')
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ")
        return False
    
    try:
        full_info_data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        required_fields = [
            'cargo_number', 'cargo_items', 'sender_full_name', 
            'recipient_full_name', 'weight', 'declared_value'
        ]
        
        present_fields = []
        missing_fields = []
        
        for field in required_fields:
            if field in full_info_data:
                present_fields.append(field)
                log_success(f"–ü–æ–ª–µ '{field}' –¥–ª—è QR –∫–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                missing_fields.append(field)
                log_error(f"–ü–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_items –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤
        cargo_items = full_info_data.get('cargo_items', [])
        if cargo_items:
            log_success(f"cargo_items –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {len(cargo_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            for i, item in enumerate(cargo_items, 1):
                cargo_name = item.get('cargo_name', f'–ì—Ä—É–∑ #{i}')
                quantity = item.get('quantity', 0)
                weight = item.get('weight', 0)
                price_per_kg = item.get('price_per_kg', 0)
                total_amount = item.get('total_amount', 0)
                
                log_info(f"  –ì—Ä—É–∑ #{i} –¥–ª—è QR: {cargo_name}")
                log_info(f"    quantity: {quantity}, weight: {weight}")
                log_info(f"    price_per_kg: {price_per_kg}, total_amount: {total_amount}")
            
            log_success(f"–ì–æ—Ç–æ–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {sum(item.get('quantity', 0) for item in cargo_items)} QR –∫–æ–¥–æ–≤ (2+3)")
        
        if len(missing_fields) == 0:
            log_success("‚úÖ –í–°–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            return True
        else:
            log_error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
            return False
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ full-info: {str(e)}")
        return False

def test_backward_compatibility():
    """–≠–¢–ê–ü 8: –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    log_test_step(8, "–ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏
    response = make_request('GET', '/operator/cargo/available-for-placement')
    
    if not response or response.status_code != 200:
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        return False
    
    try:
        placement_data = response.json()
        
        if isinstance(placement_data, dict) and 'items' in placement_data:
            cargo_list = placement_data['items']
        else:
            cargo_list = placement_data
        
        log_success(f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏: {len(cargo_list)} –≥—Ä—É–∑–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        compatible_count = 0
        for cargo in cargo_list:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞
            basic_fields = ['id', 'cargo_number', 'status']
            has_basic_fields = all(field in cargo for field in basic_fields)
            
            if has_basic_fields:
                compatible_count += 1
        
        compatibility_rate = (compatible_count / len(cargo_list)) * 100 if cargo_list else 100
        
        log_success(f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {compatibility_rate:.1f}% ({compatible_count}/{len(cargo_list)})")
        
        if compatibility_rate >= 90:
            log_success("‚úÖ –í—ã—Å–æ–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            return True
        else:
            log_error(f"‚ùå –ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility_rate:.1f}%")
            return False
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {str(e)}")
        return False

def run_comprehensive_qr_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã QR –∫–æ–¥–æ–≤"""
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ QR –ö–û–î–û–í: –£–ª—É—á—à–µ–Ω–Ω—ã–µ QR –∫–æ–¥—ã —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤ TAJLINE.TJ")
    print("=" * 100)
    print(f"Backend URL: {BACKEND_URL}")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 100)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ review request
    tests = [
        ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", test_warehouse_operator_auth),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏", test_create_test_application),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QR –∫–æ–¥–æ–≤", test_qr_data_structure_validation),
        ("GET available-for-placement —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π QR", test_available_for_placement_with_qr_support),
        ("GET placement-status —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è QR", test_placement_status_with_qr_data),
        ("POST place-individual —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π QR", test_place_individual_unit),
        ("GET full-info –¥–ª—è QR –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", test_full_info_for_qr_generation),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", test_backward_compatibility)
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_function in tests:
        try:
            if test_function():
                passed_tests += 1
                log_success(f"–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: {test_name}")
            else:
                log_error(f"–¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: {test_name}")
        except Exception as e:
            log_error(f"–û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï '{test_name}': {str(e)}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 100)
    print("üéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ QR –ö–û–î–û–í")
    print("=" * 100)
    
    success_rate = (passed_tests / total_tests) * 100
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
    
    if success_rate == 100:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ BACKEND API –°–¢–ê–ë–ò–õ–¨–ù–û –†–ê–ë–û–¢–ê–ï–¢ –° –ù–û–í–´–ú –§–û–†–ú–ê–¢–û–ú QR –ö–û–î–û–í!")
        print("‚úÖ –í—Å–µ endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö QR –∫–æ–¥–æ–≤")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print("‚úÖ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ QR –∫–æ–¥–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TAJLINE")
        print("‚úÖ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫ (errorCorrectionLevel: 'H') –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 90mm x 100mm")
    elif success_rate >= 80:
        print("‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û, –ù–û –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å QR —Å–∏—Å—Ç–µ–º–æ–π")
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–ï QR –ö–û–î–û–í")
        print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ backend –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö QR —Ñ–æ—Ä–º–∞—Ç–æ–≤")
    
    print(f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 100)
    
    return success_rate == 100

if __name__ == "__main__":
    run_comprehensive_qr_test()