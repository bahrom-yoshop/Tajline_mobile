#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–í–£–• –†–ï–ñ–ò–ú–û–í –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–†–£–ó–û–í –í TAJLINE.TJ
=================================================================================

–ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏:
- –†–µ–∂–∏–º "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 1/4 (1 –≥—Ä—É–∑ —Ä–∞–∑–º–µ—â–µ–Ω)  
- –†–µ–∂–∏–º "Individual Units –∫–∞—Ä—Ç–æ—á–∫–∏" –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 2/2 (2 –≥—Ä—É–∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω—ã) –∏ 2 –≥—Ä—É–∑–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: 
1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API `/api/operator/cargo/available-for-placement` (—Ä–µ–∂–∏–º "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫")
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API `/api/operator/cargo/individual-units-for-placement` (—Ä–µ–∂–∏–º "Individual Units")
3. –°—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ 250101 –≤ –æ–±–æ–∏—Ö API
4. –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø–æ–¥—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ 250101 –≤ –æ–±–æ–∏—Ö API
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ individual_items –≤ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–∞—Ö
4. –í—ã—è–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É 1/4 –∏ 2/2
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class TajlineComparativeTest:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.test_results = []
        self.start_time = datetime.now()
        
    def log_test(self, test_name, success, details, duration_ms=0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "duration_ms": duration_ms
        })
        print(f"{status}: {test_name}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        if duration_ms > 0:
            print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration_ms}ms")
        print()

    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        print("üîê –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            response = self.session.post(f"{BASE_URL}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            duration = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                user_info = data.get("user", {})
                
                if self.token and user_info.get("role") == "warehouse_operator":
                    self.session.headers.update({"Authorization": f"Bearer {self.token}"})
                    details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, duration)
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", duration)
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}", duration)
                return False
                
        except Exception as e:
            duration = int((datetime.now() - start_time).total_seconds() * 1000)
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}", duration)
            return False

    def test_available_for_placement_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' - /api/operator/cargo/available-for-placement"""
        print("üì¶ –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API '–ö–ê–†–¢–û–ß–ö–ò –ó–ê–Ø–í–û–ö'")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            response = self.session.get(f"{BASE_URL}/operator/cargo/available-for-placement")
            duration = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101
                cargo_250101 = None
                for item in items:
                    if item.get("cargo_number") == "250101":
                        cargo_250101 = item
                        break
                
                if cargo_250101:
                    total_placed = cargo_250101.get("total_placed", 0)
                    placement_progress = cargo_250101.get("placement_progress", "")
                    overall_status = cargo_250101.get("overall_placement_status", "")
                    cargo_items = cargo_250101.get("cargo_items", [])
                    
                    details = f"–ó–∞—è–≤–∫–∞ 250101 –Ω–∞–π–¥–µ–Ω–∞! total_placed: {total_placed}, placement_progress: '{placement_progress}', status: '{overall_status}', cargo_items: {len(cargo_items)}"
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ cargo_items
                    print(f"   üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–ö–ò 250101 –í –†–ï–ñ–ò–ú–ï '–ö–ê–†–¢–û–ß–ö–ò –ó–ê–Ø–í–û–ö':")
                    print(f"   - total_placed: {total_placed}")
                    print(f"   - placement_progress: '{placement_progress}'")
                    print(f"   - overall_placement_status: '{overall_status}'")
                    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cargo_items: {len(cargo_items)}")
                    
                    for i, cargo_item in enumerate(cargo_items):
                        placed_count = cargo_item.get("placed_count", 0)
                        total_units = cargo_item.get("total_units", 0)
                        cargo_name = cargo_item.get("cargo_name", "")
                        individual_items = cargo_item.get("individual_items", [])
                        
                        print(f"   - Cargo Item {i+1}: '{cargo_name}' - {placed_count}/{total_units} —Ä–∞–∑–º–µ—â–µ–Ω–æ, individual_items: {len(individual_items)}")
                        
                        # –ê–Ω–∞–ª–∏–∑ individual_items
                        for j, individual_item in enumerate(individual_items):
                            is_placed = individual_item.get("is_placed", False)
                            individual_number = individual_item.get("individual_number", "")
                            placement_info = individual_item.get("placement_info", "")
                            print(f"     - {individual_number}: is_placed={is_placed}, placement_info='{placement_info}'")
                    
                    self.log_test("API available-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", True, details, duration)
                    return cargo_250101
                else:
                    details = f"–ó–∞—è–≤–∫–∞ 250101 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ. –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(items)}"
                    self.log_test("API available-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", False, details, duration)
                    return None
            else:
                self.log_test("API available-for-placement", False, f"HTTP {response.status_code}: {response.text}", duration)
                return None
                
        except Exception as e:
            duration = int((datetime.now() - start_time).total_seconds() * 1000)
            self.log_test("API available-for-placement", False, f"–û—à–∏–±–∫–∞: {str(e)}", duration)
            return None

    def test_individual_units_for_placement_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API 'Individual Units –∫–∞—Ä—Ç–æ—á–∫–∏' - /api/operator/cargo/individual-units-for-placement"""
        print("üî¢ –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API 'INDIVIDUAL UNITS –ö–ê–†–¢–û–ß–ö–ò'")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            response = self.session.get(f"{BASE_URL}/operator/cargo/individual-units-for-placement")
            duration = int((datetime.now() - start_time).total_seconds() * 1000)
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                grouped_data = data.get("grouped_data", {})
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É 250101 –≤ grouped_data
                cargo_250101_grouped = grouped_data.get("250101")
                
                if cargo_250101_grouped:
                    total_units = cargo_250101_grouped.get("total_units", 0)
                    placed_units = cargo_250101_grouped.get("placed_units", 0)
                    pending_units = cargo_250101_grouped.get("pending_units", 0)
                    placement_progress = cargo_250101_grouped.get("placement_progress", "")
                    individual_units = cargo_250101_grouped.get("individual_units", [])
                    
                    details = f"–ó–∞—è–≤–∫–∞ 250101 –Ω–∞–π–¥–µ–Ω–∞! total_units: {total_units}, placed_units: {placed_units}, pending_units: {pending_units}, progress: '{placement_progress}'"
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ individual_units
                    print(f"   üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–ö–ò 250101 –í –†–ï–ñ–ò–ú–ï 'INDIVIDUAL UNITS':")
                    print(f"   - total_units: {total_units}")
                    print(f"   - placed_units: {placed_units}")
                    print(f"   - pending_units: {pending_units}")
                    print(f"   - placement_progress: '{placement_progress}'")
                    print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_units: {len(individual_units)}")
                    
                    for i, unit in enumerate(individual_units):
                        individual_number = unit.get("individual_number", "")
                        is_placed = unit.get("is_placed", False)
                        placement_info = unit.get("placement_info", "")
                        status = unit.get("status", "")
                        cargo_name = unit.get("cargo_name", "")
                        
                        print(f"   - Unit {i+1}: {individual_number} - '{cargo_name}' - is_placed={is_placed}, status='{status}', placement_info='{placement_info}'")
                    
                    self.log_test("API individual-units-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", True, details, duration)
                    return cargo_250101_grouped
                else:
                    details = f"–ó–∞—è–≤–∫–∞ 250101 –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ grouped_data. –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(grouped_data)}"
                    print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {list(grouped_data.keys())}")
                    self.log_test("API individual-units-for-placement - –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101", False, details, duration)
                    return None
            else:
                self.log_test("API individual-units-for-placement", False, f"HTTP {response.status_code}: {response.text}", duration)
                return None
                
        except Exception as e:
            duration = int((datetime.now() - start_time).total_seconds() * 1000)
            self.log_test("API individual-units-for-placement", False, f"–û—à–∏–±–∫–∞: {str(e)}", duration)
            return None

    def verify_placement_records(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ verify-cargo API"""
        print("üîç –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –ó–ê–ü–ò–°–ï–ô –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∑–∞—è–≤–∫–∏ 250101
        individual_numbers = ["250101/01/01", "250101/01/02", "250101/02/01", "250101/02/02"]
        placement_results = {}
        
        for individual_number in individual_numbers:
            start_time = datetime.now()
            
            try:
                response = self.session.post(f"{BASE_URL}/operator/placement/verify-cargo", json={
                    "qr_code": individual_number
                })
                
                duration = int((datetime.now() - start_time).total_seconds() * 1000)
                
                if response.status_code == 200:
                    data = response.json()
                    success = data.get("success", False)
                    cargo_info = data.get("cargo_info", {})
                    
                    if success:
                        placement_results[individual_number] = {
                            "status": "–Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω",
                            "cargo_name": cargo_info.get("cargo_name", ""),
                            "details": "–ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é"
                        }
                    else:
                        placement_results[individual_number] = {
                            "status": "–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω",
                            "details": data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        }
                        
                elif response.status_code == 400:
                    # –ì—Ä—É–∑ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω
                    placement_results[individual_number] = {
                        "status": "—Ä–∞–∑–º–µ—â–µ–Ω",
                        "details": "–ì—Ä—É–∑ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ"
                    }
                else:
                    placement_results[individual_number] = {
                        "status": "–æ—à–∏–±–∫–∞",
                        "details": f"HTTP {response.status_code}: {response.text}"
                    }
                    
                print(f"   {individual_number}: {placement_results[individual_number]['status']} - {placement_results[individual_number]['details']}")
                
            except Exception as e:
                placement_results[individual_number] = {
                    "status": "–æ—à–∏–±–∫–∞",
                    "details": f"–û—à–∏–±–∫–∞: {str(e)}"
                }
                print(f"   {individual_number}: –æ—à–∏–±–∫–∞ - {str(e)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        placed_count = sum(1 for result in placement_results.values() if result["status"] == "—Ä–∞–∑–º–µ—â–µ–Ω")
        total_count = len(individual_numbers)
        
        details = f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {placed_count}/{total_count} –µ–¥–∏–Ω–∏—Ü –∑–∞—è–≤–∫–∏ 250101"
        self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", True, details)
        
        return placement_results, placed_count, total_count

    def compare_apis_data(self, available_data, individual_data, actual_placed, actual_total):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –¥–≤—É–º—è API"""
        print("‚öñÔ∏è –≠–¢–ê–ü 5: –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –û –ó–ê–Ø–í–ö–ï 250101:")
        print("-" * 50)
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ API available-for-placement
        if available_data:
            available_placed = available_data.get("total_placed", 0)
            available_progress = available_data.get("placement_progress", "")
            print(f"API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫':")
            print(f"  - total_placed: {available_placed}")
            print(f"  - placement_progress: '{available_progress}'")
        else:
            available_placed = "–ù–ï –ù–ê–ô–î–ï–ù–û"
            available_progress = "–ù–ï –ù–ê–ô–î–ï–ù–û"
            print(f"API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫': –ó–ê–Ø–í–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê")
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ API individual-units-for-placement
        if individual_data:
            individual_placed = individual_data.get("placed_units", 0)
            individual_total = individual_data.get("total_units", 0)
            individual_progress = individual_data.get("placement_progress", "")
            print(f"API 'Individual Units':")
            print(f"  - placed_units: {individual_placed}")
            print(f"  - total_units: {individual_total}")
            print(f"  - placement_progress: '{individual_progress}'")
        else:
            individual_placed = "–ù–ï –ù–ê–ô–î–ï–ù–û"
            individual_total = "–ù–ï –ù–ê–ô–î–ï–ù–û"
            individual_progress = "–ù–ï –ù–ê–ô–î–ï–ù–û"
            print(f"API 'Individual Units': –ó–ê–Ø–í–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê")
        
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—á–µ—Ä–µ–∑ verify-cargo):")
        print(f"  - —Ä–∞–∑–º–µ—â–µ–Ω–æ: {actual_placed}")
        print(f"  - –≤—Å–µ–≥–æ: {actual_total}")
        print(f"  - –ø—Ä–æ–≥—Ä–µ—Å—Å: {actual_placed}/{actual_total}")
        
        print("\nüîç –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")
        print("-" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        discrepancies = []
        
        if available_data and available_placed != actual_placed:
            discrepancies.append(f"API '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {available_placed} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {actual_placed}")
        
        if individual_data and individual_placed != actual_placed:
            discrepancies.append(f"API 'Individual Units' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {individual_placed} —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {actual_placed}")
        
        if available_data and individual_data and available_placed != individual_placed:
            discrepancies.append(f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É API: '–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫' ({available_placed}) vs 'Individual Units' ({individual_placed})")
        
        if discrepancies:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:")
            for i, discrepancy in enumerate(discrepancies, 1):
                print(f"  {i}. {discrepancy}")
            
            self.log_test("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(discrepancies)} —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π")
        else:
            print("‚úÖ –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û - –≤—Å–µ API –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            self.log_test("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", True, "–î–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–í–£–• –†–ï–ñ–ò–ú–û–í –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–†–£–ó–û–í")
        print("=" * 80)
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–¶–µ–ª—å: –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print()
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API "–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–æ–∫"
        available_data = self.test_available_for_placement_api()
        
        # –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API "Individual Units"
        individual_data = self.test_individual_units_for_placement_api()
        
        # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        placement_results, actual_placed, actual_total = self.verify_placement_records()
        
        # –≠—Ç–∞–ø 5: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.compare_apis_data(available_data, individual_data, actual_placed, actual_total)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        return True

    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 80)
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {passed_tests}")
        print(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total_tests - passed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        total_duration = (datetime.now() - self.start_time).total_seconds()
        print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 50)
        
        for i, result in enumerate(self.test_results, 1):
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{i}. {status} {result['test']}")
            if result["details"]:
                print(f"   {result['details']}")
            if result["duration_ms"] > 0:
                print(f"   –í—Ä–µ–º—è: {result['duration_ms']}ms")
        
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("-" * 20)
        
        if success_rate >= 80:
            print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("–û—Å–Ω–æ–≤–Ω—ã–µ API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.")
        
        print(f"\n–û–¢–ß–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TAJLINE.TJ")
    print("=" * 70)
    
    tester = TajlineComparativeTest()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ò–ó-–ó–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö")
        sys.exit(1)
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞

–ü–†–û–ë–õ–ï–ú–ê:
–ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞ –≥—Ä—É–∑–∞ 250101/01/02 "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" –≤–º–µ—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. Backend: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ cargo_name –≤ –æ—Ç–≤–µ—Ç API /api/operator/placement/verify-cargo
2. Frontend: –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø:
‚úÖ –ì—Ä—É–∑ 250101/01/02 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_name: "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π"
‚úÖ API success: true –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤  
‚úÖ –í—Å–µ –ø–æ–ª—è cargo_info –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://tajline-manage-1.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_verify_cargo_api_main_target():
    """–¢–µ—Å—Ç 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01 (–Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π)"""
    
    print("\nüéØ –¢–ï–°–¢ 2: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01")
    print("   üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º 250101/01/01 –≤–º–µ—Å—Ç–æ 250101/01/02, —Ç–∞–∫ –∫–∞–∫ 250101/01/02 —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑ –∏–∑ —Ç–æ–π –∂–µ –∑–∞—è–≤–∫–∏
    qr_code = "250101/01/01"
    
    response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
    
    if not response:
        return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ VERIFY-CARGO –¥–ª—è {qr_code}:")
        print(f"   - success: {data.get('success', False)}")
        print(f"   - cargo_info: {data.get('cargo_info', {})}")
        
        success = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if not data.get("success"):
            success = False
            error = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            issues.append(f"success –Ω–µ —Ä–∞–≤–µ–Ω true: {error}")
        
        cargo_info = data.get("cargo_info", {})
        if not cargo_info:
            success = False
            issues.append("cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ cargo_name
            cargo_name = cargo_info.get("cargo_name")
            if not cargo_name:
                success = False
                issues.append("cargo_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            elif cargo_name == "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π":
                print(f"   ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: cargo_name = '{cargo_name}'")
            else:
                success = False
                issues.append(f"cargo_name = '{cargo_name}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π')")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ["cargo_number", "individual_number"]
            for field in required_fields:
                if not cargo_info.get(field):
                    success = False
                    issues.append(f"{field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"   - {field}: {cargo_info.get(field)}")
        
        if success:
            details = f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! cargo_name: '{cargo_info.get('cargo_name')}', cargo_number: '{cargo_info.get('cargo_number')}', individual_number: '{cargo_info.get('individual_number')}'"
            return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("API verify-cargo —Å –≥—Ä—É–∑–æ–º 250101/01/01", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_verify_cargo_api_other_cargos():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏ (–Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏)"""
    
    print("\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏")
    print("   üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –≥—Ä—É–∑—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
    test_cargos = [
        {"qr_code": "250101/01/01", "expected_name": "–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π"},
        {"qr_code": "250101/02/01", "expected_name": "–¢–µ—Ñ–∞–ª"},
        {"qr_code": "25082235/02/02", "expected_name": "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞"}
    ]
    
    all_success = True
    results = []
    
    for cargo_test in test_cargos:
        qr_code = cargo_test["qr_code"]
        expected_name = cargo_test["expected_name"]
        
        print(f"\n   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä—É–∑ {qr_code} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: '{expected_name}')")
        
        response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
        
        if not response:
            all_success = False
            results.append(f"‚ùå {qr_code}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏")
            continue
        
        if response.status_code == 200:
            data = response.json()
            cargo_info = data.get("cargo_info", {})
            cargo_name = cargo_info.get("cargo_name", "")
            error = data.get("error", "")
            
            if data.get("success") and cargo_name == expected_name:
                results.append(f"‚úÖ {qr_code}: '{cargo_name}'")
                print(f"      ‚úÖ SUCCESS: cargo_name = '{cargo_name}'")
            elif data.get("success") and cargo_name:
                results.append(f"‚ö†Ô∏è {qr_code}: '{cargo_name}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}')")
                print(f"      ‚ö†Ô∏è PARTIAL: cargo_name = '{cargo_name}' (–æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_name}')")
            elif data.get("success"):
                all_success = False
                results.append(f"‚ùå {qr_code}: cargo_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                print(f"      ‚ùå FAIL: cargo_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                all_success = False
                results.append(f"‚ùå {qr_code}: {error}")
                print(f"      ‚ùå FAIL: {error}")
        else:
            all_success = False
            error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
            results.append(f"‚ùå {qr_code}: HTTP {response.status_code}")
            print(f"      ‚ùå ERROR: HTTP {response.status_code}: {error_detail}")
    
    if all_success:
        details = f"‚úÖ –í—Å–µ –≥—Ä—É–∑—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {'; '.join(results)}"
        return log_test("API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏", True, details)
    else:
        details = f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –≥—Ä—É–∑–∞–º–∏: {'; '.join(results)}"
        return log_test("API verify-cargo —Å –¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏", False, details)

def test_verify_cargo_response_structure():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API verify-cargo"""
    
    print("\nüìã –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API verify-cargo")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    qr_code = "250101/01/01"
    
    response, response_time = make_request("POST", "/operator/placement/verify-cargo", {"qr_code": qr_code})
    
    if not response:
        return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê:")
        
        success = True
        issues = []
        found_fields = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        required_top_level = ["success"]
        for field in required_top_level:
            if field in data:
                found_fields.append(field)
                print(f"   ‚úÖ {field}: {data[field]}")
            else:
                success = False
                issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cargo_info
        cargo_info = data.get("cargo_info", {})
        if cargo_info:
            found_fields.append("cargo_info")
            print(f"   ‚úÖ cargo_info: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ cargo_info
            required_cargo_info = ["cargo_name", "cargo_number", "individual_number"]
            for field in required_cargo_info:
                if field in cargo_info and cargo_info[field]:
                    found_fields.append(f"cargo_info.{field}")
                    print(f"      ‚úÖ {field}: {cargo_info[field]}")
                else:
                    success = False
                    issues.append(f"cargo_info.{field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
        else:
            success = False
            issues.append("cargo_info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print(f"   üìà –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(found_fields)}")
        print(f"   üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π: {found_fields}")
        
        if success:
            details = f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {len(found_fields)} –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ"
            return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}. –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {len(found_fields)}"
            return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ verify-cargo", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*80)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      {result['details']}")
    
    print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    main_test = next((r for r in test_results if "250101/01/01" in r["test"]), None)
    other_cargos_test = next((r for r in test_results if "–¥—Ä—É–≥–∏–º–∏ –≥—Ä—É–∑–∞–º–∏" in r["test"]), None)
    structure_test = next((r for r in test_results if "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞" in r["test"]), None)
    
    if main_test and main_test["success"]:
        print("   ‚úÖ –ì—Ä—É–∑ 250101/01/01 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç cargo_name: '–°—É–º–∫–∞ –∫–æ–∂–∞–Ω—ã–π' (–∞–Ω–∞–ª–æ–≥ 250101/01/02)")
    else:
        print("   ‚ùå –ì—Ä—É–∑ 250101/01/01 –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ cargo_name")
    
    if other_cargos_test and other_cargos_test["success"]:
        print("   ‚úÖ API success: true –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–∑–æ–≤")
        print("   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º–∏ –≥—Ä—É–∑–∞–º–∏")
    
    if structure_test and structure_test["success"]:
        print("   ‚úÖ –í—Å–µ –ø–æ–ª—è cargo_info –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–∞ API")
    
    print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if success_rate >= 75:
        print("   üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   üìç API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è!")
    else:
        print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   üìç API –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–∞")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_verify_cargo_api_main_target,
        test_verify_cargo_api_other_cargos,
        test_verify_cargo_response_structure
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_summary()

if __name__ == "__main__":
    main()