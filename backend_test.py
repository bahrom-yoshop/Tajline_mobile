#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ –≤ TAJLINE.TJ

–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:

**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞  
- –°—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞" –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—É—é "üè≠ –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —è—á–µ–µ–∫"
- –î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (–Ω–µ TEMP –¥–∞–Ω–Ω—ã–µ)
- –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —è—á–µ–π–∫—É - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è

**API endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
1. `GET /api/warehouses/{warehouse_id}/layout-with-cargo` - –æ—Å–Ω–æ–≤–Ω–æ–π endpoint —Å—Ö–µ–º—ã
2. `POST /api/operator/cargo/remove-from-cell` - —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏
3. `GET /api/operator/warehouses` - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:**
1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ 
3. ‚úÖ –í—ã–∑–æ–≤ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
4. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (blocks, shelves, cells —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏)
5. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ (–ù–ï TEMP –¥–∞–Ω–Ω—ã–µ)
6. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9 (–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑)
7. ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏
8. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
- API layout-with-cargo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å blocks->shelves->cells
- occupied_cells > 0 (–µ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã)
- –ì—Ä—É–∑ 25082235/02/02 –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9  
- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP –¥–∞–Ω–Ω—ã–µ
- API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –í—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞:**
- 90%+ success rate –Ω–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö endpoints
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤
- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import requests
import json
import sys
from datetime import datetime
import time

# Configuration
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# Test credentials
TEST_CREDENTIALS = {
    "phone": WAREHOUSE_OPERATOR_PHONE,
    "password": WAREHOUSE_OPERATOR_PASSWORD
}

# Global variables
auth_token = None
test_results = []
warehouse_id = None
moscow_warehouse_name = "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
target_cargo_number = "25082235/02/02"
target_position = "–ë1-–ü2-–Ø9"

def log_test_result(test_name, success, details, response_time_ms=None):
    """Log test result with details"""
    status = "‚úÖ PASSED" if success else "‚ùå FAILED"
    result = {
        "test": test_name,
        "status": status,
        "success": success,
        "details": details,
        "timestamp": datetime.now().isoformat(),
        "response_time_ms": response_time_ms
    }
    test_results.append(result)
    
    time_info = f" ({response_time_ms}ms)" if response_time_ms else ""
    print(f"{status}: {test_name}{time_info}")
    print(f"   Details: {details}")
    print()

def make_request(method, endpoint, data=None, headers=None):
    """Make HTTP request with error handling and timing"""
    url = f"{BACKEND_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time_ms = int((time.time() - start_time) * 1000)
        
        return response, response_time_ms
    
    except requests.exceptions.RequestException as e:
        response_time_ms = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time_ms

def test_warehouse_operator_authentication():
    """Test 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
    global auth_token
    
    response, response_time = make_request("POST", "/auth/login", TEST_CREDENTIALS)
    
    if not response:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", 
            False, 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            data = response.json()
            auth_token = data.get("access_token")
            user_info = data.get("user", {})
            
            if auth_token and user_info.get("role") == "warehouse_operator":
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    response_time
                )
                return True
            else:
                log_test_result(
                    "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('role')} (–æ–∂–∏–¥–∞–ª–∞—Å—å warehouse_operator)",
                    response_time
                )
                return False
        except Exception as e:
            log_test_result(
                "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_get_operator_warehouses():
    """Test 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    global warehouse_id
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    if response.status_code == 200:
        try:
            warehouses = response.json()
            
            if not warehouses:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç",
                    response_time
                )
                return False
            
            # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
            moscow_warehouse = None
            for warehouse in warehouses:
                if moscow_warehouse_name in warehouse.get("name", ""):
                    moscow_warehouse = warehouse
                    warehouse_id = warehouse.get("id")
                    break
            
            if moscow_warehouse:
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥ '{moscow_warehouse.get('name')}' (ID: {warehouse_id}, –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {moscow_warehouse.get('location')})",
                    response_time
                )
                return True
            else:
                warehouse_names = [w.get("name") for w in warehouses]
                log_test_result(
                    "2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"–°–∫–ª–∞–¥ '{moscow_warehouse_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {warehouse_names}",
                    response_time
                )
                return False
                
        except Exception as e:
            log_test_result(
                "2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_layout_with_cargo_api():
    """Test 3: –í—ã–∑–æ–≤ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" """
    if not warehouse_id:
        log_test_result(
            "3. API layout-with-cargo –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
            False,
            "warehouse_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False, None
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        log_test_result(
            "3. API layout-with-cargo –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False, None
    
    if response.status_code == 200:
        try:
            layout_data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ API
            warehouse_info = layout_data.get("warehouse", {})
            statistics = layout_data.get("statistics", {})
            layout = warehouse_info.get("layout", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_warehouse_fields = ["id", "name", "warehouse_id_number"]
            missing_warehouse_fields = [field for field in required_warehouse_fields if field not in warehouse_info]
            
            required_stats_fields = ["total_cells", "occupied_cells"]
            missing_stats_fields = [field for field in required_stats_fields if field not in statistics]
            
            if missing_warehouse_fields or missing_stats_fields or "blocks" not in layout:
                missing_fields = missing_warehouse_fields + missing_stats_fields + (["blocks"] if "blocks" not in layout else [])
                log_test_result(
                    "3. API layout-with-cargo –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
                    False,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}",
                    response_time
                )
                return False, None
            
            total_cells = statistics.get("total_cells", 0)
            occupied_cells = statistics.get("occupied_cells", 0)
            total_cargo = statistics.get("total_cargo", 0)
            loading_percentage = statistics.get("loading_percentage", 0)
            blocks = layout.get("blocks", [])
            
            log_test_result(
                "3. API layout-with-cargo –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
                True,
                f"API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}, –ó–∞–≥—Ä—É–∑–∫–∞: {loading_percentage}%, –ë–ª–æ–∫–æ–≤: {len(blocks)}",
                response_time
            )
            return True, layout_data
            
        except Exception as e:
            log_test_result(
                "3. API layout-with-cargo –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
                response_time
            )
            return False, None
    else:
        log_test_result(
            "3. API layout-with-cargo –¥–ª—è –ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1",
            False,
            f"HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False, None

def test_data_structure(layout_data):
    """Test 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö (blocks, shelves, cells —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏)"""
    if not layout_data:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    try:
        warehouse_info = layout_data.get("warehouse", {})
        layout = warehouse_info.get("layout", {})
        blocks = layout.get("blocks", [])
        
        if not blocks:
            log_test_result(
                "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                False,
                "–ë–ª–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö",
                0
            )
            return False
        
        structure_issues = []
        total_cells_found = 0
        
        for block in blocks:
            block_number = block.get("number", "unknown")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –±–ª–æ–∫–∞
            block_required_fields = ["number", "name", "shelves"]
            block_missing_fields = [field for field in block_required_fields if field not in block]
            if block_missing_fields:
                structure_issues.append(f"–ë–ª–æ–∫ {block_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {block_missing_fields}")
                continue
            
            shelves = block.get("shelves", [])
            for shelf in shelves:
                shelf_number = shelf.get("number", "unknown")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª–∫–∏
                shelf_required_fields = ["number", "name", "cells"]
                shelf_missing_fields = [field for field in shelf_required_fields if field not in shelf]
                if shelf_missing_fields:
                    structure_issues.append(f"–ü–æ–ª–∫–∞ {shelf_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {shelf_missing_fields}")
                    continue
                
                cells = shelf.get("cells", [])
                for cell in cells:
                    total_cells_found += 1
                    cell_number = cell.get("number", "unknown")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —è—á–µ–π–∫–∏
                    cell_required_fields = ["number", "name", "location", "is_occupied"]
                    cell_missing_fields = [field for field in cell_required_fields if field not in cell]
                    if cell_missing_fields:
                        structure_issues.append(f"–Ø—á–µ–π–∫–∞ {cell_number}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {cell_missing_fields}")
        
        if structure_issues:
            log_test_result(
                "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                False,
                f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {'; '.join(structure_issues[:5])}{'...' if len(structure_issues) > 5 else ''}",
                0
            )
            return False
        
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
            True,
            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –ë–ª–æ–∫–æ–≤: {len(blocks)}, –í—Å–µ–≥–æ —è—á–µ–µ–∫ –Ω–∞–π–¥–µ–Ω–æ: {total_cells_found}, –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            0
        )
        return True
        
    except Exception as e:
        log_test_result(
            "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
            False,
            f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}",
            0
        )
        return False

def test_real_cargo_display(layout_data):
    """Test 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ (–ù–ï TEMP –¥–∞–Ω–Ω—ã–µ)"""
    if not layout_data:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    try:
        statistics = layout_data.get("statistics", {})
        occupied_cells = statistics.get("occupied_cells", 0)
        total_cargo = statistics.get("total_cargo", 0)
        
        if occupied_cells == 0 and total_cargo == 0:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
                False,
                "–ù–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞ (occupied_cells=0, total_cargo=0)",
                0
            )
            return False
        
        # –ò—â–µ–º –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ TEMP –¥–∞–Ω–Ω—ã–µ
        temp_cargo_found = []
        real_cargo_found = []
        
        warehouse_info = layout_data.get("warehouse", {})
        layout = warehouse_info.get("layout", {})
        blocks = layout.get("blocks", [])
        
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied", False):
                        cargo_info = cell.get("cargo", {})
                        individual_number = cargo_info.get("individual_number", "")
                        cargo_number = cargo_info.get("cargo_number", "")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ TEMP –¥–∞–Ω–Ω—ã–µ
                        if "TEMP" in individual_number.upper() or "TEMP" in cargo_number.upper():
                            temp_cargo_found.append(individual_number or cargo_number)
                        else:
                            real_cargo_found.append(individual_number or cargo_number)
        
        if temp_cargo_found:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
                False,
                f"–ù–∞–π–¥–µ–Ω—ã —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP –¥–∞–Ω–Ω—ã–µ: {temp_cargo_found[:3]}{'...' if len(temp_cargo_found) > 3 else ''}",
                0
            )
            return False
        
        if real_cargo_found:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
                True,
                f"–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã. –ù–∞–π–¥–µ–Ω–æ {len(real_cargo_found)} —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤: {real_cargo_found[:3]}{'...' if len(real_cargo_found) > 3 else ''}",
                0
            )
            return True
        else:
            log_test_result(
                "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
                False,
                f"Occupied_cells={occupied_cells}, –Ω–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —è—á–µ–µ–∫",
                0
            )
            return False
        
    except Exception as e:
        log_test_result(
            "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤",
            False,
            f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–∑–æ–≤: {e}",
            0
        )
        return False

def test_specific_cargo_position(layout_data):
    """Test 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9"""
    if not layout_data:
        log_test_result(
            "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False, None
    
    try:
        target_cargo_found = False
        cargo_details = None
        found_position = None
        
        blocks = layout_data.get("blocks", [])
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied", False):
                        cargo_info = cell.get("cargo", {})
                        individual_number = cargo_info.get("individual_number", "")
                        location_code = cell.get("location_code", "")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–∑
                        if target_cargo_number in individual_number:
                            target_cargo_found = True
                            cargo_details = cargo_info
                            found_position = location_code
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                            if target_position in location_code:
                                log_test_result(
                                    "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9",
                                    True,
                                    f"–ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏! Individual Number: {individual_number}, Cargo Number: {cargo_info.get('cargo_number')}, Location: {location_code}, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {cargo_info.get('recipient_name')}",
                                    0
                                )
                                return True, cargo_details
                            else:
                                log_test_result(
                                    "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9",
                                    False,
                                    f"–ì—Ä—É–∑ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. –û–∂–∏–¥–∞–ª–æ—Å—å: {target_position}, –ù–∞–π–¥–µ–Ω–æ: {location_code}",
                                    0
                                )
                                return False, cargo_details
        
        if not target_cargo_found:
            # –ò—â–µ–º –ª—é–±—ã–µ –≥—Ä—É–∑—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            all_cargo = []
            for block in blocks:
                shelves = block.get("shelves", [])
                for shelf in shelves:
                    cells = shelf.get("cells", [])
                    for cell in cells:
                        if cell.get("is_occupied", False):
                            cargo_info = cell.get("cargo", {})
                            individual_number = cargo_info.get("individual_number", "")
                            location_code = cell.get("location_code", "")
                            all_cargo.append(f"{individual_number}@{location_code}")
            
            log_test_result(
                "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9",
                False,
                f"–ì—Ä—É–∑ {target_cargo_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞. –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã: {all_cargo[:5]}{'...' if len(all_cargo) > 5 else ''}",
                0
            )
            return False, None
        
    except Exception as e:
        log_test_result(
            "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–∑–∞ 25082235/02/02 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9",
            False,
            f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–∞: {e}",
            0
        )
        return False, None

def test_cargo_removal_api(cargo_details):
    """Test 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏"""
    if not cargo_details:
        log_test_result(
            "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
            False,
            "–î–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    removal_data = {
        "individual_number": cargo_details.get("individual_number"),
        "cargo_number": cargo_details.get("cargo_number"),
        "warehouse_id": warehouse_id
    }
    
    # –í–ê–ñ–ù–û: –ú—ã –ù–ï –±—É–¥–µ–º —Ä–µ–∞–ª—å–Ω–æ —É–¥–∞–ª—è—Ç—å –≥—Ä—É–∑, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É endpoint'–∞
    
    response, response_time = make_request("POST", "/operator/cargo/remove-from-cell", removal_data)
    
    if not response:
        log_test_result(
            "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
            False,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            response_time
        )
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç
    if response.status_code in [200, 400, 404, 422]:  # –õ—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç
        try:
            response_data = response.json()
            
            if response.status_code == 200:
                log_test_result(
                    "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"API —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û—Ç–≤–µ—Ç: {response_data.get('message', '–£—Å–ø–µ—à–Ω–æ')}",
                    response_time
                )
                return True
            elif response.status_code == 400:
                log_test_result(
                    "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"API —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 400 - –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞). –î–µ—Ç–∞–ª–∏: {response_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    response_time
                )
                return True
            elif response.status_code == 404:
                log_test_result(
                    "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"API —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 404 - –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ). –î–µ—Ç–∞–ª–∏: {response_data.get('detail', '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω')}",
                    response_time
                )
                return True
            elif response.status_code == 422:
                log_test_result(
                    "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                    True,
                    f"API —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 422 - –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö). –î–µ—Ç–∞–ª–∏: {response_data.get('detail', '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')}",
                    response_time
                )
                return True
            
        except Exception as e:
            log_test_result(
                "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
                False,
                f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}",
                response_time
            )
            return False
    else:
        log_test_result(
            "7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ –∏–∑ —è—á–µ–π–∫–∏",
            False,
            f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. HTTP {response.status_code}: {response.text}",
            response_time
        )
        return False

def test_frontend_display_fields(layout_data):
    """Test 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not layout_data:
        log_test_result(
            "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            False,
            "layout_data –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞",
            0
        )
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        main_fields_check = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ
        warehouse_fields = ["warehouse_id", "warehouse_name", "warehouse_id_number"]
        for field in warehouse_fields:
            if field in layout_data and layout_data[field]:
                main_fields_check.append(f"‚úÖ {field}: {layout_data[field]}")
            else:
                main_fields_check.append(f"‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞
        stats_fields = ["total_cells", "occupied_cells", "total_cargo", "loading_percentage"]
        for field in stats_fields:
            if field in layout_data:
                main_fields_check.append(f"‚úÖ {field}: {layout_data[field]}")
            else:
                main_fields_check.append(f"‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –≤ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞
        cargo_fields_check = []
        occupied_cells_found = 0
        
        blocks = layout_data.get("blocks", [])
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied", False):
                        occupied_cells_found += 1
                        cargo_info = cell.get("cargo", {})
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞
                        required_cargo_fields = [
                            "individual_number", "cargo_number", "cargo_name", 
                            "recipient_name", "placed_by", "placed_at"
                        ]
                        
                        missing_cargo_fields = []
                        present_cargo_fields = []
                        
                        for field in required_cargo_fields:
                            if field in cargo_info and cargo_info[field]:
                                present_cargo_fields.append(field)
                            else:
                                missing_cargo_fields.append(field)
                        
                        if missing_cargo_fields:
                            cargo_fields_check.append(f"–Ø—á–µ–π–∫–∞ {cell.get('location_code')}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_cargo_fields}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —è—á–µ–π–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                        if len(cargo_fields_check) >= 3:
                            break
                if len(cargo_fields_check) >= 3:
                    break
            if len(cargo_fields_check) >= 3:
                break
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        main_fields_success = len([f for f in main_fields_check if f.startswith("‚úÖ")])
        main_fields_total = len(main_fields_check)
        
        cargo_fields_issues = len(cargo_fields_check)
        
        if main_fields_success == main_fields_total and cargo_fields_issues == 0:
            log_test_result(
                "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                True,
                f"–í—Å–µ –ø–æ–ª—è –¥–ª—è frontend –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: {main_fields_success}/{main_fields_total}, –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {occupied_cells_found}, –ü—Ä–æ–±–ª–µ–º —Å –ø–æ–ª—è–º–∏ –≥—Ä—É–∑–∞: {cargo_fields_issues}",
                0
            )
            return True
        else:
            issues = []
            if main_fields_success < main_fields_total:
                failed_main = [f for f in main_fields_check if f.startswith("‚ùå")]
                issues.extend(failed_main[:3])
            if cargo_fields_issues > 0:
                issues.extend(cargo_fields_check[:2])
            
            log_test_result(
                "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                False,
                f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—è–º–∏: {'; '.join(issues)}",
                0
            )
            return False
        
    except Exception as e:
        log_test_result(
            "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –¥–ª—è frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            False,
            f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π: {e}",
            0
        )
        return False

def print_test_summary():
    """Print comprehensive test summary"""
    print("\n" + "="*80)
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = len([r for r in test_results if r["success"]])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   Success Rate: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status_icon = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time_ms']}ms)" if result.get('response_time_ms') else ""
        print(f"   {i}. {status_icon} {result['test']}{time_info}")
        print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
    success_criteria_met = success_rate >= 90
    print(f"   ‚úÖ 90%+ success rate: {'–î–ê' if success_criteria_met else '–ù–ï–¢'} ({success_rate:.1f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    layout_api_works = any("layout-with-cargo" in r["test"] and r["success"] for r in test_results)
    structure_correct = any("—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö" in r["test"] and r["success"] for r in test_results)
    real_cargo_only = any("—Ä–µ–∞–ª—å–Ω—ã—Ö –≥—Ä—É–∑–æ–≤" in r["test"] and r["success"] for r in test_results)
    removal_api_works = any("—É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞" in r["test"] and r["success"] for r in test_results)
    
    print(f"   ‚úÖ API layout-with-cargo —Ä–∞–±–æ—Ç–∞–µ—Ç: {'–î–ê' if layout_api_works else '–ù–ï–¢'}")
    print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {'–î–ê' if structure_correct else '–ù–ï–¢'}")
    print(f"   ‚úÖ –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≥—Ä—É–∑—ã: {'–î–ê' if real_cargo_only else '–ù–ï–¢'}")
    print(f"   ‚úÖ API —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {'–î–ê' if removal_api_works else '–ù–ï–¢'}")
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if success_rate >= 90 and layout_api_works and structure_correct:
        print("   üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   –ù–æ–≤–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
    else:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
        print("   –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
    
    print("="*80)

def main():
    """Main test execution"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ù–æ–≤–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ –≤ TAJLINE.TJ")
    print("="*80)
    print("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞...")
    print()
    
    # Test 1: Authentication
    if not test_warehouse_operator_authentication():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_test_summary()
        return
    
    # Test 2: Get warehouses
    if not test_get_operator_warehouses():
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        print_test_summary()
        return
    
    # Test 3: Layout API
    layout_success, layout_data = test_layout_with_cargo_api()
    if not layout_success:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: API layout-with-cargo –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")
        print_test_summary()
        return
    
    # Test 4: Data structure
    test_data_structure(layout_data)
    
    # Test 5: Real cargo display
    test_real_cargo_display(layout_data)
    
    # Test 6: Specific cargo position
    cargo_found, cargo_details = test_specific_cargo_position(layout_data)
    
    # Test 7: Cargo removal API
    test_cargo_removal_api(cargo_details)
    
    # Test 8: Frontend display fields
    test_frontend_display_fields(layout_data)
    
    # Print final summary
    print_test_summary()

if __name__ == "__main__":
    main()