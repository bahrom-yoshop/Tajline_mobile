#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò
====================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
–≥–¥–µ `placed_count` —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É `individual_items` —Å `is_placed=true`

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ó–∞–ø—Ä–æ—Å –∫ `/api/operator/cargo/available-for-placement`
3. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101
4. –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
   - `placed_count` –¥–æ–ª–∂–µ–Ω —Ä–∞–≤–Ω—è—Ç—å—Å—è `individual_items.filter(item => item.is_placed === true).length`
   - –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É backend –ø–æ–¥—Å—á–µ—Ç–æ–º –∏ frontend –ø–æ–¥—Å—á–µ—Ç–æ–º
5. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ `total_placed` –¥–ª—è –≤—Å–µ–π –∑–∞—è–≤–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç 
`placed_count` –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö `is_placed` —Ñ–ª–∞–≥–æ–≤ –≤ `individual_items`.

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É `placed_count` –∏ `individual_items`
- Frontend –∏ backend –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –õ–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_APPLICATION = "250101"

class PlacedCountSynchronizationTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "api_accessible": False,
            "application_found": False,
            "synchronization_correct": False,
            "total_issues_found": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_available_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ available-for-placement"""
        self.log("üìã –ó–∞–ø—Ä–æ—Å –∫ /api/operator/cargo/available-for-placement...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data if isinstance(data, list) else data.get("items", [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                self.test_results["api_accessible"] = True
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}", "ERROR")
            return None
    
    def find_application_250101(self, applications):
        """–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101 –≤ —Å–ø–∏—Å–∫–µ"""
        self.log(f"üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if isinstance(applications, dict):
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏, –∏—â–µ–º –≤ items –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–º –ø–æ–ª–µ
            if 'items' in applications:
                applications = applications['items']
            elif 'data' in applications:
                applications = applications['data']
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                if applications.get("cargo_number") == TARGET_APPLICATION:
                    self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞!")
                    self.test_results["application_found"] = True
                    return applications
                else:
                    self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞", "ERROR")
                    return None
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if isinstance(applications, list):
            for app in applications:
                if isinstance(app, dict) and app.get("cargo_number") == TARGET_APPLICATION:
                    self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞!")
                    self.test_results["application_found"] = True
                    return app
        
        self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ", "ERROR")
        self.log(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(applications)}")
        if isinstance(applications, list) and len(applications) > 0:
            self.log(f"üîç –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(applications[0])}")
            if isinstance(applications[0], dict):
                self.log(f"üîç –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {list(applications[0].keys())}")
        return None
    
    def test_placed_count_synchronization(self, application):
        """–ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ placed_count —Å is_placed —Ñ–ª–∞–≥–∞–º–∏"""
        self.log("\nüéØ –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò")
        self.log("=" * 80)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏
        cargo_number = application.get("cargo_number")
        total_placed = application.get("total_placed", 0)
        placement_progress = application.get("placement_progress", "N/A")
        overall_status = application.get("overall_placement_status", "N/A")
        
        self.log(f"üìã –ó–∞—è–≤–∫–∞: {cargo_number}")
        self.log(f"üìä Backend total_placed: {total_placed}")
        self.log(f"üìà Backend placement_progress: {placement_progress}")
        self.log(f"üéØ Backend overall_placement_status: {overall_status}")
        
        # –ê–Ω–∞–ª–∏–∑ cargo_items
        cargo_items = application.get("cargo_items", [])
        self.log(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cargo_items: {len(cargo_items)}")
        
        if not cargo_items:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: cargo_items –ø—É—Å—Ç–æ–π!", "ERROR")
            return False
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ cargo_item
        total_frontend_placed = 0
        total_individual_items = 0
        issues_found = []
        
        for i, cargo_item in enumerate(cargo_items):
            self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê CARGO_ITEM #{i + 1}:")
            self.log("-" * 50)
            
            cargo_name = cargo_item.get("cargo_name", "N/A")
            quantity = cargo_item.get("quantity", 0)
            placed_count = cargo_item.get("placed_count", 0)
            individual_items = cargo_item.get("individual_items", [])
            
            self.log(f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞: {cargo_name}")
            self.log(f"üî¢ quantity: {quantity}")
            self.log(f"‚úÖ placed_count (backend): {placed_count}")
            self.log(f"üìã individual_items: {len(individual_items)}")
            
            if not individual_items:
                self.log("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: individual_items –ø—É—Å—Ç–æ–π!", "WARNING")
                issues_found.append(f"Cargo Item #{i+1} ({cargo_name}): individual_items –ø—É—Å—Ç–æ–π")
                continue
            
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (frontend –ª–æ–≥–∏–∫–∞)
            frontend_placed_count = 0
            total_individual_items += len(individual_items)
            
            self.log("\nüìã –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ì–û INDIVIDUAL_ITEM:")
            for j, item in enumerate(individual_items):
                individual_number = item.get("individual_number", "N/A")
                is_placed = item.get("is_placed", False)
                placement_info = item.get("placement_info", "N/A")
                
                status_icon = "‚úÖ" if is_placed else "‚è≥"
                self.log(f"  {status_icon} {individual_number}: is_placed={is_placed}")
                
                if is_placed:
                    frontend_placed_count += 1
            
            total_frontend_placed += frontend_placed_count
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
            self.log(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
            self.log(f"  Backend placed_count: {placed_count}")
            self.log(f"  Frontend –ø–æ–¥—Å—á–µ—Ç (is_placed=true): {frontend_placed_count}")
            
            if placed_count == frontend_placed_count:
                self.log(f"  ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê")
            else:
                self.log(f"  ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
                issue = f"Cargo Item #{i+1} ({cargo_name}): placed_count ({placed_count}) != —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö ({frontend_placed_count})"
                issues_found.append(issue)
                self.log(f"     {issue}")
        
        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ total_placed
        self.log(f"\nüîç –û–ë–©–ê–Ø –ü–†–û–í–ï–†–ö–ê total_placed:")
        self.log(f"  Backend total_placed: {total_placed}")
        self.log(f"  Frontend –æ–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç: {total_frontend_placed}")
        self.log(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_items: {total_individual_items}")
        
        total_placed_correct = (total_placed == total_frontend_placed)
        if total_placed_correct:
            self.log(f"  ‚úÖ –û–ë–©–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê")
        else:
            self.log(f"  ‚ùå –û–ë–©–ï–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
            issues_found.append(f"–û–±—â–µ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: total_placed ({total_placed}) != frontend –ø–æ–¥—Å—á–µ—Ç ({total_frontend_placed})")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.test_results["total_issues_found"] = len(issues_found)
        self.test_results["synchronization_correct"] = (len(issues_found) == 0)
        self.test_results["detailed_results"] = {
            "backend_total_placed": total_placed,
            "frontend_total_placed": total_frontend_placed,
            "total_individual_items": total_individual_items,
            "backend_progress": placement_progress,
            "frontend_progress": f"{total_frontend_placed}/{total_individual_items}",
            "issues_found": issues_found
        }
        
        return len(issues_found) == 0
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üéØ –¶–µ–ª–µ–≤–∞—è –∑–∞—è–≤–∫–∞: {TARGET_APPLICATION}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API available-for-placement: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}: {'‚úÖ –ù–ê–ô–î–ï–ù–ê' if self.test_results['application_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}")
        self.log(f"  4. üéØ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è placed_count: {'‚úÖ –ö–û–†–†–ï–ö–¢–ù–ê' if self.test_results['synchronization_correct'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.test_results["detailed_results"]:
            details = self.test_results["detailed_results"]
            self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            self.log(f"  Backend total_placed: {details['backend_total_placed']}")
            self.log(f"  Frontend –ø–æ–¥—Å—á–µ—Ç: {details['frontend_total_placed']}")
            self.log(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_items: {details['total_individual_items']}")
            self.log(f"  Backend progress: {details['backend_progress']}")
            self.log(f"  Frontend progress: {details['frontend_progress']}")
            
            if details['issues_found']:
                self.log(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(details['issues_found'])} —à—Ç.):")
                for i, issue in enumerate(details['issues_found'], 1):
                    self.log(f"  {i}. {issue}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if self.test_results["synchronization_correct"]:
            self.log("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            self.log("üéâ Backend –∏ Frontend –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            self.log("üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        else:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò!")
            self.log(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {self.test_results['total_issues_found']} –ø—Ä–æ–±–ª–µ–º")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        return self.test_results["synchronization_correct"]
    
    def run_synchronization_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò placed_count")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö available-for-placement
        applications = self.get_available_for_placement()
        if not applications:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API", "ERROR")
            return False
        
        # 3. –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101
        application = self.find_application_250101(applications)
        if not application:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "ERROR")
            return False
        
        # 4. –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        synchronization_success = self.test_placed_count_synchronization(application)
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacedCountSynchronizationTester()
    
    try:
        success = tester.run_synchronization_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è placed_count —Å is_placed —Ñ–ª–∞–≥–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üìä Backend –∏ Frontend –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ placed_count —Å is_placed —Ñ–ª–∞–≥–∞–º–∏")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()