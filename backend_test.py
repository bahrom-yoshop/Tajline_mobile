#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –≤ TAJLINE.TJ
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–æ–≥–ª–∞—Å–Ω–æ review request.

–ó–ê–î–ê–ß–ê:
1. GET /api/operator/warehouses - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞
2. PATCH /api/admin/warehouses/{warehouse_id}/address - –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –Ω–∞ –ü–†–ê–í–ò–õ–¨–ù–´–ô
3. GET /api/operator/warehouses - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

–ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–î–†–ï–°: "–ú–æ—Å–∫–≤–∞, –Ω–æ–≤–∞—è —É–ª–∏—Ü–∞ 1–∞ —Å—Ç—Ä–æ–µ–Ω–∏–µ 2" (–ë–ï–ó —Å–ª–æ–≤–∞ "–°–µ–ª–∏–≥–µ—Ä—Å–∫–∞—è")
–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø: phone: "+79999888777", password: "admin123"
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-ops.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"
CORRECT_ADDRESS = "–ú–æ—Å–∫–≤–∞, –Ω–æ–≤–∞—è —É–ª–∏—Ü–∞ 1–∞ —Å—Ç—Ä–æ–µ–Ω–∏–µ 2"

class WarehouseAddressTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_results = []
        
    def log_result(self, test_name, success, details):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        print()
        
    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê...")
            
            auth_data = {
                "phone": ADMIN_PHONE,
                "password": ADMIN_PASSWORD
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.admin_token}"
                })
                
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'N/A')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number', 'N/A')}), —Ä–æ–ª—å: {user_info.get('role', 'N/A')}"
                )
                return True
            else:
                self.log_result(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def get_current_warehouses(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            print("üì¶ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ò–• –î–ê–ù–ù–´–• –°–ö–õ–ê–î–û–í...")
            
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                if warehouses:
                    warehouse_details = []
                    for warehouse in warehouses:
                        details = {
                            "id": warehouse.get("id"),
                            "name": warehouse.get("name"),
                            "location": warehouse.get("location"),
                            "address": warehouse.get("address")
                        }
                        warehouse_details.append(details)
                    
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(warehouses)} —Å–∫–ª–∞–¥–æ–≤. –î–µ—Ç–∞–ª–∏: {json.dumps(warehouse_details, ensure_ascii=False, indent=2)}"
                    )
                    return warehouses
                else:
                    self.log_result(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤",
                        False,
                        "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç"
                    )
                    return []
            else:
                self.log_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return []
                
        except Exception as e:
            self.log_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return []
    
    def find_moscow_warehouse(self, warehouses):
        """–ù–∞–π—Ç–∏ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞"""
        try:
            print("üîç –ü–û–ò–°–ö –ú–û–°–ö–û–í–°–ö–û–ì–û –°–ö–õ–ê–î–ê...")
            
            moscow_warehouses = []
            for warehouse in warehouses:
                location = warehouse.get("location", "").lower()
                name = warehouse.get("name", "").lower()
                
                if "–º–æ—Å–∫–≤–∞" in location or "–º–æ—Å–∫–≤–∞" in name:
                    moscow_warehouses.append(warehouse)
            
            if moscow_warehouses:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–æ—Å–∫–æ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥
                target_warehouse = moscow_warehouses[0]
                
                self.log_result(
                    "–ü–æ–∏—Å–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–ù–∞–π–¥–µ–Ω –º–æ—Å–∫–æ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥: '{target_warehouse.get('name')}' (ID: {target_warehouse.get('id')}), —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: '{target_warehouse.get('address', target_warehouse.get('location'))}'"
                )
                return target_warehouse
            else:
                self.log_result(
                    "–ü–æ–∏—Å–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞",
                    False,
                    "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"
                )
                return None
                
        except Exception as e:
            self.log_result(
                "–ü–æ–∏—Å–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return None
    
    def update_warehouse_address(self, warehouse_id):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"""
        try:
            print("üè† –û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–î–†–ï–°–ê –°–ö–õ–ê–î–ê –ù–ê –ü–†–ê–í–ò–õ–¨–ù–´–ô...")
            
            address_data = {
                "address": CORRECT_ADDRESS
            }
            
            response = self.session.patch(
                f"{BACKEND_URL}/admin/warehouses/{warehouse_id}/address",
                json=address_data
            )
            
            if response.status_code == 200:
                data = response.json()
                
                self.log_result(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞",
                    True,
                    f"–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{CORRECT_ADDRESS}'. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(data, ensure_ascii=False)}"
                )
                return True
            else:
                self.log_result(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def verify_address_update(self, warehouse_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
        try:
            print("‚úÖ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ê–î–†–ï–°–ê...")
            
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                
                # –ù–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫–ª–∞–¥
                updated_warehouse = None
                for warehouse in warehouses:
                    if warehouse.get("id") == warehouse_id:
                        updated_warehouse = warehouse
                        break
                
                if updated_warehouse:
                    current_address = updated_warehouse.get("address")
                    
                    if current_address == CORRECT_ADDRESS:
                        self.log_result(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞",
                            True,
                            f"‚úÖ –ê–î–†–ï–° –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù! –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: '{current_address}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∞–¥—Ä–µ—Å—É: '{CORRECT_ADDRESS}'"
                        )
                        return True
                    else:
                        self.log_result(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞",
                            False,
                            f"‚ùå –ê–î–†–ï–° –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢! –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: '{current_address}', –æ–∂–∏–¥–∞–µ–º—ã–π: '{CORRECT_ADDRESS}'"
                        )
                        return False
                else:
                    self.log_result(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞",
                        False,
                        f"–°–∫–ª–∞–¥ —Å ID {warehouse_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                    )
                    return False
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def check_address_correctness(self, warehouses):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤"""
        try:
            print("üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –ê–î–†–ï–°–û–í...")
            
            issues_found = []
            correct_addresses = []
            
            for warehouse in warehouses:
                name = warehouse.get("name", "")
                address = warehouse.get("address", warehouse.get("location", ""))
                
                if "–º–æ—Å–∫–≤–∞" in name.lower() or "–º–æ—Å–∫–≤–∞" in address.lower():
                    if "—Å–µ–ª–∏–≥–µ—Ä—Å–∫–∞—è" in address.lower():
                        issues_found.append({
                            "warehouse": name,
                            "id": warehouse.get("id"),
                            "current_address": address,
                            "issue": "–°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ '–°–µ–ª–∏–≥–µ—Ä—Å–∫–∞—è' - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
                        })
                    elif address == CORRECT_ADDRESS:
                        correct_addresses.append({
                            "warehouse": name,
                            "id": warehouse.get("id"),
                            "address": address
                        })
            
            if issues_found:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤",
                    False,
                    f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏: {json.dumps(issues_found, ensure_ascii=False, indent=2)}"
                )
                return False, issues_found
            else:
                self.log_result(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤",
                    True,
                    f"–í—Å–µ –º–æ—Å–∫–æ–≤—Å–∫–∏–µ —Å–∫–ª–∞–¥—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {json.dumps(correct_addresses, ensure_ascii=False, indent=2)}"
                )
                return True, correct_addresses
                
        except Exception as e:
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False, []
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–†–ï–°–ê –°–ö–õ–ê–î–ê –í TAJLINE.TJ")
        print("=" * 80)
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: '{CORRECT_ADDRESS}'")
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {ADMIN_PHONE}")
        print("=" * 80)
        print()
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        warehouses = self.get_current_warehouses()
        if not warehouses:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤")
            return False
        
        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–æ–≤ (–¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        print("üìã –ü–†–û–í–ï–†–ö–ê –ê–î–†–ï–°–û–í –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        is_correct_before, details_before = self.check_address_correctness(warehouses)
        
        # 4. –ü–æ–∏—Å–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —Å–∫–ª–∞–¥–∞
        moscow_warehouse = self.find_moscow_warehouse(warehouses)
        if not moscow_warehouse:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        warehouse_id = moscow_warehouse.get("id")
        current_address = moscow_warehouse.get("address", moscow_warehouse.get("location"))
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if current_address == CORRECT_ADDRESS:
            print(f"‚úÖ –ê–î–†–ï–° –£–ñ–ï –ü–†–ê–í–ò–õ–¨–ù–´–ô: '{current_address}'")
            self.log_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                True,
                f"–ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞ —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É: '{CORRECT_ADDRESS}'"
            )
        else:
            print(f"üîÑ –¢–†–ï–ë–£–ï–¢–°–Ø –û–ë–ù–û–í–õ–ï–ù–ò–ï: '{current_address}' ‚Üí '{CORRECT_ADDRESS}'")
            
            # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–∞
            if not self.update_warehouse_address(warehouse_id):
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞")
                return False
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if not self.verify_address_update(warehouse_id):
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ê–¥—Ä–µ—Å –Ω–µ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                return False
        
        # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
        print("üìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–î–†–ï–°–û–í:")
        final_warehouses = self.get_current_warehouses()
        if final_warehouses:
            is_correct_after, details_after = self.check_address_correctness(final_warehouses)
            
            if is_correct_after:
                print("üéâ –í–°–ï –ê–î–†–ï–°–ê –ü–†–ê–í–ò–õ–¨–ù–´–ï!")
            else:
                print("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ê–î–†–ï–°–ê–ú–ò")
        
        return True
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - successful_tests
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if failed_tests > 0:
            print("‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"  ‚Ä¢ {result['test']}: {result['details']}")
            print()
        
        if successful_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print(f"‚úÖ –ê–î–†–ï–° –°–ö–õ–ê–î–ê –ò–°–ü–†–ê–í–õ–ï–ù –ù–ê –ü–†–ê–í–ò–õ–¨–ù–´–ô: '{CORRECT_ADDRESS}'")
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        
        print("=" * 80)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = WarehouseAddressTester()
    
    try:
        success = tester.run_comprehensive_test()
        tester.print_summary()
        
        if success:
            print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()