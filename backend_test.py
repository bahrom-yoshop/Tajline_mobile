#!/usr/bin/env python3
"""
üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–∑–∞—Ö

–†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ë–û–¢–´:
–û–±–Ω–æ–≤–ª–µ–Ω backend API layout-with-cargo –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–∞—Ö –∏ —Å–æ–∑–¥–∞–Ω–æ —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ñ–ò–î–ê–ù–ò–Ø:
‚úÖ cargo_name –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–°–∞–º–æ–∫–∞—Ç –í–ò–í–û", "–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞")
‚úÖ sender_full_name –∑–∞–ø–æ–ª–Ω–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ë–∞—Ö—Ä–æ–º –§–∞–π–∑—É–ª–ª–æ–µ–≤–∏—á –ë–æ–±–æ–Ω–∞–∑–∞—Ä–æ–≤")
‚úÖ placed_by_operator –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
‚úÖ API —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏
‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ backend API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_get_warehouse_id():
    """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
    global warehouse_id
    
    print("\nüè¢ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'")
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response:
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        warehouses = response.json()
        
        # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
        moscow_warehouse = None
        for warehouse in warehouses:
            if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                moscow_warehouse = warehouse
                break
        
        if moscow_warehouse:
            warehouse_id = moscow_warehouse.get("id")
            details = f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' (ID: {warehouse_id})"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", True, details, response_time)
        else:
            available_warehouses = [w.get("name", "Unknown") for w in warehouses]
            details = f"–°–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {available_warehouses}"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_layout_with_cargo_api():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ API layout-with-cargo"""
    
    print("\nüó∫Ô∏è –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ API layout-with-cargo")
    
    if not warehouse_id:
        return log_test("API layout-with-cargo", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("API layout-with-cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ LAYOUT-WITH-CARGO:")
        print(f"   - –í—Å–µ–≥–æ —è—á–µ–µ–∫: {data.get('total_cells', 0)}")
        print(f"   - –ó–∞–Ω—è—Ç–æ —è—á–µ–µ–∫: {data.get('occupied_cells', 0)}")
        print(f"   - –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {data.get('total_cargo', 0)}")
        print(f"   - –ë–ª–æ–∫–æ–≤: {len(data.get('blocks', []))}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ –≥—Ä—É–∑–∞—Ö
        new_fields_found = []
        cargo_with_new_fields = 0
        total_cargo_found = 0
        
        # Check both top-level blocks and layout.blocks
        layout_blocks = data.get("layout", {}).get("blocks", [])
        top_level_blocks = data.get("blocks", [])
        
        all_blocks = layout_blocks if layout_blocks else top_level_blocks
        
        for block in all_blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied") and cell.get("cargo"):
                        cargo_list = cell.get("cargo", [])
                        for cargo_info in cargo_list:
                            total_cargo_found += 1
                        
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                            required_fields = [
                                "cargo_name", "sender_full_name", "sender_phone",
                                "recipient_full_name", "recipient_phone", "recipient_address",
                                "delivery_city", "delivery_warehouse_name", "placed_by_operator"
                            ]
                            
                            fields_present = []
                            for field in required_fields:
                                if field in cargo_info and cargo_info[field]:
                                    fields_present.append(field)
                            
                            if fields_present:
                                cargo_with_new_fields += 1
                                new_fields_found.extend(fields_present)
                                
                                print(f"   üì¶ –ì—Ä—É–∑ –≤ —è—á–µ–π–∫–µ {cell.get('location_code', 'Unknown')}:")
                                for field in fields_present:
                                    print(f"      - {field}: {cargo_info[field]}")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_new_fields = list(set(new_fields_found))
        
        success = True
        issues = []
        
        if total_cargo_found == 0:
            success = False
            issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –≤ —è—á–µ–π–∫–∞—Ö")
        elif cargo_with_new_fields == 0:
            success = False
            issues.append("–ù–∏ –æ–¥–∏–Ω –≥—Ä—É–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è")
        elif len(unique_new_fields) < 3:  # –ú–∏–Ω–∏–º—É–º 3 –Ω–æ–≤—ã—Ö –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
            success = False
            issues.append(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(unique_new_fields)} –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏–∑ 9 –æ–∂–∏–¥–∞–µ–º—ã—Ö")
        
        if success:
            details = f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {cargo_with_new_fields}/{total_cargo_found} –≥—Ä—É–∑–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏: {unique_new_fields}"
            return log_test("API layout-with-cargo", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}. –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: {unique_new_fields}"
            return log_test("API layout-with-cargo", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("API layout-with-cargo", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_specific_cells():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫ –ë1-–ü3-–Ø2 –∏ –ë1-–ü3-–Ø3"""
    
    print("\nüéØ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫")
    
    if not warehouse_id:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —è—á–µ–π–∫–∏
        target_cells = ["–ë1-–ü3-–Ø2", "–ë1-–ü3-–Ø3"]
        found_cells = {}
        
        blocks = data.get("blocks", [])
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    location_code = cell.get("location_code", "")
                    if location_code in target_cells and cell.get("is_occupied"):
                        cargo_info = cell.get("cargo_info", {})
                        found_cells[location_code] = cargo_info
                        
                        print(f"   üìç –Ø—á–µ–π–∫–∞ {location_code}:")
                        print(f"      - cargo_name: {cargo_info.get('cargo_name', '–ù–ï–¢')}")
                        print(f"      - sender_full_name: {cargo_info.get('sender_full_name', '–ù–ï–¢')}")
                        print(f"      - placed_by_operator: {cargo_info.get('placed_by_operator', '–ù–ï–¢')}")
        
        success = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫—É –ë1-–ü3-–Ø3 –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–∑–∞ "–°–∞–º–æ–∫–∞—Ç –í–ò–í–û"
        if "–ë1-–ü3-–Ø3" in found_cells:
            cargo_name = found_cells["–ë1-–ü3-–Ø3"].get("cargo_name", "")
            if "–°–∞–º–æ–∫–∞—Ç –í–ò–í–û" not in cargo_name:
                issues.append(f"–Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3 –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑ '–°–∞–º–æ–∫–∞—Ç –í–ò–í–û', –Ω–∞–π–¥–µ–Ω–æ: '{cargo_name}'")
        else:
            issues.append("–Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è—á–µ–π–∫—É –ë1-–ü3-–Ø2 –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–∑–æ–≤ —Å cargo_name
        if "–ë1-–ü3-–Ø2" in found_cells:
            cargo_name = found_cells["–ë1-–ü3-–Ø2"].get("cargo_name", "")
            if not cargo_name:
                issues.append("–Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2 –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç cargo_name")
        else:
            issues.append("–Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
        
        if issues:
            success = False
        
        if success:
            details = f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ —è—á–µ–π–∫–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {list(found_cells.keys())}"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}. –ù–∞–π–¥–µ–Ω—ã —è—á–µ–π–∫–∏: {list(found_cells.keys())}"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_operator_cargo_data_retrieval():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo"""
    
    print("\nüîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo")
    
    if not warehouse_id:
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API layout-with-cargo –µ—â–µ —Ä–∞–∑ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ operator_cargo
        cargo_with_operator_data = 0
        total_cargo = 0
        operator_cargo_indicators = []
        
        blocks = data.get("blocks", [])
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied") and cell.get("cargo_info"):
                        cargo_info = cell.get("cargo_info", {})
                        total_cargo += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo
                        has_cargo_name = bool(cargo_info.get("cargo_name"))
                        has_sender_full_name = bool(cargo_info.get("sender_full_name"))
                        has_placed_by_operator = bool(cargo_info.get("placed_by_operator"))
                        
                        if has_cargo_name or has_sender_full_name or has_placed_by_operator:
                            cargo_with_operator_data += 1
                            
                            if has_cargo_name:
                                operator_cargo_indicators.append("cargo_name")
                            if has_sender_full_name:
                                operator_cargo_indicators.append("sender_full_name")
                            if has_placed_by_operator:
                                operator_cargo_indicators.append("placed_by_operator")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_indicators = list(set(operator_cargo_indicators))
        
        success = True
        issues = []
        
        if total_cargo == 0:
            success = False
            issues.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        elif cargo_with_operator_data == 0:
            success = False
            issues.append("–ù–∏ –æ–¥–∏–Ω –≥—Ä—É–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo")
        elif len(unique_indicators) < 2:
            success = False
            issues.append(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(unique_indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ operator_cargo –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"   üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• OPERATOR_CARGO:")
        print(f"      - –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤: {total_cargo}")
        print(f"      - –° –¥–∞–Ω–Ω—ã–º–∏ operator_cargo: {cargo_with_operator_data}")
        print(f"      - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {unique_indicators}")
        
        if success:
            details = f"‚úÖ API —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo: {cargo_with_operator_data}/{total_cargo} –≥—Ä—É–∑–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ {unique_indicators}"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {unique_indicators}"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_summary():
    """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*80)
    print("üéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò")
    print("="*80)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      {result['details']}")
    
    print(f"\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
    layout_test = next((r for r in test_results if "layout-with-cargo" in r["test"]), None)
    cells_test = next((r for r in test_results if "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫" in r["test"]), None)
    operator_cargo_test = next((r for r in test_results if "operator_cargo" in r["test"]), None)
    
    if layout_test and layout_test["success"]:
        print("   ‚úÖ cargo_name –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω")
        print("   ‚úÖ sender_full_name –∑–∞–ø–æ–ª–Ω–µ–Ω")
        print("   ‚úÖ placed_by_operator –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    else:
        print("   ‚ùå –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ API layout-with-cargo –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if cells_test and cells_test["success"]:
        print("   ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3 —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑ '–°–∞–º–æ–∫–∞—Ç –í–ò–í–û'")
        print("   ‚úÖ –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2 —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–∑—ã —Å cargo_name")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —è—á–µ–π–∫–∞–º–∏")
    
    if operator_cargo_test and operator_cargo_test["success"]:
        print("   ‚úÖ API —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        print("   ‚úÖ –í—Å–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ operator_cargo")
    
    print(f"\nüèÅ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if success_rate >= 80:
        print("   üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("   üìç Backend API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏!")
    else:
        print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   üìç API –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —è—á–µ–π–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–∑–∞—Ö")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_get_warehouse_id,
        test_layout_with_cargo_api,
        test_specific_cells,
        test_operator_cargo_data_retrieval
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_summary()

if __name__ == "__main__":
    main()