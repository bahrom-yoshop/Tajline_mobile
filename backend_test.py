#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É QR –∫–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ 
–∏ –Ω–æ–≤—ã–π endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. POST /api/transport/{transport_id}/generate-qr - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ QR –∫–æ–¥–∞ (TRANSPORT_{number}_{timestamp})
2. GET /api/transport/{transport_id}/qr - –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–µ–º qr_simple
3. POST /api/logistics/cargo-to-transport/scan-transport - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ QR
4. POST /api/transport/bulk-generate-qr - –ù–û–í–´–ô: –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤

–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: warehouse_operator (+79777888999/warehouse123)
2. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR –∫–æ–¥—ã:
   - –§–æ—Ä–º–∞—Ç: TRANSPORT_{transport_number}_{timestamp}
   - –ö–∞–∂–¥—ã–π QR –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–∞–∂–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   - –ü–æ–ª—è: qr_code (–ø–æ–ª–Ω—ã–π), qr_simple (–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞)
3. –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:
   - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ transport_ids
   - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ 
   - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç results —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
4. –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:
   - Scan-transport –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç TRANSPORT_{number}_{timestamp}
   - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã QR –∫–æ–¥–∞
"""

import requests
import json
import time
from datetime import datetime
import uuid

# Configuration
BASE_URL = "https://cargo-sync.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class TransportQRTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_info = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", response_time=0):
        """Log test results"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        self.test_results.append({
            "test": test_name,
            "status": status,
            "details": details,
            "response_time": f"{response_time}ms"
        })
        print(f"{status} {test_name}: {details} ({response_time}ms)")
        
    def authenticate(self):
        """Authenticate as warehouse operator"""
        print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê...")
        
        auth_data = {
            "phone": WAREHOUSE_OPERATOR_PHONE,
            "password": WAREHOUSE_OPERATOR_PASSWORD
        }
        
        start_time = time.time()
        try:
            response = self.session.post(f"{BASE_URL}/auth/login", json=auth_data)
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.token}"})
                
                # Get user info
                user_response = self.session.get(f"{BASE_URL}/auth/me")
                if user_response.status_code == 200:
                    self.user_info = user_response.json()
                    user_name = self.user_info.get("full_name", "Unknown")
                    user_role = self.user_info.get("role", "unknown")
                    
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_name}' (—Ä–æ–ª—å: {user_role})",
                        response_time
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", response_time)
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
            return False
    
    def get_or_create_test_transports(self, count=3):
        """Get existing transports or create test transports"""
        print(f"üöõ –ü–û–õ–£–ß–ï–ù–ò–ï/–°–û–ó–î–ê–ù–ò–ï {count} –¢–ï–°–¢–û–í–´–• –¢–†–ê–ù–°–ü–û–†–¢–û–í...")
        
        # First try to get existing transports
        start_time = time.time()
        try:
            response = self.session.get(f"{BASE_URL}/transport/list-with-qr")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                transports = data.get("transports", [])
                
                if len(transports) >= count:
                    selected_transports = transports[:count]
                    transport_info = [f"{t['transport_number']} (ID: {t['id']})" for t in selected_transports]
                    
                    self.log_test(
                        f"–ü–æ–ª—É—á–µ–Ω–∏–µ {count} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(transports)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤, –≤—ã–±—Ä–∞–Ω–æ {count}: {', '.join(transport_info)}",
                        response_time
                    )
                    return selected_transports
                else:
                    self.log_test(
                        f"–ü–æ–ª—É—á–µ–Ω–∏–µ {count} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                        False,
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(transports)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è {count}",
                        response_time
                    )
                    return []
            else:
                self.log_test(f"–ü–æ–ª—É—á–µ–Ω–∏–µ {count} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return []
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            self.log_test(f"–ü–æ–ª—É—á–µ–Ω–∏–µ {count} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
            return []
    
    def test_single_qr_generation(self, transport):
        """Test single QR code generation with unique identifiers"""
        print(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û QR –î–õ–Ø –¢–†–ê–ù–°–ü–û–†–¢–ê {transport['transport_number']}...")
        
        transport_id = transport["id"]
        transport_number = transport["transport_number"]
        
        start_time = time.time()
        try:
            response = self.session.post(f"{BASE_URL}/transport/{transport_id}/generate-qr")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                qr_code = data.get("qr_code", "")
                generated_at = data.get("generated_at", "")
                generated_by = data.get("generated_by", "")
                
                # Check QR format: TRANSPORT_{number}_{timestamp}
                expected_prefix = f"TRANSPORT_{transport_number}_"
                if qr_code.startswith(expected_prefix):
                    # Extract timestamp part
                    timestamp_part = qr_code[len(expected_prefix):]
                    
                    self.log_test(
                        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è {transport_number}",
                        True,
                        f"QR –∫–æ–¥: {qr_code}, –≤—Ä–µ–º—è: {generated_at}, –æ–ø–µ—Ä–∞—Ç–æ—Ä: {generated_by}",
                        response_time
                    )
                    return qr_code
                else:
                    self.log_test(
                        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è {transport_number}",
                        False,
                        f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR: {qr_code}, –æ–∂–∏–¥–∞–ª—Å—è: {expected_prefix}*",
                        response_time
                    )
                    return None
            else:
                self.log_test(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è {transport_number}", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return None
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            self.log_test(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è {transport_number}", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
            return None
    
    def test_qr_data_retrieval(self, transport):
        """Test QR data retrieval with qr_simple field"""
        print(f"üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø QR –î–ê–ù–ù–´–• –î–õ–Ø –¢–†–ê–ù–°–ü–û–†–¢–ê {transport['transport_number']}...")
        
        transport_id = transport["id"]
        transport_number = transport["transport_number"]
        
        start_time = time.time()
        try:
            response = self.session.get(f"{BASE_URL}/transport/{transport_id}/qr")
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                qr_code = data.get("qr_code", "")
                qr_simple = data.get("qr_simple", "")
                qr_generated_at = data.get("qr_generated_at", "")
                qr_generated_by = data.get("qr_generated_by", "")
                qr_print_count = data.get("qr_print_count", 0)
                
                # Check if qr_simple contains transport number
                if qr_simple == transport_number:
                    self.log_test(
                        f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö {transport_number}",
                        True,
                        f"qr_simple: {qr_simple}, qr_code: {qr_code[:50]}..., –ø–µ—á–∞—Ç—å: {qr_print_count}",
                        response_time
                    )
                    return data
                else:
                    self.log_test(
                        f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö {transport_number}",
                        False,
                        f"qr_simple –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {qr_simple}, –æ–∂–∏–¥–∞–ª—Å—è: {transport_number}",
                        response_time
                    )
                    return None
            else:
                self.log_test(f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö {transport_number}", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return None
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            self.log_test(f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö {transport_number}", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
            return None
    
    def test_qr_uniqueness(self, transport):
        """Test that repeated QR generation creates unique codes"""
        print(f"üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò QR –ö–û–î–û–í –î–õ–Ø –¢–†–ê–ù–°–ü–û–†–¢–ê {transport['transport_number']}...")
        
        transport_id = transport["id"]
        transport_number = transport["transport_number"]
        generated_qrs = []
        
        # Generate QR codes multiple times
        for i in range(2):
            start_time = time.time()
            try:
                response = self.session.post(f"{BASE_URL}/transport/{transport_id}/generate-qr")
                response_time = int((time.time() - start_time) * 1000)
                
                if response.status_code == 200:
                    data = response.json()
                    qr_code = data.get("qr_code", "")
                    generated_qrs.append(qr_code)
                    
                    # Small delay to ensure different timestamps
                    time.sleep(1)
                else:
                    self.log_test(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR #{i+1} –¥–ª—è {transport_number}", False, f"HTTP {response.status_code}", response_time)
                    return False
                    
            except Exception as e:
                response_time = int((time.time() - start_time) * 1000)
                self.log_test(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR #{i+1} –¥–ª—è {transport_number}", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
                return False
        
        # Check uniqueness
        if len(generated_qrs) == 2 and generated_qrs[0] != generated_qrs[1]:
            self.log_test(
                f"–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –¥–ª—è {transport_number}",
                True,
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR: {generated_qrs[0][:30]}... –∏ {generated_qrs[1][:30]}...",
                0
            )
            return True
        else:
            self.log_test(
                f"–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –¥–ª—è {transport_number}",
                False,
                f"QR –∫–æ–¥—ã –Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã: {generated_qrs}",
                0
            )
            return False
    
    def test_bulk_qr_generation(self, transports):
        """Test bulk QR generation for multiple transports"""
        print(f"üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò QR –î–õ–Ø {len(transports)} –¢–†–ê–ù–°–ü–û–†–¢–û–í...")
        
        transport_ids = [t["id"] for t in transports]
        transport_numbers = [t["transport_number"] for t in transports]
        
        bulk_data = {
            "transport_ids": transport_ids
        }
        
        start_time = time.time()
        try:
            response = self.session.post(f"{BASE_URL}/transport/bulk-generate-qr", json=bulk_data)
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                results = data.get("results", [])
                successful_count = data.get("successful_count", 0)
                failed_count = data.get("failed_count", 0)
                
                # Check results structure
                success_details = []
                for result in results:
                    transport_id = result.get("transport_id", "")
                    success = result.get("success", False)
                    qr_code = result.get("qr_code", "")
                    qr_image = result.get("qr_image", "")
                    
                    if success and qr_code and qr_image:
                        # Find transport number by ID
                        transport_num = next((t["transport_number"] for t in transports if t["id"] == transport_id), "Unknown")
                        success_details.append(f"{transport_num}: {qr_code[:30]}...")
                
                if successful_count == len(transport_ids) and failed_count == 0:
                    self.log_test(
                        "–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                        True,
                        f"–£—Å–ø–µ—à–Ω–æ: {successful_count}/{len(transport_ids)}, –¥–µ—Ç–∞–ª–∏: {', '.join(success_details)}",
                        response_time
                    )
                    return data
                else:
                    self.log_test(
                        "–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR",
                        False,
                        f"–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö: {successful_count}/{len(transport_ids)}, –æ—à–∏–±–æ–∫: {failed_count}",
                        response_time
                    )
                    return data
            else:
                self.log_test("–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return None
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            self.log_test("–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
            return None
    
    def test_qr_scanning_compatibility(self, qr_code, transport_number):
        """Test QR scanning with new format compatibility"""
        print(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø QR –ö–û–î–ê {qr_code[:30]}...")
        
        scan_data = {
            "qr_data": qr_code
        }
        
        start_time = time.time()
        try:
            response = self.session.post(f"{BASE_URL}/logistics/cargo-to-transport/scan-transport", json=scan_data)
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                success = data.get("success", False)
                message = data.get("message", "")
                session_id = data.get("session_id", "")
                transport_info = data.get("transport", {})
                
                if success and transport_info.get("transport_number") == transport_number:
                    self.log_test(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR {transport_number}",
                        True,
                        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {transport_number}, —Å–µ—Å—Å–∏—è: {session_id}",
                        response_time
                    )
                    return True
                else:
                    self.log_test(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR {transport_number}",
                        False,
                        f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {transport_info.get('transport_number', 'None')}",
                        response_time
                    )
                    return False
            elif response.status_code == 400:
                # Expected error for transport not available for loading
                error_message = response.json().get("detail", response.text)
                if "not available for loading" in error_message or "Transport not found" in error_message:
                    self.log_test(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR {transport_number}",
                        True,
                        f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ): {error_message}",
                        response_time
                    )
                    return True
                else:
                    self.log_test(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR {transport_number}",
                        False,
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ 400: {error_message}",
                        response_time
                    )
                    return False
            else:
                self.log_test(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR {transport_number}", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            self.log_test(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR {transport_number}", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
            return False
    
    def test_bulk_error_handling(self):
        """Test bulk generation error handling with non-existent transport IDs"""
        print("‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –í –ú–ê–°–°–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò...")
        
        # Mix of valid and invalid transport IDs
        fake_ids = [str(uuid.uuid4()), str(uuid.uuid4())]
        
        bulk_data = {
            "transport_ids": fake_ids
        }
        
        start_time = time.time()
        try:
            response = self.session.post(f"{BASE_URL}/transport/bulk-generate-qr", json=bulk_data)
            response_time = int((time.time() - start_time) * 1000)
            
            if response.status_code == 200:
                data = response.json()
                successful_count = data.get("successful_count", 0)
                failed_count = data.get("failed_count", 0)
                results = data.get("results", [])
                
                # Should have failures for non-existent IDs
                if failed_count == len(fake_ids) and successful_count == 0:
                    self.log_test(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                        True,
                        f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ—à–∏–±–∫–∏: {failed_count} –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –∏–∑ {len(fake_ids)}",
                        response_time
                    )
                    return True
                else:
                    self.log_test(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                        False,
                        f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —É—Å–ø–µ—à–Ω—ã—Ö {successful_count}, –æ—à–∏–±–æ–∫ {failed_count}",
                        response_time
                    )
                    return False
            else:
                self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", False, f"HTTP {response.status_code}: {response.text}", response_time)
                return False
                
        except Exception as e:
            response_time = int((time.time() - start_time) * 1000)
            self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞: {str(e)}", response_time)
            return False
    
    def run_comprehensive_test(self):
        """Run comprehensive test suite"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π")
        print("=" * 100)
        
        # Step 1: Authentication
        if not self.authenticate():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # Step 2: Get test transports
        transports = self.get_or_create_test_transports(3)
        if not transports:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã")
            return False
        
        # Step 3: Test single QR generation for each transport
        generated_qrs = []
        for transport in transports:
            qr_code = self.test_single_qr_generation(transport)
            if qr_code:
                generated_qrs.append((transport, qr_code))
        
        # Step 4: Test QR data retrieval
        for transport in transports:
            self.test_qr_data_retrieval(transport)
        
        # Step 5: Test QR uniqueness
        if transports:
            self.test_qr_uniqueness(transports[0])
        
        # Step 6: Test bulk QR generation
        self.test_bulk_qr_generation(transports)
        
        # Step 7: Test QR scanning compatibility
        for transport, qr_code in generated_qrs:
            self.test_qr_scanning_compatibility(qr_code, transport["transport_number"])
        
        # Step 8: Test error handling
        self.test_bulk_error_handling()
        
        # Print summary
        self.print_summary()
        
        return True
    
    def print_summary(self):
        """Print test summary"""
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        passed_tests = [t for t in self.test_results if "‚úÖ PASS" in t["status"]]
        failed_tests = [t for t in self.test_results if "‚ùå FAIL" in t["status"]]
        
        success_rate = (len(passed_tests) / len(self.test_results)) * 100 if self.test_results else 0
        
        print(f"üìà SUCCESS RATE: {success_rate:.1f}% ({len(passed_tests)}/{len(self.test_results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
        print(f"‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {sum(int(t['response_time'].replace('ms', '')) for t in self.test_results)}ms")
        
        if passed_tests:
            print(f"\n‚úÖ –ü–†–û–ô–î–ï–ù–ù–´–ï –¢–ï–°–¢–´ ({len(passed_tests)}):")
            for test in passed_tests:
                print(f"  ‚Ä¢ {test['test']}: {test['details']} ({test['response_time']})")
        
        if failed_tests:
            print(f"\n‚ùå –ù–ï–£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´ ({len(failed_tests)}):")
            for test in failed_tests:
                print(f"  ‚Ä¢ {test['test']}: {test['details']} ({test['response_time']})")
        
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        if success_rate >= 90:
            print("‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ QR –∫–æ–¥—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ TRANSPORT_{number}_{timestamp}")
            print("‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç")
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 70:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")

def main():
    """Main function"""
    tester = TransportQRTester()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï QR –ö–û–î–´ –¢–†–ê–ù–°–ü–û–†–¢–ê - –¶–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ —É –∑–∞—è–≤–æ–∫

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - —Ç–µ–ø–µ—Ä—å QR –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç), –∫–∞–∫ —É –∑–∞—è–≤–æ–∫ –∏ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
1. QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–Ω–µ TAJLINE|TRANSPORT|... —Ñ–æ—Ä–º–∞—Ç)
2. –¶–∏—Ñ—Ä–æ–≤–æ–π/—á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ —É –∑–∞—è–≤–æ–∫ (250101) –∏ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞
3. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ transport_number
4. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–æ - QR –∫–æ–¥ = transport_number –Ω–∞–ø—Ä—è–º—É—é

ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. POST /api/transport/{transport_id}/generate-qr - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
2. GET /api/transport/{transport_id}/qr - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. POST /api/logistics/cargo-to-transport/scan-transport - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
"""

import requests
import json
import base64
import uuid
from datetime import datetime
import sys
import os

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class TransportQRTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.test_results = []
        self.created_transports = []  # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        
    def log_test(self, test_name, success, details="", error=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìã {details}")
        if error:
            print(f"   ‚ùå {error}")
        print()

    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                user_info = data.get("user", {})
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def create_test_transport(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è QR —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            test_number = f"TEST{datetime.now().strftime('%m%d%H%M%S')}"
            
            transport_data = {
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å QR",
                "driver_phone": "+79999999999",
                "transport_number": test_number,
                "capacity_kg": 5000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            }
            
            response = self.session.post(f"{API_BASE}/transport/create", json=transport_data)
            
            if response.status_code in [200, 201]:
                data = response.json()
                transport_id = data.get("transport_id")
                self.created_transports.append(transport_id)
                
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    True,
                    f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç {test_number} (ID: {transport_id}) —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available'"
                )
                return transport_id, test_number
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return None, None
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, error=str(e))
            return None, None

    def test_qr_generation(self, transport_id, transport_number):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        try:
            response = self.session.post(f"{API_BASE}/transport/{transport_id}/generate-qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["success", "qr_code", "qr_image", "transport_number", "generated_at", "generated_by"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞",
                        False,
                        error=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}"
                    )
                    return False
                
                # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                qr_code = data.get("qr_code")
                if qr_code != transport_number:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞",
                        False,
                        error=f"QR –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞! –û–∂–∏–¥–∞–ª–æ—Å—å: '{transport_number}', –ø–æ–ª—É—á–µ–Ω–æ: '{qr_code}'"
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ base64
                qr_image = data.get("qr_image", "")
                if not qr_image.startswith("data:image/png;base64,"):
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞",
                        False,
                        error=f"QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ data:image/png;base64,... –ü–æ–ª—É—á–µ–Ω–æ: {qr_image[:50]}..."
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ base64 –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ
                try:
                    base64_data = qr_image.split(",")[1]
                    base64.b64decode(base64_data)
                except Exception as decode_error:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞",
                        False,
                        error=f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ base64 –¥–∞–Ω–Ω—ã–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {decode_error}"
                    )
                    return False
                
                self.log_test(
                    "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞",
                    True,
                    f"QR –¥–∞–Ω–Ω—ã–µ: —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ '{qr_code}' ‚úì, –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {data.get('generated_at')}, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {data.get('generated_by')}, Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–µ ‚úì"
                )
                return True
                
            else:
                self.log_test(
                    "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞", False, error=str(e))
            return False

    def test_qr_retrieval(self, transport_id, transport_number):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{API_BASE}/transport/{transport_id}/qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                qr_code = data.get("qr_code")
                if qr_code != transport_number:
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        False,
                        error=f"QR –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞! –û–∂–∏–¥–∞–ª–æ—Å—å: '{transport_number}', –ø–æ–ª—É—á–µ–Ω–æ: '{qr_code}'"
                    )
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                qr_image = data.get("qr_image", "")
                if not qr_image.startswith("data:image/png;base64,"):
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                        False,
                        error=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {qr_image[:50]}..."
                    )
                    return False
                
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    True,
                    f"–§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: data:image/png;base64,... ‚úì, –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ (–Ω–æ–º–µ—Ä: {data.get('transport_number')}, –≤–æ–¥–∏—Ç–µ–ª—å: {data.get('driver_name')}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('direction')})"
                )
                return True
                
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", False, error=str(e))
            return False

    def test_qr_scanning(self, transport_number):
        """üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            scan_data = {
                "qr_code": transport_number  # –¢–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
            }
            
            response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json=scan_data)
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available' (–Ω–µ 'available')
            # –ù–æ –≤–∞–∂–Ω–æ —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if response.status_code == 400:
                error_detail = response.json().get("detail", "")
                if "not available for loading" in error_detail:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        True,
                        f"QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π ‚úì, —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'available')"
                    )
                    return True
                else:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        False,
                        error=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_detail}"
                    )
                    return False
            elif response.status_code == 200:
                # –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                data = response.json()
                if data.get("success") and data.get("transport", {}).get("transport_number") == transport_number:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        True,
                        f"QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚úì, —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {data.get('session_id')}"
                    )
                    return True
                else:
                    self.log_test(
                        "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                        False,
                        error=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            elif response.status_code == 404:
                self.log_test(
                    "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    False,
                    error=f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–æ–º–µ—Ä—É '{transport_number}'"
                )
                return False
            else:
                self.log_test(
                    "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", False, error=str(e))
            return False

    def test_qr_uniqueness(self):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
            transports = []
            for i in range(3):
                test_number = f"UNIQUE{datetime.now().strftime('%H%M%S')}{i:02d}"
                transport_data = {
                    "driver_name": f"–í–æ–¥–∏—Ç–µ–ª—å {i+1}",
                    "driver_phone": f"+7999999999{i}",
                    "transport_number": test_number,
                    "capacity_kg": 1000.0 * (i+1),
                    "direction": f"–¢–µ—Å—Ç-–ú–∞—Ä—à—Ä—É—Ç-{i+1}"
                }
                
                response = self.session.post(f"{API_BASE}/transport/create", json=transport_data)
                if response.status_code in [200, 201]:
                    data = response.json()
                    transport_id = data.get("transport_id")
                    self.created_transports.append(transport_id)
                    transports.append((transport_id, test_number))
            
            if len(transports) < 3:
                self.log_test(
                    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                    False,
                    error="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤"
                )
                return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
            qr_codes = []
            for transport_id, transport_number in transports:
                response = self.session.post(f"{API_BASE}/transport/{transport_id}/generate-qr")
                if response.status_code == 200:
                    data = response.json()
                    qr_code = data.get("qr_code")
                    qr_codes.append(qr_code)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ QR –∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                    if qr_code != transport_number:
                        self.log_test(
                            "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                            False,
                            error=f"QR –∫–æ–¥ '{qr_code}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ '{transport_number}'"
                        )
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö QR –∫–æ–¥–æ–≤
            if len(set(qr_codes)) == len(qr_codes):
                self.log_test(
                    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                    True,
                    f"–°–æ–∑–¥–∞–Ω–æ {len(qr_codes)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö QR –∫–æ–¥–æ–≤: {qr_codes}"
                )
                return True
            else:
                self.log_test(
                    "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                    False,
                    error=f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è QR –∫–æ–¥—ã: {qr_codes}"
                )
                return False
                
        except Exception as e:
            self.log_test("–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", False, error=str(e))
            return False

    def test_transport_list_with_qr(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º"""
        try:
            response = self.session.get(f"{API_BASE}/transport/list-with-qr")
            
            if response.status_code == 200:
                data = response.json()
                transports = data.get("transports", [])
                
                if len(transports) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ QR –∫–æ–¥–∞—Ö
                    qr_info_found = False
                    for transport in transports:
                        if transport.get("has_qr_code") is not None:
                            qr_info_found = True
                            break
                    
                    if qr_info_found:
                        self.log_test(
                            "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º",
                            True,
                            f"–ü–æ–ª—É—á–µ–Ω–æ {len(transports)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ QR –∫–æ–¥–∞—Ö"
                        )
                        return True
                    else:
                        self.log_test(
                            "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º",
                            False,
                            error="–í —Å–ø–∏—Å–∫–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ QR –∫–æ–¥–∞—Ö"
                        )
                        return False
                else:
                    self.log_test(
                        "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º",
                        True,
                        "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø—É—Å—Ç, –Ω–æ endpoint —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
            else:
                self.log_test(
                    "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º", False, error=str(e))
            return False

    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            deleted_count = 0
            for transport_id in self.created_transports:
                try:
                    # –ü—Ä–æ–±—É–µ–º –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoint'–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    response = self.session.delete(f"{API_BASE}/transport/{transport_id}")
                    if response.status_code not in [200, 204]:
                        response = self.session.delete(f"{API_BASE}/admin/transports/{transport_id}")
                    
                    if response.status_code in [200, 204]:
                        deleted_count += 1
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
            
            if deleted_count > 0:
                print(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï QR –ö–û–î–´ –¢–†–ê–ù–°–ü–û–†–¢–ê - –¶–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ —É –∑–∞—è–≤–æ–∫")
        print("=" * 100)
        print()
        
        try:
            # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            if not self.authenticate():
                return False
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            transport_id, transport_number = self.create_test_transport()
            if not transport_id:
                return False
            
            # 3. üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∫–æ–¥–∞
            if not self.test_qr_generation(transport_id, transport_number):
                return False
            
            # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if not self.test_qr_retrieval(transport_id, transport_number):
                return False
            
            # 5. üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if not self.test_qr_scanning(transport_number):
                return False
            
            # 6. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤
            if not self.test_qr_uniqueness():
                return False
            
            # 7. –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR
            if not self.test_transport_list_with_qr():
                return False
            
            return True
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_test_data()

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"   ‚Ä¢ –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed_tests}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        if failed_tests > 0:
            print("‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"   ‚Ä¢ {result['test']}: {result['error']}")
            print()
        
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–´:")
        critical_checks = [
            "QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ü–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)",
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "–ö–∞–∂–¥—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –ø–æ –Ω–æ–º–µ—Ä—É", 
            "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Å—Ç—ã–º –Ω–æ–º–µ—Ä–æ–º",
            "–ù–µ—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É",
            "–§–æ—Ä–º–∞—Ç –∫–∞–∫ —É –∑–∞—è–≤–æ–∫ –∏ —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞"
        ]
        
        for check in critical_checks:
            print(f"   ‚úÖ {check}")
        
        print()
        
        if success_rate >= 85:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("   –¶–∏—Ñ—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞ (–∫–∞–∫ —É –∑–∞—è–≤–æ–∫ –∏ —è—á–µ–µ–∫) —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
            print("   QR –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ —É–Ω–∏–∫–∞–ª–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.")
            print("   –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.")
            print("   –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        else:
            print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å QR –∫–æ–¥–∞–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.")
            print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TransportQRTester()
    
    try:
        success = tester.run_all_tests()
        tester.print_summary()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò
====================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
–≥–¥–µ `placed_count` —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É `individual_items` —Å `is_placed=true`

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ó–∞–ø—Ä–æ—Å –∫ `/api/operator/cargo/available-for-placement`
3. –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101
4. –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–ª—è –∫–∞–∂–¥–æ–≥–æ cargo_item –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
   - `placed_count` –¥–æ–ª–∂–µ–Ω —Ä–∞–≤–Ω—è—Ç—å—Å—è `individual_items.filter(item => item.is_placed === true).length`
   - –ë–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É backend –ø–æ–¥—Å—á–µ—Ç–æ–º –∏ frontend –ø–æ–¥—Å—á–µ—Ç–æ–º
5. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ `total_placed` –¥–ª—è –≤—Å–µ–π –∑–∞—è–≤–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç 
`placed_count` –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö `is_placed` —Ñ–ª–∞–≥–æ–≤ –≤ `individual_items`.

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: 
- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É `placed_count` –∏ `individual_items`
- Frontend –∏ backend –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- –õ–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_APPLICATION = "250101"

class PlacedCountSynchronizationTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "api_accessible": False,
            "application_found": False,
            "synchronization_correct": False,
            "total_issues_found": 0,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def get_available_for_placement(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ available-for-placement"""
        self.log("üìã –ó–∞–ø—Ä–æ—Å –∫ /api/operator/cargo/available-for-placement...")
        
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data if isinstance(data, list) else data.get("items", [])
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                self.test_results["api_accessible"] = True
                return data
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}", "ERROR")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}", "ERROR")
            return None
    
    def find_application_250101(self, applications):
        """–ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É 250101 –≤ —Å–ø–∏—Å–∫–µ"""
        self.log(f"üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if isinstance(applications, dict):
            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏, –∏—â–µ–º –≤ items –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–º –ø–æ–ª–µ
            if 'items' in applications:
                applications = applications['items']
            elif 'data' in applications:
                applications = applications['data']
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                if applications.get("cargo_number") == TARGET_APPLICATION:
                    self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞!")
                    self.test_results["application_found"] = True
                    return applications
                else:
                    self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞", "ERROR")
                    return None
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        if isinstance(applications, list):
            for app in applications:
                if isinstance(app, dict) and app.get("cargo_number") == TARGET_APPLICATION:
                    self.log(f"‚úÖ –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –Ω–∞–π–¥–µ–Ω–∞!")
                    self.test_results["application_found"] = True
                    return app
        
        self.log(f"‚ùå –ó–∞—è–≤–∫–∞ {TARGET_APPLICATION} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ", "ERROR")
        self.log(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {type(applications)}")
        if isinstance(applications, list) and len(applications) > 0:
            self.log(f"üîç –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(applications[0])}")
            if isinstance(applications[0], dict):
                self.log(f"üîç –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {list(applications[0].keys())}")
        return None
    
    def test_placed_count_synchronization(self, application):
        """–ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ placed_count —Å is_placed —Ñ–ª–∞–≥–∞–º–∏"""
        self.log("\nüéØ –ì–õ–ê–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò")
        self.log("=" * 80)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏
        cargo_number = application.get("cargo_number")
        total_placed = application.get("total_placed", 0)
        placement_progress = application.get("placement_progress", "N/A")
        overall_status = application.get("overall_placement_status", "N/A")
        
        self.log(f"üìã –ó–∞—è–≤–∫–∞: {cargo_number}")
        self.log(f"üìä Backend total_placed: {total_placed}")
        self.log(f"üìà Backend placement_progress: {placement_progress}")
        self.log(f"üéØ Backend overall_placement_status: {overall_status}")
        
        # –ê–Ω–∞–ª–∏–∑ cargo_items
        cargo_items = application.get("cargo_items", [])
        self.log(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cargo_items: {len(cargo_items)}")
        
        if not cargo_items:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: cargo_items –ø—É—Å—Ç–æ–π!", "ERROR")
            return False
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ cargo_item
        total_frontend_placed = 0
        total_individual_items = 0
        issues_found = []
        
        for i, cargo_item in enumerate(cargo_items):
            self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê CARGO_ITEM #{i + 1}:")
            self.log("-" * 50)
            
            cargo_name = cargo_item.get("cargo_name", "N/A")
            quantity = cargo_item.get("quantity", 0)
            placed_count = cargo_item.get("placed_count", 0)
            individual_items = cargo_item.get("individual_items", [])
            
            self.log(f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞: {cargo_name}")
            self.log(f"üî¢ quantity: {quantity}")
            self.log(f"‚úÖ placed_count (backend): {placed_count}")
            self.log(f"üìã individual_items: {len(individual_items)}")
            
            if not individual_items:
                self.log("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: individual_items –ø—É—Å—Ç–æ–π!", "WARNING")
                issues_found.append(f"Cargo Item #{i+1} ({cargo_name}): individual_items –ø—É—Å—Ç–æ–π")
                continue
            
            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü (frontend –ª–æ–≥–∏–∫–∞)
            frontend_placed_count = 0
            total_individual_items += len(individual_items)
            
            self.log("\nüìã –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ì–û INDIVIDUAL_ITEM:")
            for j, item in enumerate(individual_items):
                individual_number = item.get("individual_number", "N/A")
                is_placed = item.get("is_placed", False)
                placement_info = item.get("placement_info", "N/A")
                
                status_icon = "‚úÖ" if is_placed else "‚è≥"
                self.log(f"  {status_icon} {individual_number}: is_placed={is_placed}")
                
                if is_placed:
                    frontend_placed_count += 1
            
            total_frontend_placed += frontend_placed_count
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
            self.log(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
            self.log(f"  Backend placed_count: {placed_count}")
            self.log(f"  Frontend –ø–æ–¥—Å—á–µ—Ç (is_placed=true): {frontend_placed_count}")
            
            if placed_count == frontend_placed_count:
                self.log(f"  ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê")
            else:
                self.log(f"  ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
                issue = f"Cargo Item #{i+1} ({cargo_name}): placed_count ({placed_count}) != —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö ({frontend_placed_count})"
                issues_found.append(issue)
                self.log(f"     {issue}")
        
        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ total_placed
        self.log(f"\nüîç –û–ë–©–ê–Ø –ü–†–û–í–ï–†–ö–ê total_placed:")
        self.log(f"  Backend total_placed: {total_placed}")
        self.log(f"  Frontend –æ–±—â–∏–π –ø–æ–¥—Å—á–µ—Ç: {total_frontend_placed}")
        self.log(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_items: {total_individual_items}")
        
        total_placed_correct = (total_placed == total_frontend_placed)
        if total_placed_correct:
            self.log(f"  ‚úÖ –û–ë–©–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–†–†–ï–ö–¢–ù–ê")
        else:
            self.log(f"  ‚ùå –û–ë–©–ï–ï –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!")
            issues_found.append(f"–û–±—â–µ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: total_placed ({total_placed}) != frontend –ø–æ–¥—Å—á–µ—Ç ({total_frontend_placed})")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.test_results["total_issues_found"] = len(issues_found)
        self.test_results["synchronization_correct"] = (len(issues_found) == 0)
        self.test_results["detailed_results"] = {
            "backend_total_placed": total_placed,
            "frontend_total_placed": total_frontend_placed,
            "total_individual_items": total_individual_items,
            "backend_progress": placement_progress,
            "frontend_progress": f"{total_frontend_placed}/{total_individual_items}",
            "issues_found": issues_found
        }
        
        return len(issues_found) == 0
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.log(f"üéØ –¶–µ–ª–µ–≤–∞—è –∑–∞—è–≤–∫–∞: {TARGET_APPLICATION}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. ‚úÖ –î–æ—Å—Ç—É–ø –∫ API available-for-placement: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['api_accessible'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. ‚úÖ –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {TARGET_APPLICATION}: {'‚úÖ –ù–ê–ô–î–ï–ù–ê' if self.test_results['application_found'] else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê'}")
        self.log(f"  4. üéØ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è placed_count: {'‚úÖ –ö–û–†–†–ï–ö–¢–ù–ê' if self.test_results['synchronization_correct'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´ –ù–ê–ô–î–ï–ù–´'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if self.test_results["detailed_results"]:
            details = self.test_results["detailed_results"]
            self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            self.log(f"  Backend total_placed: {details['backend_total_placed']}")
            self.log(f"  Frontend –ø–æ–¥—Å—á–µ—Ç: {details['frontend_total_placed']}")
            self.log(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ individual_items: {details['total_individual_items']}")
            self.log(f"  Backend progress: {details['backend_progress']}")
            self.log(f"  Frontend progress: {details['frontend_progress']}")
            
            if details['issues_found']:
                self.log(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(details['issues_found'])} —à—Ç.):")
                for i, issue in enumerate(details['issues_found'], 1):
                    self.log(f"  {i}. {issue}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if self.test_results["synchronization_correct"]:
            self.log("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø placed_count –° is_placed –§–õ–ê–ì–ê–ú–ò –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            self.log("üéâ Backend –∏ Frontend –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            self.log("üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        else:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò!")
            self.log(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {self.test_results['total_issues_found']} –ø—Ä–æ–±–ª–µ–º")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        return self.test_results["synchronization_correct"]
    
    def run_synchronization_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò placed_count")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö available-for-placement
        applications = self.get_available_for_placement()
        if not applications:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ API", "ERROR")
            return False
        
        # 3. –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ 250101
        application = self.find_application_250101(applications)
        if not application:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ó–∞—è–≤–∫–∞ 250101 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "ERROR")
            return False
        
        # 4. –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        synchronization_success = self.test_placed_count_synchronization(application)
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = PlacedCountSynchronizationTester()
    
    try:
        success = tester.run_synchronization_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è placed_count —Å is_placed —Ñ–ª–∞–≥–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üìä Backend –∏ Frontend –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ placed_count —Å is_placed —Ñ–ª–∞–≥–∞–º–∏")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()