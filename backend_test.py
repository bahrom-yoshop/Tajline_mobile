#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: Backend API endpoints –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã UI flickering –≤ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ 
–ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1) –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ isInitializing —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–∫–∞–∑–æ–º —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
2) –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ fetchUserData –∏ clearAllAppData –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è dataLoaded —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
3) –î–æ–±–∞–≤–ª–µ–Ω –∫—Ä–∞—Å–∏–≤—ã–π —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º TAJLINE –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º spinner

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:
1) Authentication endpoints - —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:
   - POST /api/auth/login 
   - GET /api/auth/me
   - POST /api/auth/logout
2) Dashboard analytics endpoints - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
   - GET /api/admin/dashboard/analytics (–¥–ª—è –∞–¥–º–∏–Ω–∞)
   - GET /api/operator/dashboard/analytics (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
3) –û—Å–Ω–æ–≤–Ω—ã–µ data endpoints:
   - GET /api/cargo/all
   - GET /api/warehouses
   - GET /api/notifications
4) User management endpoints:
   - GET /api/admin/users

–¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:
- –ê–¥–º–∏–Ω: phone="+79999888777", password="admin123"

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ HTTP —Å—Ç–∞—Ç—É—Å—ã
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-ops.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class UIFlickeringFixTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.admin_info = None
        self.operator_info = None
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   üìã –î–µ—Ç–∞–ª–∏: {details}")
        if error_msg:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg}")
        print()

    def test_admin_login(self):
        """–¢–µ—Å—Ç 1: POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                self.admin_info = data.get("user", {})
                
                if self.admin_token and self.admin_info.get("role") == "admin":
                    self.log_test(
                        "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{self.admin_info.get('full_name')}' (–Ω–æ–º–µ—Ä: {self.admin_info.get('user_number')}), —Ä–æ–ª—å: {self.admin_info.get('role')}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                    )
                    return True
                else:
                    self.log_test(
                        "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        False,
                        "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ —Ä–æ–ª—å –Ω–µ admin",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/auth/login - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_me_endpoint(self):
        """–¢–µ—Å—Ç 2: GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/auth/me", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                user_info = data.get("user", {})
                
                if user_info.get("role") == "admin" and user_info.get("phone") == "+79999888777":
                    self.log_test(
                        "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        True,
                        f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {user_info.get('full_name')} ({user_info.get('role')})"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        False,
                        "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/auth/me - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_dashboard_analytics(self):
        """–¢–µ—Å—Ç 3: GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/admin/dashboard/analytics", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                expected_fields = ["total_cargo", "total_users", "total_warehouses", "recent_activity"]
                present_fields = [field for field in expected_fields if field in data]
                
                if len(present_fields) >= 2:  # –•–æ—Ç—è –±—ã 2 –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    self.log_test(
                        "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                        True,
                        f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {present_fields}"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                        False,
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è: {present_fields}",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/admin/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_operator_login(self):
        """–¢–µ—Å—Ç 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.operator_info = data.get("user", {})
                
                if self.operator_token and self.operator_info.get("role") == "warehouse_operator":
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ '{self.operator_info.get('full_name')}' (—Ä–æ–ª—å: {self.operator_info.get('role')})"
                    )
                    return True
                else:
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                        False,
                        "–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ —Ä–æ–ª—å –Ω–µ warehouse_operator",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è operator endpoints",
                False,
                "",
                str(e)
            )
            return False

    def test_operator_dashboard_analytics(self):
        """–¢–µ—Å—Ç 5: GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if not self.operator_token:
                self.log_test(
                    "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = self.session.get(f"{API_BASE}/operator/dashboard/analytics", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                expected_fields = ["cargo_in_warehouse", "placement_statistics", "recent_placements"]
                present_fields = [field for field in expected_fields if field in data]
                
                if len(present_fields) >= 1:  # –•–æ—Ç—è –±—ã 1 –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    self.log_test(
                        "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {present_fields}"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                        False,
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è: {present_fields}",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/operator/dashboard/analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_cargo_all_endpoint(self):
        """–¢–µ—Å—Ç 6: GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/cargo/all", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if isinstance(data, list):
                    cargo_count = len(data)
                elif isinstance(data, dict) and "items" in data:
                    cargo_count = len(data["items"])
                else:
                    cargo_count = 0
                
                if cargo_count > 0:
                    self.log_test(
                        "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                        True,  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–µ–Ω
                        "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç, –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
            else:
                self.log_test(
                    "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/cargo/all - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–∑–æ–≤",
                False,
                "",
                str(e)
            )
            return False

    def test_warehouses_endpoint(self):
        """–¢–µ—Å—Ç 7: GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/warehouses", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    warehouse_count = len(data)
                    
                    if warehouse_count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞
                        first_warehouse = data[0]
                        required_fields = ["id", "name", "location"]
                        missing_fields = [field for field in required_fields if field not in first_warehouse]
                        
                        if not missing_fields:
                            self.log_test(
                                "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                                True,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
                            )
                            return True
                        else:
                            self.log_test(
                                "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                                False,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {warehouse_count} —Å–∫–ª–∞–¥–æ–≤, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}",
                                f"–ü–µ—Ä–≤—ã–π —Å–∫–ª–∞–¥: {first_warehouse}"
                            )
                            return False
                    else:
                        self.log_test(
                            "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                            True,  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–µ–Ω
                            "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç, –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                        )
                        return True
                else:
                    self.log_test(
                        "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                        False,
                        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/warehouses - –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤",
                False,
                "",
                str(e)
            )
            return False

    def test_notifications_endpoint(self):
        """–¢–µ—Å—Ç 8: GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/notifications", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    notification_count = len(data)
                    self.log_test(
                        "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                elif isinstance(data, dict) and "items" in data:
                    notification_count = len(data["items"])
                    self.log_test(
                        "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {notification_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç), endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        False,
                        "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
                        f"–û—Ç–≤–µ—Ç: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                False,
                "",
                str(e)
            )
            return False

    def test_admin_users_endpoint(self):
        """–¢–µ—Å—Ç 9: GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            if not self.admin_token:
                self.log_test(
                    "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.get(f"{API_BASE}/admin/users", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                
                if isinstance(data, list):
                    user_count = len(data)
                elif isinstance(data, dict) and "items" in data:
                    user_count = len(data["items"])
                else:
                    user_count = 0
                
                if user_count > 0:
                    self.log_test(
                        "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω–æ {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_test(
                        "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                        True,  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∂–µ –≤–∞–ª–∏–¥–µ–Ω
                        "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, –Ω–æ endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
            else:
                self.log_test(
                    "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "GET /api/admin/users - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                False,
                "",
                str(e)
            )
            return False

    def test_auth_logout(self):
        """–¢–µ—Å—Ç 10: POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if not self.admin_token:
                self.log_test(
                    "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                    False,
                    "",
                    "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
                return False
            
            headers = {"Authorization": f"Bearer {self.admin_token}"}
            response = self.session.post(f"{API_BASE}/auth/logout", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.log_test(
                    "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                    True,
                    f"–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {data.get('message', 'OK')}"
                )
                return True
            else:
                self.log_test(
                    "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "POST /api/auth/logout - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
                False,
                "",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: Backend API endpoints –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI flickering")
        print("=" * 100)
        print("üéØ –§–æ–∫—É—Å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ frontend –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        print("=" * 100)
        print()
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_admin_login,
            self.test_admin_me_endpoint,
            self.test_admin_dashboard_analytics,
            self.test_operator_login,
            self.test_operator_dashboard_analytics,
            self.test_cargo_all_endpoint,
            self.test_warehouses_endpoint,
            self.test_notifications_endpoint,
            self.test_admin_users_endpoint,
            self.test_auth_logout
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            if test():
                passed_tests += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            import time
            time.sleep(0.5)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ frontend –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ UI flickering —Ä–µ—à–µ–Ω–∞ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è API")
        elif success_rate >= 70:
            print("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ endpoints —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üîß –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoints")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ backend —Å–∏—Å—Ç–µ–º—ã")
        
        print()
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("-" * 50)
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
            if result["error"]:
                print(f"   ‚ö†Ô∏è {result['error']}")
        
        return success_rate >= 70

if __name__ == "__main__":
    tester = UIFlickeringFixTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI flickering –Ω–µ –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    else:
        print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø backend API endpoints")
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è React –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –†–ï–®–ï–ù–ò–Ø:
1) "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –∏ –≥—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–∞ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
2) React DOM –æ—à–∏–±–∫–∏: "insertBefore" –∏ "removeChild" - –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1) –î–æ–±–∞–≤–ª–µ–Ω try-catch –±–ª–æ–∫ –≤ executeDelete –¥–ª—è cargo-placement —Ç–∏–ø–∞
2) –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ (timeout) –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
3) –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤
4) –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∞—Ö
5) –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

–û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2) –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
3) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ—à–∏–±–∫–∏ –Ω–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç
4) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Backend –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ React DOM –æ—à–∏–±–æ–∫
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-ops.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class TajlineCargoRemovalTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.available_cargo = []
        self.test_results = []
        
    def log_test(self, test_name, success, details="", error_msg=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error_msg,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {test_name}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        if error_msg:
            print(f"   –û—à–∏–±–∫–∞: {error_msg}")
        print()

    def test_warehouse_operator_auth(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)"""
        try:
            auth_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                operator_name = self.operator_info.get("full_name", "Unknown")
                operator_role = self.operator_info.get("role", "Unknown")
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{operator_name}', —Ä–æ–ª—å: {operator_role}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                False,
                "",
                str(e)
            )
            return False

    def test_get_available_cargo_for_placement(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "items" in data:
                    self.available_cargo = data["items"]
                    cargo_count = len(self.available_cargo)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≥—Ä—É–∑—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if cargo_count > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞
                        first_cargo = self.available_cargo[0]
                        required_fields = ["id", "cargo_number", "sender_full_name", "recipient_full_name", "weight"]
                        missing_fields = [field for field in required_fields if field not in first_cargo]
                        
                        if not missing_fields:
                            self.log_test(
                                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                True,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                                False,
                                f"–ü–æ–ª—É—á–µ–Ω–æ {cargo_count} –≥—Ä—É–∑–æ–≤, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}",
                                "–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                            False,
                            "–°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç",
                            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ",
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                False,
                "",
                str(e)
            )
            return False

    def test_single_cargo_deletion(self):
        """–¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞"""
        try:
            if not self.available_cargo:
                self.log_test(
                    "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                    False,
                    "",
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cargo = self.available_cargo[0]
            cargo_id = test_cargo["id"]
            cargo_number = test_cargo["cargo_number"]
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            response = self.session.delete(f"{API_BASE}/operator/cargo/{cargo_id}/remove-from-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫
                expected_fields = ["success", "message", "cargo_number"]
                missing_fields = [field for field in expected_fields if field not in data]
                
                if not missing_fields:
                    success_status = data.get("success", False)
                    message = data.get("message", "")
                    returned_cargo_number = data.get("cargo_number", "")
                    
                    if success_status and returned_cargo_number:
                        self.log_test(
                            "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                            True,
                            f"–ì—Ä—É–∑ {returned_cargo_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫: {data}"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                            False,
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data}",
                            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ API"
                        )
                        return False
                else:
                    self.log_test(
                        "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}",
                        f"–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å React –æ—à–∏–±–∫–∏: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ï–¥–∏–Ω–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞",
                False,
                "",
                str(e)
            )
            return False

    def test_bulk_cargo_deletion(self):
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
        try:
            if len(self.available_cargo) < 2:
                self.log_test(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    "",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)"
                )
                return False
            
            # –ë–µ—Ä–µ–º 2-3 –≥—Ä—É–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            test_cargo_ids = [cargo["id"] for cargo in self.available_cargo[1:4]]  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2-3 –≥—Ä—É–∑–∞
            test_cargo_numbers = [cargo["cargo_number"] for cargo in self.available_cargo[1:4]]
            
            bulk_delete_data = {
                "cargo_ids": test_cargo_ids
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            response = self.session.delete(f"{API_BASE}/operator/cargo/bulk-remove-from-placement", json=bulk_delete_data)
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫
                expected_fields = ["deleted_count", "total_requested", "deleted_cargo_numbers"]
                missing_fields = [field for field in expected_fields if field not in data]
                
                if not missing_fields:
                    deleted_count = data.get("deleted_count", 0)
                    total_requested = data.get("total_requested", 0)
                    deleted_cargo_numbers = data.get("deleted_cargo_numbers", [])
                    
                    if deleted_count > 0 and total_requested == len(test_cargo_ids):
                        self.log_test(
                            "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                            True,
                            f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∏–∑ {total_requested} –≥—Ä—É–∑–æ–≤, –Ω–æ–º–µ—Ä–∞: {deleted_cargo_numbers}, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫"
                        )
                        return True
                    else:
                        self.log_test(
                            "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                            False,
                            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ: deleted_count={deleted_count}, total_requested={total_requested}",
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {data}"
                        )
                        return False
                else:
                    self.log_test(
                        "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}",
                        f"–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å React –æ—à–∏–±–∫–∏: {data}"
                    )
                    return False
            elif response.status_code == 422:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Pydantic
                data = response.json()
                self.log_test(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                    True,
                    f"Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {data}",
                    "–≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                )
                return True
            else:
                self.log_test(
                    "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤",
                False,
                "",
                str(e)
            )
            return False

    def test_response_structure_validation(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "items" in data:
                    updated_cargo = data["items"]
                    updated_count = len(updated_cargo)
                    original_count = len(self.available_cargo)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å (–≥—Ä—É–∑—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã) –∏–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º
                    if updated_count <= original_count:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –≤–∞–ª–∏–¥–Ω—ã (–Ω–µ—Ç null/undefined –∑–Ω–∞—á–µ–Ω–∏–π)
                        invalid_items = []
                        for i, cargo in enumerate(updated_cargo):
                            if not cargo or not isinstance(cargo, dict):
                                invalid_items.append(f"–ò–Ω–¥–µ–∫—Å {i}: {cargo}")
                            elif not cargo.get("id") or not cargo.get("cargo_number"):
                                invalid_items.append(f"–ò–Ω–¥–µ–∫—Å {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                        
                        if not invalid_items:
                            self.log_test(
                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                                True,
                                f"–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –±—ã–ª–æ {original_count} –≥—Ä—É–∑–æ–≤, —Å—Ç–∞–ª–æ {updated_count}, –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã, –Ω–µ—Ç null/undefined –∑–Ω–∞—á–µ–Ω–∏–π"
                            )
                            return True
                        else:
                            self.log_test(
                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                                False,
                                f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ: {invalid_items}",
                                "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å React DOM –æ—à–∏–±–∫–∏"
                            )
                            return False
                    else:
                        self.log_test(
                            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                            False,
                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –±—ã–ª–æ {original_count}, —Å—Ç–∞–ª–æ {updated_count}",
                            "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–∑–æ–≤"
                        )
                        return False
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                        False,
                        "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ",
                        f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}"
                    )
                    return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                    False,
                    f"HTTP {response.status_code}",
                    response.text
                )
                return False
                
        except Exception as e:
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è frontend –æ—à–∏–±–æ–∫",
                False,
                "",
                str(e)
            )
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è React –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ")
        print("=" * 100)
        print()
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
        tests = [
            self.test_warehouse_operator_auth,
            self.test_get_available_cargo_for_placement,
            self.test_single_cargo_deletion,
            self.test_bulk_cargo_deletion,
            self.test_response_structure_validation
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            if test():
                passed_tests += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            import time
            time.sleep(1)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        success_rate = (passed_tests / total_tests) * 100
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        print()
        
        if success_rate >= 80:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–°–ü–ï–•: Backend –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π React –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–∑–æ–≤!")
            print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ API –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç React DOM –æ—à–∏–±–∫–∏")
            print("‚úÖ –ï–¥–∏–Ω–∏—á–Ω–æ–µ –∏ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´: Backend –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π React –æ—à–∏–±–æ–∫")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ API endpoints")
        
        print()
        print("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print("-" * 50)
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
            if result["error"]:
                print(f"   ‚ö†Ô∏è {result['error']}")
        
        return success_rate >= 80

if __name__ == "__main__":
    tester = TajlineCargoRemovalTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –î–û–°–¢–ò–ì–ù–£–¢: Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–∑–æ–≤–∞ React DOM –æ—à–∏–±–æ–∫!")
    else:
        print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è React –æ—à–∏–±–æ–∫")