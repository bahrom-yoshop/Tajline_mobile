#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ QR –∫–æ–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç—å—é

–¶–ï–õ–¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - 
—Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–º–µ–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–∞ –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:
1. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR –∫–æ–¥—ã: –§–æ—Ä–º–∞—Ç TRANSPORT_{transport_number}_{timestamp} –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
2. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –ö–∞–∂–¥—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–π QR –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: QR –∫–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å—è—Ç—Å—è –≤ scan-transport
4. –ü–µ—á–∞—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: QR –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞

ENDPOINTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. POST /api/transport/{transport_id}/generate-qr - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ QR –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
2. GET /api/transport/{transport_id}/qr - –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—á–∞—Ç–∏
3. POST /api/transport/{transport_id}/print-qr - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏
4. POST /api/logistics/cargo-to-transport/scan-transport - –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
"""

import requests
import json
import time
import re
from datetime import datetime
from typing import Dict, List, Optional

class TransportQRTester:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º backend URL –∏–∑ .env —Ñ–∞–π–ª–∞
        try:
            with open('/app/frontend/.env', 'r') as f:
                env_content = f.read()
                backend_url_match = re.search(r'REACT_APP_BACKEND_URL=(.+)', env_content)
                if backend_url_match:
                    self.base_url = backend_url_match.group(1).strip()
                else:
                    self.base_url = "http://localhost:8001"
        except:
            self.base_url = "http://localhost:8001"
        
        self.api_url = f"{self.base_url}/api"
        self.token = None
        self.test_results = []
        self.transport_ids = []
        self.generated_qr_codes = []
        
        print(f"üîß Backend URL: {self.base_url}")
        print(f"üîß API URL: {self.api_url}")

    def log_test(self, test_name: str, success: bool, details: str = "", response_data: dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat(),
            "response_data": response_data
        }
        self.test_results.append(result)
        print(f"{status} {test_name}")
        if details:
            print(f"   üìù {details}")
        if not success and response_data:
            print(f"   üîç Response: {json.dumps(response_data, indent=2, ensure_ascii=False)}")

    def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞"""
        try:
            login_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = requests.post(f"{self.api_url}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                user_info = data.get("user", {})
                
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)",
                    True,
                    f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name', 'Unknown')}' (—Ä–æ–ª—å: {user_info.get('role', 'unknown')})"
                )
                return True
            else:
                self.log_test(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}",
                    response.json() if response.text else None
                )
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"Exception: {str(e)}")
            return False

    def get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        return {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }

    def create_test_transport(self, transport_number: str) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"""
        try:
            transport_data = {
                "driver_name": f"–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å {transport_number}",
                "driver_phone": f"+7999{transport_number[-6:]}",
                "transport_number": transport_number,
                "capacity_kg": 5000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            }
            
            response = requests.post(
                f"{self.api_url}/transport/create",
                json=transport_data,
                headers=self.get_headers()
            )
            
            if response.status_code in [200, 201]:
                data = response.json()
                transport_id = data.get("transport_id") or data.get("id")
                
                self.log_test(
                    f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {transport_number}",
                    True,
                    f"–°–æ–∑–¥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ID: {transport_id}"
                )
                return transport_id
            else:
                self.log_test(
                    f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {transport_number}",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return None
                
        except Exception as e:
            self.log_test(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {transport_number}", False, f"Exception: {str(e)}")
            return None

    def find_or_create_test_transports(self) -> bool:
        """–ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
        if self.find_test_transports():
            return True
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
        self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", True, "–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è QR —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        test_transport_numbers = [
            f"TEST{datetime.now().strftime('%m%d%H%M%S')}01",
            f"TEST{datetime.now().strftime('%m%d%H%M%S')}02", 
            f"TEST{datetime.now().strftime('%m%d%H%M%S')}03"
        ]
        
        created_ids = []
        for transport_number in test_transport_numbers:
            transport_id = self.create_test_transport(transport_number)
            if transport_id:
                created_ids.append(transport_id)
        
        self.transport_ids = created_ids
        
        if len(self.transport_ids) > 0:
            self.log_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                True,
                f"–°–æ–∑–¥–∞–Ω–æ {len(self.transport_ids)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤"
            )
            return True
        else:
            self.log_test(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤",
                False,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã"
            )
            return False
        """–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            response = requests.get(f"{self.api_url}/transport/list", headers=self.get_headers())
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, list):
                    transports = data
                elif isinstance(data, dict):
                    transports = data.get("items", data.get("transports", data.get("data", [])))
                else:
                    transports = []
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if transports:
                    self.transport_ids = [t["id"] for t in transports[:3]]
                    
                    self.log_test(
                        "–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        True,
                        f"–ù–∞–π–¥–µ–Ω–æ {len(transports)} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤, –≤—ã–±—Ä–∞–Ω–æ {len(self.transport_ids)} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )
                    return len(self.transport_ids) > 0
                else:
                    self.log_test(
                        "–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                        False,
                        "–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø—É—Å—Ç"
                    )
                    return False
            else:
                self.log_test(
                    "–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", False, f"Exception: {str(e)}")
            return False

    def test_individual_qr_generation(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        success_count = 0
        
        for i, transport_id in enumerate(self.transport_ids):
            try:
                response = requests.post(
                    f"{self.api_url}/transport/{transport_id}/generate-qr",
                    headers=self.get_headers()
                )
                
                if response.status_code == 200:
                    data = response.json()
                    qr_code = data.get("qr_code", "")
                    qr_simple = data.get("qr_simple", "")
                    qr_image = data.get("qr_image_base64", "")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞
                    qr_pattern = r"TRANSPORT_[A-Z0-9]+_\d+"
                    if re.match(qr_pattern, qr_code):
                        self.generated_qr_codes.append({
                            "transport_id": transport_id,
                            "qr_code": qr_code,
                            "qr_simple": qr_simple,
                            "timestamp": datetime.now().isoformat()
                        })
                        
                        self.log_test(
                            f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}",
                            True,
                            f"QR –∫–æ–¥: {qr_code}, –ø—Ä–æ—Å—Ç–æ–π: {qr_simple}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'‚úÖ' if qr_image else '‚ùå'}"
                        )
                        success_count += 1
                    else:
                        self.log_test(
                            f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}",
                            False,
                            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞: {qr_code} (–æ–∂–∏–¥–∞–ª—Å—è TRANSPORT_{{number}}_{{timestamp}})"
                        )
                else:
                    self.log_test(
                        f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}",
                        False,
                        f"HTTP {response.status_code}: {response.text}"
                    )
                    
            except Exception as e:
                self.log_test(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}", False, f"Exception: {str(e)}")
        
        return success_count == len(self.transport_ids)

    def test_qr_uniqueness(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤"""
        if len(self.generated_qr_codes) < 2:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤", False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ QR –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return False
        
        qr_codes = [qr["qr_code"] for qr in self.generated_qr_codes]
        unique_codes = set(qr_codes)
        
        is_unique = len(qr_codes) == len(unique_codes)
        
        self.log_test(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤",
            is_unique,
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(qr_codes)} QR –∫–æ–¥–æ–≤, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_codes)}"
        )
        
        return is_unique

    def test_qr_data_retrieval(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—á–∞—Ç–∏"""
        success_count = 0
        
        for i, qr_data in enumerate(self.generated_qr_codes):
            transport_id = qr_data["transport_id"]
            
            try:
                response = requests.get(
                    f"{self.api_url}/transport/{transport_id}/qr",
                    headers=self.get_headers()
                )
                
                if response.status_code == 200:
                    data = response.json()
                    qr_image = data.get("qr_image", "")
                    transport_info = data.get("transport_info", {})
                    
                    if qr_image and transport_info:
                        self.log_test(
                            f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}",
                            True,
                            f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info.get('transport_number', 'N/A')}, –≤–æ–¥–∏—Ç–µ–ª—å: {transport_info.get('driver_name', 'N/A')}"
                        )
                        success_count += 1
                    else:
                        self.log_test(
                            f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}",
                            False,
                            "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è qr_image –∏–ª–∏ transport_info"
                        )
                else:
                    self.log_test(
                        f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}",
                        False,
                        f"HTTP {response.status_code}: {response.text}"
                    )
                    
            except Exception as e:
                self.log_test(f"–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ #{i+1}", False, f"Exception: {str(e)}")
        
        return success_count == len(self.generated_qr_codes)

    def test_print_counter(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏"""
        if not self.generated_qr_codes:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏", False, "–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR –∫–æ–¥–æ–≤")
            return False
        
        transport_id = self.generated_qr_codes[0]["transport_id"]
        
        try:
            response = requests.post(
                f"{self.api_url}/transport/{transport_id}/print-qr",
                headers=self.get_headers()
            )
            
            if response.status_code == 200:
                data = response.json()
                print_count = data.get("print_count", 0)
                
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏",
                    True,
                    f"–°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ: {print_count}"
                )
                return True
            else:
                self.log_test(
                    "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏", False, f"Exception: {str(e)}")
            return False

    def test_qr_scanning(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        success_count = 0
        
        for i, qr_data in enumerate(self.generated_qr_codes):
            qr_code = qr_data["qr_code"]
            
            try:
                scan_data = {"qr_code": qr_code}
                response = requests.post(
                    f"{self.api_url}/logistics/cargo-to-transport/scan-transport",
                    json=scan_data,
                    headers=self.get_headers()
                )
                
                # –û–∂–∏–¥–∞–µ–º –ª–∏–±–æ —É—Å–ø–µ—à–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ª–∏–±–æ –æ—à–∏–±–∫—É –æ —Ç–æ–º, —á—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω –Ω–æ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ
                if response.status_code == 200:
                    data = response.json()
                    transport_info = data.get("transport", {})
                    
                    self.log_test(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ #{i+1}",
                        True,
                        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω: {transport_info.get('transport_number', 'N/A')}"
                    )
                    success_count += 1
                elif response.status_code == 400:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∞ –Ω–µ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º QR
                    error_text = response.text.lower()
                    if "transport" in error_text and ("status" in error_text or "loading" in error_text):
                        self.log_test(
                            f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ #{i+1}",
                            True,
                            f"QR –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {response.text}"
                        )
                        success_count += 1
                    else:
                        self.log_test(
                            f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ #{i+1}",
                            False,
                            f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ QR –∫–æ–¥–∞: {response.text}"
                        )
                else:
                    self.log_test(
                        f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ #{i+1}",
                        False,
                        f"HTTP {response.status_code}: {response.text}"
                    )
                    
            except Exception as e:
                self.log_test(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞ #{i+1}", False, f"Exception: {str(e)}")
        
        return success_count == len(self.generated_qr_codes)

    def test_repeated_generation_uniqueness(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if not self.transport_ids:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", False, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        transport_id = self.transport_ids[0]
        
        try:
            # –ü–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            response1 = requests.post(
                f"{self.api_url}/transport/{transport_id}/generate-qr",
                headers=self.get_headers()
            )
            
            if response1.status_code != 200:
                self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", False, "–ü–µ—Ä–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
            
            qr_code1 = response1.json().get("qr_code", "")
            
            # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è timestamp
            time.sleep(1)
            
            # –í—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            response2 = requests.post(
                f"{self.api_url}/transport/{transport_id}/generate-qr",
                headers=self.get_headers()
            )
            
            if response2.status_code != 200:
                self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", False, "–í—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
            
            qr_code2 = response2.json().get("qr_code", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QR –∫–æ–¥—ã —Ä–∞–∑–Ω—ã–µ
            is_different = qr_code1 != qr_code2
            
            self.log_test(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                is_different,
                f"–ü–µ—Ä–≤—ã–π QR: {qr_code1}, –í—Ç–æ—Ä–æ–π QR: {qr_code2}, –£–Ω–∏–∫–∞–ª—å–Ω—ã: {'‚úÖ' if is_different else '‚ùå'}"
            )
            
            return is_different
            
        except Exception as e:
            self.log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", False, f"Exception: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ QR –∫–æ–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç—å—é")
        print("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return
        
        # –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
        if not self.find_test_transports():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        tests = [
            ("–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", self.test_individual_qr_generation),
            ("–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ QR –∫–æ–¥–æ–≤", self.test_qr_uniqueness),
            ("–°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—á–∞—Ç–∏", self.test_qr_data_retrieval),
            ("–°—Ü–µ–Ω–∞—Ä–∏–π 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—á–∞—Ç–∏", self.test_print_counter),
            ("–°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö QR –∫–æ–¥–æ–≤", self.test_qr_scanning),
            ("–°—Ü–µ–Ω–∞—Ä–∏–π 4: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å", self.test_repeated_generation_uniqueness),
        ]
        
        for test_name, test_func in tests:
            print(f"\nüîç {test_name}")
            test_func()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.print_summary()

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\n" + "=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed_tests}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print("\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for result in self.test_results:
            status_icon = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status_icon} {result['test']}")
            if result["details"]:
                print(f"   üìù {result['details']}")
        
        print("\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        critical_checks = [
            ("‚úÖ QR –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TRANSPORT_{number}_{timestamp}", 
             any("TRANSPORT_" in str(r.get("response_data", {})) for r in self.test_results)),
            ("‚úÖ –ö–∞–∂–¥—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥", 
             any("—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å" in r["test"].lower() and r["success"] for r in self.test_results)),
            ("‚úÖ QR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–ª—è –ø–µ—á–∞—Ç–∏", 
             any("–ø–æ–ª—É—á–µ–Ω–∏–µ qr –¥–∞–Ω–Ω—ã—Ö" in r["test"].lower() and r["success"] for r in self.test_results)),
            ("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", 
             any("—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in r["test"].lower() and r["success"] for r in self.test_results)),
            ("‚úÖ –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç", 
             any("—Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏" in r["test"].lower() and r["success"] for r in self.test_results)),
            ("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ QR", 
             any("–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" in r["test"].lower() and r["success"] for r in self.test_results)),
        ]
        
        for check_name, is_passed in critical_checks:
            status = "‚úÖ" if is_passed else "‚ùå"
            print(f"{status} {check_name}")
        
        if success_rate >= 85:
            print("\nüéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î: –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å QR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print("‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å QR –∫–æ–¥–æ–≤ –æ–±–µ—Å–ø–µ—á–µ–Ω–∞")
            print("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º")
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        else:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å QR –∫–æ–¥–∞–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")

if __name__ == "__main__":
    tester = TransportQRTester()
    tester.run_all_tests()