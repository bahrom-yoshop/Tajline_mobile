#!/usr/bin/env python3
"""
–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö –î–ê–ù–ù–´–• –û–ü–ï–†–ê–¢–û–†–ê USR648425 –í –°–ò–°–¢–ï–ú–ï
====================================================

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425 —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints
–∏ –ø–æ–Ω—è—Ç—å –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∏–º 7 –µ–¥–∏–Ω–∏—Ü–∞—Ö –∑–∞—è–≤–∫–∏ 25082298

–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–ò–°–ö–ê:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints
2. –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∏–º—è, –∑–∞—è–≤–∫–∞)
3. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫ admin, —Ç–∞–∫ –∏ operator –¥–æ—Å—Ç—É–ø–æ–≤
"""

import requests
import json
import sys
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
SEARCH_TERMS = [
    "USR648425",
    "–Æ–ª–¥–∞—à–µ–≤", 
    "–ñ–∞—Å—É—Ä–±–µ–∫",
    "–ë–∞—Ö—Ç–∏—ë—Ä–æ–≤–∏—á",
    "25082298"
]

class ComprehensiveOperatorSearch:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.admin_token = None
        self.admin_info = None
        self.found_data = []
        self.api_endpoints_tested = []

    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")

    def authenticate_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": "+79777888999",
                "password": "warehouse123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {self.operator_info.get('full_name')}")
                    return True
            
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {response.status_code}")
            return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}", "ERROR")
            return False

    def authenticate_admin(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        try:
            self.log("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä...")
            
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ admin credentials
            admin_credentials = [
                {"phone": "+992000000001", "password": "admin123"},
                {"phone": "+992000000000", "password": "admin123"},
                {"phone": "admin", "password": "admin123"},
                {"phone": "+79999999999", "password": "admin123"}
            ]
            
            for creds in admin_credentials:
                try:
                    response = requests.post(f"{API_BASE}/auth/login", json=creds)
                    if response.status_code == 200:
                        data = response.json()
                        admin_token = data.get("access_token")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
                        admin_session = requests.Session()
                        admin_session.headers.update({"Authorization": f"Bearer {admin_token}"})
                        user_response = admin_session.get(f"{API_BASE}/auth/me")
                        
                        if user_response.status_code == 200:
                            user_data = user_response.json()
                            if user_data.get("role") == "admin":
                                self.admin_token = admin_token
                                self.admin_info = user_data
                                self.log(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {user_data.get('full_name')}")
                                return admin_session
                except:
                    continue
            
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return None
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}", "ERROR")
            return None

    def test_all_endpoints(self, session, role_name):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints"""
        self.log(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –∫–∞–∫ {role_name}...")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        endpoints_to_test = [
            # Operator endpoints
            "/operator/cargo/list",
            "/operator/cargo/all", 
            "/operator/cargo/available-for-placement",
            "/operator/cargo/individual-units-for-placement",
            "/operator/cargo/fully-placed",
            "/operator/placement-progress",
            "/operator/warehouses",
            
            # Admin endpoints (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            "/admin/cargo/list",
            "/admin/cargo/all",
            "/admin/users/list",
            "/admin/operators/list",
            
            # General cargo endpoints
            "/cargo/search",
            "/cargo/list",
            "/cargo/all",
            
            # Warehouse endpoints
            "/warehouses/list",
            "/warehouses/all-cities",
            
            # Debug endpoints
            "/debug/operator-cargo",
            "/debug/placement-records",
            "/debug/cargo",
            "/debug/collections",
            
            # Search endpoints
            "/search/advanced",
            "/search/cargo",
            "/search/users"
        ]
        
        found_endpoints = []
        
        for endpoint in endpoints_to_test:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                response = session.get(f"{API_BASE}{endpoint}")
                status = response.status_code
                
                endpoint_info = {
                    "endpoint": endpoint,
                    "status": status,
                    "role": role_name,
                    "accessible": status in [200, 201],
                    "data": None
                }
                
                if status == 200:
                    try:
                        data = response.json()
                        endpoint_info["data"] = data
                        found_endpoints.append(endpoint_info)
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
                        self.analyze_data_for_search_terms(data, endpoint, role_name)
                        
                        self.log(f"‚úÖ {endpoint}: {status} - –¥–∞–Ω–Ω—ã—Ö: {self.count_records(data)}")
                    except:
                        self.log(f"‚ö†Ô∏è {endpoint}: {status} - –Ω–µ JSON")
                elif status == 404:
                    self.log(f"‚ùå {endpoint}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                elif status == 403:
                    self.log(f"üîí {endpoint}: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                elif status == 405:
                    self.log(f"‚ö†Ô∏è {endpoint}: –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                else:
                    self.log(f"‚ö†Ô∏è {endpoint}: {status}")
                
                self.api_endpoints_tested.append(endpoint_info)
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {endpoint}: {e}")
        
        return found_endpoints

    def count_records(self, data):
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(data, list):
            return len(data)
        elif isinstance(data, dict):
            if "items" in data:
                return len(data["items"])
            elif "cargo" in data:
                return len(data["cargo"])
            elif "users" in data:
                return len(data["users"])
            elif "warehouses" in data:
                return len(data["warehouses"])
            else:
                return len(data)
        return 0

    def analyze_data_for_search_terms(self, data, endpoint, role):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        try:
            found_matches = []
            
            def search_in_object(obj, path=""):
                matches = []
                if isinstance(obj, dict):
                    for key, value in obj.items():
                        current_path = f"{path}.{key}" if path else key
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
                        if isinstance(value, str):
                            for term in SEARCH_TERMS:
                                if term.lower() in value.lower():
                                    matches.append({
                                        "path": current_path,
                                        "value": value,
                                        "term": term
                                    })
                        
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
                        matches.extend(search_in_object(value, current_path))
                        
                elif isinstance(obj, list):
                    for i, item in enumerate(obj):
                        current_path = f"{path}[{i}]" if path else f"[{i}]"
                        matches.extend(search_in_object(item, current_path))
                
                return matches
            
            # –ò—â–µ–º –≤ –¥–∞–Ω–Ω—ã—Ö
            matches = search_in_object(data)
            
            if matches:
                self.log(f"üéØ –ù–ê–ô–î–ï–ù–´ –°–û–í–ü–ê–î–ï–ù–ò–Ø –≤ {endpoint} ({role}):")
                for match in matches[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    self.log(f"   {match['path']}: {match['value']} (—Ç–µ—Ä–º–∏–Ω: {match['term']})")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.found_data.append({
                    "endpoint": endpoint,
                    "role": role,
                    "matches": matches,
                    "data": data
                })
                
                if len(matches) > 5:
                    self.log(f"   ... –∏ –µ—â–µ {len(matches) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {endpoint}: {e}")

    def search_with_parameters(self, session, role_name):
        """–ü–æ–∏—Å–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        self.log(f"üîç –ü–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ {role_name}...")
        
        # Endpoints –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        search_endpoints = [
            "/operator/cargo/list",
            "/operator/cargo/available-for-placement",
            "/operator/cargo/individual-units-for-placement",
            "/admin/cargo/list",
            "/cargo/search"
        ]
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_params = [
            {"search": "USR648425"},
            {"search": "–Æ–ª–¥–∞—à–µ–≤"},
            {"search": "25082298"},
            {"operator": "USR648425"},
            {"operator_name": "–Æ–ª–¥–∞—à–µ–≤"},
            {"cargo_number": "25082298"},
            {"placed_by": "USR648425"},
            {"page": 1, "per_page": 100},
            {"page": 1, "per_page": 100, "search": "USR648425"}
        ]
        
        for endpoint in search_endpoints:
            for params in search_params:
                try:
                    response = session.get(f"{API_BASE}{endpoint}", params=params)
                    
                    if response.status_code == 200:
                        data = response.json()
                        record_count = self.count_records(data)
                        
                        if record_count > 0:
                            self.log(f"‚úÖ {endpoint} —Å {params}: –Ω–∞–π–¥–µ–Ω–æ {record_count} –∑–∞–ø–∏—Å–µ–π")
                            self.analyze_data_for_search_terms(data, f"{endpoint}?{params}", role_name)
                        else:
                            self.log(f"‚ö™ {endpoint} —Å {params}: 0 –∑–∞–ø–∏—Å–µ–π")
                    
                except Exception as e:
                    continue

    def detailed_analysis_of_found_data(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.found_data:
            self.log("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        self.log("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ê–ô–î–ï–ù–ù–´–• –î–ê–ù–ù–´–•:")
        self.log("=" * 60)
        
        for i, found_item in enumerate(self.found_data, 1):
            self.log(f"\nüìã –ò–°–¢–û–ß–ù–ò–ö #{i}: {found_item['endpoint']} ({found_item['role']})")
            self.log(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(found_item['matches'])}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            data = found_item['data']
            
            if isinstance(data, dict) and "items" in data:
                items = data["items"]
            elif isinstance(data, list):
                items = data
            else:
                items = [data]
            
            # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–∞—à–∏–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
            relevant_records = []
            for item in items:
                if self.contains_search_terms(item):
                    relevant_records.append(item)
            
            self.log(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(relevant_records)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
            for j, record in enumerate(relevant_records[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                self.log(f"\n   üì¶ –ó–ê–ü–ò–°–¨ #{j}:")
                self.analyze_single_record(record, "      ")

    def contains_search_terms(self, obj):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã"""
        obj_str = json.dumps(obj, default=str).lower()
        return any(term.lower() in obj_str for term in SEARCH_TERMS)

    def analyze_single_record(self, record, indent=""):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cargo_number = record.get("cargo_number", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            self.log(f"{indent}–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {cargo_number}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ
            operator_fields = ["operator_name", "placed_by", "created_by_operator", "accepting_operator", "placing_operator"]
            for field in operator_fields:
                if field in record and record[field]:
                    self.log(f"{indent}{field}: {record[field]}")
            
            # warehouse_id
            if "warehouse_id" in record:
                self.log(f"{indent}warehouse_id: {record['warehouse_id']}")
            
            # –ê–Ω–∞–ª–∏–∑ cargo_items
            if "cargo_items" in record:
                cargo_items = record["cargo_items"]
                self.log(f"{indent}cargo_items: {len(cargo_items)} —à—Ç.")
                
                total_individual = 0
                total_placed = 0
                
                for k, cargo_item in enumerate(cargo_items, 1):
                    cargo_name = cargo_item.get("cargo_name", f"–ì—Ä—É–∑ #{k}")
                    self.log(f"{indent}  {k}. {cargo_name}")
                    
                    if "individual_items" in cargo_item:
                        individual_items = cargo_item["individual_items"]
                        placed_count = sum(1 for item in individual_items if item.get("is_placed", False))
                        
                        total_individual += len(individual_items)
                        total_placed += placed_count
                        
                        self.log(f"{indent}     individual_items: {len(individual_items)} (—Ä–∞–∑–º–µ—â–µ–Ω–æ: {placed_count})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É individual_items
                        if individual_items:
                            sample = individual_items[0]
                            fields = list(sample.keys())
                            self.log(f"{indent}     –ø–æ–ª—è: {', '.join(fields[:5])}{'...' if len(fields) > 5 else ''}")
                
                self.log(f"{indent}–ò–¢–û–ì–û: {total_individual} –µ–¥–∏–Ω–∏—Ü, —Ä–∞–∑–º–µ—â–µ–Ω–æ: {total_placed}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            additional_fields = ["status", "created_at", "updated_at", "payment_status"]
            for field in additional_fields:
                if field in record and record[field]:
                    self.log(f"{indent}{field}: {record[field]}")
                    
        except Exception as e:
            self.log(f"{indent}‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–∏: {e}")

    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 80)
        self.log("üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ü–û–ò–°–ö–ê –û–ü–ï–†–ê–¢–û–†–ê USR648425")
        self.log("=" * 80)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ endpoints
        total_endpoints = len(self.api_endpoints_tested)
        accessible_endpoints = len([e for e in self.api_endpoints_tested if e["accessible"]])
        
        self.log(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê API:")
        self.log(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ endpoints: {total_endpoints}")
        self.log(f"   –î–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints: {accessible_endpoints}")
        self.log(f"   –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤: {len(self.found_data)} endpoints")
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
        if accessible_endpoints > 0:
            self.log(f"\n‚úÖ –î–û–°–¢–£–ü–ù–´–ï ENDPOINTS:")
            for endpoint_info in self.api_endpoints_tested:
                if endpoint_info["accessible"]:
                    data_count = self.count_records(endpoint_info.get("data", {}))
                    self.log(f"   {endpoint_info['endpoint']} ({endpoint_info['role']}): {data_count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if self.found_data:
            self.log(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø:")
            total_matches = sum(len(item["matches"]) for item in self.found_data)
            self.log(f"   –í—Å–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {total_matches}")
            
            for item in self.found_data:
                self.log(f"   {item['endpoint']} ({item['role']}): {len(item['matches'])} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        else:
            self.log(f"\n‚ùå –°–û–í–ü–ê–î–ï–ù–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–´")
        
        # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log(f"\nüîç –í–´–í–û–î–´:")
        
        if not self.found_data:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –î–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º API")
            self.log("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ MongoDB, –Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API")
            self.log("   2. –ü–æ–ª—è —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ USR648425 –∏–ª–∏ –Æ–ª–¥–∞—à–µ–≤)")
            self.log("   3. –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã")
            self.log("   4. API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        else:
            self.log("‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ –∑–∞—è–≤–∫–∞ 25082298
            found_target_app = False
            for item in self.found_data:
                for match in item["matches"]:
                    if "25082298" in match["value"]:
                        found_target_app = True
                        break
            
            if found_target_app:
                self.log("üéØ –¶–ï–õ–ï–í–ê–Ø –ó–ê–Ø–í–ö–ê 25082298 –ù–ê–ô–î–ï–ù–ê!")
            else:
                self.log("‚ùå –¶–µ–ª–µ–≤–∞—è –∑–∞—è–≤–∫–∞ 25082298 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        
        self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not self.found_data:
            self.log("1. –°–æ–∑–¥–∞—Ç—å debug endpoint –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ MongoDB")
            self.log("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ operator_cargo –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            self.log("3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏")
        else:
            self.log("1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            self.log("2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API layout-with-cargo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
            self.log("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ warehouse_id")
        
        self.log("\n" + "=" * 80)

    def run_comprehensive_search(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ü–û–ò–°–ö–ê –û–ü–ï–†–ê–¢–û–†–ê USR648425")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä
        if not self.authenticate_operator():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä
        self.test_all_endpoints(self.session, "operator")
        self.search_with_parameters(self.session, "operator")
        
        # 3. –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        admin_session = self.authenticate_admin()
        if admin_session:
            self.test_all_endpoints(admin_session, "admin")
            self.search_with_parameters(admin_session, "admin")
        
        # 4. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.detailed_analysis_of_found_data()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_comprehensive_report()
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    searcher = ComprehensiveOperatorSearch()
    
    try:
        success = searcher.run_comprehensive_search()
        
        if success:
            print("\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return 0
        else:
            print("\n‚ùå –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())