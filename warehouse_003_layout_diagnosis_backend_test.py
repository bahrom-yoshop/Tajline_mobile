#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• –í API layout-with-cargo –î–õ–Ø –°–ö–õ–ê–î–ê 003
================================================================================

–¶–ï–õ–¨: –í—ã—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 3 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ 
–≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 003:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ–ª—å–∫–æ placement_records –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∫–ª–∞–¥–∞ 003
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ location –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞
   - –°—Ä–∞–≤–Ω–∏—Ç—å —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ warehouse_id:
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤ placement_records –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω warehouse_id = "003"
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
4. –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫

–ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç —á—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ 003 —Ä–∞–∑–º–µ—â–µ–Ω–∞ 1 –µ–¥–∏–Ω–∏—Ü–∞ –≥—Ä—É–∑–∞ –Ω–∞ –º–Ω–æ–≥–æ —è—á–µ–µ–∫,
–Ω–æ —Å—Ö–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 3 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≥—Ä—É–∑–∞ 
—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
import sys
import os
from datetime import datetime
from collections import defaultdict

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_WAREHOUSE_ID = "84d25a76-f23b-4c95-adb4-255732cd6520"  # –î—É—à–∞–Ω–±–µ –°–∫–ª–∞–¥ ‚Ññ3
TARGET_WAREHOUSE_ID_NUMBER = "003"

class Warehouse003LayoutDiagnosisTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "layout_api_accessible": False,
            "warehouse_003_found": False,
            "placement_records_count": 0,
            "occupied_cells_count": 0,
            "data_consistency": False,
            "critical_issues": []
        }
        
    def log(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        try:
            self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
            
            auth_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=auth_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.operator_info = user_response.json()
                    self.test_results["auth_success"] = True
                    self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                    return True
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_response.status_code}", "ERROR")
                    return False
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", "ERROR")
            return False
    
    def test_layout_with_cargo_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ 003"""
        try:
            self.log(f"üèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo –¥–ª—è —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_ID}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            response = self.session.get(f"{API_BASE}/operator/warehouses/{TARGET_WAREHOUSE_ID}/layout-with-cargo")
            
            if response.status_code == 200:
                self.test_results["layout_api_accessible"] = True
                layout_data = response.json()
                
                self.log(f"‚úÖ API layout-with-cargo –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_ID}")
                self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(layout_data.keys())}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                self.analyze_layout_data(layout_data)
                return True
                
            elif response.status_code == 404:
                self.log(f"‚ùå –°–∫–ª–∞–¥ {TARGET_WAREHOUSE_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
                self.test_results["critical_issues"].append(f"–°–∫–ª–∞–¥ {TARGET_WAREHOUSE_ID} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ")
                return False
                
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ API layout-with-cargo: {response.status_code} - {response.text}", "ERROR")
                self.test_results["critical_issues"].append(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {str(e)}", "ERROR")
            self.test_results["critical_issues"].append(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ API: {str(e)}")
            return False
    
    def analyze_layout_data(self, layout_data):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö layout-with-cargo"""
        try:
            self.log("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö layout-with-cargo...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            warehouse_info = layout_data.get("warehouse_info", {})
            blocks = layout_data.get("blocks", [])
            placement_records = layout_data.get("placement_records", [])
            
            self.log(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ: {warehouse_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            self.log(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: {len(blocks)}")
            self.log(f"üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ placement_records: {len(placement_records)}")
            
            self.test_results["placement_records_count"] = len(placement_records)
            
            if len(placement_records) == 0:
                self.log("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 003!", "WARNING")
                self.test_results["critical_issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 003")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º placement_records
            self.analyze_placement_records(placement_records)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –±–ª–æ–∫–∞—Ö
            self.analyze_occupied_cells(blocks)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            self.check_data_consistency(placement_records, blocks)
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", "ERROR")
            self.test_results["critical_issues"].append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    def analyze_placement_records(self, placement_records):
        """–ê–Ω–∞–ª–∏–∑ placement_records"""
        try:
            self.log("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ placement_records...")
            
            warehouse_id_counts = defaultdict(int)
            location_formats = defaultdict(int)
            cargo_units = set()
            
            for i, record in enumerate(placement_records):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º warehouse_id
                warehouse_id = record.get("warehouse_id")
                warehouse_id_counts[warehouse_id] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç location
                location = record.get("location", "")
                if location:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç location
                    if "-" in location and len(location.split("-")) >= 3:
                        location_formats["dash_format"] += 1
                    elif "–ë" in location and "–ü" in location and "–Ø" in location:
                        location_formats["cyrillic_format"] += 1
                    else:
                        location_formats["unknown_format"] += 1
                
                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–∞—Ö
                individual_number = record.get("individual_number", "")
                cargo_number = record.get("cargo_number", "")
                cargo_units.add(f"{cargo_number}/{individual_number}")
                
                if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    self.log(f"  üìç –ó–∞–ø–∏—Å—å {i+1}: warehouse_id='{warehouse_id}', location='{location}', cargo='{cargo_number}', unit='{individual_number}'")
            
            # –û—Ç—á–µ—Ç –ø–æ warehouse_id
            self.log(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ warehouse_id:")
            for wid, count in warehouse_id_counts.items():
                self.log(f"  - warehouse_id '{wid}': {count} –∑–∞–ø–∏—Å–µ–π")
                if wid != TARGET_WAREHOUSE_ID:
                    self.test_results["critical_issues"].append(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º warehouse_id: '{wid}' (–æ–∂–∏–¥–∞–ª—Å—è '{TARGET_WAREHOUSE_ID}')")
            
            # –û—Ç—á–µ—Ç –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º location
            self.log(f"üìä –§–æ—Ä–º–∞—Ç—ã location:")
            for format_type, count in location_formats.items():
                self.log(f"  - {format_type}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            self.log(f"üì¶ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –≥—Ä—É–∑–∞: {len(cargo_units)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å warehouse_id
            correct_warehouse_records = warehouse_id_counts.get(TARGET_WAREHOUSE_ID, 0)
            if correct_warehouse_records != len(placement_records):
                self.log(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ò–∑ {len(placement_records)} –∑–∞–ø–∏—Å–µ–π —Ç–æ–ª—å–∫–æ {correct_warehouse_records} –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π warehouse_id '{TARGET_WAREHOUSE_ID}'", "WARNING")
            else:
                self.log(f"‚úÖ –í—Å–µ {len(placement_records)} –∑–∞–ø–∏—Å–µ–π –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π warehouse_id '{TARGET_WAREHOUSE_ID}'")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ placement_records: {str(e)}", "ERROR")
    
    def analyze_occupied_cells(self, blocks):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ –±–ª–æ–∫–∞—Ö"""
        try:
            self.log("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ –±–ª–æ–∫–∞—Ö...")
            
            total_cells = 0
            occupied_cells = 0
            occupied_details = []
            
            for block in blocks:
                block_number = block.get("block_number", "?")
                shelves = block.get("shelves", [])
                
                for shelf in shelves:
                    shelf_number = shelf.get("shelf_number", "?")
                    cells = shelf.get("cells", [])
                    
                    for cell in cells:
                        total_cells += 1
                        cell_number = cell.get("cell_number", "?")
                        is_occupied = cell.get("is_occupied", False)
                        cargo_info = cell.get("cargo_info")
                        
                        if is_occupied:
                            occupied_cells += 1
                            location = f"–ë{block_number}-–ü{shelf_number}-–Ø{cell_number}"
                            cargo_details = ""
                            if cargo_info:
                                cargo_details = f" (–≥—Ä—É–∑: {cargo_info.get('cargo_number', '?')}, –µ–¥–∏–Ω–∏—Ü–∞: {cargo_info.get('individual_number', '?')})"
                            occupied_details.append(f"{location}{cargo_details}")
            
            self.test_results["occupied_cells_count"] = occupied_cells
            
            self.log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è—á–µ–µ–∫:")
            self.log(f"  - –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}")
            self.log(f"  - –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {occupied_cells}")
            self.log(f"  - –°–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫: {total_cells - occupied_cells}")
            
            if occupied_cells > 0:
                self.log(f"üìç –î–µ—Ç–∞–ª–∏ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫:")
                for i, detail in enumerate(occupied_details[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    self.log(f"  {i+1}. {detail}")
                if len(occupied_details) > 10:
                    self.log(f"  ... –∏ –µ—â–µ {len(occupied_details) - 10} —è—á–µ–µ–∫")
            else:
                self.log("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ –±–ª–æ–∫–∞—Ö!", "WARNING")
                self.test_results["critical_issues"].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–ª–æ–∫–æ–≤")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —è—á–µ–µ–∫: {str(e)}", "ERROR")
    
    def check_data_consistency(self, placement_records, blocks):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
            
            placement_count = len(placement_records)
            occupied_count = self.test_results["occupied_cells_count"]
            
            self.log(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
            self.log(f"  - placement_records: {placement_count} –∑–∞–ø–∏—Å–µ–π")
            self.log(f"  - occupied_cells: {occupied_count} —è—á–µ–µ–∫")
            
            if placement_count == occupied_count:
                self.log("‚úÖ –î–ê–ù–ù–´–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–´: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ placement_records —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫")
                self.test_results["data_consistency"] = True
            else:
                self.log(f"‚ùå –î–ê–ù–ù–´–ï –ù–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–´: –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É placement_records ({placement_count}) –∏ occupied_cells ({occupied_count})", "ERROR")
                self.test_results["data_consistency"] = False
                self.test_results["critical_issues"].append(f"–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {placement_count} placement_records vs {occupied_count} occupied_cells")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                if placement_count > occupied_count:
                    self.log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: placement_records –±–æ–ª—å—à–µ —á–µ–º occupied_cells - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º location", "WARNING")
                elif occupied_count > placement_count:
                    self.log("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: occupied_cells –±–æ–ª—å—à–µ —á–µ–º placement_records - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ warehouse_id", "WARNING")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {str(e)}", "ERROR")
    
    def test_direct_database_queries(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
        try:
            self.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            stats_response = self.session.get(f"{API_BASE}/operator/placement-progress")
            if stats_response.status_code == 200:
                stats = stats_response.json()
                self.log(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
                self.log(f"  - –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {stats.get('total_units', 0)}")
                self.log(f"  - –†–∞–∑–º–µ—â–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {stats.get('placed_units', 0)}")
                self.log(f"  - –û–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {stats.get('pending_units', 0)}")
                self.log(f"  - –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats.get('progress_percentage', 0)}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
            warehouse_stats_response = self.session.get(f"{API_BASE}/warehouses/{TARGET_WAREHOUSE_ID}/statistics")
            if warehouse_stats_response.status_code == 200:
                warehouse_stats = warehouse_stats_response.json()
                self.log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ {TARGET_WAREHOUSE_ID}:")
                self.log(f"  - –í—Å–µ–≥–æ —è—á–µ–µ–∫: {warehouse_stats.get('total_cells', 0)}")
                self.log(f"  - –ó–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫: {warehouse_stats.get('occupied_cells', 0)}")
                self.log(f"  - –°–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫: {warehouse_stats.get('free_cells', 0)}")
                self.log(f"  - –ó–∞–≥—Ä—É–∑–∫–∞: {warehouse_stats.get('occupancy_percentage', 0)}%")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}", "ERROR")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üéØ –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• –í API layout-with-cargo –î–õ–Ø –°–ö–õ–ê–î–ê 003")
        self.log("=" * 80)
        
        # –≠—Ç–∞–ø 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API layout-with-cargo
        if not self.test_layout_with_cargo_api():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API layout-with-cargo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
        
        # –≠—Ç–∞–ø 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.test_direct_database_queries()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        return True
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("=" * 80)
        self.log("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        self.log("=" * 80)
        
        # –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤
        auth_status = "‚úÖ –ü–†–û–ô–î–ï–ù" if self.test_results["auth_success"] else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        api_status = "‚úÖ –ü–†–û–ô–î–ï–ù" if self.test_results["layout_api_accessible"] else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        consistency_status = "‚úÖ –î–ê–ù–ù–´–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–´" if self.test_results["data_consistency"] else "‚ùå –î–ê–ù–ù–´–ï –ù–ï –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–´"
        
        self.log(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞: {auth_status}")
        self.log(f"üèóÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API layout-with-cargo: {api_status}")
        self.log(f"üìä –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {consistency_status}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.log(f"üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ placement_records –¥–ª—è —Å–∫–ª–∞–¥–∞ 003: {self.test_results['placement_records_count']}")
        self.log(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫ –≤ —Å—Ö–µ–º–µ: {self.test_results['occupied_cells_count']}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.test_results["critical_issues"]:
            self.log("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´:")
            for i, issue in enumerate(self.test_results["critical_issues"], 1):
                self.log(f"  {i}. {issue}")
        else:
            self.log("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if self.test_results["placement_records_count"] == 0:
            self.log("  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–ª–∞–¥–∞ 003")
            self.log("  - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ warehouse_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –≤ placement_records")
        elif not self.test_results["data_consistency"]:
            self.log("  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ location –≤ placement_records")
            self.log("  - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ placement_records –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞")
        else:
            self.log("  - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ frontend –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if self.test_results["auth_success"] and self.test_results["layout_api_accessible"] and self.test_results["data_consistency"]:
            self.log("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û: –ü—Ä–æ–±–ª–µ–º —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return True
        else:
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–Ø–í–ò–õ–ê –ü–†–û–ë–õ–ï–ú–´: –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = Warehouse003LayoutDiagnosisTester()
    
    try:
        success = tester.run_comprehensive_test()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        tester.log("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        sys.exit(1)
    except Exception as e:
        tester.log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
        sys.exit(1)

if __name__ == "__main__":
    main()