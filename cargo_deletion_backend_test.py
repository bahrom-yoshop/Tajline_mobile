#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ü–û–õ–ù–û–ì–û —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1) –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (endpoints –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ /api/admin/cargo/bulk –∏ /api/admin/cargo/{id})
2) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä" —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
3) –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Å –ª—é–±—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:
1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º endpoints
2) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint DELETE /api/admin/cargo/{id} –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞
3) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint DELETE /api/admin/cargo/bulk –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
4) –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (placement, operator_cargo, cargo, cargo_requests)
5) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (paid, not_paid, pending, placed –∏ —Ç.–¥.)
"""

import requests
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://tajline-cargo-5.preview.emergentagent.com/api"
ADMIN_PHONE = "+79999888777"
ADMIN_PASSWORD = "admin123"

class TajlineCargoDeleteTester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.test_results = []
        
    def log_test(self, test_name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = {
            "test": test_name,
            "status": status,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status}: {test_name}")
        if details:
            print(f"   Details: {details}")
        print()

    def authenticate_admin(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º endpoints"""
        print("üîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": ADMIN_PHONE,
                "password": ADMIN_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                user_info = data.get("user", {})
                
                if user_info.get("role") == "admin":
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.admin_token}"
                    })
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
                        True, 
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ '{user_info.get('full_name')}' (–Ω–æ–º–µ—Ä: {user_info.get('user_number')}), —Ä–æ–ª—å: {user_info.get('role')} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, JWT —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å: {user_info.get('role')}")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def get_cargo_for_testing(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        print("üì¶ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–∑—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            cargo_sources = []
            
            # 1. –ì—Ä—É–∑—ã –∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    placement_cargo = data["items"]
                elif isinstance(data, list):
                    placement_cargo = data
                else:
                    placement_cargo = []
                cargo_sources.extend([{"source": "placement", "cargo": c} for c in placement_cargo[:3]])
            
            # 2. –ì—Ä—É–∑—ã –∏–∑ operator_cargo (–∏—Å–ø–æ–ª—å–∑—É–µ–º admin/cargo endpoint)
            response = self.session.get(f"{BACKEND_URL}/admin/cargo")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    admin_cargo = data["items"]
                elif isinstance(data, list):
                    admin_cargo = data
                else:
                    admin_cargo = []
                cargo_sources.extend([{"source": "operator_cargo", "cargo": c} for c in admin_cargo[:3]])
            
            # 3. –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä (cargo_requests)
            response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    pickup_requests = data["items"]
                elif isinstance(data, list):
                    pickup_requests = data
                else:
                    pickup_requests = []
                cargo_sources.extend([{"source": "cargo_requests", "cargo": c} for c in pickup_requests[:2]])
            
            if cargo_sources:
                self.log_test(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
                    True, 
                    f"–ù–∞–π–¥–µ–Ω–æ {len(cargo_sources)} –≥—Ä—É–∑–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return cargo_sources
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", False, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return []
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return []

    def test_single_cargo_deletion(self, cargo_data):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint DELETE /api/admin/cargo/{id} –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞"""
        print("üóëÔ∏è –¢–ï–°–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞")
        
        try:
            cargo = cargo_data["cargo"]
            cargo_id = cargo.get("id") or cargo.get("_id")
            cargo_number = cargo.get("cargo_number") or cargo.get("request_number")
            source = cargo_data["source"]
            
            if not cargo_id:
                self.log_test("–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –≥—Ä—É–∑–∞")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π endpoint –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            response = self.session.delete(f"{BACKEND_URL}/admin/cargo/{cargo_id}")
            
            if response.status_code == 200:
                result = response.json()
                message = result.get("message", "")
                deleted_count = result.get("deleted_from_collections", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω (message —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                if "—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" in message and deleted_count > 0:
                    self.log_test(
                        "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞", 
                        True, 
                        f"–ì—Ä—É–∑ {cargo_number} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source}) —É—Å–ø–µ—à–Ω–æ –ü–û–õ–ù–û–°–¢–¨–Æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –£–¥–∞–ª–µ–Ω–æ –∏–∑ {deleted_count} –∫–æ–ª–ª–µ–∫—Ü–∏–π. –û—Ç–≤–µ—Ç: {message}"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞", False, f"–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {message}")
                    return False
            else:
                self.log_test("–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def test_bulk_cargo_deletion(self, cargo_list):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint DELETE /api/admin/cargo/bulk –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤"""
        print("üóëÔ∏è –¢–ï–°–¢ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –≥—Ä—É–∑—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    fresh_cargo = data["items"]
                elif isinstance(data, list):
                    fresh_cargo = data
                else:
                    fresh_cargo = []
                
                # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                cargo_ids = []
                cargo_info = []
                
                for cargo in fresh_cargo[:3]:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 –≥—Ä—É–∑–∞
                    cargo_id = cargo.get("id") or cargo.get("_id")
                    if cargo_id:
                        cargo_ids.append(cargo_id)
                        cargo_info.append({
                            "id": cargo_id,
                            "number": cargo.get("cargo_number"),
                            "source": "placement"
                        })
                
                if not cargo_ids:
                    self.log_test("–ü–æ–ª–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤", True, "–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ –≤—Å–µ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã)")
                    return True
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π endpoint –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {"ids": [...]}
                response = self.session.delete(f"{BACKEND_URL}/admin/cargo/bulk", json={
                    "ids": cargo_ids
                })
                
                if response.status_code == 200:
                    result = response.json()
                    deleted_count = result.get("deleted_count", 0)
                    total_requested = result.get("total_requested", 0)
                    message = result.get("message", "")
                    
                    self.log_test(
                        "–ü–æ–ª–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤", 
                        True, 
                        f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {deleted_count}/{total_requested} –≥—Ä—É–∑–æ–≤ –ü–û–õ–ù–û–°–¢–¨–Æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –û—Ç–≤–µ—Ç: {message}"
                    )
                    return True
                else:
                    self.log_test("–ü–æ–ª–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤", False, f"HTTP {response.status_code}: {response.text}")
                    return False
            else:
                self.log_test("–ü–æ–ª–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤", False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –≥—Ä—É–∑—ã: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def test_cargo_deletion_from_pickup_requests(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä' —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("üìã –¢–ï–°–¢ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
            response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    pickup_requests = data["items"]
                elif isinstance(data, list):
                    pickup_requests = data
                else:
                    pickup_requests = []
                
                if pickup_requests:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    request = pickup_requests[0]
                    request_id = request.get("id")
                    request_number = request.get("request_number")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
                    delete_response = self.session.delete(f"{BACKEND_URL}/admin/cargo-applications/{request_id}")
                    
                    if delete_response.status_code == 200:
                        result = delete_response.json()
                        message = result.get("message", "")
                        self.log_test(
                            "–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'", 
                            True, 
                            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä {request_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ endpoint cargo-applications. –û—Ç–≤–µ—Ç: {message}"
                        )
                        return True
                    else:
                        self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'", False, f"HTTP {delete_response.status_code}: {delete_response.text}")
                        return False
                else:
                    self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'", True, "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                    return True
            else:
                self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def test_cargo_deletion_different_statuses(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (paid, not_paid, pending, placed –∏ —Ç.–¥.)"""
        print("üìä –¢–ï–°–¢ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –≥—Ä—É–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    all_cargo = data["items"]
                elif isinstance(data, list):
                    all_cargo = data
                else:
                    all_cargo = []
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥—Ä—É–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_groups = {}
                for cargo in all_cargo[:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    status = cargo.get("processing_status", "unknown")
                    if status not in status_groups:
                        status_groups[status] = []
                    status_groups[status].append(cargo)
                
                deleted_statuses = []
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                for status, cargo_list in status_groups.items():
                    if cargo_list and len(deleted_statuses) < 2:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 —É–¥–∞–ª–µ–Ω–∏–π
                        cargo = cargo_list[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä—É–∑ —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                        cargo_id = cargo.get("id") or cargo.get("_id")
                        cargo_number = cargo.get("cargo_number")
                        
                        if cargo_id:
                            delete_response = self.session.delete(f"{BACKEND_URL}/admin/cargo/{cargo_id}")
                            
                            if delete_response.status_code == 200:
                                result = delete_response.json()
                                message = result.get("message", "")
                                if "—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" in message:
                                    deleted_statuses.append(f"{status} (–≥—Ä—É–∑ {cargo_number})")
                
                if deleted_statuses:
                    self.log_test(
                        "–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤", 
                        True, 
                        f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏: {', '.join(deleted_statuses)}"
                    )
                    return True
                else:
                    self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤", True, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–≤–æ–∑–º–æ–∂–Ω–æ –≤—Å–µ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã)")
                    return True
            else:
                self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def verify_complete_deletion(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥—Ä—É–∑—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        print("üîç –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö
            checks = []
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    placement_count = len(data["items"])
                elif isinstance(data, list):
                    placement_count = len(data)
                else:
                    placement_count = 0
                checks.append(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ: {placement_count} –≥—Ä—É–∑–æ–≤")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤
            response = self.session.get(f"{BACKEND_URL}/admin/cargo")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    admin_count = len(data["items"])
                elif isinstance(data, list):
                    admin_count = len(data)
                else:
                    admin_count = 0
                checks.append(f"–ê–¥–º–∏–Ω—Å–∫–∏–µ –≥—Ä—É–∑—ã: {admin_count} –≥—Ä—É–∑–æ–≤")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
            response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, dict) and "items" in data:
                    requests_count = len(data["items"])
                elif isinstance(data, list):
                    requests_count = len(data)
                else:
                    requests_count = 0
                checks.append(f"–ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä: {requests_count} –∑–∞—è–≤–æ–∫")
            
            self.log_test(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π", 
                True, 
                f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {', '.join(checks)}"
            )
            return True
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def test_error_handling(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö endpoints"""
        print("‚ö†Ô∏è –¢–ï–°–¢ 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
        
        try:
            tests_passed = 0
            total_tests = 0
            
            # 1. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞
            total_tests += 1
            response = self.session.delete(f"{BACKEND_URL}/admin/cargo/nonexistent-id")
            if response.status_code in [404, 400]:
                tests_passed += 1
            
            # 2. –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
            total_tests += 1
            response = self.session.delete(f"{BACKEND_URL}/admin/cargo/bulk", json={"ids": []})
            if response.status_code in [400, 422]:
                tests_passed += 1
            
            # 3. –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
            total_tests += 1
            large_list = ["id" + str(i) for i in range(101)]  # –ë–æ–ª—å—à–µ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            response = self.session.delete(f"{BACKEND_URL}/admin/cargo/bulk", json={"ids": large_list})
            # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ –∏–ª–∏ –Ω–µ –ø—Ä–æ–π—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if response.status_code in [400, 422, 200]:  # 200 –µ—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–∞
                tests_passed += 1
            
            success = tests_passed >= 2  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 3 —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
            self.log_test(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö endpoints", 
                success, 
                f"–ü—Ä–æ–π–¥–µ–Ω–æ {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"
            )
            return success
                
        except Exception as e:
            self.log_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö endpoints", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –í TAJLINE.TJ")
        print("=" * 80)
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cargo_for_testing = self.get_cargo_for_testing()
        if not cargo_for_testing:
            print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–∞
        if cargo_for_testing:
            self.test_single_cargo_deletion(cargo_for_testing[0])
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤
        if len(cargo_for_testing) > 1:
            self.test_bulk_cargo_deletion(cargo_for_testing[1:])
        
        # –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä"
        self.test_cargo_deletion_from_pickup_requests()
        
        # –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        self.test_cargo_deletion_different_statuses()
        
        # –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        self.verify_complete_deletion()
        
        # –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.test_error_handling()
        
        # –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
        
        return True

    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í")
        print("=" * 80)
        
        passed_tests = [r for r in self.test_results if r["success"]]
        failed_tests = [r for r in self.test_results if not r["success"]]
        
        print(f"‚úÖ –ü–†–û–ô–î–ï–ù–û: {len(passed_tests)} —Ç–µ—Å—Ç–æ–≤")
        print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {len(failed_tests)} —Ç–µ—Å—Ç–æ–≤")
        print(f"üìà –£–°–ü–ï–®–ù–û–°–¢–¨: {len(passed_tests)}/{len(self.test_results)} ({len(passed_tests)/len(self.test_results)*100:.1f}%)")
        
        if failed_tests:
            print("\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for test in failed_tests:
                print(f"   - {test['test']}: {test['details']}")
        
        print("\n‚úÖ –£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´:")
        for test in passed_tests:
            print(f"   - {test['test']}")
        
        print("\n" + "=" * 80)
        
        if len(passed_tests) >= len(self.test_results) * 0.8:  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –†–ê–ë–û–¢–ê–Æ–¢!")
            print("Backend –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–µ endpoints")
        else:
            print("‚ö†Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
            print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    tester = TajlineCargoDeleteTester()
    tester.run_all_tests()