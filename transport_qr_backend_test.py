#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API ENDPOINTS –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê (–≠–¢–ê–ü 1)
=================================================================================

–¶–ï–õ–¨: –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints –¥–ª—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ transports —Å QR —Å—Ç–∞—Ç—É—Å–æ–º (GET /api/transport/list-with-qr)
3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (POST /api/transport/{transport_id}/generate-qr)
4. –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö (GET /api/transport/{transport_id}/qr)
5. –ü–µ—á–∞—Ç—å QR –∫–æ–¥–∞ (POST /api/transport/{transport_id}/print-qr)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
- –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫
- QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
- –°—á–µ—Ç—á–∏–∫–∏ –ø–µ—á–∞—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
"""

import requests
import json
import sys
import os
from datetime import datetime
import re

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-manage-1.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class TransportQRTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_results = {
            "auth_success": False,
            "transport_list_success": False,
            "qr_generation_success": False,
            "qr_retrieval_success": False,
            "qr_printing_success": False,
            "transport_without_qr": None,
            "generated_qr_code": None,
            "print_count_incremented": False,
            "detailed_results": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def create_test_transport(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üöõ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞...")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            import random
            transport_number = f"TEST{random.randint(1000, 9999)}"
            
            transport_data = {
                "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
                "driver_phone": "+992123456789",
                "transport_number": transport_number,
                "capacity_kg": 5000.0,
                "direction": "–ú–æ—Å–∫–≤–∞-–î—É—à–∞–Ω–±–µ"
            }
            
            response = self.session.post(f"{API_BASE}/transport/create", json=transport_data)
            
            if response.status_code == 200:
                data = response.json()
                transport_id = data.get("transport_id")
                
                self.log(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω:")
                self.log(f"  üöõ –ù–æ–º–µ—Ä: {transport_number}")
                self.log(f"  üÜî ID: {transport_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                self.test_results["test_transport"] = {
                    "id": transport_id,
                    "transport_number": transport_number,
                    "driver_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å",
                    "driver_phone": "+992123456789"
                }
                
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {e}", "ERROR")
            return False

    def test_transport_list_with_qr(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/transport/list-with-qr"""
        self.log("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API GET /api/transport/list-with-qr...")
        
        try:
            response = self.session.get(f"{API_BASE}/transport/list-with-qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["transports", "total_count", "with_qr_count", "without_qr_count"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}", "ERROR")
                    return False
                
                transports = data.get("transports", [])
                total_count = data.get("total_count", 0)
                with_qr_count = data.get("with_qr_count", 0)
                without_qr_count = data.get("without_qr_count", 0)
                
                self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤:")
                self.log(f"  üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {total_count}")
                self.log(f"  üî≤ –° QR –∫–æ–¥–∞–º–∏: {with_qr_count}")
                self.log(f"  ‚ö™ –ë–µ–∑ QR –∫–æ–¥–æ–≤: {without_qr_count}")
                
                if total_count == 0:
                    self.log("‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "WARNING")
                    if not self.create_test_transport():
                        return False
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    response = self.session.get(f"{API_BASE}/transport/list-with-qr")
                    if response.status_code != 200:
                        self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "ERROR")
                        return False
                    
                    data = response.json()
                    transports = data.get("transports", [])
                    total_count = data.get("total_count", 0)
                    
                    self.log(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {total_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                if transports:
                    transport = transports[0]
                    transport_fields = ["id", "transport_number", "driver_name", "driver_phone", 
                                      "has_qr_code", "qr_print_count"]
                    missing_transport_fields = [field for field in transport_fields if field not in transport]
                    
                    if missing_transport_fields:
                        self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ: {missing_transport_fields}", "ERROR")
                        return False
                    
                    self.log(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    self.log(f"  üöõ –ü—Ä–∏–º–µ—Ä: {transport['transport_number']} (has_qr_code: {transport['has_qr_code']})")
                    
                    # –ù–∞–π–¥–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –±–µ–∑ QR –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    transport_without_qr = None
                    for t in transports:
                        if not t.get("has_qr_code", False):
                            transport_without_qr = t
                            break
                    
                    if transport_without_qr:
                        self.test_results["transport_without_qr"] = transport_without_qr
                        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –±–µ–∑ QR –∫–æ–¥–∞: {transport_without_qr['transport_number']}")
                    else:
                        self.log("‚ö†Ô∏è –í—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —É–∂–µ –∏–º–µ—é—Ç QR –∫–æ–¥—ã", "WARNING")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        self.test_results["transport_without_qr"] = transports[0]
                else:
                    self.log("‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
                    return False
                
                self.test_results["transport_list_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤: {e}", "ERROR")
            return False
    
    def test_generate_qr_code(self, transport):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/transport/{transport_id}/generate-qr"""
        transport_id = transport["id"]
        transport_number = transport["transport_number"]
        
        self.log(f"üî≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {transport_number}...")
        
        try:
            response = self.session.post(f"{API_BASE}/transport/{transport_id}/generate-qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["message", "transport_id", "qr_code", "generated_at", "generated_by"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}", "ERROR")
                    return False
                
                qr_code = data.get("qr_code")
                generated_by = data.get("generated_by")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞
                expected_pattern = f"TRANSPORT_{transport_number}_\\d{{8}}_\\d{{6}}"
                if not re.match(expected_pattern, qr_code):
                    self.log(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR –∫–æ–¥–∞: {qr_code}", "ERROR")
                    self.log(f"   –û–∂–∏–¥–∞–ª—Å—è —Ñ–æ—Ä–º–∞—Ç: TRANSPORT_{transport_number}_YYYYMMDD_HHMMSS")
                    return False
                
                self.log(f"‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
                self.log(f"  üî≤ QR –∫–æ–¥: {qr_code}")
                self.log(f"  üë§ –°–æ–∑–¥–∞–Ω: {generated_by}")
                self.log(f"  üìÖ –í—Ä–µ–º—è: {data.get('generated_at')}")
                
                self.test_results["qr_generation_success"] = True
                self.test_results["generated_qr_code"] = qr_code
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞: {e}", "ERROR")
            return False
    
    def test_get_qr_data(self, transport):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/transport/{transport_id}/qr"""
        transport_id = transport["id"]
        transport_number = transport["transport_number"]
        
        self.log(f"üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {transport_number}...")
        
        try:
            response = self.session.get(f"{API_BASE}/transport/{transport_id}/qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["transport_id", "transport_number", "qr_code", "qr_print_count"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}", "ERROR")
                    return False
                
                qr_code = data.get("qr_code")
                print_count = data.get("qr_print_count", 0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QR –∫–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É
                if self.test_results.get("generated_qr_code") and qr_code != self.test_results["generated_qr_code"]:
                    self.log(f"‚ùå QR –∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É:", "ERROR")
                    self.log(f"   –û–∂–∏–¥–∞–ª—Å—è: {self.test_results['generated_qr_code']}")
                    self.log(f"   –ü–æ–ª—É—á–µ–Ω: {qr_code}")
                    return False
                
                self.log(f"‚úÖ QR –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:")
                self.log(f"  üî≤ QR –∫–æ–¥: {qr_code}")
                self.log(f"  üñ®Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–µ–π: {print_count}")
                self.log(f"  üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {data.get('qr_generated_at')}")
                
                self.test_results["qr_retrieval_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è QR –¥–∞–Ω–Ω—ã—Ö: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ QR –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            return False
    
    def test_print_qr_code(self, transport):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/transport/{transport_id}/print-qr"""
        transport_id = transport["id"]
        transport_number = transport["transport_number"]
        
        self.log(f"üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ {transport_number}...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏
            qr_response = self.session.get(f"{API_BASE}/transport/{transport_id}/qr")
            if qr_response.status_code != 200:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏", "ERROR")
                return False
            
            current_print_count = qr_response.json().get("qr_print_count", 0)
            self.log(f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏: {current_print_count}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å
            response = self.session.post(f"{API_BASE}/transport/{transport_id}/print-qr")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["message", "transport_id", "qr_code", "print_count"]
                missing_fields = [field for field in required_fields if field not in data]
                
                if missing_fields:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {missing_fields}", "ERROR")
                    return False
                
                new_print_count = data.get("print_count")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–ª—Å—è
                if new_print_count != current_print_count + 1:
                    self.log(f"‚ùå –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:", "ERROR")
                    self.log(f"   –û–∂–∏–¥–∞–ª—Å—è: {current_print_count + 1}")
                    self.log(f"   –ü–æ–ª—É—á–µ–Ω: {new_print_count}")
                    return False
                
                self.log(f"‚úÖ QR –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å:")
                self.log(f"  üñ®Ô∏è –ù–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏: {new_print_count}")
                self.log(f"  üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ: {current_print_count} ‚Üí {new_print_count}")
                
                self.test_results["qr_printing_success"] = True
                self.test_results["print_count_incremented"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–∞: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ QR –∫–æ–¥–∞: {e}", "ERROR")
            return False
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: API ENDPOINTS –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —ç—Ç–∞–ø–∞–º
        self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –≠–¢–ê–ü–ê–ú:")
        self.log(f"  1. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123): {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  2. üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ transports —Å QR —Å—Ç–∞—Ç—É—Å–æ–º: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['transport_list_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  3. üî≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['qr_generation_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  4. üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['qr_retrieval_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  5. üñ®Ô∏è –ü–µ—á–∞—Ç—å QR –∫–æ–¥–∞: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['qr_printing_success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        if self.test_results.get("generated_qr_code"):
            self.log(f"  üî≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QR –∫–æ–¥: {self.test_results['generated_qr_code']}")
        if self.test_results.get("print_count_incremented"):
            self.log(f"  üìà –°—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω: ‚úÖ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–û–í:")
        self.log(f"  üìã API list-with-qr –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è has_qr_code, qr_print_count: ‚úÖ")
        self.log(f"  üî≤ API generate-qr —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥: ‚úÖ")
        self.log(f"  üìÑ API get QR –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç QR –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ‚úÖ")
        self.log(f"  üñ®Ô∏è API print-qr —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–µ—á–∞—Ç–∏: ‚úÖ")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        all_tests_passed = all([
            self.test_results["auth_success"],
            self.test_results["transport_list_success"],
            self.test_results["qr_generation_success"],
            self.test_results["qr_retrieval_success"],
            self.test_results["qr_printing_success"]
        ])
        
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if all_tests_passed:
            self.log("‚úÖ –í–°–ï API ENDPOINTS –î–õ–Ø QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            self.log("üî≤ QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            self.log("üìà –°—á–µ—Ç—á–∏–∫–∏ –ø–µ—á–∞—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            self.log("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        else:
            self.log("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í API ENDPOINTS!")
            failed_tests = []
            if not self.test_results["auth_success"]:
                failed_tests.append("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            if not self.test_results["transport_list_success"]:
                failed_tests.append("–°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            if not self.test_results["qr_generation_success"]:
                failed_tests.append("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR")
            if not self.test_results["qr_retrieval_success"]:
                failed_tests.append("–ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö")
            if not self.test_results["qr_printing_success"]:
                failed_tests.append("–ü–µ—á–∞—Ç—å QR")
            
            self.log(f"üîç –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã: {', '.join(failed_tests)}")
            self.log("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º")
        
        return all_tests_passed
    
    def run_transport_qr_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API ENDPOINTS –î–õ–Ø QR –ö–û–î–û–í –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ —Å QR —Å—Ç–∞—Ç—É—Å–æ–º
        if not self.test_transport_list_with_qr():
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤", "ERROR")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        transport = self.test_results.get("transport_without_qr")
        if not transport:
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
            return False
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
        if not self.test_generate_qr_code(transport):
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥", "ERROR")
            return False
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ QR –¥–∞–Ω–Ω—ã—Ö
        if not self.test_get_qr_data(transport):
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QR –¥–∞–Ω–Ω—ã–µ", "ERROR")
            return False
        
        # 6. –ü–µ—á–∞—Ç—å QR –∫–æ–¥–∞
        if not self.test_print_qr_code(transport):
            self.log("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å QR –∫–æ–¥", "ERROR")
            return False
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_success = self.generate_final_report()
        
        return final_success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TransportQRTester()
    
    try:
        success = tester.run_transport_qr_test()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í—Å–µ API endpoints –¥–ª—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
            print("üî≤ QR –∫–æ–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            print("üìà –°—á–µ—Ç—á–∏–∫–∏ –ø–µ—á–∞—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")
            print("üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            print("üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ API endpoints –¥–ª—è QR –∫–æ–¥–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()