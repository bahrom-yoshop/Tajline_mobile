#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ TAJLINE.TJ

–ù–ê–ô–î–ï–ù–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: 
- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π DELETE endpoint –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
- –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ bulk DELETE endpoint: /api/admin/pickup-requests/bulk
- Frontend –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏, –Ω–æ endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

–ù–£–ñ–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ bulk DELETE endpoint
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è bulk —É–¥–∞–ª–µ–Ω–∏—è
5. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ DELETE endpoint (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ DELETE endpoint –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å bulk endpoint.
"""

import requests
import json
import os
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://tajline-cargo-7.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

class PickupDeletionFixTest:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.current_user = None
        self.test_results = []
        self.pickup_requests = []
        
    def log_result(self, test_name: str, success: bool, details: str, data=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = f"{status} {test_name}: {details}"
        self.test_results.append({
            "test": test_name,
            "success": success,
            "details": details,
            "data": data,
            "timestamp": datetime.now().isoformat()
        })
        print(result)
        if data and isinstance(data, dict) and len(str(data)) < 300:
            print(f"   üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False, indent=2)}")
        print()
        
    def authenticate_admin(self):
        """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            login_data = {
                "phone": "+79999888777",
                "password": "admin123"
            }
            
            response = self.session.post(f"{API_BASE}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}",
                    "Content-Type": "application/json"
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{API_BASE}/auth/me")
                if user_response.status_code == 200:
                    self.current_user = user_response.json()
                    
                    user_info = f"'{self.current_user.get('full_name')}' (–Ω–æ–º–µ—Ä: {self.current_user.get('user_number')}, —Ä–æ–ª—å: {self.current_user.get('role')})"
                    
                    self.log_result(
                        "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {user_info}, JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω",
                        {"phone": "+79999888777", "role": self.current_user.get('role')}
                    )
                    return True
                    
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                False,
                f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}"
            )
            return False
                
        except Exception as e:
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return False
    
    def get_pickup_requests(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        try:
            response = self.session.get(f"{API_BASE}/operator/pickup-requests")
            
            if response.status_code == 200:
                data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, list):
                    self.pickup_requests = data
                elif isinstance(data, dict):
                    self.pickup_requests = data.get('items', data.get('requests', data.get('pickup_requests', [])))
                
                total_requests = len(self.pickup_requests)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–æ–∫
                if self.pickup_requests:
                    sample_request = self.pickup_requests[0]
                    id_fields = {
                        'id': sample_request.get('id'),
                        'request_number': sample_request.get('request_number'),
                        'request_id': sample_request.get('request_id')
                    }
                else:
                    id_fields = {}
                
                self.log_result(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                    True,
                    f"–ü–æ–ª—É—á–µ–Ω–æ {total_requests} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä —á–µ—Ä–µ–∑ /api/operator/pickup-requests",
                    {
                        "total_requests": total_requests,
                        "sample_id_fields": id_fields,
                        "endpoint": "/api/operator/pickup-requests"
                    }
                )
                return True
            else:
                self.log_result(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: HTTP {response.status_code}, {response.text[:200]}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {str(e)}"
            )
            return False
    
    def test_individual_delete_endpoints(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö DELETE endpoints"""
        try:
            if not self.pickup_requests:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• DELETE ENDPOINTS",
                    True,
                    "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return True
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_request = self.pickup_requests[0]
            request_id = test_request.get('id')
            request_number = test_request.get('request_number')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            individual_endpoints = [
                f"/api/admin/pickup-requests/{request_id}",
                f"/api/admin/courier/pickup-requests/{request_id}",
                f"/api/operator/pickup-requests/{request_id}",
                f"/api/admin/pickup-requests/{request_number}",
                f"/api/admin/courier/pickup-requests/{request_number}"
            ]
            
            endpoint_results = []
            
            for endpoint in individual_endpoints:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã –Ω–µ —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
                    head_response = self.session.head(f"{BACKEND_URL}{endpoint}")
                    
                    endpoint_results.append({
                        "endpoint": endpoint,
                        "status_code": head_response.status_code,
                        "exists": head_response.status_code != 404
                    })
                    
                except Exception as e:
                    endpoint_results.append({
                        "endpoint": endpoint,
                        "error": str(e),
                        "exists": False
                    })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            existing_endpoints = [r for r in endpoint_results if r.get('exists', False)]
            non_existing_endpoints = [r for r in endpoint_results if not r.get('exists', False)]
            
            if existing_endpoints:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• DELETE ENDPOINTS",
                    True,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(existing_endpoints)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö endpoints –∏–∑ {len(endpoint_results)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö",
                    {
                        "existing_endpoints": existing_endpoints,
                        "non_existing_endpoints": non_existing_endpoints,
                        "test_request_id": request_id,
                        "test_request_number": request_number
                    }
                )
            else:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• DELETE ENDPOINTS",
                    False,
                    f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–ò –û–î–ò–ù –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π DELETE endpoint –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(endpoint_results)} endpoints",
                    {
                        "non_existing_endpoints": non_existing_endpoints,
                        "test_request_id": request_id,
                        "test_request_number": request_number,
                        "issue": "Frontend –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏, –Ω–æ endpoints –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
                    }
                )
            
            return len(existing_endpoints) > 0
            
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• DELETE ENDPOINTS",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ endpoints: {str(e)}"
            )
            return False
    
    def test_bulk_delete_endpoint(self):
        """–¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ bulk DELETE endpoint"""
        try:
            if not self.pickup_requests:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT",
                    True,
                    "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è bulk —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return True
            
            # –ë–µ—Ä–µ–º ID –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_request = self.pickup_requests[0]
            request_id = test_request.get('id')
            
            if not request_id:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT",
                    False,
                    "–£ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'id' –¥–ª—è bulk —É–¥–∞–ª–µ–Ω–∏—è"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk delete endpoint —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
            bulk_delete_data = {
                "ids": [request_id]
            }
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ endpoint
            head_response = self.session.head(f"{API_BASE}/admin/pickup-requests/bulk")
            
            if head_response.status_code == 404:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT",
                    False,
                    "Bulk DELETE endpoint /api/admin/pickup-requests/bulk –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º bulk delete (–ù–ï —É–¥–∞–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –∞ –Ω–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            test_bulk_data = {
                "test_ids": [request_id]  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            
            response = self.session.delete(f"{API_BASE}/admin/pickup-requests/bulk", json=test_bulk_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 400:
                # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT",
                    True,
                    f"‚úÖ Bulk DELETE endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! HTTP 400 (–æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ endpoint —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {json.dumps(bulk_delete_data, ensure_ascii=False)}",
                    {
                        "endpoint": "/api/admin/pickup-requests/bulk",
                        "status_code": response.status_code,
                        "correct_structure": bulk_delete_data,
                        "test_request_id": request_id,
                        "response": response.text[:200]
                    }
                )
                return True
            elif response.status_code == 200:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT",
                    True,
                    f"‚ö†Ô∏è Bulk DELETE endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞! HTTP 200",
                    {
                        "endpoint": "/api/admin/pickup-requests/bulk",
                        "status_code": response.status_code,
                        "warning": "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã",
                        "response": response.text[:200]
                    }
                )
                return True
            else:
                self.log_result(
                    "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT",
                    False,
                    f"Bulk DELETE endpoint –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: HTTP {response.status_code}",
                    {
                        "endpoint": "/api/admin/pickup-requests/bulk",
                        "status_code": response.status_code,
                        "response": response.text[:200]
                    }
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ bulk delete: {str(e)}"
            )
            return False
    
    def analyze_root_cause_and_solution(self):
        """–¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
            individual_endpoints_test = [r for r in self.test_results if r["test"] == "–ü–†–û–í–ï–†–ö–ê –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–• DELETE ENDPOINTS"]
            bulk_endpoint_test = [r for r in self.test_results if r["test"] == "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BULK DELETE ENDPOINT"]
            
            root_cause_analysis = []
            solutions = []
            
            # –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö endpoints
            if individual_endpoints_test and not individual_endpoints_test[0]["success"]:
                root_cause_analysis.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ DELETE endpoints –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
                solutions.append("–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π DELETE endpoint: /api/admin/pickup-requests/{request_id}")
                solutions.append("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –∏–∑–º–µ–Ω–∏—Ç—å frontend –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bulk delete —Å –æ–¥–Ω–∏–º ID")
            
            # –ê–Ω–∞–ª–∏–∑ bulk endpoint
            if bulk_endpoint_test and bulk_endpoint_test[0]["success"]:
                root_cause_analysis.append("Bulk DELETE endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                solutions.append("Frontend –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bulk delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏")
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            if self.pickup_requests:
                sample_request = self.pickup_requests[0]
                if 'id' in sample_request:
                    root_cause_analysis.append("–ó–∞—è–≤–∫–∏ –∏–º–µ—é—Ç –ø–æ–ª–µ 'id' –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    solutions.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–µ 'id' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫")
                else:
                    root_cause_analysis.append("–í –∑–∞—è–≤–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'id'")
                    solutions.append("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'id' –≤ –º–æ–¥–µ–ª—å –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
            
            # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
            if not root_cause_analysis:
                root_cause_analysis.append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ frontend –ª–æ–≥–∏–∫–µ")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            final_recommendations = [
                "–ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π DELETE endpoint /api/admin/pickup-requests/{request_id}",
                "–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò–∑–º–µ–Ω–∏—Ç—å frontend –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bulk delete —Å –º–∞—Å—Å–∏–≤–æ–º –∏–∑ –æ–¥–Ω–æ–≥–æ ID",
                "–î–û–õ–ì–û–°–†–û–ß–ù–û–ï –†–ï–®–ï–ù–ò–ï: –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ DELETE endpoints –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ, —Ç–∞–∫ –∏ bulk —É–¥–∞–ª–µ–Ω–∏—è",
                "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∑–∞–±–æ—Ä"
            ]
            
            analysis_summary = f"–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {'; '.join(root_cause_analysis)}"
            
            self.log_result(
                "–ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´ –ò –†–ï–®–ï–ù–ò–Ø",
                True,
                analysis_summary,
                {
                    "root_causes": root_cause_analysis,
                    "immediate_solutions": solutions,
                    "final_recommendations": final_recommendations,
                    "pickup_requests_count": len(self.pickup_requests),
                    "has_bulk_endpoint": bulk_endpoint_test and bulk_endpoint_test[0]["success"] if bulk_endpoint_test else False
                }
            )
            return True
            
        except Exception as e:
            self.log_result(
                "–ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´ –ò –†–ï–®–ï–ù–ò–Ø",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"
            )
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä –≤ TAJLINE.TJ")
        print("=" * 95)
        print()
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not self.authenticate_admin():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
            return
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä
        self.get_pickup_requests()
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö DELETE endpoints
        self.test_individual_delete_endpoints()
        
        # –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bulk DELETE endpoint
        self.test_bulk_delete_endpoint()
        
        # –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –∏ —Ä–µ—à–µ–Ω–∏—è
        self.analyze_root_cause_and_solution()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_comprehensive_summary()
    
    def print_comprehensive_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 95)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 95)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - successful_tests
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        for result in self.test_results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status} {result['test']}")
            print(f"   {result['details']}")
            print()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
        print("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –í–´–í–û–î–´:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis_results = [r for r in self.test_results if r['test'] == "–ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´ –ò –†–ï–®–ï–ù–ò–Ø"]
        if analysis_results and analysis_results[0]['data']:
            data = analysis_results[0]['data']
            
            print("üìã –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for cause in data.get('root_causes', []):
                print(f"   ‚Ä¢ {cause}")
            
            print("\nüí° –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
            for solution in data.get('immediate_solutions', []):
                print(f"   ‚Ä¢ {solution}")
            
            print("\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in data.get('final_recommendations', []):
                print(f"   ‚Ä¢ {rec}")
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        if self.pickup_requests:
            print(f"\n‚úÖ –í —Å–∏—Å—Ç–µ–º–µ –Ω–∞–π–¥–µ–Ω–æ {len(self.pickup_requests)} –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        else:
            print("\n‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä")
        
        if self.current_user and self.current_user.get('role') == 'admin':
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\n" + "=" * 95)
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 95)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = PickupDeletionFixTest()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()