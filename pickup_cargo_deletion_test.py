#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ "–ù–∞ –ó–∞–±–æ—Ä"

–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–π–¥–µ–Ω—ã:
1. –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã (/admin/cargo-requests) - 9 –∑–∞—è–≤–æ–∫ pending
2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞ —Å pickup_request_id
3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –Ω–∞–π–¥–µ–º —Ä–∞–±–æ—á–∏–π —Å–ø–æ—Å–æ–±.
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://cargo-route-map.preview.emergentagent.com/api"

class PickupCargoDeletionTest:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
        
        try:
            response = self.session.post(f"{BACKEND_URL}/auth/login", json={
                "phone": "+79777888999",
                "password": "warehouse123"
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {data.get('user', {}).get('full_name')}")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_current_pickup_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("üìã –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ò–• –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        
        data = {
            'cargo_requests': [],
            'notifications': [],
            'pickup_request_ids': []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã
        try:
            response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
            if response.status_code == 200:
                data['cargo_requests'] = response.json()
                self.log(f"   ‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä—É–∑—ã: {len(data['cargo_requests'])}")
            else:
                self.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {response.status_code}")
        except Exception as e:
            self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouse-notifications")
            if response.status_code == 200:
                notif_data = response.json()
                data['notifications'] = notif_data.get('notifications', [])
                self.log(f"   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {len(data['notifications'])}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º pickup_request_id
                for notif in data['notifications']:
                    pickup_id = notif.get('pickup_request_id')
                    if pickup_id and pickup_id not in data['pickup_request_ids']:
                        data['pickup_request_ids'].append(pickup_id)
                
                self.log(f"   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ pickup_request_id: {len(data['pickup_request_ids'])}")
            else:
                self.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code}")
        except Exception as e:
            self.log(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        return data
    
    def test_cargo_request_deletion(self, cargo_requests):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä—É–∑—ã"""
        self.log("üóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó–´")
        
        if not cargo_requests:
            self.log("   ‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_request = cargo_requests[0]
        request_id = test_request.get('id')
        request_number = test_request.get('request_number')
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞:")
        self.log(f"     - ID: {request_id}")
        self.log(f"     - –ù–æ–º–µ—Ä: {request_number}")
        self.log(f"     - –ì—Ä—É–∑: {test_request.get('cargo_name')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE /admin/cargo-requests/{id}
        try:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE /admin/cargo-requests/{request_id}")
            response = self.session.delete(f"{BACKEND_URL}/admin/cargo-requests/{request_id}")
            
            self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï!")
                self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
                check_response = self.session.get(f"{BACKEND_URL}/admin/cargo-requests")
                if check_response.status_code == 200:
                    remaining_requests = check_response.json()
                    remaining_ids = [r.get('id') for r in remaining_requests]
                    
                    if request_id not in remaining_ids:
                        self.log(f"     - ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
                        return True
                    else:
                        self.log(f"     - ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ –≤ —Å–ø–∏—Å–∫–µ")
                        return False
                        
            elif response.status_code == 404:
                self.log(f"     - ‚ùå –ó–ê–Ø–í–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê")
                return False
            elif response.status_code == 403:
                self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
                return False
            elif response.status_code == 405:
                self.log(f"     - ‚ùå –ú–ï–¢–û–î –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø")
                return False
            else:
                self.log(f"     - ‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {response.text}")
                return False
                
        except Exception as e:
            self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            return False
    
    def test_pickup_request_deletion(self, pickup_request_ids):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä"""
        self.log("üóëÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†")
        
        if not pickup_request_ids:
            self.log("   ‚ùå –ù–µ—Ç pickup_request_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_pickup_id = pickup_request_ids[0]
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤—ã–π pickup_request_id: {test_pickup_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE /operator/pickup-requests/{id}
        try:
            self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE /operator/pickup-requests/{test_pickup_id}")
            response = self.session.delete(f"{BACKEND_URL}/operator/pickup-requests/{test_pickup_id}")
            
            self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï!")
                self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                return True
            elif response.status_code == 404:
                self.log(f"     - ‚ùå –ó–ê–Ø–í–ö–ê –ù–ê –ó–ê–ë–û–† –ù–ï –ù–ê–ô–î–ï–ù–ê")
                return False
            elif response.status_code == 403:
                self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
                return False
            elif response.status_code == 405:
                self.log(f"     - ‚ùå –ú–ï–¢–û–î –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø")
                return False
            else:
                self.log(f"     - ‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {response.text}")
                return False
                
        except Exception as e:
            self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            return False
    
    def test_notification_based_deletion(self, notifications):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.log("üîî –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
        
        if not notifications:
            self.log("   ‚ùå –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        test_notification = notifications[0]
        notif_id = test_notification.get('id')
        pickup_request_id = test_notification.get('pickup_request_id')
        
        self.log(f"   üéØ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
        self.log(f"     - ID: {notif_id}")
        self.log(f"     - pickup_request_id: {pickup_request_id}")
        self.log(f"     - –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {test_notification.get('request_number')}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_endpoints = [
            f"/operator/warehouse-notifications/{notif_id}",
            f"/admin/notifications/{notif_id}",
            f"/operator/notifications/{notif_id}"
        ]
        
        for endpoint in notification_endpoints:
            try:
                self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: DELETE {endpoint}")
                response = self.session.delete(f"{BACKEND_URL}{endpoint}")
                
                self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                if response.status_code == 200:
                    self.log(f"     - ‚úÖ –£–°–ü–ï–®–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø!")
                    self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                    return True
                elif response.status_code == 404:
                    self.log(f"     - ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                elif response.status_code == 403:
                    self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
                elif response.status_code == 405:
                    self.log(f"     - ‚ùå –ú–ï–¢–û–î –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø")
                else:
                    self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                    
            except Exception as e:
                self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return False
    
    def test_bulk_deletion_approaches(self, data):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        self.log("üì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–°–°–û–í–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –º–∞—Å—Å–æ–≤–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é
        bulk_endpoints = [
            ("/admin/cargo-requests/bulk-delete", "cargo_request_ids"),
            ("/operator/pickup-requests/bulk-delete", "pickup_request_ids"),
            ("/operator/warehouse-notifications/bulk-delete", "notification_ids")
        ]
        
        for endpoint, data_type in bulk_endpoints:
            try:
                self.log(f"   üîß –¢–ï–°–¢–ò–†–£–ï–ú: POST {endpoint}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                test_data = {}
                if data_type == "cargo_request_ids" and data['cargo_requests']:
                    test_data = {"ids": [r['id'] for r in data['cargo_requests'][:2]]}
                elif data_type == "pickup_request_ids" and data['pickup_request_ids']:
                    test_data = {"ids": data['pickup_request_ids'][:2]}
                elif data_type == "notification_ids" and data['notifications']:
                    test_data = {"ids": [n['id'] for n in data['notifications'][:2]]}
                
                if not test_data:
                    self.log(f"     - ‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {data_type}")
                    continue
                
                response = self.session.post(f"{BACKEND_URL}{endpoint}", json=test_data)
                
                self.log(f"     - –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                if response.status_code == 200:
                    self.log(f"     - ‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!")
                    self.log(f"     - –û—Ç–≤–µ—Ç: {response.text}")
                    return True
                elif response.status_code == 404:
                    self.log(f"     - ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                elif response.status_code == 403:
                    self.log(f"     - ‚ùå –ù–ï–¢ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
                else:
                    self.log(f"     - ‚ùå –û–®–ò–ë–ö–ê: {response.text}")
                    
            except Exception as e:
                self.log(f"     - ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        return False
    
    def run_deletion_test(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ì–†–£–ó–û–í –ò–ó –°–ï–ö–¶–ò–ò '–ù–ê –ó–ê–ë–û–†'")
        self.log("=" * 80)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        data = self.get_current_pickup_data()
        
        if not any([data['cargo_requests'], data['notifications'], data['pickup_request_ids']]):
            self.log("‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            return
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results = {
            'cargo_request_deletion': False,
            'pickup_request_deletion': False,
            'notification_deletion': False,
            'bulk_deletion': False
        }
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
        if data['cargo_requests']:
            results['cargo_request_deletion'] = self.test_cargo_request_deletion(data['cargo_requests'])
        
        if data['pickup_request_ids']:
            results['pickup_request_deletion'] = self.test_pickup_request_deletion(data['pickup_request_ids'])
        
        if data['notifications']:
            results['notification_deletion'] = self.test_notification_based_deletion(data['notifications'])
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        results['bulk_deletion'] = self.test_bulk_deletion_approaches(data)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.log("=" * 80)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø:")
        
        working_methods = []
        for method, success in results.items():
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if success else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            self.log(f"   {method}: {status}")
            if success:
                working_methods.append(method)
        
        self.log(f"   üìà –ò–¢–û–ì–û –†–ê–ë–û–ß–ò–• –ú–ï–¢–û–î–û–í: {len(working_methods)}")
        
        if working_methods:
            self.log("   üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –†–ï–®–ï–ù–ò–Ø:")
            
            if 'cargo_request_deletion' in working_methods:
                self.log("     1. ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ì–†–£–ó–´:")
                self.log("        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DELETE /admin/cargo-requests/{id}")
                self.log("        - –≠—Ç–æ —É–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            if 'pickup_request_deletion' in working_methods:
                self.log("     2. ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–û–ö –ù–ê –ó–ê–ë–û–†:")
                self.log("        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DELETE /operator/pickup-requests/{id}")
                self.log("        - –ü—Ä—è–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä")
            
            if 'notification_deletion' in working_methods:
                self.log("     3. ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô:")
                self.log("        - –£–¥–∞–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞")
                self.log("        - –ú–æ–∂–µ—Ç —É–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ '–ù–∞ –ó–∞–±–æ—Ä'")
            
            if 'bulk_deletion' in working_methods:
                self.log("     4. ‚úÖ –ú–ê–°–°–û–í–û–ï –£–î–ê–õ–ï–ù–ò–ï:")
                self.log("        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bulk endpoints")
                self.log("        - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            self.log("   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ê–ë–û–ß–ò–• –ú–ï–¢–û–î–û–í –£–î–ê–õ–ï–ù–ò–Ø")
            self.log("   üí° –¢–†–ï–ë–£–ï–¢–°–Ø:")
            self.log("     - –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –∫–æ–¥–∞")
            self.log("     - –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints")
            self.log("     - –ò–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ frontend")
        
        self.log("üèÅ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    test = PickupCargoDeletionTest()
    test.run_deletion_test()