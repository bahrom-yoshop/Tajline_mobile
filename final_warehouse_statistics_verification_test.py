#!/usr/bin/env python3
"""
üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞ –ó–ê–í–ï–†–®–ï–ù–û!

–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–∫–ª–∞–¥–∞ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!

–§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞:
   - –í—ã–∑–≤–∞—Ç—å `/api/warehouses/{warehouse_id}/statistics`
   - –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
     * occupied_cells = 2 (–±—ã–ª–æ 14/10, —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
     * total_placed_cargo = 3 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
     * utilization_percent = 1.2% (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å layout-with-cargo
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:
   - –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2: –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2 –≥—Ä—É–∑–∞ (25082235/01/02, 25082235/02/01)  
   - –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3: –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 –≥—Ä—É–∑ (25082235/01/01)
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç:
   - API statistics —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
   - –°—Ç–∞—Ä—ã–µ placement_records –æ—á–∏—â–µ–Ω—ã (—É–¥–∞–ª–µ–Ω–æ 31, –æ—Å—Ç–∞–ª–æ—Å—å 3)
   - –°—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ 25082235/01/01 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ is_placed=true

–ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:
‚úÖ occupied_cells = 2 (–ù–ï 14!)
‚úÖ total_placed_cargo = 3
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–µ–∂–¥—É APIs
‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–∫–ª–∞–¥–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û 2 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –≤–º–µ—Å—Ç–æ 14!
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
auth_token = None
warehouse_id = None
test_results = []

def log_test(test_name, success, details="", response_time=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    time_info = f" ({response_time}ms)" if response_time else ""
    result = f"{status} {test_name}{time_info}"
    if details:
        result += f": {details}"
    print(result)
    test_results.append({
        "test": test_name,
        "success": success,
        "details": details,
        "response_time": response_time
    })
    return success

def make_request(method, endpoint, data=None, headers=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    url = f"{BASE_URL}{endpoint}"
    
    if headers is None:
        headers = {}
    
    if auth_token:
        headers["Authorization"] = f"Bearer {auth_token}"
    
    start_time = time.time()
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, headers=headers, timeout=30)
        elif method.upper() == "POST":
            headers["Content-Type"] = "application/json"
            response = requests.post(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "PUT":
            headers["Content-Type"] = "application/json"
            response = requests.put(url, json=data, headers=headers, timeout=30)
        elif method.upper() == "DELETE":
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")
        
        response_time = int((time.time() - start_time) * 1000)
        
        return response, response_time
    
    except requests.exceptions.RequestException as e:
        response_time = int((time.time() - start_time) * 1000)
        print(f"‚ùå Request failed: {e}")
        return None, response_time

def test_warehouse_operator_auth():
    """–¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    global auth_token
    
    print("\nüîê –¢–ï–°–¢ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)")
    
    auth_data = {
        "phone": WAREHOUSE_OPERATOR_PHONE,
        "password": WAREHOUSE_OPERATOR_PASSWORD
    }
    
    response, response_time = make_request("POST", "/auth/login", auth_data)
    
    if not response:
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        auth_token = data.get("access_token")
        user_info = data.get("user", {})
        
        if auth_token and user_info.get("role") == "warehouse_operator":
            details = f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_info.get('full_name')}' (—Ä–æ–ª—å: {user_info.get('role')})"
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_get_warehouse_id():
    """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'"""
    global warehouse_id
    
    print("\nüè¢ –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id –¥–ª—è '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1'")
    
    response, response_time = make_request("GET", "/operator/warehouses")
    
    if not response:
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        warehouses = response.json()
        
        # –ò—â–µ–º —Å–∫–ª–∞–¥ "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1"
        moscow_warehouse = None
        for warehouse in warehouses:
            if "–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1" in warehouse.get("name", ""):
                moscow_warehouse = warehouse
                break
        
        if moscow_warehouse:
            warehouse_id = moscow_warehouse.get("id")
            details = f"–ù–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' (ID: {warehouse_id})"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", True, details, response_time)
        else:
            available_warehouses = [w.get("name", "Unknown") for w in warehouses]
            details = f"–°–∫–ª–∞–¥ '–ú–æ—Å–∫–≤–∞ –°–∫–ª–∞–¥ ‚Ññ1' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã: {available_warehouses}"
            return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ warehouse_id", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_corrected_warehouse_statistics():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞"""
    
    print("\nüìä –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞")
    print("   –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("   * occupied_cells = 2 (–±—ã–ª–æ 14/10, —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    print("   * total_placed_cargo = 3 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    print("   * utilization_percent = 1.2% (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    
    if not warehouse_id:
        return log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/statistics")
    
    if not response:
        return log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        occupied_cells = data.get("occupied_cells", 0)
        total_placed_cargo = data.get("total_placed_cargo", 0)
        utilization_percent = data.get("utilization_percent", 0)
        
        print(f"üìç –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   - occupied_cells: {occupied_cells}")
        print(f"   - total_placed_cargo: {total_placed_cargo}")
        print(f"   - utilization_percent: {utilization_percent}%")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò —Å–æ–≥–ª–∞—Å–Ω–æ review request
        success = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: occupied_cells –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 (–ù–ï 14!)
        if occupied_cells != 2:
            success = False
            issues.append(f"occupied_cells = {occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2, –ù–ï 14!)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: total_placed_cargo –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3
        if total_placed_cargo != 3:
            success = False
            issues.append(f"total_placed_cargo = {total_placed_cargo} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: utilization_percent –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–∫–æ–ª–æ 1.2%
        if not (1.0 <= utilization_percent <= 1.5):
            success = False
            issues.append(f"utilization_percent = {utilization_percent}% (–æ–∂–∏–¥–∞–ª–æ—Å—å ~1.2%)")
        
        if success:
            details = f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢! occupied_cells = {occupied_cells} (–±—ã–ª–æ 14), total_placed_cargo = {total_placed_cargo}, utilization = {utilization_percent}%"
            return log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_layout_with_cargo_synchronization():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å layout-with-cargo"""
    
    print("\nüîÑ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å layout-with-cargo")
    print("   –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ –∂–µ 2 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –∏ 3 –≥—Ä—É–∑–∞")
    
    if not warehouse_id:
        return log_test("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å layout-with-cargo", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å layout-with-cargo", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        occupied_cells_layout = data.get("occupied_cells", 0)
        total_cargo_layout = data.get("total_cargo", 0)
        
        print(f"üó∫Ô∏è –†–ï–ó–£–õ–¨–¢–ê–¢–´ LAYOUT-WITH-CARGO:")
        print(f"   - occupied_cells: {occupied_cells_layout}")
        print(f"   - total_cargo: {total_cargo_layout}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        success = True
        issues = []
        
        if occupied_cells_layout != 2:
            success = False
            issues.append(f"layout occupied_cells = {occupied_cells_layout} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)")
        
        if total_cargo_layout != 3:
            success = False
            issues.append(f"layout total_cargo = {total_cargo_layout} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3)")
        
        if success:
            details = f"‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢! occupied_cells = {occupied_cells_layout}, total_cargo = {total_cargo_layout}"
            return log_test("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å layout-with-cargo", True, details, response_time)
        else:
            details = f"‚ùå {', '.join(issues)}"
            return log_test("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å layout-with-cargo", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å layout-with-cargo", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_specific_cargo_placement():
    """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –≤ —è—á–µ–π–∫–∞—Ö"""
    
    print("\nüéØ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤")
    print("   - –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø2: –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2 –≥—Ä—É–∑–∞ (25082235/01/02, 25082235/02/01)")
    print("   - –Ø—á–µ–π–∫–∞ –ë1-–ü3-–Ø3: –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 –≥—Ä—É–∑ (25082235/01/01)")
    
    if not warehouse_id:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/layout-with-cargo")
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –≥—Ä—É–∑—ã
        target_cells = {
            "–ë1-–ü3-–Ø2": ["25082235/01/02", "25082235/02/01"],
            "–ë1-–ü3-–Ø3": ["25082235/01/01"]
        }
        
        found_cells = {}
        total_found_cargo = 0
        
        blocks = data.get("blocks", [])
        for block in blocks:
            shelves = block.get("shelves", [])
            for shelf in shelves:
                cells = shelf.get("cells", [])
                for cell in cells:
                    if cell.get("is_occupied"):
                        location_code = cell.get("location_code", "")
                        cargo_info = cell.get("cargo_info", {})
                        individual_number = cargo_info.get("individual_number", "")
                        
                        if location_code in target_cells:
                            if location_code not in found_cells:
                                found_cells[location_code] = []
                            found_cells[location_code].append(individual_number)
                            total_found_cargo += 1
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –≥—Ä—É–∑ {individual_number} –≤ —è—á–µ–π–∫–µ {location_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
        success = True
        issues = []
        
        for cell_location, expected_cargo in target_cells.items():
            found_cargo = found_cells.get(cell_location, [])
            
            if not found_cargo:
                success = False
                issues.append(f"–Ø—á–µ–π–∫–∞ {cell_location} –ø—É—Å—Ç–∞ (–æ–∂–∏–¥–∞–ª–∏—Å—å –≥—Ä—É–∑—ã: {expected_cargo})")
            else:
                missing_cargo = [cargo for cargo in expected_cargo if cargo not in found_cargo]
                extra_cargo = [cargo for cargo in found_cargo if cargo not in expected_cargo]
                
                if missing_cargo:
                    success = False
                    issues.append(f"–í —è—á–µ–π–∫–µ {cell_location} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≥—Ä—É–∑—ã: {missing_cargo}")
                
                if extra_cargo:
                    success = False
                    issues.append(f"–í —è—á–µ–π–∫–µ {cell_location} –ª–∏—à–Ω–∏–µ –≥—Ä—É–∑—ã: {extra_cargo}")
        
        if success and total_found_cargo == 3:
            details = f"‚úÖ –í–°–ï –ì–†–£–ó–´ –ù–ê –ú–ï–°–¢–ê–•! –ù–∞–π–¥–µ–Ω–æ {total_found_cargo} –≥—Ä—É–∑–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", True, details, response_time)
        else:
            if not issues:
                issues.append(f"–ù–∞–π–¥–µ–Ω–æ {total_found_cargo} –≥—Ä—É–∑–æ–≤ –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 3")
            details = f"‚ùå {', '.join(issues)}"
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, details, response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def test_placement_records_cleanup():
    """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç"""
    
    print("\nüßπ –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("   - API statistics —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã")
    print("   - –°—Ç–∞—Ä—ã–µ placement_records –æ—á–∏—â–µ–Ω—ã (—É–¥–∞–ª–µ–Ω–æ 31, –æ—Å—Ç–∞–ª–æ—Å—å 3)")
    
    if not warehouse_id:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", False, "warehouse_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    response, response_time = make_request("GET", f"/warehouses/{warehouse_id}/statistics")
    
    if not response:
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", False, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", response_time)
    
    if response.status_code == 200:
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        placement_statistics = data.get("placement_statistics", {})
        
        if placement_statistics:
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            for key, value in placement_statistics.items():
                print(f"   - {key}: {value}")
            
            data_source = placement_statistics.get("data_source")
            placement_records_count = placement_statistics.get("placement_records_count", 0)
            unique_occupied_cells = placement_statistics.get("unique_occupied_cells", 0)
            
            success = True
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: data_source –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å placement_records
            if data_source != "placement_records":
                success = False
                issues.append(f"data_source = {data_source} (–æ–∂–∏–¥–∞–ª–æ—Å—å 'placement_records')")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: placement_records_count –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)
            if placement_records_count != 3:
                success = False
                issues.append(f"placement_records_count = {placement_records_count} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3 –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: unique_occupied_cells –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2
            if unique_occupied_cells != 2:
                success = False
                issues.append(f"unique_occupied_cells = {unique_occupied_cells} (–æ–∂–∏–¥–∞–ª–æ—Å—å 2)")
            
            if success:
                details = f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢! data_source = {data_source}, records = {placement_records_count}, cells = {unique_occupied_cells}"
                return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", True, details, response_time)
            else:
                details = f"‚ùå {', '.join(issues)}"
                return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", False, details, response_time)
        else:
            return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", False, "placement_statistics –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", response_time)
    else:
        error_detail = response.json().get("detail", "Unknown error") if response.content else "Empty response"
        return log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", False, f"HTTP {response.status_code}: {error_detail}", response_time)

def print_final_summary():
    """–í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*100)
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞")
    print("="*100)
    
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results if result["success"])
    failed_tests = total_tests - passed_tests
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    
    print(f"üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   - –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   - –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"   - –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for i, result in enumerate(test_results, 1):
        status = "‚úÖ" if result["success"] else "‚ùå"
        time_info = f" ({result['response_time']}ms)" if result.get('response_time') else ""
        print(f"   {i}. {status} {result['test']}{time_info}")
        if result["details"]:
            print(f"      {result['details']}")
    
    print(f"\nüéØ –ö–†–ò–¢–ï–†–ò–ò –£–°–ü–ï–•–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ review request
    statistics_test = next((r for r in test_results if "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞" in r["test"]), None)
    sync_test = next((r for r in test_results if "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å layout-with-cargo" in r["test"]), None)
    cargo_test = next((r for r in test_results if "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤" in r["test"]), None)
    cleanup_test = next((r for r in test_results if "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π" in r["test"]), None)
    
    if statistics_test and statistics_test["success"]:
        print("   ‚úÖ occupied_cells = 2 (–ù–ï 14!)")
        print("   ‚úÖ total_placed_cargo = 3")
        print("   ‚úÖ utilization_percent = 1.2%")
    else:
        print("   ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    if sync_test and sync_test["success"]:
        print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–µ–∂–¥—É APIs")
    else:
        print("   ‚ùå –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É APIs")
    
    if cargo_test and cargo_test["success"]:
        print("   ‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥—Ä—É–∑—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö")
    else:
        print("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ minor)")
    
    if cleanup_test and cleanup_test["success"]:
        print("   ‚úÖ API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã")
        print("   ‚úÖ –°—Ç–∞—Ä—ã–µ placement_records –æ—á–∏—â–µ–Ω—ã")
    else:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\nüèÅ –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if success_rate >= 80:
        print("   üéâ –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ö–õ–ê–î–ê –ó–ê–í–ï–†–®–ï–ù–û!")
        print("   üìç –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–∫–ª–∞–¥–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û 2 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –≤–º–µ—Å—Ç–æ 14!")
        print("   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!")
    else:
        print("   ‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
        print("   üìç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("   ‚úÖ occupied_cells = 2 (–±—ã–ª–æ 14/10, —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    print("   ‚úÖ total_placed_cargo = 3 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    print("   ‚úÖ utilization_percent = 1.2% (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–∞ –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*100)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: {WAREHOUSE_OPERATOR_PHONE}")
    print("\nüéØ –¶–ï–õ–¨: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–∫–ª–∞–¥–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û 2 –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏ –≤–º–µ—Å—Ç–æ 14!")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    tests = [
        test_warehouse_operator_auth,
        test_get_warehouse_id,
        test_corrected_warehouse_statistics,
        test_layout_with_cargo_synchronization,
        test_specific_cargo_placement,
        test_placement_records_cleanup
    ]
    
    for test_func in tests:
        try:
            test_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            log_test(test_func.__name__, False, f"Exception: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print_final_summary()

if __name__ == "__main__":
    main()