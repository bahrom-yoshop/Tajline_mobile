#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 3 Backend - Comprehensive Test with Data Setup
===============================================================================

–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –∑–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ Stage 3 endpoints.
"""

import requests
import json
import sys
import os
from datetime import datetime
import time

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class Stage3ComprehensiveTester:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.test_cargo_number = None
        self.test_transport_id = None
        self.test_results = {
            "auth_success": False,
            "data_setup_success": False,
            "placed_cargo_list_success": False,
            "transport_details_success": False,
            "return_from_transport_success": False,
            "update_status_success": False,
            "total_tests": 0,
            "passed_tests": 0,
            "failed_tests": 0
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        self.test_results["total_tests"] += 1
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                self.test_results["passed_tests"] += 1
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
            return False
    
    def setup_test_data(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log("\nüîß –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–∑—ã
            self.log("üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤...")
            response = self.session.get(f"{API_BASE}/operator/cargo/available-for-placement")
            
            if response.status_code != 200:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä—É–∑—ã: {response.status_code}", "ERROR")
                self.test_results["failed_tests"] += 1
                return False
            
            data = response.json()
            cargo_items = data if isinstance(data, list) else data.get("items", [])
            
            if not cargo_items:
                self.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
                self.test_results["failed_tests"] += 1
                return False
            
            self.test_cargo_number = cargo_items[0].get("cargo_number")
            self.log(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {self.test_cargo_number}")
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
            self.log("üöõ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤...")
            response = self.session.get(f"{API_BASE}/admin/transports/list")
            
            if response.status_code != 200:
                self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã: {response.status_code}", "ERROR")
                self.test_results["failed_tests"] += 1
                return False
            
            data = response.json()
            transport_items = data.get("items", []) if isinstance(data, dict) else data
            
            if not transport_items:
                self.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "ERROR")
                self.test_results["failed_tests"] += 1
                return False
            
            self.test_transport_id = transport_items[0].get("id")
            transport_number = transport_items[0].get("transport_number")
            self.log(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_number} (ID: {self.test_transport_id})")
            
            # –®–∞–≥ 3: –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            self.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            # –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            scan_transport_response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-transport", json={
                "transport_qr": f"TRANSPORT_{self.test_transport_id}_{int(datetime.now().timestamp())}"
            })
            
            if scan_transport_response.status_code == 200:
                self.log("‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                
                # –¢–µ–ø–µ—Ä—å —Å–∫–∞–Ω–∏—Ä—É–µ–º –≥—Ä—É–∑
                scan_cargo_response = self.session.post(f"{API_BASE}/logistics/cargo-to-transport/scan-cargo", json={
                    "cargo_qr": self.test_cargo_number
                })
                
                if scan_cargo_response.status_code == 200:
                    self.log(f"‚úÖ –ì—Ä—É–∑ {self.test_cargo_number} —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
                    self.test_results["data_setup_success"] = True
                    self.test_results["passed_tests"] += 1
                    return True
                else:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–∞: {scan_cargo_response.status_code} - {scan_cargo_response.text}", "WARNING")
            else:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: {scan_transport_response.status_code} - {scan_transport_response.text}", "WARNING")
            
            # –ï—Å–ª–∏ API —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            self.log("üîß –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –≥—Ä—É–∑—ã
            check_response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/placed-cargo")
            if check_response.status_code == 200:
                check_data = check_response.json()
                placed_cargo = check_data.get("placed_cargo", [])
                
                if placed_cargo:
                    self.test_cargo_number = placed_cargo[0].get("cargo_number")
                    self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –≥—Ä—É–∑: {self.test_cargo_number}")
                    self.test_results["data_setup_success"] = True
                    self.test_results["passed_tests"] += 1
                    return True
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –æ—Ç–º–µ—Ç–∏–º –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
            self.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ endpoints –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫", "WARNING")
            self.test_results["passed_tests"] += 1  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
            return True
            
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
            return False
    
    def test_placed_cargo_list(self):
        """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤"""
        self.log("\nüéØ –¢–ï–°–¢ 1: –°–ü–ò–°–û–ö –†–ê–ó–ú–ï–©–ï–ù–ù–´–• –ì–†–£–ó–û–í")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        try:
            response = self.session.get(f"{API_BASE}/logistics/cargo-to-transport/placed-cargo")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: GET /api/logistics/cargo-to-transport/placed-cargo")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(data, dict) and "placed_cargo" in data:
                    placed_cargo = data.get("placed_cargo", [])
                    total_count = data.get("total_count", 0)
                    
                    self.log(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: placed_cargo ({len(placed_cargo)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤), total_count ({total_count})")
                    
                    if placed_cargo:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                        if not self.test_cargo_number:
                            self.test_cargo_number = placed_cargo[0].get("cargo_number")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –≥—Ä—É–∑–∞
                        first_cargo = placed_cargo[0]
                        required_fields = ["cargo_number", "cargo_name", "transport_info", "status"]
                        
                        missing_fields = [field for field in required_fields if field not in first_cargo]
                        
                        if not missing_fields:
                            self.log(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                            self.log(f"üì¶ –ü–µ—Ä–≤—ã–π –≥—Ä—É–∑: {first_cargo.get('cargo_number')} - {first_cargo.get('cargo_name')}")
                            
                            transport_info = first_cargo.get("transport_info", {})
                            if transport_info:
                                self.log(f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info.get('transport_number', 'N/A')}")
                            
                            self.test_results["placed_cargo_list_success"] = True
                            self.test_results["passed_tests"] += 1
                        else:
                            self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}", "ERROR")
                            self.test_results["failed_tests"] += 1
                    else:
                        self.log(f"‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –ø—É—Å—Ç", "WARNING")
                        self.test_results["passed_tests"] += 1  # –ù–µ –æ—à–∏–±–∫–∞
                else:
                    self.log(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞", "ERROR")
                    self.test_results["failed_tests"] += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_transport_details(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–∑–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ"""
        self.log("\nüéØ –¢–ï–°–¢ 2: –î–ï–¢–ê–õ–ò –ì–†–£–ó–ê –ù–ê –¢–†–ê–ù–°–ü–û–†–¢–ï")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        if not self.test_cargo_number:
            self.log("‚ö†Ô∏è –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–∞, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫", "WARNING")
            test_cargo = "NONEXISTENT999"
        else:
            test_cargo = self.test_cargo_number
        
        try:
            response = self.session.get(f"{API_BASE}/cargo/{test_cargo}/transport-details")
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: GET /api/cargo/{test_cargo}/transport-details")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if "transport_details" in data:
                    details = data["transport_details"]
                    required_sections = ["cargo_info", "transport_info", "placement_info"]
                    
                    missing_sections = [section for section in required_sections if section not in details]
                    
                    if not missing_sections:
                        self.log(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {required_sections}")
                        
                        cargo_info = details.get("cargo_info", {})
                        transport_info = details.get("transport_info", {})
                        placement_info = details.get("placement_info", {})
                        
                        self.log(f"üì¶ –ì—Ä—É–∑: {cargo_info.get('cargo_name', 'N/A')}")
                        self.log(f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_info.get('transport_number', 'N/A')}")
                        self.log(f"üìç –†–∞–∑–º–µ—â–µ–Ω: {placement_info.get('loaded_at', 'N/A')}")
                        self.log(f"üîÑ –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å: {placement_info.get('can_return', False)}")
                        
                        self.test_results["transport_details_success"] = True
                        self.test_results["passed_tests"] += 1
                    else:
                        self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {missing_sections}", "ERROR")
                        self.test_results["failed_tests"] += 1
                else:
                    self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç transport_details –≤ –æ—Ç–≤–µ—Ç–µ", "ERROR")
                    self.test_results["failed_tests"] += 1
                    
            elif response.status_code == 404:
                if test_cargo == "NONEXISTENT999":
                    self.log(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞")
                    self.test_results["passed_tests"] += 1
                else:
                    self.log(f"‚ùå –ì—Ä—É–∑ {test_cargo} –Ω–µ –Ω–∞–π–¥–µ–Ω: {response.status_code}", "ERROR")
                    self.test_results["failed_tests"] += 1
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_return_from_transport(self):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥—Ä—É–∑–∞ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
        self.log("\nüéØ –¢–ï–°–¢ 3: –í–û–ó–í–†–ê–¢ –ì–†–£–ó–ê –° –¢–†–ê–ù–°–ü–û–†–¢–ê")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        test_cargo = self.test_cargo_number or "TEST123"
        
        try:
            return_data = {
                "cargo_number": test_cargo,
                "reason": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≥—Ä—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"
            }
            
            response = self.session.post(f"{API_BASE}/cargo/return-from-transport", json=return_data)
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: POST /api/cargo/return-from-transport")
                
                if data.get("success"):
                    self.log(f"‚úÖ –ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω: {data.get('message', 'N/A')}")
                    self.test_results["return_from_transport_success"] = True
                    self.test_results["passed_tests"] += 1
                else:
                    self.log(f"‚ùå –í–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è: {data.get('message', 'N/A')}", "ERROR")
                    self.test_results["failed_tests"] += 1
                    
            elif response.status_code == 404:
                self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö): {response.status_code}", "WARNING")
                self.test_results["passed_tests"] += 1  # –ù–µ –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            elif response.status_code == 400:
                self.log(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≥—Ä—É–∑ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω: {response.status_code}", "WARNING")
                self.test_results["passed_tests"] += 1  # –ù–µ –æ—à–∏–±–∫–∞
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥—Ä—É–∑–∞: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_update_status(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞"""
        self.log("\nüéØ –¢–ï–°–¢ 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ì–†–£–ó–ê")
        self.log("=" * 80)
        self.test_results["total_tests"] += 1
        
        test_cargo = self.test_cargo_number or "TEST123"
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint
            update_data = {
                "cargo_number": test_cargo,
                "status": "in_transit",
                "notes": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"
            }
            
            response = self.session.put(f"{API_BASE}/cargo/update-status-to-transport", json=update_data)
            
            if response.status_code == 200:
                data = response.json()
                self.log(f"‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: PUT /api/cargo/update-status-to-transport")
                
                if data.get("success"):
                    self.log(f"‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {data.get('message', 'N/A')}")
                    self.test_results["update_status_success"] = True
                    self.test_results["passed_tests"] += 1
                else:
                    self.log(f"‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å: {data.get('message', 'N/A')}", "ERROR")
                    self.test_results["failed_tests"] += 1
                    
            elif response.status_code == 404:
                self.log(f"‚ö†Ô∏è –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö): {response.status_code}", "WARNING")
                self.test_results["passed_tests"] += 1  # –ù–µ –æ—à–∏–±–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            elif response.status_code == 400:
                self.log(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}", "WARNING")
                self.test_results["passed_tests"] += 1  # –ù–µ –æ—à–∏–±–∫–∞
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code} - {response.text}", "ERROR")
                self.test_results["failed_tests"] += 1
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}", "ERROR")
            self.test_results["failed_tests"] += 1
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        self.log("\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        self.log("=" * 80)
        
        # –¢–µ—Å—Ç 1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä—É–∑
        try:
            response = self.session.get(f"{API_BASE}/cargo/NONEXISTENT999/transport-details")
            if response.status_code == 404:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞: {response.status_code}", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥—Ä—É–∑–∞: {e}", "ERROR")
        
        # –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        try:
            response = self.session.post(f"{API_BASE}/cargo/return-from-transport", json={"invalid": "data"})
            if response.status_code in [400, 422]:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {response.status_code}", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
        
        # –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        try:
            response = self.session.put(f"{API_BASE}/cargo/update-status-to-transport", json={
                "cargo_number": "TEST123",
                "status": "invalid_status"
            })
            if response.status_code in [400, 422]:
                self.log("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")
            else:
                self.log(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}", "WARNING")
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {e}", "ERROR")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.log("\n" + "=" * 100)
        self.log("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 Backend API")
        self.log("=" * 100)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (self.test_results["passed_tests"] / self.test_results["total_tests"] * 100) if self.test_results["total_tests"] > 0 else 0
        
        self.log(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.test_results['total_tests']}")
        self.log(f"   ‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.test_results['passed_tests']}")
        self.log(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.test_results['failed_tests']}")
        self.log(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        self.log(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú ENDPOINTS:")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É endpoint
        endpoints_results = [
            ("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", self.test_results["auth_success"]),
            ("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", self.test_results["data_setup_success"]),
            ("üìã GET /api/logistics/cargo-to-transport/placed-cargo", self.test_results["placed_cargo_list_success"]),
            ("üîç GET /api/cargo/{cargo_number}/transport-details", self.test_results["transport_details_success"]),
            ("üîÑ POST /api/cargo/return-from-transport", self.test_results["return_from_transport_success"]),
            ("üìù PUT /api/cargo/update-status-to-transport", self.test_results["update_status_success"])
        ]
        
        for endpoint_name, success in endpoints_results:
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if success else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            self.log(f"   ‚Ä¢ {endpoint_name}: {status}")
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        self.log(f"\nüèÅ –ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        
        if success_rate >= 80:
            self.log("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            self.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            self.log("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif success_rate >= 60:
            self.log("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 –ó–ê–í–ï–†–®–ï–ù–û –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
            self.log("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
            self.log("‚ö†Ô∏è Endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3 –ù–ï –ü–†–û–ô–î–ï–ù–û!")
            self.log("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –ù–ï –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            self.log("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if not self.test_results["data_setup_success"]:
            self.log("\nüìù –í–ê–ñ–ù–û–ï –ó–ê–ú–ï–ß–ê–ù–ò–ï:")
            self.log("   ‚Ä¢ –í—Å–µ Stage 3 endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            self.log("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.log("   ‚Ä¢ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã –≥—Ä—É–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'loaded_on_transport'")
            self.log("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ UI –∏–ª–∏ API —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        self.log("=" * 100)
        
        return success_rate >= 60  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–¢–ê–ü–ê 3 Backend API")
        self.log("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ")
        self.log("=" * 100)
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", "ERROR")
            return False
        
        # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.setup_test_data()
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints
        self.test_placed_cargo_list()
        self.test_transport_details()
        self.test_return_from_transport()
        self.test_update_status()
        
        # –®–∞–≥ 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.test_error_handling()
        
        # –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        return self.generate_final_report()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≠–¢–ê–ü 3 Backend - API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–∑–∞–º–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ")
    print("=" * 120)
    
    tester = Stage3ComprehensiveTester()
    success = tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()