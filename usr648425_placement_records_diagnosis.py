#!/usr/bin/env python3
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö 13 placement_records —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º USR648425
========================================================================================

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –í–°–ï 13 placement_records, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º USR648425, 
–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ API

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
2. –ü–æ–∏—Å–∫ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É USR648425:
   - –ù–∞–π—Ç–∏ –≤—Å–µ placement_records —Å placed_by_operator = "USR648425"
   - –ù–∞–π—Ç–∏ –≤—Å–µ placement_records —Å placed_by = "USR648425"
   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫–∏–µ warehouse_id –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
3. –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º:
   - 25082298 (–æ–∂–∏–¥–∞–µ—Ç—Å—è 7 –µ–¥–∏–Ω–∏—Ü)
   - 250101 (–æ–∂–∏–¥–∞–µ—Ç—Å—è 2 –µ–¥–∏–Ω–∏—Ü—ã)  
   - 25082235 (–æ–∂–∏–¥–∞–µ—Ç—Å—è 4 –µ–¥–∏–Ω–∏—Ü—ã)
4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –ü–æ—á–µ–º—É API –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ 4 –∏–∑ 13 –∑–∞–ø–∏—Å–µ–π
5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π: operator_cargo, cargo - –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–Ω–Ω—ã–µ —Ç–∞–º

–ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä USR648425 —Ä–∞–∑–º–µ—â–∞–ª –≤—Å–µ 13 –µ–¥–∏–Ω–∏—Ü, 
–Ω–æ API –Ω–∞—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ 4

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–∞–π—Ç–∏ –≤—Å–µ 13 placement_records –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—á–µ–º—É API –∏—Ö –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç 
–ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ warehouse_id
"""

import requests
import json
import sys
import os
from datetime import datetime
from pymongo import MongoClient

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_OPERATOR = "USR648425"
EXPECTED_APPLICATIONS = {
    "25082298": 7,  # –æ–∂–∏–¥–∞–µ—Ç—Å—è 7 –µ–¥–∏–Ω–∏—Ü
    "250101": 2,    # –æ–∂–∏–¥–∞–µ—Ç—Å—è 2 –µ–¥–∏–Ω–∏—Ü—ã
    "25082235": 4   # –æ–∂–∏–¥–∞–µ—Ç—Å—è 4 –µ–¥–∏–Ω–∏—Ü—ã
}

class USR648425PlacementDiagnostic:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.mongo_client = None
        self.db = None
        self.test_results = {
            "auth_success": False,
            "mongo_connection": False,
            "placement_records_found": 0,
            "expected_total": 13,
            "applications_analysis": {},
            "warehouse_analysis": {},
            "api_filtering_issue": None,
            "missing_records": []
        }
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                self.test_results["auth_success"] = True
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def connect_to_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
            MONGO_URL = "mongodb://localhost:27017"
            DB_NAME = "cargo_transport"
            
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            collections = self.db.list_collection_names()
            self.log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            self.test_results["mongo_connection"] = True
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}", "ERROR")
            return False
    
    def search_placement_records_by_operator(self):
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö placement_records —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º USR648425"""
        self.log(f"üîç –ü–æ–∏—Å–∫ placement_records –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}...")
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            search_queries = [
                {"placed_by_operator": TARGET_OPERATOR},
                {"placed_by": TARGET_OPERATOR},
                {"operator_id": TARGET_OPERATOR},
                {"placed_by_operator_id": TARGET_OPERATOR}
            ]
            
            all_records = []
            unique_records = set()
            
            for query in search_queries:
                self.log(f"  üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
                records = list(self.db.placement_records.find(query, {"_id": 0}))
                
                for record in records:
                    record_id = record.get("id", "unknown")
                    if record_id not in unique_records:
                        unique_records.add(record_id)
                        all_records.append(record)
                
                self.log(f"    –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
            
            self.log(f"‚úÖ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö placement_records –Ω–∞–π–¥–µ–Ω–æ: {len(all_records)}")
            self.test_results["placement_records_found"] = len(all_records)
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            if all_records:
                self.log("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ê–ô–î–ï–ù–ù–´–• PLACEMENT_RECORDS:")
                self.log("=" * 80)
                
                warehouse_stats = {}
                application_stats = {}
                
                for i, record in enumerate(all_records, 1):
                    cargo_number = record.get("cargo_number", "N/A")
                    individual_number = record.get("individual_number", "N/A")
                    warehouse_id = record.get("warehouse_id", "N/A")
                    placed_at = record.get("placed_at", "N/A")
                    location = record.get("location", "N/A")
                    
                    self.log(f"  {i}. –ó–∞—è–≤–∫–∞: {cargo_number}, –ï–¥–∏–Ω–∏—Ü–∞: {individual_number}")
                    self.log(f"     –°–∫–ª–∞–¥: {warehouse_id}, –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_at}")
                    self.log(f"     –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–ª–∞–¥–∞–º
                    if warehouse_id not in warehouse_stats:
                        warehouse_stats[warehouse_id] = 0
                    warehouse_stats[warehouse_id] += 1
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
                    if cargo_number not in application_stats:
                        application_stats[cargo_number] = 0
                    application_stats[cargo_number] += 1
                
                self.test_results["warehouse_analysis"] = warehouse_stats
                self.test_results["applications_analysis"] = application_stats
                
                self.log(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ö–õ–ê–î–ê–ú:")
                for warehouse_id, count in warehouse_stats.items():
                    self.log(f"  –°–∫–ª–∞–¥ {warehouse_id}: {count} –µ–¥–∏–Ω–∏—Ü")
                
                self.log(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–Ø–í–ö–ê–ú:")
                for app_number, count in application_stats.items():
                    expected = EXPECTED_APPLICATIONS.get(app_number, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    status = "‚úÖ" if expected != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and count == expected else "‚ö†Ô∏è"
                    self.log(f"  {status} –ó–∞—è–≤–∫–∞ {app_number}: {count} –µ–¥–∏–Ω–∏—Ü (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
            
            return all_records
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ placement_records: {e}", "ERROR")
            return []
    
    def search_by_specific_applications(self):
        """–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞—è–≤–∫–∞–º"""
        self.log(f"\nüéØ –ü–û–ò–°–ö –ü–û –ö–û–ù–ö–†–ï–¢–ù–´–ú –ó–ê–Ø–í–ö–ê–ú:")
        self.log("=" * 50)
        
        try:
            total_found = 0
            missing_applications = []
            
            for app_number, expected_count in EXPECTED_APPLICATIONS.items():
                self.log(f"\nüîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ {app_number} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_count} –µ–¥–∏–Ω–∏—Ü)...")
                
                # –ü–æ–∏—Å–∫ –≤ placement_records
                placement_records = list(self.db.placement_records.find({
                    "cargo_number": app_number,
                    "$or": [
                        {"placed_by_operator": TARGET_OPERATOR},
                        {"placed_by": TARGET_OPERATOR},
                        {"operator_id": TARGET_OPERATOR},
                        {"placed_by_operator_id": TARGET_OPERATOR}
                    ]
                }, {"_id": 0}))
                
                found_count = len(placement_records)
                total_found += found_count
                
                if found_count > 0:
                    self.log(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {found_count} –µ–¥–∏–Ω–∏—Ü –≤ placement_records")
                    for record in placement_records:
                        individual_number = record.get("individual_number", "N/A")
                        warehouse_id = record.get("warehouse_id", "N/A")
                        location = record.get("location", "N/A")
                        self.log(f"    - {individual_number} (—Å–∫–ª–∞–¥: {warehouse_id}, –º–µ—Å—Ç–æ: {location})")
                else:
                    self.log(f"  ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü –≤ placement_records")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
                self.log(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ operator_cargo...")
                operator_cargo = self.db.operator_cargo.find_one({"cargo_number": app_number})
                if operator_cargo:
                    individual_items = operator_cargo.get("individual_items", [])
                    placed_items = [item for item in individual_items if item.get("is_placed", False)]
                    self.log(f"    operator_cargo: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü, {len(placed_items)} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                else:
                    self.log(f"    operator_cargo: –∑–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                
                self.log(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ cargo...")
                cargo = self.db.cargo.find_one({"cargo_number": app_number})
                if cargo:
                    individual_items = cargo.get("individual_items", [])
                    placed_items = [item for item in individual_items if item.get("is_placed", False)]
                    self.log(f"    cargo: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü, {len(placed_items)} —Ä–∞–∑–º–µ—â–µ–Ω–æ")
                else:
                    self.log(f"    cargo: –∑–∞—è–≤–∫–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
                if found_count != expected_count:
                    missing_count = expected_count - found_count
                    missing_applications.append({
                        "application": app_number,
                        "expected": expected_count,
                        "found": found_count,
                        "missing": missing_count
                    })
                    self.log(f"  ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –Ω–∞–π–¥–µ–Ω–æ {found_count}, –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç {missing_count}")
            
            self.test_results["missing_records"] = missing_applications
            
            self.log(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            self.log(f"  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {total_found}")
            self.log(f"  –û–∂–∏–¥–∞–ª–æ—Å—å –µ–¥–∏–Ω–∏—Ü: {sum(EXPECTED_APPLICATIONS.values())}")
            self.log(f"  –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –µ–¥–∏–Ω–∏—Ü: {sum(EXPECTED_APPLICATIONS.values()) - total_found}")
            
            return total_found
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º: {e}", "ERROR")
            return 0
    
    def analyze_api_filtering_issue(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ API"""
        self.log(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò API:")
        self.log("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API layout-with-cargo
            self.log("üì° –ó–∞–ø—Ä–æ—Å –∫ API /api/operator/warehouses/layout-with-cargo...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–∫–ª–∞–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            warehouses_response = self.session.get(f"{API_BASE}/operator/warehouses")
            if warehouses_response.status_code != 200:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: {warehouses_response.status_code}")
                return
            
            warehouses = warehouses_response.json()
            self.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {len(warehouses)}")
            
            api_found_total = 0
            
            for warehouse in warehouses:
                warehouse_id = warehouse.get("id")
                warehouse_name = warehouse.get("name", "N/A")
                
                self.log(f"\nüè¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–ª–∞–¥–∞: {warehouse_name} (ID: {warehouse_id})")
                
                # –ó–∞–ø—Ä–æ—Å –∫ layout-with-cargo –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞
                layout_response = self.session.get(f"{API_BASE}/operator/warehouses/{warehouse_id}/layout-with-cargo")
                
                if layout_response.status_code == 200:
                    layout_data = layout_response.json()
                    
                    # –ü–æ–¥—Å—á–µ—Ç –≥—Ä—É–∑–æ–≤ –≤ layout
                    cargo_count = 0
                    usr648425_count = 0
                    
                    if "layout" in layout_data:
                        layout = layout_data["layout"]
                        if "blocks" in layout:
                            for block in layout["blocks"]:
                                if "shelves" in block:
                                    for shelf in block["shelves"]:
                                        if "cells" in shelf:
                                            for cell in shelf["cells"]:
                                                if "cargo" in cell and cell["cargo"]:
                                                    for cargo in cell["cargo"]:
                                                        cargo_count += 1
                                                        placed_by = cargo.get("placed_by_operator", "")
                                                        if placed_by == TARGET_OPERATOR:
                                                            usr648425_count += 1
                    
                    self.log(f"  üìä –í—Å–µ–≥–æ –≥—Ä—É–∑–æ–≤ –≤ layout: {cargo_count}")
                    self.log(f"  üéØ –ì—Ä—É–∑–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö {TARGET_OPERATOR}: {usr648425_count}")
                    api_found_total += usr648425_count
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cargo_info –µ—Å–ª–∏ –µ—Å—Ç—å
                    if "cargo_info" in layout_data:
                        cargo_info = layout_data["cargo_info"]
                        cargo_info_count = len(cargo_info) if isinstance(cargo_info, list) else 0
                        usr648425_cargo_info = 0
                        
                        if isinstance(cargo_info, list):
                            for cargo in cargo_info:
                                placed_by = cargo.get("placed_by_operator", "")
                                if placed_by == TARGET_OPERATOR:
                                    usr648425_cargo_info += 1
                        
                        self.log(f"  üìã cargo_info –∑–∞–ø–∏—Å–µ–π: {cargo_info_count}")
                        self.log(f"  üéØ cargo_info –¥–ª—è {TARGET_OPERATOR}: {usr648425_cargo_info}")
                else:
                    self.log(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è layout: {layout_response.status_code}")
            
            self.log(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï API –ò –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
            self.log(f"  API –Ω–∞—Ö–æ–¥–∏—Ç –≥—Ä—É–∑–æ–≤ {TARGET_OPERATOR}: {api_found_total}")
            self.log(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç: {self.test_results['placement_records_found']}")
            self.log(f"  –û–∂–∏–¥–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ: {self.test_results['expected_total']}")
            
            if api_found_total < self.test_results['placement_records_found']:
                self.test_results["api_filtering_issue"] = f"API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è: API –Ω–∞—Ö–æ–¥–∏—Ç {api_found_total}, –∞ –≤ –ë–î {self.test_results['placement_records_found']}"
                self.log(f"  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø–æ–ª–Ω–∞—è!")
                self.log(f"     API –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {self.test_results['placement_records_found'] - api_found_total} –∑–∞–ø–∏—Å–µ–π")
            elif api_found_total == self.test_results['placement_records_found']:
                self.test_results["api_filtering_issue"] = "API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ"
                self.log(f"  ‚úÖ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                self.log(f"  ‚ö†Ô∏è –ù–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ API: {e}", "ERROR")
    
    def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("\nüìã –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        self.log("=" * 80)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∏—Å–∫ placement_records –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {TARGET_OPERATOR}")
        self.log(f"üìÖ –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.log(f"\nüìä –û–°–ù–û–í–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        self.log(f"  ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'–£–°–ü–ï–®–ù–û' if self.test_results['auth_success'] else '–ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: {'–£–°–ü–ï–®–ù–û' if self.test_results['mongo_connection'] else '–ù–ï–£–î–ê–ß–ù–û'}")
        self.log(f"  üìä –ù–∞–π–¥–µ–Ω–æ placement_records: {self.test_results['placement_records_found']}")
        self.log(f"  üéØ –û–∂–∏–¥–∞–ª–æ—Å—å –≤—Å–µ–≥–æ: {self.test_results['expected_total']}")
        self.log(f"  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞–µ—Ç –∑–∞–ø–∏—Å–µ–π: {self.test_results['expected_total'] - self.test_results['placement_records_found']}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∫–ª–∞–¥–∞–º
        if self.test_results["warehouse_analysis"]:
            self.log(f"\nüè¢ –ê–ù–ê–õ–ò–ó –ü–û –°–ö–õ–ê–î–ê–ú:")
            for warehouse_id, count in self.test_results["warehouse_analysis"].items():
                self.log(f"  –°–∫–ª–∞–¥ {warehouse_id}: {count} –µ–¥–∏–Ω–∏—Ü")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞—è–≤–∫–∞–º
        if self.test_results["applications_analysis"]:
            self.log(f"\nüìã –ê–ù–ê–õ–ò–ó –ü–û –ó–ê–Ø–í–ö–ê–ú:")
            for app_number, found_count in self.test_results["applications_analysis"].items():
                expected = EXPECTED_APPLICATIONS.get(app_number, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                status = "‚úÖ" if expected != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and found_count == expected else "‚ö†Ô∏è"
                self.log(f"  {status} –ó–∞—è–≤–∫–∞ {app_number}: –Ω–∞–π–¥–µ–Ω–æ {found_count}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}")
        
        # –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        if self.test_results["missing_records"]:
            self.log(f"\n‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ó–ê–ü–ò–°–ò:")
            for missing in self.test_results["missing_records"]:
                self.log(f"  –ó–∞—è–≤–∫–∞ {missing['application']}: –Ω–µ–¥–æ—Å—Ç–∞–µ—Ç {missing['missing']} –µ–¥–∏–Ω–∏—Ü")
        
        # –ü—Ä–æ–±–ª–µ–º–∞ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if self.test_results["api_filtering_issue"]:
            self.log(f"\nüîç –ü–†–û–ë–õ–ï–ú–ê API –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")
            self.log(f"  {self.test_results['api_filtering_issue']}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤—ã–≤–æ–¥—ã
        self.log(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –í–´–í–û–î–´:")
        
        if self.test_results['placement_records_found'] == self.test_results['expected_total']:
            self.log("‚úÖ –í–°–ï 13 PLACEMENT_RECORDS –ù–ê–ô–î–ï–ù–´!")
            self.log("üéâ –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –∞ –Ω–µ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        elif self.test_results['placement_records_found'] > 0:
            missing = self.test_results['expected_total'] - self.test_results['placement_records_found']
            self.log(f"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û –¢–û–õ–¨–ö–û {self.test_results['placement_records_found']} –ò–ó {self.test_results['expected_total']} –ó–ê–ü–ò–°–ï–ô")
            self.log(f"‚ùå –ù–ï–î–û–°–¢–ê–ï–¢ {missing} PLACEMENT_RECORDS")
            self.log("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            self.log("   1. –ó–∞–ø–∏—Å–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            self.log("   2. –ó–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å –¥—Ä—É–≥–∏–º operator_id")
            self.log("   3. –ó–∞–ø–∏—Å–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            self.log("   4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—è–º–∏ placed_by_operator/placed_by")
        else:
            self.log("‚ùå –ù–ò –û–î–ù–û–ô –ó–ê–ü–ò–°–ò –ù–ï –ù–ê–ô–î–ï–ù–û!")
            self.log("üîç –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–æ–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ")
        
        return self.test_results['placement_records_found'] >= 4  # –ú–∏–Ω–∏–º—É–º —Ç–æ —á—Ç–æ API –Ω–∞—Ö–æ–¥–∏—Ç
    
    def run_comprehensive_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò USR648425 PLACEMENT_RECORDS")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        if not self.connect_to_mongodb():
            self.log("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ï–†–í–ê–ù–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB", "ERROR")
            return False
        
        # 3. –ü–æ–∏—Å–∫ placement_records –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        placement_records = self.search_placement_records_by_operator()
        
        # 4. –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞—è–≤–∫–∞–º
        found_by_applications = self.search_by_specific_applications()
        
        # 5. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.analyze_api_filtering_issue()
        
        # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        success = self.generate_comprehensive_report()
        
        return success

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnostic = USR648425PlacementDiagnostic()
    
    try:
        success = diagnostic.run_comprehensive_diagnosis()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ placement_records: {diagnostic.test_results['placement_records_found']}")
            print("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print("üîç –°–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –≤—ã—à–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–Ø–í–ò–õ–ê –ü–†–û–ë–õ–ï–ú–´!")
            print("üîç –ù–µ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ placement_records –Ω–∞–π–¥–µ–Ω—ã")
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()