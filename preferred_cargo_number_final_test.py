#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–°–¢–û–Ø–ù–ù–´–• –ù–û–ú–ï–†–û–í –ó–ê–Ø–í–û–ö

–ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: 
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞—è–≤–æ–∫:

**FRONTEND –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:**
1. –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ `preGeneratedCargoNumber` –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
2. –í `handleGenerateCargoNumberQR` –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (—Ñ–æ—Ä–º–∞—Ç: YYMMDDXX)
3. –í `handleConfirmCargoAcceptance` –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è `preferred_cargo_number: preGeneratedCargoNumber`
4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–æ–º–µ—Ä –æ—á–∏—â–∞–µ—Ç—Å—è

**BACKEND –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:**
1. –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ `preferred_cargo_number` –≤ –º–æ–¥–µ–ª—å `OperatorCargoCreate`
2. –í endpoint `/api/operator/cargo/accept` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞:
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ `preferred_cargo_number`
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –µ—Å–ª–∏ —É–Ω–∏–∫–∞–ª–µ–Ω
   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
   - –í–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

–ó–ê–î–ê–ß–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:
1. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º:**
   - –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å `preferred_cargo_number: "2501280123"`
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º (2501280123)
   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è

2. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:**
   - –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É "already exists"

3. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:**
   - –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ë–ï–ó `preferred_cargo_number`
   - –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

4. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:**
   - –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å preferred_cargo_number ‚Üí –ü–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ ‚Üí –ò–º–µ–µ—Ç —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä

–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:
‚úÖ –ó–∞—è–≤–∫–∏ —Å `preferred_cargo_number` —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
‚úÖ –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ

–≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!
"""

import requests
import json
import sys
import time
from datetime import datetime

# Configuration
BACKEND_URL = "https://cargo-qr-system.preview.emergentagent.com/api"

# Test credentials
WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class PreferredCargoNumberTester:
    def __init__(self):
        self.session = requests.Session()
        self.operator_token = None
        self.test_results = []
        self.test_cargo_ids = []  # Store created cargo IDs for cleanup
        
    def log_test(self, test_name, success, details="", error=""):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "error": error,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if details:
            print(f"    üìã {details}")
        if error:
            print(f"    ‚ùå Error: {error}")
        print()

    def authenticate_operator(self):
        """Authenticate warehouse operator"""
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.operator_token}"
                })
                
                # Get user info
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    user_data = user_response.json()
                    self.log_test(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_data.get('full_name')}' (—Ä–æ–ª—å: {user_data.get('role')}, —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone')})"
                    )
                    return True
                else:
                    self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
                    return False
            else:
                self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_test("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, error=str(e))
            return False

    def test_create_cargo_with_preferred_number(self):
        """1. –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å preferred_cargo_number: "2501280123" """
        try:
            preferred_number = "2501280123"
            
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ü–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ù–æ–º–µ—Ä–æ–≤",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ü–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ù–æ–º–µ—Ä–æ–≤", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 45, –∫–≤. 12",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "preferred_cargo_number": preferred_number,  # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–õ–ï
                "cargo_items": [
                    {
                        "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º",
                        "quantity": 2,
                        "weight": 10.0,
                        "price_per_kg": 50.0,
                        "total_amount": 500.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                # Store for cleanup
                if cargo_id:
                    self.test_cargo_ids.append(cargo_id)
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º
                if cargo_number == preferred_number:
                    self.log_test(
                        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å preferred_cargo_number",
                        True,
                        f"‚úÖ –£–°–ü–ï–•! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º: {cargo_number} (ID: {cargo_id})"
                    )
                    return True, cargo_id, cargo_number
                else:
                    self.log_test(
                        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å preferred_cargo_number",
                        False,
                        error=f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª—Å—è: {preferred_number}, –ø–æ–ª—É—á–µ–Ω: {cargo_number}"
                    )
                    return False, cargo_id, cargo_number
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å preferred_cargo_number",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False, None, None
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å preferred_cargo_number", False, error=str(e))
            return False, None, None

    def test_duplicate_preferred_number(self):
        """2. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä—É—é –∑–∞—è–≤–∫—É —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º"""
        try:
            duplicate_number = "2501280123"  # –¢–æ—Ç –∂–µ –Ω–æ–º–µ—Ä —á—Ç–æ –∏ –≤ –ø–µ—Ä–≤–æ–º —Ç–µ—Å—Ç–µ
            
            cargo_data = {
                "sender_full_name": "–î—É–±–ª–∏—Ä—É—é—â–∏–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–î—É–±–ª–∏—Ä—É—é—â–∏–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 50, –∫–≤. 15",
                "description": "–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º –Ω–æ–º–µ—Ä–æ–º",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "preferred_cargo_number": duplicate_number,  # –î–£–ë–õ–ò–†–£–Æ–©–ò–ô –ù–û–ú–ï–†
                "cargo_items": [
                    {
                        "cargo_name": "–î—É–±–ª–∏—Ä—É—é—â–∏–π –≥—Ä—É–∑",
                        "quantity": 1,
                        "weight": 5.0,
                        "price_per_kg": 100.0,
                        "total_amount": 500.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            # –û–ñ–ò–î–ê–ï–ú –û–®–ò–ë–ö–£ - –Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if response.status_code == 400 or response.status_code == 409:
                error_text = response.text.lower()
                if "already exists" in error_text or "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_text or "duplicate" in error_text:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ preferred_cargo_number",
                        True,
                        f"‚úÖ –£–°–ü–ï–•! Backend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –¥—É–±–ª–∏—Ä—É—é—â–∏–π –Ω–æ–º–µ—Ä: HTTP {response.status_code}"
                    )
                    return True
                else:
                    self.log_test(
                        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ preferred_cargo_number",
                        False,
                        error=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.text}"
                    )
                    return False
            elif response.status_code == 200:
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å - —ç—Ç–æ –æ—à–∏–±–∫–∞, –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
                data = response.json()
                cargo_id = data.get("id")
                if cargo_id:
                    self.test_cargo_ids.append(cargo_id)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ preferred_cargo_number",
                    False,
                    error=f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ó–∞—è–≤–∫–∞ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º –Ω–æ–º–µ—Ä–æ–º –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞: {data.get('cargo_number')}"
                )
                return False
            else:
                self.log_test(
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ preferred_cargo_number",
                    False,
                    error=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥: {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ preferred_cargo_number", False, error=str(e))
            return False

    def test_create_cargo_without_preferred_number(self):
        """3. –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ë–ï–ó preferred_cargo_number"""
        try:
            cargo_data = {
                "sender_full_name": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 60, –∫–≤. 20",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –ë–ï–ó preferred_cargo_number –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                # –ù–ï–¢ preferred_cargo_number - –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                "cargo_items": [
                    {
                        "cargo_name": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä—É–∑",
                        "quantity": 1,
                        "weight": 3.0,
                        "price_per_kg": 150.0,
                        "total_amount": 450.0
                    }
                ]
            }
            
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                
                # Store for cleanup
                if cargo_id:
                    self.test_cargo_ids.append(cargo_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ None)
                if cargo_number and len(cargo_number) >= 6:
                    self.log_test(
                        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ë–ï–ó preferred_cargo_number",
                        True,
                        f"‚úÖ –£–°–ü–ï–•! –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º: {cargo_number} (ID: {cargo_id})"
                    )
                    return True, cargo_id, cargo_number
                else:
                    self.log_test(
                        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ë–ï–ó preferred_cargo_number",
                        False,
                        error=f"–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {cargo_number}"
                    )
                    return False, cargo_id, cargo_number
            else:
                self.log_test(
                    "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ë–ï–ó preferred_cargo_number",
                    False,
                    error=f"HTTP {response.status_code}: {response.text}"
                )
                return False, None, None
                
        except Exception as e:
            self.log_test("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ë–ï–ó preferred_cargo_number", False, error=str(e))
            return False, None, None

    def test_cargo_appears_in_placement_list(self, expected_cargo_number):
        """4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                # –ò—â–µ–º –∑–∞—è–≤–∫—É —Å –Ω—É–∂–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
                found_cargo = None
                for item in items:
                    if item.get("cargo_number") == expected_cargo_number:
                        found_cargo = item
                        break
                
                if found_cargo:
                    self.log_test(
                        "–ó–∞—è–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        True,
                        f"‚úÖ –£–°–ü–ï–•! –ó–∞—è–≤–∫–∞ {expected_cargo_number} –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º"
                    )
                    return True
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    available_numbers = [item.get("cargo_number") for item in items[:10]]  # –ü–µ—Ä–≤—ã–µ 10
                    self.log_test(
                        "–ó–∞—è–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                        False,
                        error=f"–ó–∞—è–≤–∫–∞ {expected_cargo_number} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {available_numbers}"
                    )
                    return False
            else:
                self.log_test(
                    "–ó–∞—è–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_test("–ó–∞—è–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, error=str(e))
            return False

    def test_full_cycle_consistency(self):
        """5. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ ‚Üí –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º preferred_cargo_number
            unique_number = f"2501280{int(time.time()) % 1000:03d}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            
            cargo_data = {
                "sender_full_name": "–ü–æ–ª–Ω—ã–π –¶–∏–∫–ª –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "+79777888999",
                "recipient_full_name": "–ü–æ–ª–Ω—ã–π –¶–∏–∫–ª –ü–æ–ª—É—á–∞—Ç–µ–ª—å", 
                "recipient_phone": "+992987654321",
                "recipient_address": "–≥. –î—É—à–∞–Ω–±–µ, —É–ª. –†—É–¥–∞–∫–∏, –¥–æ–º 70, –∫–≤. 25",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "delivery_method": "pickup",
                "preferred_cargo_number": unique_number,
                "cargo_items": [
                    {
                        "cargo_name": "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≥—Ä—É–∑",
                        "quantity": 1,
                        "weight": 7.0,
                        "price_per_kg": 80.0,
                        "total_amount": 560.0
                    }
                ]
            }
            
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            response = self.session.post(f"{BACKEND_URL}/operator/cargo/accept", json=cargo_data)
            
            if response.status_code != 200:
                self.log_test(
                    "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: HTTP {response.status_code}: {response.text}"
                )
                return False
            
            data = response.json()
            cargo_id = data.get("id")
            cargo_number = data.get("cargo_number")
            
            if cargo_id:
                self.test_cargo_ids.append(cargo_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if cargo_number != unique_number:
                self.log_test(
                    "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞",
                    False,
                    error=f"–ù–æ–º–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è {unique_number}, –ø–æ–ª—É—á–µ–Ω {cargo_number}"
                )
                return False
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            
            placement_response = self.session.get(f"{BACKEND_URL}/operator/cargo/available-for-placement")
            if placement_response.status_code != 200:
                self.log_test(
                    "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞",
                    False,
                    error=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: HTTP {placement_response.status_code}"
                )
                return False
            
            placement_data = placement_response.json()
            placement_items = placement_data.get("items", [])
            
            found_in_placement = False
            for item in placement_items:
                if item.get("cargo_number") == unique_number:
                    found_in_placement = True
                    break
            
            if not found_in_placement:
                self.log_test(
                    "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞",
                    False,
                    error=f"–ó–∞—è–≤–∫–∞ {unique_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"
                )
                return False
            
            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            status_response = self.session.get(f"{BACKEND_URL}/operator/cargo/{cargo_id}/placement-status")
            if status_response.status_code == 200:
                status_data = status_response.json()
                status_cargo_number = status_data.get("cargo_number")
                
                if status_cargo_number != unique_number:
                    self.log_test(
                        "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞",
                        False,
                        error=f"–ù–æ–º–µ—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–∂–∏–¥–∞–ª—Å—è {unique_number}, –ø–æ–ª—É—á–µ–Ω {status_cargo_number}"
                    )
                    return False
            
            # –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´
            self.log_test(
                "–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞",
                True,
                f"‚úÖ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –ù–æ–º–µ—Ä {unique_number} –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö: —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ ‚Üí —Å—Ç–∞—Ç—É—Å"
            )
            return True
            
        except Exception as e:
            self.log_test("–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞", False, error=str(e))
            return False

    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.test_cargo_ids:
            return
        
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π endpoint)
        for cargo_id in self.test_cargo_ids:
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ admin endpoint (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                delete_response = self.session.delete(f"{BACKEND_URL}/admin/cargo/{cargo_id}")
                if delete_response.status_code in [200, 204, 404]:
                    print(f"   ‚úÖ –ó–∞—è–≤–∫–∞ {cargo_id} —É–¥–∞–ª–µ–Ω–∞")
                else:
                    print(f"   ‚ö†Ô∏è –ó–∞—è–≤–∫–∞ {cargo_id} –Ω–µ —É–¥–∞–ª–µ–Ω–∞ (HTTP {delete_response.status_code})")
            except:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É {cargo_id}")

    def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫"""
        print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–°–¢–û–Ø–ù–ù–´–• –ù–û–ú–ï–†–û–í –ó–ê–Ø–í–û–ö")
        print("=" * 120)
        print()
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_operator():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        print("üîç –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ –ü–û–°–¢–û–Ø–ù–ù–´–• –ù–û–ú–ï–†–û–í –ó–ê–Ø–í–û–ö:")
        print("-" * 80)
        
        test_results = []
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å preferred_cargo_number
        success1, cargo_id1, cargo_number1 = self.test_create_cargo_with_preferred_number()
        test_results.append(success1)
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–¥—É–±–ª–∏—Ä—É—é—â–∏–π –Ω–æ–º–µ—Ä)
        success2 = self.test_duplicate_preferred_number()
        test_results.append(success2)
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ preferred_cargo_number
        success3, cargo_id3, cargo_number3 = self.test_create_cargo_without_preferred_number()
        test_results.append(success3)
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if success1 and cargo_number1:
            success4 = self.test_cargo_appears_in_placement_list(cargo_number1)
            test_results.append(success4)
        else:
            test_results.append(False)
            self.log_test("–ó–∞—è–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", False, error="–ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞")
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–∞
        success5 = self.test_full_cycle_consistency()
        test_results.append(success5)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.cleanup_test_data()
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 80)
        
        passed_tests = sum(test_results)
        total_tests = len(test_results)
        success_rate = (passed_tests / total_tests) * 100
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 60)
        
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}")
            if result["details"]:
                print(f"    üìã {result['details']}")
            if result["error"]:
                print(f"    ‚ùå {result['error']}")
        
        print()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if success_rate >= 90:
            print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–î–ï–ê–õ–¨–ù–û!")
            print("‚úÖ –ó–∞—è–≤–∫–∏ —Å preferred_cargo_number —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º")
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            print("‚úÖ –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
            print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        elif success_rate >= 75:
            print("‚ö†Ô∏è –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏!")
            print("üö® –°–∏—Å—Ç–µ–º–∞ –ù–ï –ì–û–¢–û–í–ê –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        return success_rate >= 80

if __name__ == "__main__":
    tester = PreferredCargoNumberTester()
    success = tester.run_all_tests()
    sys.exit(0 if success else 1)