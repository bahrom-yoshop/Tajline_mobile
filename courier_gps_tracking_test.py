#!/usr/bin/env python3
"""
GPS Tracking System Testing for TAJLINE.TJ - Courier Map Display Issue
Testing the "Courier not found" problem when displaying couriers on the map

–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –ö–ê–†–¢–´ –ö–£–†–¨–ï–†–û–í:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (+79999888777/admin123)
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GET /api/admin/couriers/locations - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (+79777888999/warehouse123)
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GET /api/operator/couriers/locations - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫—É—Ä—å–µ—Ä—ã —Å GPS –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
6. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (+79991234567/courier123)
7. –û—Ç–ø—Ä–∞–≤–∏—Ç—å GPS –¥–∞–Ω–Ω—ã–µ POST /api/courier/location/update –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
8. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä endpoints

–¶–ï–õ–¨: –ù–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏ "Courier not found" –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∫—É—Ä—å–µ—Ä–æ–≤
"""

import requests
import sys
import json
from datetime import datetime
from typing import Dict, Any, Optional

class CourierGPSTrackingTester:
    def __init__(self, base_url="https://tajline-cargo-5.preview.emergentagent.com"):
        self.base_url = base_url
        self.tokens = {}  # Store tokens for different users
        self.users = {}   # Store user data
        self.tests_run = 0
        self.tests_passed = 0
        
        print(f"üó∫Ô∏è  TAJLINE.TJ GPS TRACKING SYSTEM TESTER")
        print(f"üì° Base URL: {self.base_url}")
        print(f"üéØ –¶–ï–õ–¨: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã 'Courier not found' –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ")
        print("=" * 80)

    def run_test(self, name: str, method: str, endpoint: str, expected_status: int, 
                 data: Optional[Dict] = None, token: Optional[str] = None, 
                 params: Optional[Dict] = None) -> tuple[bool, Dict]:
        """Run a single API test"""
        url = f"{self.base_url}{endpoint}"
        headers = {'Content-Type': 'application/json'}
        
        if token:
            headers['Authorization'] = f'Bearer {token}'

        self.tests_run += 1
        print(f"\nüîç Test {self.tests_run}: {name}")
        print(f"   {method} {endpoint}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers, params=params)
            elif method == 'DELETE':
                response = requests.delete(url, json=data, headers=headers)

            success = response.status_code == expected_status
            
            if success:
                self.tests_passed += 1
                print(f"   ‚úÖ PASSED - Status: {response.status_code}")
                try:
                    result = response.json()
                    if isinstance(result, dict) and len(str(result)) < 500:
                        print(f"   üìÑ Response: {result}")
                    elif isinstance(result, list) and len(result) <= 5:
                        print(f"   üìÑ Response: {result}")
                    else:
                        print(f"   üìÑ Response: {type(result).__name__} with {len(result) if hasattr(result, '__len__') else 'N/A'} items")
                    return True, result
                except:
                    return True, {}
            else:
                print(f"   ‚ùå FAILED - Expected {expected_status}, got {response.status_code}")
                try:
                    error_detail = response.json()
                    print(f"   üìÑ Error: {error_detail}")
                except:
                    print(f"   üìÑ Raw response: {response.text[:200]}")
                return False, {}

        except Exception as e:
            print(f"   ‚ùå FAILED - Exception: {str(e)}")
            return False, {}

    def test_courier_gps_tracking_system(self):
        """Test complete GPS tracking system for courier map display issue"""
        print("\nüó∫Ô∏è  COMPREHENSIVE GPS TRACKING SYSTEM TESTING")
        print("   üéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã 'Courier not found' –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ")
        
        all_success = True
        
        # –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (+79999888777/admin123)
        print("\n   üëë –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (+79999888777/admin123)...")
        
        admin_login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        success, login_response = self.run_test(
            "Admin Login Authentication",
            "POST",
            "/api/auth/login",
            200,
            admin_login_data
        )
        all_success &= success
        
        admin_token = None
        if success and 'access_token' in login_response:
            admin_token = login_response['access_token']
            admin_user = login_response.get('user', {})
            admin_role = admin_user.get('role')
            admin_name = admin_user.get('full_name')
            admin_phone = admin_user.get('phone')
            admin_user_number = admin_user.get('user_number')
            
            print(f"   ‚úÖ Admin login successful: {admin_name}")
            print(f"   üëë Role: {admin_role}")
            print(f"   üìû Phone: {admin_phone}")
            print(f"   üÜî User Number: {admin_user_number}")
            
            # Verify role is admin
            if admin_role == 'admin':
                print("   ‚úÖ Admin role correctly verified")
            else:
                print(f"   ‚ùå Admin role incorrect: expected 'admin', got '{admin_role}'")
                all_success = False
            
            self.tokens['admin'] = admin_token
            self.users['admin'] = admin_user
        else:
            print("   ‚ùå Admin login failed - cannot proceed with GPS testing")
            return False
        
        # –≠–¢–ê–ü 2: –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ GET /api/admin/couriers/locations - –ü–†–û–í–ï–†–ò–¢–¨ –°–¢–†–£–ö–¢–£–†–£ –û–¢–í–ï–¢–ê
        print("\n   üó∫Ô∏è  –≠–¢–ê–ü 2: GET /api/admin/couriers/locations - –ü–†–û–í–ï–†–ò–¢–¨ –°–¢–†–£–ö–¢–£–†–£ –û–¢–í–ï–¢–ê...")
        
        success, admin_couriers_response = self.run_test(
            "Admin Get Couriers Locations (Check Structure)",
            "GET",
            "/api/admin/couriers/locations",
            200,
            token=admin_token
        )
        
        admin_couriers_working = success
        admin_couriers_data = admin_couriers_response if success else {}
        
        if success:
            print("   ‚úÖ GET /api/admin/couriers/locations endpoint accessible")
            
            # Analyze response structure
            if isinstance(admin_couriers_response, dict):
                locations = admin_couriers_response.get('locations', [])
                total_count = admin_couriers_response.get('total_count', 0)
                active_couriers = admin_couriers_response.get('active_couriers', 0)
                
                print(f"   üìä Response structure: dict with locations array")
                print(f"   üìä Total count: {total_count}")
                print(f"   üìä Active couriers: {active_couriers}")
                print(f"   üìä Locations found: {len(locations)}")
                
                if len(locations) > 0:
                    print("   ‚úÖ Courier locations data found")
                    sample_location = locations[0]
                    required_fields = ['courier_id', 'courier_name', 'latitude', 'longitude', 'status']
                    missing_fields = [field for field in required_fields if field not in sample_location]
                    
                    if not missing_fields:
                        print("   ‚úÖ Location data structure correct")
                        print(f"   üìç Sample courier: {sample_location.get('courier_name', 'Unknown')}")
                        print(f"   üìç Status: {sample_location.get('status', 'Unknown')}")
                    else:
                        print(f"   ‚ùå Missing required fields in location data: {missing_fields}")
                        all_success = False
                else:
                    print("   ‚ö†Ô∏è  No courier locations found - this may be the root cause of 'Courier not found'")
                    
            elif isinstance(admin_couriers_response, list):
                print(f"   üìä Response structure: direct array with {len(admin_couriers_response)} items")
                if len(admin_couriers_response) > 0:
                    print("   ‚úÖ Courier locations data found")
                else:
                    print("   ‚ö†Ô∏è  Empty courier locations array - this may be the root cause")
            else:
                print(f"   ‚ùå Unexpected response structure: {type(admin_couriers_response)}")
                all_success = False
        else:
            print("   ‚ùå GET /api/admin/couriers/locations endpoint failed")
            print("   üö® CRITICAL: Admin cannot access courier locations - this is likely the main issue")
            all_success = False
        
        # –≠–¢–ê–ü 3: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)
        print("\n   üè≠ –≠–¢–ê–ü 3: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê (+79777888999/warehouse123)...")
        
        operator_login_data = {
            "phone": "+79777888999",
            "password": "warehouse123"
        }
        
        success, operator_login_response = self.run_test(
            "Warehouse Operator Login Authentication",
            "POST",
            "/api/auth/login",
            200,
            operator_login_data
        )
        all_success &= success
        
        operator_token = None
        if success and 'access_token' in operator_login_response:
            operator_token = operator_login_response['access_token']
            operator_user = operator_login_response.get('user', {})
            operator_role = operator_user.get('role')
            operator_name = operator_user.get('full_name')
            operator_phone = operator_user.get('phone')
            operator_user_number = operator_user.get('user_number')
            
            print(f"   ‚úÖ Operator login successful: {operator_name}")
            print(f"   üëë Role: {operator_role}")
            print(f"   üìû Phone: {operator_phone}")
            print(f"   üÜî User Number: {operator_user_number}")
            
            # Verify role is warehouse_operator
            if operator_role == 'warehouse_operator':
                print("   ‚úÖ Operator role correctly verified")
            else:
                print(f"   ‚ùå Operator role incorrect: expected 'warehouse_operator', got '{operator_role}'")
                all_success = False
            
            self.tokens['warehouse_operator'] = operator_token
            self.users['warehouse_operator'] = operator_user
        else:
            print("   ‚ùå Operator login failed")
            all_success = False
            return False
        
        # –≠–¢–ê–ü 4: –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ GET /api/operator/couriers/locations - –ü–†–û–í–ï–†–ò–¢–¨ –°–¢–†–£–ö–¢–£–†–£ –û–¢–í–ï–¢–ê
        print("\n   üó∫Ô∏è  –≠–¢–ê–ü 4: GET /api/operator/couriers/locations - –ü–†–û–í–ï–†–ò–¢–¨ –°–¢–†–£–ö–¢–£–†–£ –û–¢–í–ï–¢–ê...")
        
        success, operator_couriers_response = self.run_test(
            "Operator Get Couriers Locations (Check Structure)",
            "GET",
            "/api/operator/couriers/locations",
            200,
            token=operator_token
        )
        
        operator_couriers_working = success
        operator_couriers_data = operator_couriers_response if success else {}
        
        if success:
            print("   ‚úÖ GET /api/operator/couriers/locations endpoint accessible")
            
            # Analyze response structure
            if isinstance(operator_couriers_response, dict):
                locations = operator_couriers_response.get('locations', [])
                total_count = operator_couriers_response.get('total_count', 0)
                active_couriers = operator_couriers_response.get('active_couriers', 0)
                message = operator_couriers_response.get('message', '')
                
                print(f"   üìä Response structure: dict with locations array")
                print(f"   üìä Total count: {total_count}")
                print(f"   üìä Active couriers: {active_couriers}")
                print(f"   üìä Locations found: {len(locations)}")
                if message:
                    print(f"   üìÑ Message: {message}")
                
                if len(locations) > 0:
                    print("   ‚úÖ Courier locations data found for operator")
                else:
                    print("   ‚ö†Ô∏è  No courier locations found for operator - may be due to warehouse isolation")
                    
            elif isinstance(operator_couriers_response, list):
                print(f"   üìä Response structure: direct array with {len(operator_couriers_response)} items")
                if len(operator_couriers_response) > 0:
                    print("   ‚úÖ Courier locations data found for operator")
                else:
                    print("   ‚ö†Ô∏è  Empty courier locations array for operator")
            else:
                print(f"   ‚ùå Unexpected response structure: {type(operator_couriers_response)}")
                all_success = False
        else:
            print("   ‚ùå GET /api/operator/couriers/locations endpoint failed")
            print("   üö® CRITICAL: Operator cannot access courier locations")
            all_success = False
        
        # –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ò–¢–¨ –ï–°–¢–¨ –õ–ò –í–û–û–ë–©–ï –ö–£–†–¨–ï–†–´ –° GPS –î–ê–ù–ù–´–ú–ò –í –°–ò–°–¢–ï–ú–ï
        print("\n   üîç –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ò–¢–¨ –ï–°–¢–¨ –õ–ò –ö–£–†–¨–ï–†–´ –° GPS –î–ê–ù–ù–´–ú–ò –í –°–ò–°–¢–ï–ú–ï...")
        
        # Check if there are any couriers in the system at all
        success, all_couriers_response = self.run_test(
            "Check All Couriers in System",
            "GET",
            "/api/admin/couriers",
            200,
            token=admin_token
        )
        
        if success:
            if isinstance(all_couriers_response, list):
                courier_count = len(all_couriers_response)
                print(f"   üìä Total couriers in system: {courier_count}")
                
                if courier_count > 0:
                    print("   ‚úÖ Couriers exist in the system")
                    sample_courier = all_couriers_response[0]
                    print(f"   üë§ Sample courier: {sample_courier.get('full_name', 'Unknown')}")
                    print(f"   üìû Phone: {sample_courier.get('phone', 'Unknown')}")
                else:
                    print("   ‚ö†Ô∏è  No couriers found in the system")
            elif isinstance(all_couriers_response, dict):
                couriers = all_couriers_response.get('couriers', [])
                courier_count = len(couriers)
                print(f"   üìä Total couriers in system: {courier_count}")
                
                if courier_count > 0:
                    print("   ‚úÖ Couriers exist in the system")
                else:
                    print("   ‚ö†Ô∏è  No couriers found in the system")
        else:
            print("   ‚ùå Cannot check couriers in system")
            # Try alternative endpoint
            success, alt_response = self.run_test(
                "Check Couriers Alternative Endpoint",
                "GET",
                "/api/couriers",
                200,
                token=admin_token
            )
            if success:
                print("   ‚úÖ Alternative couriers endpoint accessible")
            else:
                print("   ‚ùå No accessible couriers endpoint found")
        
        # –≠–¢–ê–ü 6: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê (+79991234567/courier123)
        print("\n   üöö –≠–¢–ê–ü 6: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ö–£–†–¨–ï–†–ê (+79991234567/courier123)...")
        
        courier_login_data = {
            "phone": "+79991234567",
            "password": "courier123"
        }
        
        success, courier_login_response = self.run_test(
            "Courier Login Authentication",
            "POST",
            "/api/auth/login",
            200,
            courier_login_data
        )
        all_success &= success
        
        courier_token = None
        if success and 'access_token' in courier_login_response:
            courier_token = courier_login_response['access_token']
            courier_user = courier_login_response.get('user', {})
            courier_role = courier_user.get('role')
            courier_name = courier_user.get('full_name')
            courier_phone = courier_user.get('phone')
            courier_user_number = courier_user.get('user_number')
            
            print(f"   ‚úÖ Courier login successful: {courier_name}")
            print(f"   üëë Role: {courier_role}")
            print(f"   üìû Phone: {courier_phone}")
            print(f"   üÜî User Number: {courier_user_number}")
            
            # Verify role is courier
            if courier_role == 'courier':
                print("   ‚úÖ Courier role correctly verified")
            else:
                print(f"   ‚ùå Courier role incorrect: expected 'courier', got '{courier_role}'")
                all_success = False
            
            self.tokens['courier'] = courier_token
            self.users['courier'] = courier_user
        else:
            print("   ‚ùå Courier login failed")
            all_success = False
            return False
        
        # –≠–¢–ê–ü 7: –û–¢–ü–†–ê–í–ò–¢–¨ GPS –î–ê–ù–ù–´–ï POST /api/courier/location/update –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
        print("\n   üìç –≠–¢–ê–ü 7: –û–¢–ü–†–ê–í–ò–¢–¨ GPS –î–ê–ù–ù–´–ï POST /api/courier/location/update...")
        
        # Send GPS location data
        gps_data = {
            "latitude": 55.7558,  # Moscow Red Square coordinates
            "longitude": 37.6176,
            "status": "online",
            "current_address": "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
            "accuracy": 10.5,
            "speed": 0.0,
            "heading": 0.0
        }
        
        success, location_update_response = self.run_test(
            "Send GPS Location Data (Create Test Data)",
            "POST",
            "/api/courier/location/update",
            200,
            gps_data,
            courier_token
        )
        all_success &= success
        
        location_id = None
        if success:
            print("   ‚úÖ GPS location data sent successfully")
            location_id = location_update_response.get('location_id')
            message = location_update_response.get('message', '')
            
            if location_id:
                print(f"   üìç Location ID generated: {location_id}")
            if message:
                print(f"   üìÑ Response message: {message}")
                
            # Verify GPS data structure
            required_response_fields = ['location_id', 'message']
            missing_fields = [field for field in required_response_fields if field not in location_update_response]
            
            if not missing_fields:
                print("   ‚úÖ GPS location update response structure correct")
            else:
                print(f"   ‚ùå Missing fields in GPS response: {missing_fields}")
                all_success = False
        else:
            print("   ‚ùå Failed to send GPS location data")
            print("   üö® CRITICAL: Cannot create test GPS data")
            all_success = False
        
        # Check courier location status
        print("\n   üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø –ö–£–†–¨–ï–†–ê...")
        
        success, location_status_response = self.run_test(
            "Check Courier Location Status",
            "GET",
            "/api/courier/location/status",
            200,
            token=courier_token
        )
        
        if success:
            print("   ‚úÖ Courier location status accessible")
            tracking_enabled = location_status_response.get('tracking_enabled')
            current_status = location_status_response.get('current_status')
            current_address = location_status_response.get('current_address')
            
            print(f"   üìä Tracking enabled: {tracking_enabled}")
            print(f"   üìä Current status: {current_status}")
            print(f"   üìä Current address: {current_address}")
        else:
            print("   ‚ùå Cannot check courier location status")
        
        # –≠–¢–ê–ü 8: –ü–û–í–¢–û–†–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –ê–î–ú–ò–ù –ò –û–ü–ï–†–ê–¢–û–† ENDPOINTS
        print("\n   üîÑ –≠–¢–ê–ü 8: –ü–û–í–¢–û–†–ù–û –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –ê–î–ú–ò–ù –ò –û–ü–ï–†–ê–¢–û–† ENDPOINTS...")
        
        # Re-test admin endpoint after GPS data creation
        print("\n   üëë –ü–û–í–¢–û–†–ù–´–ô –¢–ï–°–¢: GET /api/admin/couriers/locations...")
        
        success, admin_couriers_retest = self.run_test(
            "Admin Get Couriers Locations (After GPS Data)",
            "GET",
            "/api/admin/couriers/locations",
            200,
            token=admin_token
        )
        
        if success:
            print("   ‚úÖ Admin couriers locations endpoint working after GPS data")
            
            if isinstance(admin_couriers_retest, dict):
                locations = admin_couriers_retest.get('locations', [])
                total_count = admin_couriers_retest.get('total_count', 0)
                active_couriers = admin_couriers_retest.get('active_couriers', 0)
                
                print(f"   üìä Updated total count: {total_count}")
                print(f"   üìä Updated active couriers: {active_couriers}")
                print(f"   üìä Updated locations found: {len(locations)}")
                
                if len(locations) > 0:
                    print("   ‚úÖ GPS data now visible to admin!")
                    sample_location = locations[0]
                    print(f"   üìç Sample location: {sample_location.get('courier_name', 'Unknown')} at {sample_location.get('current_address', 'Unknown')}")
                else:
                    print("   ‚ùå GPS data still not visible to admin - this is the main issue")
                    all_success = False
            else:
                print(f"   ‚ùå Unexpected response format: {type(admin_couriers_retest)}")
                all_success = False
        else:
            print("   ‚ùå Admin couriers locations endpoint still failing")
            all_success = False
        
        # Re-test operator endpoint after GPS data creation
        print("\n   üè≠ –ü–û–í–¢–û–†–ù–´–ô –¢–ï–°–¢: GET /api/operator/couriers/locations...")
        
        success, operator_couriers_retest = self.run_test(
            "Operator Get Couriers Locations (After GPS Data)",
            "GET",
            "/api/operator/couriers/locations",
            200,
            token=operator_token
        )
        
        if success:
            print("   ‚úÖ Operator couriers locations endpoint working after GPS data")
            
            if isinstance(operator_couriers_retest, dict):
                locations = operator_couriers_retest.get('locations', [])
                total_count = operator_couriers_retest.get('total_count', 0)
                active_couriers = operator_couriers_retest.get('active_couriers', 0)
                message = operator_couriers_retest.get('message', '')
                
                print(f"   üìä Updated total count: {total_count}")
                print(f"   üìä Updated active couriers: {active_couriers}")
                print(f"   üìä Updated locations found: {len(locations)}")
                if message:
                    print(f"   üìÑ Message: {message}")
                
                if len(locations) > 0:
                    print("   ‚úÖ GPS data now visible to operator!")
                else:
                    print("   ‚ö†Ô∏è  GPS data still not visible to operator - may be due to warehouse assignment")
            else:
                print(f"   ‚ùå Unexpected response format: {type(operator_couriers_retest)}")
                all_success = False
        else:
            print("   ‚ùå Operator couriers locations endpoint still failing")
            all_success = False
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–†–û–í–ï–†–ò–¢–¨ –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê –î–õ–Ø –†–ê–ó–ù–´–• –†–û–õ–ï–ô
        print("\n   üîê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–†–û–í–ï–†–ò–¢–¨ –ü–†–ê–í–ê –î–û–°–¢–£–ü–ê...")
        
        # Test access control for different roles
        roles_to_test = [
            ('admin', admin_token, "Admin"),
            ('warehouse_operator', operator_token, "Warehouse Operator"),
            ('courier', courier_token, "Courier")
        ]
        
        for role_key, token, role_name in roles_to_test:
            if token:
                print(f"\n   üîç Testing {role_name} access to courier locations...")
                
                success, role_response = self.run_test(
                    f"{role_name} Access to Courier Locations",
                    "GET",
                    "/api/admin/couriers/locations",
                    200 if role_key in ['admin'] else 403,  # Only admin should have access
                    token=token
                )
                
                if role_key == 'admin':
                    if success:
                        print(f"   ‚úÖ {role_name} has correct access")
                    else:
                        print(f"   ‚ùå {role_name} should have access but doesn't")
                        all_success = False
                else:
                    if not success:
                        print(f"   ‚úÖ {role_name} correctly denied access")
                    else:
                        print(f"   ‚ö†Ô∏è  {role_name} has unexpected access")
        
        # –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–†–û–í–ï–†–ò–¢–¨ –°–¢–†–£–ö–¢–£–†–£ –í–û–ó–í–†–ê–©–ê–ï–ú–´–• –î–ê–ù–ù–´–•
        print("\n   üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•...")
        
        if admin_couriers_retest and isinstance(admin_couriers_retest, dict):
            print("   üîç Analyzing final admin response structure...")
            
            # Check if response has the expected structure
            expected_structure = {
                'locations': list,
                'total_count': int,
                'active_couriers': int
            }
            
            structure_valid = True
            for field_name, expected_type in expected_structure.items():
                if field_name in admin_couriers_retest:
                    field_value = admin_couriers_retest[field_name]
                    if isinstance(field_value, expected_type):
                        print(f"   ‚úÖ {field_name}: {field_value} ({type(field_value).__name__})")
                    else:
                        print(f"   ‚ùå {field_name}: expected {expected_type.__name__}, got {type(field_value).__name__}")
                        structure_valid = False
                else:
                    print(f"   ‚ùå Missing field: {field_name}")
                    structure_valid = False
            
            if structure_valid:
                print("   ‚úÖ Response structure is correct")
                
                # Check locations array structure
                locations = admin_couriers_retest.get('locations', [])
                if locations and len(locations) > 0:
                    sample_location = locations[0]
                    location_fields = ['courier_id', 'courier_name', 'latitude', 'longitude', 'status', 'current_address']
                    
                    print("   üîç Checking location data structure...")
                    for field in location_fields:
                        if field in sample_location:
                            print(f"   ‚úÖ {field}: {sample_location[field]}")
                        else:
                            print(f"   ‚ùå Missing location field: {field}")
                            structure_valid = False
                            
                    if structure_valid:
                        print("   ‚úÖ Location data structure is correct")
                    else:
                        print("   ‚ùå Location data structure has issues")
                        all_success = False
                else:
                    print("   ‚ö†Ô∏è  No location data to analyze structure")
            else:
                print("   ‚ùå Response structure has issues")
                all_success = False
        
        # SUMMARY AND DIAGNOSIS
        print("\n" + "="*80)
        print("üìä GPS TRACKING SYSTEM DIAGNOSIS SUMMARY")
        print("="*80)
        
        print(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
        print(f"   üìà Tests Run: {self.tests_run}")
        print(f"   ‚úÖ Tests Passed: {self.tests_passed}")
        print(f"   üìä Success Rate: {(self.tests_passed/self.tests_run*100):.1f}%")
        
        print(f"\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ 'Courier not found':")
        
        # Analyze the root cause
        if admin_couriers_working and admin_couriers_data:
            locations_count = 0
            if isinstance(admin_couriers_data, dict):
                locations_count = len(admin_couriers_data.get('locations', []))
            elif isinstance(admin_couriers_data, list):
                locations_count = len(admin_couriers_data)
            
            if locations_count > 0:
                print("   ‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: –ö—É—Ä—å–µ—Ä—ã —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ")
                print(f"   üìç –ù–∞–π–¥–µ–Ω–æ {locations_count} –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –∫—É—Ä—å–µ—Ä–æ–≤")
                print("   üéâ GPS tracking —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–ï–¢–°–Ø: –ö—É—Ä—å–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("   üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("     - –ö—É—Ä—å–µ—Ä—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç GPS –¥–∞–Ω–Ω—ã–µ")
                print("     - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º GPS –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
                print("     - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∫–ª–∞–¥–∞–º")
        else:
            print("   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Admin endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   üö® –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ 'Courier not found'")
        
        if operator_couriers_working and operator_couriers_data:
            locations_count = 0
            if isinstance(operator_couriers_data, dict):
                locations_count = len(operator_couriers_data.get('locations', []))
            elif isinstance(operator_couriers_data, list):
                locations_count = len(operator_couriers_data)
            
            if locations_count > 0:
                print("   ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤")
            else:
                print("   ‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –≤–∏–¥—è—Ç –∫—É—Ä—å–µ—Ä–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Å–∫–ª–∞–¥–æ–≤)")
        else:
            print("   ‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–æ–≤")
        
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        if not admin_couriers_working:
            print("   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å endpoint GET /api/admin/couriers/locations")
            print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é MongoDB ObjectId")
        
        if not operator_couriers_working:
            print("   4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å endpoint GET /api/operator/couriers/locations")
            print("   5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–≤—è–∑–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫ —Å–∫–ª–∞–¥–∞–º")
        
        if location_id:
            print("   ‚úÖ GPS –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫—É—Ä—å–µ—Ä–∞–º–∏")
        else:
            print("   6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint POST /api/courier/location/update")
        
        print(f"\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        if all_success:
            print("   üéâ GPS TRACKING –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("   ‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ 'Courier not found' —Ä–µ—à–µ–Ω–∞")
            print("   ‚úÖ –í—Å–µ endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print("   ‚ùå GPS TRACKING –°–ò–°–¢–ï–ú–ê –ò–ú–ï–ï–¢ –ü–†–û–ë–õ–ï–ú–´")
            print("   üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            print("   üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—à–µ")
        
        return all_success

def main():
    """Main function to run GPS tracking tests"""
    tester = CourierGPSTrackingTester()
    
    try:
        # Run comprehensive GPS tracking system test
        success = tester.test_courier_gps_tracking_system()
        
        print(f"\n{'='*80}")
        if success:
            print("üéâ ALL GPS TRACKING TESTS PASSED!")
            print("‚úÖ Courier map display issue diagnosed and resolved")
            sys.exit(0)
        else:
            print("‚ùå SOME GPS TRACKING TESTS FAILED")
            print("üîç Check the detailed results above for specific issues")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Testing interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Testing failed with exception: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()