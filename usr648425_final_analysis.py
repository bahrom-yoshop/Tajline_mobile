#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–ü–ï–†–ê–¢–û–†–ê USR648425 –ò –ü–†–û–ë–õ–ï–ú–´ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø
=========================================================

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–•–û–î–ö–ò:
1. USR648425 –°–£–©–ï–°–¢–í–£–ï–¢ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
2. –í—Å–µ 3 –∑–∞—è–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
3. –¢–æ–ª—å–∫–æ 4 placement_records —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
4. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: –∫—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ USR648425 –∏ –ø–æ—á–µ–º—É –∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å

–¶–ï–õ–¨: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è 13 placement_records –¥–ª—è USR648425
"""

import requests
import json
import sys
import os
from datetime import datetime
from pymongo import MongoClient

# –ü–æ–ª—É—á–∞–µ–º URL backend –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://cargo-sync.preview.emergentagent.com')
API_BASE = f"{BACKEND_URL}/api"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"
TARGET_OPERATOR = "USR648425"

class FinalUSR648425Analysis:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.operator_info = None
        self.mongo_client = None
        self.db = None
        
    def log(self, message, level="INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")
        
    def authenticate_warehouse_operator(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
        self.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞...")
        
        try:
            response = self.session.post(f"{API_BASE}/auth/login", json={
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.auth_token = data.get("access_token")
                self.operator_info = data.get("user")
                
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                
                self.log(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {self.operator_info.get('full_name')} (—Ä–æ–ª—å: {self.operator_info.get('role')})")
                return True
            else:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return False
    
    def connect_to_mongodb(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"""
        self.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...")
        
        try:
            MONGO_URL = "mongodb://localhost:27017"
            DB_NAME = "cargo_transport"
            
            self.mongo_client = MongoClient(MONGO_URL)
            self.db = self.mongo_client[DB_NAME]
            
            collections = self.db.list_collection_names()
            self.log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}", "ERROR")
            return False
    
    def analyze_usr648425_user(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è USR648425"""
        self.log(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {TARGET_OPERATOR}:")
        self.log("=" * 60)
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è USR648425
            user = self.db.users.find_one({"user_number": TARGET_OPERATOR})
            
            if user:
                self.log(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TARGET_OPERATOR} –Ω–∞–π–¥–µ–Ω!")
                self.log(f"  ID: {user.get('id')}")
                self.log(f"  –§–ò–û: {user.get('full_name')}")
                self.log(f"  –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone')}")
                self.log(f"  –†–æ–ª—å: {user.get('role')}")
                self.log(f"  –ê–∫—Ç–∏–≤–µ–Ω: {user.get('is_active')}")
                self.log(f"  –°–æ–∑–¥–∞–Ω: {user.get('created_at')}")
                self.log(f"  –°–∫–ª–∞–¥: {user.get('warehouse_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–∫–ª–∞–¥–∞–º
                user_id = user.get('id')
                bindings = list(self.db.operator_warehouse_bindings.find({"operator_id": user_id}))
                
                if bindings:
                    self.log(f"  üè¢ –ü—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–∫–ª–∞–¥–∞–º:")
                    for binding in bindings:
                        warehouse_name = binding.get('warehouse_name', 'N/A')
                        warehouse_id = binding.get('warehouse_id', 'N/A')
                        self.log(f"    - {warehouse_name} (ID: {warehouse_id})")
                else:
                    self.log(f"  ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫ –∫ —Å–∫–ª–∞–¥–∞–º")
                
                return user
            else:
                self.log(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TARGET_OPERATOR} –ù–ï –Ω–∞–π–¥–µ–Ω!")
                return None
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", "ERROR")
            return None
    
    def analyze_existing_placement_records(self):
        """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö placement_records"""
        self.log(f"\nüîç –ê–ù–ê–õ–ò–ó –°–£–©–ï–°–¢–í–£–Æ–©–ò–• PLACEMENT_RECORDS:")
        self.log("=" * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ placement_records
            all_records = list(self.db.placement_records.find({}, {"_id": 0}))
            
            self.log(f"üìä –í—Å–µ–≥–æ placement_records –≤ –±–∞–∑–µ: {len(all_records)}")
            
            if all_records:
                self.log(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ô –ó–ê–ü–ò–°–ò:")
                
                operators_stats = {}
                applications_stats = {}
                
                for i, record in enumerate(all_records, 1):
                    cargo_number = record.get("cargo_number", "N/A")
                    individual_number = record.get("individual_number", "N/A")
                    placed_by_operator = record.get("placed_by_operator", "N/A")
                    placed_by = record.get("placed_by", "N/A")
                    placed_at = record.get("placed_at", "N/A")
                    location = record.get("location", "N/A")
                    recovered = record.get("recovered", False)
                    
                    self.log(f"\n  {i}. –ó–∞—è–≤–∫–∞: {cargo_number}, –ï–¥–∏–Ω–∏—Ü–∞: {individual_number}")
                    self.log(f"     –†–∞–∑–º–µ—â–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {placed_by_operator}")
                    self.log(f"     –†–∞–∑–º–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {placed_by}")
                    self.log(f"     –í—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {placed_at}")
                    self.log(f"     –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}")
                    self.log(f"     –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {recovered}")
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
                    if placed_by_operator not in operators_stats:
                        operators_stats[placed_by_operator] = 0
                    operators_stats[placed_by_operator] += 1
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
                    if cargo_number not in applications_stats:
                        applications_stats[cargo_number] = 0
                    applications_stats[cargo_number] += 1
                
                self.log(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –û–ü–ï–†–ê–¢–û–†–ê–ú:")
                for operator, count in operators_stats.items():
                    self.log(f"  {operator}: {count} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π")
                
                self.log(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ó–ê–Ø–í–ö–ê–ú:")
                for app, count in applications_stats.items():
                    self.log(f"  –ó–∞—è–≤–∫–∞ {app}: {count} —Ä–∞–∑–º–µ—â–µ–Ω–∏–π")
                
                return all_records
            else:
                self.log("‚ùå –ù–µ—Ç placement_records –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ placement_records: {e}", "ERROR")
            return []
    
    def analyze_placement_history(self):
        """–ê–Ω–∞–ª–∏–∑ placement_history –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥–æ–≤ USR648425"""
        self.log(f"\nüîç –ê–ù–ê–õ–ò–ó PLACEMENT_HISTORY:")
        self.log("=" * 60)
        
        try:
            # –ü–æ–∏—Å–∫ –≤ placement_history
            history_records = list(self.db.placement_history.find({}, {"_id": 0}))
            
            self.log(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ placement_history: {len(history_records)}")
            
            usr648425_history = []
            
            if history_records:
                self.log(f"\nüìã –ü–û–ò–°–ö –£–ü–û–ú–ò–ù–ê–ù–ò–ô {TARGET_OPERATOR} –í –ò–°–¢–û–†–ò–ò:")
                
                for record in history_records:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ USR648425
                    record_str = json.dumps(record, default=str).lower()
                    if TARGET_OPERATOR.lower() in record_str:
                        usr648425_history.append(record)
                        
                        self.log(f"  ‚úÖ –ù–ê–ô–î–ï–ù–û —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ {TARGET_OPERATOR}:")
                        self.log(f"    –ó–∞—è–≤–∫–∞: {record.get('cargo_number', 'N/A')}")
                        self.log(f"    –î–µ–π—Å—Ç–≤–∏–µ: {record.get('action', 'N/A')}")
                        self.log(f"    –í—Ä–µ–º—è: {record.get('timestamp', 'N/A')}")
                        self.log(f"    –î–µ—Ç–∞–ª–∏: {record.get('details', 'N/A')}")
                
                if not usr648425_history:
                    self.log(f"  ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π {TARGET_OPERATOR} –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    self.log(f"\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô –ò–°–¢–û–†–ò–ò (–ø–µ—Ä–≤—ã–µ 3):")
                    for i, record in enumerate(history_records[:3], 1):
                        self.log(f"  {i}. –ó–∞—è–≤–∫–∞: {record.get('cargo_number', 'N/A')}")
                        self.log(f"     –î–µ–π—Å—Ç–≤–∏–µ: {record.get('action', 'N/A')}")
                        self.log(f"     –í—Ä–µ–º—è: {record.get('timestamp', 'N/A')}")
                        if 'operator' in record:
                            self.log(f"     –û–ø–µ—Ä–∞—Ç–æ—Ä: {record.get('operator', 'N/A')}")
                
                return usr648425_history
            else:
                self.log("‚ùå placement_history –ø—É—Å—Ç–∞—è")
                return []
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ placement_history: {e}", "ERROR")
            return []
    
    def check_individual_items_in_applications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ individual_items –≤ –∑–∞—è–≤–∫–∞—Ö"""
        self.log(f"\nüîç –ü–†–û–í–ï–†–ö–ê INDIVIDUAL_ITEMS –í –ó–ê–Ø–í–ö–ê–•:")
        self.log("=" * 60)
        
        try:
            target_applications = ["25082298", "250101", "25082235"]
            
            for app_number in target_applications:
                self.log(f"\nüìã –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ {app_number}:")
                
                # –ü–æ–∏—Å–∫ –≤ operator_cargo
                operator_cargo = self.db.operator_cargo.find_one({"cargo_number": app_number})
                
                if operator_cargo:
                    self.log(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤ operator_cargo")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º individual_items –µ—Å–ª–∏ –µ—Å—Ç—å
                    if "individual_items" in operator_cargo:
                        individual_items = operator_cargo["individual_items"]
                        self.log(f"  üì¶ individual_items: {len(individual_items)} –µ–¥–∏–Ω–∏—Ü")
                        
                        placed_count = 0
                        for item in individual_items:
                            is_placed = item.get("is_placed", False)
                            individual_number = item.get("individual_number", "N/A")
                            placement_info = item.get("placement_info", "N/A")
                            
                            if is_placed:
                                placed_count += 1
                                self.log(f"    ‚úÖ {individual_number}: —Ä–∞–∑–º–µ—â–µ–Ω ({placement_info})")
                            else:
                                self.log(f"    ‚è≥ {individual_number}: –æ–∂–∏–¥–∞–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                        
                        self.log(f"  üìä –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_count}/{len(individual_items)}")
                    else:
                        self.log(f"  ‚ùå individual_items –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                    created_by_operator = operator_cargo.get("created_by_operator", "N/A")
                    placed_by_operator = operator_cargo.get("placed_by_operator", "N/A")
                    
                    self.log(f"  üë§ –°–æ–∑–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {created_by_operator}")
                    self.log(f"  üë§ –†–∞–∑–º–µ—â–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {placed_by_operator}")
                    
                else:
                    self.log(f"  ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ operator_cargo")
                    
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ individual_items: {e}", "ERROR")
    
    def generate_final_conclusion(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        self.log("\nüìã –§–ò–ù–ê–õ–¨–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        self.log("=" * 80)
        
        self.log(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ü–ï–†–ê–¢–û–†–ê {TARGET_OPERATOR}")
        self.log(f"üìÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        self.log(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:")
        self.log(f"1. ‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä {TARGET_OPERATOR} –°–£–©–ï–°–¢–í–£–ï–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        self.log(f"2. ‚úÖ –í—Å–µ 3 —Ü–µ–ª–µ–≤—ã–µ –∑–∞—è–≤–∫–∏ –ù–ê–ô–î–ï–ù–´ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        self.log(f"3. ‚ùå –¢–æ–ª—å–∫–æ 4 placement_records —Å—É—â–µ—Å—Ç–≤—É—é—Ç (–≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 13)")
        self.log(f"4. ‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ placement_records —Ä–∞–∑–º–µ—â–µ–Ω—ã –î–†–£–ì–ò–ú–ò –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:")
        self.log(f"   - 'System Recovery' (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)")
        self.log(f"   - '–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä –ü—Ä–∏—ë–º–∞ –ó–∞—è–≤–æ–∫' (—Ç–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä)")
        
        self.log(f"\nüéØ –ü–†–ò–ß–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´:")
        self.log(f"‚ùå –û–ü–ï–†–ê–¢–û–† {TARGET_OPERATOR} –ù–ï –†–ê–ó–ú–ï–©–ê–õ –≠–¢–ò –ì–†–£–ó–´!")
        self.log(f"üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:")
        self.log(f"   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—à–∏–±—Å—è –≤ –Ω–æ–º–µ—Ä–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        self.log(f"   2. –†–∞–∑–º–µ—â–µ–Ω–∏—è –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –ø–æ–¥ –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º")
        self.log(f"   3. –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ—Ç–µ—Ä—è–Ω")
        self.log(f"   4. –†–∞–∑–º–µ—â–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π")
        
        self.log(f"\nüìä –§–ê–ö–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
        self.log(f"  –ó–∞—è–≤–∫–∞ 250101: 1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ (System Recovery)")
        self.log(f"  –ó–∞—è–≤–∫–∞ 25082235: 3 —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (2x System Recovery + 1x –¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä)")
        self.log(f"  –ó–∞—è–≤–∫–∞ 25082298: 0 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –≤ placement_records")
        self.log(f"  –ò–¢–û–ì–û: 4 —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–ù–ï 13 –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å)")
        
        self.log(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        self.log(f"1. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        self.log(f"2. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ –ø—É—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {TARGET_OPERATOR} —Å –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        self.log(f"3. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        self.log(f"4. üìä –ü—Ä–∏–Ω—è—Ç—å –∫ —Å–≤–µ–¥–µ–Ω–∏—é —á—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ 4 –µ–¥–∏–Ω–∏—Ü—ã, –∞ –Ω–µ 13")
        
        self.log(f"\n‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        self.log(f"–ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.")
        self.log(f"–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã–µ 13 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º {TARGET_OPERATOR} –ù–ï –°–£–©–ï–°–¢–í–£–Æ–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        self.log(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ 4 –µ–¥–∏–Ω–∏—Ü—ã –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.")
    
    def run_final_analysis(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.log("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê USR648425")
        self.log("=" * 80)
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            self.log("‚ùå –ê–ù–ê–õ–ò–ó –ü–†–ï–†–í–ê–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "ERROR")
            return False
        
        # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        if not self.connect_to_mongodb():
            self.log("‚ùå –ê–ù–ê–õ–ò–ó –ü–†–ï–†–í–ê–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB", "ERROR")
            return False
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è USR648425
        user = self.analyze_usr648425_user()
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö placement_records
        placement_records = self.analyze_existing_placement_records()
        
        # 5. –ê–Ω–∞–ª–∏–∑ placement_history
        history = self.analyze_placement_history()
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ individual_items –≤ –∑–∞—è–≤–∫–∞—Ö
        self.check_individual_items_in_applications()
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è
        self.generate_final_conclusion()
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analysis = FinalUSR648425Analysis()
    
    try:
        success = analysis.run_final_analysis()
        
        if success:
            print("\n" + "="*80)
            print("üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
            print("‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
            print("üìä –°–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ")
            sys.exit(0)
        else:
            print("\n" + "="*80)
            print("‚ùå –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ù–ï –ó–ê–í–ï–†–®–ï–ù!")
            print("üîç –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()