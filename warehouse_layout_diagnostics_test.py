#!/usr/bin/env python3
"""
üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ

–ü–†–û–ë–õ–ï–ú–ê:
- –Ø—á–µ–π–∫–∏ 1-10 –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ TEMP-1755850073876-1 
- –†–µ–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ 25082235/02/02 (–∑–∞—è–≤–∫–∞ 25082235), —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º USR648425 –Ω–∞ —è—á–µ–π–∫—É –ë1-–ü2-–Ø9, –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è

–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –®–ê–ì–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ warehouse_operator (+79777888999/warehouse123)
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ /api/warehouses/{warehouse_id}/layout-with-cargo
4. –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TEMP-1755850073876-1
5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9
"""

import requests
import json
import sys
from datetime import datetime
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "https://placement-view.preview.emergentagent.com/api"
WAREHOUSE_OPERATOR_PHONE = "+79777888999"
WAREHOUSE_OPERATOR_PASSWORD = "warehouse123"

class WarehouseLayoutDiagnostics:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_info = None
        self.warehouse_id = None
        self.test_results = []
        
    def log_result(self, test_name: str, success: bool, details: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        status = "‚úÖ" if success else "‚ùå"
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        print(f"{status} {test_name}: {details}")
        
    def authenticate_warehouse_operator(self):
        """–®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫ warehouse_operator"""
        try:
            login_data = {
                "phone": WAREHOUSE_OPERATOR_PHONE,
                "password": WAREHOUSE_OPERATOR_PASSWORD
            }
            
            response = self.session.post(f"{BACKEND_URL}/auth/login", json=login_data)
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.session.headers.update({"Authorization": f"Bearer {self.token}"})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_response = self.session.get(f"{BACKEND_URL}/auth/me")
                if user_response.status_code == 200:
                    self.user_info = user_response.json()
                    user_name = self.user_info.get("full_name", "Unknown")
                    user_role = self.user_info.get("role", "Unknown")
                    
                    self.log_result(
                        "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø WAREHOUSE_OPERATOR",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è '{user_name}' (—Ä–æ–ª—å: {user_role}), JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    return True
                else:
                    self.log_result(
                        "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø WAREHOUSE_OPERATOR",
                        False,
                        f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: HTTP {user_response.status_code}"
                    )
                    return False
            else:
                self.log_result(
                    "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø WAREHOUSE_OPERATOR",
                    False,
                    f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}, {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø WAREHOUSE_OPERATOR",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            )
            return False
    
    def get_warehouse_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        try:
            response = self.session.get(f"{BACKEND_URL}/operator/warehouses")
            
            if response.status_code == 200:
                warehouses = response.json()
                if warehouses and len(warehouses) > 0:
                    warehouse = warehouses[0]
                    self.warehouse_id = warehouse.get("id")
                    warehouse_name = warehouse.get("name", "Unknown")
                    
                    self.log_result(
                        "–ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–õ–ê–î–ï",
                        True,
                        f"–ü–æ–ª—É—á–µ–Ω —Å–∫–ª–∞–¥ '{warehouse_name}' (ID: {self.warehouse_id})"
                    )
                    return True
                else:
                    self.log_result(
                        "–ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–õ–ê–î–ï",
                        False,
                        "–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç"
                    )
                    return False
            else:
                self.log_result(
                    "–ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–õ–ê–î–ï",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –°–ö–õ–ê–î–ï",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–æ–≤: {str(e)}"
            )
            return False
    
    def check_placement_records_collection(self):
        """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ placement_records"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            response = self.session.get(f"{BACKEND_URL}/operator/placement-progress")
            
            if response.status_code == 200:
                progress_data = response.json()
                total_units = progress_data.get("total_units", 0)
                placed_units = progress_data.get("placed_units", 0)
                
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –†–ê–ó–ú–ï–©–ï–ù–ò–Ø",
                    True,
                    f"–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {total_units}, –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_units}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É 25082235
                return self.check_specific_cargo_25082235()
            else:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –†–ê–ó–ú–ï–©–ï–ù–ò–Ø",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –†–ê–ó–ú–ï–©–ï–ù–ò–Ø",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {str(e)}"
            )
            return False
    
    def check_specific_cargo_25082235(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É 25082235"""
        try:
            # –ò—â–µ–º –∑–∞—è–≤–∫—É 25082235 –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
            response = self.session.get(f"{BACKEND_URL}/operator/cargo/fully-placed")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get("items", [])
                
                cargo_25082235 = None
                for item in items:
                    if item.get("cargo_number") == "25082235":
                        cargo_25082235 = item
                        break
                
                if cargo_25082235:
                    individual_units = cargo_25082235.get("individual_units", [])
                    placed_units = [unit for unit in individual_units if unit.get("status") == "placed"]
                    
                    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É 25082235/02/02
                    unit_02_02 = None
                    for unit in individual_units:
                        if unit.get("individual_number") == "25082235/02/02":
                            unit_02_02 = unit
                            break
                    
                    if unit_02_02:
                        placement_info = unit_02_02.get("placement_info", "")
                        placed_by = unit_02_02.get("placed_by", "")
                        
                        self.log_result(
                            "–ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 25082235",
                            True,
                            f"–ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! –ï–¥–∏–Ω–∏—Ü–∞ 25082235/02/02: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ='{placement_info}', –æ–ø–µ—Ä–∞—Ç–æ—Ä='{placed_by}'"
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ë1-–ü2-–Ø9
                        if "–ë1-–ü2-–Ø9" in placement_info or "1-2-9" in placement_info:
                            self.log_result(
                                "–ü–†–û–í–ï–†–ö–ê –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø –ë1-–ü2-–Ø9",
                                True,
                                f"–ï–¥–∏–Ω–∏—Ü–∞ 25082235/02/02 —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —è—á–µ–π–∫–µ: {placement_info}"
                            )
                        else:
                            self.log_result(
                                "–ü–†–û–í–ï–†–ö–ê –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø –ë1-–ü2-–Ø9",
                                False,
                                f"–ï–¥–∏–Ω–∏—Ü–∞ 25082235/02/02 —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —è—á–µ–π–∫–µ: {placement_info}"
                            )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ USR648425
                        if "USR648425" in placed_by or "–Æ–ª–¥–∞—à–µ–≤" in placed_by:
                            self.log_result(
                                "–ü–†–û–í–ï–†–ö–ê –û–ü–ï–†–ê–¢–û–†–ê USR648425",
                                True,
                                f"–ï–¥–∏–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {placed_by}"
                            )
                        else:
                            self.log_result(
                                "–ü–†–û–í–ï–†–ö–ê –û–ü–ï–†–ê–¢–û–†–ê USR648425",
                                False,
                                f"–ï–¥–∏–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: {placed_by}"
                            )
                        
                        return True
                    else:
                        self.log_result(
                            "–ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 25082235",
                            False,
                            f"–ï–¥–∏–Ω–∏—Ü–∞ 25082235/02/02 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞—è–≤–∫–µ. –ù–∞–π–¥–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: {len(individual_units)}"
                        )
                        return False
                else:
                    self.log_result(
                        "–ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 25082235",
                        False,
                        f"–ó–∞—è–≤–∫–∞ 25082235 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö. –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(items)}"
                    )
                    return False
            else:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 25082235",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: HTTP {response.status_code}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê –ó–ê–Ø–í–ö–ò 25082235",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–∫–∏ 25082235: {str(e)}"
            )
            return False
    
    def check_warehouse_layout_api(self):
        """–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ /api/warehouses/{warehouse_id}/layout-with-cargo"""
        try:
            if not self.warehouse_id:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê API –°–•–ï–ú–´ –°–ö–õ–ê–î–ê",
                    False,
                    "Warehouse ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                )
                return False
            
            response = self.session.get(f"{BACKEND_URL}/warehouses/{self.warehouse_id}/layout-with-cargo")
            
            if response.status_code == 200:
                layout_data = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                warehouse = layout_data.get("warehouse", {})
                layout = layout_data.get("layout", {})
                total_cargo = layout_data.get("total_cargo", 0)
                occupied_cells = layout_data.get("occupied_cells", 0)
                total_cells = layout_data.get("total_cells", 0)
                
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê API –°–•–ï–ú–´ –°–ö–õ–ê–î–ê",
                    True,
                    f"–°–∫–ª–∞–¥: {warehouse.get('name', 'Unknown')}, –í—Å–µ–≥–æ —è—á–µ–µ–∫: {total_cells}, –ó–∞–Ω—è—Ç–æ: {occupied_cells}, –ì—Ä—É–∑–æ–≤: {total_cargo}"
                )
                
                # –ò—â–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP- –¥–∞–Ω–Ω—ã–µ
                temp_cargo_found = self.find_temp_cargo_in_layout(layout)
                
                # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ 25082235/02/02 –≤ —è—á–µ–π–∫–µ –ë1-–ü2-–Ø9
                real_cargo_found = self.find_real_cargo_in_layout(layout)
                
                return True
            else:
                self.log_result(
                    "–ü–†–û–í–ï–†–ö–ê API –°–•–ï–ú–´ –°–ö–õ–ê–î–ê",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞: HTTP {response.status_code}, {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–†–û–í–ï–†–ö–ê API –°–•–ï–ú–´ –°–ö–õ–ê–î–ê",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞: {str(e)}"
            )
            return False
    
    def find_temp_cargo_in_layout(self, layout):
        """–®–∞–≥ 4: –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö TEMP-1755850073876-1"""
        temp_cargo_count = 0
        temp_cargo_examples = []
        
        try:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º, –ø–æ–ª–∫–∞–º –∏ —è—á–µ–π–∫–∞–º
            for block_key, block_data in layout.items():
                if isinstance(block_data, dict) and "shelves" in block_data:
                    for shelf_key, shelf_data in block_data["shelves"].items():
                        if isinstance(shelf_data, dict) and "cells" in shelf_data:
                            for cell_key, cell_data in shelf_data["cells"].items():
                                if isinstance(cell_data, dict) and cell_data.get("is_occupied"):
                                    cargo_info = cell_data.get("cargo_info", {})
                                    cargo_number = cargo_info.get("cargo_number", "")
                                    individual_number = cargo_info.get("individual_number", "")
                                    
                                    # –ò—â–µ–º TEMP- –Ω–æ–º–µ—Ä–∞
                                    if "TEMP-" in cargo_number or "TEMP-" in individual_number:
                                        temp_cargo_count += 1
                                        temp_cargo_examples.append({
                                            "location": f"{block_key}-{shelf_key}-{cell_key}",
                                            "cargo_number": cargo_number,
                                            "individual_number": individual_number
                                        })
            
            if temp_cargo_count > 0:
                examples_str = ", ".join([f"{ex['location']}:{ex['individual_number']}" for ex in temp_cargo_examples[:3]])
                self.log_result(
                    "–ü–û–ò–°–ö –§–ò–ö–¢–ò–í–ù–´–• TEMP- –î–ê–ù–ù–´–•",
                    False,
                    f"–ù–ê–ô–î–ï–ù–û {temp_cargo_count} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö TEMP- –∑–∞–ø–∏—Å–µ–π! –ü—Ä–∏–º–µ—Ä—ã: {examples_str}"
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∫—É
                self.log_result(
                    "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –û–ß–ò–°–¢–ö–ï",
                    False,
                    f"–¢–†–ï–ë–£–ï–¢–°–Ø –û–ß–ò–°–¢–ö–ê: –ù–∞–π–¥–µ–Ω–æ {temp_cargo_count} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å TEMP- –Ω–æ–º–µ—Ä–∞–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
                )
                return False
            else:
                self.log_result(
                    "–ü–û–ò–°–ö –§–ò–ö–¢–ò–í–ù–´–• TEMP- –î–ê–ù–ù–´–•",
                    True,
                    "–§–∏–∫—Ç–∏–≤–Ω—ã–µ TEMP- –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞"
                )
                return True
                
        except Exception as e:
            self.log_result(
                "–ü–û–ò–°–ö –§–ò–ö–¢–ò–í–ù–´–• TEMP- –î–ê–ù–ù–´–•",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ TEMP- –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            )
            return False
    
    def find_real_cargo_in_layout(self, layout):
        """–®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä—É–∑–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ë1-–ü2-–Ø9"""
        try:
            # –ò—â–µ–º —è—á–µ–π–∫—É –ë1-–ü2-–Ø9 (–±–ª–æ–∫ 1, –ø–æ–ª–∫–∞ 2, —è—á–µ–π–∫–∞ 9)
            target_locations = ["1-2-9", "–ë1-–ü2-–Ø9", "block_1-shelf_2-cell_9"]
            cargo_found = False
            
            for block_key, block_data in layout.items():
                if isinstance(block_data, dict) and "shelves" in block_data:
                    for shelf_key, shelf_data in block_data["shelves"].items():
                        if isinstance(shelf_data, dict) and "cells" in shelf_data:
                            for cell_key, cell_data in shelf_data["cells"].items():
                                cell_location = f"{block_key}-{shelf_key}-{cell_key}"
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ —è—á–µ–π–∫–µ –ë1-–ü2-–Ø9
                                if any(loc in cell_location for loc in target_locations):
                                    if cell_data.get("is_occupied"):
                                        cargo_info = cell_data.get("cargo_info", {})
                                        cargo_number = cargo_info.get("cargo_number", "")
                                        individual_number = cargo_info.get("individual_number", "")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ –≥—Ä—É–∑—É 25082235/02/02
                                        if "25082235" in cargo_number and "25082235/02/02" in individual_number:
                                            cargo_found = True
                                            self.log_result(
                                                "–ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–£–ó–ê 25082235/02/02",
                                                True,
                                                f"–†–µ–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ –Ω–∞–π–¥–µ–Ω –≤ —è—á–µ–π–∫–µ {cell_location}: {individual_number}"
                                            )
                                            return True
                                        else:
                                            self.log_result(
                                                "–ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–£–ó–ê 25082235/02/02",
                                                False,
                                                f"–í —è—á–µ–π–∫–µ {cell_location} –Ω–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π –≥—Ä—É–∑: {individual_number}"
                                            )
                                    else:
                                        self.log_result(
                                            "–ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–£–ó–ê 25082235/02/02",
                                            False,
                                            f"–Ø—á–µ–π–∫–∞ {cell_location} –ø—É—Å—Ç–∞ (is_occupied: false)"
                                        )
            
            if not cargo_found:
                self.log_result(
                    "–ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–£–ó–ê 25082235/02/02",
                    False,
                    "–†–µ–∞–ª—å–Ω—ã–π –≥—Ä—É–∑ 25082235/02/02 –ù–ï –ù–ê–ô–î–ï–ù –≤ —è—á–µ–π–∫–µ –ë1-–ü2-–Ø9 –≤ —Å—Ö–µ–º–µ —Å–∫–ª–∞–¥–∞"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–ü–û–ò–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–£–ó–ê 25082235/02/02",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä—É–∑–∞: {str(e)}"
            )
            return False
    
    def run_diagnostics(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ TAJLINE.TJ")
        print("=" * 100)
        
        start_time = time.time()
        
        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate_warehouse_operator():
            return False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
        if not self.get_warehouse_info():
            return False
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if not self.check_placement_records_collection():
            return False
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞
        if not self.check_warehouse_layout_api():
            return False
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r["success"]])
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        execution_time = time.time() - start_time
        
        print("\n" + "=" * 100)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        print(f"SUCCESS RATE: {success_rate:.1f}% ({successful_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã)")
        print(f"–í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        if success_rate >= 80:
            print("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –í–´–í–û–î: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ö–µ–º—ã —Å–∫–ª–∞–¥–∞!")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['details']}")
        
        return success_rate >= 80

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    diagnostics = WarehouseLayoutDiagnostics()
    success = diagnostics.run_diagnostics()
    
    if success:
        print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã—è–≤–∏–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã!")
        sys.exit(1)

if __name__ == "__main__":
    main()