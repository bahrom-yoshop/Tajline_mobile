#!/usr/bin/env python3
"""
Test script specifically for Individual Pricing Multi-Cargo Form functionality
"""

import requests
import json

class IndividualPricingTester:
    def __init__(self):
        self.base_url = "https://tajline-cargo-7.preview.emergentagent.com"
        self.admin_token = None
        
    def login_admin(self):
        """Login as admin to get token"""
        login_data = {
            "phone": "+79999888777",
            "password": "admin123"
        }
        
        response = requests.post(f"{self.base_url}/api/auth/login", json=login_data)
        if response.status_code == 200:
            self.admin_token = response.json()['access_token']
            print("‚úÖ Admin login successful")
            return True
        else:
            print(f"‚ùå Admin login failed: {response.status_code}")
            return False
    
    def test_individual_pricing_multi_cargo(self):
        """Test the enhanced multi-cargo form with individual pricing"""
        print("\nüéØ TESTING INDIVIDUAL PRICING MULTI-CARGO FORM")
        
        if not self.admin_token:
            print("‚ùå No admin token available")
            return False
        
        headers = {
            'Authorization': f'Bearer {self.admin_token}',
            'Content-Type': 'application/json'
        }
        
        # Test 1: Multi-cargo with individual prices (PRIMARY TEST SCENARIO)
        print("\n   üßÆ Testing Multi-Cargo with Individual Prices...")
        
        multi_cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
            "sender_phone": "+79999999999",
            "recipient_full_name": "–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
            "recipient_phone": "+992999999999",
            "recipient_address": "–î—É—à–∞–Ω–±–µ",
            "cargo_items": [
                {"cargo_name": "–î–æ–∫—É–º–µ–Ω—Ç—ã", "weight": 10.0, "price_per_kg": 60.0},
                {"cargo_name": "–û–¥–µ–∂–¥–∞", "weight": 25.0, "price_per_kg": 60.0},
                {"cargo_name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "weight": 100.0, "price_per_kg": 65.0}
            ],
            "description": "–†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –≥—Ä—É–∑–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏",
            "route": "moscow_to_tajikistan"
        }
        
        response = requests.post(
            f"{self.base_url}/api/operator/cargo/accept",
            json=multi_cargo_data,
            headers=headers
        )
        
        print(f"   üì° Response Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            cargo_number = result.get('cargo_number', 'N/A')
            total_weight = result.get('weight', 0)
            total_cost = result.get('declared_value', 0)
            cargo_name = result.get('cargo_name', 'N/A')
            description = result.get('description', '')
            
            print(f"   ‚úÖ Multi-cargo with individual prices created: {cargo_number}")
            print(f"   üìä Total weight: {total_weight} kg")
            print(f"   üí∞ Total cost: {total_cost} —Ä—É–±")
            print(f"   üè∑Ô∏è  Combined cargo name: {cargo_name}")
            
            # Expected calculations:
            # –ì—Ä—É–∑ 1: 10 –∫–≥ √ó 60 —Ä—É–±/–∫–≥ = 600 —Ä—É–±
            # –ì—Ä—É–∑ 2: 25 –∫–≥ √ó 60 —Ä—É–±/–∫–≥ = 1500 —Ä—É–±  
            # –ì—Ä—É–∑ 3: 100 –∫–≥ √ó 65 —Ä—É–±/–∫–≥ = 6500 —Ä—É–±
            # –û–±—â–∏–π –≤–µ—Å: 135 –∫–≥
            # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 8600 —Ä—É–±
            expected_weight = 10.0 + 25.0 + 100.0  # 135 kg
            expected_cost = (10.0 * 60.0) + (25.0 * 60.0) + (100.0 * 65.0)  # 600 + 1500 + 6500 = 8600 rubles
            expected_name = "–î–æ–∫—É–º–µ–Ω—Ç—ã, –û–¥–µ–∂–¥–∞, –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"
            
            print(f"   üßÆ Expected: {expected_weight}kg, {expected_cost}—Ä—É–±")
            print(f"   üßÆ Actual: {total_weight}kg, {total_cost}—Ä—É–±")
            
            # Verify calculations
            if (abs(total_weight - expected_weight) < 0.01 and 
                abs(total_cost - expected_cost) < 0.01 and 
                cargo_name == expected_name):
                print("   ‚úÖ Individual pricing calculations verified correctly")
                
                # Verify detailed description includes individual cost breakdown
                expected_breakdown_items = [
                    "1. –î–æ–∫—É–º–µ–Ω—Ç—ã - 10.0 –∫–≥ √ó 60.0 —Ä—É–±/–∫–≥ = 600.0 —Ä—É–±",
                    "2. –û–¥–µ–∂–¥–∞ - 25.0 –∫–≥ √ó 60.0 —Ä—É–±/–∫–≥ = 1500.0 —Ä—É–±", 
                    "3. –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ - 100.0 –∫–≥ √ó 65.0 —Ä—É–±/–∫–≥ = 6500.0 —Ä—É–±",
                    "–û–±—â–∏–π –≤–µ—Å: 135.0 –∫–≥",
                    "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 8600.0 —Ä—É–±"
                ]
                
                breakdown_verified = all(item in description for item in expected_breakdown_items)
                if breakdown_verified:
                    print("   ‚úÖ Individual cost breakdown verified in description")
                    return True
                else:
                    print("   ‚ùå Individual cost breakdown missing or incorrect")
                    print(f"   üìÑ Description: {description[:300]}...")
                    return False
            else:
                print(f"   ‚ùå Individual pricing calculation error")
                return False
        else:
            print(f"   ‚ùå Request failed with status {response.status_code}")
            try:
                error_detail = response.json()
                print(f"   üìÑ Error: {error_detail}")
            except:
                print(f"   üìÑ Raw response: {response.text[:200]}")
            return False
    
    def test_backward_compatibility(self):
        """Test single cargo mode for backward compatibility"""
        print("\n   üì¶ Testing Single Cargo Mode (Backward Compatibility)...")
        
        if not self.admin_token:
            print("‚ùå No admin token available")
            return False
        
        headers = {
            'Authorization': f'Bearer {self.admin_token}',
            'Content-Type': 'application/json'
        }
        
        single_cargo_data = {
            "sender_full_name": "–¢–µ—Å—Ç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
            "sender_phone": "+79999999999",
            "recipient_full_name": "–¢–µ—Å—Ç –ü–æ–ª—É—á–∞—Ç–µ–ª—å",
            "recipient_phone": "+992999999999",
            "recipient_address": "–î—É—à–∞–Ω–±–µ",
            "cargo_name": "–î–æ–∫—É–º–µ–Ω—Ç—ã",
            "weight": 5.0,
            "declared_value": 300.0,
            "description": "–û–¥–∏–Ω–æ—á–Ω—ã–π –≥—Ä—É–∑",
            "route": "moscow_to_tajikistan"
        }
        
        response = requests.post(
            f"{self.base_url}/api/operator/cargo/accept",
            json=single_cargo_data,
            headers=headers
        )
        
        print(f"   üì° Response Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            cargo_number = result.get('cargo_number', 'N/A')
            weight = result.get('weight', 0)
            declared_value = result.get('declared_value', 0)
            cargo_name = result.get('cargo_name', 'N/A')
            
            print(f"   ‚úÖ Single cargo created: {cargo_number}")
            print(f"   üìä Weight: {weight} kg, Value: {declared_value} —Ä—É–±")
            print(f"   üè∑Ô∏è  Cargo name: {cargo_name}")
            
            # Verify backward compatibility fields
            if weight == 5.0 and declared_value == 300.0 and cargo_name == "–î–æ–∫—É–º–µ–Ω—Ç—ã":
                print("   ‚úÖ Backward compatibility verified")
                return True
            else:
                print("   ‚ùå Backward compatibility failed")
                return False
        else:
            print(f"   ‚ùå Request failed with status {response.status_code}")
            try:
                error_detail = response.json()
                print(f"   üìÑ Error: {error_detail}")
            except:
                print(f"   üìÑ Raw response: {response.text[:200]}")
            return False
    
    def run_tests(self):
        """Run all individual pricing tests"""
        print("üöÄ Starting Individual Pricing Multi-Cargo Form Tests...")
        
        if not self.login_admin():
            return False
        
        test1_result = self.test_individual_pricing_multi_cargo()
        test2_result = self.test_backward_compatibility()
        
        print("\n" + "="*60)
        print("üìä INDIVIDUAL PRICING TEST RESULTS")
        print("="*60)
        print(f"‚úÖ Individual Pricing Multi-Cargo: {'PASSED' if test1_result else 'FAILED'}")
        print(f"‚úÖ Backward Compatibility: {'PASSED' if test2_result else 'FAILED'}")
        print(f"üìà Overall Success: {'PASSED' if test1_result and test2_result else 'FAILED'}")
        
        return test1_result and test2_result

if __name__ == "__main__":
    tester = IndividualPricingTester()
    success = tester.run_tests()
    exit(0 if success else 1)