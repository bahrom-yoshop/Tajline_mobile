#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û API: –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ TAJLINE.TJ

–ö–û–ù–¢–ï–ö–°–¢:
–û–±–Ω–æ–≤–ª–µ–Ω API endpoint GET /api/operator/cargo/available-for-placement —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤:
1. –ì–æ—Ä–æ–¥ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–∞ (delivery_city)
2. –°–∫–ª–∞–¥-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Üí —Å–∫–ª–∞–¥-–ø–æ–ª—É—á–∞—Ç–µ–ª—å (source_warehouse_name, target_warehouse_name)  
3. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –≥—Ä—É–∑–∞ (created_date, accepted_date)
4. –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–∑–∞ (delivery_method)
5. –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (cargo_items) 
6. –°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä—É–∑–∞ (placement_status, placed_count)
7. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (total_quantity, total_placed, placement_progress)

–ù–û–í–´–ï ENDPOINTS:
- GET /api/operator/cargo/{cargo_id}/placement-status - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
- POST /api/operator/cargo/{cargo_id}/update-placement-status - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ

–¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ (+79777888999/warehouse123)
2. GET /api/operator/cargo/available-for-placement - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö endpoints  
4. GET /api/operator/cargo/{cargo_id}/placement-status - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ endpoint
5. POST /api/operator/cargo/{cargo_id}/update-placement-status - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≥—Ä—É–∑–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏, —Å–∫–ª–∞–¥–∞—Ö –∏ —Å—Ç–∞—Ç—É—Å–∞—Ö.
"""

import requests
import json
import sys
from datetime import datetime
from typing import Dict, Any, Optional, List

# Configuration
BACKEND_URL = "https://logistics-dash-6.preview.emergentagent.com/api"

# Test credentials
ADMIN_CREDENTIALS = {
    "phone": "+79999888777",
    "password": "admin123"
}

WAREHOUSE_OPERATOR_CREDENTIALS = {
    "phone": "+79777888999",
    "password": "warehouse123"
}

class CargoPlacementAPITester:
    def __init__(self):
        self.session = requests.Session()
        self.admin_token = None
        self.operator_token = None
        self.test_results = []
        self.found_cargo_numbers = []
        
    def log_result(self, test_name: str, success: bool, message: str, details: Optional[Dict] = None):
        """Log test result"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "details": details or {},
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}: {message}")
        if details and not success:
            print(f"   Details: {json.dumps(details, indent=2, ensure_ascii=False)}")
    
    def authenticate_admin(self) -> bool:
        """Authenticate as admin"""
        print("\nüîê STEP 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê")
        print("=" * 60)
        
        try:
            response = self.session.post(
                f"{BACKEND_URL}/auth/login",
                json=ADMIN_CREDENTIALS,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.admin_token = data.get("access_token")
                if self.admin_token:
                    self.session.headers.update({
                        "Authorization": f"Bearer {self.admin_token}"
                    })
                    user_info = data.get("user", {})
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Admin')} (—Ä–æ–ª—å: {user_info.get('role')}, –Ω–æ–º–µ—Ä: {user_info.get('user_number')})"
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def authenticate_warehouse_operator(self) -> bool:
        """Authenticate as warehouse operator"""
        print("\nüè≠ STEP 2: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –û–ü–ï–†–ê–¢–û–†–ê –°–ö–õ–ê–î–ê")
        print("=" * 60)
        
        try:
            # Create new session for operator
            operator_session = requests.Session()
            response = operator_session.post(
                f"{BACKEND_URL}/auth/login",
                json=WAREHOUSE_OPERATOR_CREDENTIALS,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                self.operator_token = data.get("access_token")
                if self.operator_token:
                    user_info = data.get("user", {})
                    self.log_result(
                        "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞",
                        True,
                        f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {user_info.get('full_name', 'Operator')} (—Ä–æ–ª—å: {user_info.get('role')}, –Ω–æ–º–µ—Ä: {user_info.get('user_number')})"
                    )
                    return True
                else:
                    self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"HTTP {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            self.log_result("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∫–ª–∞–¥–∞", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_available_for_placement_endpoint(self) -> bool:
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: GET /api/operator/cargo/available-for-placement"""
        print("\nüéØ STEP 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - ENDPOINT AVAILABLE-FOR-PLACEMENT")
        print("=" * 60)
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = requests.get(
                f"{BACKEND_URL}/operator/cargo/available-for-placement",
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # Check response structure
                has_items = "items" in data
                has_pagination = any(key in data for key in ["total_count", "page", "per_page", "total_pages"])
                
                items = data.get("items", [])
                total_count = data.get("total_count", len(items))
                
                # Analyze cargo statuses
                status_counts = {}
                awaiting_placement_count = 0
                paid_count = 0
                sample_cargo = None
                
                for item in items:
                    status = item.get("processing_status", "unknown")
                    status_counts[status] = status_counts.get(status, 0) + 1
                    
                    if status == "awaiting_placement":
                        awaiting_placement_count += 1
                    elif status == "paid":
                        paid_count += 1
                    
                    if not sample_cargo:
                        sample_cargo = item
                        cargo_number = item.get("cargo_number")
                        if cargo_number:
                            self.found_cargo_numbers.append(cargo_number)
                
                # Collect all cargo numbers for testing
                for item in items:
                    cargo_number = item.get("cargo_number")
                    if cargo_number and cargo_number not in self.found_cargo_numbers:
                        self.found_cargo_numbers.append(cargo_number)
                
                success = True
                message_parts = []
                
                if total_count == 0:
                    success = False
                    message_parts.append("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –°–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ü–£–°–¢–û–ô")
                else:
                    message_parts.append(f"–ù–∞–π–¥–µ–Ω–æ {total_count} –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                
                if not has_items:
                    success = False
                    message_parts.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'items' –≤ –æ—Ç–≤–µ—Ç–µ")
                
                if not has_pagination:
                    message_parts.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
                
                message = "; ".join(message_parts)
                
                details = {
                    "total_count": total_count,
                    "has_items": has_items,
                    "has_pagination": has_pagination,
                    "status_counts": status_counts,
                    "awaiting_placement_count": awaiting_placement_count,
                    "paid_count": paid_count,
                    "sample_cargo": sample_cargo,
                    "found_cargo_numbers": self.found_cargo_numbers[:5],  # First 5 for testing
                    "response_structure": list(data.keys())
                }
                
                self.log_result(
                    "GET /api/operator/cargo/available-for-placement",
                    success,
                    message,
                    details
                )
                
                return success
                
            else:
                self.log_result(
                    "GET /api/operator/cargo/available-for-placement",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "GET /api/operator/cargo/available-for-placement",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def test_general_operator_cargo_list(self) -> bool:
        """–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: GET /api/operator/cargo - –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        print("\nüìã STEP 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –û–ë–©–ò–ô –°–ü–ò–°–û–ö –ì–†–£–ó–û–í –û–ü–ï–†–ê–¢–û–†–ê")
        print("=" * 60)
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            response = requests.get(
                f"{BACKEND_URL}/operator/cargo",
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                
                # Handle different response formats
                if isinstance(data, dict):
                    items = data.get("items", data.get("cargo", []))
                    total_count = data.get("total_count", len(items))
                elif isinstance(data, list):
                    items = data
                    total_count = len(items)
                else:
                    items = []
                    total_count = 0
                
                # Analyze statuses
                status_counts = {}
                awaiting_placement_cargo = []
                
                for item in items:
                    status = item.get("processing_status", "unknown")
                    status_counts[status] = status_counts.get(status, 0) + 1
                    
                    if status in ["awaiting_placement", "paid"]:
                        awaiting_placement_cargo.append({
                            "cargo_number": item.get("cargo_number"),
                            "status": status,
                            "weight": item.get("weight"),
                            "sender_name": item.get("sender_full_name")
                        })
                        
                        cargo_number = item.get("cargo_number")
                        if cargo_number and cargo_number not in self.found_cargo_numbers:
                            self.found_cargo_numbers.append(cargo_number)
                
                message = f"–ù–∞–π–¥–µ–Ω–æ {total_count} –≥—Ä—É–∑–æ–≤ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"
                
                details = {
                    "total_count": total_count,
                    "status_counts": status_counts,
                    "awaiting_placement_cargo": awaiting_placement_cargo[:10],  # First 10
                    "response_type": type(data).__name__,
                    "response_structure": list(data.keys()) if isinstance(data, dict) else "list"
                }
                
                self.log_result(
                    "GET /api/operator/cargo",
                    True,
                    message,
                    details
                )
                
                return True
                
            else:
                self.log_result(
                    "GET /api/operator/cargo",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "GET /api/operator/cargo",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def test_cargo_tracking_for_scanning(self) -> bool:
        """–ü–†–û–í–ï–†–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤"""
        print("\nüîç STEP 5: –ü–†–û–í–ï–†–ö–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–ú–ï–†–û–í –ì–†–£–ó–û–í")
        print("=" * 60)
        
        if not self.found_cargo_numbers:
            self.log_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤",
                False,
                "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return False
        
        successful_scans = 0
        failed_scans = 0
        scan_results = []
        
        # Test first 5 cargo numbers
        test_cargo_numbers = self.found_cargo_numbers[:5]
        
        for cargo_number in test_cargo_numbers:
            try:
                headers = {"Authorization": f"Bearer {self.operator_token}"}
                response = requests.get(
                    f"{BACKEND_URL}/cargo/track/{cargo_number}",
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    data = response.json()
                    successful_scans += 1
                    scan_results.append({
                        "cargo_number": cargo_number,
                        "status": "success",
                        "data": {
                            "cargo_name": data.get("cargo_name"),
                            "weight": data.get("weight"),
                            "processing_status": data.get("processing_status"),
                            "sender_name": data.get("sender_full_name")
                        }
                    })
                    print(f"   ‚úÖ –ì—Ä—É–∑ {cargo_number}: –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                else:
                    failed_scans += 1
                    scan_results.append({
                        "cargo_number": cargo_number,
                        "status": "failed",
                        "error": f"HTTP {response.status_code}"
                    })
                    print(f"   ‚ùå –ì—Ä—É–∑ {cargo_number}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    
            except Exception as e:
                failed_scans += 1
                scan_results.append({
                    "cargo_number": cargo_number,
                    "status": "error",
                    "error": str(e)
                })
                print(f"   ‚ùå –ì—Ä—É–∑ {cargo_number}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {str(e)}")
        
        success = successful_scans > 0
        message = f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(test_cargo_numbers)} –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤: {successful_scans} —É—Å–ø–µ—à–Ω–æ, {failed_scans} –Ω–µ—É–¥–∞—á–Ω–æ"
        
        details = {
            "tested_cargo_count": len(test_cargo_numbers),
            "successful_scans": successful_scans,
            "failed_scans": failed_scans,
            "scan_results": scan_results,
            "all_found_cargo_numbers": self.found_cargo_numbers
        }
        
        self.log_result(
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤",
            success,
            message,
            details
        )
        
        return success
    
    def create_test_cargo_for_placement(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        print("\nüì¶ STEP 6: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ì–†–£–ó–ê –î–õ–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø")
        print("=" * 60)
        
        try:
            headers = {"Authorization": f"Bearer {self.operator_token}"}
            
            # Create test cargo with paid status
            cargo_data = {
                "sender_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏–µ",
                "sender_phone": "+79991112233",
                "recipient_full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—É—á–∞—Ç–µ–ª—å –†–∞–∑–º–µ—â–µ–Ω–∏–µ",
                "recipient_phone": "+992900123456",
                "recipient_address": "–î—É—à–∞–Ω–±–µ, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è –†–∞–∑–º–µ—â–µ–Ω–∏–µ, 123",
                "weight": 15.5,
                "cargo_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "declared_value": 2500.0,
                "description": "–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                "route": "moscow_to_tajikistan",
                "payment_method": "cash",
                "payment_amount": 2500.0
            }
            
            response = requests.post(
                f"{BACKEND_URL}/operator/cargo/accept",
                json=cargo_data,
                headers=headers,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                cargo_id = data.get("id")
                cargo_number = data.get("cargo_number")
                processing_status = data.get("processing_status")
                
                if cargo_number:
                    self.found_cargo_numbers.append(cargo_number)
                
                message = f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑: {cargo_number} (—Å—Ç–∞—Ç—É—Å: {processing_status})"
                
                details = {
                    "cargo_id": cargo_id,
                    "cargo_number": cargo_number,
                    "processing_status": processing_status,
                    "payment_method": data.get("payment_method"),
                    "weight": data.get("weight"),
                    "declared_value": data.get("declared_value")
                }
                
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞",
                    True,
                    message,
                    details
                )
                
                return True
            else:
                self.log_result(
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞",
                    False,
                    f"HTTP {response.status_code}: {response.text}"
                )
                return False
                
        except Exception as e:
            self.log_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä—É–∑–∞",
                False,
                f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
            )
            return False
    
    def run_comprehensive_test(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINT –î–õ–Ø –°–ü–ò–°–ö–ê –ì–†–£–ó–û–í, –û–ñ–ò–î–ê–Æ–©–ò–• –†–ê–ó–ú–ï–©–ï–ù–ò–Ø –í TAJLINE.TJ")
        print("=" * 100)
        print("–ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR –∫–æ–¥–æ–≤ –≥—Ä—É–∑–æ–≤ —Å–∏—Å—Ç–µ–º–∞ –ø–∏—à–µ—Ç '–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ'")
        print("–¶–ï–õ–¨: –ù–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–µ cargo_number –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
        print("=" * 100)
        
        # Step 1: Admin authentication
        if not self.authenticate_admin():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return False
        
        # Step 2: Warehouse operator authentication
        if not self.authenticate_warehouse_operator():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–ª–∞–¥–∞")
            return False
        
        # Step 3: Test main endpoint
        main_endpoint_success = self.test_available_for_placement_endpoint()
        
        # Step 4: Test general cargo list
        general_list_success = self.test_general_operator_cargo_list()
        
        # Step 5: Create test cargo if needed
        if not self.found_cargo_numbers:
            print("\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–∑...")
            self.create_test_cargo_for_placement()
            # Re-test main endpoint after creating cargo
            main_endpoint_success = self.test_available_for_placement_endpoint()
        
        # Step 6: Test cargo scanning
        scanning_success = self.test_cargo_tracking_for_scanning()
        
        # Generate summary
        self.generate_final_summary()
        
        # Return overall success
        return main_endpoint_success and len(self.found_cargo_numbers) > 0
    
    def generate_final_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 100)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 100)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results if result["success"])
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ù–û–ú–ï–†–ê –ì–†–£–ó–û–í –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø:")
        if self.found_cargo_numbers:
            for i, cargo_number in enumerate(self.found_cargo_numbers[:10], 1):
                print(f"   {i}. {cargo_number}")
            if len(self.found_cargo_numbers) > 10:
                print(f"   ... –∏ –µ—â–µ {len(self.found_cargo_numbers) - 10} –Ω–æ–º–µ—Ä–æ–≤")
        else:
            print("   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        
        print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        # Check main endpoint
        main_test = next((r for r in self.test_results if "available-for-placement" in r["test"]), None)
        if main_test and main_test["success"]:
            print("   ‚úÖ Endpoint /api/operator/cargo/available-for-placement —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå Endpoint /api/operator/cargo/available-for-placement –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # Check cargo availability
        if self.found_cargo_numbers:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.found_cargo_numbers)} –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            print("   ‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # Check scanning capability
        scan_test = next((r for r in self.test_results if "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" in r["test"]), None)
        if scan_test and scan_test["success"]:
            print("   ‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("   ‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
        critical_issues = []
        
        if not main_test or not main_test["success"]:
            critical_issues.append("Endpoint available-for-placement –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if not self.found_cargo_numbers:
            critical_issues.append("–ù–µ—Ç –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π")
        
        if not scan_test or not scan_test["success"]:
            critical_issues.append("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if critical_issues:
            for issue in critical_issues:
                print(f"   ‚ùå {issue}")
        else:
            print("   ‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if not self.found_cargo_numbers:
            print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'paid' –∏–ª–∏ 'awaiting_placement'")
            print("   2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∫–ª–∞–¥–∞–º —Å –≥—Ä—É–∑–∞–º–∏")
            print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ endpoint available-for-placement")
        else:
            print("   1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞")
            print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å frontend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π workflow —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")

if __name__ == "__main__":
    tester = CargoPlacementAPITester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        sys.exit(0)
    else:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
        sys.exit(1)